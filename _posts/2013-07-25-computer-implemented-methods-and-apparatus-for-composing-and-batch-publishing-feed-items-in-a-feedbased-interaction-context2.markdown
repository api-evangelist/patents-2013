---

title: Computer implemented methods and apparatus for composing and batch publishing feed items in a feed-based interaction context
abstract: Disclosed are methods, apparatus, systems, and computer-readable storage media for composing and batch publishing feed items in a user interface in a feed-based interaction context. In some implementations, a computing device provides a first prompt for display in a first user interface component, which is configured to display unpublished feed items. The computing device receives, at the first prompt, first feed item data for a first feed item. Responsive to a request to compose a second feed item, the computing device displays in the first user interface component a second prompt for second feed item data without publishing the first feed item. The computing device receives, at the second prompt, second feed item data for a second feed item of a first record, the first and second feed items being related to the first record.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569060&OS=09569060&RS=09569060
owner: salesforce.com, inc.
number: 09569060
owner_city: San Francisco
owner_country: US
publication_date: 20130725
---
This application claims priority to and commonly assigned U.S. Provisional Patent Application No. 61 675 442 filed on Jul. 25 2012 entitled SYSTEM AND METHOD FOR PROVIDING AN IMPROVED SERVICE CONSOLE by Al Alami et al. which is hereby incorporated by reference in its entirety and for all purposes.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present disclosure relates generally to on demand services provided over a data network such as the Internet and more specifically to a console application for accessing and interacting with information stored in the data network for instance in a database.

Organizations typically employ many different types of software and computing technologies to meet their computing needs. However installing and maintaining software on an organization s own computer systems may involve one or more drawbacks. For example when software must be installed on computer systems within the organization the installation process often requires significant time commitments since organization personnel may need to separately access each computer. Once installed the maintenance of such software typically requires significant additional resources. Each installation of the software may need to be separately monitored upgraded and or maintained. Further organization personnel may need to protect each installed piece of software against viruses and other malevolent code. Given the difficulties in updating and maintaining software installed on many different computer systems it is common for software to become outdated. Also the organization will likely need to ensure that the various software programs installed on each computer system are compatible. Compatibility problems are compounded by frequent upgrading which may result in different versions of the same software being used at different computer systems in the same organization.

Accordingly organizations increasingly prefer to use on demand services accessible via the Internet rather than software installed on in house computer systems. On demand services often termed cloud computing services take advantage of increased network speeds and decreased network latency to provide shared resources software and information to computers and other devices upon request. Cloud computing typically involves over the Internet provision of dynamically scalable and often virtualized resources. Technological details can be abstracted from the users who no longer have need for expertise in or control over the technology infrastructure in the cloud that supports them.

Applications of systems and methods according to one or more implementations are described in this section. These examples are being provided solely to add context and aid in the understanding of the present disclosure. It will thus be apparent to one skilled in the art that the techniques described herein may be practiced without some or all of these specific details. In other instances well known process steps have not been described in detail in order to avoid unnecessarily obscuring the present disclosure. Other applications are possible such that the following examples should not be taken as definitive or limiting either in scope or setting.

In the following detailed description references are made to the accompanying drawings which form a part of the description and in which are shown by way of illustration specific implementations. Although these implementations are described in sufficient detail to enable one skilled in the art to practice the disclosure it is understood that these examples are not limiting such that other implementations may be used and changes may be made without departing from the spirit and scope of the disclosure.

As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers.

Some implementations are directed to a user interface console provided at a client machine for interacting with object record information stored in a multitenant database at a server in an on demand service environment. Some implementations of the apparatuses systems and methods disclosed herein are adapted for use in other types of devices systems or environments as applicable such that their use is applicable in broader applications than the environments and contexts described herein.

In the following figures methods and apparatus applicable to various service cloud console configurations and their associated components are described. In one or more implementations the service cloud console may be used to provide an on demand web based system for accessing data and applications. The service cloud console alternately described as the console the console application the agent console or the service desk includes a user interface provided at a client machine for interacting with object record information stored in storage facilities such as databases at a server.

In one or more implementations an agent of an organization who is using an instance of a service cloud console application may receive a call from a client who has an account with the organization. Using the service cloud console application the agent may open close edit and or save object records associated with the client s account.

Certain components and services of the service cloud console may be used to replace software for accessing data and managing customer records typically installed on separate computers in an organization. For example the service cloud console may replace one or more CRM programs call center programs etc. By using the service cloud console an agent for an organization can access data associated with a client of the organization.

Use of the service cloud console may be provided over data networks such as the Internet to a plurality of different organizations. The data network in which implementations of the service cloud console is implemented may include other wide area networks WAN and local area networks LAN or portions thereof. In one or more implementations different organizations may customize the service cloud console to suit their own needs. For example an organization may create more than one console application adjust the settings of a console application apply a name to a console application etc.

In one or more implementations the service cloud console may include one or more graphical user interfaces tailored to maintain the context of an account using a tab metaphor. Examples of selected portions of such a graphical user interface according to one or more implementations are shown . The service cloud console may be componentized such that each tab can display and or refer to all or selected portions of groups of information. For example a tab or component in the service cloud console may display all or selected portions of an individual row of data in a database data integrated from an external system or any other arrangement of data.

The system may be both easy for agents to use and easy for administrators to manage. One or more implementations may facilitate speed and simplicity giving the agent the ability to navigate through the interface with a limited number of clicks and without a great deal of training. One or more implementations may allow the agent to maintain the context or frame of reference of a current call and prior calls in an easily navigable interface. One or more implementations may allow the integration of external systems into a single fluid agent interface. One or more implementations may improve access to a knowledge base supplying the agent with the information he needs when he needs it.

In one or more implementations certain components and services of the service cloud console may reduce the number of clicks an agent needed to make to perform a task. An agent s interaction with the console application is made as fast and as fluid as possible. Further the console application maintains as much context as possible so the agent always knows what he s doing and where he s been in the console application.

The following several paragraphs describe use cases for a fictional individual named Aaron. Aaron is a customer call center agent who uses call center software as part of his work. One or more implementations described herein may remedy one or more of the challenges faced by agents such as Aaron.

Aaron is handling a telephone call from a customer. Aaron also has a growing queue of cases that have been assigned to him to handle. Aaron has opened a case record for the customer he is helping in a primary tab of a service console page such as a page displayed in a browser window using salesforce.com s Service Cloud Console service or other customer relationship management CRM application or cloud based CRM service provided by salesforce.com or provided by other service providers. In this example the service console page is displayed in a user interface UI on Aaron s computing device. Aaron would like to be able to discover the issue that the customer is having view the latest status of what has been done for this customer on this issue do some research and perform a series of actions on the case at hand and he would like to do all of this with as few context switches as possible and with as few clicks as possible in a logical user friendly way. The series of actions that he may want to execute for a case may include writing an email to the customer writing an internal note for his reference or for other agents reference changing the status of the case from pending to resolved or attaching a relevant article or file to the case. Aaron would like to be able to perform any or all of these actions in a seamless fluid process so that he can quickly resolve the case and move on to the next case in his queue.

Using some of the disclosed implementations Aaron may open a case causing information about the case to populate the user interface that he is viewing. In one area of the user interface Aaron may view the latest updates to the case to ascertain the status of the case. Other agents may have worked on this case before or done some research and attached some notes or files to the case. In this area of the user interface Aaron can view all of the recent updates to the case to quickly orient himself to determine what he needs to do next. In another area of the user interface Aaron can perform some research on the issue finding articles or experts to assist with resolving the issue. In yet another area of the user interface Aaron can open up any number of prompts to write an email to the customer to write an internal note for the case to change the status of the case or to attach a file to the case. Rather than having to open up one prompt write an email and publish the email before opening up another prompt Aaron is able to open up as many prompts as he would like to compose and then just publish them all together with one click. For example after discussing the issue with the customer Aaron may find a helpful article to give to the customer to resolve his issue. Aaron may then compose an email to the customer sending over the article compose an internal note identifying the article as being helpful for resolving the issue and change the status of the case from pending to resolved. He compose each of these updates and then click one button to publish all of them. In some cases composing and publishing the updates may be all that Aaron needs to do for that particular case so clicking on the button to publish the updates may also cause the user interface to present the next case in Aaron s queue.

The disclosed implementations provide Aaron a streamlined workflow for dealing with cases that involves fewer context switches and lower click counts reduces repetitive tasks such as publishing each update one at a time or selecting the next case in a queue and provides a more fluid publishing process all saving Aaron valuable time.

While the disclosed implementations are often described with reference to the example of a case as in Aaron s scenario outlined above those skilled in the art should appreciate that a case is one of many examples of database records. The disclosed techniques are equally applicable to other various types of records files objects and other data constructs that may be stored in a database or other suitable storage medium. For example CRM objects such as leads accounts opportunities contracts and contacts may be substituted for case records in the examples disclosed herein.

In one or more implementations the user interface of the service cloud console may include one or more of an overview area a main view area a context view area a sidebar area a marquee area and or a highlights panel . The overview area may be a container in which components associated with the service cloud console such as components and are displayed. The overview area may show components that span a large set of information e.g. a list view .

The main view may show the detail or edit page of a single object or a search results page. The context view may show small but editable views of objects that are related to the object in the main view. The sidebar may be positioned on the side of the screen and may include an ability to handle a wide range of components. The marquee may display a limited amount e.g. one line of informational text.

In some implementations the main view may display various information associated with one or more object records that are currently open as a primary tab alternately referred to as a workspace in the console application. The main view may display one or more secondary tabs that are each associated with the primary tab that has focus in the console application. When a different primary tab e.g. primary tab is selected then the one or more secondary tabs associated with the different primary tab may be displayed. The main view may include a UI tool such as a vertical and or horizontal scroll bar to navigate the displayed page.

In one or more implementations the main view may rarely be overridden. For instance search results and list views shown in the main view may open new tabs rather than overriding the content of the main view so that when the user navigates to an object the results of the search are not lost. Similarly sub operations like creating tasks or sending emails may not override the content of the main view but may use a technique such as an HTML overlay to maintain context. The main view may support inline editing.

The highlights panel may include an area in the workspace e.g. at the top which gives the user information about the object controlling that workspace. A mutton may be displayed in the highlights panel . The mutton alternately referred to as a multi button may be a button that acts as a dropdown menu containing multiple functions. The mutton may allow the agent to perform actions that would normally be performed from buttons on related lists of the layout. The mutton may include various buttons which can be shown for example if the entity happens to be in a related list on the layout of the workspace entity and if the button is shown in the layout for that related list.

One or more implementations may include a sidebar that may be displayed on the side of the interface as shown in . The sidebar may be a separate layout such that there is a specific console sidebar component that is rendered in the console. The setup of the sidebar layout may be available in the console layout and may use concepts similar to that used for home page layouts.

In one or more implementations when displaying a record in the main view area the sidebar may display one or more related lists as shown in . The items displayed in the sidebar may be navigated by a UI tool such as a vertical scroll bar if the number of items exceeds the vertical space. In certain situations such as when a record is being edited the sidebar may be hidden.

The sidebar may allow handling of various types of components so it may include an interface e.g. a tab or accordion widget to manage these components effectively e.g. displaying them without sending them below the fold of the page . The sidebar may include a pluggable interface that has knowledge of the current context of the main page so that third parties can create custom sidebar components.

The marquee may be a short area e.g. one character high that may be shown at the top and or bottom of the screen. The marquee may show fixed text and or scrolling text. The direction of the scrolling text may depend on the agent s preferred language e.g. right to left for user languages like English that are left to right and left to right for languages like Hebrew that are right to left . The API may include a message object as a container for marquee messages. Message rows may count towards storage e.g. in the database .

One or more implementations may include a control referred to as a navigation tab alternately referred to herein as Silvertab which provides agents access to various objects without leaving the console. The navigation tab can be configured by the administrator alternately referred to as an admin to access various available objects. In some implementations only objects designated as navigation tab items for the console will be listed in the navigation tab menu. A default item can be selected from the chosen navigation tab items. On initial view of the console the end user may see the navigation tab in the top left region of the console with the default item name color and or icon. In some implementations the navigation tab provides an approximately 150 px width space for icon and text. An item label that exceeds the available width e.g. 150 px may be truncated and appended with an ellipsis. In other implementations the width space of the navigation tab may be a different size.

In some implementations the overview area may display general overview information. The general overview information may be displayed using one or more list views dashboards or custom components. One or more implementations may include an activity log for entering information related to changes to the record as shown in .

List views may include various capabilities such as inline editing. When an object is clicked in the list view it may raise an event that opens one or more tabs that pertain to that object. One or more list views may auto update. For example the list view may be configurable to auto refresh at an interval e.g. 5 minutes . One or more list views may be multi sortable e.g. an agent may be able to select multiple columns by which to sort . One or more list views may include hovers a preview icon that can be clicked to show a hover or both. One or more list views may include one or more visual indicators e.g. indicating whether a new comment email or escalation has been added to a case . One or more list views may include a provision for mass actions.

One type of list view may be a universal inbox which may contain a list of actionable items. This list may include but is not limited to new cases leads case comments emails tasks and pending events. One advantage of the universal inbox is that it can show many different types of objects in one place and may allow users to prioritize them.

In one or more implementations the overview area may be populable by draggable dashboard components. The overview area may be able to contain one or more of list views and or dashboard components at the same time. A dashboard that is visible to a user may be available as a dashboard component.

In some implementations one or more of these views may be collapsible. Collapsible views allow views to be hidden if the agent does not desire them there. The size of each of the views may be saved across sessions on a per agent basis so that the agent does not have to re layout his console every time he navigates to it.

The URL format of the service cloud console may be regular and or bookmarkable. For instance if an agent is viewing a case detail page the agent may be able to copy that URL from the browser and email it to a colleague. When the colleague clicks on that URL the corresponding case should appear in the main view of the colleague s console even if the colleague s console is otherwise laid out differently .

In some implementations one or more of the operations shown in may be completed without refreshing the user interface or web page displayed in the web browser at the client machine in which the user interface is shown. Completing operations without refreshing the web page may allow the agent to receive calls and to open edit save and close object records without significant interruptions.

At a first record tab for accessing a first object record is provided. In one or more implementations the first object record tab is provided in the user interface displayed in the web browser running at the client machine. An example of such a tab is shown at in . The first object record tab may display information associated with the first object record. The first object record may be for example a database object stored in a database on the server.

For example the first object record may be a client account or a portion of a client account such as the account shown on tab in . The first object record tab may then contain information related to the client account such as one or more names phone numbers e mail addresses or other contact information. Additionally or alternately the first object record tab may contain information such as billing data technical data client preferences or any other type of information associated with the first object record in the database such as the case information shown in the main view in .

Although one or more implementations display object records as tabs as user interface components the user interface components for displaying object records are not limited to being displayed in tabs. According to various implementations different types of user interface components may be used such as window panes windows ribbons 3D navigation environments etc.

At an incoming call is identified. The call may include any communication from an individual. In some instances the call may be a communication from an individual associated with an account accessible via the service cloud console. For example the call may be a communication from an individual associated with a customer of the organization using the service cloud console application.

In one or more implementations the incoming call may be a voice call. The voice call may be a telephone call transmitted over a telephone network such as the public switched telephone network PTSN a voice over IP VoIP call received over a computer network a pre recorded voice call or any other type of voice call. In some implementations the incoming call may be another type of call such as a text chat session an e mail a text message or any other type of communication.

In some implementations identifying the incoming call may include identifying a number from which the call originated e.g. a PSTN number a VoIP number etc. . Alternately identifying the incoming call may include identifying a chat handle a customer identification number a URL an e mail address or any other relevant identifier. However in some instances the source of the incoming call may not be identified.

In one or more implementations identifying the incoming call may include identifying an account associated with the incoming call. For example a database at the server may be queried using a number associated with the incoming call to identify an account associated with the incoming call. In this case the user interface may display information associated with the incoming call such as the name of a client making the call the name of an account associated with the client or other information.

In one or more implementations the incoming call may be received by the agent. For example the incoming call may be received within the user interface displayed in the web browser by opening or activating a user interface component associated with receiving a call.

As a different example the incoming call may be received via a different program or web page at the client machine. For example the client machine may have dedicated software for receiving calls. Alternately a separate user interface for receiving calls via a web browser may be displayed in a different tab or window of the web browser.

As yet another example the incoming call may be received via a device other than the client machine such as a telephone or headset. The telephone or headset may be communicatively coupled with one or both of the client machine or the server.

At a second record tab for the incoming call is opened. When the second record tab is opened the first record tab may be hidden from view. One method for opening a record is discussed with reference to .

In one or more implementations a tab ordering including a listing of one or more previously accessed record tabs may be stored at the client machine. In this way the focus of the user interface may be automatically returned to the previous record tab e.g. the first record tab when a subsequently accessed record tab e.g. the second record tab is closed.

In one or more implementations the second record tab may be opened automatically. For example when the incoming call is identified a query may be transmitted to a database at the server to identify an object record associated with the incoming call. When the record is identified the second record tab may then be opened automatically opened. Opening the second record tab automatically may save time for the agent because the agent need not manually look up the client s account. Instead the client s account may already be open so that the agent has access to the account information when handling the call.

Alternately the second record tab may be opened manually e.g. by the agent . For example the agent may identify a record to open after receiving the call and receiving information from the client. Manually opening the second record tab may be necessary if for example the client is calling from an unidentified source or a source not yet associated with the client s account. In this case the agent may receive information from the client and then provide input to the user interface causing the identified object record to open.

In some instances the second record tab may be associated with a new or blank object record. For example the client may not be associated with an existing account as may be the case for a new client. As another example the client may be establishing a new record associated with an existing account.

At user input for handling the incoming call is received. The user input may include any information for handling the incoming call such as modifying account information for the client s account adding new account information establishing a new account for the client deleting existing account information updating or entering account preferences etc.

In some instances one or more additional procedures may be triggered during or after the receipt of the user input. For example one or more instances of a contextual sidebar update method and or an edited page detection method may be triggered. Examples of these methods are discussed with reference to .

At a request is received to close the second record tab. The request to close the second record tab may be received by detecting a click of a close button on a primary tab such as the primary tab shown in . In some instances the received request may be an explicit request to close the second record tab. For example the received request may be the detection of user input in the user interface such as clicking a close button or symbol the detection of a keyboard command that corresponds with a request to close the tab or any other technique for receiving an explicit request to close the second record tab.

In some instances the received request may be an implicit request to close the second record tab. For example the termination of the call may in some instances trigger a request to close the second record tab.

In one or more implementations receiving a request to close the second record tab may trigger one or more procedures associated with ensuring that edited data is saved to the server such as the edited page save method shown in .

At the second record tab is closed. When the second record tab is closed the second record tab may be removed from the user interface. Further the first record tab may be revealed to the agent. Revealing the first record tab when the second record tab is closed may allow the agent to quickly resume interacting with the first record tab thus reducing the interruption caused by receiving the call.

In one or more implementations the service cloud console may display one or more user interface components for displaying object record information associated with object records stored in a database. Object records may include any database objects accessible via the service cloud console. In some implementations these user interfaces may be arranged according to a tab metaphor as is illustrated in the user interfaces shown in . One or more implementations may use one or more different types of user interface components such as windows window panes pages wizard guides list boxes tree controls etc. For example one or more implementations may employ a wizard style interface in which an agent is led through one or more tasks e.g. using arrows . However records are described herein as being displayed within tabs.

In one or more implementations the service cloud console may display one or more primary tabs alternately referred to as workspace tabs . As is shown in primary tabs may be arranged in a drag and drop user interface. The graphical user interface shown in includes a navigation tab and primary tabs and . The graphical user interface also includes a highlights panel a mutton and an activity log . The record opened in the primary tab is displayed in the main view and in the graphical user interface also includes a sidebar .

In one or more implementations an individual primary tab may be closed using a close button. When an individual tab is closed the last viewed primary tab or the navigation tab may be brought into focus.

The graphical user interface shown in includes a subtab bar . In one or more implementations items or records other than the primary tab object opened within a primary tab may be displayed as subtabs in subtab bar . As with primary tabs subtabs may be rearranged via a drag and drop interface as shown in . However one or more subtabs may be arranged in a fixed position. For example the account detail page associated with the primary tab record may be fixed as the first subtab in the subtab bar as shown in .

The operations shown in illustrate a method for opening a record tab according to one or more implementations. The service cloud console may be operable to open and or close record tabs without refreshing the web page in which the service cloud console user interface is displayed. Thus an agent may open and or close record tabs which may include communications between the client machine and the server without interrupting the user of the service cloud console.

At an action to open a new tab for a record is identified. In some instances the identified action may include an action taken by a user with the intention of opening a new record. For example the identified action may be a mouse click or keyboard press indicating that a record should be open. In other instances the identified action may include a condition or result that occurs in one or more processes. For example a record may be automatically opened when a call is received.

In one or more implementations the action to open a new tab may be identified in various ways. In some instances the action may be identified by determining user input using one or more client side web technologies such as HTML or JavaScript to detect user interaction with the user interface. In some instances the action may be identified by receiving a message from the server e.g. an HTTP message an Ajax message etc. . For example the server may send a message to the browser indicating that a call is being routed to the client machine.

In some implementations identifying the action to open a new tab for a record may include identifying the record itself. In some instances an identifier for the record may be determined when the action is detected. For example the identifier may be included in a link clicked by a user. In other instances an identifier for the record may be determined based on cached information at the client and or communication with the server.

At a determination is made as to whether the record tab is already open. In some implementations the determination may be made based on information at the client machine. For example a list of open tabs may be maintained at the client machine and an identifier associated with the identified record may be compared against that list.

In some implementations the determination as to whether the record tab is already open may be made in cooperation with the server. For example the server may query a database to determine an identifier associated with the record. As another example the server may maintain a list of records opened at the client machine. The server may then return to the client an indication as to whether the record tab is already open.

At a determination is made as to whether to open the record in a primary tab. In one or more implementations a record e.g. a database row may be either a primary object e.g. a workspace object or a secondary object. For example a customer account may be treated as a primary object while a case may be treated as a secondary object.

The determination as to whether to open the record in a primary tab may be based upon whether the record represents a primary or workspaceable object e.g. an account or a secondary object associated with a primary object e.g. a case associated with an account . When record is associated with a workspace object the record may be termed a child of the workspace parent object.

If the record is a workspace object such as a customer account then the record may open in a primary tab. If instead the record is a secondary object that is associated with a workspace object such as a case that is associated with a customer account then the record may open in a secondary tab.

If the record is a secondary object that is not associated with a workspace object such as a case for which an account has not yet been opened then the record may open in a primary tab. If the record is a custom object that does not have an assigned category or association then the record may open as a primary tab. If a custom record or other secondary object is opened in a primary tab then the record s own highlight s panel layout may be used to display a highlights panel for the workspace.

In some implementations the determination may be made at the client machine. For example the client machine may maintain information indicating certain record types that should open as primary or secondary tabs. In one or more implementations the determination may be made in conjunction with communication with the server. For example the client machine may transmit to the server a record type and or record identifier associated with the record. The server may then conduct a database query and then return an indication as to whether to load the record in a primary or secondary tab.

At the primary tab ID for the parent record is identified. In some instances the primary tab ID may be identified at the server for example by querying a database after the record has been identified by the client machine. In other instances the primary tab ID may be identified at the client machine for example by consulting cached tab information stored at the client machine.

At the record is retrieved from the server and opened in a new primary tab. Retrieving the record may involve one or more database queries to collect data and or layout information for display in some or all of the user interface components that may be associated with a tab including main view information contextual information overview panel information etc. Since the record is opened as a primary tab highlights panel information may also be retrieved.

The retrieved information is then transmitted from the server to the client machine. When the retrieved record information is received at the client machine the client machine opens the record in a new primary tab. The client machine may change focus to the new tab in the user interface once the new tab is open. However the context is maintained so that other tabs that were previously open may be selected.

At a determination is made as to whether the parent record can be opened. The parent record may not be available for opening if for example the user lacks permission to open the parent record the parent record does not exist the parent record is invalid etc. If the parent record is not available for opening then the parent record may be opened in a new primary tab as shown at .

In some instances the determination as to whether the parent record can be opened may be made on the client machine. For example if the primary tab ID for the parent record is null or otherwise invalid then the client machine may determine that the parent record may not be opened without communicating with the server.

In some instances the determination as to whether the parent record can be opened may be made on the server. For example the server may determine whether the user has permission to open the parent record by comparing one or more permissions associated with the user s profile to one or more permissions required to open the parent record.

At a determination is made as to whether the parent record tab is already open. In some implementations the determination may be made based on information at the client machine. For example a list of open tabs may be maintained at the client machine and an identifier associated with the parent record may be compared against that list.

In some implementations the determination as to whether the record tab is already open may be made in cooperation with the server. For example the server may maintain a list of records opened at the client machine. The server may then return to the client an indication as to whether the parent record tab is already open.

At the parent record is retrieved from the server and opened as a primary tab. Retrieving the parent record may involve one or more database queries to collect data and or layout information for display in some or all of the user interface components that may be associated with a tab including main view information contextual information overview panel information etc. Since the parent record is opened as a primary tab highlights panel information may also be retrieved.

The retrieved record information is then transmitted from the server to the client machine. When the retrieved record information is received at the client machine the client machine opens the parent record in a new primary tab. The client machine may change focus to the new tab in the user interface once the new tab is open. However the context is maintained so that other tabs that were previously open may be selected.

At the record is retrieved from the server and opened in a new subtab of the primary tab. Retrieving the record may involve one or more database queries to collect data and or layout information for display in some or all of the user interface components that may be associated with a tab including main view information contextual information overview panel information etc.

The retrieved record information is then transmitted from the server to the client machine. When the retrieved record information is received at the client machine the client machine opens the record in a new subtab of the primary tab. The client machine may change focus to the new subtab in the user interface once the new subtab tab is open. However the context is maintained so that other tabs that were previously open may be selected.

In one or more implementations a record tab may include a tab label. A tab label may include information associated with the page such as the name and or type of page being opened. For example an account record called Acme Systems may open with a tab labeled Account Acme Systems. As another example tabs for external pages may be labeled as External Page since page titles currently may not be retrieved from HTML iframes. In some implementations the tab label of a tab may change when the tab or a subtab changes e.g. when a page is moved from detail mode to edit mode .

In one or more implementations tab labels that exceed the tab size may be truncated. For example excess characters may be replaced by an ellipsis. In some implementations tabs may be dynamically resized according to the number of tabs in existence.

In one or more implementations one or more of the operations shown in may be performed at the client machine at the server or using a client server combination. Where an operation is performed may be based on where information is located. For example the client machine may maintain cached information that allows the client machine to perform one or more operations without communicating with the server. However cached information may in some instances be insufficient to perform an operation without server interaction.

In some implementations one or more of the operations shown in may be performed in a different order than is shown. For example two or more operations that involve communication between the client machine and server may be combined into fewer operations in order to reduce the burden on the server and or reduce client side delays caused by communicating with the server. For example operations and may be combined into a single client server interaction in some instances.

A client machine located in the cloud or Internet may communicate with the on demand service environment via one or more edge routers and . The edge routers may communicate with one or more core switches and via firewall . The core switches may communicate with a load balancer which may distribute server load over different pods such as the pods and . The pods and which may each include one or more servers and or other computing resources may perform data processing and other operations used to provide on demand services. Communication with the pods may be conducted via pod switches and . Components of the on demand service environment may communicate with a database storage system via a database firewall and a database switch .

As shown in accessing an on demand service environment may involve communications transmitted among a variety of different hardware and or software components. Further the on demand service environment is a simplified representation of an actual on demand service environment. For example while only one or two devices of each type are shown in some implementations of an on demand service environment may include anywhere from one to many devices of each type. Also the on demand service environment need not include each device shown in or may include additional devices not shown in .

Moreover one or more of the devices in the on demand service environment may be implemented on the same physical device or on different hardware. Some devices may be implemented using hardware or a combination of hardware and software. Thus terms such as data processing apparatus machine server computing device and device as used herein are not limited to a single hardware device but rather include any hardware and software configured to provide the described functionality.

The cloud is intended to refer to a data network or plurality of data networks often including the Internet. Client machines located in the cloud may communicate with the on demand service environment to access services provided by the on demand service environment. For example client machines may access the on demand service environment to retrieve store edit and or process information.

In some implementations the edge routers and route packets between the cloud and other components of the on demand service environment . The edge routers and may employ the Border Gateway Protocol BGP . The BGP is the core routing protocol of the Internet. The edge routers and may maintain a table of IP networks or prefixes which designate network reachability among autonomous systems on the Internet.

In one or more implementations the firewall may protect the inner components of the on demand service environment from Internet traffic. The firewall may block permit or deny access to the inner components of the on demand service environment based upon a set of rules and other criteria. The firewall may act as one or more of a packet filter an application gateway a stateful filter a proxy server or any other type of firewall.

In some implementations the core switches and are high capacity switches that transfer packets within the on demand service environment . The core switches and may be configured as network bridges that quickly route data between different components within the on demand service environment. In some implementations the use of two or more core switches and may provide redundancy and or reduced latency.

In some implementations the pods and may perform the core data processing and service functions provided by the on demand service environment. Each pod may include various types of hardware and or software computing resources. An example of the pod architecture is discussed in greater detail with reference to .

In some implementations communication between the pods and may be conducted via the pod switches and . The pod switches and may facilitate communication between the pods and and client machines located in the cloud for example via core switches and . Also the pod switches and may facilitate communication between the pods and and the database storage .

In some implementations the load balancer may distribute workload between the pods and . Balancing the on demand service requests between the pods may assist in improving the use of resources increasing throughput reducing response times and or reducing overhead. The load balancer may include multilayer switches to analyze and forward traffic.

In some implementations access to the database storage may be guarded by a database firewall . The database firewall may act as a computer application firewall operating at the database application layer of a protocol stack. The database firewall may protect the database storage from application attacks such as structure query language SQL injection database rootkits and unauthorized information disclosure.

In some implementations the database firewall may include a host using one or more forms of reverse proxy services to proxy traffic before passing it to a gateway router. The database firewall may inspect the contents of database traffic and block certain content or database requests. The database firewall may work on the SQL application level atop the TCP IP stack managing applications connection to the database or SQL management interfaces as well as intercepting and enforcing packets traveling to or from a database network or application interface.

In some implementations communication with the database storage system may be conducted via the database switch . The multi tenant database system may include more than one hardware and or software components for handling database queries. Accordingly the database switch may direct database queries transmitted by other components of the on demand service environment e.g. the pods and to the correct components within the database storage system .

In some implementations the database storage system is an on demand database system shared by many different organizations. The on demand database system may employ a multi tenant approach a virtualized approach or any other type of database approach. An on demand database system is discussed in greater detail with reference to .

In some implementations each pod may include a variety of servers and or other systems. The pod includes one or more content batch servers content search servers query servers file force servers access control system ACS servers batch servers and app servers . Also the pod includes database instances quick file systems QFS and indexers . In one or more implementations some or all communication between the servers in the pod may be transmitted via the switch .

In some implementations the application servers may include a hardware and or software framework dedicated to the execution of procedures e.g. programs routines scripts for supporting the construction of applications provided by the on demand service environment via the pod . Some such procedures may include operations for providing the services described herein.

The content batch servers may requests internal to the pod. These requests may be long running and or not tied to a particular customer. For example the content batch servers may handle requests related to log mining cleanup work and maintenance tasks.

The content search servers may provide query and indexer functions. For example the functions provided by the content search servers may allow users to search through content stored in the on demand service environment.

The Fileforce servers may manage requests information stored in the Fileforce storage . The Fileforce storage may store information such as documents images and basic large objects BLOBs . By managing requests for information using the Fileforce servers the image footprint on the database may be reduced.

The query servers may be used to retrieve information from one or more file systems. For example the query system may receive requests for information from the app servers and then transmit information queries to the NFS located outside the pod.

The pod may share a database instance configured as a multi tenant environment in which different organizations share access to the same database. Additionally services rendered by the pod may require various hardware and or software resources. In some implementations the ACS servers may control access to data hardware resources or software resources.

In some implementations the batch servers may process batch jobs which are used to run tasks at specified times. Thus the batch servers may transmit instructions to other servers such as the app servers to trigger the batch jobs.

In some implementations the QFS may be an open source file system available from Sun Microsystems of Santa Clara Calif. The QFS may serve as a rapid access file system for storing and accessing information available within the pod . The QFS may support some volume management capabilities allowing many disks to be grouped together into a file system. File system metadata can be kept on a separate set of disks which may be useful for streaming applications where long disk seeks cannot be tolerated. Thus the QFS system may communicate with one or more content search servers and or indexers to identify retrieve move and or update data stored in the network file systems and or other storage systems.

In some implementations one or more query servers may communicate with the NFS to retrieve and or update information stored outside of the pod . The NFS may allow servers located in the pod to access information to access files over a network in a manner similar to how local storage is accessed.

In some implementations queries from the query servers may be transmitted to the NFS via the load balancer which may distribute resource requests over various resources available in the on demand service environment. The NFS may also communicate with the QFS to update the information stored on the NFS and or to provide information to the QFS for use by servers located within the pod .

In some implementations the pod may include one or more database instances . The database instance may transmit information to the QFS . When information is transmitted to the QFS it may be available for use by servers within the pod without requiring an additional database call.

In some implementations database information may be transmitted to the indexer . Indexer may provide an index of information available in the database and or QFS . The index information may be provided to file force servers and or the QFS .

Environment includes an on demand database service . User system may be any client machine or system that is used by a user to access a database system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in user systems might interact via a network with the on demand database service .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS .

Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDBMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an implementation on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a call center agent is using a particular user system to interact with system the user system has the capacities allotted to that call center agent. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users may have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network e.g. the Internet that network will be used in many of the examples herein. However it should be understood that the networks used in some implementations are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one implementation system shown in implements a web based customer relationship management CRM system such as the service cloud console. For example in one implementation system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms web pages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain implementations system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

Each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Mozilla s Firefox browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network .

Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above implementations are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one implementation each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units.

A computer program product implementation includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the implementations described herein. Computer code for operating and configuring system to intercommunicate and to process web pages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server or transmitted over any other conventional network connection e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. . It will also be appreciated that computer code for implementing implementations can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one implementation each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art.

It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language implementations is discussed in commonly assigned U.S. Pat. No. 7 730 478 titled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE by Craig Weissman filed Sep. 21 2007 which is hereby incorporated by reference in its entirety and for all purposes. Invocations to applications may be detected by system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server N might be coupled via a direct network link and another application server N might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain implementations each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one implementation therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one implementation the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain implementations three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each call center agent uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a call center agent is visiting a customer and the customer has Internet access in their lobby the call center agent can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain implementations user systems which may be client machines systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to some implementations. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for account contact lead and opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. Pat. No. 7 779 039 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. and which is hereby incorporated by reference in its entirety and for all purposes teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In some implementations for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. In some implementations multiple tables for a single customer may actually be stored in one large table and or in the same table as the data of other customers.

The implementations disclosed herein may include a cross domain API situated at a client machine that allows pages served from external domains to perform certain actions such as exchanging information with one another within a web browser program running on the client machine. These pages may be referred to as third party pages. show flow diagrams illustrating interactions of third party pages in accordance with one or more implementations. In one or more implementations this cross domain API may be referred to as a service cloud console integration toolkit.

Call centers that use the service cloud console may have integrations to third party systems such as billing systems shipping systems accounting systems etc. The service cloud console may provide an interface that allows agents access to one or more of these applications. In some implementations one or more of these third party applications may participate in the tabbed model provided through the service cloud console.

Because communication between frames from different domains presents a security risk within the browsers this functionality is explicitly restricted in some modern browsers. In other modern browsers however cross domain communication has been addressed for instance in HTML 5 available from W3.org at http www.w3.org TR htm15 comms.html with the postMessage framework. However HTML 5 is currently supported in only a limited number of browsers such as Internet Explorer 8 Firefox 3 and Opera 9.

In some implementations the cross domain API may be used to facilitate integration with third party pages within Salesforce.com itself. For example VisualForce pages may be served from a different domain than the service cloud console.

Given the potential security concerns it may be desirable to avoid exposing the ability for a third party domain to directly perform data manipulation. For example in Salesforce.com it may be possible to open an edit page make modifications to an object and save it all by opening a single URL with a set of parameters in the query string. However this type of operation may not be permitted by the cross domain API as it could open up a means for attackers to modify data without the user s knowledge or consent.

The third party page communication methods shown in may be used to facilitate secure cross domain communication. These methods may be run in a web browser at a client machine in communication with one or more servers that provide data to the browser. However some or all of the individual processing steps shown in may be performed without communication with the server. Thus cross domain communications may be facilitated without requiring the additional latency or computational burdens that would exist if cross domain communications were accomplished using a proxy or other type of server communication.

In one implementation in a service cloud console application from the data provider is loaded from a first domain such as www.salesforce.com. The console application may be loaded by sending instructions from one or more data provider servers hosting the first domain to a web browser at a client machine. When the console application is loaded records served from the first domain may be visible in the console application. For example one or more records may be opened using a record open method as shown in .

In a third party web page is loaded from a second domain for instance from phone system in a portion of a user interface also displaying the console application. In some implementations the third party web page may be loaded as a primary or secondary tab within the console application. The third party web page may also be automatically loaded in response to receiving data from the console application. For example a first object record may include a link to accounting information visible through a third party web page. When the link is clicked the third party web page is loaded.

In some implementations the first domain is controlled by a data provider e.g. salesforce.com while the second domain may be controlled by a different entity such as the phone provider. For example the console application may be loaded from a first domain controlled by salesforce.com while the third party page is loaded from a second domain controlled by a third party service provider unaffiliated with the service provider controlling the first domain

In the console application is configured to listen to events from a first set of safe domains. The first set of safe domains identifies the one or more trusted domains from which the console application may safely accept cross domain messages. In some implementations the first set of safe domains may be limited to a particular group of domains such as those provided by the data provider of the console application. The first set of safe domains may also include domains identified as trusted such as the second domain associated with a third party service provider system.

In some implementations wildcards may be used to identify groups of domains using a single string. For example the first set of safe domains may include domains such as na1.force.com .na2.force.com and or .salesforce.com.

In the third party page may detect or generate an event of some type such as the receipt of phone event information from some source as described above. The detected event may include any type of occurrence that causes cross domain communication. In some implementations the event may be a scripting event triggered directly by a user action such as clicking a link or button within the third party page. Alternately or additionally the event may be generated by code running within the third party page that identifies a triggering condition.

In the event triggers a message that is sent to the console application. The message may include a JavaScript event message or other type of event message. The message may be sent to a JavaScript Event Listener operating in the console application served from the first domain. Alternately or additionally a different type of scripting language may be used such as VBScript.

When the event message is received the console application identifies the domain from which the event message was sent i.e. the second domain as shown at . The domain may be identified by retrieving a value associated with the event message. After the second domain is identified as the source of the event the second domain is compared to the first set of safe domains as shown at .

As shown at if the second domain is not within the first set of safe domains then the message is ignored. In this case the second domain has not been identified as a safe domain from which to receive messages. By only accepting messages sent from an identified subset of domains the security risks inherent in cross domain communications may be mitigated.

In some implementations receiving a cross domain event message from a third party domain not in the first set of safe domains may cause one or more security or logging actions to be taken. For example the event message may be logged in a security record to help identify unauthorized attempts to access the service cloud console application.

As shown at the event message is processed if the second domain is within the first set of safe domains. The event message may be processed according to one or more event handlers in the console application.

In some implementations even domains included in the first set of safe domains may be limited to triggering particular actions or types of actions within the console application in order to provide further protection against unauthorized access. Examples of such actions are discussed below. However different implementations may allow various actions or types of actions in response to an event message.

Regardless of whether the event message is processed the service cloud console may continue monitoring for additional messages transmitted from third party domains. Continual monitoring for cross domain event messages may be accomplished using for example an Observer design pattern. Thus the third party page may be able to send messages to the service cloud console while the security of the console application is maintained.

In some implementations a different set of safe domains may be identified at than at . For example the second set of safe domains may be limited to domains associated with the service cloud console e.g. .force.com .salesforce.com while the first set of safe domains may include one or more domains associated with third party service providers. By using different sets of safe domains the security of the third party pages may be maintained because the third party pages may not be operable to communicate with each other.

In an event within the console application is detected similar to . In an event message from the console application is communicated to the third party page similar to . In some implementations a different set of actions or types of actions may be allowed in response to receiving an event message from an accepted domain as shown at . In both figures the set of allowable actions or types of actions may be strategically determined based on security concerns and the type of cross domain communication that is needed to facilitate integration.

In some implementations the methods shown in may be performed concurrently thus allowing for secure cross domain two way communication between the console application and the third party page. Alternately one of the methods shown in may be omitted so that only one way cross domain communication is allowed.

The cross domain API is described with reference to a pseudocode implementation according to some implementations. However the pseudocode is provided only as an example and some implementations may employ a different implementation. For example cross domain API methods may be specified using some methods method names parameters and or parameter names e.g. method parameter type parameter type returntype . However different methods method names parameters and or parameters names may be used in different implementations. As another example at least part of the cross domain API pseudocode here may appear as methods that return values synchronously. However some implementations may include one or more methods that return values asynchronously e.g. via a callback method .

Developers may be able to import one or more libraries into various pages but some methods within these libraries may be prevented from operating unless the pages are run in a designated context.

Third party pages may have the ability to open primary tabs subtabs or both. Primary tabs and subtabs opened from third party pages may follow navigation rules similar to standard pages. For example duplicate pages may not be allowed by default. However developers may be permitted to allow duplicate pages. As another example third party pages may behave with back forward and or refresh buttons in a manner similar to standard pages.

A page may only be able to manipulate itself and the tabs which it has opened itself. If a VisualForce page is embedded on a standard page it may be able to manipulate the tab in which it is contained.

In one or more implementations an administrator may map a field on an object to a workspaceable object using a workspace driver field. When an object has a field configured in this way it may become a subordinate object. In this case the object may only open in the workspace of the object to which it is subordinate. Each object may be limited to one workspace driver field.

For example one custom object may be a bill. A bill may have fields such as amount a currency account a lookup to account and contact a lookup to contact . One of these fields or the bill itself may be the workspace driver. If account is set as the workspace driver field then when opening a bill the account will appear in the workspace tab and the bill will appear as a subtab.

In one or more implementations almost any object may be a workspace object. A workspace driver field may be used to define what workspace an object will open in if not its own. Those driver fields may be selectable from the set of lookup relationships on a given object. Any of an object s relationships may be available in this list.

Despite the existence of a workspace driver field an object may open in its own workspace if it happens to be orphaned. For example a case object may be configured such that the parent account is its workspace object but the user may open a case which is orphaned i.e. its parent account is null . In this event the case may open in its own workspace even though under normal circumstances cases don t do so.

In one or more implementations each objects have a highlights panel layout. If no highlights panel is defined for an object its mini view layout may be used by default. This layout may be specified by the same mechanism used by the deal view. 

In one or more implementations only non setup entities may be included in the metadata allowing end users to choose their workspace properties. Setup entities like user may implicitly be configured as Opens In Itself 

In one or more implementations VisualForce pages may be configurable as workspaceable pages or as subordinate objects. In the event that a VisualForce page is workspaceable it may be allowed to omit the highlights panel.

In one or more implementations objects selected from a subtab may stay within the context of that workspace. For example suppose contact is a workspaceable object and an account is open. A contact opened from the account details section may open as a subtab under the account and not in its own contact workspace. Even though contact is a workspaceable object it may be opened in the context of an account. In some implementations a user may drag the contact tab up to workspace bar to make it its own workspace and or drag one or more workspaces into subtabs.

In at block a computing device provides a first prompt for display in a first user interface component of the user interface the first prompt being associated with a first action. In some implementations the information entered in the first prompt may be used to perform a first action such as sending an email attaching an article and composing an internal note.

In at block the computing device performing method receives feed item data for a first feed item associated with the first action. The feed item data may be received at a first prompt displayed in the first user interface component. The first user interface component may be configured to display unpublished feed items. The user interface may include a second user interface component that is configured to display published feed items.

In some implementations the feed item may be an email to a customer an internal note a flag a status change an attachment a comment a social media message a calendar item or the like. The feed item may be any message that may be displayed or published in a feed. The first user interface component may display one or more unpublished feed items of different types.

In some implementations the second user interface component may display all of the feed items published in the currently open case. Alternatively the second user interface component may display only the most recent updates to the currently open case

In at block the computing device performing method responsive to a request to compose a second feed item displays a second prompt for second feed item data. In some implementations the computing device displays the second prompt without publishing the first feed item. The second prompt may be associated with a second action and be displayed in the first user interface component of the user interface.

In some implementations an agent having composed an email to the customer may wish to also write an internal note and he may wish to publish both items at the same time rather than composing the email publishing the email then composing the note and publishing the note. Being able to compose multiple feed items without having to publish one before moving on to another may save the agent valuable time and mouse clicks and allow the agent to cross verify information that he is entering in the various feed items before publishing all of the feed items at the same time.

In some implementations the request to compose a second feed item may be triggered by clicking on one of the feed item types of .

In at block the computing device performing method receives at the second prompt second feed item data for a second feed item. The second feed item may be part of the same case that the first feed item is part of and may be associated with the second action.

In some implementations the first feed item may have a different feed item type than the second feed item. For example the first feed item may be an email to the customer and the second feed item may be an internal note for the agent. In other implementations the first and second feed items may have the same feed item type. For example the first and second feed items may both be internal notes or they may both be file attachments that the agent wishes to include in the case.

In some implementations the first and second prompts may be displayed in the first user interface component which contains unpublished feed items. The agent may enter feed item data into both prompts without publishing either of the feed items.

In some implementations the computing device performing method may responsive to an instruction to close the first or second prompt display a warning that the respective feed item data has not yet been published as described at block of . As an example the agent may after opening the first and second prompt and composing the two feed items decide to not publish one of the feed items and elect to close one of the prompts. When he selects a prompt to close the computing device may display in the user interface a warning that the prompt has not been published and that the information in the unpublished feed item may be lost by closing the prompt. In some other implementations optional block is omitted from method .

In some implementations the user may be presented with an option to save the feed item that he has elected to close without publishing. In these implementations the user may save a draft of the feed item for later publishing.

In at block a computing device provides a first prompt for display in a first user interface component of the user interface the first prompt being associated with a first action as generally described above at block of .

In at block the computing device performing method receives feed item data for a first feed item. The feed item data may be received at a prompt displayed in the first user interface component. The first user interface component may be configured to display unpublished feed items. The user interface may include a second user interface component that is configured to display published feed items as generally described above at block of method .

In at block the computing device performing method responsive to a request to compose a second feed item displays a second prompt for second feed item data. In some implementations the computing device displays the second prompt without publishing the first feed item. The second prompt may be displayed in the first user interface component of the user interface as generally described above at block of method .

In at block the computing device performing method receives at the second prompt second feed item data for a second feed item. The second feed item may be part of the same case that the first feed item is part of as generally described above at block of method .

In at block the computing device performing method displays a first indicator and a second indicator indicating that the first and second feed items have not been published. As an example if the first feed item is an email to a customer and the second feed item is an internal note the first indicator may be an icon related to an email and the second indicator may be an icon related to an internal note. In some implementations there may be as many indicators as there are unpublished feed items with each indicator indicating the feed item type of a corresponding unpublished feed item.

In some implementations the indicators may be displayed on the button for publishing the unpublished feed items. In other implementations the indicators may be displayed in the first user component. In yet other implementations the indicators may be displayed elsewhere in the user interface. For example in the indicators are displayed on the Publish Next button which indicates to the user that the two feed items corresponding to the indicators have not yet been published. This way a user can quickly determine which and how many feed items are unpublished in the first user interface component.

In some implementations when an unpublished feed item is closed or saved as a draft the indicator corresponding to the closed feed item may disappear indicating that the feed item will not be published when the agent clicks on one of the publish buttons .

In at block the computing device performing method responsive to an instruction to publish the first and second feed items transmits the first feed item data and the second feed item data to a server to be stored and published at substantially the same time.

In some implementations the instruction to publish the first and second feed items may be received from a call agent submitting the request via the user interface. In other implementations the instruction may be received via an application programming interface API call. As an example a user maybe be using a mobile application to send API calls to the application and one of the API calls may be a request to publish the first and second feed items.

In some implementations the agent may trigger the instruction to publish the first and second feed items by clicking on a publish button. In the agent may click on the Publish only button or the Publish Next button both of which will send the instruction to the server to publish the first and second unpublished feed items displayed in the first user component . The instruction to the server may be accompanied by the feed item data entered in the first and second prompts for the server to store and publish in the feed.

In some implementations while the first and second feed items are published at substantially the same time the first and second feed item may be published in the order of when the prompts were opened in the user interface. In some implementations the order of the unpublished feed items may be changed. This might be done by clicking and dragging one of the prompts up or down within the first user interface component.

In at block the computing device performing method displays a second case in the user interface. The second user interface component may display published feed items of the case. In some implementations the first user interface component does not display any unpublished feed items of the case when the second case is first displayed in the user interface.

In some implementations when the agent opens two prompts and enters the first and second feed item data the agent may select the Publish Next button in to publish the two feed items and to instruct the computing device to display the next case. In some implementations the agent may have a queue of cases that he is working through to publish updates for whether it is to send an email to a customer or to change the status of a case. When the agent is done with composing the feed items that he wishes to publish for a case and wants to also move on to the next case he can use the Publish Next button to publish the feed items and move on to the next case in one click of the button. In some implementations the queue of cases may be assigned to the agent by an administrator of the Service Console in a particular order. The Publish Next feature allows an agent to create any number of feed items for a case without publishing them individually publish them with one click and automatically move on to the next case in the agent s queue.

In at block the computing device performing method displays the published first and second feed items in the second user interface component. As an example an agent may wish to compose an internal note and an email to a customer for a case publish the note and email and then do some other work related to the same case. In this situation the user could click on the Publish only button of to publish the unpublished feed items and display the published feed items in the second user interface component while leaving the case open in the user interface.

In some implementations once the unpublished feed items are published the first user interface component may become smaller in the user interface and the second user interface component may expand in the user interface to display the newly published feed items. The second user interface component may also display previously published feed items as well. In some implementations the second user interface component displays all feed items that have been published for the case. In other implementations the second user interface component may display only the most recently published feed items of the case.

In at block a computing device provides a first prompt for display in a first user interface component of the user interface the first prompt being associated with a first action as generally described above at block of .

In at block the computing device performing receives feed item data for a first feed item. The feed item data may be received at a prompt displayed in the first user interface component. The first user interface component may be configured to display unpublished feed items. The user interface may include a second user interface component that is configured to display published feed items as generally described above at block of method .

In at block the computing device performing method responsive to a request to compose a second feed item displays a second prompt for second feed item data. In some implementations the computing device displays the second prompt without publishing the first feed item. The second prompt may be displayed in the first user interface component of the user interface as generally described above at block of method .

In at block the computing device performing method receives at the second prompt second feed item data for a second feed item. The second feed item may be part of the same case that the first feed item is part of as generally described above at block of method .

In at block the computing device performing method responsive to a request to compose a third feed item displays a third prompt for third feed item data. The third prompt is displayed in the first user interface component which contains unpublished feed items. The third prompt is displayed without publishing the first and second feed items.

Similar to block of the agent may compose two feed items and wish to compose a third feed item without publishing the first two feed items. Returning to the agent may do this by clicking on one of the feed item types which may cause a third prompt to be displayed in the first user interface component . The three prompts may be displayed in the order in which they were opened or in any other order of the agent s choosing.

In at block the computing device performing method receives at the third prompt third feed item data for a third feed item. The third feed item is related to the same case as the first two feed items displayed in the first user interface component. The user may input the third feed item data by typing it into a text box selecting a file for attachment selecting one or more options presented in the prompt and the like.

In at block the computing device performing method responsive to an instruction to publish the first second and third feed items transmits the first second and third feed item data to a server to be stored and published at substantially the same time as generally described above at block of method .

In at block the computing device performing method displays a second case in the user interface. The second user interface component displays the published feed items of the second case as generally described above at block of method .

In at block the computing device performing method displays the published first second and third feed items in the second user interface component as generally described above at block of method .

These and other aspects of the disclosure may be implemented by various types of hardware software firmware etc. For example some features of the disclosure may be implemented at least in part by machine readable media that include program instructions state information etc. for performing various operations described herein. Examples of program instructions include both machine code such as produced by a compiler and files containing higher level code that may be executed by the computer using an interpreter. Examples of machine readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media and hardware devices that are specially configured to store and perform program instructions such as read only memory devices ROM and random access memory RAM .

While one or more implementations and techniques are described with reference to an implementation in which a service cloud console is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the one or more implementations and techniques are not limited to multi tenant databases nor deployment on application servers. Implementations may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the implementations claimed.

Any of the above implementations may be used alone or together with one another in any combination. Although various implementations may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the implementations do not necessarily address any of these deficiencies. In other words different implementations may address different deficiencies that may be discussed in the specification. Some implementations may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some implementations may not address any of these deficiencies.

While various implementations have been described herein it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present application should not be limited by any of the implementations described herein but should be defined only in accordance with the following and later submitted claims and their equivalents.

