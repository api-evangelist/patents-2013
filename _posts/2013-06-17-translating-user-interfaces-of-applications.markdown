---

title: Translating user interfaces of applications
abstract: A user interface translation system can provide functionality of translating at least a portion of a user interface of a primary application. The user interface translation system may, for instance, add an overlay interface over a portion of the primary application. The primary application can conduct all the processing tasks. The overlay interface can correspond to user interfaces of well-known applications that users may prefer. In certain embodiments, users can select from a list of overlay interfaces. The user interface translation system can receive user control input from the overlay interface and map the received input to a corresponding command for the primary application. The user interface translation system can also train users to adapt to a change in user interface over a period of time or usage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348666&OS=09348666&RS=09348666
owner: 
number: 09348666
owner_city: Vancouver
owner_country: CA
publication_date: 20130617
---
This application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 661 317 filed Jun. 18 2012 and titled ENHANCED COMPUTERIZED GAMING APPLICATIONS AND NON GAMING APPLICATIONS the entirety of which is hereby incorporated by reference and made a part of this specification for all that it discloses. Further this application incorporates by reference in its entirety U.S. application Ser. No. 13 919 776 filed Jun. 17 2013 titled TRANSFER OF VIRTUAL OBJECTS BETWEEN APPLICATIONS. 

It takes significant investment of time to become proficient with a user interface of a particular application. With increasing numbers of devices and operating systems users are often forced to learn new user interfaces when moving between systems and applications. For example a user may be most familiar with a Microsoft Word user interface for a word processing application. But at work or on their portable device they might have to use another word processing application for example Open Office or Google Docs. Learning the user interface of the second word processing application may waste time and decrease productivity.

The systems and methods described herein can be implemented by a computer system comprising computer hardware. The computer system may include one or more physical computing devices which may be geographically dispersed or co located.

Certain aspects advantages and novel features of the inventions are described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the inventions disclosed herein. Thus the inventions disclosed herein may be embodied or carried out in a manner that achieves or selects one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

In certain embodiments a system for translating user interfaces can include one or more hardware processors configured to execute a plurality of software modules. The software modules can include at least an overlay interface generator module that can generate an overlay user interface associated with a secondary application. The overlay user interface can be displayed in place of at least a portion of a user interface of a primary application. In some embodiments the overlay user interface can be display over at least a portion of a user interface of the primary application. The overlay user interface can include plurality of user interface controls. The system can also include a translator module. The translator module can receive a user control input corresponding to a particular user interface control of the plurality of user interface controls. In some embodiments the translator module can translate the received particular user control input to a corresponding one or more commands associated with the primary application wherein the corresponding one or more commands are selected such that execution of the one or more commands results in substantially the same output as execution of a command associated with the particular user interface control by the secondary application. The translator module can also initiate execution of the corresponding one or more commands by the primary application. In some embodiments user control input can be received via an accessibility device. The user control input can also be received by a non contact input including a hand gesture eye movement body movement feet movement or audio.

Additionally in certain embodiments a method of translating user interfaces can include generating an overlay user interface associated with a secondary application. The overlay user interface can be displayed in place of at least a portion of a user interface of a primary application. The overlay user interface can include a plurality of user interface controls. The method can further include receiving a user control input corresponding to a particular user interface control of the plurality of user interface controls. Furthermore the method can include translating by a computing system having one or more computer processors the particular user interface control to a corresponding one or more commands associated with the primary application. The corresponding one or more commands can be selected such that execution of the one or more commands results in substantially the same output as execution of a command associated with the particular user interface control by the secondary application. The method can also include initiating execution of the corresponding one or more commands by the primary application.

It takes significant investment of time to become proficient with a user interface of a particular application. With increasing numbers of devices and operating systems users are often forced to learn new user interfaces when moving between systems and applications. For example a user may prefer Microsoft Word user interface for a word processing application. But at work or on their portable device they might have to use another word processing application for example Open Office or Google Docs. Learning the user interface of the second word processing application may waste time and decrease productivity. It may not matter to the users whether the underlying application is Microsoft Office Open Office or Google Docs as long as they are able to carry on their word processing tasks. Thus it may be beneficial to provide users with the ability to exchange the user interface of the underlying application with a user interface that increases their productivity.

This disclosure describes embodiments of a user interface translation system that can translate some or all of the user interface or front end elements of other systems applications or games including ones with which the user is more familiar. The user interface translation system can import overlay or otherwise make functional an interface corresponding to a second application with a primary application. For example the user interface translation system can integrate an overlay corresponding to Microsoft Word 2007 with an Open Office Writer primary application from Apache Open Office 3.0. The tabbed menu system of Microsoft Word is significantly different than the pull down menu system of Open Office. A user wishing to transition her skills from Microsoft Word to the Open Office may utilize the user interface translation system to map features and or functions of Microsoft Word to similar or identical features and or functions of Open Office.

The user interface translation system can also assist administrators in training users to shift from one user interface to another. In some embodiments the user interface translation system can automatically change the overlay user interface based on usage patterns.

The user interface of the primary application can include a first portion and second portion . In some embodiments the first portion can include a menu portion of the primary application. The menu portion may include one or more user controls . Example user interface controls are shown including buttons drop down menu and the like. Any of the user interface controls shown can be replaced with other user interface controls including but not limited to status bars hyperlinks links radio buttons check boxes text boxes select boxes or drop down boxes combinations of the same and the like. The second portion of the user interface of the primary application can include an input output portion of the primary application . For example the second portion can include an area where users can type words insert pictures draw tables and perform other word processing functionalities.

In some embodiments the first portion of the primary user interface can be exchanged with the overlay interface as shown in . The overlay interface can include one or more user controls . Example user interface controls are shown including buttons drop down menu and the like. Any of the user interface controls shown can be replaced with other user interface controls including but not limited to status bars hyperlinks links radio buttons check boxes text boxes select boxes or drop down boxes combinations of the same and the like.

The overlay interface can be more preferable to a user than the native first portion of the user interface of the primary application. For example a user may be more familiar with the arrangement of user controls in the overlay interface . As shown in the overlay interface can include some user controls that are identical or substantially the same to the user controls of the primary application . As shown the user control of the overlay interface and the user control of the primary application may provide substantial functionality but can be in a different location relative to each other. For example the File user control may be in the left most position in the primary application. However in the overlay user interface the File user control can be arranged in the far right position. The change in position may reflect user preferences. The change in position may also reflect where that user interface control is typically found in a secondary application. The secondary application may be an application that is more familiar to the user. As an example a user may be more proficient with Microsoft Word and used to having the File user control on far right. But in the primary application the File user control might be on the far left. Translating the first portion of the primary application to overlay interface as shown in can enable users to maintain their proficiency. The translation functionality is described more in detail with respect to .

The overlay interface can also include user controls that are not provided or that do not identically match the functionality of user controls in the primary application. As shown the user interface control is not provided in the primary application. Also the functionality of the user control may not be substantially identical to any of the user controls provided in the primary application. Accordingly the user control may include a feature to make aware of the difference. The feature may include highlighting different coloring or shading as shown. The differences may also be made available to the user using another overlay for example a balloon and or different display of the feature actuation target. In some embodiments the difference might be in the underlying functionality. For example the word counting algorithm of the primary application may vary from the algorithm that the user associates with a secondary application corresponding to the overlay interface. Thus a user can be notified of the differences through highlighting or information overlay or like.

Further the overlay interface can also omit some of the user interface controls found in the primary application . In some embodiments users may customize overlay interface . The overlay interface may also automatically change over time as described more in detail below. For example the arrangement of user controls can change over time based on usage pattern of those user controls. In an aspect an agent may intercept some or all user input and pass such input on to an application. The agent may then intercept some or all data or output intended for display or other presentation to a user and pass such output on to the user. In passing such input to an application the agent may emulate a human user such as by emulating a mouse click event or a keypress. In passing such output to the user the output may be altered in some cases to appear more consonant with the apparent user interface presented to the user. In some cases the input and or output may be altered to increase accessibility for those with different abilities such as by increasing the size of the output for the visually impaired or by decreasing the amount of accuracy required in clicking a mouse for those who have small motor control impairments. In other cases the input and or output may be placed through a machine or other translation mechanism.

The system can include an overlay interface generator module that can generate a variety of overlay interfaces . In some embodiment users can select a preferred overlay interface from a list of overlay user interfaces. The overlay user interface data can be stored in overlay interface repository . For example if the primary application is OpenOffice users can select an overlay interface corresponding to one of Microsoft Word Google Docs or any other custom overlay interface. The U I translator system may also be able to import overlay user interfaces from third party sites . In one embodiment the overlay interface generator module can exchange a portion of the user interface of the primary application with an overlay interface as described with respect to .

The overlay interface generator module can also generate an entire overlay user interface for user systems . In this instance the generated overlay interface can function as the main user interface for the primary application . The primary application can be implemented on one or more servers. Users can interact with the overlay interface without worrying about which underlying primary application might be performing the processing. For example the system may generate a Microsoft Word user interface at the user system but the underlying processing may be done by another primary application such as Google Drive or Open Office. In some embodiments the primary application may be running on one or more servers. While in other embodiments the primary application may be running in background on the user systems . Accordingly the primary applications may be replaced or modified without significantly affecting the users. The users can continue working with the overlay interface that they are proficient in while the primary application is replaced.

The overlay interfaces can be generated by the U I translator system the U I translator system plugin or a combination of both. The system can generate overlay interfaces for web browsers stand alone client applications or mobile applications. The system can also generate overlay interfaces that can use capabilities of that particular device. For example the system can generate overlay interfaces for a wide range of user systems such as motor vehicles google glass a digital video recorder DVR game consoles entertainment systems etc. In one embodiment the overlay interface can integrate touch functionality of the user system . Devices such as google glass a vehicle dashboard or an entertainment system menu may have unique user controls input capabilities. The U I translator system can generate overlay interfaces that can take advantage of these unique user control inputs for example hand motion gestures head movements eye movements etc . Accordingly the U I translator system can provide a customized overlay interface that can be integrated with the controls of the user system to access the processing power of a primary application in the background. As described above the primary application can run on the user system or one or more servers.

In one embodiment the U I translator system is configured to translate an input from a user on a particular device e.g. Google Glass to an input on another device e.g. a desktop PC possibly in addition to translation of a user control input provided. For example a certain input on Google Glass e.g. a quick eye movement to the right may be translated by the U I translator system to a particular input on a desktop PC e.g. moving a cursor to the far right of a menu such as based on input command translations indicated in a data structure. Such an input command translation may then be used to select a user control input on an overlay interface of a secondary application e.g. selection of a menu command that is to be translated to one or more commands in a primary application.

The system can also include a translator module to enable mapping between the overlay user interface and the primary application . In one embodiment the translator module can receive user control input from the overlay interface . The translator module can map the received user control input to a corresponding command or combination of commands compatible with the primary application. The translator module can then transmit the mapped command to the primary application . The mapping data can be stored in a mapping data repository such as in one or more translation data structures discussed further below with reference to . The translator module can identify the overlay menu and the primary application to perform the mapping. In some instances an overlay menu ID and a primary application ID inputs are received by the translator module along with the user control input. For example the translator module can receive a user control input corresponding to a font change e.g. Bold from the overlay interface . Along with the user control input the translator module can also receive an overlay ID and a primary app ID. In some instances the overlay ID and the primary ID can be fixed. As an example the overlay ID could correspond to Microsoft Word and the primary app ID could correspond to OpenOffice. The translator module can map the user control input e.g. Bold received from the overlay interface to an equivalent command compatible with the primary application . Subsequently the translator module can send the mapped command to the primary application . The primary application can subsequently process the received command.

In some instances where the overlay interface functions as the sole user interface for the primary application the translator module can also receive output from the primary application . The translator module can send the output from the primary application to the overlay interface . The overlay interface generator module may enable the output from the primary application to be displayed in a proper format in the overlay interface . Accordingly users can interact with the overlay interface while the primary application is processing in the background.

The U I translation system can be implemented in computer hardware and or software. The U I translation system can execute on one or more computing devices such as one or more physical server computers. In implementations where the U I translation system is implemented on multiple servers these servers can be co located or can be geographically separate such as in separate data centers . In addition the U I translation system can be implemented in one or more virtual machines that execute on a physical server or group of servers. Further the U I translation system can be hosted in a cloud computing environment such as in the Amazon Web Services AWS Elastic Compute Cloud EC2 or the Microsoft Windows Azure Platform.

The user systems can remotely access the U I translation system on these servers through the network . The user systems can include thick or thin client software that can access the U I translation system on the one or more servers through the network . The network may be a local area network LAN a wide area network WAN such as the Internet combinations of the same or the like. For example the network can include an organization s private intranet the public Internet or a combination of the same. In some embodiments the user software on the user system can be a browser software or other application software. The user system can access the U I translation system through the browser software.

In certain embodiments the U I translation system s functionality can be implemented on the user systems . The U I translation system can be integrated with the primary application through a plug in or an API application programming interface . In some embodiments the primary application may come pre installed with a plug in to the U I translation system . In other embodiments a plugin to the U I translation system may be installed on to a primary application. For example the U I translation system plug in can be installed on an Open Office application.

In general the user systems can include any type of computing device capable of executing one or more applications and or accessing network resources. For example the user systems can be desktops laptops netbooks tablet computers smartphones PDAs personal digital assistants servers e book readers video game platforms television set top boxes or simply a television with computing capability a kiosk combinations of the same or the like. The user systems include software and or hardware for accessing the U I translation system such as a browser or other client software.

The process begins at block where the U I translation system receives a user control input. In some embodiments the user control input can be from selection of a user control by the user. In another embodiment the user control input can be from a touch sensor or a motion sensor. In a word processing type application for example the user may select a user control e.g. button to calculate a word count. The translator module can receive the user control input to calculate a word count. In some embodiments the U I translation system receives a primary app ID input to identify the primary application running in the background at block . The primary app ID may also be stored or fixed in U I translation system. In one embodiment the translator module can also receive overlay interface ID corresponding to the received user control input at block . The overlay interface ID may also be stored or fixed in the U I translation system. At block the translator module can then translate the received user control input to a corresponding command for the primary application. The translation may be based on a command lookup in one or more translation data structures e.g. a translation table or database . For example the translation data structure may be configured to translate user control inputs of a secondary application e.g. a click on a particular menu command to corresponding commands of a primary application e.g. one or more commands within another application . Depending on the embodiment the translation data structure may be stored on the U I translation system and or the user system . In one embodiment the translation data structure is stored on the user system perhaps after having been generated by the U I translation system in response to the user providing the desired primary and secondary applications such that the translation may be performed faster than if the translation data structure is stored only at the U I translator system. In such embodiments the translation may occur without any network communications to the U I translator system or even without connection to the Internet.

In another aspect the translation system and or database may be modified by the user an administrator or another entity. This may be used to create a single unified interface for a plurality of applications. For example the user might desire that an interface designed by that user or an interface familiar to that user such as the Microsoft Word interface be the basis for the user interface for all applications used by the user. However certain functions in other applications may not have an analogue in Microsoft Word just as certain Microsoft Word functions may not have an analogue in other applications. The user may alter the interface to remove certain elements when running an application without functions corresponding to those elements just as the user may alter the interface to add certain elements when running an application with functions that do not have corresponding control mechanisms in the existing interface. In another aspect the interface may simply be modified for the convenience of the user.

Continuing with the above example the translator module can identify the user control input for word count using overlay interface ID and map it to a corresponding command based on the primary app ID. At block the translator module can send the mapped command to the primary application for processing. In one embodiment the translation and execution of a command as discussed above in a primary app may occur in real time or substantially real time such that the translation is quick enough so that the user cannot detect the background process e.g. 

In some embodiments the change or modification to the overlay user interface can depend on user efficiency calculations or measurements. The training module can store for example the number of steps or time required to accomplish a task. For example the training module can track that rearranging save user control from a first location the file menu to a second location the document menu requires 30 seconds of inactivity as compared to 2 seconds before the rearrangement. The training module can use the efficiency measurements to intelligently maintain the overlay user interface. In the above example the save user control may be moved back to its original position or may temporarily appear in more than one place. In some embodiments a help shortcut may appear in the first location. The help shortcut may assist users in training. For example the file menu may have a save item that states save this has been moved to the document menu. The help shortcut may lead to the second location or may simply be a text or like.

In some embodiments licensed or free overlay interfaces may be used to avoid any copyright issues. For example companies may have license to use an application such as a license to use Microsoft Word. Thus companies may be able to use an overlay interface that corresponds to Microsoft Word along with a different primary application such as Open Office as described above. If desirable including if desirable for the purposes of avoiding copying the Microsoft Word interface the actual application may be run but input to the application may be intercepted and redirected to the new application.

It should be noted that in addition to word processing applications any of the features described here with respect to U I translation system can be implemented with other types of applications or games. For example a portion of user interface of a racing game can be translated with a user interface overlay corresponding to another game. In another embodiment user interface for a Toyota Prius can be translated to a Nissan Leaf user interface.

In one embodiment the user interface translation system can also redirect communications between a client and a server for a particular game or application. For example where a client software for Game A attempts to communicate with the server software for Game A the communications may be redirected such as by routing communications and or by creating false DNS entries and or by altering the code so that the communications are delivered to the server for Game B or primary application and the return data from the server for Game B delivered to the client software for Game A. In some implementations the return data can be different than it would be if the data was sent to a Game B native client. The user interface translation system can map requests between Games A and B. Accordingly the client software for Game A may be made interoperable with Game B. In other embodiments certain plug in or add on elements for one game or application such as a Facebook based game may be made interoperable with another system by controlling via front end back end intermediary software or any combination thereof an account that the game is dependent on such as a Facebook account and passing the data on to a different account such as a Google account so that a user who most actively uses the different account may utilize elements normally dependent on the other account without actually having to manually interact with the other account in the process. Without limiting the foregoing substitution or modification of cascading style sheets Flash HTML5 or other code may be used.

A number of computing systems have been described throughout this disclosure. The descriptions of these systems are not intended to limit the teachings or applicability of this disclosure. For example the user systems and described herein can generally include any computing device s such as desktops laptops video game platforms television set top boxes televisions e.g. internet TVs computerized appliances and wireless mobile devices e.g. smart phones PDAs tablets or the like to name a few. Further it is possible for the user systems described herein to be different types of devices to include different applications or to otherwise be configured differently. In addition the user systems described herein can include any type of operating system OS . For example the mobile computing systems described herein can implement an Android OS a Windows OS a Mac OS a Linux or Unix based OS or the like.

Further the processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. In addition two or more components of a system can be combined into fewer components. For example the various systems illustrated can be distributed across multiple computing systems or combined into a single computing system. Further various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Depending on the embodiment certain acts events or functions of any of the algorithms methods or processes described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all described acts or events are necessary for the practice of the algorithms . Moreover in certain embodiments acts or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Each of the various illustrated systems may be implemented as a computing system that is programmed or configured to perform the various functions described herein. The computing system may include multiple distinct computers or computing devices e.g. physical servers workstations storage arrays etc. that communicate and interoperate over a network to perform the described functions. Each such computing device typically includes a processor or multiple processors that executes program instructions or modules stored in a memory or other non transitory computer readable storage medium. The various functions disclosed herein may be embodied in such program instructions although some or all of the disclosed functions may alternatively be implemented in application specific circuitry e.g. ASICs or FPGAs of the computer system. Where the computing system includes multiple computing devices these devices may but need not be co located. The results of the disclosed methods and tasks may be persistently stored by transforming physical storage devices such as solid state memory chips and or magnetic disks into a different state. Each process described may be implemented by one or more computing devices such as one or more physical servers programmed with associated server code.

Conditional language used herein such as among others can might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or states. Thus such conditional language is not generally intended to imply that features elements and or states are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or states are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list. In addition the articles a and an are to be construed to mean one or more or at least one unless specified otherwise.

Conjunctive language such as the phrase at least one of X Y and Z unless specifically stated otherwise is otherwise understood with the context as used in general to convey that an item term etc. may be either X Y or Z. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of X at least one of Y and at least one of Z to each be present.

While the above detailed description has shown described and pointed out novel features as applied to various embodiments it will be understood that various omissions substitutions and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. As will be recognized the processes described herein can be embodied within a form that does not provide all of the features and benefits set forth herein as some features can be used or practiced separately from others. The scope of protection is defined by the appended claims rather than by the foregoing description.

