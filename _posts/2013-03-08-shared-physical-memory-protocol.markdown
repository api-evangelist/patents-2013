---

title: Shared physical memory protocol
abstract: A computer implemented method for receiving data to a targeted logical partition. A computer locates buffer element in reliance on a connection status bit array. The computer copies control information to the targeted logical partition's local storage. The computer updates a targeted logical partition's local producer cursor based on the control information. The computer copies data to an application receive buffer. The computer determines that an application completes a receive operation. Responsive to a determination that the application completed the receive operation, the computer a targeted logical partition's local consumer cursor to match the targeted logical partition's producer cursor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09417996&OS=09417996&RS=09417996
owner: International Business Machines Corporation
number: 09417996
owner_city: Armonk
owner_country: US
publication_date: 20130308
---
The present invention relates generally to the field of data communication and networking and more particularly to methods that communicate within a Central Electronic Complex CEC and between CECs InfiniBand and RDMA over Enhanced Converged Ethernet RoCE provide support for Remote Direct Memory Access RDMA technology are existing known technologies for high speed connectivity between hosts and servers. InfiniBand is a trademark of the InfiniBand Trade Association. These technologies are implemented in a networking environment with additional hardware and corresponding software including drivers and application programming interfaces. This means that using these high speed technologies requires server programs applications and clients to code to specific low level APIs to exploit them. For example instead of sockets User Direct Access Programming Library UDAPL would be used to communicate using InfiniBand.

There is a large existing base of servers applications and clients that are coded to the TCP IP sockets interface for communication. For these programs to exploit high speed interconnects in the current art significant rewriting of their communication methods would be required. This is a major undertaking and may not even be practical in some cases for example legacy applications whose source code or coding skill is lost . In addition to the implementation cost and long term cost of sustaining multiple APIs in each application new and unique network administrative requirements must be addressed e.g. configuration enablement High Availability security network load balancing and various TCP IP related Quality of Services e.g. SSL .

The current state of the art solution for this problem is Sockets Direct Protocol SDP which bypasses TCP IP and provides an alternative protocol stack underneath the sockets layer. This solution allows applications which are coded to the widely adopted sockets standard to run unmodified and the SDP stack under the sockets layer handles all the communication. However businesses still rely on legacy firewalls load balancers and other technologies to manage and secure their networks. These technologies rely on the ability to manage TCP IP setup flows to perform their function. Because SDP dispenses with these flows these network elements would have to be reinvented for SDP. Additionally many TCP IP stacks are mature products with built in security quality of service tracing and auditing etc. capabilities that have no corresponding feature in SDP.

Because of these limitations SDP is perceived as unsuitable for multi tier enterprise level business environments with complicated security high availability and quality of service requirements.

A method for exchanging data with a targeted host using a shared memory communications model. A shared memory communication SMC component provides a transparent sockets based communications solution in two variations a local variation when the virtual hosts reside on the same physical compute platform having direct access to the same physical memory by locating a shared memory buffer element in reliance on a connection status bit array and a remote variation when the virtual servers reside on separate physical compute platforms by locating a remote memory buffer element in reliance on RDMA technology. In both variations the SMC component copies control information to the targeted host s storage shared memory buffer element SMBE for local or remote memory buffer element RMBE for remote . The SMC component updates a targeted logical partition s local producer cursor based on the control information. The SMC component alerts the targeted host indicating data is available to be consumed. The SMC component copies application data to an application receive buffer. The SMC component determines that an application completes a receive operation. The SMC component updating the targeted logical partition s local consumer cursor to match the targeted logical partition s producer cursor responsive to a determination that the application completed the receive operation.

An illustrative embodiment provides a computer implemented method program product and data processing system for receiving data to a targeted logical partition. A computer locates buffer element in reliance on a connection status bit array. The computer copies control information to the targeted logical partition s local storage. The computer updates a targeted logical partition s local producer cursor based on the control information. The computer copies data to an application receive buffer. The computer determines that an application completes a receive operation. Responsive to a determination that the application completed the receive operation the computer a targeted logical partition s local consumer cursor to match the targeted logical partition s producer cursor.

A further illustrative embodiment provides a computer implemented method for dispatching data from a logical partition. The computer detects an application issued send operation. Responsive to detecting the application issued send operation the computer moves data to a buffer assigned to a targeted logical partition wherein the buffer is one selected from the group consisting of a shared memory buffer SMB and a remote memory buffer RMB . The computer updates a shared memory buffer header connection status bit array CSBA with details of the data. The computer issues an interrupt signal to the targeted logical partition. The computer returns program control to the application.

Peripheral component interconnect PCI bus bridge connected to I O bus provides an interface to PCI local bus . A number of modems may be connected to PCI local bus . Typical PCI bus implementations will support four PCI expansion slots or add in connectors. Communication links to networks may be provided through modem or network adapter connected to PCI local bus through add in boards. Additional PCI bus bridges and provide interfaces for additional PCI local buses and respectively from which additional modems or network adapters may be supported. In this manner data processing system allows connections to multiple network computers. A memory mapped graphics adapter and hard disk may also be connected to I O bus as depicted either directly or indirectly.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. For example other peripheral devices such as optical disk drives and the like also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.

The data processing system depicted in may be for example an IBM System z server running z OS or Linux or an IBM P Server running the Advanced Interactive Executive AIX operating system or Linux. AIX P Server and System z are trademarks or registered trademarks of International Business Machines Corporation. Linux is a trademark of Linus Torvalds.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory and the like may be used in addition to or in place of the hardware depicted in . In addition the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

Some illustrative embodiments provide a path for high performance communications between logical partitions residing in a common central electronic complex CEC . For logical partitions LPARs that communicate within the CEC memory may be dedicated for use in a local direct memory access DMA configuration. As such the memory so dedicated can be partitioned away from the existing physical memory. New software communication protocols such as shared memory communications protocol are defined to exploit this new form physical memory. Such protocols use this physical memory arranged as a shared memory pool. Efficiencies between LPARS can thus be comparable to program to program call architecture performed within an LPAR or within a single operating system image at least by some illustrative embodiments.

The interaction of a logical partition with an operating system image can result in a practical application namely an operating system. Each of these three terms LPAR operating system image and operating system will now be defined and shown to cooperate with each other.

A logical partition or LPAR sometimes called a virtual machine is an isolated collection of data processing system resources. The logical partition can be organized by a hypervisor that regulates hardware access to that memory storage and communication resources as established in a table or other data structure. Accordingly the logical partition may have a serial number or other identifier for internal housekeeping and identity functions that allow the hypervisor and helper software components to permit access to resources as needed based on the identity of the abstracted logical partition.

An operating system image is the computer instructions stored to files that describe how to convert a general purpose computer or the specific resources of a logical partition to low level and utility access of such resources by a user or the applications operated by the user. At a high level these computer instructions when coupled to such computer or LPAR can permit authentication authorization storage access memory access processor and thread access access to peripherals and I O and other functions that permit applications to perform work useful to users and or additional applications.

An operating system on the other hand is the resultant special purpose computer that is the combination of logical partition with operating system image. The operating system may be called an OS instance when the operating system is identical in computer instructions and co exists in a common structure with other operating system instances. In other words the operating system instance is the specific operating system image coupled to the specific logical partition or alternatively general purpose computer .

Accordingly hypervisor may configure and maintain the resource allocations in CEC . For example hypervisor under the control of an administrator may allocate shared memory or physical memory among the plural logical partitions and . LPARs that host an operating system image may be called operating system and . Accordingly during the use of LPARs for productive work the LPARs may be referred to as operating systems and are synonymous for as long as an operating system is loaded into the resources and invoked by a boot up process of the corresponding LPAR. The allocated shared memory is physical memory. A physical memory is low latency memory that returns contents within a few processor clock cycles. Physical memory can be for example local memory comprising dynamic random access memory DRAM . Physical memory is distinguishable from virtual memory which in contrast may be stored in a block device offsite or in some other high latency storage arrangement. Physical memory is tangible whereas virtual memory is an abstraction of memory and storage that can extend the apparent size of physical memory with some performance tradeoffs. The virtualization of physical memory made available to the Operating System OS is a virtualization function provided by the OS i.e. the hypervisor is not involved with physical memory virtualization . Each LPAR may take its allotment of shared memory and further specifically allocate it to form a remote memory buffer RMB explained further below. RMBs are allocated to each of LPARs respectively. Similarly RMB is allocated within LPAR .

In the process of configuring CEC for operation hypervisor can segregate isolated shared memory for use solely in communicating between LPARs of the CEC as well as to LPARs in neighboring CECs as will be explained below. In other words a shared memory buffer can be described by a data structure that identifies the portion of physical memory reserved as a shared memory buffer whether such memory is enabled and the identity of the LPARs authorized to access the shared memory buffer. Shared memory buffer can be one of several shared memory buffers created to facilitate communications between two logical partitions. The enablement and initial setup of shared memory buffers is described in one or more of patent application Ser. Nos. 13 790 039 titled Using Transmission Control Protocol Internet Protocol TCP IP To Setup High Speed Out Of Band Data Communication Connections and 13 494 831 titled Redundancy In Shared Memory Communications which are herein incorporated by reference.

CEC connects to CEC via LAN . CEC may rely on an additional hypervisor namely hypervisor . As such hypervisor can similarly arrange LPARs and to each be allocated portions of memory .

The creation and destruction of LPARs is at the control of an administrator who directly or indirectly presents credentials that authenticate the administrator as authorized to perform administrative functions. Administrative functions include but are not limited to the operation of commands as a super user within UNIX and similarly styled operating systems. It is appreciated that administrative authority can be divided among multiple administrators with each having distinct or overlapping levels of authority to configure a CEC.

A shared memory pool is memory shared among one or more LPARs in a CEC and may include memory that is not allocated. In other words the shared memory is segregated for special purposes. Physical memory and are examples of shared memory pools.

Communication functions between LPARs of a common CEC as well as between LPARs hosted on different CECs can occur via software components that emulate the operation of a network interface card NIC but exclude some of the overhead functions of a conventional NIC. The communication function can be supported in remote memory buffer and is further described in patent application Ser. No. 13 494 831 titled Redundancy In Shared Memory Communications which is herein incorporated by reference.

A positive result at step may result in the operating system initializing the shared memory RDMA environment and establish a device driver component step . Next or in response to a negative determination at step the hypervisor may create access to a VLAN step . Any shared memory buffers SMBs in use for example at step may be for example shared memory buffer of . As such the shared memory buffer SMB may be used solely for the purpose of communicating between logical partitions.

As part of setting up or creating each LPAR the hypervisor may establish an address by which communications are directed. An address is a unique identifier of the LPAR that permits it to specifically receive data within a data processing system. An address may be an Internet Protocol IP address for example.

Control over the SMB may now be jointly held by the LPAR and LPAR . According to communication protocols each of LPAR and LPAR may exchange data in reliance on the SMB. Accordingly one or both LPARs may place request data response data or streaming data in the shared memory. Such communication functions may persist indefinitely. For convenience the embodiments describe a LPAR as performing each of the remaining steps in . However it is appreciated that the two or more LPARS authorized to access the SMB may singly or jointly conduct the following steps.

As such an LPAR that is using allocated memory of a CEC is said to be within or on the CEC and can in some cases be a origination LPAR formed from resources on the common CEC to a targeted LPAR. Processing may terminate thereafter.

However a positive result at step can result in a determination whether the client is SMC capable and enabled step . If so a determination is made whether the server is SMC capable and enabled step . A negative determination at steps or can cause the LPAR to establish a TCP connection step . Processing may terminate thereafter.

If step is positive the SMC component may determine whether the client is SMC local capable and enabled step . If so the SMC component further determines if the server is SMC local capable and enabled step . If so the SMC component further determines whether the peer is on the same CEC step . If any of steps or are negative the SMC component may initialize the SMC RDMA environment by allocating a RMB and assigning a remote memory buffer element RMBE element to this connection and registering or connecting to a local RNIC step . An RMBE is a sub part to an RMB. Nevertheless if an RMB is already available on the local LPAR this step can be skipped. A remote memory buffer RMB is a buffer established according to the conventions of shared memory communications remote further defined by patent application Ser. No. 13 790 039.

Following step the SMC component may establish RC QPs for connection and initialization step . Next the SMC component may complete the SMC connection setup and transition the corresponding TCP socket to an active state step . Processing may terminate thereafter.

A positive determination at step may cause the SMC component to initialize a SMC local environment by allocating a SMB and assigning a SMBE to this connection step . SMB can be for example shared memory buffer of . Processing may terminate thereafter.

Similarly the client related portion is made up of portions. A client related portion has its own producer cursor and a consumer cursor . The client related portion also has a dynamic portion of data that like the server related portion can be dynamic and move through reserved memory in the manner of a circular buffer. This dynamic portion is called available data to be consumed by the client . Available data is referenced at the beginning by client related consumer cursor and at the end by server related producer cursor .

As such the server host LPAR can rely on a TCP layer having SMC features to consume data moved to memory referenced by server related consumer cursor while the client host LPAR can rely on its own TCP layer having SMC features to consume data moved to memory referenced by client related consumer cursor .

In situations where the server and client are not on the same CEC then RMBs can be deployed. The RMB has the same format as the SMB and RMBs are also subdivided into elements RMBEs where elements correspond to individual TCP connections. The SMBE format of is identical to the RMBE format. However the RMBE is logically divided in half whereby each host provides their peer with an RMBE to produce write data. The provider of the RMBE then consumes reads data that is produced by their peer. The shared memory operations provided by the shared memory component is identical for SMBEs and RMBEs. Shared memory operations include producing data and consuming data.

A separate data structure can signal which among several SMBEs currently has additional data ready to be consumed by an application. A connection bit status array is a data structure that identifies which among several connections of an SMB contains such data ready to be consumed. In other words for each SMB an indicator within the connection bit status array indicates whether on one hand data is present on a connection and on the other hand data is not present on a connection. To be present on a connection the two cursors or references that point to available data must not point to the same memory address. For example both the server and the client have data available as pictured in . RMBs deploy an alert token that allows the consumer to find an RMBE with pending work that was produced by the peer.

Otherwise the SMC component may copy application to the SMB step . More specifically the SMC component may copy the application data to the peer LPAR s receive area for example client related portion of . Application data is data that is provided by the application. Next the SMC component may update the producer cursor step . The producer cursor may be producer cursor of . Next the SMC component may update connection status bit array CSBA step . The status bit array is memory that is allocated to either the SMB owner or the peer for notifying its counterpart that data is available. This notification can be accomplished using a signal token. The SMC component may do this update by issuing an SM move to the SMB header. The SM move can change a bit that is associated with the unique connection between a sending logical partition and a receiving logical partition. Periodic referencing of the CSBA by all logical partitions can operate as a signal to a targeted logical partition that data is being made available to it.

Next the SMC component may conditionally invoke a signal buffer to interrupt the peer LPAR and update the status bit array SBA step . An SIGB is a specific form of interrupt. It is appreciated that other forms of interrupt may be used. Next the SMC component may post a socket send complete step . A socket send complete is a signal from the OS to application. Processing may terminate thereafter.

Next the SMC component updates the consumer cursor step . Next the SMC component may post a socket receive complete step . The local consumer cursor or targeted logical partition s consumer cursor is the cursor that points to a beginning of data obtained from a logical partition other than the one that hosts the application. This logical partition may be referred to as the producer logical partition. The producer logical partition will write next if at all in relation to the connection at the peer producer cursor. Accordingly when the local consumer cursor matches the peer producer cursor no further data is available to be read by the local application or logical partition since its peer has not yet added more data in a manner to advance the peer producer cursor beyond the local consumer cursor. Processing may terminate thereafter. Processing terminates thereafter.

Next the SMC component may post a socket send complete step . Following a negative result to step and after step processing may terminate.

The SMC component may next copy application data to a target application buffer step . Next the SMC component may update a consumer cursor step . Next the SMC component may update the sender s copy of the consumer cursor step . Next the SMC component may post a socket receive complete step . Processing may terminate after step and a negative outcome to step .

On the other hand a positive determination at step may cause the SMC component to determine if a SMC local SMC L receive has occurred step . In response to a positive determination the SMC component may copy available data from SMBE to a target application buffer step . Next the SMC component may update the consumer cursor step .

However a negative determination at step can cause the SMC component to copy available data from the RMBE step . Next the SMC component may update the consumer cursor step . Next the SMC component may update the sender s copy of the consumer cursor via RDMA write step .

After either steps or the SMC component may post socket receive complete step . Processing may terminate thereafter.

In response to a negative determination at step the SMC component may notify a peer via a close control flag update in the peer LPAR s RMBE step .

Next the SMC component may update the local RMBE with the close control flag step . Next the SMC component may mark the socket closed step . Next the SMC component may return control to the application step . Processing may terminate thereafter.

A shared memory communications protocol can coordinate the placement of data into a ring buffer for eventual consumption by an application by providing suitable interrupts or alternatively indications that data has been placed into the ring buffer. The ring buffer being outside the exclusive control of a logical partition can obviate the execution of processing intensive functions that were necessary by the prior art. Such eliminated processing can include TCP IP functions that include the formation and interpreting of packets and their header data. Accordingly fewer data moves may be needed in circumstances where a logical partition operates inside a common CEC with a peer logical partition.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The description of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly one or more embodiments may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore embodiments may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable storage device s may be utilized. A computer readable storage device may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage device would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage device may be any tangible device that can store a program for use by or in connection with an instruction execution system apparatus or device. The term computer readable storage device does not encompass a signal propagation media such as a copper cable optical fiber and wireless transmission media.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or computer readable tangible storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

