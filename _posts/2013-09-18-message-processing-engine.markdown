---

title: Message processing engine
abstract: Techniques are described for updating applications installed on devices. The applications may include native applications having a web view component to handle interpreted language instructions. The applications may also include web applications executable within a browser. A message may be sent to a computing device, the message including update information specifying one or more updates to the state or the features of an application. The update information may be described using interpreted language instructions. To handle the updates to an application in instances when the application is inactive, a stand-alone interpreter engine may be employed instead of the web view component or instead of the interpreter engine included in a browser. Use of the stand-alone interpreter engine may mitigate possible performance effects or intrusive user interface elements from launching the web view component or the browser-based interpreter engine to perform update operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489190&OS=09489190&RS=09489190
owner: Amazon Technologies, Inc.
number: 09489190
owner_city: Reno
owner_country: US
publication_date: 20130918
---
Given the popularity of small mobile computing devices such as smartphones tablets and the like application developers create a wide variety of applications to execute on such devices. Application developers may periodically update the applications installed on mobile devices to add new features correct problems improve user experience and so forth. Because some mobile devices may have limited capabilities such as limited storage capacity or limited processing power updating applications may consume a substantial proportion of the resources of a mobile device and may result in a degraded user experience.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout.

This disclosure describes implementations of systems devices methods and computer readable media for updating applications on computing devices through the use of a stand alone interpreter engine module configured to interpret code that is written in an interpreted programming language. In some cases one or more applications installed on a computing device may include one or more native applications that are compiled to execute on a particular target platform such as a computing device that runs a particular operating system or that includes a particular processor. The application s on a computing device may also include one or more web applications that are written to execute within a web browser on the computing device.

In some cases the application s on a computing device may include one or more native applications that are written to include one or more objects classes or other components that enable the native application to interpret information that may otherwise be interpreted through a web browser. In some cases a native application may include a web view component that enables the application to interpret execute or otherwise handle code written in JavaScript Hypertext Markup Language HTML or another language that may otherwise be handled by a web browser or a dedicated runtime interpreter engine e.g. a JavaScript runtime . For example in cases where a native application is written to execute on a version of the Android operating system from Google Inc. of Mountain View Calif. USA the native application may include a web view component such as the WebView class included in the android.webkit package. As another example in cases where a native application is written to execute on a version of the iOS operating system from Apple Inc. of Cupertino Calif. USA the native application may include a web view component such as the UIWebView class. A WebView class or a UIWebView class may be included in the source code of the native application and embedded in the native application as a component when the source code is compiled to generate a machine executable version of the native application. Alternatively a web view component may be included in a runtime library that is accessed by the native application when the native application executes. When the native application executes an object instance of the WebView or UIWebView class may perform operations to interpret execute or otherwise handle code written in JavaScript Hypertext Markup Language HTML or other languages. Compiling or otherwise including a web view component in a native application may enable the native application to execute JavaScript or other interpreted language code outside of a web browser environment. Accordingly a web view component may be described as an interpreter engine that is configured to execute with the native application and that is configured to interpret execute or otherwise handle code written in an interpreted programming language.

An interpreter engine or interpreter engine module may include any process application or module that executes interprets or otherwise handles code or instructions written in an interpreted programming language. Accordingly an interpreter engine may include a runtime engine a virtual machine an interpreter application or process. Further an interpreter engine may include a library component method subroutine or sub process of one or more applications processes or modules.

To update an application on a computing device one or more messages including update information may be sent to the computing device from another device e.g. an update server device or a messaging server device . The update information included in the message s may be information to update one or more features of an application. Such feature update information may provide an updated version of the application including updates to the features functions design user interface code or other aspects of the application. For example feature update information may include updates to the source code or to the binary executable of the application. Such updates may implement new functions or features or modify functions or features that were supported in a previous version of the application. Update information may also include information to update a state of an application. Such state update information may include updates to a current or recent runtime state of the application such as updates to data stored in one or more objects variables or other data structures of the application.

Implementations support the use of any protocol format schema or standard to implement the one or more messages that carry the update information. In some implementations the message s may be arranged according to the JavaScript Object Notation JSON standard originally specified by Douglas Crockford and described in Request for Comments RFC 4627 of the Network Working Group. In such implementations the update information may be described in JavaScript code. Alternatively the update information may be described using another interpreted programming language or any other format. In cases where the update information is sent via JSON message s to update a target application and the target application is not currently active when the message s are received an interpreter engine may be started to parse interpret or execute the JavaScript encoded update information carried in the JSON message s . In cases where the target application is a web application the launched interpreter engine may be a web browser component that interprets handles or otherwise processes instructions in an interpreted programming language when the web application is executing within the web browser. In cases where the target application is a native application that includes a web view component to handle JavaScript code the launched interpreter engine may be an instance of the web view component. The launched interpreter engine may also be a stand alone interpreter engine e.g. a full featured or large memory footprint engine that executes independently of a web browser.

In scenarios where update information is received for an application that is not currently active on the device launching a more full featured interpreter engine e.g. an engine that is a component of a web browser or a web view component instance to process the update information may lead to memory usage or processor usage that may degrade the performance of the computing device or of other processes executing on the computing device. Moreover in some cases launching a web browser or a web view component instance on the computing device may spawn one or more user interface UI elements that are displayed on the computing device. Such UI elements may be intrusive in that they may interfere with other applications that are currently foregrounded active and in use by a user of the device. These or other potentially performance degrading or intrusive effects may be particularly pronounced on smaller devices e.g. mobile devices with limited storage memory processing or display capabilities.

To mitigate such possible effects implementations include a stand alone interpreter engine that may be executed on receipt of the message s carrying the update information. The stand alone interpreter engine may have fewer features or reduced functionality compared to that of the more full featured engine e.g. a web view component or an engine that is a component of a web browser that may otherwise be executed to handle the update information. For example the stand alone engine may lack UI features or other displayed features that may be present in the more full featured engine. In some cases the stand alone interpreter engine may have a smaller memory footprint than that of the more full featured engine such that the stand alone interpreter engine may execute in a smaller portion of active memory on the device. The stand alone interpreter engine may also consume less processing capacity on the device. In some cases because the stand alone interpreter engine may include fewer features or reduced functionality compared to the more full featured engine the stand alone interpreter engine may start up in less time than the more full featured engine. By employing the stand alone interpreter engine to process the received update information one or more inactive applications may be updated while avoiding the intrusive UI elements or performance degradation that may be incurred by launching the more full featured engine on the computing device.

The environment may include various computing devices . The computing devices may comprise any type of computing device including but not limited to a server computer a personal computer a network computer a cloud computing or distributed computing device a smartphone a tablet computer a wearable computer an implanted computer a mobile gaming device an electronic book reader an automotive computer a desktop computer a laptop computer a thin client a terminal a game console a smart appliance a home entertainment device and so forth. An example of the computing devices is described further with reference to . In some cases two or more of the computing devices may comprise a cluster cloud farm or other grouping of multiple devices that coordinate operations to provide load balancing failover support parallel processing capabilities shared storage capacity or other aspects. In some cases the computing device s may include a display to visually present information to a user. However implementations are not so limited and may also support computing device s that do not have a display e.g. headless devices .

In the example of the environment includes one or more computing devices that may be user devices owned by operated by or otherwise associated with one or more users. In some cases the computing device s may be mobile devices such as smartphones tablet computers and the like designed to be readily portable by a user. The environment also includes one or more computing devices that may be server devices such as messaging server devices or update server devices. The computing device s may be located remotely from the computing device s and may communicate with the computing device s over one or more networks.

The computing device s may include messaging server device s that execute a messaging service module to send one or more messages to the computing device s . Implementations support the use of any protocol format schema or standard to implement the message s . In some cases the message s may be arranged according to the JSON standard or according to a version of the JSON standard that has been at least partly modified. The message s may include information that is described using an interpreted programming language. For example the message s may include code in the JavaScript programming language originally developed by Network Communications and currently provided by Oracle Corporation of Redwood City Calif. USA.

Although the examples herein may describe the use of JavaScript code in the message s and elsewhere implementations also support the use of other programming languages. For example implementations support the use of any interpreted programming languages or scripting languages including but not limited to one or more of the following JavaScript or Java provided by Oracle Corporation of Redwood City Calif. USA Visual Basic VBScript or C provided by Microsoft Corporation of Redmond Wash. USA Perl originally developed by Larry Wall and so forth. Implementations also support the use of interpreted programming languages that are markup languages such as HTML Dynamic HTML DHTML Extensible Markup Language XML Extensible HTML XHTML and so forth. Because the message s may carry information that is coded or otherwise described using an interpreted programming language the computing device s that receive the message s may execute one or more interpreter engines to interpret execute or otherwise handle code included in the message s .

Implementations support any type of information carried by the message s . In some implementations the message s may carry update information that describes one or more updates to be applied to one or more applications on the computing device s . The update information and the message s are described further with reference to . In some implementations the update information may describe updates to a state of one or more applications to feature s of one or more applications or to both the state and feature s of one or more applications. Such update information may be sent from the computing device s to enable improvements to be made to installed applications on the computing device s to keep such applications current or to provide additional information or a substantially improved user experience to users of the computing device s .

The message s may be received by a messaging client module executing on the computing device s . In some cases the messaging client module may be always executing on the computing device s or may be executing during a typical operational state of the computing device s . On receiving the message s the messaging client module may parse analyze or otherwise process the message s to extract the update information and identify one or more applications targeted by the message s e.g. application s to be updated . In some implementations the message s may include application identification information that identifies the application s for which the message s carry updates. After determining an application corresponding to the message s the messaging client module or another module executing on the computing device s may at determine an execution status of the application the execution status indicating whether the application is currently active on the computing device . An application may be active if it is currently executing and if it is not paused or sleeping. In cases where the application is a user application that provides a user interface enabling user interaction the application may be active if a user is currently interacting with the application if the application is foregrounded on the computing device or if the user interface of the application is currently being presented on the computing device . An application may be inactive in cases where the application is executing but is paused or sleeping. An application may also be determined as inactive if it is not currently executing on the computing device . The determination of whether the application is active may be based on the messaging client module examining a list of processes applications or modules that are currently executing on the computing device .

If the execution status indicates that the application is currently active the messaging client module may communicate the update information to an interpreter engine module associated with the currently active application . In examples illustrated by the application is a native application that includes a web view component for handling interpreted language code such as JavaScript HTML and so forth. In such cases the interpreter engine module may be the web view component incorporated into the application . If the application is currently active the interpreter engine module e.g. the web view component may also be executing and available to handle the update information .

If the execution status indicates that the application is not currently active e.g. is paused or not executing the messaging client module may communicate the update information to a second interpreter engine module . In some cases the second interpreter engine module may already be executing to receive and process the update information . Alternatively the messaging client module may launch or start the interpreter engine module to receive and process the update information . In some implementations the interpreter engine module may be a stand alone interpreter engine that is configured to execute independently of the application . The interpreter engine module may have a smaller set of features compared to those of the interpreter engine module or may use a smaller portion of memory when executing. Accordingly the interpreter engine module may be described as a small footprint interpreter engine. In implementations where the update information includes JavaScript code one or both of the interpreter engine modules and may be JavaScript runtime engines or environments that are configured to execute JavaScript instructions.

The update information applied to the currently active application may generate an updated application that is updated with regard to its feature s state or both feature s and state. In cases where the update information is applied to the currently inactive application through use of the interpreter engine module the interpreter engine module may process the update information and write the updates to memory on the computing device s . When the application is subsequently activated it may incorporate the updates from memory and activate as the updated application . In this way implementations may enable updates to be applied to currently inactive application s without launching a full version of the interpreter engine module that may consume memory and processing capabilities generate an intrusive UI or otherwise impact performance or user experience on the computing device s .

If the execution status e.g. as determined by the messaging client module indicates that the application is currently active and executing within the web browser as the application the messaging client module may communicate the update information to the interpreter engine module included in the web browser . If the execution status indicates that the application is not currently active the messaging client module may communicate the update information to the second stand alone interpreter engine module as described with reference to . In this way implementations may enable updates to be applied to currently inactive application s without launching the web browser and potentially impacting performance or user experience on the computing device .

If the execution status e.g. as determined by the messaging client module indicates that the application is currently active and executing as the application such that the interpreter engine module is also executing the update information may be sent to the interpreter engine module . If the execution status indicates that the application is not currently active the update information may be communicated to the second stand alone interpreter engine module . Although illustrates examples in which the application is a native application that includes a web view component as the interpreter engine module implementations also support the updating of a web application e.g. as in the example of from the communication enabled module s executing on the same computing device .

The various devices of the environments and may communicate with one another using one or more networks. Such networks may include public networks such as the Internet private networks such as an institutional or personal intranet or some combination of private and public networks. The networks may include any type of wired or wireless network including but not limited to local area networks LANs wide area networks WANs wireless WANs WWANs wireless LANs WLANs mobile communications networks e.g. 3G 4G etc. and so forth. In some implementations communications between the various devices in the environments and may be encrypted or otherwise secured. For example such communications may employ one or more public or private cryptographic keys digital certificates or other credentials supported by a security protocol such as any version of the Secure Socket Layer SSL or the Transport Layer Security TLS protocol.

The message s may also include the update information . As described above the update information may be included as code or instructions in an interpreted programming language such as JavaScript HTML Java Peri VBScript and so forth. The update information may include state update information to be employed to update a current state of the application s . The state may include a current runtime or execution state of the application s such as the data currently stored in objects variables or other active memory structures associated with the application s . The state of the application s may be described as the data currently stored in such memory structures within the interpreter engine module e.g. the interpreter runtime or virtual machine that was last executing the application s in cases where the application s execute in the interpreter engine module .

The update information may include feature update information to be employed to update one or more features of the application s . The feature s of the application s may be described as the functions operations design user interface or other aspects of the application s . The feature s of the application s may include any aspects that persist across various executions of the application s and that therefore may be distinguished from a current or recent runtime state of the application s . The feature update information may include updates to the source code the compiled binary code the compiled intermediate language code e.g. where the application is a Java application C application or an application written in another interpreted language or the feature set of the application s . Accordingly the feature update information may specify an updated version of the application s .

The update information may include the state update information the feature update information or both the state update information and the feature update information . Implementations also support other types of information included in the message s .

The computing device may include one or more input output I O devices . The I O device s may include input devices such as a keyboard a mouse a pen a game controller a touch input device an audio input device e.g. a microphone a gestural input device a haptic input device an image or video capture device e.g. a camera or other devices. In some cases the I O device s may also include output devices such as a display an audio output device e.g. a speaker a printer a haptic output device and so forth. The I O device s may be physically incorporated with the computing device or may be externally placed.

The computing device may include one or more I O interfaces to enable components or modules of the computing device to control interface with or otherwise communicate with the I O device s . The I O interface s may enable information to be transferred in or out of the computing device or between components of the computing device through serial communication parallel communication or other types of communication. For example the I O interface s may comply with a version of the RS 232 standard for serial ports or with a version of the IEEE 1284 standard for parallel ports. As another example the I O interface s may be configured to provide a connection over Universal Serial Bus USB or Ethernet. In some cases the I O interface s may be configured to provide a serial connection that is compliant with a version of the IEEE 1394 standard. The computing device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the computing device .

The computing device may include one or more network interfaces that enable communications between the computing device and other network accessible computing devices. The network interface s may include one or more network interface controllers NICs or other types of transceiver devices configured to send and receive communications over a network.

The computing device may include one or more memories described herein as memory . The memory comprises one or more computer readable storage media CRSM . The CRSM may include one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions that may describe data structures program modules processes applications or other data for the operation of the computing device . In some implementations the memory may provide storage of computer readable instructions or other information in a non transitory format.

The memory may include an operating system OS module . The OS module may be configured to manage hardware resources such as the I O device s the I O interface s and the network interface s and to provide various services to applications processes or modules executing on the processor s . The OS module may include one or more of the following any version of the Linux operating system originally released by Linus Torvalds any version of iOS from Apple Corp. of Cupertino Calif. USA any version of Windows or Windows Mobile from Microsoft Corp. of Redmond Wash. USA any version of Android from Google Corp. of Mountain View Calif. USA and its derivatives from various sources any version of Palm OS from Palm Computing Inc. of Sunnyvale Calif. USA and its derivatives from various sources any version of BlackBerry OS from Research In Motion Ltd. of Waterloo Ontario Canada any version of VxWorks from Wind River Systems of Alameda Calif. USA or other operating systems.

The memory may include one or more of the modules described above as executing on the computing device s such as the messaging service module the messaging client module the application s the interpreter engine modules and the web browser and the communication enabled module s . The memory may also include one or more other modules such as a user authentication module or an access control module to secure access to the computing device and so forth.

The memory may include data storage to store data for operations of the computing device . The data storage may comprise a database array structured list tree or other data structure and may be a relational or a non relational datastore. The data storage may store data such as that described above including one or both of the message s or the update information . The data storage may also store other data such as user authentication information or access control data. In some implementations at least a portion of the information stored in the data storage may be stored externally to the computing device on other devices that may communicate with the computing device via the I O interface s or via the network interface s .

At a message notification may be sent from the computing device s e.g. the messaging server device s to the computing device s e.g. the user device s indicating that a message is available. In some cases the message notification may be sent to one or more particular computing devices or to one or more particular types of computing devices . Alternatively the message notification may be broadcast to a plurality of computing devices of various types or configurations.

At the message notification may be received by the messaging client module or other modules executing on the computing device s . At based at least partly on the message notification the available message may be retrieved from the computing device s or from another device in communication with the computing device s . In some implementations the retrieval of the available message may employ a GET or some other request to retrieve the message from a particular location identified by a Uniform Resource Locator URL or some other designated network location. Such requests may be Hypertext Transfer Protocol HTTP requests or may be based on some other communication protocol.

At the message may be received by the messaging client module or another process executing on the user device . The message may include the update information as described with reference to . In some implementations the message may be arranged according to a format schema or protocol such that the update information is included in the message as instructions or code in an interpreted programming language. For example the message may be in the JSON format and the update information may be incorporated as JavaScript code.

At the message may be parsed analyzed or otherwise processed to extract the update information and to determine the application that is to be updated with the update information included in the message .

At a determination is made of an execution status of the application identified in the message . As described above the execution status may be determined based at least partly on examining a list of currently active processes or applications on the computing device .

At a determination is made whether the execution status indicates that the application is active such that it is currently executing or currently presented e.g. foregrounded on the computing device . If the application is not currently active the process may proceed to described with reference to . If the application is currently active the process may proceed to .

At the first interpreter engine module is identified that is currently executing to at least partly support the execution of the application . As described above with reference to the first interpreter engine module may be a web view component that is incorporated into the application e.g. a native application . Alternatively the first interpreter engine module may be a component of the web browser in which the application e.g. a web application is currently executing. The first interpreter engine module may include a larger set of features than the second interpreter engine module or may consume a larger portion of memory than the second interpreter engine module while executing.

At the first interpreter engine module may be employed to update the application based on the update information while the application is active. In cases where the update information includes the feature update information updating may include restarting the application to incorporate new features or new functionality into the application or to apply changes to the source code or binary executable of the application . In cases where the update information includes the state update information updating may include updating the data stored in variables objects or other data structures of the application in active memory while the application is executing.

At a determination is made that the application e.g. the application identified in the message is currently inactive based on the analysis of the execution status at . As described above the inactive execution status may indicate that the application is not currently executing on the computing device or that the application is currently executing but paused sleeping or in the background.

At a determination is made whether the second interpreter engine module is currently executing on the computing device . As described above the second interpreter engine module may have a reduced set of features compared to those of the first interpreter engine module or may use a smaller portion of memory than the first interpreter engine module while executing. If it is determined that the second interpreter engine module is executing the process may proceed to . If it is determined that the second interpreter engine module is not currently executing the process may proceed to and launch start or otherwise initiate execution of the second interpreter engine module . The process may then proceed to .

In some implementations at the first interpreter engine module may be blocked or otherwise prevented from executing while the second interpreter engine module is updating the application . Such blocking may prevent possible conflicts between different versions of the state or the feature s of the application such as attempting to update the runtime state data or the feature s of the application while that state data or feature s are being accessed modified or otherwise employed by the executing application . In some cases blocking the first interpreter engine module from executing may include the denying e.g. by the operating system of one or more requests to launch the application while the updating is in progress.

At the second interpreter engine module may be employed to update the application while the application is inactive based at least partly on the update information . In some implementations the updating at may include writing the update information to storage on the computing device . In some cases the updating may include writing the update information to a portion of the storage allocated to the file system. In cases where the application is executing but paused the updating at may include writing the state update information to the active memory that holds data stored in objects variables or other runtime memory structures of the application .

At following the completion of the updating an indication may be provided indicating that the updating is complete. Providing the indication may include emitting an event from the second interpreter engine module or another module. The indication may indicate to the first interpreter engine module that the updating is complete and that the first interpreter engine module may execute. Thus the indication provided at may discontinue the blocking initiated at .

At an indication may be received that an inactive application is to be activated on the computing device . Such an indication may be received by the OS module based on a user or another process of the computing device launching the application . In cases where the inactive application is executing but paused or in the background the indication of activation may be based on a user or other process instructing that the application is to be foregrounded or unpaused. The inactive application may have been updated previously as described above with reference to .

At the updates may be accessed from locations where they were stored in active memory or in storage on the computing device during the updating as described above. In cases where updating included using the state update information to modify data stored in variables objects or other runtime data structures in the active memory associated with the application the updates may be accessed from the active memory . In cases where updating included storing the feature update information in storage to indicate that features functions or code of the application is to be updated the updates may be accessed from the storage.

At the application may be activated in its updated state using its updated feature s or both in its updated state and using its updated feature s . Implementations also support other types of updates made to the application .

In some implementations the updating functionality described above may be provided as an Application Programming Interface API to developers of the application s . Such an API may enable the developers to specify what update information may be employed to update the application s and when such updates may be performed based on received message s .

Although the above examples describe selecting one of two interpreter engine modules to perform updates to application s based on the execution status of the application s implementations are not so limited. In some implementations the computing device may include any number of interpreter engine modules of varying functionality and size. In such cases one of a plurality of interpreter engine modules may be selected to perform updates and the selecting may be based on one or more criteria. For example different interpreter engine modules may be employed to update the state or features of the application s and the particular interpreter engine module to employ may be selected based on whether the updating information includes the state update information or the feature update information . In some cases different interpreter engine modules may be configured to update different aspects of the state or feature s of the application s such as UI features data storage access features network features and so forth. In such cases the particular interpreter engine module to employ may be selected based on an analysis of the update information to determine which aspects of the application s are to be updated. In some implementations a developer of the application s a user of the computing device or a provider of the update information may specify which interpreter engine module is to be employed to perform updates. Such a specification may be included in the update information or may be stored on the computing device e.g. as a registry setting .

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in the figures above can be eliminated combined subdivided executed in parallel or taken in an alternate order. Moreover the methods described above may be implemented as one or more software programs for a computer system and are encoded in one or more computer readable storage media as instructions executable on one or more processors.

Separate instances of these programs may be executed on or distributed across separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case and a variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations. Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art and it is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

