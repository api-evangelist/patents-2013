---

title: De-duplication based backup of file systems
abstract: File system backups are performed by copying information describing changes in the file system since a previous point in time. To restore data, a virtual restored file system (VRFS) structure is created corresponding to a snapshot of data copied from the file system that is stored in the backup file system. A client can read the data stored in the backup file system pointed at by the VRFS structure as well as write to the backup file system. Multiple clients can share blocks of data stored on the backup file system via the same VRFS structure or via multiple VRFS structures. If a client writes to a data block pointed at by a VRFS, a copy of the data block is made to which the client makes changes so that the data in the original data blocks is saved for other clients.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09514140&OS=09514140&RS=09514140
owner: Delphix Corporation
number: 09514140
owner_city: Menlo Park
owner_country: US
publication_date: 20130927
---
This application is a continuation of U.S. patent application Ser. No. 13 183 131 filed on Jul. 14 2011 which claims the benefit of U.S. Provisional Patent Application No. 61 364 652 filed Jul. 15 2010 which is incorporated by reference in its entirety.

This invention relates generally to backup and restore of file systems and in particular to storage efficient backup.

File systems provide permanent storage for data that is critical to an organization. Therefore file systems form an important part of an organization s information technology. File systems are used for persistent storage of data by applications used in an organization for example email servers document management systems source code management systems and the like. Organizations make copies of the data stored in the file systems to avoid loss of data in case the original data in the file system is destroyed or corrupted. The process of making copies of the data is called a backup. Conventional systems that perform backups of data store the data in storage devices with large storage capacity for example magnetic tapes. These devices typically have slow access time. Conventional systems restore data from the backup storage in case of loss of data stored in the original file system. The process of restoring data of a large file system can take significant amount of time resulting in loss of business during the time the data is unavailable.

Embodiments perform backups of a file system by copying changed blocks of data from the file system to a storage system. In case of loss of data or if the source file system is unavailable a virtual restored file system VRFS structure is created using blocks of data stored in the storage system. The VRFS structure points at data blocks copied at various points in time. Since only changed blocks of data are stored in the storage system the amount of data copied during backup is small. Also restoration of data is efficient because creation of the VRFS structure takes significantly less time than conventional restoring of file systems from a backup storage device. Furthermore a client can directly read or write in the storage system while the source file system is down instead of waiting for data to be restored on another file system.

In an embodiment the backup system receives data blocks for a plurality of point in time copies of a source file system. The backup system stores the data blocks in a storage system. A data block can be associated with multiple point in time copies for example if a data block did not change since a previous point in time copy was obtained the data block may be associated with the previous point in time copy as well as with a subsequent point in time copy. The backup system receives a request to restore information from the source file system for a target system. The backup system generates a virtual restored file system by linking a set of files to stored data blocks of the storage system and mounting the set of files on the target system.

In an embodiment the backup file system performs backups of multiple source file systems. In an embodiment a client can update the data stored on the backup file system pointed at by the VRFS structure. Multiple clients can share blocks of data stored on the backup file system via the same VRFS structure or via multiple VRFS structures. If a client writes to a data block pointed at by a VRFS the changed data block is copied. This allows the original data blocks to be used by other clients.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Alternatively the de duplication based backup system sends a request to execute application programming interface API calls using libraries on the production server to retrieve the changed blocks. In this configuration there is no need to have a backup agent on the production server since the process is initiated and controlled by the de duplication based backup system . A de duplication based backup system that does not require a backup agent on the production server is called an agent less backup system. The de duplication based backup system stores the changed blocks of data in a backup file system . Typically the amount of data corresponding to the changed blocks of the file system is significantly less than the entire data of the file system . As a result the amount of data stored in the backup file system can be significantly less than the amount corresponding to a full backup of the file system as shown in . That amount can be further reduced via compression or other data reduction techniques such as using hashes as pointers to already stored identical blocks. Accordingly the backup file system can utilize a storage device that is significantly faster than a typical backup storage device . In an embodiment the backup file system can be stored on a storage device that is at least as fast as the storage device used by the file system . For example the backup file system can be stored on a hard drive or a solid state drive SSD . Storing the backup data on a fast storage device enables the possibility of allowing applications running on clients to directly access the data stored in the de duplication based backup system in case the original file system isn t available without significantly degrading the performance of those applications.

The set of data blocks representing the file system at a particular point in time may comprise data blocks copied by the de duplication based backup system from the file system at different points in time depending on when the data block was changed. The set of data blocks corresponding to the data of the file system can be made available to the client via a file sharing system that allows the client to access the backup file system . The operation of making the set of data blocks available is called provisioning of a virtual restored file system VRFS corresponding to the data of the failed file system . For example the file sharing system may provide access to the backup file system via network file system NFS mount operation. A portion of the backup file system may be NFS mounted to the client thereby allowing client to access files stored on the mounted portion of the backup file system . The client can read as well as write to the mounted portion of the backup file system . All or part of the file system at a specific point in time may be mounted.

The process illustrated by eliminates the expensive data restore operation illustrated in that requires copy of a large amount of data from a backup storage device. The backup file system is used to store the backup copies and also can be accessed directly by the client for read write purposes. A virtual restored file system VRFS structure is created that allows the client to access a snapshot of the data stored on the backup file system that is copied from the file system . The time required to provision a VRFS corresponding to the failed file system is significantly less than the time required for a restore operation . In an embodiment all of the steps to mount the file system or volume can be fully automated by having a toolkit on the target server the toolkit comprising software modules which has the privileges to mount the file system or volume. In an embodiment when the production server or file system that previously failed starts working again the changes made to the backup file system by the client are transferred to the production server and applied to the file system . In an embodiment applying the changes comprises copying the data blocks that were changed in the de duplication based backup system over to the file system and replacing the corresponding data blocks of the file system with the received data blocks. Subsequently the client can revert back to using the file system of the production server .

If the file system fails after time T a snapshot of data from the file system corresponding to the point in time T can be made available to a client. The data structure used for provisioning a VRFS corresponding to point T is shown as a set of pointers to the data blocks. Each pointer P points at the latest copy of data block i modified before time T. For example pointer P points at data block F copied at time T pointer P points as block F copied at time T and pointer P P point at blocks F F copied at time T. If the client writes to a data block pointed at by the VRFS a copy of the corresponding data block is made. The client subsequently reads writes to the copy of the data block. This allows the original copy of the block stored in the backup file system to be saved for use by other clients for example to provision other VRFS structures.

The changes made to the backup file system using a VRFS can be merged back to the source file system . However if there are multiple copies of a data block that have been updated by clients the updates to the data block may conflict with each other. Merging these copies of the data block to the original file system may require further analysis of the copies of the data block to determine if the same portion of the data block is updated differently in the two copies. Conflicts may have to be resolved to determine which update from a set of conflicting updates is applied to the data while merging changes from the backup file system to the original file system .

In some embodiments a filter driver can monitor changes to data blocks and store the history of the changes using a suitable format. In some embodiments variable sized data segments are copied from the file system to the backup file system . A variable sized data segments can be smaller than a complete data block if the amount of data that changed since the last copy operation is small. As a result a copy of variable sized segments can take less time and can be performed more frequently. For example an operation that copies all the changed blocks since a previous changed block copy operation can be performed once a day but the backup of the history of changes can be performed every few minutes. A restore of a file system for a given time Tm can be performed by taking data blocks corresponding to the most recent block copy taken at time Tn before the time Tm. The changes corresponding to history of changes copied after Tn and before Tm can be applied to the data copied by the changed block copy operation to obtain a snapshot of data close to a time point before time Tm. In some embodiments combinations of variable sized data segments and fixed sized blocks are retrieved from the file system and stored on the backup file system in either compressed form or without compression. In some embodiments changed blocks representing several different points in time are stored local to the original file system for instance if the original file system is not connected to the network and then sent in a batch job while maintaining the information that allows recreation of the data corresponding to multiple points in time.

A production server is a computer system that performs operations on data stored in a file system . For example the production server may comprise an email server or a database server an enterprise resource planning ERP application a mobile device or any other application that stores data. In one embodiment a production server refers to any computer system that stores data on a file system . The production server comprises a file system a backup agent and a file system library . In alternative configurations different and or additional modules can be included in a production server .

In some embodiments the file system may be a local storage of the production server or a network attached storage. The file system library provides APIs useful for extracting information from the file system . The backup system calls the APIs of the file system library to copy data from file system to the backup system . In one embodiment the backup system calls the file system library APIs to determine the number of blocks of the file system that changed since a given point in time to determine whether to obtain the changed blocks. In another embodiment the backup system periodically copies at a fixed interval blocks of file system that changed since the last time a similar operation was performed. In one embodiment the file system library mounts the file system of the production server on the de duplication based backup system using a file sharing system similar to the file sharing system . Mounting file system on the backup system allows transfer of data stored on the file system to the backup system using file system APIs.

In some embodiments the de duplication based backup system comprises one or more de duplication based backup systems that share a mapping of all the blocks to prevent duplicates from being stored across all the de duplication based backup systems . For example use of multiple de duplication based backup systems provides fault tolerance or high availability of the systems in case of failures. In some embodiments the de duplication based backup systems add structured redundancy via mirroring RAID or other mechanism to protect the data stored in the de duplication based backup systems .

In some embodiments the production server includes a backup agent that coordinates transfer of data blocks from the file system to the de duplication based backup system . For example the backup agent can periodically monitor data blocks of the file system for changes to the data blocks to identify data blocks to be copied to the backup system . In one embodiment the backup agent writes changed blocks of file system to the backup system at a fixed time interval. In another embodiment the backup agent writes changed blocks of file system to the backup system if the number of changed blocks exceeds a threshold number or the size of the changed data exceeds a threshold value. In another embodiment all change blocks are sent as they are stored and then stored in the de duplication backup system as a log of change blocks that can be applied to create different points in time.

Some embodiments may not include all the modules shown in for example the backup agent . The copy of data from the file system that does not include the backup agent is initiated by the block copy manager . These embodiments are called agent less de duplication based backup systems. These embodiments are beneficial since they require less maintenance for production server by eliminating the installation and maintenance of the backup agent . In some embodiments the agent less system requires less load on the production server by eliminating the backup agent that can consume system resources. On the other hand a system that uses a backup agent may require fewer communications between the de duplication based backup system and the production system since the block copy manager is not required to request backup data from the production server each time. In a system where read write operations on the file system are less frequent the backup agent can significantly reduce the number of messages exchanged between the production server and the de duplication based backup system .

In one embodiment the file system library includes a filter driver that monitors all update operations of the file system . The filter driver monitors all the read write operations performed on the file system . The filter driver includes the logic to track the updates made to the file systems and determine when to copy the updates to the backup system . The filter driver can copy the changed blocks of the file system to the backup system either on a periodic basis or when the amount of changed data or number of changed blocks exceeds a threshold.

The data stored in the backup file system can be exposed to a client for example by using a file sharing system . For example the data stored in the backup file system can be mounted on a computer system running the client . The client can be an application or a program running on a computer system. The de duplication based backup system retrieves information available in the file system of the production server and stores it in the backup file system . The information retrieved from the file system comprises data that changed since a previous retrieval for a subset of the file system or for the entire disk storing the file system . In some embodiments the file system can be mounted as an iSCSI volume that represents a network disk instead of a network file system . If the information corresponding to the entire disk is retrieved from the file system the retrieved information can be used to boot or start up a new computer system. In one embodiment the information retrieved from the file system can be a portion of the file system that is associated with an application for example an email server. In some embodiments APIs provided by an application can be used to monitor and process changes to the file system made by the application for example history of changes made by the application can be obtained and stored. Systems and methods for retrieving data associated with database systems to a database storage systems are described in the U.S. application Ser. No. 12 603 541 filed on Oct. 21 2009 which is incorporated by reference in its entirety.

In some embodiments the information backed up from the file system can include a set of one or more files. The de duplication based backup system retrieves changed blocks of data from the set of files and copies them onto the backup file system . In some embodiments the production server can have applications that have file handles open for files stored in the file system when the block copy manager or the backup agent needs to copy data from the file system . An open file handle for a file indicates that the application can be in the process of changing the data in the file. Depending on the state of the application the data of the file may not be in a consistent state. In these embodiments a previous state of the data blocks of the file system that represents a consistent state of the file system is used to perform the backup.

The de duplication based backup system includes an auto discovery manager a VRFS manager a block copy manager a file sharing manager a storage allocation manager and a backup file system . In alternative configurations different and or additional modules can be included in the de duplication based backup system . The block copy manager interacts with the production server by sending a request to the file system library to retrieve information representing a point in time copy of the file system or a portion of the file system . The block copy manager stores the retrieved information in the backup file system . The VRFS manager builds the data structures to create a virtual restored file system based on blocks of data stored in the backup file system . The storage allocation manager allocates storage for the information received to store the information in the backup file system . The storage allocation manager keeps track of the various versions of each block of data that may be obtained from the production server . The storage allocation manager also copies blocks of data if necessary for example when a client writes to a data block. If a block of data is copied for read only purposes the storage allocation manager allocates only sufficient storage to keep a pointer of reference to the exiting block of data. However if an attempt to write to the copied block of data is made the storage allocation manager allocates sufficient storage to make a copy of the block of data to avoid updating the original block of data. In some embodiments the data blocks retrieved by the de duplication based backup system may be compressed or encrypted before they are stored in the backup file system . The compress operation transforms the data by preserving the original information but converting the format of the data so that it occupies less space when stored. The encrypt operation transforms the data to a format that cannot be read by applications that do not have the logic to decode the encrypted information.

The file sharing manager allows files stored in the de duplication based backup system to be shared across computers that may be connected with the de duplication based backup system over the network. The file sharing manager uses the file sharing system for sharing files with clients . An example of a system for sharing files is a network file system NFS . A system for sharing files may utilize fiber channel Storage area networks FC SAN or network attached storage NAS or combinations and variations thereof. The system for sharing files may be based on small computer system interface SCSI protocol internet small computer system interface iSCSI protocol fiber channel protocols or other similar and related protocols. In some embodiments the de duplication based backup system may utilize a logical volume manager. In an embodiment files are organized in a format emulating a given file system disk layout such as the file system of WINDOWS operating system called NTFS or the UNIX file system UFS .

The auto discovery manager allows the de duplication based backup system to find file systems that need backups for a giver computer system or a set of computer systems. For example the de duplication based backup system may be provided with information identifying a computer system for example the network address or a machine. The de duplication based backup system can automatically discover various file systems used by the computer system that may need backup. In some embodiments the de duplication based backup system is provided information identifying applications that need backup on the computer system. The de duplication based backup system can identify all the relevant the files that are used by the identified applications that need backup. For example the de duplication based backup system may be requested to perform backups of an email server on a given machine. The auto discovery manager can identify the files used by the email server to store email related data as well as email server configuration information that needs to be backed up. In an embodiment the auto discovery manager can take information identifying a set of computer systems and discover the file systems associated with all the computer systems that need backup. In some embodiments the auto discovery manager is provided access to a network to perform discovery of various machines on the network including desktop computers laptop computers servers etc. and the file systems on the discovered computers for which backup needs to be performed. In an embodiment the information discovered by the auto discovery manager is reviewed by a system administrator to determine the set of file systems that need to be backed up to the backup file system .

The administration system comprises a user interface that allows a system administrator to perform administrative operations for example specifying production systems that need to be backed up or client systems that need access to the backup file system in case of data loss. In some embodiments the user interface allows a system administrator to configure parameters for the auto discovery manager to perform discovery of file systems for backup. The user interface also allows a system administrator to specify the frequency at which data is copied from the production server for performing backup.

In some embodiments the backup agent of the production server determines whether to initiate the changed block copy operation. For example the backup agent can monitor the changes made to a portion of the file system for example a set of files. If the amount of changes as measured by the number of blocks changed or an amount of information indicating history of changes exceeds a threshold value the backup agent may determine that a changed block copy operation needs to be initiated. In another embodiment even though the amount of changes may not exceed a threshold value the backup agent may initiate a changed block copy operation if the time since a previous changed block copy operation exceeds a threshold value. The backup agent can send the information comprising changed blocks of data or history of changes to the block copy manager . The block copy manager sends a request to the storage allocation manager to save the information. The storage allocation manager saves the information in the backup file system .

In some embodiments the de duplication based backup system can be used as a production system in case the original production server fails. The de duplication based backup system provides a consolidated storage system for several applications or file systems from several computer systems. All applications that can be executed on the original file systems can be executed using the backup file system . If backup file system is used as a consolidated file system use of a high performance storage device for example solid state drive SSD to store the backup file system improves the performance of all the clients using the data stored in the backup file system . This allows the enterprise to improve performance of several clients by investing in a single consolidated system instead of a large number of individual systems. For example replacing the hard drives on several machines by SSD can be lot more expensive than replacing the drive of a single consolidated system. In some embodiments the backup file system can be used as a high availability system that can be used by clients for example when the production server is not available even if there is no loss of data stored in file system .

In some embodiments added storage caching layers can improve the performance of the backup file system especially if multiple blocks are shared across different systems accessing different points in time or different file systems.

The entire backup file system can be copied to a conventional backup storage for performing a backup of the backup file system for example as shown in . As a result a conventional backup storage operation can also be performed for a set of file systems . The backup of the backup file system using conventional backup techniques can be much simpler process than performing individual backups of all the file systems of the various production servers of an enterprise. This simplicity is obtained due to the fact that a single system is being backed up and also because the amount of data being backed up is smaller since it represents only the changed blocks of data from the original file systems which can be further reduced in size by using data compression. In some embodiments the backup file system can be replicated in whole or in part to another storage device.

In some embodiments instead of creating a VRFS structure for a client to use the data represented by the VRFS can be exported to a different file system and the client allowed to access the exported data stored in the other file system. Exporting the VRFS data can be beneficial for example if the applications using the data require large amount resources that are not available in the de duplication based backup system .

The machine may be a server computer a client computer a personal computer PC a tablet PC a set top box STB a personal digital assistant PDA a cellular telephone a smartphone a web appliance a network router switch or bridge or any machine capable of executing instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute instructions to perform any one or more of the methodologies discussed herein.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU a digital signal processor DSP one or more application specific integrated circuits ASICs one or more radio frequency integrated circuits RFICs or any combination of these a main memory and a static memory which are configured to communicate with each other via a bus . The computer system may further include graphics display unit e.g. a plasma display panel PDP a liquid crystal display LCD a projector or a cathode ray tube CRT . The computer system may also include alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse a trackball a joystick a motion sensor or other pointing instrument a storage unit a signal generation device e.g. a speaker and a network interface device which also are configured to communicate via the bus .

The storage unit includes a machine readable medium on which is stored instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions e.g. software may also reside completely or at least partially within the main memory or within the processor e.g. within a processor s cache memory during execution thereof by the computer system the main memory and the processor also constituting machine readable media. The instructions e.g. software may be transmitted or received over a network via the network interface device .

While machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions e.g. instructions . The term machine readable medium shall also be taken to include any medium that is capable of storing instructions e.g. instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies disclosed herein. The term machine readable medium includes but not be limited to data repositories in the form of solid state memories optical media and magnetic media.

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising a computer readable medium containing computer program code which can be executed by a computer processor for performing any or all of the steps operations or processes described.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a tangible computer readable storage medium or any type of media suitable for storing electronic instructions and coupled to a computer system bus. Furthermore any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

Embodiments of the invention may also relate to a computer data signal embodied in a carrier wave where the computer data signal includes any embodiment of a computer program product or other data combination described herein. The computer data signal is a product that is presented in a tangible medium or carrier wave and modulated or otherwise encoded in the carrier wave which is tangible and transmitted according to any suitable transmission method.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon.

