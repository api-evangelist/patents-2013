---

title: Hierarchical, self-describing function objects
abstract: A self-describing function object may be dynamically created based on a set of user provided parameters. In an implementation, a device may receive a request to create the function object based on one or more parameters and determine a number of ordered and hierarchical operations that correspond to the function object. The device may determine textual descriptions corresponding to what is performed by at least one of the ordered and hierarchical operations. The device may output documentation of the ordered and hierarchical operations included in the function object, the documentation including the textual descriptions arranged based on the determined order of the plurality of ordered and hierarchical operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348584&OS=09348584&RS=09348584
owner: The MathWorks, Inc.
number: 09348584
owner_city: Natick
owner_country: US
publication_date: 20131127
---
This application is a continuation of U.S. application Ser. No. 13 072 165 filed Mar. 25 2011 the disclosure of which is incorporated herein by reference.

The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations described herein and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

When using a computing environment such as a technical computing environment a user may create function objects to perform specified tasks. A function object may be dynamically generated by the technical computing environment based on input parameters supplied by the user. For example the technical computing environment may provide a tool to generate a function object that performs color management functions such as converting between different color profile spaces. The function object may be dynamically generated by the technical computing environment based on one or more parameters such as an International Color Consortium ICC profile. After the function object is generated the function object may be called e.g. by code written by the user a command specified by the user to perform its intended function such as converting colors between color spaces.

From the user s perspective a dynamically generated function object may be a black box in which it can be difficult to learn or to modify the particular operations performed by the generated function object. This can be problematic for advanced users that wish to verify or modify the operation of the function object.

Implementations described herein may relate to the generation of self describing function objects that include an ordered sequence of operations. The sequence of operations may be hierarchical such that for example each of the operations may refer to a sequence of operations. The operations may be associated with a description of the operation. Based on the individual descriptions the function object may generate a full description of the operation of the function object.

A function object as used herein may refer to a software construct such as an object structure method or function that is generated by another software object based on one or more input parameters. The input parameters may include real values images files references to files etc. The function object may include the ability to perform a function or algorithm and may be able to return descriptive text describing the function algorithm.

A Technical Computing Environment TCE may include any hardware and or software based logic that provides a computing environment that allows tasks to be performed e.g. by users related to disciplines such as but not limited to mathematics science engineering medicine and business. The TCE may include text based facilities e.g. MATLAB software a graphically based environment e.g. Simulink software Stateflow software SimEvents software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments etc. or another type of environment such as a hybrid environment that may include for example one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

The TCE may be integrated with or operate in conjunction with a graphical modeling environment which may provide graphical tools for constructing models or systems or processes. The TCE may include additional tools such as tools designed to convert a model into an alternate representation such as source computer code compiled computer code or a hardware description e.g. a description of a circuit layout . In an implementation the TCE may provide this ability using graphical toolboxes e.g. toolboxes for signal processing image processing color manipulation data plotting parallel processing etc. . In another implementation the TCE may provide these functions as block sets. In still another implementation the TCE may provide these functions in another way.

Models generated with the TCE may be for example models of a physical system a computing system an engineered system an embedded system a biological system a chemical system etc.

As previously mentioned an example embodiment of the TCE may use one or more text based products such as textual modeling environments. For example a text based modeling environment may be implemented using products such as but not limited to MATLAB by The MathWorks Inc. Octave Python Comsol Script and MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence or Modelica or Dymola from Dynasim. In some embodiments the text based modeling environment may include hardware and or software based logic that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc.

In an implementation the text based modeling environment may include a dynamically typed language that may be used to express problems and or solutions in mathematical notations familiar to those of skill in the relevant arts. For example the modeling environment may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array programming in that operations can apply to an entire set of values such as values in an array. Array programming may allow array based operations to be treated as a high level programming technique or model that lets a programmer think and operate on whole aggregations of data without having to resort to explicit loops of individual non array i.e. scalar operations.

The modeling environment may further be adapted to perform matrix and or vector formulations that may be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics finance image processing signal processing control design life sciences education discrete event analysis and or design state based analysis and or design etc.

In another example embodiment the TCE may be implemented in a graphically based modeling environment using products such as but not limited to Simulink Stateflow SimEvents etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley or aspects of a Unified Modeling Language UML or SysML environment.

Computing device may operate as a single detached computing device. Alternatively computing device may be connected to a network such as a local area network LAN or a wide area network WAN such as the Internet. After computing device is connected to network TCE may be run by multiple networked computing devices or by one or more remote computing devices. In such an implementation TCE may be executed in a distributed manner such as by executing on multiple computing devices simultaneously. Additionally in some implementations TCE may be executed over network in a client server relationship. For example computing device may act as a client that communicates with using a web browser a server that stores and potentially executes the graphical modeling environment program.

For example as shown in system may include a remote TCE e.g. a remotely located computing device running a TCE and or a TCE service . TCE service may include a server computing device that provides a TCE as a remote service. For instance a TCE may be provided as a web service. The web service may provide access to one or more programs provided by TCE service .

Processing unit may include a processor multiple processors microprocessors or other types of processing logic that may interpret and or execute instructions. Main memory may be a tangible non transitory computer readable medium such as a random access memory RAM or another type of dynamic storage device that may store information and instructions for execution by processing unit e.g. instructions implementing TCE . ROM may include a read only memory ROM device or another type of static storage device that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive. In some implementations main memory or storage device may also be implemented as solid state memory such as flash based memory.

Input device may include a mechanism that permits an operator to input information to computing device such as a keyboard a mouse a pen a single or multi point touch interface an accelerometer a gyroscope a microphone voice recognition and or biometric mechanisms etc. Output device may include a mechanism that outputs information to the operator from computing device including a display a printer a speaker etc. In the case of a display the display may be a touch screen display that acts as both an input and an output device. Moreover input device and or output device may be haptic type devices e.g. joysticks tactile sensors or other devices based on touch.

Communication interface may include a transceiver like mechanism that enables computing device to communicate with other devices and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As will be described in detail below computing device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . The computer readable medium may be defined as a non transitory memory device where the memory device may include a number of physically possible physically distributed memory devices. For instance computing device may implement TCE by executing software instructions from main memory . As will be described in more detail below TCE may implement one or more embodiments of the invention.

The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes that will be described later. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of computing device in other implementations computing device may contain fewer components different components differently arranged components or additional components than depicted in . Alternatively or additionally one or more components of computing device may perform one or more tasks described as being performed by one or more other components of computing device .

Function object creation component may include logic for creating function object based on one or more input parameters. Function object creation component may include logic to 1 analyze the input parameters and 2 based on the parameters identify a number of ordered and potentially hierarchical operations that correspond to the input parameters. The identification of the operations that correspond to the input parameters may be based on for example rules that are coded by a distributor e.g. creator of function object creation component e.g. the creator of TCE or another entity .

In addition to identifying the ordered operations that correspond to the input parameters function object creation component may also identify descriptive text corresponding to one or more of the operations. The descriptive text for an operation may include for example a description of the function of the operation inputs associated with or required by the operation outputs generated by the operation or other descriptive information. The identification of the descriptive text that corresponds to the operations may be based on for example rules that are coded by the distributor of function object creation component e.g. the creator of TCE or another entity .

In an implementation function object creation component may include an object that relates to color computations. For example function object creation component may create a color transformation object that defines a color space conversion between members of a family of device independent color spaces defined by the International Color Consortium ICC . Here the parameters that may be input to function object creation component may include color lookup tables CLUTs from an ICC profile. Alternatively or additionally function object creation component may relate to other technical areas.

Function object creation component may be called by a user through a command line user interface of TCE . Alternatively function object creation component may be called by the user in another manner such as through a graphic programming environment or an application programming interface CPI . Calling function object creation component may result in function object creation component dynamically generating function object .

Function object may include a software structure such as a C programming language structure or a C class or class instance that encapsulates the hierarchical sequence of operations that perform the core function of function object i.e. the function for which the user created function object . Function object may include a number of properties and or methods. As shown function object may include a sequence of operations a describe method and a call method . Sequence of operations may include a sequence e.g. a list array or other ordered data structure of objects through referred to collectively as objects or individually as object . Each of objects may itself be a function object. An object may include instructions that may be executed to perform the operation corresponding to object . Objects may receive input values generate output values and pass the output values to the next object in sequence of operations . Objects may be hierarchically defined. For example object may be a function object that includes the object sequence and where objects and are also function objects. The operation of object may thus include the operation corresponding to object followed by the operation corresponding to object .

Describe method of function object may include logic that when called may generate descriptive text corresponding to function object . Describe method may generally concatenate descriptive text corresponding to some or all of objects into a single text document e.g. embodied by descriptive text . In an implementation descriptive text may include visual formatting corresponding to a hierarchical arrangement of objects . For example descriptive text may be a hyper text markup language HTML document in which the descriptive text corresponding to each object is represented in a paragraph and in which lower objects in the hierarchy e.g. objects and are indented in an outline format. Other visual formats or techniques for implementing descriptive text may alternatively be performed.

Call method of function object may include logic that when called may initiate execution of one or more operations defined in sequence of operations . Call method may be called by for example a user during an interactive session with TCE or in another manner such as from a predefined script or other program.

Although illustrates example functional components of TCE in some implementations TCE may include fewer functional components different functional components differently arranged functional components or additional functional components than those depicted in . Additionally or alternatively one or more of the functional components of TCE may perform one or more tasks described as being performed by one or more other functional components of TCE .

Executable code may implement one or more substantive operations performed by object . Executable code may receive zero or more input parameters e.g. from a previous object in sequence of operations perform operations based on the input parameters if any and generate output values for a next object in sequence of operations . Executable code may correspond to a method or function implemented in a programming language such as C MATLAB code C etc. For a color conversion application for example executable code may be a function to linearize input red green blue RGB color values for a particular object .

Function object sequence may include for example a list a sequence an array or another ordered structure that references other objects . The objects referenced by function object sequence may be one level below the containing object in the hierarchical sequence of objects. In an implementation the objects referenced in object sequence may themselves include references to additional objects . In an implementation a particular object may include either executable code or function object sequence . If the particular object includes only executable code the object may be a leaf node in the hierarchy of objects and executable code may be run to implement the operation corresponding to the object. Otherwise if the particular object includes function object sequence the corresponding lower level objects in the hierarchy may be traversed to determine whether the objects include executable code . In this implementation the sequence of executable code corresponding to function object sequence may be obtained by a depth first traversal of the hierarchical sequence of objects.

Descriptive text may include text that describes object . The descriptive text may include for example the name of a function or method e.g. the substantive operation implemented by executable code the parameters used by the function or method a description of the operation of the function or method or other descriptive information. Some objects may not be associated with descriptive text in which case descriptive text may be empty or may not be associated with object . In some implementations descriptive text may also be associated with formatting information such as bold text italic text etc. The formatting information may be associated with descriptive text using for example a markup language such as HTML.

Although illustrates example functional components of one of objects in some implementations one of objects may include fewer functional components different functional components differently arranged functional components or additional functional components than those depicted in . Additionally or alternatively one or more of the functional components of one of objects may perform one or more tasks described as being performed by one or more other functional components of one of objects .

Executable sequence object determination component may based on the function object parameters identify executable code and or object sequences to include in each of objects . Executable code and or object sequences may be identified for example by a set of rules or other techniques associated with executable sequence object determination component .

Descriptive text determination component may based on the function object parameters determine descriptive text to include in each of objects . Descriptive text may be determined for example by a set of rules or other techniques associated with descriptive text determination component .

Although executable code object sequence and descriptive text are shown in as being separately generated in some implementations the generation of executable code object sequence and descriptive text may be performed as a single operation.

Although illustrates example functional components of function object creation component in some implementations function object creation component may include fewer functional components different functional components differently arranged functional components or additional functional components than those depicted in . Additionally or alternatively one or more of the functional components of function object creation component may perform one or more tasks described as being performed by one or more other functional components of function object creation component .

In pseudo code the variable sequence may be used to hold sequence object . The first object included in sequence is implemented in code section which may add an object to sequence of operations that applies a matrix and includes the descriptive text Apply Matrix but only if the input space is equal to XYZ. Code sections and may add additional objects to sequence object . As shown the additional objects may be added by calling functions that return objects potentially including descriptive text . Code section may add an object which includes sub objects to sequence of operations that applies scaling functions but only if the output color space is Lab. The final function object may be returned by code section and may include the high level description Apply lut8 tag. 

Process may include receiving a request to create a function object block . The request may include one or more parameters block . As previously mentioned the parameters may include for example real values images files references to files etc. The parameters may specify the operations i.e. the functionality implemented by the generated function object . In an implementation in the context of a user using a command line interface to interact with TCE the request to create the function object may include a command such as f ColorTransformFunction input profile output profile where in this example the generated function object may be named f and the function object may be created by a call to ColorTransformFunction using the parameters input profile and output profile. Process may further include generating the function object block . Generation of function object may be performed by function object creation component as was previously discussed.

The generated function object may be used in a number of ways. For example suppose that process is implemented by TCE and that function object includes describe method and call method . Note that in operations associated with describe method are illustrated in blocks and and operations associated with call method are illustrated in blocks and . Now suppose that a user wishes to generate view a description of the operations performed by function object . The user may specify a command e.g. f.describe describe f to call describe method via for example a command line user interface that is provided by TCE . In response to the command TCE may call the describe method and generate the descriptive text e.g. descriptive text corresponding to function object block . Descriptive text may be generated by extracting descriptive text from each of objects in sequence of operations . As previously mentioned descriptive text may be formatted to preserve the hierarchical and sequential format of the objects in sequence of operations . In an implementation the text corresponding to objects may be labeled such as through outline formatted labeling e.g. the descriptive text may be labeled as items 1 1a 1aa 1b 2 etc. to allow the corresponding objects to be easily referenced. In an implementation descriptive text may include embedded formatting e.g. HTML formatting using paragraphs to indicate hierarchical positions .

TCE may further display output the generated descriptive text block . Descriptive text may be for example output to a file be displayed in a text window be displayed in a browser window etc.

In some implementations the operations of block may be performed when the function object is created. Here a request to describe function object may result in descriptive text being displayed read from function object e.g. via block .

Table I below illustrates an example of a visual presentation of descriptive text . Descriptive text may be shown for example in a graphical interface of computing device . As shown in Table I a number of ordered and hierarchical operations are described. In Table I the illustrated operations may be operations used in the conversion of an ICC International Color Consortium version 2 RGB display profile to an ICC version 4 CMYK cyan magenta yellow and key black color model output profile. The first operation shown in Table 1 for instance operation 1 includes the description Convert from device space to source profile connection space XYZ. As shown operation 1 includes descriptive text only and is not associated with an executable operation. Operation 1 however is shown as having two sub operations labeled 1a and 1b. Operation 1a for example includes the descriptive text Linearize RGB values using the red green and blue tone response curves. Operation 1a is also shown as including a particular function call that is used to perform this operation i.e. out applyCurves in trc curves . As shown in Table I indentation and outline labeling are used to indicate the sequence and hierarchy of the operations that are performed to implement the function object. Additionally different fonts are used to distinguish between descriptive text and function calls.

Referring back to suppose that the user wishes to execute the operations of function object . The user may issue a command to execute call method e.g. f.call call f . In response TCE may execute executable code in sequence of operations block . As previously mentioned executable code of objects may be executed in their sequence and hierarchical order where results of the execution of executable code of one object may be input to executable code of a next object . The final result or set of results may be output to the user or saved e.g. output to a display of computing device saved to a disk of computing device .

Function object as described above may include a number of methods and or properties such as describe method and call method . Note that function object may include additional methods properties. For example function object may allow modification of sequence of operations based on descriptive text . In an implementation labels may be used in descriptive text to insert delete or replace objects . For instance for a function object f a command f.replace 1a may replace the object labeled la e.g. in Table I the linearize RGB values object with an object that includes user specified executable code and descriptive text. Similarly a command f.insert may be used to insert a new object or sub object in function object and a command f.delete may be used to delete an object. In this manner descriptive text may be used to not only understand the operation of a dynamically created function object but also to modify the operation of the function object.

Function objects were described above that may be applicable to a variety of technical disciplines such as color space manipulation. Additional details relating to color science functionality will now be given.

Transforming color values from one color space to another may be done using a combination of mathematical operations. These operations involve taking one vector and producing another. Commonly used operations may include 1 scale and offset 2 power curve also called a gamma curve 3 other parameterized curves 4 1 D lookup table curve 5 multidimensional lookup table 6 matrix multiplies and 7 saturation to range. Each of these operations may be represented by one or more objects in a sequence of objects .

In a typical color conversion problem the color reproduction characteristics of a first device A and the color reproduction characteristics of a second device B may be known. Function objection creation component may create a function object to transform from device A colors to device B colors. The sequence of objects for function object may represent a processing pipeline of functions such as functions defining operations 1 to 7 above . The complete processing pipeline may be given as . . . . . . where Cis the input color Cis the output color and f. . . fare the functions of the processing pipeline. A typical processing pipeline may include a number of functions such as 5 30.

The functions in the pipeline may be presented and computed hierarchically. For example the overall pipeline might be defined by these two functions f converts device A colors an intermediate form called the Profile Connection Space or PCS and f converts PCS colors to device B colors. The functions f and f in turn may be composed in hierarchical fashion of other functions. The leaf functions in the hierarchy may be basic mathematical operators such as 1 to 7 .

The functions in the pipeline may be constrained to follow certain rules that may enable them to be composed together. For example the rules may indicate that each must have one input a vector and produce one output a vector and the number of elements in the output of one function must match the required number of elements in the input of the next function in the pipeline.

As described previously with function object the processing pipeline sequence of objects may be automatically generated by function object creation component . Additionally the processing pipeline instead of being represented in a form that is opaque e.g. to a user can be described and modified based on the descriptive text for the processing pipeline.

A self describing function object was described above. The self describing function object may be dynamically created based on a set of user provided parameters.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention.

For example while a series of acts has been described with regard to the order of the acts may be modified in other implementations. Further non dependent acts may be performed in parallel.

Also the term user has been used herein. The term user is intended to be broadly interpreted to include for example a computing device or a user of a computing device.

It will be apparent that embodiments as described herein may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement embodiments described herein is not limiting of the invention. Thus the operation and behavior of the embodiments were described without reference to the specific software code it being understood that one would be able to design software and control hardware to implement the embodiments based on the description herein.

Further certain portions of the invention may be implemented as logic that performs one or more functions. This logic may include hardware such as an application specific integrated circuit or a field programmable gate array software or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the invention. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the invention includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

