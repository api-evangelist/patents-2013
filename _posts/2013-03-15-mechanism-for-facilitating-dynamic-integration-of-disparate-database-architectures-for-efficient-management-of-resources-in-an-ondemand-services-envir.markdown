---

title: Mechanism for facilitating dynamic integration of disparate database architectures for efficient management of resources in an on-demand services environment
abstract: In accordance with embodiments, there are provided mechanisms and methods for facilitating dynamic integration of disparate database architectures for efficient management of resources in an on-demand services environment in a multi-tenant environment according to one embodiment. In one embodiment and by way of example, a method includes receiving, at a first database platform, a job request in a first programming package, transforming the job request from the first programming package to a second programming package, transmitting the job request in the second programming package to a second database platform for processing. The job request may be processed at the second database platform that is independent of the first database platform. The method may further include receiving an output relating to the processing of the job request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195726&OS=09195726&RS=09195726
owner: SALESFORCE.COM, INC.
number: 09195726
owner_city: San Francisco
owner_country: US
publication_date: 20130315
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 625 187 entitled System and Method for Integrating Disparate Database Architectures in an On Demand Environment by Narayan Bharadwaj et al. filed Apr. 17 2012 the entire contents of which are incorporated herein by reference and priority is claimed thereof.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

One or more implementations relate generally to data management and more specifically to a mechanism for facilitating dynamic integration of disparate database architectures for efficient management of resources in an on demand services environment.

With the rise of cloud based technology provider companies e.g. Salesforce.com can afford to offer an increasing number of services to their customers. However each such service can create a great number of transactions and relevant data when offered and or in use e.g. a user accessing Chatter etc. . To keep up with the changing technologies while improving their services to their customers these provider companies often have to hire an entire team of software database administrators and developers to perform the tedious task of going through any number of daily logs of service related transactions and the relevant data. In addition to being tedious the idea of having humans perform such tasks is naturally inefficient time consuming and error prone.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request. The secure and efficient retrieval of accurate information and subsequent delivery of this information to the user system has been and continues to be a goal of administrators of database systems. Unfortunately conventional database approaches are associated with various limitations.

In accordance with embodiments there are provided mechanisms and methods for facilitating dynamic integration of disparate database architectures for efficient management of resources in an on demand services environment in a multi tenant environment according to one embodiment. In one embodiment and by way of example a method includes receiving at a first database platform a job request in a first programming package transforming the job request from the first programming package to a second programming package transmitting the job request in the second programming package to a second database platform for processing. The job request may be processed at the second database platform that is independent of the first database platform. The method may further include receiving an output relating to the processing of the job request.

While the present invention is described with reference to an embodiment in which techniques for facilitating management of data in an on demand services environment are implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present invention is not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments of the invention do not necessarily address any of these deficiencies. In other words different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Methods and systems are provided for facilitating dynamic integration of disparate database architectures for efficient management of resources in an on demand services environment in an on demand services environment. In one embodiment and by way of example a method includes receiving at a first database platform a job request in a first programming package transforming the job request from the first programming package to a second programming package transmitting the job request in the second programming package to a second database platform for processing. The job request may be processed at the second database platform that is independent of the first database platform. The method may further include receiving an output relating to the processing of the job request.

Embodiments provide for dynamic integration of disparate database architectures for efficient management of resources in an on demand environment. For example and in one embodiment a first on demand database platform e.g. Force.com by Salesforce.com etc. that manages and receives definitions of jobs features etc. may be dynamically integrated with a second database platform a second database platform e.g. Apache Hadoop etc. known for processing large data sets where those definitions may be submitted for processing. In other words the first on demand database may serve as an intermediary layer or tier between for example the user level equipment e.g. client computing device and the second database such the first on demand database may outsource large computing processing tasks to the second database saving both the computing and human resources. Further for example and in one embodiment a job output resulting from data processing may be received from the second database and stored e.g. as a custom object at the first database so that it may be visualized or displayed in an optional visualization layer e.g. as reports dashboards etc. at the client computing device for the user to use the information to prepare any number and type of graphs charts trends etc.

The term user may refer to a system user such as a system administrator a software developer etc. or an end user such as a representative of a customer e.g. an organization a company an institution etc. . Further it is contemplated that any reference to databases platforms e.g. Hadoop HBase Oozie OpenTSDB etc. programming languages e.g. Apache Pig Java The R Project etc. other software servers and platforms e.g. Force.com Tableau Gephi etc. are merely used as examples throughout the document for brevity clarity and ease of understanding and that embodiments are not limited to such references.

As used herein a term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. As used herein the term query plan refers to a set of steps used to access information in a database system.

Embodiments are described with reference to an embodiment in which techniques for facilitating management of data in an on demand services environment are implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants embodiments are not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Computing device may include server computers e.g. cloud server computers etc. desktop computers cluster based computers set top boxes e.g. Internet based cable television set top boxes etc. and the like. Computing device may also include smaller computers such as mobile computing devices such as cellular phones including smartphones e.g. iPhone by Apple BlackBerry by Research in Motion etc. handheld computing devices personal digital assistants PDAs etc. tablet computers e.g. iPad by Apple Galaxy by Samsung etc. laptop computers e.g. notebooks netbooks Ultrabook etc. e readers e.g. Kindle by Amazon.com Nook by Barnes and Nobles etc. Global Positioning System GPS based navigation systems etc.

Computing device includes an operating system OS serving as an interface between any hardware or physical resources of the computing device and a user. Computing device further includes one or more processors memory devices network devices drivers or the like as well as input output I O sources such as touchscreens touch panels touch pads virtual or regular keyboards virtual or regular mice etc. It is to be noted that terms like node computing node client client device server server device cloud computer cloud server cloud server computer machine host machine device computing device computer computing system multi tenant on demand data system and the like may be used interchangeably throughout this document. It is to be further noted that terms like application software application program software program package and software package may be used interchangeably throughout this document. Moreover terms like job input request and message may be used interchangeably throughout this document.

In one embodiment integration mechanism may be employed at a server computing system such as host machine of representing a first database platform architecture or environment e.g. Force.com and employing or be in communication with multi tenant database and further in communication with one or more client computing devices such as client computing device over a network such as network e.g. a cloud based network the Internet etc. . Client computing device may be accessible to users organizations and be the same as or similar to computing device of and include a mobile computing device e.g. smartphones tablet computers laptops etc. or larger computers e.g. desktop computers server computers etc. .

In one embodiment input data reception logic to receive input data from one or more sources such as an input layout provided through a user input page that can be used by a user to input a request regarding product metrics e.g. one or more products offered by a provider such as Salesforce.com such as products features platforms websites programing languages user interfaces etc. such as accounts contacts APIs user interfaces custom objects Sales Cloud Service Cloud Marketing Cloud Work.com Chatter Force.com Visualforce Apex Data.com Database.com Heroku etc. Similarly input data and relevant metadata may be obtained from other sources such as internal application log files that track and keep logs of each transaction external usage files from external sources e.g. users customers such as organizations etc. etc. and for example may be stored as custom objects at database . Input data parser may parse the input data e.g. input data relating to Chatter etc. and provides the parsed data package e.g. feature metrics e.g. custom object to instruction package generation logic for further processing.

In one embodiment instruction package translation logic may include logic that provides modules for translation e.g. generation conversion etc. of packages having parsed input data such as feature metrics from one programming language e.g. a programming language such as Java etc. to another programming language such as a programming language that runs on disparate architecture such as Pig Latin using a high level platform such as Apache Pig that is compatible with or more efficient with regard to data processing server . In conventional systems with increasing number of services a great deal of data relating to transactions is required to maintained and regularly deciphered so that better and increasing number of services may be provided. Such tasks are difficult to accomplish when dealing with disparate platforms or databases such as database and data processing server that are independent of each other and may even be incompatible with each other and thus conventional techniques often require a number of software developers administrators to collect data e.g. transaction entries including user transactions service transactions equipment performance transactions etc. from log files and manually decipher it which is time consuming and leads to mistakes. In one embodiment disparate platforms databases be integrated despite being independent of incompatible to and remotely located from each other. This is described throughout the document and further illustrated with reference to .

For example if data processing server includes Apache Hadoop the instruction package having parsed input data and any relevant data may be generated in Pig or converted from for example Java to Pig Latin or the like. For example with regard to Pig instruction package translation logic may automatically facilitate a Pig script which may then be fed into a Pig execution engine and then into a map reduce etc. before the job package is prepared in Pig to be processed at data processing server . In other words this automatic translation technique allows for the instruction package to be automatically and dynamically converted into the most compatible or efficient programming language without having the need to employ software programmers developers for manual programming.

Once the translation is completed the instruction package is prepared as a job package with is then forwarded on to data processing server using job request submission logic . Upon receiving the job package data processing logic of data processing server triggers processing of the job package at data processing server . This data processing of the job package may generate a variety of results including information about various products of the product matrix provided as trend metrics. For example the data processing may take into consideration tasks like tracking feature usage adoption e.g. accounts contacts Visualforce Apex etc. standard metrics across any and all features e.g. Requests UniqueOrgs UniqueUsers AveResponseTime etc. features and metrics across any and all channels e.g. APIs UIs mobile etc. etc. while considering the primary audience of the results such as executives program managers product managers software developers system administrators end user etc. In other words this processing of data provides information such as how often a feature is accessed by users which problems are associated with what feature etc. that can then be used to improve the provider s products. Similarly embodiments are not limited to any particular format of product metrics in terms of presentation and visualization of the processed data such as visualization logic may convert the trend metrics into various visual formats as requested by the user e.g. product manager etc. . Some of these visual formats may include but are not limited to spreadsheets text formats graphs pie charts line charts bar charts or the like as preferred by the user. Further the results provided by these formats may include one or more of user behavior analysis capacity planning monitoring intelligence performance analysis security ad hoc log searches collaborative filtering search relevancy etc.

In one embodiment results reception and processing logic receives the raw result or output from data processing server and processes the results in the matter so they can be converted or translated back into the base programming language e.g. convert back from Pig into Java or Apex etc. . Once the results have been processed they are then provided to results presentation logic to prepare the results for presentation so that they may be organized properly tagged put in columns and rows etc. for easier manipulation and conversion into graphs charts etc. by visualization API logic . For example the results may be presented as trend metrics e.g. custom objects that are provided as a summary of results such as daily summaries. Visualization logic may convert the trend metrics into various visual formats as requested by the user e.g. product manager etc. so that maximum benefit of the results may be obtained. Some of these visual formats may include but are not limited to spreadsheets text formats graphs pie charts line charts bar charts or the like as preferred by the user. Visualization API logic may transmit via communication compatibility logic the result in one or more presentation formats to client computing device where a user e.g. product manager may view the results via a user interface such as user interface provided by software application e.g. Chatter over network .

In one embodiment and as illustrated integration mechanism facilitates both integration and outsourcing purposes. For example as illustrated here using integration mechanism two separate and different database platforms such as a locally located multitenant database and a remotely located data processing server may be integrated to work together to perform certain tasks jobs etc. However in doing so integration mechanism is outsourcing these tasks or jobs that are typically performed locally such as by database and or manually by one or more database experts such as developers administrators etc. This novel technique for integrating and outsourcing significantly lowers the burden on database while removing the need for any manual review and manipulation of data and with that any human errors labor and the like.

Communication configuration logic may facilitate the ability to dynamically communicate and stay configured with any number and type of data processing servers database platforms and architectures programming languages and their corresponding platforms etc. Communication configuration logic further facilitates the ability to dynamically communicate and stay configured with various computing devices e.g. mobile computing devices such as various types of smartphones tablet computers laptop etc. networks e.g. Internet intranet cloud computing network etc. websites such as social networking websites e.g. Facebook LinkedIn Google etc. etc. while ensuring compatibility with changing technologies parameters protocols standards etc.

It is contemplated that any number and type of components may be added to and or removed from integration mechanism to facilitate various embodiments including adding removing and or enhancing certain features. For brevity clarity and ease of understanding of integration mechanism many of the standard and or known components such as those of a computing device are not shown or discussed here. It is contemplated that embodiments are not limited to any particular technology topology system architecture and or standard and are dynamic enough to adopt and adapt to any future changes.

Method begins at block with receiving input data from one or more sources including user inputted data using a user input page internal logs external logs etc. The user may input data at a client computing device via a user interface. At block the input data is parsed and placed into a job instruction package e.g. feature metrics . At block the package having the parsed data is translated from a local or base programming language to the one that is compatible with and or more efficient in outsourcing the job to a disparate data processing server that may be remotely located. At block the job package is outsourced to the data processing server for processing where it is processed and the corresponding results are generated. At block the results are processed e.g. turning back the results into the base local programming language to be provided as trend metrics. At block the processed results or trend metrics are then presented in any number and type of formats e.g. graphs charts spreadsheets text etc. that can then be communicated to a user e.g. product manager project manager administrator etc. where the formats can be visualized and modified as desired by the user. The results may be presented or displayed via a display device in communication with the client computing device.

In one embodiment transaction sequence begins at database or platform e.g. Force.com with user input using a user input page layout as shown in . The information is the received and reflected in feature metrics e.g. custom object as shown in . The information is then fed into programming engine employed at a computing device where programming engine may have a running program such as custom Java program . In one embodiment Java program may provide script generator for generating a program script for a program language e.g. Pig that is compatible with data processing sever . In the illustrated embodiment database platform is integrated with database or platform that includes data processing server e.g. Apache Hadoop . In one embodiment the two independent platforms are integrated using integration mechanism of such as by providing programming engine to facilitate integrated communication between the two platforms . Since in our example data processing server includes an Apache Hadoop Java program may offer a Pig script using script generator . The information obtained through user input and any other information log pulled from log files is processed at data processing server at platform that is integrated with platform .

Once the processing is completed the information is offered as trend metrics e.g. custom object representing a summary of the results e.g. daily summary as shown in . The results are the offered as reports or dashboards in any number and type of formats to the user e.g. product manager etc. . In one embodiment collaboration between various transaction stages may be provided using for example Chatter by Salesforce.com.

Referring now to it is a screenshot of feature metrics that is essentially a table including rows and columns of fields that are look at and reviewed by data processing server to determine whether they need processing. Similarly for example instrumentation and status columns may be used by Java program for various determinations and processes. Column PM for example may provide the name the name of the user e.g. product manager who would be viewing the information and processing results such as a product manager. is a screenshot of trend metrics provide a recordation of data in a summary format such as having columns and rows serving as an output or recorded metrics of each feature such as dates requests average response time etc.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. static memory such as flash memory static random access memory SRAM volatile but high data rate RAM etc. and a secondary memory e.g. a persistent storage device including hard disk drives and persistent multi tenant data base implementations which communicate with each other via a bus . Main memory includes emitted execution data e.g. data emitted by a logging framework and one or more trace preferences which operate in conjunction with processing logic and processor to perform the methodologies discussed herein.

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the processing logic for performing the operations and functionality of thread resource management mechanism as described with reference to and other figures discussed herein.

The computer system may further include a network interface card . The computer system also may include a user interface such as a video display unit a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. an integrated speaker . The computer system may further include peripheral device e.g. wireless or wired communication devices memory devices storage devices audio processing devices video processing devices etc. The computer system may further include a Hardware based API logging framework capable of executing incoming requests for services and emitting execution data responsive to the fulfillment of such incoming requests.

The secondary memory may include a machine readable storage medium or more specifically a machine accessible storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions of thread resource management mechanism as described with reference to and other figures described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface card . The machine readable storage medium may include transitory or non transitory machine readable storage media.

Portions of various embodiments may be provided as a computer program product which may include a computer readable medium having stored thereon computer program instructions which may be used to program a computer or other electronic devices to perform a process according to the embodiments. The machine readable medium may include but is not limited to floppy diskettes optical disks compact disk read only memory CD ROM and magneto optical disks ROM RAM erasable programmable read only memory EPROM electrically EPROM EEPROM magnet or optical cards flash memory or other type of media machine readable medium suitable for storing electronic instructions.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices e.g. an end station a network element . Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer readable transmission media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals . In addition such electronic devices typically include a set of one or more processors coupled to one or more other components such as one or more storage devices non transitory machine readable storage media user input output devices e.g. a keyboard a touchscreen and or a display and network connections. The coupling of the set of processors and other components is typically through one or more busses and bridges also termed as bus controllers . Thus the storage device of a given electronic device typically stores code and or data for execution on the set of one or more processors of that electronic device. Of course one or more parts of an embodiment may be implemented using different combinations of software firmware and or hardware.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in herein and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . User system further includes Mobile OS e.g. iOS by Apple Android WebOS by Palm etc. . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Core processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned U.S. Pat. No. 7 730 478 entitled Method and System for Allowing Access to Developed Applicants via a Multi Tenant Database On Demand Database Service issued Jun. 1 2010 to Craig Weissman which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

Any of the above embodiments may be used alone or together with one another in any combination. Embodiments encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments do not necessarily address any of these deficiencies. In other words different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements. It is to be understood that the above description is intended to be illustrative and not restrictive.

