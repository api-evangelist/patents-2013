---

title: Dedicated client-side signature generator in a networked storage system
abstract: A storage system according to certain embodiments includes a client-side signature repository that includes information representative of a set of data blocks stored in primary storage. During storage operations of a client, the system can generate signatures corresponding to data blocks that are being stored in primary storage. The system can store the generated signatures in the client-side signature repository along with information regarding the location of the corresponding data block within primary storage. As additional instances of the data block are stored in primary storage, the system can store the location of the additional instances in the client-side signature repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09218375&OS=09218375&RS=09218375
owner: COMMVAULT SYSTEMS, INC.
number: 09218375
owner_city: Tinton Falls
owner_country: US
publication_date: 20130612
---
The present application claims priority benefit to U.S. Provisional Application No. 61 659 387 entitled CLIENT SIDE SIGNATURE REPOSITORY IN A NETWORKED DEDUPLICATED STORAGE SYSTEM filed Jun. 13 2012 and is hereby incorporated by reference herein in its entirety.

The present application is being tiled concurrently with U.S. application Ser. No. 13 916 409 entitled COLLABORATIVE RESTORE IN A NETWORKED STORAGE SYSTEM filed Jun. 12 2013 U.S. application Ser. No. 13 916 429 entitled RESTORE USING A CLIENT SIDE SIGNATURE REPOSITORY IN A NETWORKED STORAGE SYSTEM filed Jun. 12 2013 U.S. application Ser. No. 13 916 385 entitled COLLABORATIVE BACKUP IN A NETWORKED STORAGE SYSTEM filed Jun. 12 2013 U.S. application Ser. No. 13 916 434 entitled BACKUP USING A CLIENT SIDE SIGNATURE REPOSITORY IN A NETWORKED STORAGE SYSTEM filed Jun. 12 2013 and U.S. application Ser. No. 13 916 467 entitled INTELLIGENT DATA SOURCING IN A NETWORKED STORAGE SYSTEM filed Jun. 12 2013 each of which is incorporated herein by reference.

Businesses worldwide recognize the commercial value of their data and seek reliable cost effective ways to protect the information stored on their computer networks while minimizing impact on productivity. Protecting information is often part of a routine process that is performed within an organization.

A company might back up critical computing systems such as databases file servers web servers and so on as part of a daily weekly or monthly maintenance schedule. The company may similarly protect computing systems used by each of its employees such as those used by an accounting department marketing department engineering department and so forth.

Given the rapidly expanding volume of data under management companies also continue to seek innovative techniques for managing data growth in addition to protecting data. For instance companies often implement migration techniques for moving data to lower cost storage over time and data reduction techniques such as for reducing redundant data pruning lower priority data etc.

Enterprises also increasingly view their stored data as a valuable asset. Along these lines customers are looking for solutions that not only protect and manage but also leverage their data. For instance solutions providing data analysis capabilities improved data presentation and access features and the like are in increasing demand.

In response to these challenges one technique developed by storage system providers is data deduplication. Deduplication typically involves eliminating or reducing the amount of redundant data stored and communicated within a storage system improving storage utilization. For example data can be divided into units of a chosen granularity e.g. files or sub file data blocks . The sizes of the data blocks can be of fixed or variable length. As new data enters the system the data units can be checked to see if they already exist in the storage system. If the data unit already exists instead of storing and or communicating a duplicate copy the storage system stores and or communicates a reference to the existing data unit. Thus deduplication can improve storage utilization system traffic e.g. over a networked storage system or both.

Even in those systems employing deduplication data management operations including backup and restore operations can place heavy demands on available network bandwidth and available system resources. Such operations can also introduce significant delay due to communication latency between secondary storage e.g. non production backup storage and primary storage e.g. production storage .

In accordance with certain aspects of the disclosure one technique developed to address these challenges incorporates the use of a client side signature repository with a store of information including a set of signatures that correspond to data blocks stored in primary storage where the primary data is generated by applications running on a set of client machines. For instance the client side signature repository can include signatures of most if not all of the data blocks stored in primary storage and a reference to where copies of the data block are located throughout the primary storage similar to an index in a book. In this manner the system can identify signatures and corresponding data blocks that are unique to primary storage e.g. not found in secondary storage and otherwise track the data blocks that reside in primary storage. In some cases the client side signature repository can be used to track the location of substantially all e.g. greater than 95 percent or greater than 99 percent of the data blocks in primary storage. In yet other cases the client side signature repository can be used to track a smaller subset of the data blocks in primary storage.

The client side signature repository can generate and or store signatures and certain metadata associated with the primary data. The signature metadata pairs are referred to as signature blocks in certain embodiments as will be described. During copy operations e.g. backup replication snapshot or other types of copy operations restore operations or other types of storage operations the client side signature repository can be queried to determine which data blocks reside in primary storage which may also be referred to as production storage or as client side storage and which data blocks reside in secondary storage which may also be referred to as non production storage . In some embodiments during a deduplicated backup or other copy operation the data blocks unique to primary storage are identified and sent to secondary storage while only signature information or other reference data is sent to secondary storage for data blocks that are already located in secondary storage. In certain instances during a restore the data blocks unique to secondary storage are identified and retrieved from secondary storage while the data blocks already located in primary storage are retrieved from primary storage.

The client side signature repository can be used as part of a storage system to reduce the demands on the network between one or more production clients generating and storing primary data and non production secondary storage storing secondary copy data such as backup storage. For example one or more client side repositories can form part of the production client s or may share a common network topology with the client s whereas the client s and the secondary storage devices may be remote from one another or reside on differing network topologies.

As just one example the client side signature repository and the client may communicate over a local area network LAN while client and secondary storage communicate over a wide area network WAN . Thus the client side signature repository can communicate more effectively e.g. at a higher data transfer rate more reliably with less latency etc. with the client than the backup storage devices can communicate with the client.

In some embodiments each production client maintains a local client side signature repository including signature information such as signature information corresponding only to the data blocks in that production client or in alternative embodiments signature information corresponding to multiple production clients. In certain embodiments the primary storage subsystem also sometimes referred to herein as primary storage maintains a shared client side signature repository including signature information that corresponds to data blocks stored across some or all of the production clients. In this manner a shared client side signature repository can be a global map to all of the data blocks in primary storage.

Because the client side signature repository in some embodiments stores the signatures of all or substantially all of the data blocks located in primary storage the signatures and or associated metadata can be used to identify which data is already present in primary storage without having to read the actual data blocks themselves during the identification process thereby improving storage operation efficiency. For instance during a restore operation the secondary storage subsystem also sometimes referred to herein as secondary storage can send a set of signatures to primary storage for a data set that is to be restored to a client machine. In response the primary storage subsystem consults the signature information in the client side signature repository without reading the data blocks to determine which data blocks are already present in primary storage.

Primary storage can include one or more signature generation components configured to generate the data block signatures stored in the client side signature repository. In some cases each client maintains its own signature generation module. For instance each client specific signature generator can snoop or otherwise monitor data operations on the corresponding client and generate and send the signatures and corresponding metadata to the client side signature repository for storage. Such a configuration can reduce network traffic within the primary storage subsystem. In other cases a shared signature generator resides in primary storage e.g. forms part of a central client side signature repository and is configured to generate signatures for all of the clients or for at least a plurality of the clients .

The client side signature repository can also be used to perform storage operations in a collaborative fashion such that data from multiple clients is sourced for storage operations that don t necessarily involve those clients. For instance during a collaborative copy operation e.g. a backup operation in which the client side signature repository is used during a secondary copy operation associated with a target client the client side signature repository can identify which of the multiple clients contain a copy of a particular data block in the copy data set. A sourcing policy can include criteria for determining which of the identified clients to source data blocks from. Based on the desired sourcing policy the data block to be used in a storage operation can be retrieved from any one of the clients storing the copy of the subject data block including the target client or any other client. Moreover during a collaborative restore operation from secondary storage to a target client the client side signature repository can be used to identify non target clients that include data blocks in the restore data set and to source the data blocks from those clients during the restore. Among other benefits collaborative sourcing can be used to reduce the amount of relatively high latency traffic between primary and secondary storage and to distribute storage operation processing across the client machines in a desired fashion. Collaborative sourcing can also reduce the down time of the target client or otherwise distribute processing load for deduplication operations.

In some embodiments a method is provided for generating a backup data set for a client computing device by using a signature repository residing in a primary storage subsystem. The method can include for each respective client computing device of one or more client computing devices in a primary storage subsystem monitoring the storage of a plurality of files formed by data blocks generated by one or more software applications running on the respective client computing device. The plurality of files are stored in a data store associated with the respective client computing device. The method can further include maintaining by a repository agent executing on one or more processors in the primary storage subsystem a repository indicating at least which data blocks of the monitored files are stored in the primary storage subsystem. In response to instructions to create a secondary copy in a secondary storage subsystem of at least a subset of the plurality of files stored in a data store associated with a first client computing device of the one or more client computing devices the method can include querying the repository to identify at least a first group of data blocks that form at least a portion of the subset of files and for which matching data blocks are not stored in the secondary storage subsystem identifying the location of the first group of data blocks within the primary storage subsystem and retrieving the first group of data blocks from one or more of the data stores associated with the one or more client computing devices.

In certain embodiments a method is provided for generating a secondary copy data set for a client computing device by collaboratively sourcing data to be used in the secondary copy data set from at least one other client computing device. The method can include for each respective client computing device of a plurality of client computing devices monitoring storage of a plurality of files formed by data blocks generated by one or more software applications running on the respective client computing device. The files are stored in a data store associated with the respective client computing device. The method can further include maintaining by a signature repository agent executing on one or more processors a global mapping indicating which data blocks are stored in the data stores associated with each of the plurality of client computing devices. The separate copies of at least some of the data blocks reside in the data stores of multiple ones of the plurality of client computing devices. The method can further include in response to instructions to create a secondary copy in secondary storage of at least a subset of the plurality of files stored in the data store of a first client computing device of the plurality of client computing devices querying by the signature repository agent the global mapping to identify at least a first group of data blocks in the subset of the plurality of files that are stored in the data store associated with a second client computing device of the plurality of client computing devices. The method can further include retrieving the first group of data blocks from the data store associated with the second client computing device and retrieving at least some of the remaining data blocks in the first portion from the data store associated with the first client computing device.

In some embodiments a method is provided for restoring data to a primary storage subsystem using data blocks residing in the primary storage subsystem. The method can include maintaining data block signatures in a signature repository. The data block signatures correspond to at least unique signatures of data blocks that form primary data. The primary data is generated by one or more applications executing on one or more of client computing devices. In addition the primary data for each respective client computing device of the one or more client computing devices is stored in a data store associated with the respective client computing device.

The method can further include receiving a set of data block signatures corresponding to data blocks in a secondary copy of data maintained in a secondary storage subsystem. The secondary copy corresponding to a previous version of the primary data of a first client computing device of the one or more client computing devices. The method can further include comparing by one or more processors the received set of data block signatures to the data block signatures in the signature repository to determine which data blocks in the secondary copy already reside in the primary storage subsystem and restoring the secondary copy to the data store associated with the first client computing device using at least some of the data blocks in the secondary copy that already reside in the primary storage subsystem. The remaining data blocks in the secondary copy are retrieved from the secondary storage subsystem.

In certain embodiments a method is provided for restoring data to a first client computing device located in a primary storage subsystem using data blocks residing in a data store associated with a second client computing device located in the primary storage subsystem. The method can include maintaining in a signature repository data block signatures corresponding to data blocks that form primary data. The primary data generated by one or more applications executing on a plurality of client computing devices is located within the primary storage subsystem and the primary data for each respective client computing device of the plurality of client computing devices is stored in a data store associated with the respective client computing device. The method can further include receiving a set of data block signatures corresponding to data blocks in a secondary copy of data maintained in a secondary storage subsystem. The secondary copy of can correspond to a previous version of the primary data of a first client computing device of the plurality of client computing devices.

The method can further include querying using one or more processors the signature repository to identify at least a first group of data blocks corresponding to a first group of data block signatures of the received set of data block signatures. The first group of data blocks are stored in the data store associated with a second client computing device of the plurality of client computing devices. The method can further include retrieving at least some of the first group of data blocks from the data store associated with the second client computing device and restoring the secondary copy to the data store associated with the first client computing device using at least the data blocks retrieved from the second client computing device.

In some embodiments a method is provided for maintaining a signature repository accessible by multiple client computing devices in a data storage system. The method can include tracking storage of data units corresponding to primary data generated by one or more applications executing on a plurality of client computing devices that form a primary storage subsystem. The primary data for each of the client computing devices is stored in a data store associated with the respective client computing device and the primary storage subsystem is in communication with a secondary storage subsystem that is separate from the primary storage subsystem and is configured to maintain secondary copies of at least some of the primary data. The method can further include generating by a signature agent executing on one or more processors in the primary storage subsystem signatures corresponding to the plurality of tracked data units and maintaining a signature repository including a signature block for at least each unique signature of the generated signatures. Each signature block can include the unique signature and one or data unit entries. Each entry can correspond to a copy of the data unit associated with the unique signature that is stored in the primary storage subsystem. Each entry can indicate which of the plurality of client computing devices stores the corresponding copy of the data unit. At least some of the signature blocks can include at least a first entry indicating that a first client computing device of the plurality of client computing devices stores a copy of the data unit and a second entry indicating that a second client computing device of the plurality of client computing devices stores a copy of the data unit.

In certain embodiments a method is provided for sourcing data from storage associated with a pool of computing devices during a data storage operation associated with one of the computing devices in the pool. The method can include obtaining signatures corresponding to data units that form a data set associated with a data storage operation. The data set can correspond to a version of primary data of a first computing device in a pool of a plurality of computing devices. Each respective computing device in the pool can store primary data generated by one or more software applications executing on the respective computing device and the primary data stored in at least one storage device can be associated with the respective computing device. The method can further include populating by one or more processors a shared signature repository. The shared signature repository can include signatures corresponding to at least each unique data unit stored in the storage devices of the computing devices in the pool. For each signature included in the signature repository an indication as to one or more of the computing devices whose at least one storage device can include a copy of the data unit corresponding to the signature. The method can further include comparing the obtained signatures with the signature repository to identify one or more of the computing devices in the pool whose respective at least one storage devices include copies of data units in the data set consulting by one or more processors a priority policy and based on the priority policy and for at least some data units in the backup set deciding to access copies of the at least some data units from one or more computing devices in the pool other than the first computing device.

Deduplication techniques designed to reduce the demands on storage systems during backup and or replication operations are described in greater detail in the following U.S. patent applications each of which is incorporated by reference in its entirety. One or more embodiments of the present disclosure may be used with systems and methods disclosed therein 

U.S. patent application Ser. No. 13 324 884 entitled Client Side Repository in a Networked Deduplicated Storage System and filed on Dec. 13 2011 

U.S. patent application Ser. No. 13 324 613 entitled Distributed Deduplicated Storage System and filed on Dec. 13 2011 

U.S. patent application Ser. No. 12 982 086 entitled Content Aligned Block Based Deduplication filed Dec. 30 2010 

U.S. patent application Ser. No. 12 982 100 entitled Systems and Methods for Retaining and Using Block Signatures in Data Protection Operations filed Dec. 30 2010

U.S. patent application Ser. No. 12 145 347 entitled Application Aware and Remote Single Instance Data Management filed Jun. 24 2008 

U.S. patent application Ser. No. 12 145 342 entitled Application Aware and Remote Single Instance Data Management filed Jun. 24 2008 and

U.S. patent application Ser. No. 12 725 288 entitled Extensible Data Deduplication System and Method filed Mar. 16 2010.

In addition one or more embodiments of the present disclosure may also be used with systems and methods disclosed in the following patents each of which is hereby incorporated herein by reference in its entirety 

U.S. Pat. No. 7 035 880 entitled Modular Backup and Retrieval System Used in Conjunction with a Storage Area Network issued Apr. 25 2006 

U.S. Pat. No. 6 542 972 entitled Logical View and Access to Physical Storage in Modular Data and Storage Management System issued Apr. 1 2003 

U.S. Pat. No. 6 658 436 entitled Logical View and Access to Data Manage by a Modular Data and Storage Management System issued Dec. 2 2003 

U.S. Pat. No. 7 130 970 entitled Dynamic Storage Device Pooling in a Computer System issued Oct. 10 2006 

U.S. Pat. No. 7 246 207 entitled System and Method for Dynamically Performing Storage Operations in a Computer Network issued Jul. 17 2007 

U.S. Pat. No. 7 454 569 entitled Hierarchical System and Method for Performing Storage Operations in a Computer Network issued Nov. 18 2008 

U.S. Pat. No. 7 613 748 entitled System and Method for Containerized Data Storage and Tracking issued Nov. 3 2009 and

U.S. Pat. No. 7 620 710 entitled Systems and Methods for Performing Multi Path Storage Operations issued Nov. 17 2009.

Systems and methods are described herein for using deduplication and collaborative data movement techniques to improve data storage operations. Examples of such systems and methods are discussed in further detail herein e.g. with respect to . It will be appreciated that such techniques can be implemented by information management systems including those that will now be described with respect to . Moreover the componentry for implementing the deduplication and data movement functionality shown and described with respect to can be incorporated into the information management systems of where applicable.

With the increasing importance of protecting and leveraging data organizations simply cannot afford to take the risk of losing critical data. Moreover runaway data growth and other modern realities make protecting and managing data an increasingly difficult task. There is therefore a need for efficient powerful and user friendly solutions for protecting and managing data.

Depending on the size of the organization there are typically many data production sources which are under the purview of tens hundreds or even thousands of employees or other individuals. In the past individual employees were sometimes responsible for managing and protecting their data. A patchwork of hardware and software point solutions have been applied in other cases. These solutions were often provided by different vendors and had limited or no interoperability.

Certain embodiments described herein provide systems and methods capable of addressing these and other shortcomings of prior approaches by implementing unified organization wide information management. shows one such information management system which generally can include combinations of hardware and software configured to protect and manage data and metadata generated and used by the various computing devices in the information management system .

The organization which employs the information management system may be a corporation or other business entity non profit organization educational institution household governmental agency or the like.

Generally the systems and associated components described herein may be compatible with and or provide some or all of the functionality of the systems and corresponding components described in one or more of the following U.S. patents and patent application publications assigned to CommVault Systems Inc. each of which is hereby incorporated in its entirety by reference herein 

The information management system can include a variety of different computing devices. For instance as will be described in greater detail herein the information management system can include one or more client computing devices and secondary storage computing devices .

Computing devices can include without limitation one or more workstations personal computers desktop computers or other types of generally fixed computing systems such as mainframe computers and minicomputers.

Other computing devices can include mobile or portable computing devices such as one or more laptops tablet computers personal data assistants mobile phones such as smartphones and other mobile or portable computing devices such as embedded computers set top boxes vehicle mounted devices wearable computers etc. Computing devices can include servers such as mail servers file servers database servers and web servers.

In some cases a computing device includes virtualized and or cloud computing resources. For instance one or more virtual machines may be provided to the organization by a third party cloud service vendor. Or in some embodiments computing devices can include one or more virtual machine s running on a physical virtual machine host operated by the organization. As one example the organization may use one virtual machine as a database server and another virtual or physical machine as a mail server. A virtual machine manager VMM e.g. a Hypervisor may manage the virtual machines and reside and execute on the virtual machine host. Examples of techniques for implementing information management techniques in a cloud computing environment are described in U.S. Pat. No. 8 285 681 which is incorporated by reference herein. Examples of techniques for implementing information management techniques in a virtualized computing environment are described in U.S. Pat. No. 8 307 177 also incorporated by reference herein.

The information management system can also include a variety of storage devices including primary storage devices and secondary storage devices for example. Storage devices can generally be of any suitable type including without limitation disk drives hard disk arrays semiconductor memory e.g. solid state storage devices network attached storage NAS devices tape libraries or other magnetic non tape storage devices optical media storage devices combinations of the same and the like. In some embodiments storage devices can form part of a distributed file system. In some cases storage devices are provided in a cloud e.g. a private cloud or one operated by a third party vendor . A storage device in some cases comprises a disk array or portion thereof.

The illustrated information management system includes one or more client computing device having at least one application executing thereon and one or more primary storage devices storing primary data . The client computing device s and the primary storage devices may generally be referred to in some cases as a primary storage subsystem .

Depending on the context the term information management system can refer to generally all of the illustrated hardware and software components. Or in other instances the term may refer to only a subset of the illustrated components.

For instance in some cases the information management system generally refers to a combination of specialized components used to protect move manage manipulate analyze and or process data and metadata generated by the client computing devices . However the information management system in some cases does not include the underlying components that generate and or store the primary data such as the client computing devices themselves the applications and operating system residing on the client computing devices and the primary storage devices . As an example information management system may sometimes refer to one or more of the following components and corresponding data structures storage managers data agents and media agents. These components will be described in further detail below.

There are typically a variety of sources in an organization that produce data to be protected and managed. As just one illustrative example in a corporate environment such data sources can be employee workstations and company servers such as a mail server a web server or the like. In the information management system the data generation sources include the one or more client computing devices .

The client computing devices may include any of the types of computing devices described above without limitation and in some cases the client computing devices are associated with one or more users and or corresponding user accounts of employees or other individuals.

The information management system generally addresses handles the data management and protection needs for the data generated by the client computing devices . However the use of this term does not imply that the client computing devices cannot be servers in other respects. For instance a particular client computing device may act as a server with respect to other devices such as other client computing devices . As just a few examples the client computing devices can include mail servers file servers database servers and web servers.

Each client computing device may have one or more applications e.g. software applications executing thereon which generate and manipulate the data that is to be protected from loss and managed.

The applications generally facilitate the operations of an organization or multiple affiliated organizations and can include without limitation mail server applications e.g. Microsoft Exchange Server file server applications mail client applications e.g. Microsoft Exchange Client database applications e.g. SQL Oracle SAP Lotus Notes Database word processing applications e.g. Microsoft Word spreadsheet applications financial applications presentation applications browser applications mobile applications entertainment applications and so on.

The client computing devices can have at least one operating system e.g. Microsoft Windows Mac OS X iOS IBM z OS Linux other Unix based operating systems etc. installed thereon which may support or host one or more file systems and other applications .

As shown the client computing devices and other components in the information management system can be connected to one another via one or more communication pathways . The communication pathways can include one or more networks or other connection types including as any of following without limitation the Internet a wide area network WAN a local area network LAN a Storage Area Network SAN a Fibre Channel connection a Small Computer System Interface SCSI connection a virtual private network VPN a token ring or TCP IP based network an intranet network a point to point link a cellular network a wireless data transmission system a two way cable system an interactive kiosk network a satellite network a broadband network a baseband network a neural network other appropriate wired wireless or partially wired wireless computer or telecommunications networks combinations of the same or the like. The communication pathways in some cases may also include application programming interfaces APIs including e.g. cloud service provider APIs virtual machine management APIs and hosted service provider APIs.

Primary data according to some embodiments is production data or other live data generated by the operating system and other applications residing on a client computing device . The primary data is generally stored on the primary storage device s and is organized via a file system supported by the client computing device . For instance the client computing device s and corresponding applications may create access modify write delete and otherwise use primary data . In some cases some or all of the primary data can be stored in cloud storage resources.

Primary data is generally in the native format of the source application . According to certain aspects primary data is an initial or first e.g. created before any other copies or before at least one other copy stored copy of data generated by the source application . Primary data in some cases is created substantially directly from data generated by the corresponding source applications .

The primary data may sometimes be referred to as a primary copy in the sense that it is a discrete set of data. However the use of this term does not necessarily imply that the primary copy is a copy in the sense that it was copied or otherwise derived from another stored version.

The primary storage devices storing the primary data may be relatively fast and or expensive e.g. a disk drive a hard disk array solid state memory etc. . In addition primary data may be intended for relatively short term retention e.g. several hours days or weeks .

According to some embodiments the client computing device can access primary data from the primary storage device by making conventional file system calls via the operating system. Primary data representing files may include structured data e.g. database files unstructured data e.g. documents and or semi structured data. Some specific examples are described below with respect to .

It can be useful in performing certain tasks to organize the primary data into units of different granularities. In general primary data can include files directories file system volumes data blocks extents or any other hierarchies or organizations of data objects. As used herein a data object can refer to both 1 any file that is currently addressable by a file system or that was previously addressable by the file system e.g. an archive file and 2 a subset of such a file e.g. a data block .

As will be described in further detail it can also be useful in performing certain functions of the information management system to access and modify metadata within the primary data . Metadata generally includes information about data objects or characteristics associated with the data objects.

Metadata can include without limitation one or more of the following the data owner e.g. the client or user that generates the data the last modified time e.g. the time of the most recent modification of the data object a data object name e.g. a file name a data object size e.g. a number of bytes of data information about the content e.g. an indication as to the existence of a particular search term to from information for email e.g. an email sender recipient etc. creation date file type e.g. format or application type last accessed time application type e.g. type of application that generated the data object location network e.g. a current past or future location of the data object and network pathways to from the data object frequency of change e.g. a period in which the data object is modified business unit e.g. a group or department that generates manages or is otherwise associated with the data object aging information e.g. a schedule such as a time period in which the data object is migrated to secondary or long term storage boot sectors partition layouts file location within a file folder directory structure user permissions owners groups access control lists ACLs system metadata e.g. registry information combinations of the same or the other similar information related to the data object.

In addition to metadata generated by or related to file systems and operating systems some of the applications and or other components of the information management system maintain indices of metadata for data objects e.g. metadata associated with individual email messages. Thus each data object may be associated with corresponding metadata. The use of metadata to perform classification and other functions is described in greater detail below.

Each of the client computing devices are generally associated with and or in communication with one or more of the primary storage devices storing corresponding primary data . A client computing device may be considered to be associated with or in communication with a primary storage device if it is capable of one or more of routing and or storing data to the particular primary storage device coordinating the routing and or storing of data to the particular primary storage device retrieving data from the particular primary storage device coordinating the retrieval of data from the particular primary storage device and modifying and or deleting data retrieved from the particular primary storage device .

The primary storage devices can include any of the different types of storage devices described above or some other kind of suitable storage device. The primary storage devices may have relatively fast I O times and or are relatively expensive in comparison to the secondary storage devices . For example the information management system may generally regularly access data and metadata stored on primary storage devices whereas data and metadata stored on the secondary storage devices is accessed relatively less frequently.

In some cases each primary storage device is dedicated to an associated client computing device . For instance a primary storage device in one embodiment is a local disk drive of a corresponding client computing device . In other cases one or more primary storage devices can be shared by multiple client computing devices e.g. via a network such as in a cloud storage implementation. As one example a primary storage device can be a disk array shared by a group of client computing devices such as one of the following types of disk arrays EMC Clariion EMC Symmetrix EMC Celerra Dell EqualLogic IBM XIV NetApp FAS HP EVA and HP 3PAR.

The information management system may also include hosted services not shown which may be hosted in some cases by an entity other than the organization that employs the other components of the information management system . For instance the hosted services may be provided by various online service providers to the organization. Such service providers can provide services including social networking services hosted email services or hosted productivity applications or other hosted applications .

Hosted services may include software as a service SaaS platform as a service PaaS application service providers ASPs cloud services or other mechanisms for delivering functionality via a network. As it provides services to users each hosted service may generate additional data and metadata under management of the information management system e.g. as primary data . In some cases the hosted services may be accessed using one of the applications . As an example a hosted mail service may be accessed via browser running on a client computing device . The hosted services may be implemented in a variety of computing environments. In some cases they are implemented in an environment having a similar arrangement to the information management system where various physical and logical components are distributed over a network.

The primary data stored on the primary storage devices may be compromised in some cases such as when an employee deliberately or accidentally deletes or overwrites primary data during their normal course of work. Or the primary storage devices can be damaged or otherwise corrupted.

For recovery and or regulatory compliance purposes it is therefore useful to generate copies of the primary data . Accordingly the information management system includes one or more secondary storage computing devices and one or more secondary storage devices configured to create and store one or more secondary copies of the primary data and associated metadata. The secondary storage computing devices and the secondary storage devices may sometimes be referred to as a secondary storage subsystem .

Creation of secondary copies can help in search and analysis efforts and meet other information management goals such as restoring data and or metadata if an original version e.g. of primary data is lost e.g. by deletion corruption or disaster allowing point in time recovery complying with regulatory data retention and electronic discovery e discovery requirements reducing utilized storage capacity facilitating organization and search of data improving user access to data riles across multiple computing devices and or hosted services and implementing data retention policies. The client computing devices access or receive primary data and communicate the data e.g. over the communication pathways for storage in the secondary storage device s .

A secondary copy can comprise a separate stored copy of application data that is derived from one or more earlier created stored copies e.g. derived from primary data or another secondary copy . Secondary copies can include point in time data and may be intended for relatively long term retention e.g. weeks months or years before some or all of the data is moved to other storage or is discarded.

In some cases a secondary copy is a copy of application data created and stored subsequent to at least one other stored instance e.g. subsequent to corresponding primary data or to another secondary copy in a different storage device than at least one previous stored copy and or remotely from at least one previous stored copy. In some other cases secondary copies can be stored in the same storage device as primary data and or other previously stored copies. For example in one embodiment a disk array capable of performing hardware snapshots stores primary data and creates and stores hardware snapshots of the primary data as secondary copies . Secondary copies may be stored in relatively slow and or low cost storage e.g. magnetic tape . A secondary copy may be stored in a backup or archive format or in some other format different than the native source application format or other primary data format.

In some cases secondary copies are indexed so users can browse and restore at another point in time. After creation of a secondary copy representative of certain primary data a pointer or other location indicia e.g. a stub may be placed in primary data or be otherwise associated with primary data to indicate the current location on the secondary storage device s .

Since an instance of a data object or metadata in primary data may change over time as it is modified by an application or hosted service or the operating system the information management system may create and manage multiple secondary copies of a particular data object or metadata each representing the state of the data object in primary data at a particular point in time. Moreover since an instance of a data object in primary data may eventually be deleted from the primary storage device and the file system the information management system may continue to manage point in time representations of that data object even though the instance in primary data no longer exists.

For virtualized computing devices the operating system and other applications of the client computing device s may execute within or under the management of virtualization software e.g. a VMM and the primary storage device s may comprise a virtual disk created on a physical storage device. The information management system may create secondary copies of the files or other data objects in a virtual disk file and or secondary copies of the entire virtual disk file itself e.g. of an entire .vmdk file .

Secondary copies may be distinguished from corresponding primary data in a variety of ways some of which will now be described. First as discussed secondary copies can be stored in a different format e.g. backup archive or other non native format than primary data . For this or other reasons secondary copies may not be directly useable by the applications of the client computing device e.g. via standard system calls or otherwise without modification processing or other intervention by the information management system .

Secondary copies are also in some embodiments stored on a secondary storage device that is inaccessible to the applications running on the client computing devices and or hosted services . Some secondary copies may be offline copies in that they are not readily available e.g. not mounted to tape or disk . Offline copies can include copies of data that the information management system can access without human intervention e.g. tapes within an automated tape library but not yet mounted in a drive and copies that the information management system can access only with at least some human intervention e.g. tapes located at an offsite storage site .

Creating secondary copies can be a challenging task. For instance there can be hundreds or thousands of client computing devices continually generating large volumes of primary data to be protected. Also there can be significant overhead involved in the creation of secondary copies . Moreover secondary storage devices may be special purpose components and interacting with them can require specialized intelligence.

In some cases the client computing devices interact directly with the secondary storage device to create the secondary copies . However in view of the factors described above this approach can negatively impact the ability of the client computing devices to serve the applications and produce primary data . Further the client computing devices may not be optimized for interaction with the secondary storage devices .

Thus in some embodiments the information management system includes one or more software and or hardware components which generally act as intermediaries between the client computing devices and the secondary storage devices . In addition to off loading certain responsibilities from the client computing devices these intermediate components can provide other benefits. For instance as discussed further below with respect to distributing some of the work involved in creating secondary copies can enhance scalability.

The intermediate components can include one or more secondary storage computing devices as shown in and or one or more media agents which can be software modules residing on corresponding secondary storage computing devices or other appropriate devices . Media agents are discussed below e.g. with respect to .

The secondary storage computing device s can comprise any of the computing devices described above without limitation In some cases the secondary storage computing device s include specialized hardware and or software componentry for interacting with the secondary storage devices .

To create a secondary copy involving the copying of data from the primary storage subsystem to the secondary storage subsystem the client computing device in some embodiments communicates the primary data to be copied or a processed version thereof to the designated secondary storage computing device via the communication pathway . The secondary storage computing device in turn conveys the received data or a processed version thereof to the secondary storage device . In some such configurations the communication pathway between the client computing device and the secondary storage computing device comprises a portion of a LAN WAN or SAN. In other cases at least some client computing devices communicate directly with the secondary storage devices e.g. via Fibre Channel or SCSI connections . In some other cases one or more secondary copies are created from existing secondary copies such as in the case of an auxiliary copy operation described in greater detail below.

Some or all primary data objects are associated with corresponding metadata e.g. Meta1 11 which may include file system metadata and or application specific metadata. Stored on the secondary storage device s are secondary copy data objects A C which may include copies of or otherwise represent corresponding primary data objects and metadata.

As shown the secondary copy data objects A C can individually represent more than one primary data object. For example secondary copy data object A represents three separate primary data objects C and C represented as C and C respectively . Moreover as indicated by the prime mark a secondary copy object may store a representation of a primary data object or metadata differently than the original format e.g. in a compressed encrypted deduplicated or other modified format.

The information management system can incorporate a variety of different hardware and software components which can in turn be organized with respect to one another in many different configurations depending on the embodiment. There are critical design choices involved in specifying the functional responsibilities of the components and the role of each component in the information management system . For instance as will be discussed such design choices can impact performance as well as the adaptability of the information management system to data growth or other changing circumstances.

As noted the number of components in the information management system and the amount of data under management can be quite large. Managing the components and data is therefore a significant task and a task that can grow in an often unpredictable fashion as the quantity of components and data scale to meet the needs of the organization.

For these and other reasons according to certain embodiments responsibility for controlling the information management system or at least a significant portion of that responsibility is allocated to the storage manager .

By distributing control functionality in this manner the storage manager can be adapted independently according to changing circumstances. Moreover a computing device for hosting the storage manager can be selected to best suit the functions of the storage manager . These and other advantages are described in further detail below with respect to .

The storage manager may be a software module or other application. The storage manager generally initiates performs coordinates and or controls storage and other information management operations performed by the information management system e.g. to protect and control the primary data and secondary copies of data and metadata.

As shown by the dashed arrowed lines the storage manager may communicate with and or control some or all elements of the information management system such as the data agents and media agents . Thus in certain embodiments control information originates from the storage manager whereas payload data and payload metadata is generally communicated between the data agents and the media agents or otherwise between the client computing device s and the secondary storage computing device s e.g. at the direction of the storage manager . Control information can generally include parameters and instructions for carrying out information management operations such as without limitation instructions to perform a task associated with an operation timing information specifying when to initiate a task associated with an operation data path information specifying what components to communicate with or access in carrying out an operation and the like. Payload data on the other hand can include the actual data involved in the storage operation such as content data written to a secondary storage device in a secondary copy operation. Payload metadata can include any of the types of metadata described herein and may be written to a storage device along with the payload content data e.g. in the form of a header .

In other embodiments some information management operations are controlled by other components in the information management system e.g. the media agent s or data agent s instead of or in combination with the storage manager .

According to certain embodiments the storage manager provides one or more of the following functions 

The storage manager may maintain a database of management related data and information management policies . The database may include a management index or other data structure that stores logical associations between components of the system user preferences and or profiles e.g. preferences regarding encryption compression or deduplication of primary or secondary copy data preferences regarding the scheduling type or other aspects of primary or secondary copy or other operations mappings of particular information management users or user accounts to certain computing devices or other components etc. management tasks media containerization or other useful data. For example the storage manager may use the index to track logical associations between media agents and secondary storage devices and or movement of data from primary storage devices to secondary storage devices . For instance the storage manager index may store data associating a client computing device with a particular media agent and or secondary storage device as specified in a storage policy.

Administrators and other employees may be able to manually configure and initiate certain information management operations on an individual basis. But while this may be acceptable for some recovery operations or other relatively less frequent tasks it is often not workable for implementing on going organization wide data protection and management.

Thus the information management system may utilize information management policies for specifying and executing information management operations e.g. on an automated basis . Generally an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with storage or other information management operations.

The storage manager database may maintain the information management policies and associated data although the information management policies can be stored in any appropriate location. For instance a storage policy may be stored as metadata in a media agent database or in a secondary storage device e.g. as an archive copy for use in restore operations or other information management operations depending on the embodiment. Information management policies are described further below.

According to certain embodiments the storage manager database comprises a relational database e.g. an SQL database for tracking metadata such as metadata associated with secondary copy operations e.g. what client computing devices and corresponding data were protected . This and other metadata may additionally be stored in other locations such as at the secondary storage computing devices or on the secondary storage devices allowing data recovery without the use of the storage manager .

As shown the storage manager may include a jobs agent a user interface and a management agent all of which may be implemented as interconnected software modules or application programs.

The jobs agent in some embodiments initiates controls and or monitors the status of some or all storage or other information management operations previously performed currently being performed or scheduled to be performed by the information management system . For instance the jobs agent may access information management policies to determine when and how to initiate and control secondary copy and other information management operations as will be discussed further.

The user interface may include information processing and display software such as a graphical user interface GUI an application program interface API or other interactive interface through which users and system processes can retrieve information about the status of information management operations e.g. storage operations or issue instructions to the information management system and its constituent components.

Via the user interface users may optionally issue instructions to the components in the information management system regarding performance of storage and recovery operations. For example a user may modify a schedule concerning the number of pending secondary copy operations. As another example a user may employ the GUI to view the status of pending storage operations or to monitor the status of certain components in the information management system e.g. the amount of capacity left in a storage device .

The storage manager may also track information that permits it to select designate or otherwise identify content indices deduplication databases or similar databases or resources or data sets within its information management cell or another cell to be searched in response to certain queries. Such queries may be entered by the user via interaction with the user interface . An information management cell may generally include a logical and or physical grouping of a combination of hardware and software components associated with performing information management operations on electronic data. For instance the components shown in may together form an information management cell. Multiple cells may be organized hierarchically. With this configuration cells may inherit properties from hierarchically superior cells or be controlled by other cells in the hierarchy automatically or otherwise . Alternatively in some embodiments cells may inherit or otherwise be associated with information management policies preferences information management metrics or other properties or characteristics according to their relative position in a hierarchy of storage operation cells. Cells may also be delineated and or organized hierarchically according to function geography architectural considerations or other factors useful or desirable in performing information management operations. A first cell may represent a geographic segment of an enterprise such as a Chicago office and a second storage operation cell may represent a different geographic segment such as a New York office. Other cells may represent departments within a particular office. Where delineated by function a first cell may perform one or more first types of information management operations e.g. one or more first types of secondary or other copies and a second cell may perform one or more second types of information management operations e.g. one or more second types of secondary or other copies .

In general the management agent allows multiple information management cells to communicate with one another. For example the information management system in some cases may be one information management cell of a network of multiple cells adjacent to one another or otherwise logically related in a WAN or LAN. With this arrangement the cells may be connected to one another through respective management agents .

For instance the management agent can provide the storage manager with the ability to communicate with other components within the information management system and or other cells within a larger information management system via network protocols and application programming interfaces APIs including e.g. HTTP HTTPS FTP REST virtualization software APIs cloud service provider APIs and hosted service provider APIs. Inter cell communication and hierarchy is described in greater detail in U.S. Pat. No. 7 035 880 which is incorporated by reference herein.

As discussed a variety of different types of applications can reside on a given client computing device including operating systems database applications e mail applications and virtual machines just to name a few. And as part of the process of creating and restoring secondary copies the client computing devices may be tasked with processing and preparing the primary data from these various different applications . Moreover the nature of the processing preparation can differ across clients and application types e.g. due to inherent structural and formatting differences between applications .

The one or more data agent s are therefore advantageously configured in some embodiments to assist in the performance of information management operations based on the type of data that is being protected at a client specific and or application specific level.

The data agent may be a software module or component that is generally responsible for managing initiating or otherwise assisting in the performance of information management operations. For instance the data agent may take part in performing data storage operations such as the copying archiving migrating replicating of primary data stored in the primary storage device s . The data agent may receive control information from the storage manager such as commands to transfer copies of data objects metadata and other payload data to the media agents .

In some embodiments a data agent may be distributed between the client computing device and storage manager and any other intermediate components or may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent . In addition a data agent may perform some functions provided by a media agent or may perform other functions such as encryption and deduplication.

As indicated each data agent may be specialized for a particular application and the system can employ multiple application specific data agents each of which may perform information management operations e.g. perform backup migration and data recovery associated with a different application . For instance different individual data agents may be designed to handle Microsoft Exchange data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data SQL Server data SharePoint data Oracle database data SAP database data virtual machines and or associated data and other types of data.

A file system data agent for example may handle data files and or other file system information. If a client computing device has two or more types of data one data agent may be used for each data type to copy archive migrate and restore the client computing device data. For example to backup migrate and restore all of the data on a Microsoft Exchange server the client computing device may use one Microsoft Exchange Mailbox data agent to backup the Exchange mailboxes one Microsoft Exchange Database data agent to backup the Exchange databases one Microsoft Exchange Public Folder data agent to backup the Exchange Public Folders and one Microsoft Windows File System data agent to backup the file system of the client computing device . In such embodiments these data agents may be treated as four separate data agents even though they reside on the same client computing device .

Other embodiments may employ one or more generic data agents that can handle and process data from two or more different applications or that can handle and process multiple data types instead of or in addition to using specialized data agents . For example one generic data agent may be used to back up migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data.

Each data agent may be configured to access data and or metadata stored in the primary storage device s associated with the data agent and process the data as appropriate. For example during a secondary copy operation the data agent may arrange or assemble the data and metadata into one or more files having a certain format e.g. a particular backup or archive format before transferring the file s to a media agent or other component. The file s may include a list of files or other metadata. Each data agent can also assist in restoring data or metadata to primary storage devices from a secondary copy . For instance the data agent may operate in conjunction with the storage manager and one or more of the media agents to restore data from secondary storage device s .

As indicated above with respect to off loading certain responsibilities from the client computing devices to intermediate components such as the media agent s can provide a number of benefits including improved client computing device operation faster secondary copy operation performance and enhanced scalability. As one specific example which will be discussed below in further detail the media agent can act as a local cache of copied data and or metadata that it has stored to the secondary storage device s providing improved restore capabilities.

Generally speaking a media agent may be implemented as a software module that manages coordinates and facilitates the transmission of data as directed by the storage manager between a client computing device and one or more secondary storage devices . Whereas the storage manager controls the operation of the information management system the media agent generally provides a portal to secondary storage devices . For instance other components in the system interact with the media agents to gain access data stored on the secondary storage devices whether it be for the purposes of reading writing modifying or deleting data. Moreover as will be described further media agents can generate and store data and metadata data that generally provides insight into the data stored on associated secondary storage devices .

Media agents can comprise separate nodes in the information management system e.g. nodes that are separate from the client computing devices storage manager and or secondary storage devices . In general a node within the information management system can be a logically and or physically separate component and in some cases is a component that is individually addressable or otherwise identifiable. In addition each media agent may reside on a dedicated secondary storage computing device in some cases while in other embodiments a plurality of media agents reside on the same secondary storage computing device .

A media agent and corresponding media agent database may be considered to be associated with a particular secondary storage device if that media agent is capable of one or more of routing and or storing data to the particular secondary storage device coordinating the routing and or storing of data to the particular secondary storage device retrieving data from the particular secondary storage device coordinating the retrieval of data from a particular secondary storage device and modifying and or deleting data retrieved from the particular secondary storage device .

While media agent s are generally associated with one or more secondary storage devices one or more media agents in certain embodiments are physically separate from the secondary storage devices . For instance the media agents may reside on secondary storage computing devices having different housings or packages than the secondary storage devices . In one example a media agent resides on a first server computer and is in communication with a secondary storage device s residing in a separate rack mounted RAID based system.

Where the information management system includes multiple media agents a first media agent may provide failover functionality for a second failed media agent . In addition media agents can be dynamically selected for storage operations to provide load balancing. Failover and load balancing are described in greater detail below.

In operation a media agent associated with a particular secondary storage device may instruct the secondary storage device to perform an information management operation. For instance a media agent may instruct a tape library to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or retrieve data to or from that media e.g. for the purpose of restoring the data to a client computing device . As another example a secondary storage device may include an array of hard disk drives or solid state drives organized in a RAID configuration and the media agent may forward a logical unit number LUN and other appropriate information to the array which uses the received information to execute the desired storage operation. The media agent may communicate with a secondary storage device via a suitable communications link such as a SCSI or Fiber Channel link.

As shown each media agent may maintain an associated media agent database . The media agent database may be stored in a disk or other storage device not shown that is local to the secondary storage computing device on which the media agent resides. In other cases the media agent database is stored remotely from the secondary storage computing device .

The media agent database can include among other things an index including data generated during secondary copy operations and other storage or information management operations. The index provides a media agent or other component with a fast and efficient mechanism for locating secondary copies or other data stored in the secondary storage devices . In some cases the index does not form a part of and is instead separate from the media agent database .

A media agent index or other data structure associated with the particular media agent may include information about the stored data. For instance for each secondary copy the index may include metadata such as a list of the data objects e.g. files subdirectories database objects mailbox objects etc. a path to the secondary copy on the corresponding secondary storage device location information indicating where the data objects are stored in the secondary storage device when the data objects were created or modified etc. Thus the index includes metadata associated with the secondary copies that is readily available for use in storage operations and other activities without having to be first retrieved from the secondary storage device . In yet further embodiments some or all of the data in the index may instead or additionally be stored along with the data in a secondary storage device e.g. with a copy of the index . In some embodiments the secondary storage devices can include sufficient information to perform a bare metal restore where the operating system of a failed client computing device or other restore target is automatically rebuilt as part of a restore operation.

Because the index maintained in the database may operate as a cache it can also be referred to as an index cache. In such cases information stored in the index cache typically comprises data that reflects certain particulars about storage operations that have occurred relatively recently. After some triggering event such as after a certain period of time elapses or the index cache reaches a particular size the index cache may be copied or migrated to a secondary storage device s . This information may need to be retrieved and uploaded back into the index cache or otherwise restored to a media agent to facilitate retrieval of data from the secondary storage device s . In some embodiments the cached information may include format or containerization information related to archives or other files stored on the storage device s . In this manner the index cache allows for accelerated restores.

In some alternative embodiments the media agent generally acts as a coordinator or facilitator of storage operations between client computing devices and corresponding secondary storage devices but does not actually write the data to the secondary storage device . For instance the storage manager or the media agent may instruct a client computing device and secondary storage device to communicate with one another directly. In such a case the client computing device transmits the data directly or via one or more intermediary components to the secondary storage device according to the received instructions and vice versa. In some such cases the media agent may still receive process and or maintain metadata related to the storage operations. Moreover in these embodiments the payload data can flow through the media agent for the purposes of populating the index cache maintained in the media agent database but not for writing to the secondary storage device .

The media agent and or other components such as the storage manager may in some cases incorporate additional functionality such as data classification content indexing deduplication encryption compression and the like. Further details regarding these and other functions are described below.

As described certain functions of the information management system can be distributed amongst various physical and or logical components in the system. For instance one or more of the storage manager data agents and media agents may reside on computing devices that are physically separate from one another. This architecture can provide a number of benefits.

For instance hardware and software design choices for each distributed component can be targeted to suit its particular function. The secondary computing devices on which the media agents reside can be tailored for interaction with associated secondary storage devices and provide fast index cache operation among other specific tasks. Similarly the client computing device s can be selected to effectively service the applications residing thereon in order to efficiently produce and store primary data .

Moreover in some cases one or more of the individual components in the information management system can be distributed to multiple separate computing devices. As one example for large file systems where the amount of data stored in the storage management database is relatively large the management database may be migrated to or otherwise reside on a specialized database server e.g. an SQL server separate from a server that implements the other functions of the storage manager . This configuration can provide added protection because the database can be protected with standard database utilities e.g. SQL log shipping or database replication independent from other functions of the storage manager . The database can be efficiently replicated to a remote site for use in the event of a disaster or other data loss incident at the primary site. Or the database can be replicated to another computing device within the same site such as to a higher performance machine in the event that a storage manager host device can no longer service the needs of a growing information management system .

The distributed architecture also provides both scalability and efficient component utilization. shows an embodiment of the information management system including a plurality of client computing devices and associated data agents as well as a plurality of secondary storage computing devices and associated media agents .

Additional components can be added or subtracted based on the evolving needs of the information management system . For instance depending on where bottlenecks are identified administrators can add additional client computing devices secondary storage devices and corresponding media agents and or secondary storage devices . Moreover where multiple fungible components are available load balancing can be implemented to dynamically address identified bottlenecks. As an example the storage manager may dynamically select which media agents and or secondary storage devices to use for storage operations based on a processing load analysis of the media agents and or secondary storage devices respectively.

Moreover each client computing device in some embodiments can communicate with among other components any of the media agents e.g. as directed by the storage manager . And each media agent may be able to communicate with among other components any of the secondary storage devices e.g. as directed by the storage manager . Thus operations can be routed to the secondary storage devices in a dynamic and highly flexible manner to provide load balancing failover and the like. Further examples of scalable systems capable of dynamic storage operations and of systems capable of performing load balancing and fail over are provided in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

In alternative configurations certain components are not distributed and may instead reside and execute on the same computing device. For example in some embodiments one or more data agents and the storage manager reside on the same client computing device . In another embodiment one or more data agents and one or more media agents reside on a single computing device.

In order to protect and leverage stored data the information management system can be configured to perform a variety of information management operations. As will be described these operations can generally include secondary copy and other data movement operations processing and data manipulation operations analysis reporting and management operations.

Data movement operations according to certain embodiments are generally operations that involve the copying or migration of data e.g. payload data between different locations in the information management system in an original native and or one or more different formats. For example data movement operations can include operations in which stored data is copied migrated or otherwise transferred from one or more first storage devices to one or more second storage devices such as from primary storage device s to secondary storage device s from secondary storage device s to different secondary storage device s from secondary storage devices to primary storage devices or from primary storage device s to different primary storage device s .

Data movement operations can include by way of example backup operations archive operations information lifecycle management operations such as hierarchical storage management operations replication operations e.g. continuous data replication operations snapshot operations deduplication or single instancing operations auxiliary copy operations and the like. As will be discussed some of these operations involve the copying migration or other movement of data without actually creating multiple distinct copies. Nonetheless some or all of these operations are referred to as copy operations for simplicity.

A backup operation creates a copy of a version of data e.g. one or more files or other data units in primary data at a particular point in time. Each subsequent backup copy may be maintained independently of the first. Further a backup copy in some embodiments is generally stored in a form that is different than the native format e.g. a backup format. This can be in contrast to the version in primary data from which the backup copy is derived and which may instead be stored in a native format of the source application s . In various cases backup copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original application format. For example a backup copy may be stored in a backup format that facilitates compression and or efficient long term storage.

Backup copies can have relatively long retention periods as compared to primary data and may be stored on media with slower retrieval times than primary data and certain other types of secondary copies . On the other hand backups may have relatively shorter retention periods than some other types of secondary copies such as archive copies described below . Backups may sometimes be stored at on offsite location.

Backup operations can include full synthetic or incremental backups. A full backup in some embodiments is generally a complete image of the data to be protected. However because full backup copies can consume a relatively large amount of storage it can be useful to use a full backup copy as a baseline and only store changes relative to the full backup copy for subsequent backup copies.

For instance a differential backup operation or cumulative incremental backup operation tracks and stores changes that have occurred since the last full backup. Differential backups can grow quickly in size but can provide relatively efficient restore times because a restore can be completed in some cases using only the full backup copy and the latest differential copy.

An incremental backup operation generally tracks and stores changes since the most recent backup copy of any type which can greatly reduce storage utilization. In some cases however restore times can be relatively long in comparison to full or differential backups because completing a restore operation may involve accessing a full backup in addition to multiple incremental backups.

Any of the above types of backup operations can be at the volume level file level or block level. Volume level backup operations generally involve the copying of a data volume e.g. a logical disk or partition as a whole. In a file level backup the information management system may generally track changes to individual files at the file level and includes copies of files in the backup copy. In the case of a block level backup files are broken into constituent blocks and changes are tracked at the block level. Upon restore the information management system reassembles the blocks into files in a transparent fashion.

Far less data may actually be transferred and copied to the secondary storage devices during a file level copy than a volume level copy. Likewise a block level copy may involve the transfer of less data than a file level copy resulting in faster execution times. However restoring a relatively higher granularity copy can result in longer restore times. For instance when restoring a block level copy the process of locating constituent blocks can sometimes result in longer restore times as compared to file level backups. Similar to backup operations the other types of secondary copy operations described herein can also be implemented at either the volume level file level or block level.

Because backup operations generally involve maintaining a version of the copied data in primary data and also maintaining backup copies in secondary storage device s they can consume significant storage capacity. To help reduce storage consumption an archive operation according to certain embodiments creates a secondary copy by both copying and removing source data. Or seen another way archive operations can involve moving some or all of the source data to the archive destination. Thus data satisfying criteria for removal e.g. data of a threshold age or size from the source copy may be removed from source storage. Archive copies are sometimes stored in an archive format or other non native application format. The source data may be primary data or a secondary copy depending on the situation. As with backup copies archive copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original application format.

In addition archive copies may be retained for relatively long periods of time e.g. years and in some cases are never deleted. Archive copies are generally retained for longer periods of time than backup copies for example. In certain embodiments archive copies may be made and kept for extended periods in order to meet compliance regulations.

Moreover when primary data is archived in some cases the archived primary data or a portion thereof is deleted when creating the archive copy. Thus archiving can serve the purpose of freeing up space in the primary storage device s . Similarly when a secondary copy is archived the secondary copy may be deleted and an archive copy can therefore serve the purpose of freeing up space in secondary storage device s . In contrast source copies often remain intact when creating backup copies. Examples of compatible data archiving operations are provided in U.S. Pat. No. 7 107 298 entitled SYSTEM AND METHOD FOR ARCHIVING OBJECTS IN AN INFORMATION STORE which is incorporated by reference herein.

Snapshot operations can provide a relatively lightweight efficient mechanism for protecting data. From an end user viewpoint a snapshot may be thought of as an instant image of the primary data at a given point in time. In one embodiment a snapshot may generally capture the directory structure of an object in primary data such as a file or volume or other data set at a particular moment in time and may also preserve file attributes and contents. A snapshot in some cases is created relatively quickly e.g. substantially instantly using a minimum amount of file space but may still function as a conventional file system backup.

A hardware snapshot operation can be a snapshot operation where a target storage device e.g. a primary storage device or a secondary storage device performs the snapshot operation in a self contained fashion substantially independently using hardware firmware and or software residing on the storage device itself. For instance the storage device may be capable of performing snapshot operations upon request generally without intervention or oversight from any of the other components in the information management system . In this manner using hardware snapshots can off load processing involved in creating and management from other components in the system .

A software snapshot operation on the other hand can be a snapshot operation in which one or more other components in the system e.g. the client computing devices media agents etc. implement a software layer that manages the snapshot operation via interaction with the target storage device. For instance the component implementing the snapshot management software layer may derive a set of pointers and or data that represents the snapshot. The snapshot management software layer may then transmit the same to the target storage device along with appropriate instructions for writing the snapshot.

Some types of snapshots do not actually create another physical copy of all the data as it existed at the particular point in time but may simply create pointers that are able to map files and directories to specific memory locations e.g. disk blocks where the data resides as it existed at the particular point in time. For example a snapshot copy may include a set of pointers derived from the file system or an application. In some other cases the snapshot may created at the block level such as where creation of the snapshot occurs without awareness of the file system. Each pointer points to a respective stored data block so collectively the set of pointers reflect the storage location and state of the data object e.g. file s or volume s or data set s at a particular point in time when the snapshot copy was created.

In some embodiments once a snapshot has been taken subsequent changes to the file system typically do not overwrite the blocks in use at the time of the snapshot. Therefore the initial snapshot may use only a small amount of disk space needed to record a mapping or other data structure representing or otherwise tracking the blocks that correspond to the current state of the file system. Additional disk space is usually required only when files and directories are actually modified later. Furthermore when files are modified typically only the pointers which map to blocks are copied not the blocks themselves. In some embodiments for example in the case of copy on write snapshots when a block changes in primary storage the block is copied to secondary storage or cached in primary storage before the block is overwritten in primary storage. The snapshot mapping of file system data is also updated to reflect the changed block s at that particular point in time. In some other cases a snapshot includes a full physical copy of all or substantially all of the data represented by the snapshot. Further examples of snapshot operations are provided in U.S. Pat. No. 7 529 782 which is incorporated by reference herein.

A snapshot copy in many cases can be made quickly and without significantly impacting primary computing resources because large amounts of data need not be copied or moved. In some embodiments a snapshot may exist as a virtual file system parallel to the actual file system. Users in some cases gain read only access to the record of files and directories of the snapshot. By electing to restore primary data from a snapshot taken at a given point in time users may also return the current file system to the state of the file system that existed when the snapshot was taken.

Another type of secondary copy operation is a replication operation. Some types of secondary copies are used to periodically capture images of primary data at particular points in time e.g. backups archives and snapshots . However it can also be useful for recovery purposes to protect primary data in a more continuous fashion by replicating the primary data substantially as changes occur. In some cases a replication copy can be a mirror copy for instance where changes made to primary data are mirrored or substantially immediately copied to another location e.g. to secondary storage device s . By copying each write operation to the replication copy two storage systems are kept synchronized or substantially synchronized so that they are virtually identical at approximately the same time. Where entire disk volumes are mirrored however mirroring can require significant amount of storage space and utilizes a large amount of processing resources.

According to some embodiments storage operations are performed on replicated data that represents a recoverable state or known good state of a particular application running on the source system. For instance in certain embodiments known good replication copies may be viewed as copies of primary data . This feature allows the system to directly access copy restore backup or otherwise manipulate the replication copies as if the data was the live primary data . This can reduce access time storage utilization and impact on source applications among other benefits.

Based on known good state information the information management system can replicate sections of application data that represent a recoverable state rather than rote copying of blocks of data. Examples of compatible replication operations e.g. continuous data replication are provided in U.S. Pat. No. 7 617 262 which is incorporated by reference herein.

Another type of data movement operation is deduplication or single instance storage which is useful to reduce the amount of data within the system. For instance some or all of the above described secondary storage operations can involve deduplication in some fashion. New data is read broken down into portions e.g. sub file level blocks files etc. of a selected granularity compared with blocks that are already stored and only the new blocks are stored. Blocks that already exist are represented as pointers to the already stored data.

In order to streamline the comparison process the information management system may calculate and or store signatures e.g. hashes corresponding to the individual data blocks in a database and compare the hashes instead of comparing entire data blocks. In some cases only a single instance of each element is stored and deduplication operations may therefore be referred to interchangeably as single instancing operations. Depending on the implementation however deduplication or single instancing operations can store more than one instance of certain data blocks but nonetheless significantly reduce data redundancy.

Depending on the embodiment deduplication blocks can be of fixed or variable length. Using variable length blocks can provide enhanced deduplication by responding to changes in the data stream but can involve complex processing. In some cases the information management system utilizes a technique for dynamically aligning deduplication blocks e.g. fixed length blocks based on changing content in the data stream as described in U.S. Pat. Pub. No. 2012 0084269 which is incorporated by reference herein.

The information management system can perform deduplication in a variety of manners at a variety of locations in the information management system . For instance in some embodiments the information management system implements target side deduplication by deduplicating data e.g. secondary copies stored in the secondary storage devices . In some such cases the media agents are generally configured to manage the deduplication process. For instance one or more of the media agents maintain a corresponding deduplication database that stores deduplication information e.g. datablock signatures . Examples of such a configuration are provided in U.S. Pat. Pub. No. 2012 0150826 which is incorporated by reference herein. Instead of or in combination with target side deduplication deduplication can also be performed on the source side or client side e.g. to reduce the amount of traffic between the media agents and the client computing device s and or reduce redundant data stored in the primary storage devices . Examples of such deduplication techniques are provided in U.S. Pat. Pub. No. 2012 0150818 which is incorporated by reference herein.

In some embodiments files and other data over their lifetime move from more expensive quick access storage to less expensive slower access storage. Operations associated with moving data through various tiers of storage are sometimes referred to as information lifecycle management ILM operations.

One type of ILM operation is a hierarchical storage management HSM operation. A HSM operation is generally an operation for automatically moving data between classes of storage devices such as between high cost and low cost storage devices. For instance an HSM operation may involve movement of data from primary storage devices to secondary storage devices or between tiers of secondary storage devices . With each tier the storage devices may be progressively relatively cheaper have relatively slower access restore times etc. For example movement of data between tiers may occur as data becomes less important over time.

In some embodiments an HSM operation is similar to an archive operation in that creating an HSM copy may though not always involve deleting some of the source data e.g. according to one or more criteria related to the source data. For example an HSM copy may include data from primary data or a secondary copy that is larger than a given size threshold or older than a given age threshold and that is stored in a backup format.

Often and unlike some types of archive copies HSM data that is removed or aged from the source copy is replaced by a logical reference pointer or stub. The reference pointer or stub can be stored in the primary storage device or other source storage device such as a secondary storage device to replace the deleted data in primary data or other source copy and to point to or otherwise indicate the new location in a secondary storage device .

According to one example files are generally moved between higher and lower cost storage depending on how often the files are accessed. When a user requests access to the HSM data that has been removed or migrated the information management system uses the stub to locate the data and often make recovery of the data appear transparent even though the HSM data may be stored at a location different from the remaining source data. In this manner the data appears to the user e.g. in file system browsing windows and the like as if it still resides in the source location e.g. in a primary storage device . The stub may also include some metadata associated with the corresponding data so that a file system and or application can provide some information about the data object and or a limited functionality version e.g. a preview of the data object.

An HSM copy may be stored in a format other than the native application format e.g. where the data is compressed encrypted deduplicated and or otherwise modified from the original application format . In some cases copies which involve the removal of data from source storage and the maintenance of stub or other logical reference information on source storage may be referred to generally as on line archive copies . On the other hand copies which involve the removal of data from source storage without the maintenance of stub or other logical reference information on source storage may be referred to as off line archive copies . Examples of HSM and ILM techniques are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

An auxiliary copy is generally a copy operation in which a copy is created of an existing secondary copy . For instance an initial or primary secondary copy may be generated using or otherwise be derived from primary data or other data residing in the secondary storage subsystem whereas an auxiliary copy is generated from the initial secondary copy . Auxiliary copies can be used to create additional standby copies of data and may reside on different secondary storage devices than initial secondary copies . Thus auxiliary copies can be used for recovery purposes if initial secondary copies become unavailable. Exemplary compatible auxiliary copy techniques are described in further detail in U.S. Pat. No. 8 230 195 which is incorporated by reference herein.

The information management system may also perform disaster recovery operations that make or retain disaster recovery copies often as secondary high availability disk copies. The information management system may create secondary disk copies and store the copies at disaster recovery locations using auxiliary copy or replication operations such as continuous data replication technologies. Depending on the particular data protection goals disaster recovery locations can be remote from the client computing devices and primary storage devices remote from some or all of the secondary storage devices or both.

Data analysis reporting and management operations can be different than data movement operations in that they do not necessarily involve the copying migration or other transfer of data e.g. primary data or secondary copies between different locations in the system. For instance data analysis operations may involve processing e.g. offline processing or modification of already stored primary data and or secondary copies . However in some embodiments data analysis operations are performed in conjunction with data movement operations. Some data analysis operations include content indexing operations and classification operations which can be useful in leveraging the data under management to provide enhanced search and other features. Other data analysis operations such as compression and encryption can provide data reduction and security benefits respectively.

In some embodiments the information management system analyzes and indexes characteristics content and metadata associated with the data stored within the primary data and or secondary copies providing enhanced search capabilities for data discovery and other purposes. The content indexing can be used to identify files or other data objects having pre defined content e.g. user defined keywords or phrases metadata e.g. email metadata such as to from cc bcc attachment name received time etc. .

The information management system generally organizes and catalogues the results in a content index which may be stored within the media agent database for example. The content index can also include the storage locations of or pointer references to the indexed data in the primary data or secondary copies as appropriate. The results may also be stored in the form of a content index database or otherwise elsewhere in the information management system e.g. in the primary storage devices or in the secondary storage device . Such index data provides the storage manager or another component with an efficient mechanism for locating primary data and or secondary copies of data objects that match particular criteria.

For instance search criteria can be specified by a user through user interface of the storage manager . In some cases the information management system analyzes data and or metadata in secondary copies to create an off line content index without significantly impacting the performance of the client computing devices . Depending on the embodiment the system can also implement on line content indexing e.g. of primary data . Examples of compatible content indexing techniques are provided in U.S. Pat. No. 8 170 995 which is incorporated by reference herein.

In order to leverage the data stored in the information management system to perform these and other tasks one or more components can be configured to scan data and or associated metadata for classification purposes to populate a database of information which can be referred to as a metabase . Such scanned classified data and or metadata may be included in a separate database and or on a separate storage device from primary data and or secondary copies such that operations related to the database do not significantly impact performance on other components in the information management system .

In other cases the database s may be stored along with primary data and or secondary copies . Files or other data objects can be associated with user specified identifiers e.g. tag entries in the media agent or other indices to facilitate searches of stored data objects. Among a number of other benefits the metabase can also allow efficient automatic identification of files or other data objects to associate with secondary copy or other information management operations e.g. in lieu of scanning an entire file system . Examples of compatible metabases and data classification operations are provided in U.S. Pat. Nos. 8 229 954 and 7 747 579 which are incorporated by reference herein.

The information management system in some cases is configured to process data e.g. files or other data objects secondary copies etc. according to an appropriate encryption algorithm e.g. Blowfish Advanced Encryption Standard AES Triple Data Encryption Standard 3 DES etc. to limit access and provide data security in the information management system .

The information management system in some cases encrypts the data at the client level such that the client computing devices e.g. the data agents encrypt the data prior to forwarding the data to other components e.g. before sending the data media agents during a secondary copy operation. In such cases the client computing device may maintain or have access to an encryption key or passphrase for decrypting the data upon restore. Encryption can also occur when creating copies of secondary copies e.g. when creating auxiliary copies or archive copies. In yet further embodiments the secondary storage devices can implement built in high performance hardware encryption.

Certain embodiments leverage the integrated ubiquitous nature of the information management system to provide useful system wide management and reporting functions. Examples of some compatible management and reporting techniques are provided in U.S. Pat. No. 7 343 453 entitled HIERARCHICAL SYSTEMS AND METHODS FOR PROVIDING A UNIFIED VIEW OF STORAGE INFORMATION which is incorporated by reference herein.

Operations management can generally include monitoring and managing the health and performance of information management system by without limitation performing error tracking generating granular storage performance metrics e.g. job success failure information deduplication efficiency etc. generating storage modeling and costing information and the like.

As an example a storage manager or other component in the information management system may analyze traffic patterns and suggest or automatically route data via a particular route to e.g. certain facilitate storage and minimize congestion. In some embodiments the system can generate predictions relating to storage operations or storage operation information. Such predictions described may be based on a trending analysis that may be used to predict various network operations or use of network resources such as network traffic levels storage media use use of bandwidth of communication links use of media agent components etc. Further examples of traffic analysis trend analysis prediction generation and the like are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some configurations a master storage manager may track the status of a set of associated storage operation cells in a hierarchy of information management cells such as the status of jobs system components system resources and other items by communicating with storage managers or other components in the respective storage operation cells. Moreover the master storage manager may track the status of its associated storage operation cells and associated information management operations by receiving periodic status updates from the storage managers or other components in the respective cells regarding jobs system components system resources and other items. In some embodiments a master storage manager may store status information and other information regarding its associated storage operation cells and other system information in its index or other location .

The master storage manager or other component in the system may also determine whether a storage related criteria or other criteria is satisfied and perform an action or trigger event e.g. data migration in response to the criteria being satisfied such as where a storage threshold is met for a particular volume or where inadequate protection exists for certain data. For instance in some embodiments the system uses data from one or more storage operation cells to advise users of risks or indicates actions that can be used to mitigate or otherwise minimize these risks and in some embodiments dynamically takes action to mitigate or minimize these risks. For example an information management policy may specify certain requirements e.g. that a storage device should maintain a certain amount of free space that secondary copies should occur at a particular interval that data should be aged and migrated to other storage after a particular period that data on a secondary volume should always have a certain level of availability and be able to be restored within a given time period that data on a secondary volume may be mirrored or otherwise migrated to a specified number of other volumes etc. . If a risk condition or other criteria is triggered the system can notify the user of these conditions and may suggest or automatically implement an action to mitigate or otherwise address the condition or minimize risk. For example the system may indicate that data from a primary copy should be migrated to a secondary storage device to free space on the primary storage device . Examples of the use of risk factors and other triggering criteria are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments the system may also determine whether a metric or other indication satisfies a particular storage criteria and if so perform an action. For example as previously described a storage policy or other definition might indicate that a storage manager should initiate a particular action if a storage metric or other indication drops below or otherwise fails to satisfy a specified criteria such as a threshold of data protection. Examples of such metrics are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments risk factors may be quantified into certain measurable service or risk levels for ease of comprehension. For example certain applications and associated data may be considered to be more important by an enterprise than other data and services. Financial compliance data for example may be of greater importance than marketing materials etc. Network administrators may assign priorities or weights to certain data or applications corresponding to its importance priority value . The level of compliance with the storage operations specified for these applications may also be assigned a certain value. Thus the health impact and overall importance of a service on an enterprise may be determined for example by measuring the compliance value and calculating the product of the priority value and the compliance value to determine the service level and comparing it to certain operational thresholds to determine if the operation is being performed within a specified data protection service level. Further examples of the service level determination are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The system may additionally calculate data costing and data availability associated with information management operation cells according to an embodiment of the invention. For instance data received from the cell may be used in conjunction with hardware related information and other information about network elements to generate indications of costs associated with storage of particular data in the system or the availability of particular data in the system. In general components in the system are identified and associated information is obtained dynamically or manually . Characteristics or metrics associated with the network elements may be identified and associated with that component element for further use generating an indication of storage cost or data availability. Exemplary information generated could include how fast a particular department is using up available storage space how long data would take to recover over a particular network pathway from a particular secondary storage device costs over time etc. Moreover in some embodiments such information may be used to determine or predict the overall cost associated with the storage of certain information. The cost associated with hosting a certain application may be based at least in part on the type of media on which the data resides. Storage devices may be assigned to a particular cost category which is indicative of the cost of storing information on that device. Further examples of costing techniques are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

Any of the above types of information e.g. information related to trending predictions job cell or component status risk service level costing etc. can generally be provided to users via the user interface in a single integrated view or console. The console may support a reporting capability that allows for the generation of a variety of reports which may be tailored to a particular aspect of information management. Report types may include scheduling event management media management and data aging. Available reports may also include backup history data aging history auxiliary copy history job history library and drive media in library restore history and storage policy. Such reports may be specified and created at a certain point in time as a network analysis forecasting or provisioning tool. Integrated reports may also be generated that illustrate storage and performance metrics risks and storage costing information. Moreover users may create their own reports based on specific needs.

The integrated user interface can include an option to show a virtual view of the system that graphically depicts the various components in the system using appropriate icons. As one example the user interface may provide a graphical depiction of one or more primary storage devices the secondary storage devices data agents and or media agents and their relationship to one another in the information management system . The operations management functionality can facilitate planning and decision making. For example in some embodiments a user may view the status of some or all jobs as well as the status of each component of the information management system . Users may then plan and make decisions based on this data. For instance a user may view high level information regarding storage operations for the information management system such as job status component status resource status e.g. network pathways etc. and other information. The user may also drill down or use other means to obtain more detailed information regarding a particular component job or the like.

Further examples of some reporting techniques and associated interfaces providing an integrated view of an information management system are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The information management system can also be configured to perform system wide e discovery operations in some embodiments. In general e discovery operations provide a unified collection and search capability for data in the system such as data stored in the secondary storage devices e.g. backups archives or other secondary copies . For example the information management system may construct and maintain a virtual repository for data stored in the information management system that is integrated across source applications different storage device types etc. According to some embodiments e discovery utilizes other techniques described herein such as data classification and or content indexing.

As indicated previously an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with secondary copy or other information management operations.

One type of information management policy is a storage policy. According to certain embodiments a storage policy generally comprises a data structure or other information source that defines or includes information sufficient to determine a set of preferences or other criteria for performing information management operations. Storage policies can include one or more of the following items 1 what data will be associated with the storage policy 2 a destination to which the data will be stored 3 datapath information specifying how the data will be communicated to the destination 4 the type of storage operation to be performed and 5 retention information specifying how long the data will be retained at the destination.

As an illustrative example data associated with a storage policy can be logically organized into groups. In some cases these logical groupings can be referred to as sub clients . A sub client may represent static or dynamic associations of portions of a data volume. Sub clients may represent mutually exclusive portions. Thus in certain embodiments a portion of data may be given a label and the association is stored as a static entity in an index database or other storage location.

Sub clients may also be used as an effective administrative scheme of organizing data according to data type department within the enterprise storage preferences or the like. Depending on the configuration sub clients can correspond to files folders virtual machines databases etc. In one exemplary scenario an administrator may find it preferable to separate e mail data from financial data using two different sub clients.

A storage policy can define where data is stored by specifying a target or destination storage device or group of storage devices . For instance where the secondary storage device includes a group of disk libraries the storage policy may specify a particular disk library for storing the sub clients associated with the policy. As another example where the secondary storage devices include one or more tape libraries the storage policy may specify a particular tape library for storing the sub clients associated with the storage policy and may also specify a drive pool and a tape pool defining a group of tape drives and a group of tapes respectively for use in storing the sub client data. While information in the storage policy can be statically assigned in some cases some or all of the information in the storage policy can also be dynamically determined based on criteria which can be set forth in the storage policy. For instance based on such criteria a particular destination storage device s or other parameter of the storage policy may be determined based on characteristics associated with the data involved in a particular storage operation device availability e.g. availability of a secondary storage device or a media agent network status and conditions e.g. identified bottlenecks user credentials and the like 

Datapath information can also be included in the storage policy. For instance the storage policy may specify network pathways and components to utilize when moving the data to the destination storage device s . In some embodiments the storage policy specifies one or more media agents for conveying data e.g. one or more sub clients associated with the storage policy between the source e.g. one or more host client computing devices and destination e.g. a particular target secondary storage device .

A storage policy can also specify the type s of operations associated with the storage policy such as a backup archive snapshot auxiliary copy or the like. Retention information can specify how long the data will be kept depending on organizational needs e.g. a number of days months years etc. 

The information management policies may also include one or more scheduling policies specifying when and how often to perform operations. Scheduling information may specify with what frequency e.g. hourly weekly daily event based etc. or under what triggering conditions secondary copy or other information management operations will take place. Scheduling policies in some cases are associated with particular components such as particular logical groupings of data associated with a storage policy e.g. a sub client client computing device and the like. In one configuration a separate scheduling policy is maintained for particular logical groupings of data on a client computing device . The scheduling policy specifies that those logical groupings are to be moved to secondary storage devices every hour according to storage policies associated with the respective sub clients.

When adding a new client computing device administrators can manually configure information management policies and or other settings e.g. via the user interface . However this can be an involved process resulting in delays and it may be desirable to begin data protecting operations quickly.

Thus in some embodiments the information management system automatically applies a default configuration to client computing device . As one example when one or more data agent s are installed on one or more client computing devices the installation script may register the client computing device with the storage manager which in turn applies the default configuration to the new client computing device . In this manner data protection operations can begin substantially immediately. The default configuration can include a default storage policy for example and can specify any appropriate information sufficient to begin data protection operations. This can include a type of data protection operation scheduling information a target secondary storage device data path information e.g. a particular media agent and the like.

Other types of information management policies are possible. For instance the information management policies can also include one or more audit or security policies. An audit policy is a set of preferences rules and or criteria that protect sensitive data in the information management system . For example an audit policy may define sensitive objects as files or objects that contain particular keywords e.g. confidential or privileged and or are associated with particular keywords e.g. in metadata or particular flags e.g. in metadata identifying a document or email as personal confidential etc. .

An audit policy may further specify rules for handling sensitive objects. As an example an audit policy may require that a reviewer approve the transfer of any sensitive objects to a cloud storage site and that if approval is denied for a particular sensitive object the sensitive object should be transferred to a local storage device instead. To facilitate this approval the audit policy may further specify how a secondary storage computing device or other system component should notify a reviewer that a sensitive object is slated for transfer.

In some implementations the information management policies may include one or more provisioning policies. A provisioning policy can include a set of preferences priorities rules and or criteria that specify how clients or groups thereof may utilize system resources such as available storage on cloud storage and or network bandwidth. A provisioning policy specifies for example data quotas for particular client computing devices e.g. a number of gigabytes that can be stored monthly quarterly or annually . The storage manager or other components may enforce the provisioning policy. For instance the media agents may enforce the policy when transferring data to secondary storage devices . If a client computing device exceeds a quota a budget for the client computing device or associated department is adjusted accordingly or an alert may trigger.

While the above types of information management policies have been described as separate policies one or more of these can be generally combined into a single information management policy . For instance a storage policy may also include or otherwise be associated with one or more scheduling audit or provisioning policies. Moreover while storage policies are typically associated with moving and storing data other policies may be associated with other types of information management operations. The following is a non exhaustive list of items the information management policies may specify 

Policies can additionally specify or depend on a variety of historical or current criteria that may be used to determine which rules to apply to a particular data object system component or information management operation such as 

As indicated by the dashed box the second media agent B and the tape library B are off site and may therefore be remotely located from the other components in the information management system e.g. in a different city office building etc. . In this manner information stored on the tape library B may provide protection in the event of a disaster or other failure.

The file system sub client and its associated primary data A in certain embodiments generally comprise information generated by the file system and or operating system of the client computing device and can include for example file system data e.g. regular files file tables mount points etc. operating system data e.g. registries event logs etc. and the like. The e mail sub client on the other hand and its associated primary data B include data generated by an e mail client application operating on the client computing device and can include mailbox information folder information emails attachments associated database information and the like. As described above the sub clients can be logical containers and the data included in the corresponding primary data A B may or may not be stored contiguously.

The exemplary storage policy A includes backup copy preferences or rule set disaster recovery copy preferences rule set and compliance copy preferences or rule set . The backup copy rule set specifies that it is associated with a file system sub client and an email sub client . Each of these sub clients are associated with the particular client computing device . The backup copy rule set further specifies that the backup operation will be written to the disk library A and designates a particular media agent A to convey the data to the disk library A. Finally the backup copy rule set specifies that backup copies created according to the rule set are scheduled to be generated on an hourly basis and to be retained for 30 days. In some other embodiments scheduling information is not included in the storage policy A and is instead specified by a separate scheduling policy.

The disaster recovery copy rule set is associated with the same two sub clients . However the disaster recovery copy rule set is associated with the tape library B unlike the backup copy rule set . Moreover the disaster recovery copy rule set specifies that a different media agent B than the media agent A associated with the backup copy rule set will be used to convey the data to the tape library B. As indicated disaster recovery copies created according to the rule set will be retained for 60 days and will be generated on a daily basis. Disaster recovery copies generated according to the disaster recovery copy rule set can provide protection in the event of a disaster or other data loss event that would affect the backup copy A maintained on the disk library A.

The compliance copy rule set is only associated with the email sub client and not the file system sub client . Compliance copies generated according to the compliance copy rule set will therefore not include primary data A from the file system sub client . For instance the organization may be under an obligation to store maintain copies of email data for a particular period of time e.g. 10 years to comply with state or federal regulations while similar regulations do not apply to the file system data. The compliance copy rule set is associated with the same tape library B and media agent B as the disaster recovery copy rule set although a different storage device or media agent could be used in other embodiments. Finally the compliance copy rule set specifies that copies generated under the compliance copy rule set will be retained for 10 years and will be generated on a quarterly basis.

At step the storage manager initiates a backup operation according to the backup copy rule set . For instance a scheduling service running on the storage manager accesses scheduling information from the backup copy rule set or a separate scheduling policy associated with the client computing device and initiates a backup copy operation on an hourly basis. Thus at the scheduled time slot the storage manager sends instructions to the client computing device to begin the backup operation.

At step the file system data agent A and the email data agent B residing on the client computing device respond to the instructions received from the storage manager by accessing and processing the primary data A B involved in the copy operation from the primary storage device . Because the operation is a backup copy operation the data agent s A B may format the data into a backup format or otherwise process the data.

At step the client computing device communicates the retrieved processed data to the first media agent A as directed by the storage manager according to the backup copy rule set . In some other embodiments the information management system may implement a load balancing availability based or other appropriate algorithm to select from the available set of media agents A B. Regardless of the manner the media agent A is selected the storage manager may further keep a record in the storage manager database of the association between the selected media agent A and the client computing device and or between the selected media agent A and the backup copy A.

The target media agent A receives the data from the client computing device and at step conveys the data to the disk library A to create the backup copy A again at the direction of the storage manager and according to the backup copy rule set . The secondary storage device A can be selected in other ways. For instance the media agent A may have a dedicated association with a particular secondary storage device s or the storage manager or media agent A may select from a plurality of secondary storage devices e.g. according to availability using one of the techniques described in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

The media agent A can also update its index to include data and or metadata related to the backup copy A such as information indicating where the backup copy A resides on the disk library A data and metadata for cache retrieval etc. After the 30 day retention period expires the storage manager instructs the media agent A to delete the backup copy A from the disk library A. The storage manager may similarly update its index to include information relating to the storage operation such as information relating to the type of storage operation a physical location associated with one or more copies created by the storage operation the time the storage operation was performed status information relating to the storage operation the components involved in the storage operation and the like. In some cases the storage manager may update its index to include some or all of the information stored in the index of the media agent A.

At step the storage manager initiates the creation of a disaster recovery copy according to the disaster recovery copy rule set . For instance at step based on instructions received from the storage manager at step the specified media agent B retrieves the most recent backup copy A from the disk library A.

At step again at the direction of the storage manager and as specified in the disaster recovery copy rule set the media agent B uses the retrieved data to create a disaster recovery copy B on the tape library B. In some cases the disaster recovery copy is a direct mirror copy of the backup copy A and remains in the backup format. In other embodiments the disaster recovery copy C may be generated in some other manner such as by using the primary data A from the storage device as source data. The disaster recovery copy operation is initiated once a day and the disaster recovery copies A are deleted after 60 days.

At step the storage manager initiates the creation of a compliance copy C according to the compliance copy rule set . For instance the storage manager instructs the media agent B to create the compliance copy C on the tape library B at step as specified in the compliance copy rule set . In the example the compliance copy C is generated using the disaster recovery copy B. In other embodiments the compliance copy C is instead generated using either the primary data B corresponding to the email sub client or using the backup copy A from the disk library A as source data. As specified in the illustrated example compliance copies C are created quarterly and are deleted after ten years.

While not shown in at some later point in time a restore operation can be initiated involving one or more of the secondary copies A B C. As one example a user may manually initiate a restore of the backup copy A by interacting with the user interface of the storage manager . The storage manager then accesses data in its index and or the respective storage policy A associated with the selected backup copy A to identify the appropriate media agent A and or secondary storage device A.

In other cases a media agent may be selected for use in the restore operation based on a load balancing algorithm an availability based algorithm or other criteria. The selected media agent A retrieves the data from the disk library A. For instance the media agent A may access its index to identify a location of the backup copy A on the disk library A or may access location information residing on the disk A itself.

When the backup copy A was recently created or accessed the media agent A accesses a cached version of the backup copy A residing in the media agent index without having to access the disk library A for some or all of the data. Once it has retrieved the backup copy A the media agent A communicates the data to the source client computing device . Upon receipt the file system data agent A and the email data agent B may unpackage e.g. restore from a backup format to the native application format the data in the backup copy A and restore the unpackaged data to the primary storage device .

The formatting and structure of secondary copies can vary depending on the embodiment. In some cases secondary copies are formatted as a series of logical data units or chunks e.g. 512 MB 1 GB 2 GB 4 GB or 8 GB chunks . This can facilitate efficient communication and writing to secondary storage devices e.g. according to resource availability. For example a single secondary copy may be written on a chunk by chunk basis to a single secondary storage device or across multiple secondary storage devices . In some cases users can select different chunk sizes e.g. to improve throughput to tape storage devices.

Generally each chunk can include a header and a payload. The payload can include files or other data units or subsets thereof included in the chunk whereas the chunk header generally includes metadata relating to the chunk some or all of which may be derived from the payload. For example during a secondary copy operation the media agent storage manager or other component may divide the associated files into chunks and generate headers for each chunk by processing the constituent files.

The headers can include a variety of information such as file identifier s volume s offset s or other information associated with the payload data items a chunk sequence number etc. Importantly in addition to being stored with the secondary copy on the secondary storage device the chunk headers can also be stored to the index of the associated media agent s and or the storage manager index . This is useful in some cases for providing faster processing of secondary copies during restores or other operations. In some cases once a chunk is successfully transferred to a secondary storage device the secondary storage device returns an indication of receipt e.g. to the media agent and or storage manager which may update their respective indexes accordingly. During restore chunks may be processed e.g. by the media agent according to the information in the chunk header to reassemble the files.

Data can also be communicated within the information management system in data channels that connect the client computing devices to the secondary storage devices . These data channels can be referred to as data streams and multiple data streams can be employed to parallelize an information management operation improving data transfer rate among providing other advantages. Example data formatting techniques including techniques involving data streaming chunking and the use of other data structures in creating copies e.g. secondary copies are described in U.S. Pat. Nos. 7 315 923 and 8 156 086 and U.S. Pat. Pub. No. 2010 0299490 each of which is incorporated by reference herein.

Referring to the data stream has the stream header and stream payload aligned into multiple data blocks. In this example the data blocks are of size 64 Kb. The first two stream header and stream payload pairs comprise a first data block of size 64 Kb. The first stream header indicates that the length of the succeeding stream payload is 63 Kb and that it is the start of a data block. The next stream header indicates that the succeeding stream payload has a length of 1 Kb and that it is not the start of a new data block. Immediately following stream payload are an identifier header and identifier data pair. The identifier header includes an indication that the succeeding identifier data includes the identifier for the immediately previous data block. The identifier data includes the identifier that the data agent generated for the data block. The data stream also includes other stream header and stream payload pairs which may be for SI data and or for non SI data.

As an example the data structures illustrated in may have been created as a result of two storage operations involving two clients . For example a first storage operation on a first client could result in the creation of the first chunk folder and a second storage operation on a second client could result in the creation of the second chunk folder . The container files in the first chunk folder would contain the blocks of SI data of the first client . If the two clients have substantially similar data the second storage operation on the data of the second client would result in the media agent storing primarily links to the data blocks of the first client that are already stored in the container files . Accordingly while a first storage operation may result in storing nearly all of the data subject to the storage operation subsequent storage operations involving similar data may result in substantial data storage space savings because links to already stored data blocks can be stored instead of additional instances of data blocks.

If the operating system of the secondary storage computing device on which the media agent resides supports sparse files then when the media agent creates container files it can create them as sparse files. As previously described a sparse file is type of file that may include empty space e.g. a sparse file may have real data within it such as at the beginning of the file and or at the end of the file but may also have empty space in it that is not storing actual data such as a contiguous range of bytes all having a value of zero . Having the container files be sparse files allows the media agent to free up space in the container files when blocks of data in the container files no longer need to be stored on the storage devices. In some examples the media agent creates a new container file when a container file either includes 100 blocks of data or when the size of the container file exceeds 50 Mb. In other examples the media agent creates a new container file when a container file satisfies other criteria e.g. it contains from approximately 100 to approximately 1000 blocks or when its size exceeds approximately 50 Mb to 1 Gb .

In some cases a file on which a storage operation is performed may comprise a large number of data blocks. For example a 100 Mb file may be comprised in 400 data blocks of size 256 Kb. If such a file is to be stored its data blocks may span more than one container file or even more than one chunk folder. As another example a database file of 20 Gb may comprise over 40 000 data blocks of size 512 Kb. If such a database file is to be stored its data blocks will likely span multiple container files multiple chunk folders and potentially multiple volume folders. As described in detail herein restoring such files may thus requiring accessing multiple container files chunk folders and or volume folders to obtain the requisite data blocks.

Examples of systems and methods will now be described for using client side signature to improve data storage operations. While described in some cases with respect to certain types of operations e.g. backup and restore operations for the purposes of illustration the deduplication and collaborative data movement techniques described herein may be equally compatible with other types of storage operations including archive snapshot and replication operations to name a few. Descriptions of embodiments of these and other types storage operations compatible with embodiments described are provided above.

The client side signature repository can include a data store containing data block signatures corresponding to data blocks that form the primary data residing in the primary storage subsystem as well as a processing module or agent which generally maintains the data store and can perform functions associated therewith e.g. signature comparison . As shown in the illustrated embodiment of the client side signature repository can form part of or reside on the client . For instance the data store of the client side signature repository forms part of the primary storage device of the client and the agent of the client side signature repository executes on one or more processors of the client .

As will be described further with respect to in certain other embodiments the client side signature repository can be separate from the client s . For instance data store of the client side signature repository is implemented using one or more data stores that are separate from the primary storage devices of the clients . Similarly in other embodiments the agent of the client side signature repository can be implemented on a computing device that is separate from the client . In such cases the computing device on which the processing module of the client side repository and or the storage device on which the data store of the client side repository are implemented on can communicate with the client s via a network e.g. a LAN . In some embodiments each client communicates with a client side signature repository that is dedicated to that particular client . In certain other embodiments multiple clients e.g. some or all of the clients communicate with a common shared client side signature repository . In yet further embodiments each client includes a client side signature repository to track the signatures stored thereon and the system also includes a client side signature repository that is common to multiple clients e.g. some or all of the clients .

The signature generator may be a software module that is generally responsible for generating signatures of the data blocks residing in the primary storage subsystem e.g. primary storage devices associated with the clients . The signatures generated by the signature generator can be used to uniquely identify the data blocks within the client or determine when two or more data blocks are identical. The signatures can be generated using a variety of techniques such as a hash function as will be described in greater detail below with reference to .

In some embodiments the client side signature repository is in relatively close physical proximity to the clients as compared to the secondary storage subsystem and communicates with the clients using a different network topology than the topology used for communication between the components in the primary storage subsystem and the components in the secondary storage subsystem . For example in an embodiment the clients communicate with the client side signature repository over a LAN and communicate with components in the secondary storage subsystem e.g. the media agents and or the secondary storage devices over a WAN. In certain embodiments communication between the clients and the client side signature repository takes place at a higher data rate and or with lower latency than communication between the clients and the components in the secondary storage subsystem.

Referring again to the client side signature repository can be used by the system to store signature information relating to data blocks or primary data units of other granularity stored in the primary storage subsystem . Furthermore depending on the embodiment the client side signature repository can store the corresponding signatures of all or substantially all of the data blocks found in the primary storage subsystem . For instance where a client side signature repository is dedicated to a particular client the client side signature repository retains signatures corresponding to all or substantially all e.g. at least 90 percent at least 95 percent or at least 99 percent of the data blocks in the primary storage device associated with that client . Where the client side signature repository is shared the client side signature repository retains signatures corresponding to all or substantially all of the data blocks in the data stores of all the clients that share the client side signature repository . Accordingly the client side signature repository can function as an index or global map of the data blocks that form the primary data. In other cases the client side signature repository operates as a cache and signatures are deleted from the client side signature repository on a first in first out or other some other basis.

The system can generate or update the signature information in the client side signature repository according to any appropriate schedule. As one example the system can generate or update the client side signature repository each time primary data is written or modified in a primary storage device associated with a client . For example when data is written to or modified in a primary storage device the system can generate a signature for the constituent data blocks.

In some embodiments the client side signature repository stores a single record for each unique signature. Incoming generated signatures are compared with signatures already stored in the client side signature repository . If a signature is already located in the client side signature repository the record for that signature is updated with the information corresponding to the newly written or modified data block. If the signature is not already located in the client side signature repository a new record is generated for that data block. Techniques for organizing the client side signature repository are described in further detail with respect to .

In some embodiments the storage system uses the client side signature repository to minimize or otherwise reduce the amount of data that is transmitted to secondary storage during backup or other secondary copy operations. Some examples of secondary copy operations that utilize client side signature information are described herein e.g. with respect to .

Additionally in some embodiments the system improves the efficiency of restore operations to a target client by using the client side signature repository to determine which data blocks in a restore data set are already located in primary storage. Further examples of restore operations that utilize client side signature information are described herein e.g. with respect to .

The data store can be stored on one or more storage devices of any of the types described herein e.g. solid state memory disk drives or other magnetic media or the like .

While the signature information in the data store can be organized in a variety of ways in certain embodiments the signature information is arranged as a plurality of signature blocks as shown in . Each signature block corresponds to a unique or substantially unique data block signature and corresponding data block.

Each signature block in some embodiments includes information relating to copies of the corresponding data blocks stored in a subset of one or more of the clients . In other embodiments each signature blocks includes information relating to all of the copies of the corresponding data block that are stored in the primary storage subsystem e.g. across all of the primary storage devices .

Signature blocks stored in the signature repository can include various pieces of information or metadata corresponding to the copies of the corresponding data block that reside in the primary storage subsystem . For example each signature block can include a signature field including the data block signature a number of instances field that identifies the number of instances or copies of the data block that exist on a particular client group of multiple clients or within the entire primary storage subsystem depending on the embodiment a copy operation flag and entries each corresponding to a different instance or copy of the data block. The entries can further include a location information field an access priority information field and an age information field . These various types of information and fields will be described below in greater detail.

Each signature block can include additional or less information as desired. Moreover in some other embodiments the client side signature repository can be organized differently. For instance while the illustrated embodiment generally groups entries for the data block instances into a separate signature block for each unique signature other embodiments may instead organize the entries according to some other scheme. For instance entries may be grouped based on the client that stores the corresponding data block entries based on the time the data block instance was added to the primary storage subsystem or any other appropriate scheme. In some such cases where there are multiple copies of a particular data block stored within the primary storage subsystem the client side signature repository may maintain multiple copies of the corresponding unique signature one for each copy of the corresponding data block.

Generally speaking the data block signatures are used as a reference to identify corresponding data blocks and or determine whether the corresponding data blocks are already stored in the primary storage subsystem . The signature in the signature field can be derived by performing a hash or other function on the corresponding data block. In some embodiments the signature is generated by the signature generator of the client . However the signature can be generated by a variety of different components depending on the implementation such as the agent of the client side signature repository the storage manager the media agent and or a module executing on a primary storage device . In some embodiments signatures are derived each time data is written to or modified on a primary storage device . In other cases signatures are generated in association with a backup restore or other storage operation or based on some other appropriate schedule. In an embodiment the SHA 512 algorithm is used e.g. on a 64 kB or 128 kB data block to derive the signature . The resulting signature is 256 bytes and can be used for deduplication purposes. Hash functions other than SHA 512 can be used on the data blocks to derive the signature as well as other non hash functions. In addition different sized signatures may be used. Additionally the secondary storage subsystem can also include signature information in some embodiments. For instance signatures for backed up archived or otherwise copied data blocks residing in the secondary storage devices are maintained in the secondary storage subsystem in certain embodiments.

The instance ID field can include an identifier for a particular instance i.e. copy of the data block stored in the primary storage subsystem e.g. in a primary storage device associated with a particular client or subset of clients. In some embodiments the instance ID field includes sourcing order information.

The location information field can include information specifying the location of the data block instance in the primary storage subsystem . For instance where the signature block includes information relating to a data block for which multiple separate instances are stored in the primary storage subsystem in association with multiple clients the location information can include a client ID indicating the client where the instance of the data block is located. Thus the client ID field can be useful where the system includes a shared client side signature repository that maintains signature information for multiple clients . In some cases such as where each client maintains its own client side signature repository and there is not a shared client side signature repository the client ID field may not be included. The location information can additionally include physical and or logical memory address information usable to access the instance of the data block within the primary storage device or other data store where the instance of the data block is stored.

In addition to providing location information each entry can provide access and priority information in an access priority field . The access priority information can be used to rank or prioritize the different instances of the data block for sourcing purposes. For instance where multiple copies of a particular data block are stored in the primary storage subsystem e.g. in data stores for multiple clients the access priority information can be used by the system to determine which copy of the data block to access for a storage operation e.g. a backup or restore operation or other purpose. Such techniques are described in greater detail below with reference to . The access priority field can include information regarding characteristics of the data store and or client where the copy of the data block is located. For example the access priority field can include information regarding the following for the data store that stores the copy of the data block and or the associated client without limitation type and age information speed or performance information e.g. hardware capability information response time type or version information for installed software or firmware storage capacity client operating system information processing load e.g. current or average processing load etc. Some of these types of information can be used to determine a relative access speed for retrieving a copy of a particular instance of a data block.

The access priority field can also include information regarding the network associated with the data store. For example the access priority field can include information regarding the network bandwidth and speed between the data store and various target clients within the storage network. The access priority field can also provide information regarding downtime or scheduled maintenance of the data store etc. The data store information and network information can be used to determine an expected overall response time of a particular client.

The access priority field can also include a priority level ranking of the client identified by the client ID. A higher priority level ranking can indicate that it is less desirable to source data from a particular client because of the relative importance of applications executing thereon the user of the client or other reasons. The information can also be used to generate the sourcing rank for each entry as described in greater detail below with reference to . In some cases information other than the information in the access priority field can be used in determining which instance of the data block to source such as the information in the instance ID field .

Each entry can also include age information in an age field . The age field can be used to determine how long a particular instance of a data block has existed in the primary storage subsystem . For example it may be generally preferable to use newer instances instead of older entries or vice versa. The age field in one embodiment includes an age ID which is an alphanumeric indication of when the entry was added or revised relative to other data blocks. For instance the age ID may be a unique identifier for the particular data block or instance of the data block or may be a unique identifier associated with a particular storage operation such as a backup backup catalog or other storage operation associated with the entry.

In some instances the client side signature repository can determine that a particular entry is a new entry if the age field indicates that it was added to the client side signature repository after a previous backup operation. Further if the particular entry is the first entry for a signature block the system in certain embodiments can determine that the data block and corresponding signature are new to the primary storage subsystem and therefore do not yet reside in the secondary storage subsystem . If the system determines that the entry resided in the client side signature repository prior to a previous secondary copy operation that involved the data block corresponding to the entry the system in some embodiments can determine that the instance of the data block corresponding to the entry has already been copied to the secondary storage subsystem e.g. has already been involved in a back up .

Because the clients are frequently generating and modifying primary data stored in the primary storage devices it can in some cases be beneficial to track whether a signature block has been modified since a previous backup. This can be done using a copy operation flag . The copy operation flag can indicate the time and or date of a previous copy operation whether the signature block has been modified since a previous copy operation whether the data block corresponding to the signature block has been part of a previous copy data set and stored in the secondary storage subsystem e.g. the signature block is not a new signature block or any combination thereof. For example during a copy operation the system can identify signature blocks that have been modified since a previous backup by referring to the copy operation flag . By identifying signature blocks that have been modified the system can identify data corresponding to the modified signature blocks that has changed and or data that may be unique to the primary storage subsystem e.g. does not reside or is unlikely to reside in the secondary storage subsystem . Thus in some embodiments rather than reading the data in a copy data set to identify data that may be unique to the primary storage subsystem and or has changed the system can refer to the signature information in the client side signature repository corresponding to the data in the copy data set. In this manner the system can reduce the amount of data being read and time spent to identify modified data and can more quickly identify which data might be unique to primary storage e.g. for performing a deduplicated secondary copy.

Further the copy operation flag can indicate that the signature block has been modified since a previous copy operation if the signature block is either new or has been revised since the previous copy operation. For example after a copy operation is completed the copy operation flag can be reset. Thereafter if the signature block is edited the copy operation flag can be set indicating that the signature block may contain information that has not yet been involved in a copy operation. Furthermore each time a new signature block is generated the copy operation flag can can be set indicating that the signature block and corresponding data block have not been involved in a copy operation.

The signature block and or corresponding entries can contain fewer or more pieces of information than what is illustrated in the examples shown in . For example the signature block can include date data such as the date when the signature block was created or modified etc. In some embodiments the entries include file identifiers that indicate to which file an entry belongs. The file identifiers can be located in the location field in another field or in a separate field. Furthermore the entries can include organizational data that indicates where the data block corresponding to the entry is located with respect to other data blocks in a particular file etc.

At block a request is received to perform a secondary copy operation for a data set associated with a first client computing device of plurality of client computing devices . For instance a storage policy implemented on a storage manager may trigger a secondary copy operation on a scheduled basis or a user can trigger a secondary copy operation via interaction with a user interface. In one embodiment the storage manager forwards an instruction to perform the secondary copy to a data agent executing on the first client computing device . The copy data set can generally be any grouping of data associated with the first client and can include one or more files directories or the like. In one embodiment the client data set includes one or more sub clients as described herein.

At block the storage system generates signatures for the individual data blocks in the copy data set. Depending on the embodiment the signatures can be generated by different entities in the storage system . For example in one embodiment a signature generator on the first client generates the signatures locally. As another example signatures can be generated by the client side signature repository which can be separate from and or remote from the client s .

At block the agent of the client side signature repository or other appropriate component consults the signature repository to locate data blocks in the copy data set within the primary storage subsystem . For instance while the first client may store actual copies of all data blocks in the copy data set it may be useful to source the data blocks from data stores associated with other ones of the clients for the purposes of creating and transmitting the secondary copy as described previously.

At block the storage system determines which client s to source the individual data blocks from to compile the copy data set. For example the agent may access information in the client side signature repository associated with copies of the individual data blocks that reside in the primary storage subsystem . Such information can include any type of information sufficient to select particular copies of the data block to source and in some embodiments includes information organized along the lines of the signature blocks of such as the access priority information and or age information. Where there are multiple copies of a data block within the primary storage subsystem the agent may compare the accessed information to a sourcing policy or other criteria to determine which copy to source for inclusion in the copy data set. Additional techniques for determining which copy of the data block to source for the purposes of compiling a copy or restore data set are described herein e.g. with respect to .

At block the data blocks in the copy set are sourced from the clients as determined at block . Depending on the sourcing determinations a first subset of one or more data blocks may be sourced from the first client and the remainder of the data blocks may be sourced from one or more second clients . Depending on the sourcing determination for any particular copy operation a variety of scenarios are possible. For instance in some cases all data blocks may be sourced from the first client . Conversely all of the data blocks may in other scenarios be sourced from one or more clients other than the first client . In order to access the data blocks within the primary storage subsystem the agent of of the client side signature repository may refer to other information in the signature repository in addition to the signature such as the location information of the signature block described with respect to .

At block the accessed data blocks are forwarded from the primary storage subsystem to the secondary storage subsystem . For example all of the sourced data blocks in the data set may be forwarded to the agent of the client side signature repository or to some other central or shared location within the primary storage subsystem for forwarding to a media agent . In some cases a data agent or other entity receives the data blocks and compiles the data blocks into a packaged e.g. formatted copy data set before sending to the media agent . In other embodiments each source client forwards the datablocks it is responsible for directly to the secondary storage subsystem .

At block the media agent or other appropriate component within the secondary storage subsystem creates the secondary copy by conveying the data to one or more secondary storage devices for storage.

A collaborative copy operation or other storage operation can be initiated in many different ways such as at predetermined time intervals upon client request upon storage manager request etc. For example a storage policy associated with the client B may dictate that a copy operation occur daily weekly monthly or at some other predetermined time interval. Alternatively the copy operation can occur based on manual selection by a system administrator via user interface.

In the illustrated example signatures are generally generated locally by the individual clients . Thus as part of the current copy operation the signature generator of the subject client B generates signatures for data blocks in the copy data set 1A . The client forwards 1B the generated signatures to the client side signature repository . The agent not shown of the client side signature repository in some cases may update the information in the signature repository as appropriate e.g. to add entries corresponding to the data blocks in the copy data set. In other cases the entries were added previously such as at the time the data was originally written to the primary storage device of the target client B.

Before the current copy operation the client side signature repository already included entries corresponding to some or all of the data blocks previously stored in the primary storage devices associated with the set of clients . Although in the illustrated embodiment the client side signature repository is shared by multiple clients in some embodiments each of the clients is associated with its own client side signature repository . Furthermore in certain other embodiments the client side signature repository generates the data block signatures instead of the client signature generators .

The client side repository processes 2 the received signatures in the copy data set to determine where to source the data blocks from in the primary storage subsystem for the purposes of sending to the secondary storage subsystem i.e. to carry out the copy operation. In some cases such as where the copy operation is a deduplicated copy operation the client side signature repository 2 processes the signatures information related to the data blocks in the copy data set to identify for transmission to the secondary storage subsystem only those the data blocks that are unique to the primary storage that don t exist in the secondary subsystem .

The client side repository or other appropriate entity such as a data agent of the client B in some embodiments transmits 3 a copy data set index to the media agent . As will be described in greater detail herein the copy data set index may be a data structure including metadata forming a map of the secondary copy specifying the data blocks in the copy as well as their relative organization. In the illustrated example one or more of the clients forward copies of the data blocks that form the copy data set to the secondary storage subsystem . For instance once the client side repository determines which clients the individual copies of the data blocks in the copy data set are going to be sourced from the client side repository or other appropriate component such as the storage manager instructs those source clients to forward copies of those data blocks to the media agent . In other embodiments the data blocks that form the copy data set are accumulated at a central location e.g. at the client side repository and the entire copy data set is sent as a group to the media agent .

As shown the target client B as well as one or more non target clients A C may be selected as sources for at least some of the data blocks. The client side signature repository may instruct the respective clients 4A 4B 4C to forward copies of the data blocks that are going to be sourced from each respective client to the secondary storage subsystem . In turn the target client B forwards 5A the requested data blocks to the media agent or other appropriate component in the secondary storage subsystem . Where at least some of the data blocks are to be sourced from clients A C other than the target client B e.g. based on a data sourcing policy those data blocks are forwarded 5B 5C by the non target clients A C to the media agent . Example data sourcing policies will be described in greater detail below with reference to . In this manner resource utilization in the primary storage subsystem can be allocated as desired. For instance the amount of processing performed by the target client B and or the amount of downtime of the target client B to perform the copy operation can be reduced.

The media agent 6 processes the data received from the primary storage subsystem . To process the data the media agent can store the copy data set index or other map of the files and data within the secondary copy. Once the media agent has processed the received data the media agent creates 7 the secondary copy by writing the copy data set to the storage device s .

One skilled in the art will appreciate that all of the components of storage system are not necessary to perform the copy operation and that the processes described herein can be implemented in any number of ways without departing from the spirit and scope of the description. For example one or more of the clients the storage manager or another appropriate component may perform the functions described in association with the client side signature repository.

At block the storage system tracks storage operations associated with one or more of the clients . The storage operations may include but are not limited to the generation of a new file the modification of an existing file the deletion of an existing file the saving of a file etc. For instance the clients may track their own storage operations or central shared component such as the agent of the client side signature repository may track the storage operations for multiple ones of the clients .

At block the storage system identifies data that has been modified within a primary storage device as a result of tracked primary storage operation e.g. a newly written or modified file . For instance to identify the data that has been modified the storage system can detect or otherwise track or identify each write to the data store. In some instances each time data is written to or deleted from the primary storage device the storage system records the location of the data that has been modified within the primary storage device as well as additional information. Furthermore the system can identify the data blocks corresponding to modified data. For example a file may be formed from six data blocks. A user may edit and save the file. Upon saving the file the first five data blocks remain the same but the sixth data block changes and an additional four data blocks can be added for a total of ten data blocks . The storage system can identify the file and or the data blocks that have changed together as a group or can identify the data blocks separately on an individual basis. Furthermore the system can track the storage location of the data blocks that make up the file.

At block the storage system generates signatures for the data blocks that make up the identified data. As discussed in greater detail above with reference to the signature can be generated using a hash function or some other function capable of uniquely identifying the data blocks or substantially uniquely identifying the data blocks. In some embodiments the storage system can generate the signature for the data blocks during or otherwise in association with the storage operation. In certain embodiments the storage system generates the signature for the data blocks after the storage operation has been completed. In other embodiments signatures for newly added or modified data can be generated at some other time e.g. based on a preference included in a storage policy. For example a storage policy can specify a frequency with which signatures should be generated for data blocks corresponding to modified data. Or a storage policy can specify that signatures are generated once a particular application has been closed once a client computer is to be shut down once a day or some other interval as desired. In one embodiment signatures are generated local to each client by the signature generator residing on the client . In other cases signatures are generated by a shared component such as the agent of the client side signature repository .

At block the storage system updates the client side signature repository . For instance the agent of the client side signature repository or other appropriate component can determine if 1 a generated signature is new to the client side signature repository or if instead 2 the client side signature repository already includes the signature. For instance where the client side signature repository is organized using signature blocks if the client side signature repository includes the generated signature it will already include a signature block for that signature and the agent can revise the existing signature block to add an entry corresponding to the newly added data block instance.

In some instances such as when a data block has been overwritten or deleted the agent can remove an entry from a signature block . Also if a generated signature is not already included in the client side signature repository the client side signature repository can generate a new signature block containing the new signature as well as an entry with additional information regarding the data block used to generate the signature as discussed in greater detail above with reference to . As mentioned previously the client side signature repository can include signatures corresponding to data blocks found in one client or multiple clients.

Furthermore if the storage system determines that a data block has been removed and the entry being deleted is the last entry of a signature block in certain embodiments the storage system can remove the signature block from the client side signature repository . In this way the client side signature repository accurately represents the data currently residing in the primary storage subsystem .

One skilled in the art will appreciate that routine can include fewer more or different blocks than those illustrated in . For example the storage system can update the client side signature repository based on a storage policy a user request identified storage operations etc. The storage policy can indicate a predefined schedule when the client side signature repository should be updated. For example the client side signature repository can be updated every five minutes every hour at the end of each day or business day at the end of each week etc. In some embodiments the client side signature repository is updated each time the client computer is to be shut down. Moreover the described steps may be performed differently in some embodiments. For instance the agent of the client side signature repository may decide to retain a signature block in some cases even where the only copy of the corresponding data block in the primary storage subsystem is deleted. In this way the client side signature repository can additionally track data blocks that have previously resided in primary storage. In such embodiments the signature block can include a flag indicating that no copies of the corresponding data block currently reside in the primary storage subsystem . For example the indicator can simply be that the instances field indicates zero entries. In certain embodiments the agent of the client side signature repository determines whether or not a signature block with zero entries should be deleted based on whether or not an instance of the corresponding data block was previously copied to the secondary storage subsystem e.g. as part of a backup operation . If the data block has been previously copied to the secondary storage subsystem the client side signature repository may decide not to delete the signature block whereas if the client side signature repository determines that the data block was not previously copied to the secondary storage subsystem the client side signature repository may decide to delete the signature block or vice versa as desired.

The client B 1A generates signatures of data blocks corresponding to data that has been modified within the primary storage device and 1B updates the client side repository with the generated signatures. Although in the illustrated embodiment there is one client side signature repository for three clients in some embodiments each of the clients is associated with its own client side signature repository . Furthermore in certain embodiments the client side signature repository generates the signatures for the one or more clients with which it is associated and those clients do not generate the signatures locally.

In an embodiment the system initiates a copy operation for a copy data set e.g. of one or more files file system volumes etc. stored within a primary storage device of a target client B. Upon initiating the copy operation the client side signature repository 2 processes the copy operation request and identifies data blocks to send to the secondary storage subsystem as part of the copy operation.

For instance the client side signature repository can be used to carry out a deduplicated copy operation where only those data blocks unique to the primary storage subsystem i.e. do not already reside in the secondary storage subsystem that are part of the copy data set are sent to the secondary storage subsystem .

The copy data set for any of the embodiments described herein can vary depending on the type and scope of the copy operation being performed. For example the copy operation can be a full backup or incremental backup of either the entire data store or only portions thereof e.g. one or more files folders etc. . In a full backup of the entire primary storage device the copy data set can include the entire data set found in the primary storage device associated with the client B. In an incremental backup of the primary storage device the copy data set can include all of the data in the primary storage device that has changed since a previous backup. Similarly for a full or incremental backup of one or more files the copy data set can include all the data in the one or more files or the data in the one or more files that has changed since a previous backup respectively.

As mentioned the client side signature repository can identify the data blocks unique to primary storage that correspond to the copy data set. In this example the data blocks unique to primary storage refer to the data blocks stored in the storage device associated with the client B but not found in the secondary storage subsystem . However in some embodiments the data blocks unique to the primary storage refers to data blocks that are in any of the clients but that do not already reside in the secondary storage subsystem . For example if the copy operation request is for full or incremental backup of a single file of the client B the client side signature repository identifies the data blocks unique to primary storage that form at least a portion of the single file.

In some embodiments to identify the data blocks that are unique to primary storage the client side signature repository identifies signature blocks that have been modified since a previous copy operation. For example the client side signature repository identifies signature blocks with a copy operation flag set to indicate that the signature block has been modified since a previous copy operation.

In certain embodiments the client B or the media agent identify the data blocks that are unique to primary storage by reviewing signature block information. For example in a full backup of the entire data store associated with the client B the client B or the media agent can identify the data blocks that are unique to primary storage using the copy operation flag or by comparing a creation date of a signature block with the date of the last copy operation.

Once the data blocks that are unique to primary storage have been identified the client side signature repository can can in some embodiments 3 provide a copy data set index to the secondary storage subsystem e.g. to the media agent . The copy data set index can provide information regarding the data blocks corresponding to the data associated with the copy operation as well as a map indicating the relationship between the different data blocks. One embodiment of a copy data set index is described in greater detail below with reference to . In some embodiments the copy data set index is generated and communicated to the secondary storage subsystem e.g. to the media agent by the client whose data set is being copied rather than the client side signature repository . In other embodiments the media agent may generate the copy data set index.

The client B 4 provides the identified data blocks e.g. those that are unique to primary storage subsystem to the secondary storage subsystem . In some embodiments the client provides the data blocks to the client side signature repository which in turn provides the data blocks to secondary storage. In certain embodiments the client side signature repository requests the client s to provide the identified data blocks to the media agent . In some cases the media agent requests the identified data blocks from the client B.

Upon receiving the data blocks from the primary storage subsystem the media agent 5 processes the data blocks as part of the copy operation. For instance the media agent may update its index in view of the copy operation as described herein. In some cases the media agent stores the copy data set index for future use. The media agent then conveys the copy data set to the storage device for storage thereon.

One skilled in the art will appreciate that all of the components of storage system are not necessary to perform the copy operation and that the processes described herein can be implemented in any number of ways without departing from the spirit and scope of the description. In one embodiment the client side signature repository client or media agent can identify some or all of the unique data blocks in the primary storage subsystem that aren t already in the secondary storage subsystem regardless of whether the unique data blocks form part of a copy data set. The unique data blocks can then be sent to the media agent e.g. on a scheduled basis or as part of a copy operation along with data blocks that are associated with the copy operation for storage in the secondary storage subsystem . In this way the secondary storage subsystem can accumulate copies of data blocks that exist in the primary storage subsystem e.g. before certain data blocks form part of a copy data set. This technique can take advantage of available bandwidth to simplify future deduplicated copy operations for example.

At block the storage system receives a secondary copy operation request associated with a copy data set e.g. a subclient of a target client B such as a request to perform a copy operation. Because the copy operation is deduplicated at block the storage system identifies data blocks involved with the copy operation that are unique to primary storage subsystem and don t already exist in the secondary storage subsystem .

For the identified data blocks that are unique to primary storage the storage system determines at block consults the client signature repository to determine whether copies of the data block the data block exist in the data stores of any non target clients and if so determines whether the data block will be sourced from another client or will instead be sourced from the target client B. To identify whether the data block is located in another client the storage system can analyze the signature information e.g. signature blocks corresponding to the data blocks in the copy data set. For example if a signature block indicates that there are multiple instances of a data block corresponding to a particular signature in field includes multiple entries and or includes multiple Client IDs in the location field the storage system can determine that multiple copies of the data blocks exist in primary storage. Or where a shared client side signature repository is not used and each client instead maintains its own separate client side signature repository the storage system can access the client side signature repositories of the individual clients to identify whether any non target clients have a copy of the data block.

Upon determining that a data block is to be sourced from a non target client at block the storage system at block identifies the location of the data block in the primary storage device s associated with that client . To identify the location of the data block in the other non target client the storage system can review the signature blocks corresponding to the data blocks in the copy data set. For example the storage system can review the entry corresponding to the data block located in the other client . The entry can include the location information of the data block within the other client .

On the other hand if the storage system determines that the data block will be sourced from the target client e.g. because that is the only copy of the data block the storage system identifies the location of the data block in the primary storage device associated with the target client at block . Sourcing policies for determining which clients to source data blocks from are described in greater detail herein e.g. below with reference to .

Once the location of the identified data block that is unique to primary storage has been identified the storage system performs the copy operation at block . The data block is retrieved from the identified location in the primary storage device associated with the determined source client . In addition the signature information such as the corresponding signature block or portion thereof can be retrieved from the client side signature repository and sent to the secondary storage subsystem .

While described with respect to a single data block for the purposes of clarity the retrieved data data blocks and or signature information can be sent from their respective locations either individually or bundled together. Moreover signatures corresponding to the data blocks that are not unique to the primary storage subsystem already exist in the secondary storage subsystem are generally sent to the secondary storage subsystem instead of copies of the data blocks themselves. The secondary storage subsystem utilizes the signature to identify the pre existing copy of the data block in the secondary storage device s for use in creating the secondary copy.

One skilled in the art will appreciate that routine can include fewer more or different blocks than those illustrated in . Moreover a number of alternative embodiments are possible. For instance in some cases the secondary copy operation is not a deduplicated copy operation and copies of all of the data blocks in the copy data set are forwarded to the secondary storage subsystem instead of just copies of those data blocks that are unique to the primary storage subsystem .

At block the storage system receives a request to restore a restore data set to a target client B. At block the storage system receives signatures of data blocks in the restore data set. The storage system can receive the signatures of the data blocks to be restored from the media agent for example. In other cases the signatures can be obtained from the target client B the component requesting the restore the storage manager and or the client side signature repository .

For each data block to be restored the storage system determines whether the data block is located in the primary storage subsystem at block . For instance as described in greater detail above with reference to the storage system can determine whether the data block is located in the primary storage subsystem by reviewing the signature blocks stored in the client side signature repository .

In some embodiments if a signature corresponding to a data block to be restored is located in the client side signature repository or if an existing signature block has at least one entry the storage system determines that the data block is located in the primary storage subsystem .

Upon determining that the data block is located in the primary storage subsystem the storage system identifies the location of the data block as illustrated at block . For instance copies of the data block may reside in the target client B and or any of the other non target clients . described below illustrate examples of restore operations where data is sourced from only the target client B and where data is collaboratively sourced from multiple ones of the clients .

On the other hand if the information in the signature repository indicates that the data block is not located in the primary storage subsystem the storage system can request and receive the data block from the secondary storage subsystem at blocks and respectively.

Once the data blocks located in the primary storage subsystem have been identified and the data blocks not located in the primary storage subsystem have been received at the primary storage subsystem from the secondary storage subsystem the storage system can restore the data as illustrated in block . One skilled in the art will appreciate that routine can include fewer more or different blocks than those illustrated in .

In an embodiment the storage manager or other appropriate component initiates a restore by instructing the media agent a restore data set be restored to a target client B. The restore request can be initiated by one or more of the components of the storage system . Such a restore may initiate upon the occurrence of some predetermined criteria such as a re boot after a power outage information store error or some other condition that causes a client system to go off line addition of a new client or the like. In one embodiment the data from one client system B can be restored to another client A C.

In response to the restore request the client side signature repository 1 receives the signatures of the data blocks in the restore data set. The data blocks involved in the restore operation can include the data blocks that are to be restored to a target client B. Although the illustrated embodiment shows the client side signature repository receiving the signatures from the media agent the client side signature repository can receive the signatures from various components of the storage system . For example the client side signature repository can receive the signatures from the component initiating the restore request from the client B or can generate the signatures itself.

In some embodiments a component of the storage system includes an index of the restore data set which can include the signatures corresponding to the data blocks in the restore data set as well as a mapping of the organization of the restore data set. The index can be a copy data set index that is generated during the secondary copy operation for example or can be derived therefrom. In certain other embodiments the client side signature repository already has a copy of the index and the index is therefore not sent from the secondary storage subsystem to the primary storage subsystem . For instance the client side repository in some cases retains copies of indexes associated with secondary copy operations for later use in the restore operation.

Once the client side signature repository receives the signatures of the data blocks in the restore data set the client side signature repository 2 identifies data blocks in the restore data set that are already located in the primary storage subsystem . In the illustrated embodiment the client side signature repository identifies copies of the data blocks in the restore data set that already reside in the target client B. However in other embodiments the system can implement a collaborative restore operation in which data blocks are sourced from non target clients instead of or in addition to the target client .

For data blocks for which copies do not reside in the primary storage subsystem e.g. where no corresponding signature was found in the client side signature repository or where the information in the client side repository otherwise indicates the data block is not in primary storage the client side signature repository or other appropriate component 3 requests copies of the data blocks from the media agent . For instance the client side signature repository can request the data blocks individually from the media agent and or can bundle multiple data block requests together. In turn the media agent can 4 request and receive the data blocks from the storage device and the client side signature repository can 5 receive the data blocks from the media agent . Similar to the client side signature repository the media agent can send the data blocks individually or bundle multiple data blocks together.

Once the client side signature repository has identified the location of the data blocks within primary storage and received the data blocks not in primary storage from secondary storage the client side signature repository can 6 forward information to the client that is sufficient to perform the restore operation. For instance references e.g. location information to the data blocks in the restore set that already reside in the target client B are forwarded to the target client B along with copies of the data blocks received from the secondary storage subsystem . In addition to the location information of the data blocks stored in the primary storage device and the data blocks received from secondary storage subsystem the client side signature repository can transmit a restore data set index that provides information regarding how the data blocks in the restore data set are organized. The target client B can use the received location information received data block copies and or received restore data set index to create the restored data set.

One skilled in the art will appreciate that all of the components of storage system are not necessary to store and restore data blocks and that the processes described herein can be implemented in any number of ways without departing from the spirit and scope of the description. For example in an embodiment the client side signature repository does not perform any of the processing steps. In such an embodiment the client B or media agent can query the client side signature repository for the signatures corresponding to the data blocks involved in the restore operation. The client B or media agent can then identify the data blocks stored in primary storage as described previously. In some embodiments the client side signature repository can simply transmit the signatures of the data blocks not located in primary storage to the media agent without requesting the data blocks in return. In response the media agent can transmit the data blocks not found in primary storage directly to the client B for restore via a network bypassing the client side signature repository .

As described in greater detail above with reference to the storage system initiates a restore request and the CSR 1 receives signatures of data blocks in a restore data set that are to be restored to a target client and 2 identifies data blocks in the restore data set that are located in primary storage. In this embodiment the data blocks located in primary storage refers to all of the data blocks located in any of the clients A B C or other clients for which the client side signature repository stores signature blocks. However as mentioned previously in some embodiments the data blocks located in primary storage can refer to only the data blocks located in a single client.

As discussed in greater detail above with reference to the data blocks located in the primary storage subsystem can be identified using the signature blocks stored in the client side signature repository . Once identified the location information of the data blocks located in the primary storage subsystem can also be retrieved as described previously. For example the client side signature repository can review the location information of the entries of the signature block corresponding to the data blocks in the restore data set to identify one or more locations within the primary storage subsystem where the data block is located.

In this example some of the data blocks to be restored to a first location in the client B can be located in a second location in the client B and or in one or more of the other clients A C. Accordingly the client side signature repository can identify which of the different locations will be used as within the primary storage subsystem to source to each data block based on a data sourcing policy which will be described in greater detail below with reference to .

Once the sources of the respective data blocks in the restore data set have been identified the client side signature repository 3A 3B requests and receives the data blocks to be used in the restore from the source client s based on the data sourcing policy. In other cases the data blocks are forwarded directly to the target client B without first being transmitted to the client side repository . In addition the client side signature repository 3C requests the data blocks not already residing in the primary storage subsystem from the media agent and the media agent in turn requests and receives 4 the data blocks from the storage device . The client side signature repository then receives 5 the data blocks from the media agent . In some cases even if a copy of one or more of the data blocks in the restore data set resides in the primary storage subsystem e.g. in one of the non target clients A C the data block may nonetheless be sourced from the secondary storage subsystem . For instance the sourcing policy may dictate that the client s that stores the copy of the data block should not be interrupted for the purposes of accessing the data block such as where that client is performing critical tasks or the like.

In the illustrated embodiment once the data blocks have been received from the clients A C and secondary storage the client side signature repository can 6 transmit the data to the client B. The target client B may compile the restore data set by combining the received data with any data blocks that are sourced from the target client B and restore the data set to the primary storage device completing the restore operation. In other configurations the entire restore data set is compiled at the client side repository and then communicated to the target client B.

In some embodiments the client side signature repository is also updated in view of the data that is copied to the primary storage subsystem during the restore operation. For instance the client side signature repository can be updated to reflect data blocks that were received from the secondary storage subsystem during the restore and written to the primary storage device associated with the target client B. Moreover the client side signature repository can be updated to reflect copies of data blocks that were communicated from any non target clients and written to the primary storage device associated with the target client B.

One skilled in the art will appreciate that all of the components of storage system are not necessary to store and restore data blocks and that the processes described herein can be implemented in any number of ways without departing from the spirit and scope of the description. For example in an embodiment the client side signature repository does not perform any of the processing steps. In such an embodiment the client B or media agent can query the client side signature repository for the signatures corresponding to the data blocks involved in the restore operation. The client B or media agent can then identify the data blocks stored in primary storage as described previously. In some embodiments the client side signature repository can simply transmit the signatures of the data blocks not located in primary storage to the media agent without requesting the data blocks in return. In reply the media agent can bypass the client side signature repository and transmit the data blocks not found in primary storage directly to the client B for restore via a network. Similarly the clients A C can bypass the client side signature repository and transmit the data blocks to be restored from the clients A C directly to the client B via a network. Furthermore in some embodiments multiple client side signature repositories can be used. For example each client can be associated with its own client side signature repository . The client side signature repositories can communicate with each other during the restore to effectuate the various processes described above.

At block the client side signature repository receives signatures of data blocks in the restore data set. The client side signature repository may be shared by the clients or separate dedicated client side signature repositories may be associated with some or all of the clients . At block the agent of the client side signature repository reviews the information in the client side signature repository to identify data blocks in the restore data set that are located in the primary storage subsystem in any of the manners described herein.

For each data block in the restore data set that is located in the primary storage the agent of the client side signature repository determines whether the data block already resides in the primary storage device s associated with the target client B at block . For instance where signature information is organized in signature blocks the agent of the client side signature repository can review the entries of the signature blocks corresponding to the data blocks located in the primary storage subsystem to determine whether the data block is located in the primary storage device s associated with the target client B. For example the location information in each entry can include a client ID indicating which client includes a copy of the data block and or indicating the physical location of the data block within the storage device associated with the client .

If it is determined that the data block is located in the storage device associated with the target client B the agent of the client side repository can identify the location of the data block at block e.g. by referring to information provided in the location field in the entry of the corresponding data block. On the other hand if the storage system determines that the data block is not located in the target client B the storage system can request and receive the data block from another client at block . The source client can be determined based on a data sourcing policy which will be described in greater detail below with reference to .

The agent of the client side repository also identifies data blocks not located in the primary storage subsystem and those data blocks are requested and received from the secondary storage subsystem . In some cases where a data block does not exist in the storage device associated with the target client B even if a copy of the data block does reside in one of the other clients it is nonetheless sourced from the secondary storage subsystem based on the sourcing policy. In some other embodiments the sourcing policy specifies that even if a copy of the data block is found in the storage device associated with the target client B the data block is still sourced from one of the non target clients or from the secondary storage subsystem .

One skilled in the art will appreciate that routine can include fewer more or different blocks than those illustrated in .

At block the storage system identifies a data block involved in a storage operation that is associated with a target client . The storage operation can include but is not limited to a copy operation restore operation other storage operation etc. The identified data block can include a data block to be restored that is involved in the copy operation and or involved in another storage operation.

At block the storage system identifies the signature of the current data block. In some embodiments the storage system identifies the signature by generating the signature of the data block. In certain embodiments the storage system identifies the signature of the data block by retrieving the signature information from the client side signature repository or other location.

At block the storage system identifies the instances of the data block that reside within the primary storage subsystem . In some embodiments where the signature information is organized as signature blocks in the manner described herein the storage system identifies the instances of the data block by reviewing the signature blocks . As described in greater detail above with reference to B and the signature blocks stored in the client side signature repository can include an instances field that identifies the number of instances of a particular signature . Moreover the signature block can include location information of the data block in the location field and access priority information of the data block in the access priority field of each instance of the data block.

At block the storage system accesses a data sourcing policy. The data sourcing policy can be located in one or more components of the storage system . For example the data sourcing policy can reside in the storage manager one or more clients the client side signature repository one or more media agents and or one or more storage devices . In some embodiments portions of the data sourcing policy reside in different components of the storage system .

At block the storage system may have determined that a particular data block resides in multiple sources within the primary storage subsystem e.g. data stores associated with multiple ones of the clients . The data sourcing policy can be used to determine from which source the data block should be retrieved for the particular storage operation. For example during a copy operation when multiple instances of a data block that is unique to primary storage i.e. not located in secondary storage are located in the primary storage subsystem the storage policy can be used to determine which source to retrieve the data block from for transmission to the secondary storage subsystem . Similarly during a restore operation where multiple copies of a data block reside within the primary storage subsystem the data sourcing policy can indicate from which source to retrieve the data block to be restored.

The data sourcing policy can specify that the determination of the source of the data block based on a variety of factors. For instance characteristics associated with the different sources e.g. characteristics associated with the clients or the primary storage devices network information and or relative priority information associated with the sources may be used. For example the data sourcing policy can compare the relative speeds of the different available sources estimated total expected times to retrieve the particular data block from the available sources or software or firmware versions residing on the available sources to determine which source is better suited to be involved in the storage operation etc. The data sourcing policy can also specify that the relative proximity of the available sources to the target client and or available network bandwidth between the available sources and the target client B should be factored in to determine the preferred source. In addition the data sourcing policy can specify that if one or more data blocks are to be retrieved from a particular source client that source client is a preferred source for subsequent data blocks.

In some embodiments the data sourcing policy reviews a priority indication associated with the sources. The priority indication can specify the relative priority of a potential data block source e.g. client and or primary storage device with respect to other sources. The priority indication can be a fixed value or can be determined dynamically e.g. based on a load associated with the source based on the number or types of processes being executed by source a user associated with the source etc. For example if one source containing a copy of a data block has a higher priority than another source the data sourcing policy can specify that a source with the lower priority should be used to retrieve the data block. Furthermore the data sourcing policy can account for upcoming processes to be performed by the source. For example if a source is about to begin a processor intensive process the data can be retrieved from a different source. In certain embodiments the data sourcing policy selects the source that can most quickly provide the data block. In general the sourcing policy can specify that any combination of the above or other appropriate factors can be used in making the data block sourcing determination.

At block the storage system identifies a preferred source based on the data sourcing policy. For instance where the preferred source is dynamically determined e.g. on the fly and or in real time during a storage operation once the available sources of the data block are identified the accessed data sourcing policy is referred to determine which of the sources is the preferred source for that particular storage operation.

On the other hand where the preferred source is fixed or otherwise predetermined each time a signature block is updated in the client side signature repository the storage system can access the sourcing information e.g. review the entries of the signature block to determine the preferred sourcing order for retrieving the data block. In some cases different sourcing orders are specified e.g. depending on the type storage operation involved and the identity of the target client.

The preferred sourcing order can be stored in a separate field of the signature block or each entry can include a sourcing rank that indicates its relative priority among the various potential data block sources. For instance in the event both a top ranked e.g. high priority source and another lower ranked source maintain a copy of a data block the lower ranked source is selected.

At block the storage system accesses the data block from the preferred source. In some embodiments the source transmits the data block to the target client B e.g. for a copy operation the media agent e.g. for a restore operation and or the client side signature repository etc. based on the storage operation.

One skilled in the art will appreciate that routine can include fewer more or different blocks than those illustrated in . In some embodiments the storage system can omit block and identify the preferred source without accessing the data block sourcing policy. For example if the sources have been previously ranked the storage system can identify the preferred source by referring to the signature block without accessing the data block sourcing policy.

Further the copy data set index can be generated in response to a copy operation associated with a client . The copy data set index can include information that can be used by the storage system to identify the signatures of the data blocks involved in the copy operation and or determine how the identified data blocks are organized. The copy data set index can include information regarding substantially all of the data stored on a primary storage device s associated with a client or of select data e.g. particular files or folders or of one or more subclients .

The copy data set index can include multiple data entries . While a variety of organizational schemes are possible in the illustrated organization each entry provides information regarding the signature of one or more data blocks in a copy data set. For example each entry can include a signature field and a data block ID field .

The signature field can include a signature of one or more data blocks that are in the copy data set. The signature can be generated as described previously with respect to A B and . In some embodiments each entry corresponds to a different unique signature of one or more data blocks that are in the copy data set. For example if a particular copy operation involves 1 000 data blocks with a total of 600 different signatures the copy data set index can include 600 different entries. In certain embodiments each entry corresponds to an instance of each data block. For example with continued reference to the previous example the copy data set index in such a case would include 1 000 entries corresponding to the 1 000 data blocks involved in the storage operation.

The data block ID field can include identifiers for each data block with a signature that matches the signature in the signature field . The identifiers can provide information regarding how the data blocks are related such as the order of the data blocks with respect to one another. For example the copy data set index for File A in the client B can indicate in the data block ID fields which data block is first second third and so on so that when File A is restored to client B the client B will know how the data blocks are to be arranged. In the illustrated embodiment Block Block and Block all have the same signature Signature . Similarly Block and Block share Signature. Block has a unique signature. In this embodiment Block corresponds to the first data block of the copy operation Block corresponds to the second data block of the copy operation etc. Accordingly using the copy data set index the storage system can identify all of the signatures in the copy data set index all of the data blocks corresponding to the signature and the order of the data blocks with respect to each other.

The copy data set index can include additional information as desired. For example in some embodiments the copy data set index can include signature block reference relating the particular signature in the copy data set index with a signature block in the client side signature repository . In some embodiments the copy data set index includes additional metadata e.g. file and directory metadata .

At block the storage system receives a copy operation request. For example the storage manager can instruct the client client side signature repository and or media agent to initiate the copy operation. The request can occur in any of the manners described herein such as automatically according to a schedule e.g. daily weekly monthly specified in a storage policy. Alternatively the copy operation can occur in response to user interaction with a user interface. Furthermore the copy operation request can include information regarding a specific client whose data is to be copied the specific data e.g. particular files folders or portions thereof that are to be copied specific type of operation e.g. incremental backup full backup snapshot and the like .

In some embodiments the client side signature repository includes an index of all the files folders etc. found on the clients with which the client side signature repository is associated. For example if the client side signature repository is associated with one client it can include an index of all the files folders etc. found on the one client. If the client side signature repository is associated with multiple clients it can include an index of all the files folders etc. found on the multiple clients. The copy data set index can be used to identify which data blocks correspond to the copy data set and how the data blocks are organized. In other cases such an index is stored on each client .

At block the storage system identifies signature blocks that correspond to the identified data blocks in the copy data set and that have been modified since a previous copy operation also referred to as a modified signature block . A modified signature block can indicate that an entry has either been added or removed to the signature block since the previous copy operation and that a copy of the corresponding data block has either been added somewhere in primary storage or removed. Furthermore a modified signature block can indicate that the secondary storage does not include references to all of the instances of a particular data block and or may not include the data block at all. In this way the system can identify which data blocks already exist in secondary storage and which do not. If the data blocks already exist in secondary storage significant time can be saved by during deduplicated copy operations by transmitting signature block information as part of a copy data set index described below. The signature block information can indicate that another copy of the data block already exists in the secondary storage instead of transmitting the entire data block.

As mentioned previously the identification of signature blocks that have been modified since the previous copy operation can be done by reviewing the copy operation flag of the signature block. Other methods can be used to identify signature blocks that have been modified since the previous copy operation. In some embodiments the client the client side signature repository and or the media agent can include an index that maps signatures of data blocks stored in a client with one or more files or folders stored in the client that have been previously copied to the secondary storage subsystem. The index can include how many data blocks are used to form a particular file and how the data blocks are organized within the file.

The storage system can also use the age field in the entries of the signature blocks stored in the client side signature repository to identify signature blocks that have been modified since a previous copy operation. For instance the storage system can compare information in the age field such as creation date or edit date with date information for a previous copy operation. If the age field indicates that the entry was added after the previous copy operation the storage system can determine that the signature block has been modified since the previous copy operation.

For each modified signature block the storage system determines whether the modified signature block is a new signature block as illustrated in decision block . New signature blocks correspond to signatures and or corresponding data blocks do not exist in the secondary storage subsystem and or signatures that did not exist in the client side signature repository prior to the previous backup. Signature blocks that are not new can correspond to signatures and or corresponding data blocks that have been stored in the secondary storage subsystem in conjunction with a previous copy operation e.g. as part of a copy data set index or otherwise and or existed in the client side signature repository prior to the previous backup. The system can determine whether the signature block is new in a variety of ways. For instance to determine whether the signature block is new the system can determine when the signature block was created. If the signature block was created after a previous copy operation the signature block can be identified as new. In some embodiments if the signature block contains only one entry and the one entry is a new entry the signature block is identified as new. Furthermore the system can refer to a copy operation flag in the signature block that indicates whether the signature blocks has been part of a copy data set in a copy operation e.g. has already been backed up to secondary storage . Similarly the system can determine that the signature block is not new in many different ways. For example the system can determine that the signature block is not new when multiple entries are included in the signature block when the signature block was created prior to a previous copy operation that included the corresponding data block when the copy operation flag indicates that the signature block has not been part of a copy operation or any number of other ways or any combinations thereof.

Upon determining that the modified signature block is a new signature block the storage system locates the data block corresponding to the new signature block within the primary storage subsystem as illustrated in block . The storage system can also identify the data block corresponding to the signature found in the signature block as a new data block. In some embodiments the storage system locates the data block within the client B. In certain embodiments the storage system locates the data block within one or more clients other than client B such as client A and C.

Once the data blocks corresponding to the new signature blocks have been identified the storage system transmits the located data blocks and new signature blocks to the secondary storage subsystem as illustrated in block . In some embodiments the storage system transmits portions of the new signature block but not the entire signature block. In certain embodiments the storage system waits until all modified signature blocks have been reviewed and transmits multiple located data blocks and multiple new signature blocks to secondary storage. In some embodiments the storage system transmits all of the located data blocks and all of the new signature blocks to secondary storage simultaneously.

If the storage system determines that the modified signature block is not a new signature block the storage system transmits the modified signature block to the secondary storage subsystem as illustrated in block . By identifying the modified signature block as not being a new signature block the storage system has determined that the corresponding signature that is being reviewed was stored in the client side signature repository prior to the previous storage operation and or that the corresponding data block exists in the secondary storage subsystem . Accordingly only the signature block or portions thereof e.g. just the signature and not the data block itself are transmitted to secondary storage so that secondary storage can update the maps and indices related to the client B.

One skilled in the relevant art will appreciate that routine can include fewer more or different blocks than those illustrated in . For example the storage system can transmit a copy data set index to the media agent . The copy data set index can include signature information for all of the data blocks that correspond to the copy data set. In some embodiments once the storage system identifies the signature blocks corresponding to the data blocks in the copy data set and that have been modified since a previous copy operation the storage system identifies which of the identified signature blocks constitute new signature blocks as described previously. The storage system then locates and transmits the data blocks corresponding to the new signature blocks to secondary storage. The storage system can also transmit the copy data set index to the media agent which includes the signature information for all of the data blocks in the copy data set.

Further the retrieved data data blocks and or signature blocks can be sent from their respective locations either individually or bundled together. In certain embodiments a component of the storage system can bundle all the data blocks and or signature blocks together in groups prior to sending the data to secondary storage. Furthermore a copy data set index can be generated or retrieved and sent to secondary storage as well. The copy data set index can indicate how the various data blocks are related. For example the copy data set index can indicate the order of the data blocks with respect to one another e.g. for a particular file group of files or other copy data set .

For any of the embodiments described herein the copies of the data blocks residing in the primary storage subsystem that are sourced for generating secondary copy data sets or restore data sets were generated by programs e.g. software applications executing on a client during normal operation. For example the copies form a portion of a file folder or other type of primary data and are not cache copies e.g. copies made for the purpose of decreasing retrieval time and removed on a first in first out basis of other data blocks stored on the target client .

It will be appreciated by those skilled in the art and others that all of the functions described in this disclosure may be embodied in software executed by one or more processors of the disclosed components and mobile communication devices. The software may be persistently stored in any type of non volatile storage.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Depending on the embodiment certain acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all described acts or events are necessary for the practice of the algorithms . Moreover in certain embodiments acts or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside on servers workstations personal computers computerized tablets PDAs and other devices suitable for the purposes described herein. Software and other modules may be accessible via local memory via a network via a browser or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces command line interfaces and other suitable interfaces.

Further the processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. In addition two or more components of a system can be combined into fewer components. Various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Embodiments are also described above with reference to flow chart illustrations and or block diagrams of methods apparatus systems and computer program products. Each block of the flow chart illustrations and or block diagrams and combinations of blocks in the flow chart illustrations and or block diagrams may be implemented by computer program instructions. Such instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flow chart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified in the flow chart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operations to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the acts specified in the flow chart and or block diagram block or blocks.

While certain embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the disclosure. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the described methods and systems may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure.

