---

title: Message thread identification and management
abstract: Systems and methods for identifying threads of related messages. A computer can associate messages with threads by storing a thread identifier (thread ID) identifying a thread and associating the thread ID with a message identifier (message ID) of each known message that belongs to the thread. The computer can inspect a message to determine whether the message identifies a reference message. Before assigning a thread ID to the message or a reference message, the computer can determine whether a message ID for either message is stored in association with a thread ID. If a thread ID is stored for a message ID of either message, the computer can assign the thread ID to message IDs of other reference messages. If a thread ID is not stored for a message ID of either message or is different for either message, store a common thread ID in association with both messages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09253133&OS=09253133&RS=09253133
owner: DROPBOX, INC.
number: 09253133
owner_city: San Francisco
owner_country: US
publication_date: 20131120
---
This application is a continuation of and claims priority from U.S. application Ser. No. 14 059 321 entitled Message Thread Identification and Management filed on Oct. 21 2013 the disclosure of which is incorporated herein by reference.

The present disclosure relates generally to electronic messaging and more specifically to identifying and managing information about related electronic messages.

Electronic messaging or electronic message communication generally refers to the communication of electronic messages from a sender to one or more recipients via a computing system. One widely used form of electronic message communication includes email. A message as used herein broadly refers to an electronic message e.g. an email message communicated via an electronic messaging system. Applications or client devices can communicate and access messages using a message service provider via a protocol such as a post office protocol POP or an Internet message access protocol IMAP . Message service providers can include for example Google Mail Yahoo Mail Hotmail or other mail services. Messages such as an email message can include a header that can identify the message and that can identify other related messages. For example a header in an email message can include a message identifier message ID that represents a unique string which identifies the email message in a messaging system. The header can include a reply field e.g. an in reply to field that identifies a message ID of a predecessor parent email message that an email message including the message ID is in response or reply to. A references field in the header can identify one or more message IDs for messages that are predecessors of a message.

Communication by email and other forms of electronic messaging has grown beyond a tool for corresponding to others to a tool for organizing and managing people s lives and businesses. Many people rely on messaging as a way to manage tasks. But as a seemingly ever increasing amount of content is communicated over email users struggle to manage the volume of messages that are received every day. Message services and client devices are also faced with the task of managing computing resources and access to the volume of messages. The increase in volume of messages challenges message service providers to find new ways to identify and associate messages into groups or threads to improve access and management of the messages. Client devices with reduced computing resources can be susceptible to machine crashes and unavailable or limited computing resources to identify and store thread information.

Certain embodiments of the present invention relate to techniques for identifying and managing threads of related messages. Messages can include email messages text messages or other types of messages used for electronic communication that can be related as a group.

It can be desirable for messages to be grouped into a thread of related messages. A message thread or a thread as used herein refers to a collection of messages with a shared predecessor or parent message. Applications e.g. email applications and services e.g. email services providing access to messages received from a message service provider may be unable to group messages. In circumstances when messages are received out of order based on creation or communication or are provided at different times by a message service provider applications and messaging services receiving the messages can encounter difficulty in determining whether messages that are being received are related to messages that have been received. Thus there is a need for a new and useful system and method for identifying and managing threads of messages. This invention provides such a new and useful systems methods and apparatuses.

A data store can be useful to store information for identifying and managing relationships of messages that can be received out of order and or at different times based on creation or communication from a message service provider. Besides a message identifier message ID that uniquely identifies a message a header can include one or more references each indicating a reference message ID of a reference message e.g. a predecessor message ancestor message or parent message that is related to the message. Messages and reference messages can be associated with a thread using a thread identifier thread ID . A thread ID can be stored in association with a message ID of each known message that belongs to the thread. In this manner a data store can maintain thread IDs for different messages to enable identification of messages that are common to a thread based on thread ID. The thread IDs stored in the data store can ensure that messages that have been identified as related are associated with a common thread. By associating thread IDs with messages messages that are associated with a common thread can remain consistently threaded.

The techniques described herein for managing threads of messages can be performed by a message service e.g. a message management service that functions as an intermediary computing system to facilitate communication of messages between a client e.g. a mobile phone or a tablet computing device and a message service provider. For clients that can be limited by computing resources the message service can communicate messages from the messages service provider to the clients using different delivery schemes. The message service can also provide the information about threads identified in the received messages to the clients to enable clients to effectively understand relationships between the messages. The thread information can enable clients to accurately group messages into folders and to enable messages applications to properly reference relationships of messages. The data store can also enable a message service to manage storage of messages such that duplication of messages can be avoided. In some embodiments the information about message threads can be provided to message service providers which can use information about the message threads to reduce storage otherwise used for thread management. Identified message threads can be useful for any service or device that desires to manage activity and actions with respect to messages.

An embodiment can be related to a method for managing message threads. The method can be performed by a processor of one or more server computers of a message service. The server computer can receive messages from one or more message service providers. Each received message can be processed to determine whether a data store coupled to the server computer stores a message ID of the message in association with a thread ID. Identification of a message ID indicates that the message is associated with a thread identified by the thread ID. Upon receiving a message to process the server can inspect the message to determine whether the received message includes one or more reference messages identified by reference message IDs. A reference message ID can correspond to a message ID associated with a field e.g. in reply to field or references field in a header of the received message. A reference message can be a related message such as a parent message or a predecessor e.g. ancestor reference message of a received message being processed. The server computer can determine whether each reference message ID is stored in the data store in association with a thread ID in the data store. Existence of a thread ID associated with a reference message ID can indicate that the reference message is identified with a thread.

To ensure that thread information is stored correctly to maintain consistency of threading the server computer can use a data store to manage association of a thread ID with reference messages and received messages. In some embodiments the server computer will assign a new thread ID to a message ID when the message does not indicate reference messages. In the event that reference messages are not associated with a thread and the received message is associated with a thread ID each of the reference messages is assigned a thread ID associated of the received message. Each messages ID of a received message or a reference message that is assigned a thread ID can be stored in the data store. In some embodiments the received message can be assigned the thread ID of a reference message. In some embodiments when a message and a reference message have different thread IDs the message can be assigned the thread ID of the reference message or the reference message can be assigned the thread ID of the message. By storing thread IDs for different messages the server can identify messages that are common to a thread based on thread ID.

The following detailed description together with the accompanying drawings will provide a better understanding of the nature and advantages of the present invention.

The following description of certain embodiments of the invention is not intended to limit the invention to these embodiments but rather to enable any person skilled in the art to make and use this invention.

Certain embodiments of the present invention relate to techniques for identifying and managing threads of messages are related. Messages can include email messages text messages social media messages micro blogging messages instant messages or other types of electronic messages that can be related as a thread. Often messages received by a client e.g. a mobile phone or a table computing device from a message service provider can be received out of order or at different times based on creation or constraints of communication and computing resources. Some embodiments are described herein of a message management service that manages threads of messages to facilitate and improve communication of messages between a client and a message service provider.

In certain embodiments a data store can be maintained to store information indicating related messages. A data store can be implemented to store a thread identifier thread ID with a message identifier message ID of each known message that belongs to the thread. Upon receiving a message to process the message can be processed to determine whether the data store already stores a message ID of the message in association with a thread ID. A message ID stored in the data store can indicate that the message is associated with a thread. The received message can be further inspected to determine whether the received message includes one or more reference messages identifiers of reference messages reference message ID . A reference message ID can be a message ID associated within a specific field e.g. in reply to field or references field in a header of the received message. A reference message can be a parent message or a predecessor e.g. ancestor message of the received message being processed. The data store can be searched to determine whether each reference message ID is stored in the data store in association with a thread ID in the data store. Existence of a thread ID associated with a reference message ID can indicate that the reference message is already associated with a thread. Each of the reference messages identified in the received message can be related to the received message based on the thread ID.

To further illustrate a new thread ID can be assigned to a message ID when the message does not have reference messages identifiers. If the message has one or more reference messages identifiers before assigning a thread ID to the message and or one or more reference messages the server can search the data store to determine whether an identifier of the message or one or more reference messages are already stored in association with an thread ID. If one message out of the message and the reference messages has a thread ID that thread ID is assigned to each of the other messages and reference messages. In some embodiments if a thread ID of a message and a thread ID of one or more reference messages are different then a common thread ID can be chosen for association with the message and the one or more reference messages. The common thread ID can be the thread ID of the message or can be assigned the thread ID associated with one of the reference messages. In certain embodiments in which thread IDs are different amongst reference messages then a common thread ID can be chosen from one of the thread ID associated with one of the reference messages. The common thread ID can be stored in association with each of the reference messages and the message ID. By storing a thread ID with each message or reference message that is identified a data store can accurately maintain information about related messages identifiable by a thread ID. The information about the threads can be provided to clients to enable clients to effectively understand relationships between messages. The information can enable clients to accurately group messages into folders and to enable messages applications to properly reference relationships of messages. Identified message threads can be useful for any service or device that desires to manage activity and actions with respect to messages.

As used herein message provider e.g. a message service provider refers generally to an entity having a computing infrastructure e.g. one or more computer servers that provides services to enable clients to send and receive messages access messages or perform one or more operations e.g. edit delete modify create or manage on messages. Message provider can provide services that are accessible using a message access protocol such as an Internet Message Access Protocol IMAP . Message provider can enable a client to create an account such as a post office protocol POP account which enables the client to control access to messages to communicate messages and perform other operations on messages. The account can enable clients to access messages stored in the computing infrastructure of message provider . The account can enable messages to be downloaded to the client. Message provider is shown as one entity of multiple message providers that can be included in message management system . A message provider can include message service providers such as a SMSC Short Message Service Center a MMSC Multimedia Message Service Center an instant message service provider a social network message provider and a micro blogging service provider or an email service provider. Message provider can include for example an email service to provide functions such as sending email messages receiving email messages storing email messages organizing email messages and searching email messages and so on. Examples of email service providers can include Google Mail Yahoo Mail or Hotmail .

As used herein a client refers generally to a combination of computer hardware and software that enables a user to receive one or more messages from message provider and to interact with message management service . In the illustrated embodiment in client can be a mobile computing device client can be a personal computing device and client can be a tablet computing device. However embodiments of the present invention are not limited to this illustrated embodiment as client devices can take any suitable form convenient for use by a user. For example client device can be a personal digital assistant PDA a tablet computer a laptop computer a desktop computer a wearable computer a pager etc. Client can interact with message provider to use one or more services provided by message provider for an account of a user of client . For example a user of a client such as client can use an email application e.g. a mailbox application for sending and receiving emails via message provider . Message management service can communicate with message provider to operate on behalf of client one or more services provided by message provider . For example client can communicate via message management service to receive and send messages via message provider .

 Message management service refers generally to a combination of computer hardware and software that can manage information about messages received from message provider . Message management service can be a collection of servers such as a distributed computing infrastructure which operates to manage information about messages received from message provider . Message management service can facilitate communication of messages between client and message provider . Whereas a message provider provides access to messages for a message account e.g. an email account message management service facilitates communication of messages and information related to messages between client and message provider . As a number of clients and volume of messages increase message management service can be expanded to include additional computing resources to manage information e.g. information about related messages for one or a combination of multiple clients accounts or message providers unlike client devices that can be limited in computing resources.

In some embodiments message management service can use a persistent IMAP connection for accessing one or more services provided by message provider . Additionally or alternatively message management service can use communication protocols such as POP messaging application programming interface MAPI exchange service application programming interfaces service APIs and or any type of connection for interaction with message provider . Outgoing messages can be delivered to the message provider through using a communication protocol such as a Simple Mail Transfer Protocol SMTP or any other message communication protocol. Message management service can translate account or message updates delivered from a client into appropriate actions to execute on message provider .

Based on messages it receives message management service can determine relationships between messages. Relationships between messages may not be limited by message accounts or message providers. The messages received from message provider can be less than all messages for an account. Message management service can inspect messages accessed from message provider to determine one or more threads of the messages. Message management service can store information identifying threads of related messages. Thread IDs can be stored for messages and reference messages identified in the received messages. Management of thread information at an intermediary computing system such as message management service enables additional value added services to be provided to clients such as clients . For example the thread information can be useful to enable message management service to group messages into folders or categories based on the thread information. Information about grouping of messages can be provided to clients for use in presenting messages.

The information stored by message management service can enable one or more clients message provider or both to improve management and access to messages. Message management service can provide information about related messages to clients to enable clients to effectively understand relationships between the messages. Messages can then be provided from message management service to the client in an organized manner thereby reducing use of computing resources at a client to manage messages. Identified message threads can be useful for any service or device that desires to manage activity and actions with respect to messages. Methods for identifying and managing thread information about messages are described below with reference to .

Message management service according to some embodiments is an intermediary that sits between service providers and clients . Message management service can communicatively coupled e.g. via the Internet to applications of clients and communicatively coupled e.g. via the Internet to message provider . Message management service can function as a proxy for clients . In these embodiments message management service can receive incoming messages from message provider and can route the incoming messages to clients . Similarly message management service can receive outgoing messages from clients and routes such outgoing messages to message provider .

Message management service can include a mailbox service that performs identification and management of thread information. Mailbox service can function to manage the mailbox of messages for clients . Mailbox service can leverage a custom network protocol optimized for modern message communication with one or both of clients or message provider . Alternatively any suitable protocol can be used such as HTTP.

Mailbox service can provide any number of services. A service can include message windowing. Message windowing describes the transfer of only immediately relevant messages to the client application. For example mailbox service only transfers information for the most recent messages when a user accesses a message inbox even if there are unread messages that the user has not seen. Mailbox service can provide other services such as message application functions archiving and backfilling related emails grouping and threading related messages enabling a user to search messages and so on. Another example service is associating messages into a thread associated with a thread ID. A thread can be related messages such as messages replying to another message messages forwarding another message messages with shared subjects bodies senders and or recipients dates and or times a message quoting a portion of another message and or any grouping of messages based on information in the messages.

Embodiments of mailbox service can interface with message provider . As each message provider can have a custom implementation message management service can include message provider interface that includes provider modules or components each specifically configured to interface with a different message provider . For example one of provider modules can be configured specifically for an intended message provider and can include rules and processing instructions to account for message format issues for interpretation of message updates specialized features or capabilities and or any processing that can be specific to an intended message provider .

Mailbox service can manage state and windowing of multiple message streams such as message stream received from message provider . A message stream can refer to a collection of messages. For example a message stream can correspond to a folder in an email account. Other message streams can correspond to archived messages message folders labels special folders e.g. starred messages or deferred messages and or any collection of messages.

Functions described as being performed here by mailbox service can be performed on messages saved in data store . Data store can be used to store information including a thread map having thread information identified and managed by mailbox service . Data store can be included in any type of persistent storage device such as a memory storage device. Thread map can be implemented using any type of data structure such that the data structure enables access to a message ID and or a thread ID for each message or reference message associated with a thread. In some embodiments thread map can be implemented to enable each message ID to be identified based on association with a thread ID or vice versa. In a particular embodiment data store can be implemented using MongoDB a relational database or other types of databases. B A and B show an example of message processing to identify message threads according to some embodiments of the present invention.

Message management service can determine information that identifies a thread to which each message is related. A thread can be identified based on messages that have been received by message management service . The messages can be recent messages that are requested by a client. For example recent messages can be limited to an amount of messages corresponding to a message window or a size of a folder of messages requested by the client. B A and B show processing of messages that have been received via one or more message streams such as message stream . In some embodiments message management service may not receive all messages that correspond to an account managed at a message provider and identification of threads can be performed based on any messages that message management service has received from message provider . Message management service can process additional messages received out of order or received in response to a backfill request from a client. Message management service can determine whether out of order messages or older messages correspond to an existing thread or belong to a new thread.

In B A and B message stream corresponds to a stream of messages received from message provider for a message account that can be managed by message provider . In some embodiments messages can be received from multiple message streams. Each of the message streams can be received from different message providers such as message provider . Message stream can include messages received from multiple message providers such as message provider . Message can correspond to messages provided for a folder associated with the account. Message stream can include multiple messages without limitation including message 1 M1 message 2 M2 message 3 M3 message 4 M4 message 5 M5 message 6 M6 and message 7 M7 . Messages received via message stream can correspond to an order of messages starting with most recent messages M7 M6 M5 M4 and ending with older messages M1 M2 and M3 . An order of messages received via message stream can correspond to an order that messages are received from message service provider . Alternatively or additionally an order of messages received via message stream can correspond to an order that messages are created. Although M1 M7 are shown as being received in order corresponding to arrangement in message stream M1 M7 may not be received during a continuous time period. In some embodiments M1 M7 can be received out of order. For example more recent messages such as M7 M6 M5 and M4 can be received before older messages M3 M2 and M1 . Older messages can be received after most recent messages due to windowing of a number of messages at a client or backfill mechanism. In another example M3 M2 and M1 can be received by message management service via message stream out of order from M7 M6 M5 and M4 . In this example M3 M2 and M1 can be received by message management service at a later time period after more recent messages M7 M6 M5 and M4 are received. Such a later time period can correspond to a backfill event that occurs in response to a backfill message request from a client e.g. client to receive older messages to fill messages in a window after recent messages have been removed from view. Backfill event can correspond to a period of time that occurs between a time when M4 is received and when M3 is received.

Thread thread and thread in are shown to illustrate relationships of messages such as threads that can be determined based on a relationship of messages M1 M2 M3 M4 M5 M6 and M7 . Message management service can identify a thread 1 of communication associated with thread ID T1 which includes M1 M2 M6 and M7 that can be related. Message management service can identify a thread 2 of communication associated with thread ID T2 which includes M3 and M5 that can be related. Message management service can identify a thread 3 of communication associated with thread ID T3 which includes M4 that can be related. According to an embodiment of the present invention threads can be identified based on processing of messages M1 M2 M3 M4 M5 M6 and M7 . Thread 1 thread 2 and thread 3 are examples of threads that are identified based on processing of message received via message stream .

In the example shown in B A and B recent messages M7 M6 M5 M4 are received first via message stream and M3 M2 and M1 can be received second at a later time period. Each message received by message management service can be processed to identify a thread to which each message belongs. Received messages can be processed to determine threads according to an order of receipt via message stream . In some embodiments the received messages can be processed based on an order that is independent of an order in which the messages are received via message stream .

Message management service can process each of the received messages M7 M6 M5 and M4 to identify a thread corresponding to each received message. For example message management service can inspect a message to determine whether the message includes a header and or information that identifies the message and or other related messages. A message can include a message ID or msg ID that identifies a message. In an implementation message ID can be a unique identifier that uniquely identifies a message in a message system such that no two messages can have the same message ID. In some embodiments a message ID can be established for a message when the message is created. The message ID can be based on a combination of an email address the sends the message a time stamp when the message is created sent and a date when the message is created sent. In some embodiments the message ID can be based on a time stamp when the message is created a date when the message is created and a domain name of a message provider e.g. a host system . The header can include an in reply to field that identifies a parent ID of a parent message in response to which the message was communicated e.g. en email message replying to another email message . The header can include a references field that identifies one or more reference identifiers reference IDs of messages that are related to the message. Related messages can include one or more predecessor messages such as a reference message that is an ancestor e.g. a grandparent message or a great grandparent message of the message. The reference ID and or the parent ID can be a message ID of a message.

Message management service can use a message ID in a message e.g. a message ID in a header of a message to identify a thread of communication to which the message belongs. In some embodiments a message can belong to at most one thread. At most one thread ID can be assigned to a message. As message management service processes each message message management service can assign a thread ID each message that has not previously been associated with a thread ID.

Thread map in data store can store information relating different messages. Thread map stores a thread ID that identifies a thread and associates a thread ID with a message ID of each known message that belongs to the thread. To illustrate thread map can be a table that contains an entry for each message and a thread ID corresponding to a thread with which the message is associated. By storing thread IDs for different messages the server can identify messages that are common to a thread based on thread ID.

Now turning to an example of processing messages received via message stream is illustrated. shows a progression of information stored in thread map as each message in message stream is processed through stages 1 8.

At stage 1 before M7 can be processed thread map can be empty as shown. In some embodiments thread map can contain one or more entries each corresponding to a thread ID associated with a message ID.

At stage 2 M7 can be processed from message stream to identify a thread corresponding to M7 . Thread map is examined to determine whether a thread ID can be identified for M7 . Specifically a search of thread map is conducted to determine whether message ID M7 is stored in thread map .

In this example thread map does not contain an entry with msg ID M7. However in some embodiments thread map can contain an entry with msg ID M7 in the event that another message was processed that referenced msg ID M7. Before a determination is made that a new thread ID can be assigned to M7 a search of thread map is conducted to determine whether thread map contains one or more reference messages identified in M7 . Thread map can be searched to locate reference msg IDs for reference message M1 and reference message M2 . Because thread map does not contain thread IDs for either M1 or M2 a new thread ID T1 is assigned to M1 M2 and M7 . Message management service stores in thread map an entry including T1 for the msg ID associated with each of M1 M2 and M7 .

At stage 3 M6 can be processed. Thread map can be searched to locate msg ID M6 which cannot be found in this example. Thread map can be searched for reference msg ID M1 for M1 . Identification of M1 in thread map identifies an association with thread ID T1 . M6 is assigned thread ID T1 because a parent message M1 is associated with thread ID T1. Message management service stores in thread map an entry including T1 associated with msg ID M6. 

At stage 4 M5 can be processed. Thread map can be searched to locate msg ID M5 which cannot be found in this example. Thread map can be searched for reference message ID M3 for M3 which is not found in thread map . Since msg ID M5 and msg ID M3 cannot be found a new thread ID T2 is assigned to M5 and M3 . Next M4 can be processed. Message management service stores in thread map an entry for T2 for the msg ID associated with each of msg M5 and M3 .

At stage 5 M4 can be processed. Thread map can be searched to locate msg ID M4 which cannot be found in this example. Since msg ID M4 cannot be found a new thread ID T3 is assigned to M4 . Message management service stores in thread map an entry for T3 associated with M4 .

After stage 5 message stream may not contain messages such as M3 M2 and M1 until a period of time passes. These messages may not be received because of delays caused in transmission of messages limitations on messages requested from message provider or other events that cause messages such as M3 M2 and M1 to be received at a later time. One such scenario M3 M2 and M1 are received in the event that a backfill event occurs such that a client requests message management service to obtain older messages to backfill a message folder presented. Such a request can cause the mailbox service to request additional messages from message provider which are received via message stream .

At stage 6 M3 can be processed from message stream . Thread map can be examined to determine whether a thread ID can be identified for M3 . A new entry is not created for M3 because thread map has an entry for msg ID M3 associated with T2 . Similarly at stage 7 when M2 can be processed and at stage 8 when M1 are processed a new entry is not created for either M1 or M2 since msgIDs for these messages are stored in thread map in association with a T1 . Therefore thread map has correct information identifying distinct threads messages M1 M7 associated with one of T1 T2 or T3 . Subsequent messages that are received by message management service via message stream or another message stream can be processed to determine whether each message is associated with a thread identified in thread map .

The techniques for identifying and managing information about message threads enables a messaging system to manage information about related messages that can be received from a message provider. Regardless of whether messages are received in order or at different times due to delay or backfill requests information in a message such as a message ID and or reference message IDs can be used to manage information about threads of messages. Information identifying threads of messages can be inspected and updated as each message is processed to ensure that related messages are associated with a common thread thereby enabling consistency of threading of messages. For clients that can be limited by computing resources a message management service can provide information identifying threads to the clients to enable clients to present messages in threads consistently. In some embodiments the information about message threads can be provided to message service providers which can use information about the message threads to reduce storage otherwise used for thread management. The thread information managed in a data store as described herein can be used to identify new messages that are related to previously identified threads.

Now turning to another example of processing messages received via message stream is shown. shows thread thread and thread to illustrate relationships of messages such as threads that can be determined based on a relationship of messages M1 M2 M3 M4 M5 M6 and M7 . Message management service can identify a thread 1 of communication associated with thread ID T1 which includes M1 M2 M6 and M7 that can be related. In the example shown in during processing of messages received via message stream message management service can identify a thread 2 T2 that includes M6 and M1 . Thread T2 is identified temporarily until message management service can determine that M1 and M6 are associated with thread T1 . Message management service can identify a thread 3 of communication associated with thread ID T3 which includes M3 and M5 that can be related. Message management service can identify a thread 4 of communication associated with thread ID T4 which includes M4 . According to an embodiment of the present invention threads T1 T3 and T4 can be correctly identified as threads based on processing of messages M1 M2 M3 M4 M5 M6 and M7 .

At stage 1 before M7 can be processed thread map can be empty as shown. At stage 2 M7 can be processed from message stream to identify a thread corresponding to M7 . Thread map is examined to determine whether a thread ID can be been identified for M7 . In this example thread map does not contain an entry with msg ID M7. Thread map can be searched to locate reference msg IDs for reference message M2 . Because thread map does not contain thread IDs for either M2 a new thread ID T1 is assigned to M2 and M7 . Message management service stores in thread map an entry including T1 for the msg ID associated with each of M2 and M7 .

At stage 3 M6 can be processed. Thread map can be searched to locate msg ID M6 and reference msg ID M1 for M1 . However shows M1 is associated with the same thread ID T1 as M7 and M2 . Because thread map does not contain an entry for M1 message management service assigns a new thread T2 to M6 . M1 is assigned to thread T2 because M1 is a reference message of M6 . Message management service assigns T2 to M6 and M1 until message management service can determine that M6 and M1 are associated with message IDs in T1 .

At stage 4 M5 can be processed. Thread map can be searched to locate msg ID M5 which is not found in this example. Thread map can be searched for reference message ID M3 for M3 which is not found in thread map . Since msg ID M5 and msg ID M3 cannot be found a new thread ID T3 is assigned to M5 and M3 . Next M4 can be processed. Message management service stores in thread map an entry for T3 for the msg ID associated with each of msg M5 and M3 .

At stage 5 M4 can be processed. Thread map can be searched to locate msg ID M4 which cannot be found in this example. Since msg ID M4 cannot be found a new thread ID T4 is assigned to M4 . Message management service stores in thread map an entry for T4 associated with M4 .

After stage 5 message stream may not contain messages such as M3 M2 and M1 until a period of time passes. These messages may not be received because of delays caused in transmission of messages limitations on messages requested from message provider or other events that cause messages such as M3 M2 and M1 to be received at a later time.

At stage 6 M3 can be processed from message stream . Thread map is examined to determine whether a thread ID can be identified for M3 . A new entry is not created for M3 because thread map has an entry for msg ID M3 associated with T3 .

At stage 7 M2 can be processed from message stream . Thread map is examined to determine whether a thread ID can be identified. An entry for M2 can be identified in thread map associated with thread T1 . Message management service examines thread map to determine whether reference msg ID for M1 is stored in thread map . In this example thread map contains an entry for M1 stored in association with thread T2. However M1 and M2 can be related because M1 is a reference message identified in M2 . To ensure consistent threading such that M1 and M2 are associated with the same thread message management service assigns a common thread to M1 and M1 . In some embodiments thread map can be updated to store M1 in association with T1 that is associated with M2 . In some embodiments thread map can be updated to store M2 in association with T2 that is associated with M1 . Alternatively message management service can assign a new thread ID to M1 and M2 . To ensure that other related message IDs stored in thread map remain threaded with messages that have been modified in thread map message management service can search for msg IDs of messages having a thread ID associated with M1 or M2 before thread map was modified.

In the example shown in T2 associated with M1 can be changed to T1 because M1 is a reference message of M2 . Message management service can search for other message IDs associated with T2 and change these to T1 because T2 associated with M1 is changed to T1 . A search of thread map identifies M6 associated with T2. M6 can be changed to T1 because M6 is related to message M1 . In some embodiments where thread map is changed so that M2 is associated with T2 then any other message ID associated with T1 is changed to be associated with T2. By checking and updating thread map to update thread IDs consistent threading can be achieved such that messages received via stream are properly associated with a same thread. For example at stage 7 M1 and M6 can be properly associated with a same thread as M2 and M7 thereby enabling consistent threading.

At stage 8 M1 can be processed from message stream . In this embodiment a new entry is not created for M1 since M1 correctly stored in thread map in association with a T1 . Therefore thread map has correct information identifying distinct threads messages M1 M7 associated with one of T1 T3 or T4 . Subsequent messages that are received by message management service via message stream or another message stream can be processed to determine whether each message is associated with a thread identified in thread map .

The process can begin at block when one or more messages are received. Messages can be received by message management service . The messages can be received via a message stream such as message stream from message provider . Process can proceed to process each of the received messages. Process can be repeated for processing of each message received by message management service . At decision block process can determine whether a message ID that is included in a received message is stored in association with a thread ID in a data store e.g. data store of . For example message management service can search thread map in for a message ID of the received message for an entry with the message ID associated with a thread ID. Identification of a message ID in data store indicates that the received message is associated with a thread that can be identified by the thread ID associated with the message ID.

If at decision block it is determined that a message ID included in a received message is not stored in association with a thread ID in a data store then at decision block process can determine whether the message includes one or more reference message IDs.

If at decision block it is determined that the message does not include any reference message IDs then at block process can assign a new thread ID to message ID e.g. by storing in the data store the message ID in association with the new thread ID. Therefore process can end or return to block to process another message.

If at decision block it is determined that the message includes one or more reference message IDs then at decision block process can determine whether any reference message ID identified at decision block is stored in association with a thread ID in data store . In some embodiments process can determine whether each reference message ID is stored in association with a thread ID.

If at decision block it is determined that at least one reference message ID is stored in association with a thread ID process can proceed to block . If at decision block it is determined that at least one reference message ID is stored in association with a thread ID process can proceed to block .

At block process can store the message ID in association with a new thread ID. At block process can store each reference ID in association with the new thread ID that was assigned to the message ID at block . Process can end or return to block to process another message.

If at decision block it is determined that at least one reference message ID is stored in association with a thread ID process can proceed to block . At decision block process can store the message ID in association with the thread ID associated with a reference message ID. A thread ID associated with one of the reference message IDs can be assigned to the message ID. The message ID can assume the same thread ID as a reference message because the reference message shares the same thread as a related reference message. Process assigns a thread ID of the reference message ID to the message ID for storage. In some embodiments more than one reference message ID may be associated with a thread ID where the thread ID for each reference message is different. In these embodiments message management service can determine a common thread ID to each reference message associated with a thread ID. The common thread ID can be assigned to the message ID that assumes the thread ID of the reference messages. Further details with regard to determining a common thread ID can be described with reference to .

Now returning to decision block if it is determined that a message ID included in a received message is stored in association with a thread ID in a data store process can proceed to decision block . At decision block process can determine whether the message includes one or more reference message IDs. If at decision block it is determined that the message does not include one or more reference message IDs process can end or return to block to process another message. If at decision block it is determined that the message includes one or more reference message IDs process can proceed to decision block .

At decision block process can determine whether any reference message IDs identified at block are stored in association with a thread ID in the data store . If at decision block it is determined that at least one reference message ID is stored in association with a thread ID then at block process can store in the data store each of the reference message IDs in association with the thread ID that is already associated with the message ID. The thread ID associated with the message ID can be assigned to each of the one or more reference IDs because the reference messages can be related to the message based on identification of the reference message IDs in the message. Process includes assigning the thread ID to the reference message ID for storage in the data store . Process can end or return to block to process another message.

If at decision block it is determined that at least one reference message ID is stored in association with a thread ID then at decision block process can determine whether the thread ID associated with the message ID matches the thread ID associated with each of the reference message IDs identified in the message. If at decision block it is determined that the thread ID associated with the message ID matches the thread ID associated with each of the reference message IDs identified in the message process can proceed to end or return to block to process another message. The thread ID associated with the message ID and each of the reference IDs may not be changed because they are associated with the same thread.

If at decision block it is determined that the thread ID associated with the message ID does not matches the thread ID associated with each of the reference message IDs identified in the message then at block process can store a shared or common thread ID in associated with message ID and each reference message ID. A process for determining a shared or common thread ID for message IDs associated with a thread is described with reference to .

At block process can determine whether a first thread ID associated with a first message ID is different from a second thread ID associated with a second message ID. The first message ID can identify a first message that is related to a second message identified by the second message ID. For example at block in message management service can determine whether more than one reference message ID in a message can be associated with different thread IDs. In another example at block of message management service can determine whether a message ID is associated with a thread ID is different from a thread ID associated with one or more reference message IDs.

At block message management service can determine a third thread ID to be associated with the first message ID and the second message ID. The third thread ID can be selected from one of the first thread ID or the second thread ID. For example at stage 7 of upon determining that the thread ID T2 for M1 is different from thread T1 of M2 message management service can select thread ID T2 or thread ID T1 to be associated with M1 and M2 because M1 is a reference message of M2 . Message management service stores in the data store the selected one of the first thread ID or the second thread ID in association with the first message ID and the second message ID. In some embodiments the third thread ID can be a new thread ID.

At block message management service determine whether one or more message IDs are stored in association with one of the first thread ID and the second thread ID. In some embodiments win which the third thread ID is a new thread ID message management service can search thread map to determine whether one or more message IDs are stored with either of the first thread ID or the second thread ID. In some embodiments where the third thread ID is one of the first thread ID or the second thread ID message management service can search thread map to determine whether one or more message IDs are stored with the first thread ID or the second thread ID that is not selected as the third thread ID. For example at stage 7 of message management service can search thread map to determine whether thread map stores one or more messages ID that are associated with thread ID T2 that is not selected for association with M1 and M2 . In this example message management service can determine that thread map stores M6 associated with thread ID T2.

At block store the determined one or more message IDs in association with the third thread ID. In some embodiments in which the third thread ID is new each of the determined message IDs can be stored in association with the third thread ID. In some embodiments the third thread ID can be one of the first thread ID or the second thread ID. In these embodiments message management service can store the third thread ID in association with message IDs that are associated with one of the first thread ID or the second thread ID that is not selected as the third thread ID. For example at stage 7 of message management service can store thread ID T1 in association with M6 that is not associated with thread ID T1.

In some embodiments discussed with reference to message management service can achieve consistent threading by assigning a common thread ID to message IDs that have been identified as associated with a common thread but that have been stored in association with different thread IDs. Further by updating thread IDs associated with other message IDs in a thread that is changed messages of a thread can be associated with a common thread ID to maintain consistency of threaded messages.

At block process can receive a message from a message service provider. For example message management service can receive one or more messages such as message stream from one or more message service providers.

At block message management service can determine whether a message ID included in the received message is stored in association with a thread ID in a data store e.g. data store . Locating a message ID stored in association with the thread ID the data store indicates that the received message is identified with a thread.

At block Message management service can inspect the received message to determine whether the received message includes one or more reference message IDs. The reference message ID identifies a reference message of the received message.

At block process determines whether each reference message ID is stored in the data store in association with a thread ID in the data store. Existence of a thread ID associated with a reference message ID indicates that the reference message is identified with a thread.

To ensure that thread information is correctly maintained for consistent threading the server computer uses the data store to manage association of a thread ID with message IDs of messages and reference messages. In some embodiments a received message assumes the thread ID of a reference message so that the received message and the reference message are associated with a common thread identified by the thread ID. In such embodiments at block process assigns a thread ID that is associated with a reference message ID to the message ID. For example in the event that the message is associated with a thread ID that is different from the thread ID of the reference message ID the message ID is assigned the thread ID of the reference message ID. In another example in the event that the message ID is not associated with a thread ID the message ID is assigned the thread ID associated with the reference message ID. In other words in these examples the received message assumes the thread ID of a reference message to ensure that the received message and the reference messages are associated with a common thread.

Processing unit s can include a single processor which can have one or more cores or multiple processors. In some embodiments processing unit s can include a general purpose primary processor as well as one or more special purpose co processors such as graphics processors digital signal processors or the like.

Storage subsystem can include various memory units such as a system memory a read only memory ROM and a persistent storage device. A ROM can store static data and instructions that are used by processing unit s and other modules of electronic device . A persistent storage device can be a non volatile readable and writable memory unit that stores instructions and data even when computer system is powered down. System memory can be implemented using volatile read and write memory such as dynamic random access memory or non volatile memory as desired. The system memory can store some or all of the instructions and data that are currently in use by processing unit s .

Storage subsystem or units thereof can be implemented using any combination of computer readable storage media including semiconductor memory chips of various types DRAM SRAM SDRAM flash memory programmable ROM and so on. Magnetic and or optical disks can also be used. In some embodiments storage subsystem can include removable storage media that can be readable and or writeable examples of such media include compact discs CD read only digital versatile discs e.g. DVD ROM dual layer DVD ROM read only and recordable Blue Ray disks ultra density optical disks flash memory cards e.g. SD cards mini SD cards micro SD cards etc. magnetic floppy disks and so on. The computer readable storage media do not include carrier waves and transitory electronic signals passing wirelessly or over wired connections.

In some embodiments storage subsystem can store one or more software programs to be executed by processing unit s such as thread management code . For example thread management code can perform operations or methods described herein as performed by message management service of . Software refers generally to sequences of instructions that when executed by processing unit s cause computer system to perform various operations thus defining one or more specific machine implementations that execute and perform the operations of the software programs. The instructions can be stored as firmware residing in read only memory and or applications stored in magnetic storage that can be read into memory for processing by a processor. Software can be implemented as a single program or a collection of separate programs or program modules that interact as desired. Programs and or data can be stored in non volatile storage and copied in whole or in part to volatile working memory during program execution. From storage subsystem processing unit s can retrieve program instructions to execute and data to process in order to execute various operations described herein. Through suitable programming processing unit s can provide various functionality for computer system . For example processing unit s can execute thread management code .

A user interface can be provided by one or more user input devices display device and or and one or more other user output devices not shown . Input devices can include any device via which a user can provide signals to computing system computing system can interpret the signals as indicative of particular user requests or information.

Display can display images generated by computer system and can include various image generation technologies. Some embodiments can include a device such as a touchscreen that functions as both touch sensitive input device and display device. In some embodiments other user output devices can be provided in addition to or instead of display .

In some embodiments the user interface can provide a graphical user interface in which visible image elements in certain areas of display are defined as active elements or control elements that the user selects using user input devices . For example the user can manipulate a user input device to position an on screen cursor or pointer over the control element then click a button or tap a touch sensitive surface to indicate the selection. Alternatively the user can touch the control element e.g. with a finger or stylus on a touchscreen device. Other user interfaces can also be implemented.

Network interface can provide voice and or data communication capability for computer system . In some embodiments network interface can include radio frequency RF transceiver components for accessing wireless voice and or data networks e.g. using cellular telephone technology advanced data network technology such as 3G 4G or EDGE WiFi IEEE 802.11 family standards or other mobile communication technologies or any combination thereof GPS receiver components and or other components. In some embodiments network interface can provide wired network connectivity e.g. Ethernet in addition to or instead of a wireless interface. Network interface can be implemented using a combination of hardware e.g. antennas modulators demodulators encoders decoders and other analog and or digital signal processing circuits and software components.

Bus can include various system peripheral and chipset buses that communicatively connect the numerous internal devices of computer system . For example bus can communicatively couple processing unit s with storage subsystem . Storage subsystem can include thread management code that are configured to cause the processing unit s to manage threads as described herein. Bus also connects to input devices and display . Bus also couples computer system to a network through network interface . In this manner computer system can be a part of a network of multiple computer systems e.g. a local area network LAN a wide area network WAN an Intranet or a network of networks such as the Internet. Any or all components of computer system can be used in some embodiments of the invention.

Some embodiments include electronic components such as microprocessors storage and memory that store computer program instructions in a computer readable storage medium. Many of the features described in this specification can be implemented as processes that are specified as a set of program instructions encoded on a computer readable storage medium. When these program instructions are executed by one or more processing units they cause the processing unit s to perform various operations indicated in the program instructions. Examples of program instructions or computer code include machine code such as is produced by a compiler and files including higher level code that are executed by a computer an electronic component or a microprocessor using an interpreter.

It will be appreciated that computer system is illustrative and that variations and modifications are possible. Computer system can have other capabilities not specifically described here. Further while computer system is described with reference to particular blocks it is to be understood that these blocks are defined for convenience of description and are not intended to imply a particular physical arrangement of component parts. Further the blocks need not correspond to physically distinct components. Blocks can be configured to perform various operations e.g. by programming a processor or providing appropriate control circuitry and various blocks might or might not be reconfigurable depending on how the initial configuration is obtained. Embodiments of the present invention can be realized in a variety of apparatus including electronic devices implemented using any combination of circuitry and software.

While the invention has been described with respect to specific embodiments one skilled in the art will recognize that numerous modifications are possible. For example message IDs and reference message IDs are used for purposes of illustration to describe information in a message that can be used to determine related messages however other information included in a message such as a subject a title a date a time a message body a signature or a message attachment can be used individually or in combination to identify a relationship between messages e.g. a thread . A message management service e.g. message management service can process received messages to identify any or all of the above information that can be used to identify a relationship of messages e.g. a thread and store in data store the identified information in association with a thread ID. Data store can be used to stored information included in messages to identify a thread of messages that are related by identical or related information. A thread ID can be stored in association with related messages to identify messages that belong to a common thread.

Identified message threads can be useful for any service or client that desires to manage activity and actions with respect to messages. In some embodiments information about message threads can be provided to message providers which can use information about the message threads to manage threads of messages. Message providers can reduce storage and improve efficiency for managing relationships of emails by using the information about message threads provided by a message management service. Clients which can be limited by computing resources can improve efficiency of operation by managing threads of messages based receiving thread information from a message management service as described herein that has computing resources to process large amount of emails. In some embodiments clients can be provided with thread information included in messages that are communicated from a message provider to the clients via a message management service. For example a message management service can insert thread information into a header of messages that are communicated via the message management service. Alternatively or additionally one or more of the thread management processes described herein can be implemented at a client or a message provider. In some embodiments an amount of storage to store thread information such as thread map may not cause a significant use of computing resources.

Embodiments described above may make reference to data structures and databases or data stores. It is to be understood that these terms can encompass any techniques for organizing information into discrete records that can be stored retrieved and interpreted by computer systems.

Embodiments of the present invention can be realized using any combination of dedicated components and or programmable processors and or other programmable devices. The various processes described herein can be implemented on the same processor or different processors in any combination. Where components are described as being configured to perform certain operations such configuration can be accomplished e.g. by designing electronic circuits to perform the operation by programming programmable electronic circuits such as microprocessors to perform the operation or any combination thereof. Further while the embodiments described above may make reference to specific hardware and software components those skilled in the art will appreciate that different combinations of hardware and or software components may also be used and that particular operations described as being implemented in hardware might also be implemented in software or vice versa.

Computer programs incorporating various features of the present invention may be encoded and stored on various computer readable storage media suitable media include magnetic disk or tape optical storage media such as compact disk CD or DVD digital versatile disk flash memory and other non transitory media. Computer readable media encoded with the program code may be packaged with a compatible electronic device or the program code may be provided separately from electronic devices e.g. via Internet download or as a separately packaged computer readable storage medium .

Thus although the invention has been described with respect to specific embodiments it will be appreciated that the invention is intended to cover all modifications and equivalents within the scope of the following claims.

