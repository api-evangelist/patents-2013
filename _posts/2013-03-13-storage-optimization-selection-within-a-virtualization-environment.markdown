---

title: Storage optimization selection within a virtualization environment
abstract: Storage optimization selection for virtual disks of a virtualization environment, where the storage optimization can be selected based in part on the disk type of a virtual disk included in a virtual machine. The disk type of the virtual disk can be discovered by the virtualization environment which queries a database within the virtualization environment for metadata associated with the virtual disk. The metadata can be created when a virtual desktop infrastructure creates the virtual disk, and a virtual machine template that includes the at least one virtual disk. The virtual disk can be modified to either include or be associated with the metadata that describes a disk type of the virtual disk. Upon executing the virtual machine that includes the modified virtual disk, a storage subsystem of the virtualization environment can obtain the metadata of the virtual disk to discover the disk type of the virtual disk.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286087&OS=09286087&RS=09286087
owner: Citrix Systems, Inc.
number: 09286087
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20130313
---
This U.S. Patent Application is a continuation of U.S. patent application Ser. No. 12 750 089 filed on Mar. 30 2010 entitled Storage Optimization Selection Within A Virtualization Environment which is now allowed. The disclosure of this prior application is considered part of the disclosure of this application and is incorporated herein by reference in its entirety.

This application generally relates to virtual machine configuration. In particular this application relates to configuring a virtual disk within a virtual machine.

Virtual machines can typically access virtual disks that are configured using one or more storage optimizations. Configuring a virtual disk to have a particular storage optimization often requires knowledge of the disk type of the virtual disk. When a virtual machine is created the type of virtual disk to be included may not be known. In these instances the virtual machine creator may not be able to choose an effective storage optimization because the virtual machine creator may not know the disk type of the virtual disk.

In virtual desktop infrastructure environments virtual disks can be any disk type. For example a virtual disk can store an operating system image from which a virtual machine boots or the virtual disk can include a non persistent write back cache that stores data that is invalidated and destroyed when a virtual machine is rebooted. In some instances the virtual disk can be an image customization disk created to pass through data and binaries that are used to customize a virtual machine after that virtual machine boots. Different disk types often have different properties therefore these different disk types often map to different disk storage optimizations.

Virtualization platforms often cannot identify the type of disk included in a particular virtual machine. Rather the system that creates the virtual machine is often the only system that knows the disk type of the virtual disk in a particular virtual machine. Selecting a storage specific optimization can therefore be difficult for the virtualization platform because the platform does not know what type of virtual disk is included in a particular virtual machine.

In the broadest sense this disclosure describes methods and systems for informing a virtualization environment of the disk type of a virtual disk included in a virtual machine. In many instances the virtualization environment does not know the disk type of a virtual disk within a virtual machine. Thus the virtualization environment often cannot adequately select a storage specific optimization for the virtual machine. By informing the virtualization environment of the disk type of a virtual disk in a virtual machine that virtualization environment can select an appropriate storage specific optimization for that virtual machine.

In one aspect described herein is a method for selecting storage optimizations for a disk within a virtualization environment using metadata indicating a disk type of the disk. A virtual desktop infrastructure executing on a computing machine creates a virtual machine template comprising at least one virtual disk. The virtual desktop infrastructure then modifies responsive to creating the virtual machine template the at least one of the virtual disk to be associated with or comprise metadata describing a disk type of the at least one virtual disk. A virtualization environment executes a virtual machine that is created using the virtual machine template created by the virtual desktop infrastructure. A storage subsystem of the virtualization environment obtains metadata of the at least one virtual disk and selects a storage optimization for the at least one virtual disk based in part on the disk type described in the metadata.

In some embodiments the method further includes copying the virtual machine template to create a second virtual machine template comprising the at least one virtual disk comprising the metadata describing the disk type.

In other embodiments the method further includes attaching a storage optimized according to the selected storage optimization.

In still other embodiments the storage subsystem selects a storage optimization based in part on the disk type and a specific disk storage type. Modifying the virtual disk in some embodiments can further include modifying the virtual disk to be associated with or comprise metadata to describe an operating system image disk type. In these embodiments the storage subsystem can select a storage optimization comprising creating a cache of the virtual disk.

In one embodiment the virtual disk can be modified to be associated with or comprise metadata describing a non persistent cache disk type. The storage subsystem in this embodiment can select a storage optimization that comprises any one of re order writes and early write acknowledgements.

In another embodiment the virtual disk can be modified to be associated with or comprise metadata describing an image customization disk type. The storage subsystem in this embodiment can select a storage optimization that comprises security measures.

In another aspect described herein is a system for selecting storage optimizations for a disk within a virtualization environment using metadata indicating a disk type of the disk. The system includes a virtual desktop infrastructure that executes on a computing machine to create a virtual machine template comprising at least one virtual disk. The virtual desktop infrastructure then modifies in response to creating the virtual machine template the at least one virtual disk to be associated with or comprise metadata describing a disk type of the at least one virtual disk. The system further includes a virtual machine executing within a virtualization environment where the virtual machine created using the virtual machine template created by the virtual desktop infrastructure. Also included is a storage subsystem that executes within the virtualization environment to obtain the metadata of the at least one virtual disk. Upon obtaining the metadata the storage subsystem selects a storage optimization for the at least one virtual disk based in part on the disk type described in the metadata.

In one embodiment the computing environment can include an appliance installed between the server s and client machine s . This appliance can mange client server connections and in some cases can load balance client connections amongst a plurality of backend servers.

The client machine s can in some embodiment be referred to as a single client machine or a single group of client machines while server s may be referred to as a single server or a single group of servers . In one embodiment a single client machine communicates with more than one server while in another embodiment a single server communicates with more than one client machine . In yet another embodiment a single client machine communicates with a single server .

A client machine can in some embodiments be referenced by any one of the following terms client machine s client s client computer s client device s client computing device s local machine remote machine client node s endpoint s endpoint node s or a second machine. The server in some embodiments may be referenced by any one of the following terms server s local machine remote machine server farm s host computing device s or a first machine s .

In one embodiment the client machine can be a virtual machine C. The virtual machine C can be any virtual machine while in some embodiments the virtual machine C can be any virtual machine managed by a hypervisor developed by XenSolutions Citrix Systems IBM VMware or any other hypervisor. In other embodiments the virtual machine C can be managed by any hypervisor while in still other embodiments the virtual machine C can be managed by a hypervisor executing on a server or a hypervisor executing on a client .

The client machine can in some embodiments execute operate or otherwise provide an application that can be any one of the following software a program executable instructions a virtual machine a hypervisor a web browser a web based client a client server application a thin client computing client an ActiveX control a Java applet software related to voice over internet protocol VoIP communications like a soft IP telephone an application for streaming video and or audio an application for facilitating real time data communications a HTTP client a FTP client an Oscar client a Telnet client or any other set of executable instructions. Still other embodiments include a client device that displays application output generated by an application remotely executing on a server or other remotely located machine. In these embodiments the client device can display the application output in an application window a browser or other output window. In one embodiment the application is a desktop while in other embodiments the application is an application that generates a desktop.

The server in some embodiments executes a remote presentation client or other client or program that uses a thin client or remote display protocol to capture display output generated by an application executing on a server and transmits the application display output to a remote client . The thin client or remote display protocol can be any one of the following protocols the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash.

The computing environment can include more than one server A N such that the servers A N are logically grouped together into a server farm . The server farm can include servers that are geographically dispersed and logically grouped together in a server farm or servers that are located proximate to each other and logically grouped together in a server farm . Geographically dispersed servers A N within a server farm can in some embodiments communicate using a WAN MAN or LAN where different geographic regions can be characterized as different continents different regions of a continent different countries different states different cities different campuses different rooms or any combination of the preceding geographical locations. In some embodiments the server farm may be administered as a single entity while in other embodiments the server farm can include multiple server farms .

In some embodiments a server farm can include servers that execute a substantially similar type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. UNIX LINUX or SNOW LEOPARD. In other embodiments the server farm can include a first group of servers that execute a first type of operating system platform and a second group of servers that execute a second type of operating system platform. The server farm in other embodiments can include servers that execute different types of operating system platforms.

The server in some embodiments can be any server type. In other embodiments the server can be any of the following server types a file server an application server a web server a proxy server an appliance a network appliance a gateway an application gateway a gateway server a virtualization server a deployment server a SSL VPN server a firewall a web server an application server or as a master application server a server executing an active directory or a server executing an application acceleration program that provides firewall functionality application functionality or load balancing functionality. In some embodiments a server may be a RADIUS server that includes a remote authentication dial in user service. In embodiments where the server comprises an appliance the server can be an appliance manufactured by any one of the following manufacturers the Citrix Application Networking Group Silver Peak Systems Inc Riverbed Technology Inc. F5 Networks Inc. or Juniper Networks Inc. Some embodiments include a first server A that receives requests from a client machine forwards the request to a second server B and responds to the request generated by the client machine with a response from the second server B. The first server A can acquire an enumeration of applications available to the client machine and well as address information associated with an application server hosting an application identified within the enumeration of applications. The first server A can then present a response to the client s request using a web interface and communicate directly with the client to provide the client with access to an identified application.

The server can in some embodiments execute any one of the following applications a thin client application using a thin client protocol to transmit application display data to a client a remote display presentation application any portion of the CITRIX ACCESS SUITE by Citrix Systems Inc. like the METAFRAME or CITRIX PRESENTATION SERVER MICROSOFT WINDOWS Terminal Services manufactured by the Microsoft Corporation or an ICA client developed by Citrix Systems Inc. Another embodiment includes a server that is an application server such as an email server that provides email services such as MICROSOFT EXCHANGE manufactured by the Microsoft Corporation a web or Internet server a desktop sharing server a collaboration server or any other type of application server. Still other embodiments include a server that executes any one of the following types of hosted servers applications GOTOMEETING provided by Citrix Online Division Inc. WEBEX provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office LIVE MEETING provided by Microsoft Corporation.

Client machines can in some embodiments be a client node that seeks access to resources provided by a server . In other embodiments the server may provide clients or client nodes with access to hosted resources. The server in some embodiments functions as a master node such that it communicates with one or more clients or servers . In some embodiments the master node can identify and provide address information associated with a server hosting a requested application to one or more clients or servers . In still other embodiments the master node can be a server farm a client a cluster of client nodes or an appliance.

One or more clients and or one or more servers can transmit data over a network installed between machines and appliances within the computing environment . The network can comprise one or more sub networks and can be installed between any combination of the clients servers computing machines and appliances included within the computing environment . In some embodiments the network can be a local area network LAN a metropolitan area network MAN a wide area network WAN a primary network comprised of multiple sub networks located between the client machines and the servers a primary public network with a private sub network a primary private network with a public sub network or a primary private network with a private sub network . Still further embodiments include a network that can be any of the following network types a point to point network a broadcast network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network a wireline network or a network that includes a wireless link where the wireless link can be an infrared channel or satellite band. The network topology of the network can differ within different embodiments possible network topologies include a bus network topology a star network topology a ring network topology a repeater based network topology or a tiered star network topology. Additional embodiments may include a network of mobile telephone networks that use a protocol to communicate among mobile devices where the protocol can be any one of the following AMPS TDMA CDMA GSM GPRS UMTS or any other protocol able to transmit data among mobile devices.

Illustrated in is an embodiment of a computing device where the client machine and server illustrated in can be deployed as and or executed on any embodiment of the computing device illustrated and described herein. Included within the computing device is a system bus that communicates with the following components a central processing unit a main memory storage memory an input output I O controller display devices A N an installation device and a network interface . In one embodiment the storage memory includes an operating system software routines and a client agent . The I O controller in some embodiments is further connected to a key board and a pointing device . Other embodiments may include an I O controller connected to more than one input output device A N.

Embodiments of the computing machine can include a central processing unit characterized by any one of the following component configurations logic circuits that respond to and process instructions fetched from the main memory unit a microprocessor unit such as those manufactured by Intel Corporation those manufactured by Motorola Corporation those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor such as those manufactured by International Business Machines a processor such as those manufactured by Advanced Micro Devices or any other combination of logic circuits. Still other embodiments of the central processing unit may include any combination of the following a microprocessor a microcontroller a central processing unit with a single processing core a central processing unit with two processing cores or a central processing unit with more than one processing core.

While illustrates a computing device that includes a single central processing unit in some embodiments the computing device can include one or more processing units . In these embodiments the computing device may store and execute firmware or other executable instructions that when executed direct the one or more processing units to simultaneously execute instructions or to simultaneously execute instructions on a single piece of data. In other embodiments the computing device may store and execute firmware or other executable instructions that when executed direct the one or more processing units to each execute a section of a group of instructions. For example each processing unit may be instructed to execute a portion of a program or a particular module within a program.

In some embodiments the processing unit can include one or more processing cores. For example the processing unit may have two cores four cores eight cores etc. In one embodiment the processing unit may comprise one or more parallel processing cores. The processing cores of the processing unit may in some embodiments access available memory as a global address space or in other embodiments memory within the computing device can be segmented and assigned to a particular core within the processing unit . In one embodiment the one or more processing cores or processors in the computing device can each access local memory. In still another embodiment memory within the computing device can be shared amongst one or more processors or processing cores while other memory can be accessed by particular processors or subsets of processors. In embodiments where the computing device includes more than one processing unit the multiple processing units can be included in a single integrated circuit IC . These multiple processors in some embodiments can be linked together by an internal high speed bus which may be referred to as an element interconnect bus.

In embodiments where the computing device includes one or more processing units or a processing unit including one or more processing cores the processors can execute a single instruction simultaneously on multiple pieces of data SIMD or in other embodiments can execute multiple instructions simultaneously on multiple pieces of data MIMD . In some embodiments the computing device can include any number of SIMD and MIMD processors.

The computing device in some embodiments can include a graphics processor or a graphics processing unit Not Shown . The graphics processing unit can include any combination of software and hardware and can further input graphics data and graphics instructions render a graphic from the inputted data and instructions and output the rendered graphic. In some embodiments the graphics processing unit can be included within the processing unit . In other embodiments the computing device can include one or more processing units where at least one processing unit is dedicated to processing and rendering graphics.

One embodiment of the computing machine includes a central processing unit that communicates with cache memory via a secondary bus also known as a backside bus while another embodiment of the computing machine includes a central processing unit that communicates with cache memory via the system bus . The local system bus can in some embodiments also be used by the central processing unit to communicate with more than one type of I O device A N. In some embodiments the local system bus can be any one of the following types of buses a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. Other embodiments of the computing machine include an I O device A N that is a video display that communicates with the central processing unit . Still other versions of the computing machine include a processor connected to an I O device A N via any one of the following connections HyperTransport Rapid I O or InfiniBand. Further embodiments of the computing machine include a processor that communicates with one I O device A using a local interconnect bus and a second I O device B using a direct connection.

The computing device in some embodiments includes a main memory unit and cache memory . The cache memory can be any memory type and in some embodiments can be any one of the following types of memory SRAM BSRAM or EDRAM. Other embodiments include cache memory and a main memory unit that can be any one of the following types of memory Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM Ferroelectric RAM FRAM or any other type of memory. Further embodiments include a central processing unit that can access the main memory via a system bus a memory port or any other connection bus or port that allows the processor to access memory .

One embodiment of the computing device provides support for any one of the following installation devices a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device a bootable medium a bootable CD a bootable CD for GNU Linux distribution such as KNOPPIX a hard drive or any other device suitable for installing applications or software. Applications can in some embodiments include a client agent or any portion of a client agent . The computing device may further include a storage device that can be either one or more hard disk drives or one or more redundant arrays of independent disks where the storage device is configured to store an operating system software programs applications or at least a portion of the client agent . A further embodiment of the computing device includes an installation device that is used as the storage device .

The computing device may further include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 SNA DECNET broadband connections e.g. ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET wireless connections or some combination of any or all of the above. Connections can also be established using a variety of communication protocols e.g. TCP IP TPX SPX NetBIOS Ethernet ARCNET SONET SDH Fiber Distributed Data Interface FDDI RS232 RS485 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g CDMA GSM WiMax and direct asynchronous connections . One version of the computing device includes a network interface able to communicate with additional computing devices via any type and or form of gateway or tunneling protocol such as Secure Socket Layer SSL or Transport Layer Security TLS or the Citrix Gateway Protocol manufactured by Citrix Systems Inc. Versions of the network interface can comprise any one of a built in network adapter a network interface card a PCMCIA network card a card bus network adapter a wireless network adapter a USB network adapter a modem or any other device suitable for interfacing the computing device to a network capable of communicating and performing the methods and systems described herein.

Embodiments of the computing device include any one of the following I O devices A N a keyboard a pointing device mice trackpads an optical pen trackballs microphones drawing tablets video displays speakers inkjet printers laser printers and dye sublimation printers or any other input output device able to perform the methods and systems described herein. An I O controller may in some embodiments connect to multiple I O devices A N to control the one or more I O devices. Some embodiments of the I O devices A N may be configured to provide storage or an installation medium while others may provide a universal serial bus USB interface for receiving USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. Still other embodiments include an I O device that may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super WPM bus a SerialPlus bus a SCl LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

In some embodiments the computing machine can connect to multiple display devices A N in other embodiments the computing device can connect to a single display device while in still other embodiments the computing device connects to display devices A N that are the same type or form of display or to display devices that are different types or forms. Embodiments of the display devices A N can be supported and enabled by the following one or multiple I O devices A N the I O controller a combination of I O device s A N and the I O controller any combination of hardware and software able to support a display device A N any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices A N. The computing device may in some embodiments be configured to use one or multiple display devices A N these configurations include having multiple connectors to interface to multiple display devices A N having multiple video adapters with each video adapter connected to one or more of the display devices A N having an operating system configured to support multiple displays A N using circuits and software included within the computing device to connect to and use multiple display devices A N and executing software on the main computing device and multiple secondary computing devices to enable the main computing device to use a secondary computing device s display as a display device A N for the main computing device . Still other embodiments of the computing device may include multiple display devices A N provided by multiple secondary computing devices and connected to the main computing device via a network.

In some embodiments the computing machine can execute any operating system while in other embodiments the computing machine can execute any of the following operating systems versions of the MICROSOFT WINDOWS operating systems such as WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE WINDOWS XP and WINDOWS VISTA the different releases of the Unix and Linux operating systems any version of the MAC OS manufactured by Apple Computer OS 2 manufactured by International Business Machines any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system. In still another embodiment the computing machine can execute multiple operating systems. For example the computing machine can execute PARALLELS or another virtualization platform that can execute or manage a virtual machine executing a first operating system while the computing machine executes a second operating system different from the first operating system.

The computing machine can be embodied in any one of the following computing devices a computing workstation a desktop computer a laptop or notebook computer a server a handheld computer a mobile telephone a portable telecommunication device a media playing device a gaming system a mobile computing device a netbook a device of the IPOD family of devices manufactured by Apple Computer any one of the PLAYSTATION family of devices manufactured by the Sony Corporation any one of the Nintendo family of devices manufactured by Nintendo Co any one of the XBOX family of devices manufactured by the Microsoft Corporation or any other type and or form of computing telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the methods and systems described herein. In other embodiments the computing machine can be a mobile device such as any one of the following mobile devices a JAVA enabled cellular telephone or personal digital assistant PDA such as the i55sr i58sr i85s i88s i90c i95cl or the im1100 all of which are manufactured by Motorola Corp the 6035 or the 7135 manufactured by Kyocera the i300 or i330 manufactured by Samsung Electronics Co. Ltd the TREO 180 270 600 650 680 700p 700w or 750 smart phone manufactured by Palm Inc any computing device that has different processors operating systems and input devices consistent with the device or any other mobile computing device capable of performing the methods and systems described herein. In still other embodiments the computing device can be any one of the following mobile computing devices any one series of Blackberry or other handheld device manufactured by Research In Motion Limited the iPhone manufactured by Apple Computer Palm Pre a Pocket PC a Pocket PC Phone or any other handheld mobile device.

Illustrated in is one embodiment of a virtualization environment. Included on a computing device is a hardware layer that can include one or more physical disks one or more physical devices one or more physical processors and a physical memory . In some embodiments firmware can be stored within a memory element in the physical memory and can be executed by one or more of the physical processors . The computing device can further include an operating system that can be stored in a memory element in the physical memory and executed by one or more of the physical processors . Still further a hypervisor can be stored in a memory element in the physical memory and can be executed by one or more of the physical processors . Executing on one or more of the physical processors can be one or more virtual machines A C generally . Each virtual machine can have a virtual disk A C and a virtual processor A C. In some embodiments a first virtual machine A can execute on a virtual processor A a control program that includes a tools stack . In other embodiments one or more virtual machines B C can executed on a virtual processor B C a guest operating system A B.

Further referring to and in more detail in one embodiment the virtualization environment described includes a Type 2 hypervisor or a hypervisor that executes within an operating system executing on the computing device . A Type 2 hypervisor in some embodiments executes within an operating system environment and virtual machines execute at a level above the hypervisor. In many embodiments the Type 2 hypervisor executes within the context of a user s operating system such that the Type 2 hypervisor interacts with the user s operating system.

In some embodiments the virtualization environment includes a computing device . The computing device can be any computing device and in some embodiments the computing device can be any computer device or computing machine described herein. While illustrates a single computing device in some embodiments the modules programs virtual machines and commands stored and executed by the computing device can be executed by more than one computing device . In still other embodiments the computing device can be a server farm.

In one embodiment the computing device can include a hardware layer that includes one or more pieces of hardware that communicates with the computing machine . In some embodiments the hardware layer can include any hardware included in the computing device . In other embodiments the hardware layer can include one or more physical disks one or more physical devices one or more physical processors and memory .

The hardware layer in some embodiments can include one or more physical disks . A physical disk can be any hard disk while in some embodiments a physical disk can be any hard disk described herein. In some embodiments the hardware layer can include one physical disk . In other embodiments the hardware layer can include more than one physical disk . The computing device in some embodiments can communicate with an external hard disk that is included in the hardware layer as a physical disk .

In other embodiments the hardware layer can include a processor . The processor in some embodiments can be any processor while in other embodiments the processor can be any processor described herein. The processor can include one or more processing cores. In other embodiments the computing device can include one or more processors . In some embodiments the computing device can include one or more different processors e.g. a processing unit a graphics processing unit or a physics engine.

Physical devices in some embodiments can be any device included in the computing device . In some embodiments physical devices can be any combination of devices included in the computing device and external devices that communicate with the computing device . The computing device in some embodiments can include one or more physical devices . A physical device can be any of the following a network interface card a video card a keyboard a mouse an input device a monitor a display device speakers an optical drive a storage device a universal serial bus connection any device connected to the computing device any device communicating with the computing device a printer a scanner or any other device or device described herein.

The hardware layer can further include physical memory that can include any type of memory. In some embodiments the physical memory can include any memory type described herein. The physical memory can store data and in some embodiments can store one or more programs or set of executable instructions. illustrates one embodiment where firmware is stored within the physical memory of the computing device . Programs or executable instructions stored in the physical memory can be executed by the one or more processors of the computing device .

Firmware in some embodiments can be any combination of executable instructions and hardware that controls hardware communicating with or included within the computing device . In some embodiments the firmware can control one or more pieces of hardware within the hardware layer . Firmware in many embodiments can be executed by one or more processors within the computing device . In some embodiments the firmware can be boot firmware such as the basic input output system BIOS. Additional firmware executing on the computing device can interface with the BIOS.

In one embodiment the computing device can include an operating system executed by one or more physical processors . In some embodiments the operating system is a user operating system that can directly access the hardware devices in the hardware layer . The operating system can be any operating system and in some embodiments the operating system can be any operating system described herein. illustrates one embodiment where the hypervisor executes within the context of the operating system executing on the computing device . In this embodiment the operating system can be referred to as a host operating system while the other operating systems can be referred to as guest operating systems. Guest operating systems can include the guest operating systems A B executing on the virtual machines and or the control program .

In some embodiments the computing device can include a hypervisor . A hypervisor in some embodiments can be a program that executed by processors on the computing device to manage any number of virtual machines. The hypervisor can be referred to as a virtual machine monitor or platform virtualization software. In some embodiments a hypervisor can be any combination of executable instructions and hardware that monitors virtual machines executing on a computing machine. While illustrates a virtualization environment that includes a Type 2 hypervisor the computing device can execute any other type of hypervisor. For example the computing device can execute a virtualization environment that includes a Type 1 hypervisor . In some embodiments the computing device can execute one or more hypervisors . These one or more hypervisors can be the same type of hypervisor or in other embodiments can be different hypervisor types.

The hypervisor in some embodiments can provide virtual resources to operating systems or control programs executing on virtual machines in any manner that simulates the operating systems or control programs having direct access to system resources. System resources can include physical devices physical disks physical processors physical memory and any other component included in the computing device hardware layer . In these embodiments the hypervisor may be used to emulate virtual hardware partition physical hardware virtualize physical hardware or execute virtual machines that provide access to computing environments. In still other embodiments the hypervisor controls processor scheduling and memory partitioning for a virtual machine executing on the computing device . Hypervisor may include those manufactured by VMWare Inc. of Palo Alto Calif. the XEN hypervisor an open source product whose development is overseen by the open source Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft or others. In some embodiments a computing device executes a hypervisor that creates a virtual machine platform on which guest operating systems may execute. In these embodiments the computing device can be referred to as a host server. An example of such a computing device is the XEN SERVER provided by Citrix Systems Inc. of Fort Lauderdale Fla.

In one embodiment the hypervisor can create a virtual machine A B generally in which an operating system executes. In one of these embodiments for example the hypervisor loads a virtual machine image to create a virtual machine . In another of these embodiments the hypervisor executes an operating system within the virtual machine . In still another of these embodiments the virtual machine executes an operating system .

In one embodiment the hypervisor controls the execution of at least one virtual machine . In another embodiment the hypervisor presents at least one virtual machine with an abstraction of at least one hardware resource provided by the computing device . The abstraction can further be referred to as a virtualization or virtual view of the hardware memory processor and other system resources available on the computing device . Hardware or hardware resources in some embodiments can be any hardware resource available within the hardware layer . In other embodiments the hypervisor controls the manner in which virtual machines access the physical processors available in the computing device . Controlling access to the physical processors can include determining whether a virtual machine should have access to a processor and how physical processor capabilities are presented to the virtual machine .

In some embodiments the computing device can host or execute one or more virtual machines . A virtual machine can be called a domain a guest and or a DOMAIN U. A virtual machine is a set of executable instructions that when executed by a processor imitate the operation of a physical computer such that the virtual machine can execute programs and processes much like a physical computing device. While illustrates an embodiment where a computing device hosts three virtual machines in other embodiments the computing device can host any number of virtual machines . The hypervisor in some embodiments provides each virtual machine with a unique virtual view of the physical hardware memory processor and other system resources available to that virtual machine . In some embodiments the unique virtual view can be based on any of the following virtual machine permissions application of a policy engine to one or more virtual machine identifiers the user accessing a virtual machine the applications executing on a virtual machine networks accessed by a virtual machine or any other similar criteria. The hypervisor in other embodiments provides each virtual machine with a substantially similar virtual view of the physical hardware memory processor and other system resources available to the virtual machines .

Each virtual machine can include a virtual disk A C generally and a virtual processor A C generally . The virtual disk in some embodiments is a virtualized view of one or more physical disks of the computing device or a portion of one or more physical disks of the computing device . The virtualized view of the physical disks can be generated provided and managed by the hypervisor . In some embodiments the hypervisor provides each virtual machine with a unique view of the physical disks . Thus in these embodiments the virtual disk included in each virtual machine can be unique when compared with the other virtual disks .

A virtual processor can be a virtualized view of one or more physical processors of the computing device . In some embodiments the virtualized view of the physical processors can be generated provided and managed by the hypervisor . In some embodiments the virtual processor has substantially all of the same characteristics of at least one physical processor . In other embodiments the virtual processor provides a modified view of the physical processors such that at least some of the characteristics of the virtual processor are different than the characteristics of the corresponding physical processor .

A control program may execute at least one application for managing and configuring the guest operating systems executing on the virtual machines and in some embodiments the computing device . In some embodiments the control program can be called a control operating system a control domain domain 0 or dom 0. The control program in some embodiments can be DOMAIN o or DOM0 of the XEN hypervisor. The control program can execute an administrative application or program that can further display a user interface which administrators can use to access the functionality of each virtual machine and or to manage the virtual machines . In some embodiments the user interface generated by the administrative program can be used to terminate the execution of virtual machines allocate resources to virtual machines assign permissions to virtual machines or manage security credentials associated with virtual machines . The control program in some embodiments can start new virtual machines or terminate execution of executing virtual machines . In other embodiments the control program can directly access hardware and or resources within the hardware layer . In still another embodiment the control program can interface with programs and applications executing on the computing device and outside of the context of a virtual machine . Similarly the control program can interface with programs and applications executing within the context of a virtual machine .

In one embodiment the hypervisor can execute the control program within a virtual machine . The hypervisor can create and start the virtual machine . In embodiments where the hypervisor executes the control program within a virtual machine that virtual machine can be referred to as the control virtual machine . In still another embodiment the control program executes within a virtual machine that is authorized to directly access physical resources on the computing device .

In some embodiments a control program A Not Shown on a first computing device A Not Shown may exchange data with a control program B Not Shown on a second computing device B Not Shown . In these embodiments the first computing device A may be located remote from the second computing device B. The control programs A B can exchange data via a communication link between a hypervisor A Not Shown executing on the first computing device A and a hypervisor B Not Shown executing on the second computing device B. Through this communication link the computing devices A B can exchange data regarding processors and other physical resources available in a pool of resources. Further through this connection between hypervisors A B the hypervisors A B can manage a pool of resources e.g. the resources available on the first computing device A and the second computing device B distributed across one or more computing devices A B. The hypervisors A B can further virtualize these resources and make them available to virtual machines executing on the computing devices A B. In another instance of this embodiment a single hypervisor can manage and control virtual machines executing on both computing devices A B.

In some embodiments the control program interacts with one or more guest operating systems A B generally . The control program can communicate with the guest operating systems through a hypervisor . Through the hypervisor the guest operating system can request access to physical disks physical processors memory physical devices and any other component in the hardware layer . In still other embodiments the guest operating systems can communicate with the control program via a communication channel established by the hypervisor such as for example via a plurality of shared memory pages made available by the hypervisor .

In some embodiments the control program includes a network back end driver for communicating directly with networking hardware provided by the computing device . In one of these embodiments the network back end driver processes at least one virtual machine request from at least one guest operating system . In other embodiments the control program includes a block back end driver for communicating with a storage element on the computing device . In one of these embodiments the block back end driver reads and writes data from the storage element based upon at least one request received from a guest operating system .

In another embodiment the control program includes a tools stack . In another embodiment a tools stack provides functionality for interacting with the hypervisor communicating with other control programs for example on a second computing device B or managing virtual machines on the computing device . In another embodiment the tools stack includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In some embodiments at least one of the tools stack and the control program include a management API that provides an interface for remotely configuring and controlling virtual machines running on a computing device . In other embodiments the control program communicates with the hypervisor through the tools stack .

In one embodiment the hypervisor executes a guest operating system within a virtual machine created by the hypervisor . In another embodiment the guest operating system provides a user of the computing device with access to resources within a computing environment. In still another embodiment a resource includes a program an application a document a file a plurality of applications a plurality of files an executable program file a desktop environment a computing environment or other resource made available to a user of the computing device . In yet another embodiment the resource may be delivered to the computing device via a plurality of access methods including but not limited to conventional installation directly on the computing device delivery to the computing device via a method for application streaming delivery to the computing device of output data generated by an execution of the resource on a second computing device and communicated to the computing device via a presentation layer protocol delivery to the computing device of output data generated by an execution of the resource via a virtual machine executing on a second computing device or execution from a removable storage device connected to the computing device such as a USB device or via a virtual machine executing on the computing device and generating output data. In some embodiments the computing device transmits output data generated by the execution of the resource to another computing device .

In one embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a fully virtualized virtual machine that is not aware that it is a virtual machine such a machine may be referred to as a Domain U HVM Hardware Virtual Machine virtual machine In another embodiment a fully virtualized machine includes software emulating a Basic Input Output System BIOS in order to execute an operating system within the fully virtualized machine. In still another embodiment a fully virtualized machine may include a driver that provides functionality by communicating with the hypervisor . In such an embodiment the driver is typically aware that it executes within a virtualized environment.

In another embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a paravirtualized virtual machine which is aware that it is a virtual machine such a machine may be referred to as a Domain U PV virtual machine . In another embodiment a paravirtualized machine includes additional drivers that a fully virtualized machine does not include. In still another embodiment the paravirtualized machine includes the network back end driver and the block back end driver included in a control program as described above.

Illustrated in is another embodiment of a virtualization environment that illustrates a Type 1 hypervisor . Executing on the computing device is a hypervisor that can directly access the hardware and resources within the hardware layer . Virtual machines managed by the hypervisor can be an unsecure virtual machine B and or a secure virtual machine C. Whereas the virtualization environment depicted in illustrates a host operating system the virtualization environment embodiment in does not execute a host operating system.

Further referring to and in more detail the virtualization environment includes a Type 1 hypervisor . Type 1 hypervisors in some embodiments execute on bare metal such that the hypervisor has direct access to all applications and processes executing on the computing device all resources on the computing device and all hardware on the computing device or communicating with the computing device . While a Type 2 hypervisor accesses system resources through a host operating system a Type 1 hypervisor can directly access all system resources. The Type 1 hypervisor can execute directly on one or more physical processors of the computing device and can include program data stored in the physical memory .

In a virtualization environment that employs a Type 1 hypervisor configuration the host operating system can be executed by one or more virtual machines . Thus a user of the computing device can designate one or more virtual machines as the user s personal machine. This virtual machine can imitate the host operating system by allowing a user to interact with the computing device in substantially the same manner that the user would interact with the computing device via a host operating system .

Virtual machines can be unsecure virtual machines B and secure virtual machine C. While illustrates a secure and unsecure virtual machine sometimes they can be referred to as privileged and unprivileged virtual machines. In some embodiments a virtual machine s security can be determined based on a comparison of the virtual machine to other virtual machines executing within the same virtualization environment. For example were a first virtual machine to have access to a pool of resources and a second virtual machine not to have access to the same pool of resources the second virtual machine could be considered an unsecure virtual machine B while the first virtual machine could be considered a secure virtual machine A. In some embodiments a virtual machine s ability to access one or more system resources can be configured using a configuration interface generated by either the control program or the hypervisor . In other embodiments the level of access afforded to a virtual machine can be the result of a review of any of the following sets of criteria the user accessing the virtual machine one or more applications executing on the virtual machine the virtual machine identifier a risk level assigned to the virtual machine based on one or more factors or any other similar criteria.

In some embodiments unsecure virtual machines B may be prevented from accessing resources hardware memory locations and programs that secure virtual machines A may access. For example a secure virtual machine C may be able to access one or more company resources while the unsecure virtual machine B cannot access any company resources.

Illustrated in is one embodiment of a system that includes a computing device executing a virtualization environment and a computing device that executes a virtual desktop infrastructure VDI platform and a performance monitoring system . The virtualization environment executing on the computing device can be any virtualization environment described herein. The illustrated embodiment depicts a virtualization environment that includes a hypervisor a control virtual machine A and one or more additional virtual machines B. The control virtual machine A can include a control program communicating with a virtual disk A associated with metadata . The control program can further include a disk type database which can store the metadata associated with the virtual disks of the virtualization environment . The additional virtual machine s B can execute a guest operating system A that communicates with a virtual disk B associated with metadata . The computing device can include a hardware layer that interfaces with the hypervisor and that includes a storage subsystem . The other computing device can include a VDI platform that can encompass a virtual machine template pool of one or more virtual machine templates A N herein generally referred to as virtual machine template and a group of VDI user sessions that includes one or more user sessions A N herein generally referred to a user sessions . The other computing device can also execute a virtual machine creator .

Further referring to and in more detail in one embodiment each computing device can be any computing device described herein. In some embodiments the computing devices can be a server or a client . The computing devices can be referred to a first computer a second computer a third computer etc. Furthermore the computing devices can communicate with one another over a network such as any network described herein. In one embodiment one computing device can be a remote computer while the other computing device can be a local computer . As the computing devices can be any computing machine described herein so too the hardware layer can be any hardware layer described herein and can include any computer hardware described herein.

The virtualization environment executing on the computing device can be any virtualization environment described herein. In particular the virtualization environment can include any hypervisor configuration or either the hypervisor configuration illustrated in or the hypervisor configuration illustrated in . In one embodiment the hypervisor included in the virtualization environment can be any hypervisor or any hypervisor described herein.

The hardware layer in some embodiments can include a storage subsystem . In one embodiment the storage subsystem can be a system that includes the physical hard disks of the computing device and management programs for managing read writes to those physical disks. In still other embodiments the storage subsystem can include any physical storage repository of the computing device including permanent memory storage temporary memory storage disk drives e.g. optical floppy tape hard disks external hard drives flash memory network attached storage a storage area network or any other storage repository that the computing device can access. When the storage subsystem optimizes storage characteristics in light of a virtual disk included in a virtual machine can include determining an optimal way to read write to physical disks of the computing machine to service requests to access the virtual disk .

A storage subsystem in some embodiments can select a storage optimization to optimize management of the physical memory resources. In these embodiments the virtualization environment does not select the storage optimizations but rather passes disk type data and virtual disk information to the storage subsystem so that the subsystem can select a storage optimization. The storage subsystem can have access to different storage optimizations depending on the type of available storage and the disk type of a virtual disk . These optimizations can be made available through plugins or other modular applications. Using information about the virtual disk disk type and the amount type and restrictions on the physical storage of the computing device the storage subsystem can select an appropriate storage optimization.

In one embodiment the virtual disk included in each virtual machine can further store include or be associated with metadata . Metadata can be stored in a disk type database within the control program or can be stored in any centralized storage repository on the computing device . For example the metadata can be stored in a storage repository within the control virtual machine or within a storage repository accessible by the hypervisor or any other similar storage mechanism. In some embodiments the metadata can be stored directly on the virtual disk s . The metadata can be any form of metadata such as electronic information electronic files tags images documents text files tables lists or any other form of electronic data that includes information. The metadata can include information related to the virtual disk such as the disk type the functionalities associated with the disk compression schemes for the disk or any other information related to the disk.

The metadata can in some embodiments be stored in a disk type database stored within the context of the control program . In other embodiments the disk type database can be stored within the control virtual machine A or within any centralized storage area that can be accessed by each of the virtual machines within the virtualization environment and the control program . The disk type database can be any database and in some embodiments can be any storage repository. The metadata stored in the disk type database can be any type of metadata described herein and can be metadata associated with the virtual disks of the virtualization environment . While illustrates a virtualization environment on a single physical machine in other embodiments the database that stores the metadata can store the metadata for virtual disks within virtual machines not executing on the same physical machine as the disk type database . In other embodiments the disk type database can store metadata for multiple virtual disks in multiple virtualization environments where the virtualization environments can execute on different and separate physical computers. In still other embodiments the disk type database can be located on a computer or storage device remotely located from the computing device .

In one embodiment each virtual disk can have a disk type. A disk type can be a characterization of the functions performed by the virtual disk . In some embodiments the disk type can refer to a primary use of the virtual disk . Although the disk type can indicate a primary functionality or purpose the virtual disk may in some embodiments perform other functions that do not fall within the typical characteristics of a disk type assigned to the virtual disk . The following chart illustrates exemplary disk types and a typical storage optimization for that disk type. The chart is not dispositive of every possible disk type or storage optimization but rather is descriptive of embodiments of disk types and accompanying storage optimizations.

As illustrated above in Chart 1 in one embodiment a disk that has a disk type identifying the virtual disk as an OS image can be optimized by determining that a local in memory cache of a common parent should be created. In this embodiment the selected optimization can be selected based on an assumption that many OS images are created from a gold standard image that contains a base suite of programs. Thus there is a substantially high likelihood that other virtual machines executing in the same virtualization environment as the virtual machine that has this virtual disk also contain an OS image created from substantially the same gold standard image. This characteristic of the OS image virtual disk can lead to a determination that a way to optimize the storage subsystem can be to create an in memory per host cache of the disk s parent in snapshot chain. By optimizing the storage system in this manner the storage system can now read from a single in memory cache of the gold standard disk rather than have to read from each virtual machine disk within the virtualization environment . Furthermore by optimizing the storage subsystem the system can be optimized such that virtual machine boot time can be reduced since the control program need only read from a single gold standard cache of the OS. Similarly the number of input output operations can be reduced because rather than each process or application needing to read from the storage of each virtual machine these processes and applications can read from the gold standard cache when the requested information relates to the OS image. Therefore in this embodiment caching the virtual disk s parent image can lead to system optimizations such as a reduced boot time a reduced number of input output operations a reduced number of read requests and a compartmentalization of the OS image storage into a single location within the virtualization environment .

Also illustrated in Chart 1 is an embodiment of a disk that has a disk type identifying the virtual disk as a non persistent cache. In one embodiment there exist multiple ways to optimize a storage subsystem for a non persistent cache virtual disk . Chart 1 describes three exemplary ways in which the storage subsystem can be optimized. In one embodiment the storage subsystem can be permitted to re order writes issued to a virtual disk . Typically storage subsystems cannot re order writes issued by an application to a virtual disk . This restriction results from the relationship between the storage subsystem the operating system and applications executing within the context of the operating system to commit writes to a disk in the order in which the writes are received. Enforcing this policy ensures system consistency. However when a virtual machine boots after a crash data stored on the disk in the virtual machine can be destroyed thus it becomes safe to reorder writes to the disk . In some aspects permitting the storage subsystem or a disk scheduler executing within the storage subsystem the ability to re order writes can increase the storage subsystem s ability to service a maximum number of input output operations. By permitting the re ordering of writes to the virtual disk and thereby servicing a maximum number of input output operations the number of storage targets required for an action or process are reduced.

In another embodiment the storage subsystem can be permitted to issue early write acknowledgments when the disk type of the virtual disk is non persistent cache. Typically storage subsystems do not acknowledge a write to a disk until the write has been committed. This characteristic of storage subsystems permits applications operating systems and transaction processing systems to rely on this property of the storage subsystem when there is a system crash or following a spontaneous shut down event. Thus typically a storage subsystem may not acknowledge a write to a virtual disk when the write is stored in a buffer cache. After a system crash it may be advantageous to acknowledge writes when a write is stored in a buffer cache and before the write is committed to the virtual disk because the faster a write acknowledgement is issued the faster the acknowledgement can be transmitted back to the application or machine that issued the write. A faster response time can permit applications to execute faster because the applications spend less time waiting from acknowledgements from the storage subsystem . In still another embodiment a non persistent cache disk type can work in conjunction with an optimization that directs the storage subsystem to use local storage. The data stored on a non persistent cache disk often is low priority data that does not include user critical or system critical information and that may be invalidated when a virtual machine boots. Thus in many embodiments a virtual machine may not need a disk dedicated to non persistent cache. In these embodiments the virtualization environment may configure the virtual machine and the disk so that a local storage within the virtual machine or the environment can be used as a non persistent cache. By permitting local storage to function as non persistent cache the amount of expensive shared storage required to deploy the virtual machine and its virtual disk can be reduced as can the load on the network.

Chart 1 also illustrates an exemplary pairing of a virtual disk that has a disk type of user data disk and the storage subsystem optimization of being conservative with the manner in which disk data is managed modified deleted and accessed. User data can often include sensitive information such as user documents and files critical information sensitive information that requires a great deal of security and or encryption or other similar pieces of information. Thus the storage subsystem can be optimized such that any actions taken with regard to the virtual disk are consistent with the importance of the user data. In some embodiments this optimization can include disabling other optimizations such as re order writes early write acknowledgements and user local storage.

In some embodiments the control program can establish a connection with the VDI platform so that the control program can receive virtual machine templates and other information from the VDI platform . The connection in some embodiments can be a communication link or a virtual channel over which the control program and the VDI platform can communicate. Data and information transmitted or streamed over the virtual channel can be encapsulated in a protocol such as any protocol described herein. In some embodiments the information can be encapsulated in a presentation level protocol such as the ICA protocol developed by CITRIX SYSTEMS INC. of Fort Lauderdale Fla. The control program in some embodiments can stream or download virtual machine information from the VDI platform . While illustrates a system where the control program establishes a communicative connection with the VDI platform in other embodiments another application such as a VDI client can establish the communicative connection. In these embodiments the other application can execute within a control program within a control virtual machine A or within the hypervisor .

When in some embodiments the control program either streams or downloads a virtual machine template from the VDI platform the control program can either execute a virtual machine using the virtual machine template data or the control program can instantiate an instance of a virtual machine using the virtual machine template . In some instances the virtual machine generated from the virtual machine template includes substantially the same information as the information included in the virtual machine template . Therefore the data the virtual disk and any applications included in the virtual machine template are included in the virtual machine .

In one embodiment the remote computing device can execute a VDI platform . The VDI platform can be any platform able to implement and manage a virtual desktop infrastructure. In one embodiment the VDI platform can communicate with other applications or programs executing on the computing device and in some embodiments can communicate with a performance monitoring system . In other embodiments the VDI platform can be any platform provided by the XEN DESKTOP family of products manufactured by CITRIX SYSTEMS INC. of Fort Lauderdale Fla. The VDI platform in one embodiment can be a platform that establishes user sessions between users and the VDI platform and that allocates virtual machines virtual desktops and other similar resources to the user sessions. The VDI platform can also manage the virtual resources allocated to the user sessions and can further perform load balancing functions to load balance the virtual resources amongst the user sessions based on a variety of criteria.

The VDI platform in some embodiments can manage a pool or group of virtual machine templates herein referred to generally as the virtual machine pool . This pool or group of virtual machines can include one two or multiple virtual machine templates . In some embodiments the virtual machine templates can be virtual machines. In other embodiments the virtual machine templates can be streamed or downloaded into a virtualization environment and can be configured and executed to generate or instantiate a virtual machine . In other embodiments the virtual machine templates can be a collection of executable instructions applications or other computing resources that when streamed or downloaded into a virtualization environment can be configured and executed to generate or instantiate a virtual machine .

Virtual machine templates in some embodiments can be configured to include a copy of metadata associated with the template when the virtual machine template is cloned. Thus in some embodiments when a virtual machine template is cloned or copied to create a copy of the virtual machine template the metadata of the virtual disk is preserved. Therefore when a virtual machine template is streamed or downloaded to a virtualization environment the virtualization environment preserves the metadata of the virtual disk and propagates the disk type stored in the metadata to the virtual machine instance created from the virtual machine template .

In some embodiments the VDI platform can manage a pool or group of user sessions herein referred to generally as the user session pool . This pool or group of user sessions can include one or more user sessions created between a user and the VDI platform . In some embodiments a user session can be generated when a user of a client computing device located remote from the computing device requests a virtual desktop or a virtual machine or requests access to a virtual desktop or a virtual machine. In other embodiments a user session can be created when a user logs onto a VDI platform via a remote client computer. Still other embodiments include user sessions that can be created when a user requests access to an application or resource available through a virtual machine or virtual desktop.

A user session in some embodiments can be a session between the computing device and the user of a client machine or a session between the VDI platform and the user of a client machine. In each of these embodiments the client machine can be a computer that is remotely located from the computing device or the client machine can be the remote computer executing the virtualization environment . In one embodiment the user session can be created by the VDI platform in response to a user request to log onto the VDI platform a user request to access an application or resource or a user request for a virtual machine or a virtual desktop. Users can access aspects of the VDI platform from within a user session . Similarly users can interact with a virtual machine assigned to a user within the user session .

The computing device can in some embodiments include a virtual machine creator that can assemble virtual machines from the virtual machine templates . In some instances the virtual machine creator can stream virtual machines from the computer to the virtualization environment after creating the virtual machine from a virtual machine template . While illustrates a computer that includes a virtual machine creator in some embodiments the computer may not include a virtual machine creator . In these embodiments the control virtual machine can create or otherwise boot a virtual machine from a received virtual machine template . The virtual machine creator in some embodiments can create the virtual machine templates based on a user request or can annotate or otherwise modify a virtual disk in a virtual machine template to include metadata describing the disk type of the virtual disk .

Illustrate in is one embodiment of a method for modifying a virtual disk included within a virtual machine template . In this method a virtual machine template can be created Step a virtual disk in the virtual machine template can be modified to include metadata that describes the disk type Step and the virtual machine template can be allocated to a user of the virtual desktop infrastructure Step .

Further referring to and in more detail in one embodiment a virtual machine template can be created Step . In some embodiments the virtual desktop infrastructure creates the virtual machine template while in other embodiments a virtual machine creator creates the virtual machine template . In still other embodiments a sub program or application executing within the virtual desktop infrastructure can create the virtual machine template . The virtual machine template can be created in response to a user s request for a virtual machine . User specifications can be used to determine what to include in the virtual machine template e.g. disk type of a virtual disk type of OS applications etc. In one embodiment the virtual machine template can be created in response to a user s request for access to one or more applications or resources.

The virtual desktop infrastructure upon creating the virtual machine template can modify a virtual disk included in the virtual machine template to include metadata that describes the disk type of the virtual disk Step . In some embodiments modifying the virtual disk can include extending the metadata of the virtual disk to include a field for recording the disk type of the virtual disk . In still other embodiments modifying the virtual disk can include annotating the virtual disk to include metadata that describes the disk type of the virtual disk . In yet another embodiment modifying the virtual disk can include generating metadata that maps the virtual disk to a specific virtual disk type and storing that metadata on the virtual disk . Given that a virtual disk is not a physical disk storing the metadata on the virtual disk can include storing the metadata with the virtual disk data and with instructions indicating that the metadata should appear to be stored on a sector of the virtual disk .

In some embodiments the metadata can be stored in a repository adjunct to the virtual disk . When the VDI platform transmits or streams the virtual machine template to the control program the VDI platform can also transmit or stream the metadata associated with each virtual disk included in the virtual machine template . The control program upon receiving the virtual machine template and virtual disk metadata can store the virtual disk metadata in a database such as the disk type database of the control program . In other embodiments the control program can store the virtual disk metadata in any storage repository within the virtualization environment that is accessible by the control program and the storage subsystem . One embodiment can include a VDI platform that stores the metadata along with the virtual disk in the virtual machine template . In this embodiment the control program can extract the virtual disk metadata upon receiving the virtual machine template from the VDI platform . Once the control program extracts the virtual disk metadata the control program can insert the virtual disk metadata into the disk type database . Inserting the virtual disk metadata can include generating a record in the disk type database that associates the virtual disk with a disk type identified in the virtual disk metadata . The record can also include the name of the virtual machine that includes the virtual disk a virtual machine identifier the name of the user session or user to which the virtual machine is allocated and any similar information.

The virtual desktop infrastructure can then allocate a virtual machine template to a user Step . A virtual machine template can be chosen based on any type of criteria e.g. user performance metrics virtual machine metrics user requests etc. While in some embodiments the virtual machine template is allocated based on user information in other embodiments the virtual machine template is randomly allocated to the user. In some embodiments the method does not include the step of allocating the virtual machine template to a user Step because the virtual machine template is created specifically for that user.

Illustrated in is one embodiment of a method for selecting a storage optimization. A virtualization environment can boot an instance of a virtual machine from a virtual machine template Step . Upon booting the instance of the virtual machine the virtualization environment can obtain and read metadata of the virtual disk included in the virtual machine Step to determine the disk type of the virtual disk Step . The virtualization environment can then pass the disk type information to the storage subsystem Step which can then select a storage optimization based on the received disk type Step . Upon selecting the storage optimization the storage subsystem can attach optimized storage to the virtual machine instance Step .

Further referring to and in more detail in one embodiment the virtualization environment boots an instance of a virtual machine Step . The virtual machine instance can be created and can be based on a virtual machine template transmitted to the virtualization environment from the virtual desktop infrastructure . Thus when a virtual desktop infrastructure assigns a virtual machine template to a user the virtual desktop infrastructure can then transmit the virtual machine template to the virtualization environment . Upon receiving the virtual machine template the virtualization environment can boot a virtual machine from the virtual machine template .

One a virtual machine is booted from the virtual machine template the virtualization environment can obtain and read the metadata of each virtual disk included in the virtual machine Step . Obtaining the metadata can include reading the metadata from a storage location specified by the virtual disk . In other embodiments reading the metadata can include retrieving the metadata from a virtual storage sector on the virtual disk where the virtual storage section corresponds to a physical storage repository on the computing machine.

While illustrates a method where the metadata is obtained and read in other embodiments the control program does not obtain the metadata but rather queries the disk type database for disk type information associated with the virtual machine . This query can include relevant information that can be used to look up the disk type of one or more virtual disks included in the booted virtual machine such as a virtual machine name or other identifier a disk identifier and a user or user session identifier.

Upon retrieving obtaining or otherwise reading the metadata for each virtual disk of a virtual machine the virtualization environment can determine the disk type of the virtual disk Step and pass the disk type to the storage subsystem Step . In some embodiments the virtualization environment can pass the disk type to the storage subsystem via the hypervisor and using an application program interface that interfaces with the storage subsystem of the computer. In other embodiments the virtualization environment can pass the disk type to the storage subsystem using fields in a simple messaging application programming interface.

The storage subsystem can receive the disk type s from the virtualization environment and can select a storage optimization using the disk type information Step . In some embodiments the storage subsystem can select optimizations according to any of the combinations described herein. In other embodiments the storage subsystem can select a storage optimization according to those storage optimizations appropriate for a particular disk type.

While certain exemplary embodiments have been described and shown in the accompanying drawings it is to be understood that such embodiments are merely illustrative of and not restrictive on the methods and systems described herein. Additionally it is possible to implement the methods and systems described herein or some of its features in hardware programmable devices firmware software or a combination thereof. The methods and systems described herein or parts of the methods and systems described herein may also be embodied in a processor readable storage medium or machine readable medium such as a magnetic e.g. hard drive floppy drive optical e.g. compact disk digital versatile disk etc or semiconductor storage medium volatile and non volatile .

