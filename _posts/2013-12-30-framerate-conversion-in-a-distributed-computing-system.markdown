---

title: Frame-rate conversion in a distributed computing system
abstract: Described herein are, among other things, distributed processing methods and systems for frame rate conversion. In an embodiment, a transcoding management machine manages a distributed transcoding process, creating a plurality of video segments and assigning the video segments across a set of distributed transcoding resources for frame rate conversion. The management machine typically sends a given segment to a given transcoding resource along with instructions to convert the frame rate to a specified output frame rate. In addition, the management machine can send certain transcoding assistance information that preferably facilitates the frame rate change process and helps the transcoding resource to create a more accurate output segment. Hence, in some embodiments, each transcoding resource can perform its transcode job independently, but with reference to the input segment it is responsible for transcoding and the assistance information provided by the management machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09485456&OS=09485456&RS=09485456
owner: Akamai Technologies, Inc.
number: 09485456
owner_city: Cambridge
owner_country: US
publication_date: 20131230
---
This patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever.

This disclosure relates generally to distributed data processing systems and more particularly to frame rate conversion sometimes referred to as temporal transcoding of video content in distributed data processing environments.

Content providers such as large scale broadcasters film distributors and the like generally want to distribute their content online in a manner that complements traditional mediums such as broadcast TV including high definition television and DVD. It is important to them to have the ability to distribute content to a wide variety of third party client application device formats and to offer a quality viewing experience regardless of network conditions using modern technologies like adaptive bitrate streaming. Notably since Internet based content delivery is no longer limited to fixed line environments such as the desktop and more and more end users now use wireless devices to receive and view content the ability to support new client device formats and new streaming technologies is particularly important.

A given content provider s content might represent single media content e.g. audio file or the media file may include multiple media types i.e. a container file with audio video data. Generally speaking a given container file is built on elemental data potentially leveraging several different formats. For example the audio and video data are each encoded using appropriate codecs which are algorithms that encode and compress that data. Example codecs include H.264 VP6 AAC MP3 etc. A container or package format functions as a wrapper and describes the data elements and metadata of various multimedia so that a client application knows how to play it. Example container formats include FLV Silverlight MP4 PIFF and MPEG TS.

A given multimedia stream may reflect a variety of settings used to create the stream e.g. bitrate encoding formatting packaging and other settings. Several versions of a given stream may be necessary for technologies like adaptive bitrate streaming in order to allow a client or a server to switch between streams to compensate for network congestion or other issues.

Hence to support the distribution of content to a wide variety of devices content providers typically must create many different versions of their content. This can be done by transcoding content to change an encoding parameter or container format the latter often being referred to as transmuxing or remultiplexing . The bit rate may also be changed a process often referred to as transrating. This allows for example the creation of multiple copies of a given movie title at different screen sizes bit rates and client player formats.

The conversion of content can be achieved using a single machine sometimes referred to as a linear approach in which one machine processes the entire file. Alternatively content can be converted using a parallel approach also referred to as a distributed approach in which typically a given content file is broken into multiple segments or chunks which are each processed by separate machines in a distributed computing architecture.

For example U.S. Patent Publication No. 2013 0117418 titled Hybrid Platform For Content Delivery and Transcoding the teachings of which are hereby incorporated by reference discloses a system in which machines in a content delivery network CDN are configured to perform transcoding in parallel. The CDN described there is a distributing processing system and has many CDN machines. The CDN machines are designated as transcoding resources a given content file is broken into segments sometimes referred to as streamlets which are distributed to various machines to be transcoded separately along with instructions and parameters for the transcoding job. Once the machines return the transcoded content the segments can be reassembled to create the transcoded content file. U.S. Patent Publication No. 2013 0114744 titled Segmented Parallel Encoding With Frame Aware Variable Size Chunking the teachings of which are hereby incorporated by reference discloses techniques for breaking a given video into segments.

In addition to the conversion functions described previously it is desirable to have a parallel architecture perform frame rate conversion for a video which is sometimes referred to as temporal transcoding. For example it may be desired to either up convert or down convert the frame rate in a given stream.

However frame rate conversion in a distributed architecture is challenging. The transcoding resources are operating in parallel but some frame rate conversion decisions such as when to remove or insert a frame cross segment boundaries. Also some videos have jitter in their timestamps causing slight variations at segment boundaries. And group of picture GoP structures in the video stream can vary widely and be quite complex.

Therefore in a linear transcoding approach frame rate conversion would simply follow the input frame sequence to create an output sequence with uniform inter frame spacing. However in the distributed approach each transcoding resource generally processes the segments independently hence the boundary parameters such as t and t in must be independently calculated to accurately maintain frame time distances across the boundaries once all of the individual segments are multiplexed back together.

The small amount of jitter in the input sequence of may not be noticeable when the sequence is played back and it may not be significant enough to impact audio video synchronization. By the end of the sequence all frames may again be aligned with the ideal frame times as shown in . However the small amount of jitter nevertheless might impact frame rate conversion in a distributed transcoding system. For example looking at frame of the input we can see that due to jitter problems this frame has been pushed to segment instead of being a part of segment . The actual duration of frame however will be the difference between frames and and hence the overall length of segment will be slightly larger than the ideal frame timing.

In a distributed approach the transcoding resource processing segment is not aware that frame should have actually been a part of segment and instead may proceed to perform an additional frame duplication of input frame to create output frame which technically fits within its time boundary. Hence now there may be two frames representing output frame one from a duplication of frame and second from the actual input frame in segment .

In light of these kinds of issues there is a need to provide systems apparatus and methods for frame rate conversion in distributed transcoding architectures. The teachings herein address these needs and offer other features and benefits that will become apparent in view of this disclosure.

Described herein are among other things methods and systems for frame rate conversion in a distributed processing environment. In an embodiment a transcoding management machine manages a distributed transcoding process creating a plurality of video segments and assigning the video segments across a set of distributed transcoding resources for frame rate conversion. The management machine typically sends a given segment to a given transcoding resource along with instructions to change the frame rate to a specified output frame rate.

In addition the management machine can send certain transcoding assistance information for the assigned segment which is typically timing information about the video that the transcoding resource might otherwise not know. Such information preferably facilitates the frame rate conversion process and helps the transcoding resource to create a more accurate output segment as described herein. Preferably then each transcoding resource can perform its transcode job independently but with reference to the input segment it is responsible for transcoding and the assistance information provided by the management machine.

The transcoding management machine upon receiving various output segments returned from the distributed transcoding resources can reassemble the complete transcoded stream at the new frame rate.

The foregoing description merely refers to particular examples of the invention for purposes of overview and illustration. It is not limiting and the teachings hereof may be realized in a variety of systems methods apparatus and non transitory computer readable media. It should also be noted that the allocation of functions to particular machines is not limiting as the functions recited herein may be combined or split amongst different machines in a variety of ways.

The subject matter described herein has a variety of applications in content delivery and online platform architectures including in distributed transcoding systems such as those implemented in a CDN and otherwise.

The following description sets forth embodiments of the invention to provide an overall understanding of the principles of the structure function manufacture and use of the methods and apparatus disclosed herein. The systems methods and apparatus described herein and illustrated in the accompanying drawings are non limiting examples the claims alone define the scope of protection that is sought. The features described or illustrated in connection with one exemplary embodiment may be combined with the features of other embodiments. Such modifications and variations are intended to be included within the scope of the present invention. All patents publications and references cited herein are expressly incorporated herein by reference in their entirety. The term e.g. is used herein as an abbreviation for the non limiting phrase for example. 

In one embodiment a distributed processing system for frame rate conversion sometimes referred to as temporal transcoding is provided. Conventional distributed transcoding techniques may be employed to break or chunk a given video into a plurality of segments which are sometimes referred to as streamlets. Preferably the segments are non overlapping. The segments can be distributed to various transcoding resource machines along with instructions specifying the desired output frame rate. The individual transcoding resource machines perform the desired transcode on their assigned segment and return it to a management machine that reassembles the transcoded segments into a whole at the new frame rate.

Preferably the distributed transcoding resources work independently and leverage certain transcoding assistance information provided to them with their transcoding job so as to improve the frame rate conversion process and output quality. is a high level diagram of a distributed transcoding architecture in which management machine manages the process of temporally transcoding a particular file or stream breaking it into segments preferably non overlapping . The management machine also assigns the segments across a set of remote and distributed transcoding resources that will each perform part the transcode independently. In the set of transcoding resources is represented by machines and more generally any number of machines may be employed as of course the number and distribution of machines both management and transcoding resource machines may vary with the particular desired implementation goals.

Typically the management machine sends a given segment to an assigned transcoding resource such as transcoding resource with instructions and parameters specifying that the transcoding resource should change the frame rate of its segment to a given output frame rate. The management machine also sends the assigned transcoding resource certain transcoding assistance information for segment . The management machine does likewise for transcoding resource and segment and so on.

Preferably the assistance information provided by the management machine is timing information and in particular certain time stamps.

For example one time stamp can represent a reference point in the video such as the beginning of the sequence of segments in the video. For example the first time stamp can be the presentation time stamp of the initial frame of the video to be transcoded. Other reference points are possible and are described further below.

A second time stamp is preferably associated with the initial frame of the next segment in the video that is the segment in the stream immediately following the particular segment that is being assigned and sent by the management machine . Preferably though without limitation this time stamp is the presentation time stamp of that initial frame of the next segment. Put another way the presentation time stamp for the next frame in the video following the assigned segment is determined and sent. Preferably the management machine extracts this time stamp and sends it to the transcoding resource as part of the aforementioned assisting information so that the next segment itself does not have to be sent.

Upon receiving the segment with the frame rate change instructions and assistance information the assigned transcoding resource machine can use the assistance information to create an output segment with the proper frame timing and placement thus converting the frame rate. Various intermediate calculations and decisions about how to produce the output segment may occur and are described in more detail below. The assigned transcoding resource creates an output segment at the desired frame rate based on the input segment and the assistance information and returns the output segment to the transcoding management machine . As noted previously the transcoding management machine can reassemble the complete file or stream at the changed frame rate.

The transcoding management machine and transcoding resource machines may be machines in content delivery network as described in U.S. Patent Publication No. 2013 0117418 titled Hybrid Platform For Content Delivery and Transcoding the teachings of which are hereby incorporated by reference and in U.S. Patent Publication No. 2013 0114744 titled Segmented Parallel Encoding With Frame Aware Variable Size Chunking the teachings of which are hereby incorporated by reference.

To that end preferably the transcoding management machine determines and sends for a given segment to be transcoded 

With reference to assume transcoding resource will receive segment . For segment the reference point can be the presentation time stamp of the first input frame frame which is from the same segment because it is the first segment and the presentation time stamp associated with the initial frame from the next segment would be the initial frame of segment frame . Transcoding resource will receive segment and for segment the reference point can likewise be the presentation time stamp of the first input frame frame and the presentation time stamp associated with the initial frame from the next segment would be the initial frame of segment not shown but immediately following segment on the right .

The transcoding resources each use the assistance information they receive to independently calculate several parameters in constructing an output segment.

A transcoding resource can use the reference point to calculate the whole number of output frames that would fit into a duration that preceded the particular input segment at hand. From this the start of segment offset time t can be determined for that given segment.

The first step is determining the total input duration D which is determined by input segment start reference point

It is worth noting that the calculation of t also can be made for the initial segment which is the reason why the reference point could be an arbitrary time in the past. If the reference point actually coincides with the presentation time stamp of the initial frame of the initial input segment then the value of t will be zero. If the value of the reference point is an arbitrary point in the past then the value of t for the first segment may be a positive value.

Hence in the output frame number of segment s initial frame is 4 and from this the value of t can be calculated. For segment the output frame number will be 1 and the value of t will be zero as would be expected given that it is the initial segment and the reference point coincides with the presentation time stamp of the initial frame. 

As can be seen in the end of segment offset time t and start of segment offset time t together sum to one output frame period.

In an alternate embodiment the transcoding management machine might perform some or all of the above calculations and determinations itself and send the result to the assigned transcoding resource along with the assigned segment. This approach however does not leverage the computing resources of the transcoding resources as much. Nevertheless it may be suitable in certain implementations.

Each transcoding resource after determining or receiving the results of the foregoing calculations with respect to its assigned input segment can create an output segment with a proper start of segment offset time t and an appropriate number of output frames in compliance with the desired output frame rate. See . 

A variety of approaches are known in the art for performing a frame rate conversion and can be used in conjunction with the teachings hereof. Frame rate conversion can be achieved through the duplication or elimination of frames from the input sequence for frames to match the desired frame rate of the output sequence for example. Some video processing techniques aim to avoid duplication dropping of frames through the synthesis of missing or duplicated frames. are demonstrations of a frame rate conversion process using the frame drop duplication process being the up conversion and being the down conversion.

The best available approach utilizes the best available decoded frame. Here each time a frame is decoded it is examined to see whether it can be used for an output frame with a 1 frame distance in the past duplicating or the future dropping .

A variety of software packages such as FFmpeg can be used for frame rate conversion as modified by the teachings hereof .

The offset time t calculated as explained previously is used into the frame rate conversion process. For example in t is presented as zero because the first input and output frames are aligned. However if t were positive the first output frame would be shifted to the right by the value of t. If t were negative then the first output frame would be shifted left before the input frame by the value of t.

As mentioned above input frames may exhibit jitter in their timing. As described below such jitter can be handled and reduced or removed during the frame rate conversion process.

Sometimes even though an output frame falls within the boundary of an output segment being produced by a transcoding resource it is desirable that the output frame be considered part of the next segment. An example is shown in which depicts jitter at the boundary between segments and . With reference to the left hand side of no jitter handling it is observed that though frame of the output sequence falls within the boundary of an earlier segment it preferably should be created as part of the later segment because the placement of frame is due to input noise rather than an actual frame rate conversion. Placing this frame in the next segment would eliminate an unnecessary duplication and dropping at the segment boundary. To remedy this issue the steps outlined in the following paragraphs may be taken 

If the first output frame of the next segment falls within a configured error tolerance then the ceiling calculation described previously in paragraph 0 is adjusted to indicate one less output frame. In such a case the output frame is created by the next streamlet. In order to achieve this the formula for determining OFN n from the paragraph above may be altered to account for an error tolerance epsilon OFN ceiling OFP EPSILON 

Likewise if the last output frame of the current segment falls within a configured error tolerance then the transcoding resource processing that segment will not create that output frame but rather expect that the next transcoding segment will create that frame

As noted above the teachings hereof may be implemented within a content delivery network CDN and in particular the transcoding resource may be machines in the CDN that are shared between the transcoding function and other CDN function such as content caching and delivery . illustrates a distributed computer system configured CDN that is operated and managed by a service provider. The service provider typically provides the content delivery service on behalf of third parties. In a system such as that shown in a distributed computer system is configured as a content delivery network CDN and has a set of machines distributed around the Internet. Typically most of the machines are servers located near the edge of the Internet i.e. at or adjacent end user access networks. A network operations command center NOCC may be used to administer and manage operations of the various machines in the system. Third party sites affiliated with content providers such as web site offload delivery of content e.g. HTML or other markup language files embedded page objects streaming media software downloads and the like to the distributed computer system and in particular to the CDN servers. Such servers may be grouped together into a point of presence POP at a particular geographic location.

Typically content providers offload their content delivery by aliasing e.g. by a DNS CNAME given content provider domains or sub domains to domains that are managed by the service provider s authoritative domain name service. The server provider s domain name service directs end user client machines that desire content to the distributed computer system or more particularly to one of the CDN servers in the platform to obtain the content more reliably and efficiently. The CDN servers respond to the client requests for example by fetching requested content from a local cache from another CDN server from the origin server associated with the content provider or other source.

For cacheable content CDN servers typically employ on a caching model that relies on setting a time to live TTL for each cacheable object. After it is fetched the object may be stored locally at a given CDN server until the TTL expires at which time is typically re validated or refreshed from the origin server . For non cacheable objects sometimes referred to as dynamic content the CDN server typically must return to the origin server when the object is requested by a client.

Although not shown in detail in the distributed computer system may also include other infrastructure such as a distributed data collection system that collects usage and other data from the CDN servers aggregates that data across a region or set of regions and passes that data to other back end systems and to facilitate monitoring logging alerts billing management and other operational and administrative functions. Distributed network agents monitor the network as well as the server loads and provide network traffic and load data to a DNS query handling mechanism . A distributed data transport mechanism may be used to distribute control information e.g. metadata to manage content to facilitate load balancing and the like to the CDN servers.

As illustrated in a given machine in the CDN comprises commodity hardware e.g. a microprocessor running an operating system kernel such as Linux or variant that supports one or more applications . To facilitate content delivery services for example given machines typically run a set of applications such as an HTTP proxy a name server a local monitoring process a distributed data collection process and the like. The HTTP proxy sometimes referred to herein as a global host or ghost typically includes a manager process for managing a cache and delivery of content from the machine. For streaming media the machine may include one or more media servers as required by the supported media formats.

More information about a CDN platform can be found in U.S. Pat. Nos. 6 108 703 7 596 619 7 240 100 7 111 057 the teachings of which are hereby incorporated by reference in their entirety. For live streaming delivery the CDN may include a live delivery subsystem such as described in U.S. Pat. No. 7 296 082 and U.S. Publication Nos. 2011 0173345 and 2012 0265853 the disclosures of which are incorporated herein by reference.

The subject matter described herein may be implemented in conventional computer systems as modified by the teachings hereof with the processes and functional characteristics described above realized in special purpose hardware general purpose hardware configured by software stored therein for special purposes or a combination thereof.

Software may include one or several discrete programs. A given function may comprise part of any given module process execution thread or other such programming construct. Generalizing each function described above may be implemented as computer code namely as a set of computer instructions executable in one or more microprocessors to provide a special purpose machine. The code may be executed using conventional apparatus such as a microprocessor in a computer digital data processing device or other computing apparatus as modified by the teachings hereof. In one embodiment such software may be implemented in a programming language that runs in conjunction with a proxy on a standard Intel hardware platform running an operating system such as Linux. The functionality may be built into the proxy code or it may be executed as an adjunct to that code.

While in some cases above a particular order of operations performed by certain embodiments is set forth it should be understood that such order is exemplary and that they may be performed in a different order combined or the like. Moreover some of the functions may be combined or shared in given instructions program sequences code portions and the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Computer system includes a microprocessor coupled to bus . In some systems multiple microprocessor and or microprocessor cores may be employed. Computer system further includes a main memory such as a random access memory RAM or other storage device coupled to the bus for storing information and instructions to be executed by microprocessor . A read only memory ROM is coupled to the bus for storing information and instructions for microprocessor . As another form of memory a non volatile storage device such as a magnetic disk solid state memory e.g. flash memory or optical disk is provided and coupled to bus for storing information and instructions. Other application specific integrated circuits ASICs field programmable gate arrays FPGAs or circuitry may be included in the computer system to perform functions described herein.

Although the computer system is often managed remotely via a communication interface for local administration purposes the system may have a peripheral interface communicatively couples computer system to a user display that displays the output of software executing on the computer system and an input device e.g. a keyboard mouse trackpad touchscreen that communicates user input and instructions to the computer system . The peripheral interface may include interface circuitry and logic for local buses such as Universal Serial Bus USB or other communication links.

Computer system is coupled to a communication interface that provides a link between the system bus and an external communication link. The communication interface provides a network link . The communication interface may represent an Ethernet or other network interface card NIC a wireless interface modem an optical interface or other kind of input output interface.

Network link provides data communication through one or more networks to other devices. Such devices include other computer systems that are part of a local area network LAN . Furthermore the network link provides a link via an internet service provider ISP to the Internet . In turn the Internet may provide a link to other computing systems such as a remote server and or a remote client . Network link and such networks may transmit data using packet switched circuit switched or other data transmission approaches.

In operation the computer system may implement the functionality described herein as a result of the microprocessor executing code. Such code may be read from or stored on a non transitory computer readable medium such as memory ROM or storage device . Other forms of non transitory computer readable media include disks tapes magnetic media CD ROMs optical media RAM PROM EPROM and EEPROM. Any other non transitory computer readable medium may be employed. Executing code may also be read from network link e.g. following storage in an interface buffer local memory or other circuitry .

The client device may be a conventional desktop laptop or other Internet accessible machine running a web browser or other rendering engine but as mentioned above the client may also be a wireless device.

It should be understood that the foregoing has presented certain embodiments of the invention that should not be construed as limiting. For example certain language syntax and instructions have been presented above for illustrative purposes and they should not be construed as limiting. It is contemplated that those skilled in the art will recognize other possible implementations in view of this disclosure and in accordance with its scope and spirit. The appended claims define the subject matter for which protection is sought.

It is noted that trademarks appearing herein are the property of their respective owners and used for identification and descriptive purposes only given the nature of the subject matter at issue and not to imply endorsement or affiliation in any way.

