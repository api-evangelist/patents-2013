---

title: Unified usage tracking mechanism for application
abstract: In general, in one aspect, the invention relates to a system that includes a computer processor, a tracking engine executing on the computer processor, and a translation engine executing on the computer processor. The tracking engine is configured to retrieve a translation engine from a translation engine provider system, detect a user-generated action has occurred, and generate a pre-translated event for the user generated action using the translation engine application programming interfaces (APIs). The translation engine is configured to translate the pre-translation event to obtain a first translated event, prepare the first translated event for transmission to a first tracking system, and send the first translated event to the first tracking system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949865&OS=08949865&RS=08949865
owner: Intuit Inc.
number: 08949865
owner_city: Mountain View
owner_country: US
publication_date: 20130329
---
Locally and web hosted applications frequently include mechanisms that developers use to track the ways in which their users interact with the application. Such mechanisms are generally tied to a specific tracking system maintained by a third party. The third party system gathers and processes the tracking data and provides it to application developer. Some tracking services provided by different third party systems may differ from some third party systems and may be virtually identical to others. As a result developers must either select a single best fit tracking system or instrument their applications to send tracking data to multiple tracking systems.

In general in one aspect the invention relates to a system that includes a computer processor a tracking engine executing on the computer processor and a translation engine executing on the computer processor. The tracking engine is configured to retrieve a translation engine from a translation engine provider system detect a user generated action has occurred and generate a pre translated event for the user generated action using the translation engine application programming interfaces APIs . The translation engine is configured to translate the pre translation event to obtain a first translated event prepare the first translated event for transmission to a first tracking system and send the first translated event to the first tracking system.

In general in one aspect the invention relates to a method for tracking interactions between a user and an application. The method includes retrieving a translation engine detecting a user generated action occurs and generating a pre translated event for the user generated action using a translation engine application programming interface API associated with the translation engine. The method further includes translating the pre translated event to obtain a first translated event preparing the first translated event for transmission and sending the first translated event to a first tracking system.

In general in one aspect the invention relates to a non transitory computer readable medium comprising instructions that when executed by a processor perform to a method for tracking interactions between a user and an application. The method includes retrieving a translation engine detecting a user generated action occurs and generating a pre translated event for the user generated action using a translation engine application programming interface API associated with the translation engine. The method further includes translating the pre translated event to obtain a first translated event preparing the first translated event for transmission and sending the first translated event to a first tracking system.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid unnecessarily complicating the description.

In general embodiments of the invention provide a method and system for translating user generated action for tracking by multiple tracking systems. Specifically embodiments of the invention may be used to generate one or more translated events and sending the translated events to one or more different tracking systems.

In one or more embodiments of the invention the client system is a computer system or group of computer systems configured to execute the client application . The client system may be implemented for example as a desktop computer system a laptop computer system a tablet computer system a smartphone etc.

In one or more embodiments of the invention the client application is a software program executing on the client system and configured to interact with a user of the client system . In one embodiment of the invention the client application interacts with a user of the client system to obtain data from the user process data provided by the user and or provide data to the user. Data used by the client application for interactions with the user may be stored locally or may be sent to or obtained from a server system not shown configured to interact with the client application . For example a client application implemented as a financial management application may obtain financial data from a user via the input module and send that financial data to a server system not shown for processing. The server system not shown may then send processed data back to the financial management application which in turn displays the processed data to the user via the output module .

In one or more embodiments of the invention the client application is a platform e.g. a web browser upon which other programs may be executed e.g. a webpage . In one embodiment of the invention a client application includes functionality to retrieve a program e.g. a webpage based on a resource address provided by the user. In one embodiment of the invention the retrieved program not shown includes the tracking engine . In one embodiment of the invention the retrieved program not shown may further be configured to generate the event cache . For example a user may provide a web address to a client application implemented as a web browser and the client application may retrieve the webpage stored at the web address. The client application may then execute the webpage which is displayed to the user as an interactive website.

In one or more embodiments of the invention the client application interacts with the user via the input module and the output module . The input module may include any combination of hardware and software by which input is received by the client application . Examples of input modules include but are not limited to a keyboard a mouse a touch interface voice recognition software a network communication connection a system clock etc. The output module may include any combination of hardware and software by which output is sent by the client application . Examples of output modules include but are not limited to a display a network communication connection an audio output device etc.

In one or more embodiments of the invention the tracking engine is a portion of the client application configured to monitor interactions i.e. user generated actions between a user and the client application . In one embodiment of the invention the tracking engine is implemented as part of the client application . Alternatively tracking engine is part of a program retrieved by the client application e.g. instrumented in a webpage .

In one or more embodiments of the invention a user generated action is input received from a user targeting one or more elements of the client application . User generated actions may include passive user generated actions and active user generated actions. In one embodiment of the invention a passive user generated action is input received without an affirmative act by the user. Examples of passive user generated actions include but are not limited to the amount of time a user spends on a particular screen and whether a text field was left blank by a user. In one embodiment of the invention an active user generated action is input received by an affirmative act by the user e.g. via the input module . Examples of active user generated actions include but are not limited to portions of a screen that a user clicks on time of day a user uses the client application and location from which a user accesses the client application .

In one or more embodiments of the invention the tracking engine is implemented as code that listens for particular user generated actions. Specifically the tracking engine may be configured to listen for a specific set of the user generated actions selected by the developer of the client application or a program retrieved by the client application . Upon the detection of a user generated action the tracking engine generates a pre translated event corresponding to the detected user generated action.

In one or more embodiments of the invention a pre translated event is a descriptor of a user generated action using an application programming interface API for communication with the translation engine . Specifically the translation engine may be configured to accept information i.e. a pre translated event formatted according to a translation engine API. For example the user generated action of clicking a cancel button may correspond to a translation engine API command i.e. a pre translated event of EVENT CLICK CANCEL .

In one or more embodiments of the invention a pre translated event includes information about the circumstances under which the user generated action occurred. The information about the circumstances under which the user generated action occurred includes a timestamp indicating the time at which the user generated action occurred. In one embodiment of the invention the translation engine includes the ability to accept a translation engine API command that includes the timestamp. For example the user generated action of clicking a cancel button at time 2109 may correspond to a translation engine API command i.e. a pre translated event of EVENT CLICK CANCEL TIME 2109 . Such information about the circumstances under which the user generated action occurred may include other information such as for example an identifier of the client system an identifier of the client application client system hardware information client system software information a session identifier etc.

In one or more embodiments of the invention the tracking engine includes functionality to retrieve a translation engine . Specifically the tracking engine may upon initial execution of the client application request software code from a translation engine providing system . The tracking engine may then use the software code retrieved from the translation engine providing system to instantiate a translation engine .

In one or more embodiments of the invention the translation engine providing system is a computer system or group of computer systems configured to store the translation engine and provide the translation engine in response to a request by a client system . In one embodiment of the invention the translation engine providing system dynamically generates software code for the translation engine based on parameters passed in the request by the client system . Such dynamically generated software code may be tailored to include translation capabilities to translate a pre translated event into a translated event recognizable by a specific tracking system tracking system A A tracking system B B .

In one or more embodiments of the invention the translation engine providing system generates a translation engine using preconfigured parameters. Specifically a developer may have the capability to configure the translation engine providing system to generate a translation engine with specific capabilities e.g. translate pre translated events into translated events targeting a specified target tracking system or set of target tracking systems . Such a translation engine may then be retrieved by including a developer identifier in the request for a translation engine . For example a developer of a client application may log into an account on the translation engine providing system and configure a translation engine to translate all pre translated events into translated events acceptable by Alpha Analytics a tracking system tracking system A A tracking system N N . The developer may then instrument the code of the client application to include that developers account identifier in the request for the translation engine . Upon receiving the request for the translation engine and the developer account identifier the translation engine providing system provides the preconfigured translation engine to the requesting client system .

In one or more embodiments of the invention the translation engine is a process or group processes configured to translate a pre translated event into a translated event. Specifically the translation engine includes functionality to receive pre translated events generated using the translation engine API and in response provide one or more corresponding translated events configured for submission to one or more tracking systems tracking system A A tracking system N N . Translated events configured for submission to one or more tracking systems tracking system A A tracking system N N may include generating a tracking system API command corresponding to the pre translated event. The translated events may be transmitted to the tracking systems tracking system A A tracking system N N directly by the tracking engine or may be provided to the tracking engine for eventual submission to the tracking systems tracking system A A tracking system N N .

In one or more embodiments of the invention the translation engine translates pre translated events into translated events using data stored locally within the translation engine . Alternatively the translation engine translates pre translated events into translated events using a translation server not shown . In one embodiment of the invention the translation engine submits a pre translated event to the translation server not shown and in response receives a translated event. Such a request may include for example the pre translated event and a tracking system API to which the translated event is to correspond.

In one or more embodiments of the invention the translation engine includes one or more translation keys not shown . In one embodiment of the invention a translation key not shown is an algorithm that accepts all or part of a pre translated event and returns all or part of a translated event. A translation key may parse the pre translated event and extract rearrange or remove portions of the pre translated event to generate the translated event. In one embodiment of the invention each translation key is associated with a different tracking system API. In one embodiment of the invention a pre translated event is submitted to the translation engine with a target tracking system. The translation engine may select a translation key corresponding to the target tracking system and apply that translation key to the pre translated event to generate the translated event.

In one or more embodiments of the invention translated events generated by the tracking engine may be stored in the event cache . In one embodiment of the invention the event cache is a mechanism by which translated events are stored in memory on the client system . In one embodiment of the invention translated events are stored in the event cache if there is currently no or restricted access to the target tracking system tracking system A A tracking system N N . For example if communication with a target tracking system tracking system A A tracking system N N is conducted over a network translated events may be stored in the event cache if the client application detects that the client system is not currently connected to the network.

In one or more embodiments of the invention pre translated events may be stored in the event cache . Specifically pre translated events may be generated by the tracking engine and stored in the event cache until such time that they are retrieved for translation by the translation engine .

In one or more embodiments of the invention a tracking system tracking system A A tracking system N N is a computer system or group of computer systems configured to receive translated events sent by a client system . Specifically each tracking system tracking system A A tracking system N N may be configured to obtain translated events from a number of client systems e.g. client system analyze data from the translated events and provide that data analysis to a developer of the client application or another interested party. Such data analysis may include metrics regarding the ways in which users of the client application interacts with the client application.

In one or more embodiments of the invention each tracking system tracking system A A tracking system N N has a tracking system API unique to that tracking system tracking system A A tracking system N N . Specifically a translated event generated using the tracking system API for tracking system A A will not be acceptable by tracking system N N . In addition a pre translated event generated using the translation engine API maybe unacceptable by any tracking system.

In one or more embodiments of the invention multiple translated events may be generated from a single pre translated event. Specifically the translation engine may be configured to receive a pre translated event and in response generate a first translated event using the tracking system API for tracking system A A and generate a second translated event using the tracking system API for tracking system N N . Each translated event may then be sent to the corresponding tracking system.

In Step the client application receives a request to load a view. In one embodiment of the invention the view is part of the client application and used to interact with a user of the client application. In one embodiment of the invention the view is part of a website or web application and the request includes the network location of the website or web application.

In Step the client application determines that the view requires a translation engine. In one embodiment of the invention the determination is made when a website or web application retrieved by the client application includes code referencing the translation engine.

In Step the client application requests the translation engine from a translation engine providing system using a uniform resource locator URL embedded in the view. In one embodiment of the invention the request for the translation engine includes parameters indicating specific tracking systems to which the client application intends to send translated events. Specifically a client application may request a translation engine configured to translate pre translated events into translated events acceptable by a specified tracking system. In one embodiment of the invention the translation engine software code is generated by the translation engine providing system based on the specified tracking systems i.e. capable of translating pre translated events into translated events acceptable by the specified tracking system . In one embodiment of the invention the request may also include a developer account identifier to associate the request with a target developer.

In Step the client application receives the translation engine from the translation engine providing system. In Step the client application executes the translation engine within the view.

In Step the client application listens for a user generated action. In Step the client application determines whether a user generated action has occurred. If in Step no user generated action is detected then the flow returns to Step . If in Step a user generated action has occurred then in Step the client application detects that the user generated action has occurred.

In Step the client application generates a pre translated event for the user generated action using the translation engine API. In one embodiment of the invention the code of the client application is instrumented such that a particular user generated action triggers the submission of a corresponding pre translated event to the translation engine.

In Step the pre translated event is translated into a translated event using the translation engine. In one embodiment of the invention the translation engine includes functionality to translate the pre translated event into a translated event using a tracking system API for a previously specified tracking system. In one embodiment of the invention the tracking engine includes functionality to translate the pre translated event into more than one translated event each using a different tracking system API. In one embodiment of the invention data within the pre translated event specifies the tracking system or tracking systems to which the client application will send the translated events. In one embodiment of the invention the translation engine includes functionality to obtain an address corresponding to a location of the target tracking system.

In Step the client application stores the translated event in the event cache. In one embodiment of the invention the event cache is implemented as a data structure configured to store software objects representing translated events. In one embodiment of the invention the event cache data structure includes the ability to store a destination address for each stored translated event. In Step the client application attempts to connect to the tracking system. In one embodiment of the invention the client application includes functionality to attempt to connect with multiple tracking systems. In one embodiment of the invention user generated events occur while the client system is not connected to the tracking servers.

In Step the client application determines whether a connection to the tracking system has been established. If in Step the client application determines that a connection to the tracking system has not been established then in Step the client application waits and returns to Step . If in Step the client application determines that a connection to the tracking system has been established then in Step the client application sends the translated event to the tracking system. In one embodiment of the invention all translated events stored in the event cache are sent to the respective tracking system once a connection to each tracking system has been established.

In one or more embodiments of the invention translated events will only be accepted by a tracking system if the source of the translated event is trusted. In one embodiment of the invention a tracking system may require authentication before a client system may submit a translated event. Such authentication may be embedded in the translated event and or may be performed between the client system and the tracking system prior to the transmission of the translated event. Authentication may include but is not limited to public private key authentication and username password authentication.

In one embodiment of the invention translated events are sent to the tracking systems with a timestamp indicating the time at which the corresponding user generated action occurred as opposed to the time at which the tracking system receives the translated event . Therefore data regarding the time at which the user generated action occurred is maintained despite any amount of time that the translated event spent stored in the event cache.

In Step the user instructs the client application to load client application display . For the purposes of this example assume that client application is a financial management application. Further assume that the client application display is a view within the client application used to obtain a yearly income from the user.

In Step the client application begins to load the view software code corresponding to the view of the client application including portions of the view software code that comprise the tracking engine . In Step the client application as instructed by the view software code creates a data structure for use by the tracking engine as an event cache .

In Step the client application loads the portion of the view software code instructing the tracking engine to request a translation engine from the translation engine providing system . For the purposes of the example assume that the request indicates that the tracking engine intends to submit translated events to two tracking systems Alpha Analytics A and Beta Analytics B .

In Step the translation engine providing system provides software code corresponding to the translation engine . In Step the tracking engine uses the software code obtained from the translation engine providing system to instantiate the translation engine as a hidden embedded browser within the client application display . For the purposes of the example assume that Alpha Analytics A is a free event analysis tool that provides limited analysis. Assume further that Beta analytics B is a robust event analysis tool that charges developers based on the number of submitted translated events.

In Step the user clicks the submit button element B B without inputting any text into the text field element A A . In Step the client application provides this user generated action to the tracking engine . In Step the tracking engine generates a pre translated event for the user generated action using the translation engine API. For the purposes of this example assume that the pre translated event includes a session ID an event name a target tracking system identifier and a timestamp and is generated as SessionID 001 Event SUMBIT PRESS EMPTY FIELD Target ALPHA ANALYTICS Timestamp 083224 

In Step the tracking engine submits the pre translated event to the translation engine . In Step the translation engine generates a translated event using the Alpha Analytics A API based on the pre translated event SessionID 001 Event SUMBIT PRESS EMPTY FIELD Target ALPHA ANALYTICSTimestamp 083224 . In Step the translation engine stores the translated event in the event cache along with an address targeting Alpha Analytics A .

In Step the tracking engine determines that a communication connection with Alpha Analytics A has been established and retrieves the translated event and target address from the event cache . In Step the tracking engine submits the translated event to Alpha Analytics A using the target address.

In Step the user clicks the cancel button element C C after entering 45 000 into the text field element A A . In Step the client application provides this user generated action to the tracking engine . In Step the tracking engine generates a pre translated event for the user generated action using the translation engine API. For the purposes of this example assume that the pre translated event is generated as SessionID 001 Event CANCEL PRESS NONEMPTY FIELD Target ALPHA ANALYTICS BETA ANALYTICS Timestamp 083356 

In Step the tracking engine submits the pre translated event to the translation engine . In Step the translation engine generates a first translated event using the Alpha Analytics A API based on the pre translated event SessionID 001 Event CANCEL PRESS NONEMPTY FIELD Target ALPHA ANALYTICS BETA ANALYTICS Timestamp 083356 . In Step the translation engine stores the first translated event in the event cache along with an address targeting Alpha Analytics A . In Step the translation engine generates a second translated event using the Beta Analytics B API based on the pre translated event SessionID 001 Event CANCEL PRESS NONEMPTY FIELD Target ALPHA ANALYTICS BETA ANALYTICS Timestamp 083356 . In Step the translation engine stores the second translated event in the event cache along with an address targeting Beta Analytics B .

In Step the tracking engine determines that a communication connection with Alpha Analytics A has been established and retrieves the first translated event and Alpha Analytics A target address from the event cache . In Step the tracking engine submits the first translated event to Alpha Analytics A using the Alpha Analytics A target address.

In Step the tracking engine determines that a communication connection with Beta Analytics B has been established and retrieves the second translated event and Beta Analytics B target address from the event cache . In Step the tracking engine submits the second translated event to Beta Analytics B using the Beta Analytics B target address.

Embodiments of the invention may be implemented on virtually any type of computer regardless of platform being used. For example as shown in a computer system includes one or more processor s such as a central processing unit CPU or other hardware processor s associated memory e.g. random access memory RAM cache memory flash memory etc. a storage device e.g. a hard disk an optical drive such as a compact disk drive or digital video disk DVD drive a flash memory stick etc. and numerous other elements and functionalities typical of today s computers not shown . In one or more embodiments of the invention the processor is hardware. For example the processor may be an integrated circuit. The computer system may also include input means such as a keyboard a mouse or a microphone not shown . Further the computer system may include output means such as a monitor e.g. a liquid crystal display LCD a plasma display or cathode ray tube CRT monitor . The computer system may be connected to a network e.g. a local area network LAN a wide area network WAN such as the Internet or any other type of network via a network interface connection not shown . Those skilled in the art will appreciate that many different types of computer systems exist and the aforementioned input and output means may take other forms. Generally speaking the computer system includes at least the minimal processing input and or output means necessary to practice embodiments of the invention.

Further those skilled in the art will appreciate that one or more elements of the aforementioned computer system may be located at a remote location and connected to the other elements over a network. Further embodiments of the invention may be implemented on a distributed system having a plurality of nodes where each portion of the invention may be located on a different node within the distributed system. In one embodiment of the invention the node corresponds to a computer system. Alternatively the node may correspond to a processor with associated physical memory. The node may alternatively correspond to a processor or micro core of a processor with shared memory and or resources. Further software instructions in the form of computer readable program code to perform embodiments of the invention may be stored temporarily or permanently on a non transitory computer readable storage medium such as a compact disc CD a diskette a tape memory or any other computer readable storage device.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

