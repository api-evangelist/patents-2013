---

title: Systems and methods for managing deduplication reference data
abstract: A method for managing deduplication reference data may include (1) identifying multiple of data containers configured to store a plurality of deduplicated data segments that are referenced by multiple data objects within a deduplicated data system, (2) maintaining multiple reference databases including (i) a first reference database corresponding to a first subset of the data containers and (ii) a second reference database corresponding to a second subset of the data containers, the second subset differing from the first subset, (3) determining that a data object references at least one segment within a first data container within the first subset but does not reference any data segment within a second data container within the second subset and (4) updating the first reference database with information specifying that the data object references at least one data segment within at least one data container within the first subset of data containers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954398&OS=08954398&RS=08954398
owner: Symantec Corporation
number: 08954398
owner_city: Mountain View
owner_country: US
publication_date: 20130104
---
Deduplication storage systems are generally used to reduce the amount of storage space required to store files by identifying redundant data patterns within similar files. For example a deduplication storage system may divide multiple files into file segments and then identify at least one file segment obtained from one file that is identical to at least one file segment obtained from another file. Rather than storing multiple instances of a particular file segment the deduplication storage system may store a single instance of the file segment and allow multiple files to simply reference that instance of the file segment to reduce the amount of storage space required to store the files. As such deduplication storage systems typically only store file segments that are unique i.e. non redundant .

In order to prevent stored file segments from being prematurely or erroneously removed a deduplication storage system may maintain multiple reference objects such as reference lists and or reference counts that each indicate whether one or more backed up files currently reference a particular file segment. If a reference object indicates that no files are currently referencing a particular file segment the deduplication storage system may remove that file segment and reclaim the storage space occupied by the same.

Traditional deduplication systems typically store such reference objects in a reference database. Unfortunately if the reference database becomes corrupted the traditional deduplication system may suffer data losses and or storage leaks. Moreover taking the traditional deduplication system offline to repair the reference database may fail to meet service level requirements. As such the instant disclosure identifies a need for additional and improved systems and methods for managing deduplication reference data.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for managing deduplication reference data by maintaining multiple reference databases each of which stores reference information for a different subset of data containers within a deduplicated data system. In some examples these systems and methods may perform inline reference updates and or online checking of reference databases e.g. to repair corrupted reference databases while maintaining access to the remaining reference databases .

In one example a computer implemented method for managing deduplication reference data may include 1 identifying a plurality of data containers configured to store a plurality of deduplicated data segments that are referenced by a plurality of data objects within a deduplicated data system 2 maintaining a plurality of reference databases the plurality of reference databases including i a first reference database that is configured to store information specifying which data objects within the plurality of data objects reference at least one data segment within a first subset of the plurality of data containers and ii a second reference database that is configured to store information specifying which data objects within the plurality of data objects reference at least one data segment within a second subset of the plurality of data containers the second subset differing from the first subset 3 determining that a data object references at least one segment within a first data container within the first subset of the plurality of data containers but that the data object does not reference any data segment within a second data container within the second subset of the plurality of data containers and 4 updating the first reference database with information specifying that the data object references at least one data segment within at least one data container within the first subset of the plurality of data containers.

In some examples the computer implemented method may also include detecting a backup image introduced to the deduplicated data system by a backup operation the backup image including the data object. In these examples updating the first reference database may precede marking the operation as successful.

In some embodiments the computer implemented method may also include 1 identifying a corrupted reference database within the plurality of reference databases and 2 while rebuilding the corrupted reference database keeping the deduplicated data system online to allow i adding at least one data object to the deduplicated data system ii retrieving at least one data object from the deduplicated data system and or iii removing at least one data object from the deduplicated data system.

In some examples identifying the corrupted reference database may include checking a reference within a selected data object within the plurality of data objects that points to a referenced data segment within the plurality of data segments stored within a corresponding data container within the plurality of data containers and determining that the corrupted reference database does not correctly indicate that the selected data object references data stored within the corresponding data container. In these examples the computer implemented method may identify the corrupted reference database while the deduplicated data system is online.

In some embodiments identifying the corrupted reference database may include identifying the corrupted reference database before a checking period designated for checking each data object within the deduplicated data system against each reference database within the plurality of reference databases. In these embodiments rebuilding the corrupted reference database may include rebuilding the corrupted reference database during the checking period based at least in part on identifying the corrupted reference database before the checking period.

In some examples keeping the deduplicated data system online may include allowing removal of at least one data object that does not reference any data segment stored in any data container corresponding to the corrupted reference database but blocking removal of a selected data object that does reference at least one data segment stored in at least one data container corresponding to the corrupted reference database.

In some embodiments keeping the deduplicated data system online may include allowing removal of at least one data segment within the plurality of deduplicated data segments that is not stored in any data container corresponding to the corrupted reference database but blocking removal of at least one data segment stored in at least one data container corresponding to the corrupted reference database.

In one embodiment a system for implementing the above described method may include 1 an identification module programmed to identify a plurality of data containers configured to store a plurality of deduplicated data segments that are referenced by a plurality of data objects within a deduplicated data system 2 a maintaining module programmed to maintain a plurality of reference databases the plurality of reference databases including i a first reference database that is configured to store information specifying which data objects within the plurality of data objects reference at least one data segment within a first subset of the plurality of data containers and ii a second reference database that is configured to store information specifying which data objects within the plurality of data objects reference at least one data segment within a second subset of the plurality of data containers the second subset differing from the first subset 3 a determination module programmed to determine that a data object references at least one data segment within a first data container within the first subset of the plurality of data containers but that the data object does not reference any data segment within a second data container within the second subset of the plurality of data containers and 4 an updating module programmed to update the first reference database with information specifying that the data object references at least one data segment within at least one data container within the first subset of the plurality of data containers. The system may also include at least one processor configured to execute the identification module the maintaining module the determination module and the updating module.

In some examples the above described method may be encoded as computer readable instructions on a computer readable storage medium. For example a computer readable storage medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify a plurality of data containers configured to store a plurality of deduplicated data segments that are referenced by a plurality of data objects within a deduplicated data system 2 maintain a plurality of reference databases the plurality of reference databases including i a first reference database that is configured to store information specifying which data objects within the plurality of data objects reference at least one data segment within a first subset of the plurality of data containers and ii a second reference database that is configured to store information specifying which data objects within the plurality of data objects reference at least one data segment within a second subset of the plurality of data containers the second subset differing from the first subset 3 determine that a data object references at least one data segment within a first data container within the first subset of the plurality of data containers but that the data object does not reference any data segment within a second data container within the second subset of the plurality of data containers and 4 update the first reference database with information specifying that the data object references at least one data segment within at least one data container within the first subset of the plurality of data containers.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for managing deduplication reference data. As will be explained in greater detail below by maintaining multiple reference databases each of which stores reference information for a different subset of data containers within a deduplicated data system the systems and methods described herein may facilitate repairing references and e.g. thereby preventing data loss and or storage leaks within the deduplicated data system while maintaining access to the deduplicated data system. For example these systems and methods may perform online checking of reference databases e.g. to repair corrupted reference databases while maintaining access to the remaining reference databases . Additionally or alternatively these systems and methods may perform inline reference updates e.g. thereby preventing a corrupted transaction log from invalidating all reference databases .

The following will provide with reference to detailed descriptions of exemplary systems for managing deduplication reference data. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . Detailed descriptions of an exemplary deduplicated data system will be provided in connection with . Detailed descriptions of an exemplary timeline for managing deduplicated reference data will be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In addition and as will be described in greater detail below exemplary system may include a determination module programmed to determine that a data object references at least one data segment within a first data container within the first subset of the plurality of data containers but that the data object does not reference any data segment within a second data container within the second subset of the plurality of data containers. Exemplary system may also include an updating module programmed to update the first reference database with information specifying that the data object references at least one data segment within at least one data container within the first subset of the plurality of data containers. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or storage system computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include one or more databases such as databases . In one example databases may be configured to store reference data linking data objects and or images to data containers. Additionally or alternatively databases may store deduplicated data segments and or lists of data segments constituting data objects.

Databases may represent portions of a single computing device or a plurality of computing devices. For example databases may represent a portion of storage system in computing system in and or portions of exemplary network architecture in . Alternatively databases in may represent one or more physically separate devices capable of being accessed by a computing device such as storage system in computing system in and or portions of exemplary network architecture in .

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device in communication with a storage system via a network . Computing device may be programmed with one or more of modules and or may store all or a portion of the data in databases . Additionally or alternatively storage system may be programmed with one or more of modules and or may store all or a portion of the data in databases .

In one embodiment one or more of modules from may when executed by at least one processor of computing device and or storage system facilitate computing device and or storage system in managing deduplication reference data. In one example storage system may store may store data for a deduplicated data system and computing device may manage data stored on storage system for the deduplicated data system. For example and as will be described in greater detail below one or more of modules may cause computing device and or storage system to 1 identify data containers configured to store a plurality of deduplicated data segments that are referenced by data objects within a deduplicated data system 2 maintain reference databases reference databases including i a reference database that is configured to store information specifying which data objects within data objects reference at least one data segment within data containers and ii a reference database that is configured to store information specifying which data objects within data objects reference at least one data segment within data containers 3 determine that a data object references at least one data segment within data container but that data object does not reference any data segment within data container and 4 update reference database with information specifying that data object references at least one data segment within at least one data container within data containers .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Storage system generally represents any type or form of computing device that is capable of storing retrieving relaying and or accessing data. Examples of storage system include without limitation storage arrays and deduplication appliances.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Storage Area Network SAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in FIG. or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between computing device and storage system .

As illustrated in at step one or more of the systems described herein may identify a plurality of data containers configured to store a plurality of deduplicated data segments that are referenced by a plurality of data objects within a deduplicated data system. For example at step identification module may as part of computing device in identify data containers configured to store a plurality of deduplicated data segments that are referenced by data objects within a deduplicated data system.

As used herein the phrase deduplicated data system may refer to any type or form of storage system and or device capable of identifying redundant data patterns within a collection of data and eliminating such redundancy by only storing a single instance of data. For example the deduplicated data system may deduplicate data segments across multiple backup images. As used herein the phrase data object may refer to any image file database and or other object capable of deduplicated storage. For example the phrase data object may refer to a backup image and or a file within a backup image. In some examples the phrase data object may refer to a list of references to one or more data segments. As used herein the phrase data segment may refer to any unit of data. Examples of a data segment include but are not limited to a portion of a file a portion of an image a data block a file a portion of a data stream and or a database entry. As used herein the phrase data container may refer to a collection of deduplicated data segments stored for reference within a deduplicated data system.

Identification module may identify the plurality of data containers in any of a variety of ways. For example identification module may read a configuration file and or registry that identifies the plurality of data containers. Additionally or alternatively identification module may receive a communication from the deduplicated data system e.g. via an application programming interface identifying the plurality of data containers. In some examples identification module may identify the plurality of data containers by operating as a part of the deduplicated data system.

Returning to at step one or more of the systems described herein may identify a plurality of data containers configured to maintain a plurality of reference databases the plurality of reference databases including 1 a first reference database that is configured to store information specifying which data objects within the plurality of data objects reference at least one data segment within a first subset of the plurality of data containers and 2 a second reference database that is configured to store information specifying which data objects within the plurality of data objects reference at least one data segment within a second subset of the plurality of data containers the second subset differing from the first subset. For example at step maintaining module may as part of computing device in maintain reference databases reference databases including i a reference database that is configured to store information specifying which data objects within data objects reference at least one data segment within data containers and ii a reference database that is configured to store information specifying which data objects within data objects reference at least one data segment within data containers .

As used herein the phrase reference database may refer to any database file and or other data structure for storing information about which data objects within a deduplicated data system reference which data containers within the deduplicated data system. For example a reference database may list one or more data containers referenced by one or more backup images. Additionally or alternatively a reference database may list one or more data objects that reference one or more deduplicated data segments stored within one or more data containers. In some examples a deduplicated data system may use a reference database while determining whether a deduplicated data segment within a data container is still referenced or whether the deduplicated data segment may be deleted.

Maintaining module may maintain the plurality of reference databases in any suitable manner. For example maintaining module may identify a grouping of the plurality of data containers and maintain a reference database for each group of data containers. In this example a reference database may store information about which data objects within the deduplicated data system reference which data containers within the group of data containers corresponding to the reference database. In some examples maintaining module may maintain a balanced grouping of data containers e.g. by evenly distributing data containers among groups by number by activity etc. . In some examples maintaining module may identify a change to the plurality of data objects and determine that a reference database within the plurality of reference databases is implicated in the change by determining that a reference to a data container corresponding to the reference database has been added and or removed by the change. Accordingly maintaining module may update the identified reference database without updating other reference databases not implicated in the change.

Using as an example deduplicated data system may include a reference database that stores information indicating which data containers within data containers are referenced by which data objects. For example reference database may store information indicating that data container is referenced by data object and data container is referenced by data objects and . Likewise reference database may store information indicating that data container is referenced by data object and data container is referenced by data object . Similarly reference database may store information indicating that data container is referenced by data object and data container is referenced by data object . Likewise reference database may store information indicating that data container is referenced by data object .

Returning to at step one or more of the systems described herein may determine that a data object references at least one data segment within a first data container within the first subset of the plurality of data containers but that the data object does not reference any data segment within a second data container within the second subset of the plurality of data containers. For example at step determination module may as part of computing device in determine that a data object references at least one data segment within data container but that data object does not reference any data segment within data container .

Determination module may determine that the data object references the data segment within the first data container in any suitable context. For example determination module may determine that the data object references the data segment when the data object is added to the deduplicated data system. For example determination module may calculate a hash of the data segment and search the plurality of data containers for the data segment based on the hash. Determination module may thereby determine that the first data container stores the data segment. Additionally or alternatively determination module may determine that no data container already includes the data segment and select the first data container for storing the data segment.

Determination module may determine that the data object does not reference any data segment within the second data container in any suitable manner. For example determination module may search for hashes of the data segments within the data object among the plurality of data containers and identify no match with the second data container. Accordingly the data object may reference data segments pertaining to the first subset of data containers without referencing data segments pertaining to the second subset of data containers.

Using as an example determination module may determine that data object references at least one data segment within data containers but that data object does not reference any data segment within data containers .

Returning to at step one or more of the systems described herein may update the first reference database with information specifying that the data object references at least one data segment within at least one data container within the first subset of the plurality of data containers. For example at step updating module may as part of computing device in update reference database with information specifying that data object references at least one data segment within at least one data container within data containers .

Updating module may update the first reference database with the information in any suitable manner. For example updating module may update the first reference database to specify that the data segment within a specified data container within the first subset is referenced by the data object. Using as an example updating module may update reference database with information specifying that at least one data segment within data container is referenced by data object .

In some examples one or more of the systems described herein may also detect a backup image introduced into the deduplicated data system by a backup operation the backup image including the data object. For example a detection module may as a part of computing device in may detect data object introduced into the deduplicated data system e.g. into data objects on storage system by a backup operation.

Detection module may detect the backup image in any suitable manner. For example detection module may detect the backup image by identifying an operation writing the backup image to the deduplicated data system. Additionally or alternatively detection module may detect the backup image by observing the execution of at least a part of the backup operation. Additionally or alternatively detection module may receive a message from a backup system identifying the backup image.

Once detection module detects the backup image in some examples updating module may update the first reference database before marking the backup operation as successful. For example a backup system performing the backup operation may perform the backup operation as an overarching transaction. In some examples the backup system may mark the backup image as unusable corrupt and or failed if the backup operation is not successful. Additionally or alternatively the backup system may repeat and or restart the backup operation and or a portion of the backup operation if the backup operation is not successful. Accordingly one or more of the systems described herein e.g. including detection module and or updating module may perform an inline reference update e.g. updating one or more reference databases corresponding to the backup image during and or as a part of the backup operation . In some examples by updating the reference database using an inline reference update the systems and methods described herein may preserve the validity of all of the plurality of reference databases. For example if a transaction log involved in storing the backup image in the deduplicated data system were corrupted without an inline reference update the deduplication system may be unable to guarantee that the backup image does not reference any given data containers within the deduplicated data system. Accordingly by performing the inline reference update the systems and methods may prevent such an error from invalidating unrelated data containers within the deduplicated data system.

In some embodiments one or more of the systems described herein may also rebuild one or more of the reference databases within the plurality of references databases. For example a rebuilding module may as a part of computing device in 1 identify a corrupted reference database within the plurality of reference databases and 2 while rebuilding the corrupted reference database keep the deduplicated data system online to allow i adding at least one data object to the deduplicated data system ii retrieving at least one data object from the deduplicated data system and or iii removing at least one data object from the deduplicated data system.

Rebuilding module may identify the corrupted reference database in any suitable manner. In some examples rebuilding module may identify a fault in an underlying storage device that stores the corrupted reference database. Additionally or alternatively the reference database may be corrupted by being missing. Accordingly rebuilding module may identify the corrupted reference database by identifying a missing reference database.

In some examples rebuilding module may identify the corrupted reference database by checking a reference within a selected data object within the plurality of data objects that points to a referenced data segment within the plurality of data segments stored within a corresponding data container within the plurality of data containers and determining that the corrupted reference database does not correctly indicate that the selected data object references data stored within the corresponding data container. In these examples rebuilding module may identify the corrupted reference database while the deduplicated data system is online. For example the deduplicated data system may add a data object to retrieve a data object from and or remove a data object from the deduplicated data system while rebuilding module identifies the corrupted reference database.

In some examples rebuilding module may periodically check the plurality of reference databases. For example rebuilding module may identify the corrupted reference database before a checking period designated for checking each data object within the deduplicated data system against each reference database within the plurality of reference databases. In this example rebuilding module may rebuild the corrupted reference database during the checking period based at least in part on having identified the corrupted reference database before the checking period.

In some examples rebuilding module may keep the deduplicated data system online by allowing removal of at least one data object that does not reference any data segment stored in any data container corresponding to the corrupted reference database but blocking removal of a selected data object that does reference at least one data segment stored in at least one data container corresponding to the corrupted reference database. Additionally or alternatively rebuilding module may keep the deduplicated data system online by allowing removal of at least one data segment within the plurality of deduplicated data segments that is not stored in any data container corresponding to the corrupted reference database but blocking removal of at least one data segment stored in at least one data container corresponding to the corrupted reference database.

As explained above by maintaining multiple reference databases each of which stores reference information for a different subset of data containers within a deduplicated data system the systems and methods described herein may facilitate repairing references and e.g. thereby preventing data loss and or storage leaks within the deduplicated data system while maintaining access to the deduplicated data system. For example these systems and methods may perform online checking of reference databases e.g. to repair corrupted reference databases while maintaining access to the remaining reference databases . Additionally or alternatively these systems and methods may perform inline reference updates e.g. thereby preventing a corrupted transaction log from invalidating all reference databases .

By maintaining multiple partitioned reference databases a corruption within one of the reference databases may be contained allowing the deduplicated data system to remain online as the corrupted reference database is repaired e.g. allowing deletion operations backup operations that use the deduplicated data system for storage etc. preventing only data containers corresponding to the corrupted reference database from contributing to deletion operations. Once the corrupted reference database is repaired deletion operations relying on data containers corresponding to the previously corrupted reference database may resume.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example databases from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. Compact Disks CDs or Digital Video Disks DVDs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for managing deduplication reference data.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive a reference database to be transformed transform the reference database by repairing the reference database output a result of the transformation to a deduplicated data system use the result of the transformation to track reference information e.g. to facilitate data removal from deduplicated data systems and store the result of the transformation to a storage device. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

