---

title: Action processing in information exchange services
abstract: Provided herein are systems, methods, and software for facilitating information exchange services. In at least one implementation, an information exchange service processes communications indicative of a plurality of actions taken with respect to a plurality of derivative versions of a service item associated with a source version of the service item to determine which action of the plurality of actions controls. The information exchange service identifies a modification to apply to data associated with the source version of the service item to reflect the action determined to control and initiates communications indicative of the modification with which to update data associated with each of the plurality of derivative versions of the service item.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09521171&OS=09521171&RS=09521171
owner: Microsoft Technology Licensing, LLC
number: 09521171
owner_city: Redmond
owner_country: US
publication_date: 20130614
---
This application claims the benefit of and priority to U.S. Provisional Patent Application No. 61 778 869 filed on Mar. 13 2013 and entitled ACTION PROCESSING IN INFORMATION EXCHANGE SERVICES which is hereby incorporated by reference in its entirety.

Aspects of the disclosure are related to computing hardware and software technology and in particular to information management applications.

Information management applications provide users with effective and convenient ways to communicate with others and manage their information. Examples of information management applications include but are not limited to email applications and calendar applications. Some information management applications integrate these various types of applications by way of modules such as email calendar contact and task modules although each type of application or functionality may also be provided in a stand alone manner. Microsoft Outlook is one example of an information management application.

While many information management applications are provided as locally installed and executed applications many can be experienced in a wide variety of ways. For example some information management applications are available as web based applications that are experienced through a browser application as mobile applications customized for mobile environments or even as a mobile web based application generally developed for a mobile browser experience. In addition information management applications can be experienced on a wide variety of computing devices such as desktop laptop or tablet computers mobile phones gaming systems Internet appliances or any other physical or virtual computing system variation or combination thereof.

Most information management applications communicate with application exchange services to facilitate various tasks such as sending and receiving email scheduling events and the like. Many of these and other tasks implicate data that is synchronized. For example when an action is taken in one environment changes can be made to data that are then synchronized with other versions of the data.

In two specific examples when a user deletes an email or dismisses an event reminder data representative of the email or event reminder is changed as are other versions of the data that may be accessed through other application environments. This may be the case not only with respect to the various ways in which a user may engage an information exchange service but also with respect to multi user situations. For example multiple users may interact with a shared inbox. While the users may generally interact without causing conflicts it is possible for an action of one user to conflict with an action taken by another user. In these and other scenarios conflicts can lead to inconsistent experiences data corruption and possibly other problems arising from the conflicting actions.

Provided herein are systems methods and software for facilitating information exchange services. In at least one implementation an information exchange service processes communications indicative of a plurality of actions taken with respect to a plurality of derivative versions of a service item associated with a source version of the service item to determine which action of the plurality of actions controls. The information exchange service identifies a modification to apply to data associated with the source version of the service item to reflect the action determined to control. The information exchange service then initiates communications indicative of the modification with which to update data associated with each of the plurality of derivative versions of the service item.

This Overview is provided to introduce a selection of concepts in a simplified form that are further described below in the Technical Disclosure. It should be understood that this Overview is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Implementations disclosed herein enable improved data consistency in information management applications. Actions taken with respect to various derivative versions of a service item are reported to an information exchange service. The information exchange service determines what modification or modifications should be made to a source version of the service item in view of the various actions. The information exchange service makes the modification to the source version and communicates the modification so that data associated with the derivative versions of the service item may be updated.

In at least one implementation an information management service processes action communications indicative of various actions taken with respect to various derivative versions of a service item associated with a source version of the service item to determine which action of the various actions controls. The information management service identifies a modification to apply to source data associated with the source version of the service item to reflect the action determined to control and initiates update communications indicative of the modification with which to update derivative data associated with each of the various derivative versions of the service item.

In at least some implementations the action communications include a first action communication initiated by a first client running a first information management application and a second action communication initiated by a second client running a second information management application. The first action communication indicates a first action taken by the first client with respect to a first derivative version of the service item while the second action communication indicates a second action taken by the second client with respect to a second derivative version of the service item.

The update communications may include a first update communication indicative of the modification with which to update the derivative data associated with the first derivative version of the service item and a second update communication indicative of the modification with which to update the derivative data associated with the second derivative version of the service item.

In some implementations the modification with which to update the derivative data is the same for both the first derivative version and the second derivative version of the various derivative versions of the service item. Examples of the service item include but are not limited to an email a calendar event a contact and a task.

In a scenario where the service item is an email the various actions taken with respect to the various derivative versions of the service item may be for example a move action and a delete action and the modification may be the move action or the delete action. In a scenario where the service item is a calendar event the various actions taken with respect to the various derivative versions of the service item may be for example a cancel action and a reminder action and the modification may be the cancel action or the reminder action.

In one implementation an information management application running on a suitable application platform initiates an action with respect to one of various local versions of a service item associated with a source version of the service item. The information management application transfers an action communication indicative of the action to an information exchange service that maintains the source version of the service item. Responsive to the action communication the information management application receives an update communication indicative of a modification with which to update local data associated with the one of the various local versions of the service item and updates the local data in accordance with the modification.

In some scenarios the modification may correspond to a second action initiated with respect to a second one of the various local versions of the service item that conflicts with the action initiated with respect to the one of the various local versions. For example the service item may be an email and the action may include deleting the email. In addition the second action may include moving the email. To update the local data in accordance with the modification the information management application may be directed to move the email to a different folder rather than delete the email.

In another example the service item may be a calendar event the action may include canceling the calendar event and the second action may include scheduling a reminder for the calendar event. To update the local data in accordance with the modification the information management application may be directed to schedule the reminder for the event. In yet another example the service item may be a contact and updating the local data may include changing the contact.

In a brief operational example two different users may share access to an email account hosted by an email service. Each user may have access rights such that they can initiate actions with respect to the emails in an inbox and other folders such as deleting moving forwarding and replying to emails as well as performing any other action. Each user may interact with the email service by way of an email application running on a suitable application platform such a desktop laptop or tablet computer a mobile phone personal digital assistant Internet appliance or any other type of platform.

In operation each of the users interacts with graphical objects menus and other elements in a user interface to the email application. It may be appreciated that the email application could be a stand alone application or may include other features or functionality such as calendar contacts and tasks modules. Local versions of each email in the shared email account are stored locally with respect to each user while a source version of each email is maintained remotely by the email service.

As the users interact with each respective instance of the email application the actions taken with respect to the emails are communicated by the email application to the email service running remotely in a service environment. Rather than update the source version of each email in view of the actions taken locally by a user the email service first analyzes each action in view of other actions taken by another user or users with respect to the same email to determine which action controls. The email service decides what modification to make to the source version of the email and then communicates the modification to each email application running locally with respect to the users. In this manner conflicts that may arise when both users take inconsistent actions with respect to each other can be mitigated.

In one exemplary scenario a first user operating a first computing system may interact with a user interface to a first client application to delete an email in a shared inbox. Before after or at substantially the same time as the first user a second user operating a second computing system may interact with a user interface to a second client application to move the same email in the shared inbox to a different folder. In other words the second user initiates an action that is in conflict with or is inconsistent with another action.

Rather than implement the delete and move actions or operations locally and then update the email service each client application first reports the action that occurred. The email service can consider various rules and criteria to determine how to modify a source version of the email maintained by the email service. For example the email service may consider the identity of each user a role associated with each user an order in which the actions occurred or any other factor that may be relevant.

In this scenario the email service may determine to either implement the delete action or implement the move action and modifies a source version of the email accordingly. The email service then communicates the modification to each client application such that each client application can modify a local version of the email to be synchronized with the source version. Assuming the delete action is given priority the email service would delete the source version of the email and communicate the deletion to the client applications. Each client application would then delete their respective local version of the email. Assuming the mail action is given priority the email service would move the source version of the email to a different folder and communicate the move to the client applications. Each client application would then move their respective local version of the email.

Referring now to the drawings illustrates one operational scenario involving a service environment in an implementation. Service environment includes information exchange service . Information exchange service may communicate with various information management applications not shown to facilitate various services such as email calendaring and contacts services. As part of the various services information exchange service maintains a source version of a service item service item . Derivative versions of the source service item exist in other environments such as service item and service item . As actions are taken with respect to the derivative versions of the service items information exchange service determines what modifications to make to data associated with service item such as a mailbox or other suitable data structure. Those modifications can be communicated such that updates can be implemented with respect to data associated with the other service items service item and service item .

Information exchange service determines which action of the various actions controls step . In other words information exchange service analyzes various factors or characteristics of each action against rules and other criteria to determine which action should control or be applied assuming the actions are in conflict. For example one action may represent that a reminder should be associated and started with respect to a calendar event while another action may indicate that the event should be deleted. Since these two actions conflict information exchange service analyzes their various characteristics and other considerations to determine which action controls.

After determining which action controls information exchange service identifies a modification to make to data associated with the source item step . For example if a snooze action controls relative to a delete action data associated with the source item may be updated to reflect this state. In another example various move actions may conflict with each other when more than one attempt is made to move a mail item to a new folder. Assuming it is resolved which action controls data associated with the source version of the mail item can be updated to reflect its new position in a folder.

Having identified and possibly implemented the modification with respect to the source version of the service item information exchange service communicates the modification such that derivative versions of the service item may be updated accordingly step . For example various clients running various instances of an information management application can update local versions of the service items in accordance with the modification made with respect to the source version of the service item.

Examples of application platforms and include but are not limited to desktop computers work stations laptop computers notebook computers tablet computers mobile phones personal digital assistances media devices gaming devices and any other physical or virtual computing machine or combinations and variations thereof capable of implementing at least one of a variety of information management applications. Service environment may be any computing system or collection of computing systems capable of implementing an information exchange service .

Application platforms and may each be any computing apparatus system device or collections thereof that employ a computing architecture suitable for implementing information management application or respectively. Computing architecture referred to with respect to is one such representative architecture. Information management applications and may each be any version or variety of an information management application. Examples include but are not limited to locally installed and executed applications streaming applications web based applications that execute at least in part within the context of a browser application mobile applications mobile web based applications that execute at least in part within the context of a mobile browser application or any other application type variation or combination thereof.

Information management applications and may each be embodied in program instructions that when executed by application platforms and respectively direct each to operate as described herein for action process discussed with respect to . The program instructions may take the form of compiled object code interpreted scripts or any other suitable form of program instructions that may be executed directly or indirectly by an application platform as well as any suitable variation or combination thereof. Examples of information management applications include but are not limited to Microsoft Outlook Mozilla Thunderbird Lightening Open Xchange Microsoft Outlook Web App Microsoft Outlook Web App for mobile device Outlook.com Gmail and Microsoft Outlook for mobile devices as well as another suitable information management application variation or combination thereof.

Service environment and service environment may each include any computing apparatus system device or collections thereof that employ a computing architecture suitable for implementing information exchange service and information exchange service respectively. Computing architecture referred to with respect to is one such representative architecture. Examples include server computers cloud computing platforms data centers and any physical or virtual computing machine as well as any variation or combination thereof. Examples of information exchange service and information exchange service include but are not limited to Microsoft Exchange Microsoft O365 Hotmail Outlook.com and Gmail as well as any other information exchange service combination or variation thereof capable of operating as described herein.

In operation any of applications platforms and may communicate from time to time with service environment or service environment over communication network to facilitate the exchange of information between information management applications and and information exchange service and between information management application and information exchange service . Service environment and service environment may also communicate over communication network to facilitate the exchange of information.

Communication between any of the elements contemplated in may occur in accordance with various communication protocols such as the Internet protocol IP IPv4 IPv6 etc. the transfer control protocol TCP and the user datagram protocol UDP as well as any other suitable communication protocol variation or combination thereof. Communication network may be representative of a network or collection of networks over which the elements contemplated in may exchange information such as an intranet the Internet a local area network a wide area network a wireless network a wired network or any combination or variation thereof. Communication network may include connections devices and communication media such as metal glass air or any other suitable communication media over which information may be exchanged. The aforementioned communication media network connections protocols and devices are well known and need not be discussed at length here.

The manner and format in which information is exchanged may vary. In some implementations an application may exchange information with a service environment and information exchange service in accordance with various protocols such as IMAP internet message access protocol POP post office protocol SMTP simple mail transfer protocol OWA Outlook Web App webmail protocol various other webmail protocols various proprietary protocols HTTP hypertext transfer protocol REST representational state transfer WebSocket DOM Document Object Model HTML hypertext markup language CSS cascading style sheets HTML5 XML extensible markup language Javascript JSON Javascript Object Notation and AJAX Asynchronous Javascript and XML as well as any other suitable protocol variation or combination thereof.

Referring now to computing architecture is representative of an architecture that may be employed in any apparatus system or device or collections thereof to suitably implement all or portions of action process illustrated in or variations thereof or action process illustrated in or variations thereof and optionally all or portions of the information management application referred to with respect to . Action process or may be implemented on a single apparatus system or device or may be implemented in a distributed manner. The information management application may also be implemented on a single apparatus system or device or may be implemented in a distributed manner. Action process may be integrated with the information management application but may also stand alone or be embodied in some other application.

Computing architecture may be employed in for example desktop computers laptop computers tablet computers notebook computers mobile computing devices cell phones media devices and gaming devices as well as any other type of physical or virtual computing machine and any combination or variation thereof. Computing architecture may also be employed in for example server computers cloud computing platforms data centers any physical or virtual computing machine and any variation or combination thereof.

Computing architecture includes processing system storage system software communication interface system and user interface system . Processing system is operatively coupled with storage system communication interface system and user interface system . Processing system loads and executes software from storage system . When executed by processing system software directs processing system to operate as described herein for action process or or their variations. Computing architecture may optionally include additional devices features or functionality not discussed here for purposes of brevity.

Referring still to processing system may comprise a microprocessor and other circuitry that retrieves and executes software from storage system . Processing system may be implemented within a single processing device but may also be distributed across multiple processing devices or sub systems that cooperate in executing program instructions. Examples of processing system include general purpose central processing units application specific processors and logic devices as well as any other type of processing device combinations or variation.

Storage system may comprise any computer readable storage media readable by processing system and capable of storing software . Storage system may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Examples of storage media include random access memory read only memory magnetic disks optical disks flash memory virtual memory and non virtual memory magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other suitable storage media. In no case is the storage media a propagated signal.

In addition to storage media in some implementations storage system may also include communication media over which software may be communicated internally or externally. Storage system may be implemented as a single storage device but may also be implemented across multiple storage devices or sub systems co located or distributed relative to each other. Storage system may comprise additional elements such as a controller capable of communicating with processing system or possibly other systems.

Software may be implemented in program instructions and among other functions may when executed by processing system direct processing system to operate as described herein for action process or . In particular the program instructions may include various components or modules that cooperate or otherwise interact to carry out action process or . The various components or modules may be embodied in compiled or interpreted instructions or in some other variation or combination of instructions. The various components or modules may be executed in a synchronous or asynchronous manner in a serial manner or in parallel in a single threaded environment or multi threaded or in accordance with any other suitable execution paradigm variation or combination thereof. Software may include additional processes programs or components such as operating system software or other application software. Software may also comprise firmware or some other form of machine readable processing instructions executable by processing system .

In general software may when loaded into processing system and executed transform a suitable apparatus system or device employing computing architecture overall from a general purpose computing system into a special purpose computing system customized to facilitate data synchronization as described herein for each implementation. Indeed encoding software on storage system may transform the physical structure of storage system . The specific transformation of the physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the storage media of storage system and whether the computer storage media are characterized as primary or secondary storage as well as other factors.

For example if the computer storage media are implemented as semiconductor based memory software may transform the physical state of the semiconductor memory when the program is encoded therein such as by transforming the state of transistors capacitors or other discrete circuit elements constituting the semiconductor memory. A similar transformation may occur with respect to magnetic or optical media. Other transformations of physical media are possible without departing from the scope of the present description with the foregoing examples provided only to facilitate this discussion.

It should be understood that computing architecture is generally intended to represent an architecture on which software may be deployed and executed in order to implement action process or or variations thereof and optionally all or portions of an information management application. However computing architecture may also be suitable for any computing system on which software may be staged and from where software may be distributed transported downloaded or otherwise provided to yet another computing system for deployment and execution or yet additional distribution.

Communication interface system may include communication connections and devices that allow for communication with other computing systems not shown over a communication network or collection of networks not shown . Examples of connections and devices that together allow for inter system communication may include network interface cards antennas power amplifiers RF circuitry transceivers and other communication circuitry. The connections and devices may communicate over communication media to exchange communications with other computing systems or networks of systems such as metal glass air or any other suitable communication media. The aforementioned communication media network connections and devices are well known and need not be discussed at length here.

User interface system is optional and may include a mouse a voice input device a touch input device for receiving a touch gesture from a user a motion input device for detecting non touch gestures and other motions by a user and other comparable input devices and associated processing elements capable of receiving user input from a user. Output devices such as a display speakers haptic devices and other types of output devices may also be included in user interface system . In some cases the input and output devices may be combined in a single device such as a display capable of displaying images and receiving touch gestures. The aforementioned user input and output devices are well known in the art and need not be discussed at length here. User interface system may also include associated user interface software executable by processing system in support of the various user input and output devices discussed above. Separately or in conjunction with each other and other hardware and software elements the user interface software and devices may support a graphical user interface a natural user interface or any other suitable user interface.

Information exchange service also communicates the modification to information management application and information management application . Information management application deletes its respective derivative version of the email. Information management application also deletes its respective derivative version of the email. In this manner the various derivative versions of the service item are synchronized with the source version of the service item.

Information exchange service considers the reported actions in view of each other and weighs them against various rules and criteria to determine which one controls. In operational scenario it is assumed for exemplary purposes that the move action controls. Accordingly information exchange service modifies a source version of the email by moving it to a different folder. Information exchange service also communicates the modification to information management application and information management application . Responsive to the communication from information exchange service information management application moves its respective derivative version of the email and information management application moves its respective derivative version of the email thereby synchronizing their data.

Information exchange service considers the reported actions in view of each other and weighs them against various rules and criteria to determine which one controls. In operational scenario it is assumed for exemplary purposes that the edit action controls. Accordingly information exchange service edits a source version of the contact. Information exchange service also communicates the modification to information management application and information management application . Responsive to the communication from information exchange service information management application edits its respective derivative version of the contact and information management application edits its respective derivative version of the contact such that the derivative and source versions of the contact are synchronized.

The functional block diagrams operational sequences and flow diagrams provided in the Figures are representative of exemplary architectures environments and methodologies for performing novel aspects of the disclosure. While for purposes of simplicity of explanation methods included herein may be in the form of a functional diagram operational sequence or flow diagram and may be described as a series of acts it is to be understood and appreciated that the methods are not limited by the order of acts as some acts may in accordance therewith occur in a different order and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a method could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all acts illustrated in a methodology may be required for a novel implementation.

The included descriptions and figures depict specific implementations to teach those skilled in the art how to make and use the best option. For the purpose of teaching inventive principles some conventional aspects have been simplified or omitted. Those skilled in the art will appreciate variations from these implementations that fall within the scope of the invention. Those skilled in the art will also appreciate that the features described above can be combined in various ways to form multiple implementations. As a result the invention is not limited to the specific implementations described above but only by the claims and their equivalents.

