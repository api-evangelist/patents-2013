---

title: Systems and methods for adaptive error-correction coding
abstract: A storage module is configured to store data segments, such as error-correcting code (ECC) codewords, within an array comprising a plurality of columns. The ECC codewords may comprise ECC codeword symbols. The ECC symbols of a data segment may be arranged in a horizontal arrangement, a vertical arrangement, a hybrid channel arrangement, and/or vertical stripe arrangement within the array. The individual ECC symbols may be stored within respective columns of the array (e.g., may not cross column boundaries). Data of an unavailable ECC symbol may be reconstructed by use of other ECC symbols stored on other columns of the array.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116823&OS=09116823&RS=09116823
owner: Intelligent Intellectual Property Holdings 2 LLC
number: 09116823
owner_city: 
owner_country: DE
publication_date: 20130314
---
This application is a continuation in part of and claims priority to U.S. patent application Ser. No. 13 784 705 entitled Systems and Methods for Adaptive Storage filed Mar. 4 2013 for David Flynn et al. which claims priority to U.S. Provisional Patent Application Ser. No. 61 606 253 entitled Adaptive Data Arrangement filed Mar. 2 2012 for David Flynn et al. and to U.S. Provisional Patent Application Ser. No. 61 606 755 entitled Adaptive Data Arrangement filed Mar. 5 2012 for David Flynn et al. and is a continuation in part of and claims priority to U.S. patent application Ser. No. 13 296 834 entitled Apparatus System and Method for Storage Space Recovery in Solid State Storage filed Nov. 15 2011 for David Flynn et al. which is a continuation in part of and claims priority to U.S. patent application Ser. No. 11 952 101 entitled Apparatus System and Method for Storage Space Recovery in Solid State Storage filed Dec. 6 2007 for David Flynn et al. which claims priority to U.S. Provisional Patent Application Ser. No. 60 873 111 entitled Elemental Blade System filed Dec. 6 2006 for David Flynn et al. and to U.S. Provisional Patent Application Ser. No. 60 974 470 entitled Apparatus System and Method for Object Oriented Solid State Storage filed Sep. 22 2007 for David Flynn et al. each of which is incorporated herein by reference.

This disclosure relates to data storage and in particular to data layout and or arrangement on a solid state storage array.

Solid state storage devices may have different read time Tr stream time Ts and other characteristics which may affect device performance in different data layout configurations. In addition data layout configurations and in particular error correction code ECC encoding may determine performance and data security characteristics of a storage device. However many storage systems use static fixed size ECC encoding schemes which are tied to the underlying structure of the storage media.

Disclosed herein are embodiments of an apparatus comprising an error correcting code ECC write module configured to generate a plurality of ECC codeword symbols comprising data of a storage request wherein the ECC codeword symbols are configured for storage within respective columns of a solid state storage array each column comprising one or more solid state storage elements and an adaptive write module configured to stream the ECC codeword symbols comprising the data of the storage request to respective columns of a set of two or more columns of the solid state storage array.

The data of the storage request may comprise a data packet a data segment a block and or a sector. The ECC write module may be configured to generate a plurality of ECC codeword symbols comprising the data and the adaptive write module may be configured to distribute the ECC codeword symbols between a plurality of different solid state storage elements.

The adaptive write module may be configured to stream the ECC codeword symbols to the solid state storage array in a plurality of data rows each data row comprising data for storage within a respective one of the columns. The apparatus may include a parity module configured to generate parity data corresponding to each of the data rows.

The adaptive write module may be configured to stream the ECC codeword symbols comprising the data of the storage request to a first independent channel comprising a subset of the columns of the array with ECC codeword symbols comprising data of another storage request to a different independent channel comprising a different subset of the columns of the array.

In some embodiments the apparatus comprises a read module configured to read a plurality of ECC codeword symbols stored within a plurality of different solid state storage elements. Each ECC codeword symbol may be read from a respective one of the solid state storage elements. The apparatus may further include a data recovery module configured to reconstruct an unavailable ECC codeword symbol read from a first one of the solid state storage elements using other ECC codeword symbols stored on others of the solid state storage elements. The data recovery module may be configured to reconstruct the unavailable ECC codeword symbol by use of parity data corresponding to the unavailable codeword and other ECC codeword symbols.

The adaptive write module may be configured to stream a respective ECC codeword symbol to a plurality of solid state storage elements in each of a plurality of stream cycles. The apparatus may further include a parity module configured to generate parity data corresponding to the ECC symbols being streamed to the plurality of solid state storage elements in the stream cycle. The adaptive write module may be configured to stream the parity data with the ECC codeword symbols corresponding to the parity data.

The ECC write module may be configured to generate one byte ECC codeword symbols and the adaptive write module may be configured to stream a respective one of the ECC codeword symbols to each of a plurality of solid state storage elements in each of a plurality of bus cycles. In some embodiments the ECC write module is configured to generate multi byte ECC codeword symbols and the adaptive write module is configured to stream portions of the multi byte ECC codeword symbols to respective solid state storage elements in each of a plurality of stream cycles such that the portions of each multi byte ECC codeword symbol are streamed to a respective one of the solid state storage elements.

Disclosed herein are embodiments of a method for adaptive error correcting encoding. The disclosed methods may comprise one or more machine executable operations and or steps. The disclosed operations and or steps may be embodied as program code stored on a computer readable storage medium. Accordingly embodiments of the methods disclosed herein may be embodied as a computer program product comprising a computer readable storage medium storing computer usable program code executable to perform one or more method operations and or steps.

Embodiments of the disclosed method may include determining a storage location of a plurality of error correcting code ECC codewords comprising requested data wherein the ECC codewords are stored within a group of two or more of a plurality of solid state storage elements identifying ECC codewords comprising data of one or more other requests stored within different groups of the solid state storage elements and or scheduling a read operation configured to read the ECC codewords of the requested data and ECC codewords comprising data of the one or more other requests in a single read operation on the solid state storage elements. The ECC codewords may comprise ECC codeword symbols and the ECC codeword symbols comprising the requested data may be stored within respective solid state storage elements of the group of two or more different solid state storage elements. The method may further include verifying that the ECC codeword symbols comprise the requested data by verifying a mark on the ECC codeword symbols corresponding to relational information pertaining to the requested data.

In some embodiments the method further includes queuing storage requests in an request buffer and determining a storage location of ECC codewords of one or more other requests in the request buffer. Scheduling the read operation may comprise reordering one or more storage requests in the request buffer and or indicating different addressing information for two or more of the solid state storage elements. The method may further comprise reordering contents of a read buffer to reconstruct a data packet stored within the plurality of ECC codewords comprising the requested data.

Disclosed herein are embodiments of a system comprising means for generating a plurality of sets ECC symbols wherein each set of ECC symbols comprises data of different respective storage requests means for arranging the sets of ECC symbols for storage within different independent channels each channel comprising two or more solid state storage elements and or means for storing the arranged sets of ECC symbols to the different independent channels which may comprise means for storing each ECC symbol to within a respective one of the solid state storage elements of a respective independent channel. The system may further include means for identifying an independent channel comprising a set of ECC symbols corresponding to requested data and or means for extracting the requested data from the set of ECC symbols read from the identified independent channel. In some embodiments the system comprises means for combining two or more read requests pertaining to ECC symbols stored within different independent channels.

Some embodiments of the system may comprise means for reconstructing an uncorrectable ECC symbol read from one of the solid state storage elements by use of a plurality of ECC symbols stored within others of the solid state storage elements.

The solid state storage medium may comprise a non volatile solid state storage medium such as flash memory nano random access memory nano RAM or NRAM nanocrystal wire based memory silicon oxide based sub 10 nanometer process memory graphene memory Silicon Oxide Nitride Oxide Silicon SONOS Resistive Random Access Memory RRAM Programmable Metallization Cell PMC Conductive Bridging RAM CBRAM Magneto Resistive RAM MRAM Dynamic RAM DRAM Phase change RAM PRAM or the like. The solid state storage medium may comprise a plurality of physical storage units e.g. storage cells configured for persistent data storage. The physical storage units may be arranged in groups such as pages which may be partitioned into storage divisions such as erase blocks. The solid state storage medium may comprise pages of any suitable size. The page size of a solid state storage medium may range from 512 bytes to 32 kb.

The adaptive storage module may be configured to write data to and or read data from the solid state storage medium via a bus . The adaptive storage module may comprise one or more hardware components such as bus controllers DMA controllers storage controllers storage media controllers and the like. The adaptive storage module may further comprise firmware software modules drivers interface modules and or and the like.

The bus may comprise a storage I O bus for communicating data to from the solid state storage medium and may further comprise a control I O bus for providing addressing and other command and control information to the solid state storage medium .

The storage module may comprise and or be implemented on a computing device . In some embodiments portions of the storage module may be internal to the computing device for example portions of the storage module and or solid state storage medium may be connected using a system bus such as a peripheral component interconnect express PCI e bus a Serial Advanced Technology Attachment serial ATA bus or the like. The disclosure is not limited in this regard in some embodiments components of the storage module may be external to the computing device and may be connected via a universal serial bus USB connection an Institute of Electrical and Electronics Engineers IEEE 1394 bus FireWire an external PCI bus Infiniband or the like.

The computing device may comprise a processor volatile memory and or persistent storage . The processor may comprise one or more general and or special purpose processing elements. The processor may be configured to execute instructions loaded into the volatile memory from the persistent storage . Portions of one or more of the modules of the storage module may be embodied as machine readable instructions stored on the persistent storage . The instructions may be configured for execution by the processor to implement one or more of the modules and or methods described herein.

One or more storage clients may access storage services provided by the storage module through a storage interface . The storage interface may comprise a block device interface a virtualized storage interface an object storage interface a database storage interface and or other suitable interface and or Application Programming Interface API . The storage module may further comprise a logical to physical translation layer to map and or associate identifiers of the storage client with physical storage locations e.g. physical addresses on the solid state storage medium . The logical to physical translation layer may provide for any to any mappings between logical identifiers and physical storage locations such that data may be written and or updated out of place on the solid state storage medium . As used herein a physical address refers to an address or other reference capable of referencing a particular storage location on the solid state storage medium . Accordingly a physical address may be a media address. 

The storage module may comprise a storage metadata module configured to maintain storage metadata pertaining to storage operations performed on the solid state storage medium . The storage metadata may include but is not limited to an index comprising any to any mappings between logical identifiers of a logical address space and physical storage locations on the solid state storage medium a reverse index pertaining to the contents of the solid state storage medium one or more validity bitmaps reliability testing and or status metadata status information such as error rate retirement status and so on. Portions of the metadata may be stored on a volatile memory . Alternatively or in addition portions of the metadata may be periodically stored on a persistent storage medium such as the persistent storage solid state storage medium or the like.

The storage module may comprise a request buffer configured to buffer storage requests received via the storage interface . The request buffer may comprise an ordered buffer such as a first in first out FIFO or the like. The request buffer may therefore be configured to maintain the order of incoming storage requests. As used herein a storage request refers to one or more of a request to store write overwrite modify cache delete erase read and or otherwise manage data by use of the storage module . The storage module may be configured to service the storage requests in the request buffer . The storage module may be configured to service the storage requests in the order they were received. Alternatively the storage module may be configured to reorder the storage requests to improve throughput and or efficiency. The storage module may be configured to reorder the storage requests to avoid data hazards such as read before write write before read and so on.

The storage module may comprise a log storage module configured to store data in a contextual format on the solid state storage medium . As used herein a contextual format refers to a data format in which a logical interface of a data segment is associated with the data segment on the solid state storage medium . For example a contextual format may comprise a packet format that includes a header indicating one or more logical identifiers of a data segment or the like. The contextual format may be used to reconstruct the mappings of the logical to physical translation layer and or storage metadata such as any to any mappings between logical identifiers and physical storage locations reverse index metadata and the like.

In some embodiments the storage module comprises a groomer module configured to perform grooming operations on the solid state storage medium . Grooming operations may include but are not limited to reclaiming storage resources erasure wear leveling refreshing data stored on the solid state storage medium and so on. The groomer module may operate outside of the path for servicing other higher priority storage operations and or requests. Therefore the groomer module may operate as an autonomous background process which may be suspended and or deferred while other storage operations are in process. Alternatively the groomer module may operate in the foreground while other storage operations are being serviced. The groomer may wear level the non volatile storage medium such that data is systematically spread throughout different storage locations which may improve performance and data reliability and avoid overuse and or underuse of particular storage locations thereby lengthening the useful life of the solid state storage medium . Grooming an erase block or logical erase block may comprise relocating valid data if any to other storage locations erasing the erase block and or initializing the erase block for storage operations e.g. marking the erase block with a sequence indicator sequence number timestamp or the like . The groomer module may operate within a driver of the storage module . Alternatively or in addition portions of the groomer module may be implemented on the adaptive storage module e.g. as hardware components firmware programmable hardware components or the like .

In some embodiments the solid state storage medium may comprise one or more arrays of solid state storage elements A Y. As used herein a solid state storage array or array refers to a set of two or more independent columns . A column may comprise a solid state storage element A Y that is communicatively coupled to the storage module in parallel by the adaptive storage module using inter alia the bus . Rows of the array may comprise physical storage units of the respective columns solid state storage elements A Y . As used herein a solid state storage element A Y includes but is not limited to solid state storage resources embodied as a package chip die plane printed circuit board and or the like. The solid state storage elements A Y comprising the array may be capable of independent operation. Accordingly a first one of the solid state storage elements A may be capable of performing a first storage operation while a second solid state storage element B performs a different storage operation. For example the solid state storage element A may be configured to read data at a first physical address while another solid state storage element B reads data at a different physical address.

A solid state storage array may also be referred to as a logical storage element LSE . As disclosed in further detail below an array or logical storage element may comprise logical storage units rows . As used herein a logical storage unit or row refers to a logical construct combining two or more physical storage units each physical storage unit on a respective column of the array . A logical erase block refers to a set of two or more physical erase blocks a logical page refers to a set of two or more pages and so on. In some embodiments a logical erase block may comprise erase blocks within respective logical storage elements and or banks. Alternatively a logical erase block may comprise erase blocks within a plurality of different arrays and or may span multiple banks of solid state storage elements.

The storage module may further comprise an adaptive storage module configured to arrange data for storage on the solid state storage array according to an adaptive data layout. As used herein an adaptive data layout refers to the layout of storage data segments within different portions of the solid state storage array . As used herein a data segment refers to a quantum of structured or unstructured data a data segment may therefore include but is not limited to data pertaining to a storage request data corresponding to one or more logical identifiers one or more data blocks a data structure such as a data packet container or the like a data set such as a data range extent or the like an ECC codeword such as an ECC syndrome an ECC symbol an ECC chunk or the like unstructured data structured data a data record or the like.

The adaptive storage module may be configured to store data in a horizontal layout which may comprise storing data segments horizontally within rows of the array e.g. across a plurality of the solid state storage elements A Y of the array . A vertical layout may comprise storing data segments within respective columns of the array e.g. within a single solid state storage elements A Y . Other layouts may comprise storing data on subsets of the solid state storage elements A Y e.g. sets of two four or more solid state storage elements A Y . The storage module may comprise an adaptive storage profiling module configured to determine an optimal data layout for the array based on one or more of data read latency stream latency data access patterns profiling information desired data recovery characteristics usage and or the like.

In some embodiments the storage module further comprises a data recovery module . The data recovery module may be configured to recover data stored on the solid state storage medium . The storage module may be configured to generate error recovery data such as ECC data parity data and or the like. The error recovery data may be stored on the solid state storage medium . The ECC data may be used to detect and or correct errors in data read from the array . Data comprising uncorrectable errors may be reconstructed by use of parity data. Uncorrectable errors may result from failure of a portion of a particular column e.g. failure of an erase block plane die or other portion of a particular solid state storage element A Y . As disclosed in further detail herein data corresponding to the failed column may be reconstructed by use of data stored on other solid state storage elements A Y. In some embodiments reconstructing data of a failed solid state storage element A Y may comprise reading one or more ECC codewords stored on other columns of the array correcting errors within the one or more other ECC codewords e.g. decoding the ECC codewords and using the corrected ECC codewords to reconstruct data of the failed element A Y. The data recovery module may comprise a parity substitution module configured to reconstruct data of a failed column by use of error corrected ECC codewords and or parity data stored within the array . In some embodiments data of the failed column may be reconstructed without decoding and or correcting the other ECC codewords if the other columns have low error rates and or low levels of wear the reconstruction module may be configured to perform the parity substitution operations without first decoding and or correcting the other ECC codewords.

The adaptive storage module may comprise a request module configured to receive storage requests from the storage module and or other storage clients . The request module may be configured to perform storage operations on the solid state storage medium in response to the requests which may comprise transferring data to from the storage module and or storage clients . Accordingly the request module may comprise one or more direct memory access DMA modules remote DMA modules bus controllers bridges buffers and the like.

The adaptive storage module may comprise a write module configured to process data for storage on the solid state storage medium . In some embodiments the write module comprises one or more modules configured to process and or format data for storage on the solid state storage medium which may include but are not limited to a packet module a whiten module an ECC write module an adaptive write module and a write buffer . In some embodiments the write module may further comprise a compression module configured to compress data for storage on the solid state storage medium one or more encryption modules configured to encrypt data for storage on the solid state storage medium and so on. The read module may comprise one or more modules configured to process and or format data read from the solid state storage medium which may include but are not limited to a read buffer an adaptive read module an ECC read module a dewhiten module and a depacket module .

In some embodiments the write module comprises a write pipeline configured to process data for storage in a plurality of pipeline stages or modules as disclosed herein. Similarly in some embodiments the read module may comprise a read pipeline configured to process data read from the solid state storage array in a plurality of pipeline stages or modules as disclosed herein.

The packet module may be configured to generate data packets comprising data to be stored on the solid state storage medium . The write module may be configured to store data in a contextual format as disclosed above. The contextual format may comprise storing data in a packet format in which a logical interface of the data is associated with the data on the solid state storage medium . In some embodiments the packet format may include a packet header comprising one or more logical identifiers of the data contained within the packet or the like. The contextual format may further comprise associating data packets with sequence information to define inter alia a log order of data packets on the solid state storage medium . The sequence information may comprise sequence numbers timestamps or other indicators that indicate an order of the data packet relative to other data packets stored on the solid state storage medium . The storage module may use the log based contextual format of data stored on the solid state storage medium to reconstruct portions of the storage metadata which may include but is not limited to reconstructing any to any mappings between logical identifiers and physical storage locations maintained by the logical to translation layer a forward index a reverse index and or the like.

In some embodiments the packet module may be configured to generate packets of arbitrary lengths and or sizes in accordance with the size of storage requests received via the request receiver module and or configuration preferences. The packet module may be configured to generate packets of one or more pre determined sizes. In one embodiment in response to a request to write 24 k of data to the solid state storage medium the packet module may be configured to generate packets each packet comprising 4 k of the data in another embodiment the packet module may be configured to generate a single packet comprising 24 k of data in response to the request.

The whiten module may be configured to perform one or more whitening transformations on the data packets generated by the packet module . Data whitening may comprise decorrelating the data which may provide wear leveling benefits for certain types of storage media. In some embodiments the whiten module is configured to encrypt data for storage on the solid state storage medium in one or more of a media encryption key a user encryption key or the like.

The ECC write module may be configured to encode data packets generated by the packet module into respective ECC codewords. As used herein an ECC codeword refers to data and corresponding error detection and or correction information. The ECC write module may be configured to implement any suitable ECC algorithm and may be configured to generate corresponding ECC information e.g. ECC codewords . As used herein ECC codewords include but are not limited to data segments and corresponding ECC syndromes ECC symbols ECC codeword symbols ECC encoded data ECC chunks and or other structured and or unstructured ECC information and or corresponding data. ECC codewords may comprise any suitable error correcting encoding including but not limited to block ECC encoding convolutional ECC encoding Low Density Parity Check LDPC encoding Gallager encoding Reed Solomon encoding Hamming codes Multidimensional parity encoding cyclic error correcting codes BCH codes or the like. The ECC read module may be configured to decode and or correct ECC codewords generated by the ECC write module .

The ECC write module may be configured to generate ECC codewords of a pre determined size. Accordingly a single packet may be encoded into a plurality of different ECC codewords and or a single ECC codeword may comprise portions of two or more packets.

In some embodiments the ECC write module is configured to generate ECC codewords each of which may comprise a data segment of length N and a syndrome of length S. For example the ECC write module may be configured to encode data segments into 240 byte ECC codewords each ECC codeword comprising 224 bytes of data and 16 bytes of ECC data. In this embodiment the ECC encoding may be capable of correcting more bit errors than the manufacturer of the solid state storage medium requires. In other embodiments the ECC write module may be configured to encode data in a symbolic ECC encoding such that each data segment of length N produces a symbol of length X. The ECC write module may encode data according to a selected ECC strength. As used herein the strength of an error correcting code refers to the number of errors that can be detected and or corrected by use of the error correcting code. In some embodiments the strength of the ECC encoding implemented by the ECC write module may be adaptive and or configurable. In some embodiments the strength of the ECC encoding may be selected according to the reliability and or error rate of the solid state storage medium . As disclosed in further detail herein the strength of the ECC encoding may be independent of the partitioning of the solid state storage medium which may allow the storage module to select a suitable ECC encoding strength based on the conditions of the solid state storage medium user requirements and the like as opposed to static and or pre determined ECC settings imposed by the manufacturer of the medium .

As illustrated in the packets A N may vary in size in accordance with the size of the respective packet data segments A N and or header information A N. Alternatively in some embodiments the packet module may be configured to generate packets A N of a fixed uniform size.

The ECC write module may be configured to generate ECC codewords A N having a uniform fixed size each ECC codeword A N may comprise N bytes of packet data and S syndrome bytes such that each ECC codeword A N comprises N S bytes. In some embodiments each ECC codeword comprises 240 bytes and includes 224 bytes of packet data N and 16 bytes of error correction code S . The disclosed embodiments are not limited in this regard however and could be adapted to generate ECC codewords A N of any suitable size having any suitable ratio between N and S. Moreover the ECC write module may be further adapted to generate ECC symbols or other ECC codewords comprising any suitable ratio between data and ECC information.

As depicted in the ECC codewords A N may comprise portions of one or more packets A N ECC codeword D comprises data of packets A and B. The packets A N may be spread between a plurality of different ECC codewords A N ECC codewords A D comprise data of packet A ECC codewords D H comprise data of packet B and ECC codewords X Z comprise data of packet N.

Referring back to the write module may further comprise an adaptive write module configured to buffer data to storage on one or more of the solid state storage arrays A N. As disclosed in further detail below the adaptive write module may be configured to store data within one or more columns of a solid state storage array . The adaptive write module may be further configured to generate parity data corresponding to the layout and or arrangement of the data. As disclosed in further detail below the parity data may be configured to protect data stored within respective rows of the solid state storage array A N and may be generated in accordance with an adaptive storage layout implemented by the adaptive storage module .

In some embodiments the write module further comprises a write buffer configured to buffer data for storage within respective page write buffers of the solid state storage medium . The write buffer may comprise one or more synchronization buffers to synchronize a clock domain of the adaptive storage module with a clock domain of the solid state storage medium and or bus .

The log storage module may be configured to select storage location s for data storage and or may provide addressing and or control information to the solid state storage medium via the bus . Accordingly the log storage module may provide for storing data sequentially at an append point within the physical address space of the solid state storage medium . The physical address at which a particular data segment is stored may be independent of the logical interface e.g. logical identifier of the data segment. The logical to physical translation layer may be configured to associate the logical interface of data segments e.g. logical identifiers of the data segments with the physical address es of the data segments on the solid state storage medium . In some embodiments the logical to physical translation layer may leverage storage metadata to perform logical to physical translations the storage metadata may include a forward index comprising arbitrary any to any mappings between logical identifiers and physical addresses. The storage metadata may be maintained in volatile memory such as the volatile memory . In some embodiments the storage metadata module is configured to periodically store portions of the storage metadata on a persistent storage medium such as the solid state storage medium persistent storage or the like.

The adaptive storage module may further comprise a read module that is configured to read data from the solid state storage medium in response to requests received via the request module . The read module may be configured to process data read from the solid state storage medium and provide the processed data to the storage module and or a storage client by use of the request module . The read module may comprise one or more modules configured to process and or format data stored on the solid state storage medium which may include but are not limited to read buffer an adaptive read module ECC read module a dewhiten module and a depacket module . In some embodiments the read module further includes a decompression module configured to decompress compressed data stored on the solid state storage medium one or more decryption modules configured to decrypt encrypted data stored on the solid state storage medium and so on. Data processed by the read module may flow to the storage module and or storage client via the request module and or other interface or communication channel e.g. the data may flow directly to from a storage client via a DMA or remote DMA module of the storage module .

Read requests may comprise and or reference the logical interface of the requested data such as a logical identifier a range and or extent of logical identifiers a set of logical identifiers or the like. The physical addresses associated with data of the request may be determined based at least in part upon the logical to physical translation layer and or the storage metadata metadata pertaining to the layout of the data on the solid state storage medium and so on. Data may stream into the read module via a read buffer . The read buffer may read the contents of one or more page read buffers of the solid storage storage elements A N within the solid state storage array A N of one of the banks A N. The read buffer may comprise one or more synchronization buffers configured to synchronize a clock domain of the adaptive storage module with a clock domain of the solid state storage medium and or bus .

The adaptive read module may be configured to reconstruct one or more data segments from the contents of the read buffer . Reconstructing the data segments may comprise recombining and or reordering contents of the read buffer e.g. ECC codewords read from various columns in accordance with a layout of the data on the solid state storage arrays A N as indicated by the storage metadata . In some embodiments reconstructing the data may comprise stripping data associated with one or more columns from the read buffer reordering data of one or more columns and so on.

The read module may comprise an ECC read module configured to detect and or correct errors in data read from the solid state storage medium using inter alia the ECC encoding of the data e.g. as encoded by the ECC write module parity data e.g. using parity substitution and so on. As disclosed above the ECC encoding may be capable of detecting and or correcting a pre determined number of bit errors in accordance with the strength of the ECC encoding. The ECC read module may be capable of detecting more bit errors than can be corrected.

The ECC read module may be configured to correct any correctable errors using the ECC encoding. In some embodiments the ECC read module may attempt to correct errors that cannot be corrected by use of the ECC encoding using other techniques such as parity substitution or the like. Alternatively or in addition the ECC read module may attempt to recover data comprising uncorrectable errors from another source. For example in some embodiments data may be stored in a RAID configuration. In response to detecting an uncorrectable error the ECC read module may attempt to recover the data from the RAID or other source of redundant data e.g. a mirror backup copy or the like .

In some embodiments the ECC read module may be configured to generate an interrupt in response to reading data comprising uncorrectable errors. The interrupt may comprise a message indicating that the requested data is in error and may indicate that the ECC read module cannot correct the error using the ECC encoding. The message may comprise the data that includes the error e.g. the corrupted data .

The interrupt may be caught by the storage module or other process. In some embodiments the interrupt is received by the data recovery module which in response may be configured to reconstruct the data using parity substitution or other reconstruction technique as disclosed herein. Parity substitution may comprise iteratively replacing portions of the corrupted data with a parity mask e.g. all ones until a parity calculation associated with the data is satisfied. The masked data may comprise the uncorrectable errors and may be reconstructed using other portions of the data in conjunction with the parity data. Parity substitution may further comprise reading one or more ECC codewords from the solid state storage array A N in accordance with an adaptive data structure layout on the array correcting errors within the ECC codewords e.g. decoding the ECC codewords and reconstructing the data by use of the corrected ECC codewords and or parity data. In some embodiments the corrupted data may be reconstructed without first decoding and or correcting errors within the ECC codewords.

Alternatively data recovery module may be configured to replace the corrupted data with another copy of the data such as a backup or mirror copy and then may use the replacement data of the requested data packet or return it to the read module . In another embodiment the storage module stores data in a RAID configuration from which the corrupted data may be recovered as described above.

As depicted in the solid state storage medium may be arranged into a plurality of independent banks A N. Each bank may comprise a plurality of solid state storage elements arranged into respective solid state storage arrays A N as disclosed above. The banks A N may be configured to operate independently the adaptive storage module may configure a first bank A to perform a first storage operation while a second bank B is configured to perform a different storage operation. The adaptive storage module may further comprise a bank controller configured to selectively route data and or commands between the adaptive storage module and the banks A N. In some embodiments adaptive storage module may be configured to read data from a bank A while filling the write buffer for storage on another bank B and or may interleave one or more storage operations between one or more banks A N. Further embodiments of multi bank storage operations and data pipelines are disclosed in U.S. Patent Application Publication No. 2008 0229079 U.S. patent application Ser. No. 11 952 095 entitled Apparatus System and Method for Managing Commands of Solid State Storage Using Bank Interleave filed Dec. 6 2007 for David Flynn et al. which is hereby incorporated by reference in its entirety.

As disclosed above the groomer module may be configured to reclaim storage resources of the solid state storage medium . The groomer module may operate as an autonomous background process which may be suspended and or deferred while other storage operations are in process. The log storage module and groomer module may manage storage operations so that data is systematically spread throughout a physical address space of the solid state storage medium which may improve performance and data reliability and avoid overuse and underuse of any particular storage locations thereby lengthening the useful life of the solid state storage medium e.g. wear leveling etc. . Accordingly in some embodiments the storage module treats the physical address space of the solid state storage medium as a cycle. Data is incrementally appended to the solid state storage medium from an initial append point which may correspond to a particular physical address within one or more of the banks A N e.g. physical address of bank A . Upon reaching the end of the physical address space e.g. physical address N of bank N the append point reverts to the initial position or next available storage location .

Operations to overwrite and or modify data stored on the solid state storage medium may be performed out of place. The obsolete version of the data may remain on the storage medium while the updated version of the data may be appended at the append point. Similarly an operation to delete erase or TRIM data from the solid state storage medium may comprise indicating that the data is invalid e.g. does not need to be retained on the solid state storage medium . Marking data as invalid may comprise modifying a mapping between the logical identifier of the data and the physical address of the invalid data marking the physical address as invalid in a reverse index or the like.

The groomer module may be configured to select selections of the solid state storage medium for recovery. As used herein a section of the solid state storage medium may include but is not limited to an erase block a logical erase block a die a plane one or more pages a portion of a solid state storage element A Y a portion of a row of a solid state storage array or the like. A section may be selected for grooming in response to various criteria which may include but are not limited to age criteria e.g. data refresh error metrics reliability metrics wear metrics resource availability criteria an invalid data threshold or the like. A grooming or storage recovery operation may comprise relocating valid data on the section if any . The operation may further comprise preparing the section for reuse which may comprise erasing the section marking the section with a sequence indicator such as the sequence indicator and or placing the section in a queue of storage sections that are available to store data. The groomer module may be configured to schedule grooming operations with other storage operations and or requests. In some embodiments the adaptive storage module may comprise a groomer bypass not shown configured to relocate data from a storage section by transferring data read from the section from the read module directly into the write module without being routed out of the adaptive storage module .

The adaptive write module may be further configured to manage out of service conditions on the solid state storage medium . As used herein a section of the solid state storage medium that is out of service OOS refers to a section that is not currently being used to store valid data. The storage module may be configured to monitor storage operations performed on the solid state storage medium and or actively scan the solid state storage medium to identify sections that should be taken OOS. The storage metadata may comprise OOS metadata that identifies OOS sections of the solid state storage medium . The adaptive write module may be configured to avoid OOS section by inter alia stream padding and or nonce data to the write buffer such that padding data will map to the identified OOS sections. In some embodiments the adaptive storage module may be configured to manage OOS conditions by replacing OOS sections of the solid state storage medium with replacement sections. Alternatively or in addition a hybrid OOS approach may be employed. The padding approach to managing OOS conditions may be used in portions of the solid state storage medium comprising a relatively small number of OOS storage divisions as the number of OOS sections increases the solid state adaptive storage module may replace one or more of the OOS sections with replacements. Further embodiments of apparatus systems and methods for detecting and or correcting data errors and managing OOS conditions are disclosed in U.S. Patent Application Publication No. 2009 0287956 U.S. application Ser. No. 12 467 914 entitled Apparatus System and Method for Detecting and Replacing a Failed Data Storage filed May 18 2009 and U.S. Patent Application Publication No. 2013 0019072 U.S. application Ser. No. 13 354 215 entitled Apparatus System and Method for Managing Out of Service Conditions filed Jan. 19 2012 for John Strasser et al. each of which is hereby incorporated by reference in its entirety.

As disclosed above the solid state storage medium may comprise one or more solid state storage arrays A N. A solid state storage array A N may comprise a plurality of independent columns respective solid state storage elements A Y which may be coupled to the adaptive storage module in parallel via the bus . Accordingly storage operations performed on an array A N may be performed on each of the solid state storage elements A Y comprising the array A N. Performing a storage operation on an array A N may comprise performing the storage operation on each of the plurality of solid state storage elements comprising the array A N a read operation may comprise reading a physical storage unit e.g. page from a plurality of solid state storage elements A Y a program operation may comprise programming a physical storage unit e.g. page on a plurality of solid state storage elements A Y an erase operation may comprise erasing a section e.g. erase block on a plurality of solid state storage elements A Y and so on. Accordingly a program operation may comprise the write module streaming data to program buffers of a plurality of solid state storage elements A Y via the write buffer and bus and when the respective program buffers are sufficiently full issuing a program command to the solid state storage elements A Y. The program command may cause one or more storage units on each of the storage elements A Y to be programmed in parallel.

The solid state storage elements A Y may be partitioned into sections such as physical storage divisions or physical erase blocks. Each erase block may comprise a plurality of physical storage units such as pages. The physical storage units within a physical storage division may be erased as a group. Although depicts a particular partitioning scheme the disclosed embodiments are not limited in this regard and could be adapted to use solid state storage elements A Y partitioned in any suitable manner.

As depicted in the columns of the array may correspond to respective solid state storage elements A Y. Accordingly the array of comprises 25 columns . Rows of the array may correspond to physical storage units and or of a plurality of the columns .

Storage operations performed on the solid state storage array may operate on multiple solid state storage elements A Y an operation to program data to a logical storage unit may comprise programming data to each of 25 physical storage units e.g. one storage unit per non volatile storage element A Y an operation to read data from a logical storage unit may comprise reading data from 25 physical storage units e.g. pages an operation to erase a logical storage division may comprise erasing twenty five physical storage divisions e.g. erase blocks and so on. Since the columns are independent storage operations may be performed across different sets and or portions of the array . For example a read operation on the array may comprise reading data from physical storage unit at a first physical address of solid state storage element A and reading data from a physical storage unit at a different physical address of one or more other solid state storage elements B N.

Arranging non volatile storage elements A Y into a solid state storage array may be used to address certain properties of the solid state storage medium . Some embodiments may comprise an asymmetric solid state storage medium it may take longer to program data onto the solid state storage elements A Y than it takes to read data therefrom e.g. 10 times as long . Moreover in some cases data may only be programmed to physical storage divisions that have first been initialized e.g. erased . Initialization operations may take longer than program operations e.g. 10 times as long as a program and by extension 100 times as long as a read operation . Managing groups of solid state storage elements A Y in an array and or interleaved banks A N as disclosed herein may allow the storage module to address the asymmetric properties of the solid state storage medium . In some embodiments the asymmetry in read program and or erase operations is addressed by performing these operations on multiple solid state storage elements A Y in parallel. In the embodiment depicted in programming asymmetry may be addressed by programming storage units in a logical storage unit in parallel. Initialization operations may also be performed in parallel. Physical storage divisions on each of the solid state storage elements A Y may be initialized as a group e.g. as logical storage divisions which may comprise erasing 25 physical erase blocks in parallel.

In some embodiments portions of the solid state storage array may be configured to store data and other portions of the array may be configured to store error detection and or recovery information. Columns used for data storage may be referred to as data columns and or data solid state storage elements. Columns used to store data error detection and or recovery information may be referred to as a parity column and or recovery column. The array may be configured in an operational mode in which one of the solid state storage elements Y is used to store parity data whereas other solid state storage elements A X are used to store data. Accordingly the array may comprise data solid state storage elements A X and a recovery solid state storage element Y. In this operational mode the effective storage capacity of the rows e.g. logical pages may be reduced by one physical storage unit e.g. reduced from 25 physical pages to 24 physical pages . As used herein the effective storage capacity of a storage unit refers to the number of storage units or divisions that are available to store data and or the total amount of data that can be stored on a logical storage unit. The operational mode described above may be referred to as a 24 1 configuration denoting that 24 physical storage units are available to store data and one of the physical storage units is used for parity. The disclosed embodiments are not limited to any particular operational mode and or configuration and could be adapted to use any number of the solid state storage elements A Y to store error detection and or recovery data.

As disclosed above the adaptive storage module may be configured to interleave storage operations between a plurality of solid state storage arrays A N of independent banks A N which may further ameliorate asymmetry between erase program and read operations on the solid state storage medium . depicts one embodiment of an adaptive storage module configured to manage logical erase blocks that span multiple arrays A N of multiple banks A N. Each bank A N may comprise one or more solid state storage arrays A N which as disclosed herein may comprise a plurality of solid state storage elements A Y coupled in parallel by a respective bus A N. The adaptive storage module may be configured to perform storage operations on the storage elements A Y of the arrays A N in parallel and or in response to a single command and or signal.

Some operations performed by the adaptive storage module may cross bank boundaries. The adaptive storage module may be configured to manage groups of logical erase blocks that include erase blocks of multiple arrays A N within different respective banks A N. Each group of logical erase blocks may comprise erase blocks A N on each of the arrays A N. The erase blocks A N comprising the logical erase block group may be erased together e.g. in response to a single erase command and or signal or in response to a plurality of separate erase commands and or signals . Performing erase operations on logical erase block groups comprising large numbers of erase blocks A N within multiple arrays A N may further mask the asymmetric properties of the solid state storage medium as disclosed above.

The adaptive storage module may be configured to perform some storage operations within boundaries of the arrays A N and or banks A N. In some embodiments the read write and or program operations may be performed within rows of the solid state storage arrays A N e.g. on logical pages A N within arrays A N of respective banks A N . As depicted in the logical pages A N of the arrays A N may not extend beyond single arrays A N and or banks A N. The log storage module and or bank interleave module may be configured to append data to the solid state storage medium by interleaving and or scheduling storage operations sequentially between the arrays A N of the banks A N.

The bank interleave module may be configured to append data to the solid state storage medium by programming data to the arrays A N in accordance with a sequential interleave pattern. The sequential interleave pattern may comprise programming data to a first logical page LP  of array A within bank A followed by the first logical page LP  of array B within the next bank B and so on until data is programmed to the first logical page LP  of each array A N within each of the banks A N. As depicted in data may be programmed to the first logical page LP  of array A in bank A in a program operation A. The bank interleave module may then stream data to the first logical page LP  of the array B in the next bank B. The data may then be programmed to LP  of array B bank B in a program operation B. The program operation B may be performed concurrently with the program operation A on array A of bank A the adaptive storage module may stream data to array B and or issue a command and or signal for the program operation B while the program operation A is being performed on the array A. Data may be streamed to and or programmed on the first logical page LP  of the arrays C N of the other banks C N following the same sequential interleave pattern e.g. after data is streamed and or programmed to LP  of array A of bank B data is streamed and or programmed to LP  of array C of bank C in program operation C and so on . Following the programming operation N on LP  of array N within the last bank N the bank interleave controller may be configured to begin streaming and or programming data to the next logical page LP  of array A within the first bank A and the interleave pattern may continue accordingly e.g. program LP  of array B bank B followed by LP  of array C bank C through LP  of array N bank N followed by LP  of array A bank A and so on .

Sequentially interleaving programming operations as disclosed herein may increase the time between concurrent programming operations on the same array A N and or bank A N which may reduce the likelihood that the adaptive storage module will have to stall storage operations while waiting for a programming operation to complete. As disclosed above programming operations may take significantly longer than other operations such as read and or data streaming operations e.g. operations to stream the contents of the write buffer to an array A N via the bus A N . The interleave pattern of may be configured to avoid consecutive program operations on the same array A N and or bank A N programming operations on a particular array A N may be separated by N 1 programming operations on other banks e.g. programming operations on array A are separated by programming operations on arrays A N . As such programming operations on array A are likely to be complete before another programming operation needs to be performed on the array A.

As depicted in the interleave pattern for programming operations may comprise programming data sequentially across rows e.g. logical pages A N of a plurality of arrays A N. As depicted in the interleave pattern may result in interleaving programming operations between arrays A N of banks A N such that the erase blocks of each array A N erase block groups EBG  N are filled at the same rate. The sequential interleave pattern programs data to the logical pages of the first erase block group EBG  in each array A N before programming data to logical pages LP  through LP N of the next erase block group EBG  and so on e.g. wherein each erase block comprises N pages . The interleave pattern continues until the last erase block group EBG N is filled at which point the interleave pattern continues back at the first erase block group EBG .

The erase block groups of the arrays A N may therefore be managed as logical erase blocks A N that span the arrays A N. Referring to a logical erase block group may comprise erase blocks A N on each of the arrays A N within the banks A N. As disclosed above managing groups of erase blocks e.g. logical erase block group may comprise erasing each of the erase blocks A N included in the group . In the embodiment erasing the logical erase block group A may comprise erasing EBG  of arrays A N in banks A N erasing a logical erase block group B may comprise erasing EBG  of arrays A N in banks A N erasing logical erase block group C may comprise erasing EBG  of arrays A N in banks A N and erasing logical erase block group N may comprise erasing EBG N of arrays A N in banks A N. Other operations such as grooming recovery and the like may be performed at the granularity of the logical erase block groups A N recovering the logical erase block group A may comprise relocating valid data if any stored on EBG  on arrays A N in banks A N erasing the erase blocks of each EBG  in arrays A N and so on. Accordingly in embodiments comprising four banks A N each bank A N comprising a respective solid state storage array A N comprising 25 storage elements A Y erasing grooming and or recovering a logical erase block group comprises erasing grooming and or recovering one hundred physical erase blocks . Although particular multi bank embodiments are described herein the disclosure is not limited in this regard and could be configured using any multi bank architecture comprising any number of banks A N of arrays A N comprising any number of solid state storage elements A Y.

Referring back to the storage module may be configured to store data segments in one or more different arrangements and or layouts within a solid state storage array . In some embodiments data may be stored horizontally within rows of the array e.g. horizontally within logical storage units of the array . Accordingly a datastructure such as an ECC codeword or packet may be spread across a plurality of the storage elements A Y comprising the array . In some embodiments data may be stored horizontally within one or more channels within the array . As used herein a channel refers to a subset of one or more independent columns of the array . Data may be arranged horizontally within the channels. An array comprising N columns used for storing data may be divided into a configurable number of independent channels X each comprising Y columns of the array . In the embodiment having a 24 1 configuration that comprises 24 columns for storing data the channel configurations may include but are not limited to 24 channels each comprising a single column 12 channels each comprising two solid state storage elements eight channels each comprising three solid state storage elements six channels each comprising six columns and so on. In some embodiments the array may be divided into heterogeneous channels such as a first channel comprising 12 columns and six other channels each comprising two columns .

The write module may comprise a packet module configured to generate data packets comprising data for storage on the array as disclosed above. In the embodiment the packet module is configured to format data into a packet format comprising a packet data segment and metadata e.g. header . The header may comprise a logical identifier associated with the packet data segment a sequence number or the like as disclosed above. In the embodiment the packet module is configured to generate packets of a fixed size 520 byte packet data segment and 8 bytes of metadata .

The ECC write module is configured to generate ECC datastructures ECC codewords comprising portions of one or more packets as disclosed above. The ECC codewords may be of a fixed size. In the example each ECC codeword comprises 224 bytes of packet data and a 16 byte error correcting code or syndrome. Although particular sizes and or configurations of packets and ECC codewords are disclosed herein the disclosure is not limited in this regard and could be adapted to use any size packets and or ECC codewords . Moreover in some embodiments the size of the datastructures e.g. packets and or ECC codewords may vary. For example the size and or contents of the packets and or ECC codewords may be adapted according to out of service conditions as disclosed above.

Data of the packet A may be included in a plurality of ECC codewords e.g. ECC codewords and . The ECC codeword may comprise 224 bytes of the packet A the ECC codeword may comprise another 224 bytes of the packet A and the ECC codeword may comprise the remaining 72 bytes of the packet A and 152 bytes of the next packet B.

The adaptive write module may be configured to layout data horizontally within rows of the array . The adaptive write module may be configured to buffer and or arrange data segments e.g. the ECC codewords and into 24 byte segments. The adaptive write module may be capable of buffering one or more ECC codewords . For example the write buffer may comprise 10 24 byte rows which is sufficient to buffer a full 240 byte ECC codeword .

The adaptive write module may be further configured to stream 24 byte segments to a parity module which may be configured to generate a parity byte for each 24 byte segment. The adaptive write module streams the resulting 25 bytes to the array via the bank controller and bus and or write buffer as disclosed above . The adaptive storage module may be configured to stream data from the adaptive write module to program buffers of the solid state storage array e.g. stream to a program buffer of one of the solid state storage elements A Y . Accordingly each cycle of bus may comprise transferring a byte to the program buffer of a respective column solid state storage elements A X receive data bytes and solid state storage element Y receives the parity byte generated by the parity module . Data of the ECC codewords may be byte wise interleaved between the solid state storage elements A X each solid state storage element A X receives 10 bytes of each 240 byte ECC codeword . Accordingly the adaptive write module may be configured to stream data rows to the solid state storage array . As used herein a data row refers to a data set comprising data for each of a plurality of columns within the array . The data row may comprise a byte of data for each column . The data row may further comprise a parity byte corresponding to the data bytes e.g. a parity byte corresponding to the data bytes for columns . The data row may be streamed to respective program buffers of the solid state storage elements A Y on the bus . In the horizontal data configuration of streaming a 240 byte ECC codeword to the array may comprise streaming 10 separate data rows to the array each data row comprising 24 data bytes one for each data solid state storage element A X and a corresponding parity byte.

The storage location or offset of the packet A within the logical page A may be determined based upon the horizontal layout of the data packet A. The offset may identify the location of the ECC codewords and or comprising the packet A and or may identify the location of the last ECC codeword comprising data of the packet A . Accordingly in some embodiments the offset may be relative to one or more datastructures on the array e.g. a packet offset and or ECC codeword offset . Another offset may identify the location of the last ECC codeword of a next packet e.g. packet B and so on.

As depicted in each of the ECC codewords and are horizontally spread across the storage elements A Y comprising the logical page A e.g. 10 bytes of the ECC codewords and are stored on each solid state storage element A X . Accessing the packet A may therefore comprise accessing each of the ECC codewords and and each of the storage elements A X .

Since the data is spread across the columns solid state storage elements A X reading data of the ECC codeword may require accessing a plurality of columns . Moreover the smallest read unit may be an ECC codeword and or packet . Reading a packet stored horizontally on the solid state storage array may therefore incur significant overhead. Referring back to reading the packet A may require transferring data of the logical page A into respective read buffers of the storage elements A X e.g. storage elements through . Transferring the contents of a page into the read buffer may incur a latency of Tr read latency . As used herein read time or read latency Tr refers to the time needed to transfer the contents of a physical storage unit e.g. physical page into a read buffer of a solid state storage element A Y. In the embodiment the read time Tr may therefore refer to the time required to transfer a physical page of each of the solid state storage elements A X into a respective read buffer. Accordingly the read time Tr of a logical storage unit may correspond to the slowest read time of the constituent storage elements A X.

In the embodiment each ECC codeword comprises 240 bytes and each packet comprises 520 bytes. The size of a logical page however may be much larger. For example each page may comprise 2 kb or more and as such a logical page may comprise 48 kb. Accordingly reading a packet may require transferring 48 kb of data to access 520 bytes or less of data.

Upon transferring the data into the respective read buffers data may be streamed into the read module by way of the 24 byte storage bus and bank controller . The stream time Ts may refer to the time required to stream the ECC codeword or packet into the pipeline . In the horizontal layout of the stream time Ts may be 10 cycles of the bus because as disclosed above each column comprises 10 bytes of the ECC codeword . Therefore although the horizontal arrangement incurs a high retrieval overhead the stream overhead is relatively low only 10 clock cycles .

Given the data arrangement within the solid state storage array and the latencies disclosed herein an input output operations per second IOPS metric may be quantified. The IOPS to read an ECC codeword may be expressed as 

In Equation 1 Tr is the read time of the solid state storage elements A Y Ts is the stream time e.g. the clock speed times the number of cycles required and C is the number of independent columns used to store the data. Equation 1 may be scaled by the number of independent banks A N available to the adaptive storage module . In the horizontal data structure layout of Equation 1 may be expressed as 

In Equation 2 the number of columns is 24 and Sc is the cycle time of the bus . The cycle time is scaled by 10 since as disclosed above a horizontal 240 byte ECC codeword may be streamed in 10 cycles of the bus .

The storage module may be configured to store data in different configurations layouts and or arrangements on the solid state storage medium . As disclosed above in some embodiments the adaptive write module is configured to arrange data within respective independent columns each comprising a subset of the columns of the solid state storage array e.g. subsets of the solid state storage elements A Y . Alternatively or in addition the adaptive write module may be configured to store data vertically within respective vertical stripes. The vertical stripes may have a configurable depth which may be a factor of the page size of the solid state storage elements A Y comprising the array .

As depicted in the adaptive write module may be configured to buffer and rotate ECC codewords for vertical storage within respective columns of the array the ECC codeword may stream to and be stored vertically on column solid state storage element A the ECC codeword may be stored vertically on column solid state storage element B the ECC codeword may be stored vertically on column solid state storage element C and so on the ECC codeword may be stored vertically in the column solid state storage element X . Column solid state storage element Y may be configured to store parity data corresponding to the ECC codewords as disclosed above. Alternatively the parity column may be used to store additional ECC codeword data.

In some embodiments the adaptive storage module may comprise a plurality of packet modules and or ECC write modules e.g. multiple independent write modules configured to operate in parallel. Data of the parallel write modules may flow into the adaptive write module in a checkerboard pattern such that the data is arranged in the vertical format disclosed herein.

The vertical arrangement of may store data of each ECC codeword within a respective column of the array . Accordingly each data row streamed to the array may comprise a byte corresponding to a respective ECC codeword . The data row may further comprise a corresponding parity byte the data rows may be configured to stream data of respective ECC codewords to program buffers of respective data columns e.g. solid state storage elements A Y and a corresponding parity byte to a parity column e.g. column Y . Accordingly the data rows may be stored with byte wise parity information each byte of a row and stored within the solid state storage elements A X may be reconstructed by use of the other bytes in the row and stored in other solid state storage elements A X and the corresponding parity byte.

The vertical configuration of may result in a different IOPS metric. The vertical arrangement of the ECC codewords may reduce overhead due to read time Tr but may increase the stream overhead Ts. As data is streamed from a logical storage element A Y each byte on the bus may correspond to a different respective data segment e.g. different ECC codeword . As such 24 different ECC codewords may be streamed in parallel as opposed to streaming a single ECC codeword as in the horizontal arrangement example . Moreover since each column may be independently addressable each transferred logical page may comprise data of a separate request e.g. may represent data of 24 different read requests . However since each ECC codeword is arranged vertically the stream time Ts for an ECC codeword may be increased the stream time of 240 byte ECC codewords in a vertical configuration may be 240 cycles as opposed to 10 cycles in the fully horizontal layout of . The IOPS metric for a single ECC codeword therefore may be represented as 

The reduced IOPS metric may be offset by the increased throughput reduced read overhead and or different Tr and Ts latency times. These considerations may vary from device to device and or application to application. Moreover the IOPS metric may be ameliorated by the fact that multiple independent ECC codewords can be streamed simultaneously. Therefore in some embodiments the data layout used by the storage module and adaptive write module may be configurable e.g. by a user setting or preference firmware update or the like .

As disclosed above in some embodiments the adaptive write module may be configured to layout and or arrange data in an adaptive channel configuration. As used herein an adaptive channel configuration refers to a data layout in which the columns of the array are divided into a plurality of independent channels each channel comprising a set of columns of the solid state storage array . The channels may comprise subsets of the solid state storage elements A Y. In some embodiments an adaptive channel configuration may comprise a fully horizontal data layout in which data segments are stored within a channel comprising 24 columns of the array as disclosed in conjunction with . In other embodiments the adaptive channel configuration may comprise a vertical configuration in which data segments are stored within one of 24 different channels each comprising a single column of the array as disclosed in conjunction with . In other embodiments the adaptive storage module may be configured to store data in other adaptive channel configurations and or layouts on the solid state storage array . depicts another embodiment of a system for adaptive data storage. In the embodiment the adaptive storage module is configured to store data structures of adaptive channels comprising two solid state storage elements A Y two independent columns per channel . Accordingly data segments may be stored within two columns of the array. In the embodiment the adaptive write module may be configured to buffer 12 ECC codewords to stream to the array . Each of the 12 ECC codewords may stream to a respective set of two columns within the array .

In alternative adaptive channel configurations the adaptive write module may be configured to buffer 24 N ECC codewords where N corresponds to the configuration of the adaptive channels used for each ECC codeword . ECC codewords may be stored within channels comprising N independent columns . Accordingly the horizontal arrangement of could be referred to as an adaptive channel configuration comprising 24 column channels and the vertical data structure configuration of may be referred to as an adaptive channel configuration comprising single column channels. The adaptive storage module may be configured to arrange data in any suitable hybrid arrangement including heterogeneous virtual columns. For example the adaptive write module may be configured to buffer six 6 ECC codewords in a four column adaptive channel configuration e.g. store ECC codewords across each of four columns buffer four ECC codewords in a six column adaptive channel configuration e.g. store ECC codewords across each of six columns and so on.

In some embodiments data structures may be arranged in adjacent columns within the array e.g. a data structure may be stored in columns . Alternatively columns may be non adjacent and or interleaved with other data structures e.g. a data structure may be stored on columns and and another data structure may be stored on columns and . The adaptive write module may be configured to adapt the data arrangement to out of service conditions if a column or portion thereof is OOS the adaptive storage module may be configured to adapt the data arrangement accordingly e.g. arrange data to avoid the OOS portions of the array as disclosed above .

The stream time Ts of an ECC codeword in the embodiment may be 120 cycles of the bus e.g. 240 N cycles . An IOPS metric of the two column hybrid arrangement of may be represented as 

The IOPS metric may be modified according to a number of data structures that can be read in parallel. The two column channel configuration of may enable 12 different ECC codewords and or packets to be read from the array concurrently.

The adaptive data structure configurations disclosed herein may affect error detection and or data recovery operations. In a horizontal data alignment data of each ECC codeword may be spread across the columns of the array e.g. 10 bytes on each of 24 solid state storage elements A X . Therefore if an uncorrectable ECC error is encountered identifying the source of the error may comprise performing an iterative parity substitution across each of the 24 storage elements A X e.g. reconstruct the ECC codeword from parity data while omitting data of a respective storage element A X until the source of the error is identified . Moreover since the ECC codewords cannot be corrected until data of the failed column is recovered parity reconstruction may aggregate errors in other columns .

By contrast when data is arranged vertically as in the source of the error may be immediately determined without iterative parity substitution since all of the data of the ECC codeword is stored within a single solid state storage element A X failure to validate an ECC codeword by the ECC read module indicates that the corresponding column within the array is the source of the uncorrectable error.

As disclosed above a suitable data arrangement may be selected at least in part based upon the ECC algorithm in use e.g. the size of the ECC codewords ratio between data and syndrome and so on . In some embodiments the adaptive storage module may be configured to implement a symbolic ECC algorithm. For example the ECC write module may be configured generate ECC codeword symbols e.g. 8 bit ECC codeword symbols which may be individually streamed to solid state storage array as disclosed herein. Since the ECC codeword symbols are configured for storage within respective columns by the adaptive write module the adaptive storage module may be capable of arranging ECC codeword symbols comprising particular data segments in any of the horizontal vertical hybrid and or vertical stripe configurations disclosed herein. Alternatively or in addition the data arrangement may be selected according to other data structures within the ECC codeword symbols such as data packets or the like. For example the adaptive storage module may be configured to store ECC symbols of a packet horizontally vertically in a hybrid channel configuration and or within vertical stripes as disclosed herein. Other ECC codeword symbol sizes e.g. 16 bit symbols 32 bit symbols and so on may be arranged according to a horizontal vertical hybrid channel and or vertical stripe configuration as disclosed herein.

In some embodiments vertical data structure configuration may provide benefits for data reconstruction. In particular vertical data structure layout and or arrangement may avoid error aggregation issues. Referring back to the data recovery module may be configured to reconstruct data of a vertically arranged ECC codeword by reading ECC codewords on other columns of the array correcting errors in the other ECC codewords if any by inter alia decoding the other ECC codewords using the ECC read module and using the corrected and or decoded ECC codewords and parity data of column to reconstruct the ECC codeword within the failed column . Use of corrected and or decoded ECC codewords as opposed to portions of uncorrected ECC codeword data may prevent errors from being aggregated and or included in the reconstructed ECC codeword.

In the data structure configuration if column comprising ECC codeword D fails such that the ECC codeword D cannot be read from the array the reconstruction module may be configured to reconstruct the ECC codeword by reading ECC codewords through Z from columns through and parity data of column correcting errors in the ECC codewords through Z if any by use of the ECC read module and reconstructing data of the ECC codeword D using the corrected ECC codewords through Z and the parity data of column . Accordingly the data used to correct ECC codeword D ECC codewords through Z may be free from correctable errors and as such such errors may not be reflected in the reconstructed data comprising ECC codeword D .

Hybrid independent channel data structure layouts may provide similar benefits. For example identifying errors in a two column hybrid may only require iterative substitution between two columns errors in a four column hybrid may only require iterative substitution between four columns and so on. Referring back to identifying the source of an uncorrectable error in the ECC codeword D may comprise iterative parity substitution between two columns and .

Hybrid independent channel configurations may also benefit from reduced error aggregation during data reconstruction. Referring to the two column channel embodiment of ECC codewords may be stored within channels comprising two columns of the array . Accordingly reconstructing data of a failed column of one of the channels may comprise reading data of other ECC codewords on other columns of the array correcting errors within the other ECC codewords if any and using the corrected ECC codewords data of the valid column of the channel and the parity data to reconstruct data of the failed column . For example reconstructing data of failed column comprising ECC codeword D may comprise reading data of ECC codewords through Z on columns through correcting errors within the ECC codewords through if any by use of the ECC read module and reconstructing data of column by use of data read from column the corrected ECC codewords of columns through and the parity data of column . The only source of potential uncorrected errors is the other columns within the channel with the failed column column . Accordingly data reconstructing in the embodiment incorporates errors from only a single column as opposed to aggregating errors from other columns as in the horizontal data structure layout of .

The size of the data structures such as the ECC codewords and or packets may be adapted according to the data arrangement implemented by adaptive write module . For example the size of the ECC codewords may be selected to minimize wasted overhead when ECC codewords are stored in a horizontal arrangement on 24 storage elements A X. However in other data arrangement embodiments other data structure sizes may be selected. For example in the vertical layout of the size of the ECC codeword may be adapted according to the depth of the columns e.g. the page size of each solid state storage element . Hybrid independent channel configurations may involve similar sizing considerations. In some embodiments the size of the ECC codewords e.g. the ratio of data to syndrome may be used to determine a suitable data arrangement. For example given a particular ECC codeword size a data arrangement that minimizes wasted overhead while providing an acceptable IOPS metric may be identified based on inter alia the depth of physical storage units of the solid state storage medium .

Table 1 illustrates various configurations of adaptive channel data layout embodiments used with different data structure sizes 240 and 960 byte ECC codewords as disclosed herein 

As disclosed herein storage of data structures in vertical configurations may improve error detection error correction and or data reconstruction performance. However horizontal storage configurations may provide performance benefits in certain situations e.g. reduce stream time . Accordingly in some embodiments the storage module may be configured to store data structures in an adaptive vertical stripe configuration. As used herein a vertical stripe configuration refers to storing data structures vertically within vertical stripes having a predetermined depth. Multiple vertical stripes may be stored within rows of the array . The depth of the vertical stripes may therefore determine read level parallelism whereas the vertical ECC configuration may maximize error detection error correction and or data reconstruction benefits.

In the embodiment the page size of the solid state storage medium may be 16 kb each page may be configured to hold four vertical stripes A N and each vertical stripe may be configured to hold four 1 kb vertically aligned ECC codewords. The disclosed embodiments are not limited in this regard however and could be adapted to use any solid state storage medium having any page size in conjunction with any ECC codeword size and or vertical stripe depth.

The depth of the vertical stripes A N and the size of typical read operations may determine inter alia the number of channels columns needed to perform read operations e.g. determine the number of channels used to perform a read operation stream time Ts and so on . For example a 4 kb data packet may be contained within five ECC codewords including ECC codewords through . Reading the 4 kb packet from the array may therefore comprise reading data from two columns columns and . A larger 8 kb data structure may span 10 ECC codewords ECC codewords and as such reading the 8 kb data structure may comprise reading data from three columns of the array columns and . Configuring the vertical stripes A N with an increased depth may decrease the number of columns needed for a read operation which may increase the stream time Ts for the individual read but may allow for other independent read operations to be performed in parallel. Decreasing depth may increase the number of columns needed for read operations which may decrease stream time T but result in decreasing the number of other independent read operations that can be performed in parallel.

The depth of the vertical stripe B may be increased to 8 kb which may be sufficient to hold eight vertically aligned ECC codewords. The data structure may be stored within 17 ECC codewords as disclosed above. However the modified depth of the vertical stripe B may result in the data structure occupying three columns columns through rather than six. Accordingly reading the data structure may comprise reading data from an independent channel comprising three columns which may increase the number of other independent read operations that can occur in parallel on other columns e.g. columns and . The stream time Ts of the read operation may double as compared to the stream time of the vertical stripe A.

The adaptive write module may be configured to buffer the ECC codewords for storage in vertical stripes as disclosed herein. The adaptive write module may comprise an adaptive fill module that is configured to rotate the serial stream of ECC codewords into vertical stripes by use of inter alia one or more cross point switches FIFO buffers A X and the like. The FIFO buffers A X may each correspond to a respective column of the array . The adaptive fill module may be configured to rotate and or buffer the ECC codewords according to a particular vertical code word depth which may be based on the ECC codeword size and or size of physical storage units of the array .

The adaptive write module may be further configured to manage OOS conditions within the solid state storage array . As disclosed above an OOS condition may indicate that one or more columns of the array are not currently in use to store data. The storage metadata may identify columns that are OOS within various portions e.g. rows logical erase blocks or the like of the solid state storage array . In the embodiment the storage metadata may indicate that column of the current logical page is OOS. In response the adaptive fill module may be configured to avoid column by inter alia injecting padding data into the FIFO buffer of the OOS column e.g. FIFO buffer C .

In some embodiments the adaptive write module may comprise a parity module that is configured to generate parity data in accordance with the vertical strip data configuration. The parity data may be generated horizontally on a byte by byte basis within rows of the array as disclosed above. The parity data P may correspond to ECC codewords through the parity data P may correspond to ECC codewords through and so on. The adaptive write module may include a parity control FIFO Y configured to manage OOS conditions for parity calculations e.g. ignore data within OOS columns for the purposes of the parity calculation .

The vertical stripe data configuration generated by the adaptive write module and parity module may flow to write buffers of the solid state storage elements A Y within the array through the write buffer and or bank controller as disclosed above. In some embodiments data rows generated by the adaptive write module may comprise one byte for each data column in the array columns A X . Each byte in a data row may correspond to a respective ECC codeword and may include a corresponding parity byte. Accordingly each data row may comprise horizontal byte wise parity information from which any of the bytes within the row may be reconstructed as disclosed herein. A data row A may comprise a byte of ECC codeword for storage on column a byte of ECC codeword for storage on column padding data for column a byte of ECC codeword for storage on column and so on. The data row may further comprise a parity byte A for storage on column or other column as disclosed above.

The data may be programmed onto the solid state storage array as a plurality of vertical stripes A N within a logical page as disclosed above e.g. by programming the contents of program buffers to physical storage units of the solid state storage elements A Y within the array . In the embodiment the indexing S N may correspond to vertical stripes configured to hold S ECC codewords in an array comprising N columns for storing data.

As disclosed herein data structures such as data packets may be stored within respective container data structures ECC codewords which may be spread across different columns and or rows of the solid state storage array . depicts one embodiment of a solid state storage array comprising a data structure packet C that is stored within a plurality of vertical stripes A B. As illustrated in the adaptive write module may be configured to arrange ECC codewords comprising the data structure C such that portions of the data structure C are stored within the vertical stripe A and other portions are stored in a different vertical stripe B ECC codewords comprising the packet C may wrap between different vertical stripes . In addition portions of the data structure C may be stored on different rows of the array e.g. within different logical pages A and B . In some embodiments data structure C may span logical erase blocks and or banks A N the logical page A may be within a different logical storage division and or different bank A N than the logical page B. Moreover header information stored with the data structures e.g. headers A B and or C may be stored in separate ECC codewords than other portions of the corresponding packets A B and or C .

In some embodiments the ECC codewords comprising a particular data structure e.g. data structure may comprise relational information which may allow the storage module to verify that different ECC codewords read from various different portions of the array correspond to the same data structure C despite the fact that the header information is distributed between different ECC codewords stored on different portions of the array . Referring back to the ECC write module may comprise a relational module configured to include relational information in the ECC codewords generated thereby. The relational information may be configured to provide for identifying and or verifying that certain ECC codewords are related e.g. provide for verifying that particular ECC codewords comprise data of the same data structure C . The relational information may comprise any identifying data. In some embodiments the relational information may be derived from the header C of the packet such as the logical identifier s associated with the data structure C. The relational information pertaining to data structures processed by the ECC write module may therefore be determined based on storage metadata associated with the data header information or the like.

The relational module may be configured to mark the ECC codewords with relational information in any suitable format and or using any suitable mechanism. Marking may comprise adding information to the ECC codewords e.g. in one or more fields . In some embodiments the relational module may be configured to mark ECC codewords through Steganography and or watermarking. Watermarking may comprise performing an XOR operation between relational information e.g. a bitmask of one or more logical identifier s associated with the corresponding data structure and the ECC codewords . As disclosed herein an ECC datastructure may comprise portions of multiple different data structures such ECC codewords may include relational information associated with each data structure contained therein. Accordingly in some embodiments the relational module may be configured to mark an ECC codeword with multiple instances of relational information e.g. multiple watermarks .

The adaptive read module may comprise an adaptive strip module configured to remove and or avoid data of columns that are OOS based on the storage metadata as disclosed above which may comprise removing the data from an incoming data stream by use of a cross point switch or the like.

The read sequence module may be configured to reorder and or recombine ECC codewords in sequence which may comprise rotating vertical stripes read from the array by use of respective buffers A Y as disclosed above e.g. rotating and combining ECC codewords read from respective columns of the array . The sequenced ECC codewords may flow to other processing modules of the read module .

In some embodiments the ECC read module may comprise a relational verification module configured to verify relational information on the ECC codewords e.g. verify and or authenticate one or more markings on the ECC codewords . Verifying relational information may comprise performing an XOR operation between the ECC codewords and respective logical identifier s associated with the data structures contained therein. Verifying relational information of an ECC codeword that comprises portions of multiple packets may comprise performing multiple XOR operations each corresponding to logical identifier s of a packet contained therein. The logical identifier information used to perform relational verification may be received via the storage metadata and or as part of a read request. In some embodiments requests to read data on the solid state storage array may be accompanied by the logical identifier s associated with the request which may be translated into physical addresses by use of inter alia the storage metadata . This logical identifier information may be used to perform relational verification on the corresponding ECC codewords . The logical identifier s of other data structures within a particular ECC codeword that are not part of the read request if any may be determined by use of inter alia a reverse index or the like of the storage metadata .

If the relational verification module fails to verify relational information of an ECC codeword the solid state adaptive storage module may issue an interrupt indicating that the data could not be read. In response the data recovery module may attempt to acquire the data from another source and or from another portion of the solid state storage array . In embodiments in which the relational module watermarks ECC codewords with logical identifier information the relational verification module may be configured to verify the relational information by performing an equivalent XOR operation. If the relational information differs between the XOR operation performed during storage and the XOR operation performed when the data is read the corresponding ECC codeword s may be corrupted and the ECC read module will detect uncorrectable errors there in response the storage module may issue a read failure interrupt as disclosed above.

The read operation may comprise transferring the contents of the specified logical pages into the read buffer . depicts one embodiment of a read buffer comprising data of packets A B and C. Columns through of the buffer may correspond to columns of the array and as such may comprise data read from read buffers of the respective solid state storage elements A Y comprising the array . The contents of columns through are not shown in to avoid obscuring the details of the depicted embodiment. These columns could however comprise data corresponding to other data structures OOS mask data or no op data read from the corresponding solid state storage elements F V.

The read sequence module may be configured to determine which portions of the buffer comprise valid data based on the logical to physical translation information OOS metadata and so on and may reorder and or mask the contents of the read buffer to generate a sequence of ECC codewords comprising the requested data. The read sequence module may be further configured to order the data structures in accordance with an order of the request requests within inter alia the request buffer . The ECC codeword sequence may comprise an ordered sequence of ECC codewords A comprising data structure A followed by the ECC codewords B comprising data structure B and the ECC codewords C comprising data structure C. As illustrated in the contents of columns and of logical page B ECC sequence C may be ordered after the contents of columns ECC sequence C in the sequence .

The ECC write module may be configured to generate ECC data of various types and or in various formats. In some embodiments the ECC write module is configured to generate ECC codewords comprising N bytes of data and S bytes of ECC information syndrome S . As disclosed herein the layout of ECC codewords on the solid state storage array may determine performance and or data recovery characteristics of the storage module . In some embodiments as illustrated in B E and F data of ECC codewords may be spread across multiple columns of the array and as such determining the source of an uncorrectable error in an ECC codeword and reconstructing the corresponding data from other columns of the array and or parity data may comprise iterative parity substitution which may result in error aggregation.

The ECC write module may be configured to generate ECC codeword symbols for storage in a particular layout and or arrangement within the solid state storage array . In the embodiment the ECC codeword symbols may be configured for storage within respective columns of the array e.g. within respective solid state storage elements A Y each ECC codeword symbol may comprise a single byte. In the embodiment a data packet is encoded into a plurality of symbols S through SZ. An N byte packet may be encoded into N S ECC codeword symbols . The ratio of N to N S may determine the strength of the ECC encoding which as disclosed above may determine inter alia the number of errors that can be detected and or corrected by use of the ECC encoding.

The adaptive write module may be configured to arrange the ECC codeword symbols within respective columns of the solid state storage array . The adaptive write module may be configured to store the ECC codeword symbols horizontally within the solid state storage array as disclosed above in conjunction with . The adaptive write module may be further configured to insert padding data into the write buffer in accordance with OOS conditions within the array and as indicated by the storage metadata .

The write module may be configured to stream data rows comprising 25 bytes to the array to program buffers of the solid state storage elements A Y . Accordingly in each stream cycle a complete one byte ECC codeword symbol may be streamed to each of the solid state storage elements A X elements along with a corresponding parity byte to solid state storage element Y or other storage element A Y . As illustrated in the data row A streamed to the array in a first bus cycle comprises ECC codeword symbols S through S for storage on respective solid state storage elements A X. The data row A further comprises a corresponding parity byte PA. The next data row B comprises ECC codeword symbols S through S and corresponding parity byte PB and so on. Although depicts single byte ECC codeword symbols the disclosure is not limited in this regard and could be adapted to use other multi byte sized ECC codeword symbols as disclosed in further detail herein.

As illustrated in although the ECC codeword symbols S through SZ are streamed horizontally across the array as in the individual ECC codeword symbols are configured to be stored within respective columns . Accordingly the ECC codeword symbols comprising the packet may be read with a high degree of parallelism utilizing all 24 columns of the array . However since the ECC codeword symbols are stored within respective columns the performance of error detection and or data reconstruction operations may be significantly improved.

In some embodiments the ECC write module is configured to generate differently sized ECC codeword symbols in accordance with the configuration of the solid state storage array bus adaptive storage module and or the like. For example if bus were to have a width of 48 bytes two bytes per storage element A X the ECC codeword symbols may be configured to be two bytes in size with each column of the array receiving a two byte ECC codeword symbol on each stream cycle e.g. into each of two or more program buffers .

In the ECC codeword symbols are represented as a first portion A comprising a first byte of the ECC codeword symbol and a second portion B comprising a second byte of the ECC codeword symbol . The adaptive write module may be configured to buffer the first portions A in a first buffer A and 24 of the second portions B in a second buffer B . Contents of the first buffer A may be streamed to the array in a first data row A and contents of the second buffer B may be streamed to the array in a second data row B. The first data row A may comprise the first byte of the ECC codeword symbols A  through A  and the second data row B may comprise the second byte of the ECC codeword symbols B  through B . As disclosed above each data row A B may comprise byte wise parity information. Data row A may comprise parity byte PA corresponding to ECC codeword symbol bytes A  through A  and data row B may comprise parity byte PB corresponding to ECC codeword symbol bytes B  through B . As illustrated each multi byte ECC codeword symbol is stored within a respective column of the array each solid state storage element A X comprises a complete two byte ECC codeword symbol .

Although particular configurations of ECC codeword symbols are disclosed herein the disclosure is not limited in this regard and could be adapted to generate ECC codeword symbols of any suitable size for storage in any suitable configuration. In some embodiments for example the adaptive write module may be configured to arrange ECC codeword symbols comprising three four or more bytes within respective columns of the array . Moreover although depict a horizontal data layout the disclosure is not limited in this regard. In other embodiments the adaptive write module may be configured to store ECC codeword symbols of different data segments and or storage requests within respective independent channels in a vertical configuration and or in a vertical stripe configuration as disclosed above.

The storage module may leverage the ECC codeword symbols configured for storage within columns of the array to implement efficient recovery operations. depicts one embodiment of data flow in an adaptive storage system. As illustrated in the write module may be configured to store ECC codeword symbols comprising a data packet on the solid state storage array . The data packet may comprise a 512 byte packet data segment and an eight byte header . The ECC write module may be configured to encode the data packet into 536 one byte ECC codeword symbols S through S . The adaptive write module may be configured to arrange the ECC codeword symbols S through S horizontally within the array e.g. in a channel comprising 24 solid state storage elements A X and a parity column Y . In other embodiments the adaptive write module may be configured to arrange the ECC codeword symbols S through S within an independent channel comprising a subset of the columns one or more solid state storage elements A Y in a vertical strip configuration or the like as disclosed herein.

The read module may be configured to read the data packet in response to a request. The read module may be configured to determine a storage location of the ECC codeword symbols comprising the data packet by use of inter alia the logical to physical translation layer and or storage metadata as disclosed herein. The ECC codeword symbols S through S may be arranged in a horizontal data configuration and as such the read module may read 24 of the ECC codeword symbols S through S in parallel in each cycle of the bus . Reading the ECC codeword symbols S through S may comprise issuing one or more read commands to the solid state storage array . In some embodiments the read command s may be issued to the columns in parallel. The read command s may cause the solid state storage element s A Y to transfer the contents of a specified physical storage location e.g. a page sector or the like into a read buffer of the respective storage element s A Y. The contents of the solid state storage element read buffer s may be streamed into the read module in one or more bus cycles as disclosed herein. Each stream cycle may comprise transferring a respective data row A U into the read module each of which may comprise a one byte ECC codeword symbol S S read from a respective one of the solid state storage elements A X. In other embodiments comprising multi byte ECC codeword symbols each bus cycle may transfer a portion of an ECC codeword symbol stored within a respective column A X which may be reconstructed by the adaptive read module as disclosed herein. The ECC read module may be configured to validate and or decode the ECC codeword symbols S through S which may comprise detecting and or correcting errors therein if any . The ECC read module may be further configured to validate relational information of the ECC codeword symbols using a relational verification module as disclosed herein.

As illustrated in the ECC codeword symbols S S stored within a particular column may be validated independently of the data stored in other columns . The source of uncorrectable errors may therefore be identified without performing iterative parity substitution operations between columns of the array e.g. the source of the error is the solid state storage element A X from which the uncorrectable ECC codeword symbol was read . The source of correctable errors may be similarly identified and attributed to respective solid state storage elements A Y.

As disclosed above the read module may comprise an adaptive read module configured to read the ECC codeword symbols S from the array . The adaptive read module may be configured to remove and or strip data if any corresponding to OOS columns of the array. In some embodiments the adaptive read module is further configured to reorder ECC codeword symbols streamed into the read module via the buffer in accordance with the layout of the ECC codeword symbols as disclosed above in conjunction with .

The ECC read module may be configured to validate and or decode the ECC codeword symbols S S. The ECC read module may comprise an ECC symbol validation module configured to validate and or decode the ECC codeword symbols S S in accordance with the symbolic ECC algorithm implemented by the ECC write module and or ECC generator module . The ECC read module may further comprise a relational verification module configured to validate relational information of the ECC codeword symbols S S as disclosed above. Decoding and or validating the ECC codeword symbols S S may therefore comprise reconstructing the data packet which may be provided to a storage client .

One or more of the ECC codeword symbols S S comprising the data packet may be unavailable due to inter alia errors that cannot be corrected by the ECC encoding implemented by the adaptive storage module . The data recovery module may be configured to reconstruct unavailable ECC codeword symbols using other ECC codeword symbols stored within the array and or parity data parity data PA PU . Reconstructing an unavailable ECC codeword symbol may comprise accessing one or more data rows A N associated with the unavailable ECC codeword symbol validating and or decoding other ECC codeword symbols within the data rows A N and reconstructing data of the unavailable ECC codeword symbol using the corrected ECC codeword symbols and parity data e.g. using parity substitution . The use of corrected ECC codeword symbols may prevent errors from other columns from being included in the reconstructed ECC codeword symbol and as such may improve data reconstruction performance. Alternatively the data recovery module may be configured to reconstruct an unavailable ECC codeword symbol by use of uncorrected and or un decoded ECC codeword symbols. The use of uncorrected and or un decoded ECC codeword symbols may reduce computational overhead which may improve performance in low error rate embodiments. The data recovery module may be further configured to take portions of the array OOS in response to one or more of identifying an unavailable ECC codeword symbol read from the column in response to detecting more than a threshold number of unavailable ECC codeword symbols read from the column one or more ECC codeword symbols exceeding an acceptable rate of correctable errors and or the like.

In some embodiments the data recovery module is configured to a read data rows A U b validate and or decode the ECC codeword symbols within the respective data rows A U and c reconstruct the unavailable ECC codeword symbols S S through S using parity substitution between the validated and or decoded ECC codeword symbols and the corresponding parity byte PA PA. Reconstructing ECC codeword symbol S may comprise a accessing ECC codeword symbols S through S within row A b correcting the ECC codeword symbols S through S by use of the ECC read module and c performing a parity substitution operation to reconstruct ECC codeword symbol S. The ECC codeword symbols S through S may be reconstructed in corresponding byte wise parity substitution operations. As depicted in reconstructing the ECC codeword symbol S may incorporate corrected ECC codeword symbols of one or more other data packets and or data segments symbols X and X . Accordingly in some embodiments reconstructing an unavailable ECC codeword symbol of a data packet may comprise accessing and or validating one or more ECC codeword symbols of other data packets and or incorporating parity data pertaining to ECC codeword symbols of other data packets e.g. the parity data P may comprise information pertaining to symbols X and X .

In some embodiments the ECC algorithm implemented by the adaptive write module may be capable of reconstructing unavailable data. For example a symbolic ECC algorithm may be capable of reconstructing one or more unavailable ECC codeword symbols by use of other ECC codeword symbols and or without the use of parity data e.g. PA PU . Accordingly in some embodiments the adaptive write module may be configured to omit parity data from the data rows A U which may allow the full 25 solid state storage elements A Y to be used to store ECC codeword symbol data. In such embodiments reconstructing an unavailable ECC codeword symbol may comprise a reading a plurality of ECC codeword symbols from one or more data rows A U within the array b validating and or decoding the ECC codeword symbols if possible and c reconstructing the unavailable ECC codeword symbols using the other ECC codeword symbols in accordance with the ECC algorithm.

As disclosed above although the embodiments illustrated in describe a horizontal data configuration of ECC codeword symbols the disclosure is not limited in this regard the disclosed embodiments could be adapted to store data encoded as ECC codeword symbols in any suitable configuration including but not limited to horizontal vertical hybrid independent channel vertical stripe and or the like. is a block diagram of another embodiment of a system for adaptive storage. The embodiment may be configured to store data encoded as ECC codeword symbols within adaptive independent channels A N each of which may comprise one or more columns of the array e.g. sets of one or more solid state storage elements A Y .

The adaptive storage module may be configured to process multiple data streams for storage on the array each of which may correspond to a different respective storage request. In the embodiment the write module is configured to process N data streams in parallel including data segments A B through N. The data segments A N may be processed by one or more modules of the write module as disclosed above which may comprise generating respective packets A B through N. The data segments A N may be processed in parallel which may comprise processing the data using multiple instantiations of the packet module whiten module and so on a wide data path or the like. Alternatively the data segments A N may be processed serially and may be buffered for parallel storage within respective channels A N using inter alia the adaptive write module .

The ECC write module and or set of ECC write modules may be configured to generate respective sets of ECC codeword symbols A N corresponding to each of the data packets A N by use of the ECC symbol generator module . Each data packet A N may comprise X 1 ECC codeword symbols A N. As disclosed above the ratio between the size of the data packets A N and the corresponding sets of ECC codeword symbols A N may determine inter alia the strength of the ECC algorithm the number of errors that can be detected and or corrected by use of the ECC algorithm . In the embodiment the ECC write module is configured to generate one byte ECC codeword symbols A N. The ECC write module may be further configured to mark the ECC codeword symbols A N with relational information using the relational module as disclosed above.

The sets of ECC codeword symbols A N corresponding to the packets A N may flow to the adaptive write module which may be configured to arrange the sets of ECC codeword symbols A N in one of a horizontal configuration a vertical configuration a hybrid independent channel configuration a vertical stripe configuration or the like. In the embodiment the adaptive write module is configured to arrange the sets of ECC codeword symbols A N in a hybrid independent channel configuration wherein each channel A N comprises four columns of the array . The adaptive write module may be configured to buffer the sets of ECC codeword symbols in respective channel buffers A N FIFO buffers . Each channel buffer A N may be four bytes wide such that four of each set of ECC codeword symbols A N streams to the array in each bus cycle.

The adaptive fill module may be configured to manage OOS conditions within the array as disclosed above. The adaptive write module may further comprise a parity module configured to generate parity data corresponding to each data row streamed to the array. The parity control FIFO may be configured to manage parity calculations in accordance with OOS conditions within the array as indicated by the storage metadata .

As illustrated in the adaptive write module is configured to divide the solid state storage array into a set of independent channels A N each of which comprises a set of four columns channel A comprises solid state storage elements A D channel B comprises solid state storage elements E H channel N comprises solid state storage elements U X and so on. The set of ECC codeword symbols A comprising packet A are configured for storage in channel A the set of ECC codeword symbols B comprising packet B are configured to storage in channel B the ECC codeword symbols N comprising packet N are configured to storage in channel N and so on. As disclosed above the independent channel configuration of may increase the stream time of data packets A N as compared to the horizontal ECC codeword symbol configuration of due to the increased parallelism for individual reads available in horizontal data configurations . However dividing the array into independent channels may allow the read module to perform different read operations within the different channels concurrently which may increase performance in certain use cases in accordance with the stream time read time and or IOPS metrics disclosed above .

As shown in each data row A N may comprise ECC codeword symbols A N of a plurality of different data segments packets A N and the ECC codeword symbols A N comprising the respective packets A N may be spread across two or more solid state storage elements A X in accordance with the hybrid independent channel configuration implemented by the adaptive write module . The adaptive write module may be further configured to arrange the individual ECC codewords A N for storage within respective columns of the array which as disclosed above may be leveraged to improve data reconstruction performance. In the embodiment reconstructing the ECC codeword symbol SA of column may comprise a accessing other ECC codeword symbols within the data row A with the unavailable ECC codeword symbol SA ECC codeword symbols SA SA SB SB through SN SN correcting the other ECC codeword symbols and reconstructing SA by use of the corrected ECC codeword symbols and the corresponding parity data PA. As disclosed in further detail below read operations in the hybrid independent channel configuration of may comprise reading different portions of the array within different channels A N e.g. reading data of a first data row A within channel A while reading data of a second data row B in channel B . The adaptive storage module may comprise an adaptive schedule module configured to schedule concurrent read operations within the independent channels A N as disclosed in further detail below . Accordingly accessing the other ECC codeword symbols in the data row A may comprise performing one or more additional read operations as disclosed herein in conjunction with .

Referring back to the storage module may comprise a request buffer configured to receive storage requests from one or more storage clients . The storage requests may be queued in the request buffer and serviced and or executed by the storage module . In some embodiments the storage module comprises an adaptive schedule module configured to determine an optimal schedule for storage operations based on inter alia the adaptive data configuration on the solid state storage array . As used herein an optimal schedule refers to a schedule that maximizes an objective criteria. In some embodiments the objective criteria may be maximization of parallelism while maintaining data ordering constraints and or avoiding hazards such as read before write write before read or the like.

The adaptive schedule module may determine that the read requests correspond to the data layout depicted in by use of inter alia the logical to physical translation layer and storage metadata . The adaptive schedule module may be further configured to identify column and or channel conflicts between read requests which may comprise identifying which read requests require use of columns that are needed by other read requests. As illustrated in data packets A F stored within overlapping columns of the array may be considered to conflict with respect to read scheduling. In the embodiment data packet A overlaps with conflicts with packet B packet B overlaps with packets A and C packet E overlaps with packets D and F and so on. The adaptive schedule module may identify channel conflicts by use of column bitmaps or other technique. The adaptive schedule module may be further configured to identify read requests that can be performed in parallel e.g. read requests that do not conflict and or require access to the same columns of the array . Non conflicting read requests may be combined and or aggregated into a single composite read request. In the embodiment the requests to read packets A C E and F may be combined into a single read operation . The requests to read packets B and D may be combined into another read operation . Data of the read operations and may be processed by the read module which may comprise reordering ECC decoding dewhitening and or depacketizing the data as disclosed herein. As illustrated in the combined read requests may change the order of read operations perform the read of packets C E and F before packet B . The adaptive schedule module may be configured to combine schedule and or reorder operations to prevent data hazards such as read before write and or write before write. Alternatively the adaptive schedule module may be configured to maintain the order of the requests in the buffer which may limit the degree of parallelism that can be achieved through request scheduling and aggregation.

As disclosed herein errors within ECC codewords may be detected and or corrected by the ECC read module as data is read from the solid state storage array . Some ECC codewords however may comprise more errors than can be corrected by the ECC algorithm. As disclosed above in response to detecting an uncorrectable ECC codeword the adaptive storage module may issue an interrupt to the data recovery module which may attempt to recover the data using inter alia parity data stored on the solid state storage array. In some cases uncorrectable errors may be caused by the failure of a portion of the solid state storage array . Such errors may occur within specific columns and as such error conditions may result in losing the data of portions of a column within the array .

The ECC codewords in column of the vertical stripe B comprising data of packet A may comprise errors that cannot be corrected by the ECC read module . In response the adaptive storage module may issue an interrupt to the data recovery module . The data recovery module may be configured to determine the source of the uncorrectable error by use of the logical to physical translation layer and to reconstruct data of column in the vertical stripe B by use of inter alia other ECC codewords and or the parity data stored within the vertical stripe B.

The data recovery module may be configured to issue another read operation to read the other ECC codewords within the vertical stripe B. The read operation may further comprise reading parity data B of the vertical stripe B. The data acquired in the read operation may be processed by the adaptive read module which may comprise stripping padding data if any from the read buffer as disclosed above. The ECC read module may be configured to identify and or correct errors in the ECC codewords A and which may comprise decoding the ECC codewords A and and or generating corrected ECC codewords A and .

The data recovery module may comprise a parity substitution module which may be configured to reconstruct the ECC codewords A N in column by use of the corrected ECC codewords A N corresponding to columns through corrected ECC codewords A N corresponding to columns and parity data A N ECC codeword A may be reconstructed by use of corrected ECC codewords A through corrected ECC codewords A through and parity data A ECC codeword B may be reconstructed by use of corrected ECC codewords B through corrected ECC codewords B through and parity data B and so on. As disclosed above use of the corrected ECC codewords A N and A N may prevent error aggregation during parity substitution operations.

In some embodiments parity substitution module may be configured to perform a byte wise parity substitution operation corresponding to the byte wise parity generation embodiments disclosed in conjunction with I and K. Following reconstruction of the ECC codewords of column data packet A may processed by the read module and returned to the requester as disclosed herein which may comprise discarding the other ECC codewords and read from the vertical stripe B.

The method may start and or be initialized which may comprise initializing communication resources loading computer executable instructions and so on.

Step may comprise arranging data for storage on a solid state storage array . The solid state storage array may comprise a plurality of independent columns e.g. solid state storage elements A Y which may be communicatively coupled to an adaptive storage module in parallel by inter alia a bus .

In some embodiments step may further comprise generating data structures for storage on the array . Step may comprise generating one or more packets comprising data for storage on the array by use of a packet module . The packets may comprise contextual metadata pertaining to the data such as one or more logical identifiers associated with the data and so on as disclosed above. Step may further comprise whitening the data packets by use of a whiten module . Step may comprise generating one or more ECC codewords comprising the packets. The ECC codewords may comprise ECC codewords ECC codewords ECC codeword symbols or the like. In some embodiments step further comprises including relational information in the ECC codewords which may comprise watermarking the ECC codewords within a bitmask or other data derived from a logical identifier associated with the data packets.

Arranging the data at step may comprise buffering one or more data structures such that the data structures layout within portions of the solid state storage array . Arranging the data structures at step may therefore comprise configuring the data structures to layout in a horizontal vertical and or hybrid configuration within the solid state storage array . Step may comprise a 24 byte by 10 byte buffer of the horizontal embodiment of FIG. A. Alternatively step may comprise arranging the data structures for a vertical data structure layout as disclosed in conjunction with step may comprise using a buffer capable of buffering 24 240 byte ECC codewords or other data structures for storage on respective columns of the logical storage element. Step may further comprise arranging the data structures in a hybrid independent channel configuration as disclosed in conjunction with step may comprise buffering data structures in a write buffer capable of buffering 24 N 240 byte ECC codewords where N is the number of independent columns of the hybrid storage arrangement. The data structures may comprise ECC codewords . The arrangement of step may comprise configuring data of the same ECC codeword for storage on two of more different independent columns of the array . Alternatively the arrangement of step may comprise configuring data of the ECC codewords for storage within respective columns of the array .

Alternatively or in addition buffering the data structures at step may comprise configuring the data structures to layout within vertical stripes of the solid state storage array . Step may comprise buffering the data in accordance with a selected vertical stripe depth and or length which may correspond to an integral factor of data structures and or page size of the solid state storage medium . Step may therefore comprise streaming ECC codewords into vertical FIFO buffers A X as disclosed in conjunction with . The vertical stripe configuration may comprise storing ECC codewords within respective columns of the array . However data structures contained within the ECC codewords e.g. packets may be configured for storage on two or more different columns .

In some embodiments step further comprises adapting the data layout to avoid portions of the array that are OOS. Step may comprise injecting padding data into the buffer s to mask OOS columns of the array in accordance with the storage metadata as disclosed above.

Step may comprise streaming the data arranged at step to the solid state storage array as disclosed above. Step may comprise byte wise streaming bytes to program buffers of a plurality of independent columns of the array . Step may further comprise generating byte wise parity information for storage on a parity column of the array as disclosed above.

Step may comprise programming the contents of the program buffers streamed at step onto a logical page of the solid state storage array . Step may comprise issuing a program command to the solid state storage array via the bus . In response to the command each of the plurality of independent columns of the array may be configured to perform a program operation concurrently and or in parallel with other columns within the array . Steps may further comprise updating the logical to physical translation layer to indicate the physical storage locations of the data structures stored on the array . The physical storage locations may indicate the bank A N array A N logical page offset and the like of the data structures. The logical to physical translation metadata may comprise any to any associations between logical addresses such as logical identifiers and addresses of physical storage locations within the array .

Step may comprise determining an adaptive data arrangement for use within a solid state storage array . The determination of step may be based on inter alia a read time Tr of the solid state storage medium a stream time Ts of the adaptive storage module data access characteristics of storage clients desired IOPS characteristics data reconstruction characteristics and so on. The determination of step may comprise selecting between one or more of a a horizontal data arrangement that reduces stream time Tr but reduces availability of read parallelism b a vertical data arrangement that increases read parallelism but may increase stream time Tr c a hybrid independent channel configuration and or d a vertical stripe configuration having a particular vertical stripe depth.

Step may comprise generating a profile of data storage operations by inter alia the adaptive storage profiling module . As used herein profiling data operations refers to gathering information e.g. storage metadata pertaining to the storage operations performed by storage clients through the storage interface . Profiling data may comprise data access patterns characteristics of the solid state storage medium bus and so on which may be used to determine an optimal adaptive data structure layout on the solid state storage array . The adaptive storage profiling module may be configured to gather such profiling information and or generate recommendations regarding data layout in response to the profiling information. For example applications that exhibit a large number of data accesses to relatively small data segments and or packets may be suited to a vertical configuration a hybrid independent channel configuration e.g. two or four column channel configuration and or a vertical stripe configuration. In another example the storage medium may exhibit relatively high stream times as compared to read times Tr and as such a horizontal and or wide channel configuration may result in improved performance.

The determination of step may be based on data reconstruction characteristics of various adaptive data layouts. Over time the solid state storage medium may become less reliable and as such a data structure configuration that provides better data reconstruction performance may be preferred over other configurations. For example highly vertical configurations including the vertical stripe configurations may reduce error aggregation during parity reconstruction operations as compared to horizontal data layouts and as such may provide improved data reconstruction performance.

In some embodiments step may comprise determining an adaptive data layout by use of an objective function. The objective function may be configured to quantify the performance of different adaptive data layout configurations in view of the profiling data gathered by the adaptive storage profiling module and or other considerations e.g. data reconstruction characteristics . The adaptive data configuration that provides the highest utility per the objective function may be identified as the optimal data configuration for the particular set of profiling data and or other considerations.

Step may further comprise automatically configuring the storage module to implement the determined adaptive data arrangement. Alternatively step may comprise providing information pertaining to the determined adaptive data arrangement to a user administrator or other entity which may determine whether any changes should be implemented.

Steps and may comprise arranging data for storage on the solid state storage array in accordance with the determined adaptive data arrangement streaming the data structures to the array and programming the data to the array as disclosed above.

Step may comprise reading the data from the determined storage locations and or in accordance with the determined data structure configuration. The read operation may comprise reading data from one or more independent columns comprising the array e.g. reading data from one or more solid state storage elements A Y as disclosed herein. Step may comprise providing columns of the array with respective physical addresses as determined at step . The physical address may be the same or equivalent for each of the solid state storage elements A Y e.g. in a horizontal data arrangement . Alternatively the physical addresses may differ e.g. for vertical hybrid independent channel and or certain vertical stripe configurations . Step may incur a read latency Tr as described above.

Step may further comprise streaming the ECC codewords from read buffer s of the array into an adaptive storage module . Streaming the data structures may comprise streaming sufficient data to reconstruct a data structure such as a plurality of ECC codewords comprising one or more packets comprising the requested data. Each cycle of the bus may be configured to transfer a single byte from each column of the array. The number of bus cycles needed to transfer the requested ECC codewords may depend on the arrangement of the data data arranged horizontally may require 10 cycles to transfer a 240 byte ECC codeword from 24 columns data arranged vertically may require 240 cycles to transfer the same 240 byte ECC codeword from a single column data arranged in a hybrid independent channel arrangement may require 240 N cycles where N is the number of independent horizontal columns in the arrangement and data arranged in vertical stripes may require 240 cycles. In the vertical hybrid independent channel and vertical stripe configurations however multiple ECC codewords may be streamed concurrently.

Step may comprise reconstructing the requested data by use of the adaptive storage module e.g. an adaptive read module . Step may comprise buffering data read from the array reordering the data stripping padding data corresponding to OOS columns if any and so on as disclosed herein. Step may further comprise performing ECC error detection and or correction on ECC codewords comprising the data packet by use of the ECC read module . ECC processing may further comprise verifying relational information associated with the ECC codewords such as a watermark on the ECC codewords which may be derived from one or more logical identifiers associated with the requested data. Step may further comprise dewhitening the data packets by use of the dewhiten module and depacketizing the data by use of the depacket module as disclosed herein.

Step may comprise determining storage location s corresponding to the requests within the array as disclosed above.

Step may comprise identifying storage requests that can be executed concurrently e.g. do not conflict . As disclosed above a storage request conflict refers to storage requests that cannot be performed concurrently within the same bank and or array . A storage request conflict may result from data structures associated with the requests overlapping within the array such that the storage requests pertain to data stored within one or more of the same columns within the array . Storage requests that can be executed concurrently may refer to storage requests that pertain to data stored on different independent columns of the array .

Step may comprise scheduling and or combining the requests in accordance with the concurrencies and or conflicts identified at step . Step may comprise combining requests that can be performed concurrently e.g. do not conflict . Combining requests may comprise reordering requests within the buffer e.g. changing the order of the requests within the buffer as disclosed above in order to combine concurrent requests and or avoid request conflicts. Accordingly step may comprise determining that the scheduled storage requests and or storage request combinations do not create data hazards such as read before write hazards write before read hazards or the like. In some embodiments step may be limited to combining requests without changing request ordering to ensure that data hazards do not occur.

Step may comprise performing the scheduled requests which may comprise performing one or more combined read operations as disclosed herein. Step may comprise reconstructing data of the requests by use of a read module adaptive read module and so on as disclosed herein.

Step may comprise performing a read operation to read ECC codewords within the same vertical stripe as the uncorrectable error as disclosed above in conjunction with . Alternatively step may comprise performing a read operation to read ECC codewords within other columns of a vertical data configuration and or within other channels of a hybrid independent channel configuration. Step may further comprise reading parity data corresponding to the vertical stripe vertical and or hybrid independent channel configuration as disclosed herein.

Step may comprise correcting ECC codewords in the vertical stripe and or other columns . Correcting the ECC codewords may comprise processing the ECC codewords using the ECC read module and or relational verification module as disclosed above. In some embodiments step may be omitted and the reconstruction step may proceed without first decoding and or correcting the ECC codewords of the other columns .

Step may comprise reconstructing the uncorrectable data by use of the corrected ECC codewords and parity data. Step may comprise a byte wise parity substitution operation between the corrected ECC codewords and the parity data. In hybrid independent channel configurations step may further comprise determining the source of the uncorrectable error using iterative parity substitution within the independent channel comprising the uncorrectable error. In a two channel configuration iterative parity substitution may comprise determining which of the two channels is the source of the error. Other hybrid independent channel configurations may involve additional iterations in accordance with the width of the channels.

Step may further comprise reconstructing the data by inter alia decoding the ECC codewords including the reconstructed ECC codewords dewhitening and depacketizing the data as disclosed above.

Step may comprise determining performance metrics of one of more adaptive data storage configurations. Step may comprise replaying and or simulating the history of storage requests in one or more different adaptive storage configurations which may include but are not limited to a horizontal configuration a vertical configuration a hybrid independent channel configuration a vertical stripe configuration of various vertical stripe depths and or the like. Step may comprise simulating storage operations under the different adaptive data configurations which may include determining the contents of various portions of the solid state storage array under the different adaptive data configurations scheduling read operations according to the adaptive layout using the adaptive schedule module and or the like. The performance metrics may be based on one or more of a desired IOPS metric a read time Ts a stream time Ts and so on as disclosed above.

Step may comprise determining an adaptive storage configuration. Step may comprise determining an optimal adaptive storage configuration based on the performance metrics and or one or more objective functions. The determination of step may include various metrics and or considerations including the performance metrics calculated at step data reconstruction characteristics of various data layout configurations and so on. Step may further comprise providing an indication of the determined storage configuration to a user administrator or other entity automatically configuring the adaptive storage module to operate in accordance with the determined adaptive storage configuration and or the like.

Step may comprise storing the ECC codeword symbols generated at step within respective columns of the array . Step may comprise arranging the ECC codeword symbols buffering the symbols such that the ECC codeword symbols are streamed to program buffers of respective solid state storage elements A Y within the array . Step may comprise buffering multi byte ECC codeword symbols to store bytes of the same ECC codeword symbols within the same column as disclosed above in conjunction with .

Step may further comprising storing ECC codeword symbols according to an adaptive data layout and or configuration within the array . The adaptive data layout of step may comprise one or more of a horizontal data configuration a vertical data configuration a hybrid channel configuration and or a vertical stripe configuration as disclosed above. In a horizontal configuration step may comprise streaming the ECC codeword symbols of the data packet horizontally within a 24 column channel of the array as depicted in and M N . In a vertical configuration step may comprise streaming the ECC codeword symbols of the data packet vertically within a single column of the array as depicted in while ECC codeword symbols of other packets and or other data segments are streamed to other columns of the array . In a hybrid independent channel configuration step may comprise streaming the ECC codeword symbols of the data packet to a hybrid independent channel comprising a subset of one or more columns of the array as depicted in while ECC codeword symbols of other packets and or other data segments are streamed to other independent channels comprising other subsets of columns within the array . In a vertical stripe configuration step may comprise streaming the ECC codeword symbols into a vertical stripe of a predetermined depth within one or more of the columns of the array as depicted in .

In some embodiments step further comprises managing OOS conditions within the array by inter alia streaming padding data to one or more columns that are out of service as indicated by the storage metadata .

In some embodiments step further comprises generating parity data corresponding to one or more data rows comprising the ECC codeword symbols. The data rows may comprise ECC codeword symbols of the data packet and or ECC codeword symbols of one or more other packets and or data segments in accordance with the adaptive data configuration implemented by the adaptive write module .

Step may further comprise filling program buffers of the solid state storage elements A Y in the array and issuing one or more program commands to the array configured to program the contents of the program buffers to the solid state storage elements A Y.

Step may further comprise reading ECC codeword symbols in accordance with an adaptive data layout. As disclosed above ECC codeword symbols of the requested data may be stored in one or more of a horizontal data configuration a vertical data configuration a hybrid independent channel configuration a vertical stripe configuration and or the like. In a horizontal independent channel and or some vertical stripe configurations step may comprise reading ECC codeword symbols from two or more columns of the array . In a vertical configuration and or some vertical stripe configurations step may comprise reading ECC codeword symbols from a single column of the array . However and notwithstanding the data arrangement and or number of columns used to read ECC codeword symbols comprising the requested data each ECC codeword symbol read from the array may be stored within a respective one of the columns e.g. the data of each ECC codeword symbol may be stored within a respective one of the solid state storage elements A Y .

In some embodiments step further comprises buffering the ECC symbol data to reconstruct ECC codeword symbols e.g. as depicted in . Step may further comprise reordering the ECC codeword symbols in accordance with an order and or sequence of the requested data as disclosed above in conjunction with . Step may further comprise validating relational information of the ECC codeword symbols by use of a relational verification module as disclosed above.

Validating the ECC codeword symbols at step may comprise detecting and or correcting errors in the ECC codeword symbols using an ECC algorithm and or by use of the ECC read module and or ECC symbol validation module .

Step may comprise identifying an ECC codeword symbol that is unavailable due to inter alia an uncorrectable error in the ECC codeword symbol read failure hardware fault and or the like. The flow may continue at step in response to detecting the unavailable ECC codeword symbol otherwise the flow may continue at step .

Step may comprise reconstructing the unavailable ECC codeword symbol . Step may comprise one or more byte wise parity substitution operations which may include but are not limited to accessing one or more data rows comprising the unavailable ECC codeword symbol wherein each data row comprises one or more other ECC codeword symbols correcting the other ECC codeword symbols within the one or more data rows decoding and or validating the other ECC codeword symbols and using the corrected ECC codeword symbols and or corresponding parity data to reconstruct the unavailable ECC codeword symbol e.g. as illustrated in . Alternatively the parity substitution operation may omit the step of correcting the other ECC codeword symbols . The unavailable ECC codeword symbol may be reconstructed by use of the other ECC codeword symbols as read from the array . In some embodiments step may comprise reconstructing the unavailable ECC codeword symbol using the other ECC codeword symbols and without reference to dedicated parity data e.g. using data reconstruction capabilities of the ECC encoding as disclosed above.

Step may comprise reconstructing the requested data from the ECC codeword symbols which may include one or more reconstructed ECC codeword symbols acquired at step . Step may further comprise providing the requested data to a storage client which may include dewhitening depacketizing and or decrypting the data as disclosed above.

Steps may comprise validating the ECC codeword symbols comprising the requested data as disclosed above. Step may further comprise identifying unavailable ECC codeword symbols determining the source of the error s within the unavailable ECC codeword symbols e.g. identifying the column s from which the unavailable ECC codeword symbols were read and or reconstructing the unavailable ECC codeword symbols as disclosed herein.

Step may comprise determining whether any of the columns of the array e.g. solid state storage elements A Y and or portions thereof should be taken OOS. As disclosed herein a solid state storage element A Y may be taken OOS for any number of reasons including but not limited to excessive wear error rate read and or program failures or the like. Step may comprise identifying solid state storage elements A Y associated with ECC codeword symbols that were unavailable if any . As disclosed herein each ECC codeword symbol may be associated with a respective column solid state storage element A Y as such the identification of step may be determined directly and without further parity comparisons e.g. as in the case of ECC codewords distributed across multiple solid state storage elements .

Columns comprising unavailable ECC codeword symbols may be selected as candidates for retirement. In some embodiments a section of a solid state storage element A Y may be taken OOS in response to identifying more than a threshold number of unavailable ECC codeword symbols in response to identifying more than a threshold number of correctable errors in response to reaching a threshold wear level or the like. The threshold s of step may be selected according to testing and experience. If one or more solid state storage elements A Y are identified at step the flow continues to step otherwise the flow continues at step .

Step may comprise indicating that a column and or portion thereof is OOS retired . Step may comprise updating storage metadata e.g. OOS metadata to identify the portions of the array that are retired. Step may further comprise identifying storage resources to replace the OOS section s configuring the adaptive write module to stream padding data to the OOS section s configuring the adaptive read module to strip data corresponding to the OOS section s and so on.

Alternatively in some embodiments the identified section s may remain in service and step may comprise modifying the ECC configuration of the adaptive storage module to accommodate increased error rates. The modification may comprise configuring an ECC write module and or ECC read module to generate larger ECC codewords comprising a larger ratio and or percentage of ECC information to data.

The above description provides numerous specific details for a thorough understanding of the embodiments described herein. However those of skill in the art will recognize that one or more of the specific details may be omitted or other methods components or materials may be used. In some cases operations are not shown or described in detail.

Furthermore the described features operations or characteristics may be combined in any suitable manner in one or more embodiments. It will also be readily understood that the order of the steps or actions of the methods described in connection with the embodiments disclosed may be changed as would be apparent to those skilled in the art. Thus any order in the drawings or Detailed Description is for illustrative purposes only and is not meant to imply a required order unless specified to require an order.

Embodiments may include various steps which may be embodied in machine executable instructions to be executed by a general purpose or special purpose computer or other electronic device . Alternatively the steps may be performed by hardware components that include specific logic for performing the steps or by a combination of hardware software and or firmware.

Embodiments may also be provided as a computer program product including a computer readable storage medium having stored instructions thereon that may be used to program a computer or other electronic device to perform processes described herein. The computer readable storage medium may include but is not limited to hard drives floppy diskettes optical disks CD ROMs DVD ROMs ROMs RAMs EPROMs EEPROMs magnetic or optical cards solid state memory devices or other types of media machine readable media suitable for storing electronic instructions.

As used herein a software module or component may include any type of computer instructions or computer executable code located within a memory device and or computer readable storage medium. A software module may for instance comprise one or more physical or logical blocks of computer instructions which may be organized as a routine program object component data structure etc. that perform one or more tasks or implement particular abstract data types.

In certain embodiments a particular software module may comprise disparate instructions stored in different locations of a memory device which together implement the described functionality of the module. Indeed a module may comprise a single instruction or many instructions and may be distributed over several different code segments among different programs and across several memory devices. Some embodiments may be practiced in a distributed computing environment where tasks are performed by a remote processing device linked through a communications network. In a distributed computing environment software modules may be located in local and or remote memory storage devices. In addition data being tied or rendered together in a database record may be resident in the same memory device or across several memory devices and may be linked together in fields of a record in a database across a network.

It will be understood by those having skill in the art that many changes may be made to the details of the above described embodiments without departing from the underlying principles of the disclosure.

