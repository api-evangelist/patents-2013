---

title: High performance real-time relational database system and methods for using same
abstract: A database system supporting persistent queries, comprising a client software application, a persistent query service, and a plurality of network-attached data sources. On receiving a request to create a persistent query from the client software application, the persistent query service: creates a query virtual table; parses the persistent query; creates a plurality of intermediate virtual tables; establishes listeners for the query virtual table; creates a plurality of data source virtual tables; causes the plurality of data source virtual tables to retrieve initial data from data sources; and propagates data via intermediate virtual tables to the persistent query virtual table. On detection of a data change in a data source, the associated data source virtual table causes the data change to propagate via intermediate virtual tables to the persistent query virtual table, and the client software application executes client code of at least one listener.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08631034&OS=08631034&RS=08631034
owner: Aria Solutions Inc.
number: 08631034
owner_city: Calgary
owner_country: CA
publication_date: 20130309
---
This application claims priority to U.S. provisional patent application Ser. No. 61 682 756 titled HIGH PERFORMANCE REAL TIME RELATIONAL DATABASE SYSTEM AND METHODS FOR USING SAME filed on Aug. 13 2012 the entire specification of which is incorporated hereby by reference.

The invention relates to the field of database management systems and particularly to the field of real time database systems supporting persistent queries using virtual table structures.

Business reporting or enterprise reporting is a fundamental part of identifying the capabilities and performance metrics within an organization to convert into knowledge to improve efficiency and overall performance of people systems and processes within the organization. To support better business decision making businesses rely on large amounts of information for example transactional log files interaction log files system configuration information human resource information customer transaction data path analytics etc. produced by management systems that provides managers with information about sales inventories and other data that would help in managing and improving the enterprise.

With the dramatic expansion of information technology and a desire for increased competitiveness in corporations there has been an enormous increase in the capture of large datasets representing every facet of business processing customer transactions and other data to understand and improve how the business functions often referred to as Big Data . As such computing power to produce unified reports for example those that join different views of the enterprise in one place has increased exponentially. This reporting process involves querying data sources with different logical models to produce a human readable report. For example in a customer service communication center environment a manager may query a human resources database an employee performance database a set of transactional logs and real time metrics to identify where resources may require improvement and further training. Furthermore a problem that exists in many cases is that large organizations still have data in legacy systems where moving to a more robust open systems architecture is cost prohibitive. In other organizations systems and data warehouses are developed as functional silos where every new system requires its own database and as a result data follows a different schema and is often copied from system to system. In other situations businesses have fundamentally different data sources that must remain separate for example a communication server system and a customer experience database . As a result businesses need to consolidate their disparate data while moving it from place to place from one or more sources and in different forms or formats. For example a financial institution might have information on a customer in several departments and each department might have that customer s information listed in a different format. The customer service department might list the customer by name whereas the accounting department might list the customer by number. In order to use the data to create a report from one or more data sources the data may need to be bundled and consolidated into a uniform arrangement and stored in a database or data warehouse that may be used as the data source for report creation. The function to consolidate the data is typically handled by an extract transform and load ETL procedure. Extracting is the process of reading data from one or more source database. Transform is the process of converting the extracted data from its previous form into the form it needs to be in so that it may be placed into a target database where transformation occurs by using rules or lookup tables or by combining the data with other data. Load is the process of writing the data into the target data warehouse. A user would then use a special purpose query language designed for managing data for example structured query language SQL known in the art to identify what data elements are required for a business report.

The problem with systems known in the art is that the ETL process takes time to extract transform and load the required data from the one or more data sources. The larger the dataset the longer the process may take. In some installations where large data sets are involved processing ETL may be extremely slow often taking hours or days. In these cases costs are increased the ability to provide reports in a real time or in a timely manner is often not possible. Furthermore reports may be inaccurate as data from the system has not yet been written. For example in a contact center environment it is desired to measure performance in 15 minute time increments in order to react to sudden increases or decreases in interaction traffic. Since a contact center is typically made up of many data sources for example agent information customer profile information transaction information historical contact information etc. from multiple data sources for example private branch exchange PBX transaction information routing information configuration service information etc. the reports are typically not available after the 15 minute interval and perhaps not available for many hours afterwards thus rendering the real time report inaccurate or unusable.

To remedy this situation various techniques have been tried in the art for example a total in memory database but for a large application such as in a high data throughput environment for example a large contact center or financial institution the amount of memory that is required is massive where even modern systems cannot feasibly accommodate the memory requirements and thus become cost ineffective.

What is needed is a highly responsive system and methods for providing a real time database capable of handling persistent queries that are very responsive to data updates and that support persistent and readily updates aggregations of data so that analysis and reporting systems may report in smaller time increments for example 15 minute intervals while allowing for reports to become available very soon if not immediately when a report is requested without a huge infrastructure.

Accordingly the inventor has conceived and reduced to practice in a preferred embodiment of the invention a real time database system that supports persistent queries and various methods for using the same.

According to a preferred embodiment of the invention a database system supporting persistent queries is disclosed comprising a client software application operating on a computer comprising at least a listener comprising client code to be executed when the listener is invoked a persistent query service stored and operating on a network attached server computer or locally on a client computer and adapted to receive connections and requests from the client software application and a plurality of network attached data sources. On receiving a request to create a persistent query from the client software application the persistent query service creates a query virtual table corresponding to the persistent query parses the persistent query to create a tree structure representing a logical arrangement of a plurality of operators that yield results required by the persistent query creates a plurality of intermediate virtual tables corresponding to the plurality of operators wherein the step of creating an intermediate virtual table further comprises establishing listeners associated with the intermediate virtual table to receive data change notifications establishes listeners for the query virtual table to receive data change notifications from a plurality of intermediate virtual tables creates a plurality of data source virtual tables each corresponding to a specific data source required to fulfill the persistent query causes the plurality of data source virtual tables to retrieve initial data from the plurality of data sources and propagates data via the plurality of intermediate virtual tables and their associated listeners to the persistent query virtual table. On detection of a data change in a data source the associated data source virtual table invokes a plurality of corresponding methods of listeners of a plurality of virtual intermediate tables and propagates the data change via the plurality of intermediate virtual tables and their associated listeners to the persistent query virtual table and the client software application executes the client code of at least one affected listener.

According to another preferred embodiment of the invention a method for providing persistent database queries is provided the method comprising the steps of a creating via a software application executing on a computer a persistent query wherein the step of creating the persistent query further comprises establishing listeners with client code to receive notifications from the persistent query b creating a query virtual table corresponding to the persistent query c parsing the persistent query to create a tree structure representing a logical arrangement of a plurality of operators that yield results required by the persistent query d creating a plurality of intermediate virtual tables corresponding to the plurality of operators wherein the step of creating an intermediate virtual table further comprises establishing listeners associated with the intermediate virtual table to receive data change notifications e establishing listeners for the query virtual table to receive data change notifications from a plurality of intermediate virtual tables f creating a plurality of data source virtual tables each corresponding to a specific data source required to fulfill the persistent query g retrieving by the plurality of data source virtual tables initial data from the plurality of data sources h invoking by the plurality of data source virtual tables row added methods of a plurality of intermediate virtual tables i propagating data via the plurality of intermediate virtual tables and their associated listeners to the persistent query virtual table j on detection of a data change in a data source invoking by the associated data source virtual table of corresponding methods of listeners of a plurality of virtual intermediate tables k propagating the data change via the plurality of intermediate virtual tables and their associated listeners to the persistent query virtual table and 1 executing the client code of each affected listener in the query virtual table.

The inventor has conceived and reduced to practice a real time database system that supports persistent queries and various methods for using the same.

One or more different inventions may be described in the present application. Further for one or more of the inventions described herein numerous alternative embodiments may be described it should be understood that these are presented for illustrative purposes only. The described embodiments are not intended to be limiting in any sense. One or more of the inventions may be widely applicable to numerous embodiments as is readily apparent from the disclosure. In general embodiments are described in sufficient detail to enable those skilled in the art to practice one or more of the inventions and it is to be understood that other embodiments may be utilized and that structural logical software electrical and other changes may be made without departing from the scope of the particular inventions. Accordingly those skilled in the art will recognize that one or more of the inventions may be practiced with various modifications and alterations. Particular features of one or more of the inventions may be described with reference to one or more particular embodiments or figures that form a part of the present disclosure and in which are shown by way of illustration specific embodiments of one or more of the inventions. It should be understood however that such features are not limited to usage in the one or more particular embodiments or figures with reference to which they are described. The present disclosure is neither a literal description of all embodiments of one or more of the inventions nor a listing of features of one or more of the inventions that must be present in all embodiments.

Headings of sections provided in this patent application and the title of this patent application are for convenience only and are not to be taken as limiting the disclosure in any way.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries logical or physical.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. To the contrary a variety of optional components may be described to illustrate a wide variety of possible embodiments of one or more of the inventions and in order to more fully illustrate one or more aspects of the inventions. Similarly although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may generally be configured to work in alternate orders unless specifically stated to the contrary. In other words any sequence or order of steps that may be described in this patent application does not in and of itself indicate a requirement that the steps be performed in that order. The steps of described processes may be performed in any order practical. Further some steps may be performed simultaneously despite being described or implied as occurring non simultaneously e.g. because one step is described after the other step . Moreover the illustration of a process by its depiction in a drawing does not imply that the illustrated process is exclusive of other variations and modifications thereto does not imply that the illustrated process or any of its steps are necessary to one or more of the invention s and does not imply that the illustrated process is preferred. Also steps are generally described once per embodiment but this does not mean they must occur once or that they may only occur once each time a process method or algorithm is carried out or executed. Some steps may be omitted in some embodiments or some occurrences or some steps may be executed more than once in a given embodiment or occurrence.

When a single device or article is described it will be readily apparent that more than one device or article may be used in place of a single device or article. Similarly where more than one device or article is described it will be readily apparent that a single device or article may be used in place of the more than one device or article.

The functionality or the features of a device may be alternatively embodied by one or more other devices that are not explicitly described as having such functionality or features. Thus other embodiments of one or more of the inventions need not include the device itself.

Techniques and mechanisms described or referenced herein will sometimes be described in singular form for clarity. However it should be noted that particular embodiments include multiple iterations of a technique or multiple instantiations of a mechanism unless noted otherwise. Process descriptions or blocks in figures should be understood as representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of embodiments of the present invention in which for example functions may be executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those having ordinary skill in the art.

A persistent query as used herein is a query against one or more data sources such as relational or non relational database systems spreadsheets real time event sources flat data files and the like which is maintained in an active state upon its creation until it is explicitly destroyed by the application that created it. Persistent queries according to the invention are incrementally updated each time one or more changes to an underlying data source occurs that affects at least one data element used by the persistent query. Thus applications even those other than the application that created a persistent query may use the data within a persistent query s result set at any time without re executing the query as is commonly done in the art while being assured that the data is current as of the most recent incremental changes to the underlying data sources. Thus a typical use case of persistent queries is to support effectively real time queries even in large systems that change automatically and substantially immediately in response to changes in one or more underlying data elements without a user s or an application s having to re run the query in its entirety.

 Extract Transform and Load ETL as used herein refers to a process that migrates data from one database to another while typically to form datamarts or data warehouses o to convert databases from one format or type to another. The ETL function is made up of three steps. Extraction is the process of reading extracting data from a source database. Transformation is the process of converting the extracted data from its initial form into a form it needs to be in so that it may be placed into another database. Transformation occurs by using rules or lookup tables or by combining the data with other data. Loading is a process of writing the data into the target database.

 Structured query language SQL as used herein refers to a special purpose programming language designed for loading changing deleting querying and otherwise managing data in relational database management systems. It should be understood by one having ordinary skill in the art that SQL is one of many data querying language or protocols known in the art any of which may be used with persistent queries as described herein without departing from the scope of the invention.

As used herein a virtual table is an in memory data table that is created and maintained as part of a persistent query but that is not resident or included in any underlying data source such as a relational database system . Some virtual tables according to the invention will actually store data in memory and thus consume memory where as others do not store data but simply act on data received from its data sources and send the results to other virtual tables that are configured as recipients of the virtual table s data that is for some virtual tables data simply passes through and is acted on as it does so while in other virtual tables data is actually stored persistently typically the virtual table from which a user of a persistent query obtains results is of the latter type .

Generally the techniques disclosed herein may be implemented on hardware or a combination of software and hardware. For example they may be implemented in an operating system kernel in a separate user process in a library package bound into network applications on a specially constructed machine on an application specific integrated circuit ASIC or on a network interface card.

Software hardware hybrid implementations of at least some of the embodiments disclosed herein may be implemented on a programmable network resident machine which should be understood to include intermittently connected network aware machines selectively activated or reconfigured by a computer program stored in memory. Such network devices may have multiple network interfaces that may be configured or designed to utilize different types of network communication protocols. A general architecture for some of these machines may be disclosed herein in order to illustrate one or more exemplary means by which a given unit of functionality may be implemented. According to specific embodiments at least some of the features or functionalities of the various embodiments disclosed herein may be implemented on one or more general purpose computers associated with one or more networks such as for example an end user computer system a client computer a network server or other server system a mobile computing device e.g. tablet computing device mobile phone smartphone laptop and the like a consumer electronic device a music player or any other suitable electronic device router switch or the like or any combination thereof. In at least some embodiments at least some of the features or functionalities of the various embodiments disclosed herein may be implemented in one or more virtualized computing environments e.g. network computing clouds virtual machines hosted on one or more physical computing machines or the like .

Referring now to there is shown a block diagram depicting an exemplary computing device suitable for implementing at least a portion of the features or functionalities disclosed herein. Computing device may be for example any one of the computing machines listed in the previous paragraph or indeed any other electronic device capable of executing software or hardware based instructions according to one or more programs stored in memory. Computing device may be adapted to communicate with a plurality of other computing devices such as clients or servers over communications networks such as a wide area network a metropolitan area network a local area network a wireless network the Internet or any other network using known protocols for such communication whether wireless or wired.

In one embodiment computing device includes one or more central processing units CPU one or more interfaces and one or more busses such as a peripheral component interconnect PCI bus . When acting under the control of appropriate software or firmware CPU may be responsible for implementing specific functions associated with the functions of a specifically configured computing device or machine. For example in at least one embodiment a computing device may be configured or designed to function as a server system utilizing CPU local memory and or remote memory and interface s . In at least one embodiment CPU may be caused to perform one or more of the different types of functions and or operations under the control of software modules or components which for example may include an operating system and any appropriate applications software drivers and the like.

CPU may include one or more processors such as for example a processor from one of the Intel ARM Qualcomm and AMD families of microprocessors. In some embodiments processors may include specially designed hardware such as application specific integrated circuits ASICs electrically erasable programmable read only memories EEPROMs field programmable gate arrays FPGAs and so forth for controlling operations of computing device . In a specific embodiment a local memory such as non volatile random access memory RAM and or read only memory ROM including for example one or more levels of cached memory may also form part of CPU . However there are many different ways in which memory may be coupled to system . Memory may be used for a variety of purposes such as for example caching and or storing data programming instructions and the like.

As used herein the term processor is not limited merely to those integrated circuits referred to in the art as a processor a mobile processor or a microprocessor but broadly refers to a microcontroller a microcomputer a programmable logic controller an application specific integrated circuit and any other programmable circuit.

In one embodiment interfaces are provided as network interface cards NICs . Generally NICs control the sending and receiving of data packets over a computer network other types of interfaces may for example support other peripherals used with computing device . Among the interfaces that may be provided are Ethernet interfaces frame relay interfaces cable interfaces DSL interfaces token ring interfaces graphics interfaces and the like. In addition various types of interfaces may be provided such as for example universal serial bus USB Serial Ethernet Firewire PCI parallel radio frequency RF Bluetooth near field communications e.g. using near field magnetics 802.11 WiFi frame relay TCP IP ISDN fast Ethernet interfaces Gigabit Ethernet interfaces asynchronous transfer mode ATM interfaces high speed serial interface HSSI interfaces Point of Sale POS interfaces fiber data distributed interfaces FDDIs and the like. Generally such interfaces may include ports appropriate for communication with appropriate media. In some cases they may also include an independent processor and in some in stances volatile and or non volatile memory e.g. RAM .

Although the system shown in illustrates one specific architecture for a computing device for implementing one or more of the inventions described herein it is by no means the only device architecture on which at least a portion of the features and techniques described herein may be implemented. For example architectures having one or any number of processors may be used and such processors may be present in a single device or distributed among any number of devices. In one embodiment a single processor handles communications as well as routing computations while in other embodiments a separate dedicated communications processor may be provided. In various embodiments different types of features or functionalities may be implemented in a system according to the invention that includes a client device such as a tablet device or smartphone running client software and server systems such as a server system described in more detail below .

Regardless of network device configuration the system of the present invention may employ one or more memories or memory modules such as for example remote memory block and local memory configured to store data program instructions for the general purpose network operations or other information relating to the functionality of the embodiments described herein or any combinations of the above . Program instructions may control execution of or comprise an operating system and or one or more applications for example. Memory or memories may also be configured to store data structures configuration data encryption data historical system operations information or any other specific or generic non program information described herein.

Because such information and program instructions may be employed to implement one or more systems or methods described herein at least some network device embodiments may include nontransitory machine readable storage media which for example may be configured or designed to store program instructions state information and the like for performing various operations described herein. Examples of such nontransitory machine readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media such as optical disks and hardware devices that are specially configured to store and perform program instructions such as read only memory devices ROM flash memory solid state drives memristor memory random access memory RAM and the like. Examples of program instructions include both object code such as may be produced by a compiler machine code such as may be produced by an assembler or a linker byte code such as may be generated by for example a Java compiler and may be executed using a Java virtual machine or equivalent or files containing higher level code that may be executed by the computer using an interpreter for example scripts written in Python Perl Ruby Groovy or any other scripting language .

In some embodiments systems according to the present invention may be implemented on a standalone computing system. Referring now to there is shown a block diagram depicting a typical exemplary architecture of one or more embodiments or components thereof on a standalone computing system. Computing device includes processors that may run software that carry out one or more functions or applications of embodiments of the invention such as for example a client application . Processors may carry out computing instructions under control of an operating system such as for example a version of Microsoft s Windows operating system Apple s Mac OS X or iOS operating systems some variety of the Linux operating system Google s Android operating system or the like. In many cases one or more shared services may be operable in system and may be useful for providing common services to client applications . Services may for example be Windows services user space common services in a Linux environment or any other type of common service architecture used with operating system . Input devices may be of any type suitable for receiving user input including for example a keyboard touchscreen microphone for example for voice input mouse touchpad trackball or any combination thereof. Output devices may be of any type suitable for providing output to one or more users whether remote or local to system and may include for example one or more screens for visual output speakers printers or any combination thereof. Memory may be random access memory having any structure and architecture known in the art for use by processors for example to run software. Storage devices may be any magnetic optical mechanical memristor or electrical storage device for storage of data in digital form. Examples of storage devices include flash memory magnetic hard drive CD ROM and or the like.

In some embodiments systems of the present invention may be implemented on a distributed computing network such as one having any number of clients and or servers. Referring now to there is shown a block diagram depicting an exemplary architecture for implementing at least a portion of a system according to an embodiment of the invention on a distributed computing network. According to the embodiment any number of clients may be provided. Each client may run software for implementing client side portions of the present invention clients may comprise a system such as that illustrated in . In addition any number of servers may be provided for handling requests received from one or more clients . Clients and servers may communicate with one another via one or more electronic networks which may be in various embodiments any of the Internet a wide area network a mobile telephony network a wireless network such as WiFi Wimax and so forth or a local area network or indeed any network topology known in the art the invention does not prefer any one network topology over any other . Networks may be implemented using any known network protocols including for example wired and or wireless protocols.

In addition in some embodiments servers may call external services when needed to obtain additional information or to refer to additional data concerning a particular call. Communications with external services may take place for example via one or more networks . In various embodiments external services may comprise web enabled services or functionality related to or installed on the hardware device itself. For example in an embodiment where client applications are implemented on a smartphone or other electronic device client applications may obtain information stored in a server system in the cloud or on an external service deployed on one or more of a particular enterprise s or user s premises.

In some embodiments of the invention clients or servers or both may make use of one or more specialized services or appliances that may be deployed locally or remotely across one or more networks . For example one or more databases may be used or referred to by one or more embodiments of the invention. It should be understood by one having ordinary skill in the art that databases may be arranged in a wide variety of architectures and using a wide variety of data access and manipulation means. For example in various embodiments one or more databases may comprise a relational database system using a structured query language SQL while others may comprise an alternative data storage technology such as those referred to in the art as NoSQL for example Hadoop Cassandra Google BigTable and so forth . In some embodiments variant database architectures such as column oriented databases in memory databases clustered databases distributed databases or even flat file data repositories may be used according to the invention. It will be appreciated by one having ordinary skill in the art that any combination of known or future database technologies may be used as appropriate unless a specific database technology or a specific arrangement of components is specified for a particular embodiment herein. Moreover it should be appreciated that the term database as used herein may refer to a physical database machine a cluster of machines acting as a single database system or a logical database within an overall database management system. Unless a specific meaning is specified for a given use of the term database it should be construed to mean any of these senses of the word all of which are understood as a plain meaning of the term database by those having ordinary skill in the art.

Similarly most embodiments of the invention may make use of one or more security systems and configuration systems . Security and configuration management are common information technology IT and web functions and some amount of each are generally associated with any IT or web systems. It should be understood by one having ordinary skill in the art that any configuration or security subsystems known in the art now or in the future may be used in conjunction with embodiments of the invention without limitation unless a specific security or configuration system or approach is specifically required by the description of any specific embodiment.

In various embodiments functionality for implementing systems or methods of the present invention may be distributed among any number of client and or server components. For example various software modules may be implemented for performing various functions in connection with the present invention and such modules may be variously implemented to run on server and or client components.

In another embodiment a proprietary or open source query language may be used for managing data linking aggregation projections filters macros compositional syntax establishing data types and functions and creating persistent queries in a persistent query system .

In some embodiments of the invention frequently reused virtual tables may be maintained even when all current persistent queries that use them have been deleted by the applications that created them in order to further improve system performance. In such embodiments when a new persistent query is created by an application any virtual tables required that have been maintained can be immediately used without running any queries against underlying data sources since the still maintained virtual tables will be populated by data that reflects that latest changes to any underlying data sources thus enabling rapid creation and execution of new persistent queries.

The skilled person will be aware of a range of possible modifications of the various embodiments described above. Accordingly the present invention is defined by the claims and their equivalents.

