---

title: Backend custom code extensibility
abstract: Techniques are described herein that are capable of providing backend custom code extensibility. Such extensibility allows custom code to be automatically loaded dynamically (e.g., on-demand) in a runtime that is hosted by a backend-as-a-service (BaaS) module while the runtime is running to provide custom backend features that are defined by the custom code to an application in response to receipt of a request from the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342333&OS=09342333&RS=09342333
owner: Microsoft Technology Licensing, LLC
number: 09342333
owner_city: Redmond
owner_country: US
publication_date: 20130314
---
Writing a secure scalable cloud backend for an application e.g. a mobile application is relatively difficult. For instance a developer typically performs a substantial amount of set up to get a web service application backend configured and running in the cloud. Consequently many companies recently have begun to provide Backend as a Service BaaS solutions in the cloud. Companies that offer BaaS solutions are referred to as BaaS providers. Such BaaS providers generally try to simplify development of applications by providing turnkey solutions for common needs such as analytics authentication authorization collaboration data processing persistent storage push notifications social networking user management etc. By using BaaS solutions developers may focus on developing their application logic rather than spending a substantial amount of time building the foundational backend for hosting their application logic.

However conventional BaaS solutions offered by BaaS providers are rather inflexible. For instance each BaaS solution traditionally provides a predetermined set of functionalities that cannot be modified by a developer. If a developer wishes to have a particular functionality that is not provided by a BaaS solution the developer typically may either forego the particular functionality or manually create his her own web service application backend which is capable of providing the particular functionality in lieu of using the BaaS solution.

Various approaches are described herein for among other things providing backend custom code extensibility. Such extensibility allows custom code to be automatically loaded dynamically in a runtime that is hosted by a BaaS module while the runtime is running to provide custom backend features that are defined by the custom code to an application in response to receipt of a request from the application.

An example method is described. In accordance with this method custom code is received for incorporation into a BaaS module that is configured to provide a backend service to a corresponding application. In response to receipt of a request from the corresponding application the custom code is automatically loaded dynamically in a runtime hosted by the BaaS module while the runtime is running to provide custom backend features that are defined by the custom code to the corresponding application.

An example system is described that includes an interface and auto load logic. The interface is configured to receive custom code for incorporation into a BaaS module that is configured to provide a backend service to a corresponding application. The auto load logic is configured to automatically load the custom code dynamically in a runtime hosted by the BaaS module while the runtime is running to provide custom backend features that are defined by the custom code to the corresponding application in response to receipt of a request from the corresponding application.

A computer program product is described that includes a computer readable medium having computer program logic recorded thereon for enabling a processor based system to providing backend custom code extensibility. The computer program product includes a program logic module for enabling the processor based system to automatically load custom code which is configured for incorporation into a BaaS module dynamically in a runtime hosted by the BaaS module while the runtime is running to provide custom backend features that are defined by the custom code to a corresponding application in response to receipt of a request from the corresponding application. The BaaS module is configured to provide a backend service to the corresponding application.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Moreover it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However the scope of the present invention is not limited to these embodiments but is instead defined by the appended claims. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present invention.

References in the specification to one embodiment an embodiment an example embodiment or the like indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the relevant art s to implement such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Example embodiments described herein are capable of providing backend custom code extensibility. Such extensibility allows custom code to be automatically loaded dynamically e.g. on demand in a runtime that is hosted by a BaaS module while the runtime is running to provide custom backend features that are defined by the custom code to an application in response to receipt of a request from the application.

Example techniques described herein have a variety of benefits as compared to conventional backend as a service BaaS techniques. For instance the example techniques may be capable of running custom code e.g. business logic within a BaaS module. The custom code may be run in the same process e.g. a runtime in the BaaS module that processes a request to execute the custom code. The runtime may be a web application for example. The example techniques may be capable of pushing the custom code to the runtime without necessitating that the runtime be re loaded. Accordingly the custom code may be inserted into the runtime without interfering with execution of the runtime. The custom code may be run in its native execution platform. For operations with an implicit default behavior the custom code may explicitly invoke a default operation. Moreover the example techniques may allow inputs of the default operation to be modified before execution of the operation and or outputs of the default operation to be modified after execution of the operation.

As shown in networked system includes a plurality of user systems A M a network a plurality of servers A N and an application developer system . Communication among user systems A M servers A N and application developer system is carried out over network using well known network communication protocols. Network may be a wide area network e.g. the Internet a local area network LAN another type of network or a combination thereof.

User systems A M are processing systems that are capable of communicating with servers A N. An example of a processing system is a system that includes at least one processor that is capable of manipulating data in accordance with a set of instructions. For instance a processing system may be a computer a personal digital assistant etc. User systems A M are configured to provide requests to servers A N for requesting information stored on or otherwise accessible via servers A N. For instance a user may initiate a request for executing a computer program e.g. an application using a client e.g. a Web browser Web crawler or other type of client deployed on a user system that is owned by or otherwise accessible to the user. In accordance with some example embodiments user systems A M are capable of accessing domains e.g. Web sites hosted by servers A N so that user systems A M may access information that is available via the domains. Such domain may include Web pages which may be provided as hypertext markup language HTML documents and objects e.g. files that are linked therein for example.

It will be recognized that any one or more user systems A M may communicate with any one or more servers A N. Although user systems A M are depicted as desktop computers in persons skilled in the relevant art s will appreciate that user systems A M may include any client enabled system or device including but not limited to a desktop computer a laptop computer a tablet computer a personal digital assistant a cellular telephone or the like.

Servers A N are processing systems that are capable of communicating with user systems A M. Servers A N are configured to execute computer programs that provide information to users in response to receiving requests from the users. For example the information may include documents e.g. Web pages images video files etc. output of executables or any other suitable type of information. In accordance with some example embodiments servers A N are configured to host respective Web sites so that the Web sites are accessible to users of networked system .

One example type of computer program that may be executed by one or more of servers A N is a developer tool. A developer tool is a computer program that performs diagnostic operations e.g. identifying source of problem debugging profiling controlling etc. with respect to program code. Examples of a developer tool include but are not limited to a web development platform e.g. Windows Azure Platform Amazon Web Services Google App Engine VMWare Force.com etc. and an integrated development environment e.g. Microsoft Visual Studio JDeveloper NetBeans Eclipse Platform etc. . It will be recognized that the example techniques described herein may be implemented using a developer tool.

First server s A is shown to include a custom code enabled backend as a service BaaS module for illustrative purposes. Custom code enabled BaaS module is configured to provide a backend service to an application. Custom code enabled BaaS module is further configured to accept custom code for incorporation into custom code enabled BaaS module . For instance custom code may be received at custom code enabled BaaS module from a software developer e.g. application developer system described below for incorporation into custom code enabled BaaS module . When a user system e.g. any of user systems A M runs the application the application may initiate a request for the backend service of custom code enabled BaaS module . Upon receipt of the request custom code enabled BaaS module may load the custom code dynamically in a runtime that is hosted by custom code enabled BaaS module to provide custom backend features that are defined by the custom code to the application e.g. in addition to non custom backend features inherent to custom code enabled BaaS module . In this manner the application running on the user system and the runtime which incorporates the custom code may collaboratively provide a rich user experience.

It will be recognized that custom code enabled BaaS module may be or may be included in a developer tool though the scope of the example embodiments is not limited in this respect. Example techniques for providing backend custom code extensibility are discussed in greater detail below with reference to .

Application developer system is a processing system that is capable of providing custom code to custom code enabled BaaS module . Application developer system includes processor s and store . Processor s are capable of developing application s and custom code in response to instructions from a software developer. Store is configured to store the application s the custom code and other suitable information. Such other information may include software development kits SDKs for example. An SDK provides functionality for an application a.k.a. a connected client to communicate with custom code enabled BaaS module . The SDK is tailored to each backend service and connects endpoints automatically without a software developer having to do additional work. Store may be any suitable type of store including but not limited to a database e.g. a relational database an entity relationship database an object database an object relational database an XML database etc. . One application developer system is shown in for purposes of illustration and is not intended to be limiting. It will be recognized that networked system may include any suitable number e.g. 1 2 3 etc. of application developer systems each capable of custom code to custom code enabled BaaS module .

Application developer system may provide the custom code to custom code enabled BaaS module via an interface such as a web portal and or command line tool s of custom code enabled BaaS module and or via direct code push to a runtime in custom code enabled BaaS module . The end result is that custom code enabled BaaS module is aware of the custom code and knows how to run the custom code at the right times.

Custom code enabled BaaS module may be implemented in various ways to provide backend custom code extensibility including being implemented in hardware software firmware or any combination thereof. For example custom code enabled BaaS module may be implemented as computer program code configured to be executed in one or more processors. In another example custom code enabled BaaS module may be implemented as hardware logic electrical circuitry. In an embodiment custom code enabled BaaS module may be implemented in a system on chip SoC . Each SoC may include an integrated circuit chip that includes one or more of a processor e.g. a microcontroller microprocessor digital signal processor DSP etc. memory one or more communication interfaces and or further circuits and or embedded firmware to perform its functions.

Custom code enabled BaaS module is shown to be incorporated in first server s A for illustrative purposes and is not intended to be limiting. It will be recognized that custom code enabled BaaS module may be distributed among the two or more of server s A N.

Resource provider is configured to provision runtimes to run within a cloud environment. For example resource provider provisions runtimes A C to run in websites . In accordance with this example resource provider may configure runtimes A C based on user preferences for handling backend features including but not limited to authentication user and device management push notifications scheduled tasks etc. In addition to configuring runtimes A C resource provider is capable of pushing custom code a.k.a. code snippets or scripts to runtimes A C. For instance custom code is shown in to have been pushed to runtime A by resource provider . The custom code may include one or more custom code extensions such as table script s cron script s application programming interface API script s shared script s etc.

Runtime A handles business logic specific to an application that corresponds to the custom code . For example client side aspects of the application may run on a user system e.g. any of user systems A M and server side aspects of the application including the custom code may run in runtime A. By enabling a software developer to directly add behavior to runtime A it is possible to hook in an open ended set of features that the software developer can leverage as part of the overall application.

Resource provider may be implemented as a Web API exposing a representational state transfer style REST style API which is accessible using a language such as JavaScript Object Notation JSON or extensible markup language XML though the scope of the example embodiments are not limited in this respect. Such a REST style API allows resource provider to be configured by a variety of clients ranging from a browser based portal like experience to command line utilities. The Web resources that resource provider exposes provide workflows for creating provisioning monitoring and tracking applications e.g. a Windows Azure Mobile Application . Resource provider maintains the state of each application in store .

Store is configured to store the state of each application. Store may be any suitable type of store. One type of store is a database. For example store may be a relational database an entity relationship database an object database an object relational database an extensible markup language XML database etc. In accordance with this example store may be a persistent database.

Custom code enabled BaaS module hosts websites in which runtimes A C run. Each of the runtimes A C is a dedicated service running the backend functionality of an application. Runtime A is shown to include a request pipeline custom code automatically loaded dynamically at runtime by resource provider third party module s e.g. node.js modules and service s . Request pipeline receives incoming requests from an application. Request pipeline handles such aspects as authentication push notification database access and data model definition. The aforementioned aspects are provided for illustrative purposes and are not intended to be limiting. It will be recognized that request pipeline may handle any suitable aspects of the backend functionality of custom code enabled BaaS module. The custom code is loaded and run at particular points referred to as extensibility points along request pipeline by runtime A. It should be noted that runtime A monitors the custom code while the custom code runs to ensure that the application remains responsive in case of a failure and or bug in the custom code . Error messages and status updates are logged along the request pipeline by resource provider in a way that the software developer can inspect. Within runtime A the custom code is capable of communicating with third party module s and service s e.g. build in service s .

Runtime A may be configured to expose any of a variety of endpoints which connected endpoints can access 

 login The login endpoint supports authentication of a user using a number of popular Internet Identity Providers.

 table The table endpoint exposes a structured persistent storage which connected applications can use for storing or accessing data that is part of the application.

 jobs The jobs endpoint exposes a scheduled task which can be run at a predetermined point in time or in a run now mode.

 api The api endpoint exposes software developer defined custom APIs . The software developer authors a custom code script which can expose one or more methods e.g. scores topScores etc. . The methods are then accessible at endpoints such as api scores api topScores etc.

For operations with an implicit default behavior the custom code may be capable of explicitly invoking a base default operation. For example data storage CREATE READ UPDATE DELETE CRUD logic operation code the default operation is to simply perform the storage operation. This allows rich pre operation scenarios in which the inputs of the operation are modified before the operation executes. It also allows post operation scenarios in which results of the operation are modified after performance of the operation.

As described above the custom code may run in the same process as the code processing the request i.e. in runtime A . This means that the custom code may be deeply integrated into the request pipeline without requiring expensive inter process communication or calls out to remote execution services.

Moreover the custom code may be capable of leveraging its native execution platform. For example for JavaScript code the execution platform is node.js and that fact is not hidden from the custom code . The custom code may require third party node.js modules and use them.

Accordingly the custom code is integrated into the request pipeline in a very natural way not much differently from how such a service would be hand crafted by a software developer if the software developer were not using a BaaS. This in process model provides the aforementioned deep integration benefits.

Taking the node.js JavaScript custom code platform as an example below are details on how the custom code is executed in the request pipeline . For custom code in other languages e.g. C the pattern would be the same an application runtime e.g. runtime A written on the native platform e.g. .NET calling out to the custom code . In this example runtime A is described as a node.js application which serves as the execution environment for the custom code . Runtime A may be run under IIS Node in Windows Azure as an Azure Web Site for example which provides a single tenant sandbox that isolates runtime A from runtimes B C. Accordingly are not capable of interfering with data within runtime A. For instance the single tenant sandbox may prevent runtimes B C from running on the same node as runtime A. The custom code may reside in runtime A as script file s under any suitable directory structure. A variety of such directory structures are well known in the relevant art s .

In accordance with the example above when runtime A starts up based on service configuration metadata specified by the software developer runtime A initializes the set of routes or HTTP endpoints to monitor for requests. For requests that involve custom code the custom code is loaded and run at the appropriate point in the request pipeline . Following is an example of how custom code is run. 1 The custom code may be loaded into runtime A as a node module. 2 The custom code may export a function that implements an operation. 3 Runtime A may call this function and pass parameter s into the function. 4 A request parameter that is passed into the function enables the custom code to respond to or reject the request. 5 A context parameter is also available to the custom code providing access to a variety of other services such as services . After the custom code has finished its asynchronous execution the response that is provided by the custom code is returned to the external client e.g. any of user systems A M in .

Following is an example script for an insert operation demonstrating a few of the capabilities described above 

The script above uses a node.js export to surface the custom code to the runtime for illustrative purposes and is not intended to be limiting. The script performs a pre operation before the underlying operation by adding an additional query predicate. The script also calls request.execute to invoke the default query operation.

Following is another example script which demonstrates a few more of the capabilities described above. This example is a cron script which is a script that is run on a user defined e.g. developer defined periodic interval. The script periodically loads the latest news headlines and pushes the news headlines to registered users.

The script above utilizes a third party push notification module pusher to send push notifications. This demonstrates the benefits of running script in a native execution environment an ecosystem of modules e.g. libraries is available for use to the custom code.

It will be recognized that custom code enabled BaaS module may not include one or more of the components shown in . For instance custom code enabled BaaS module may not include any one or more of interface store websites third party module s and or service s . Furthermore custom code enabled BaaS module may include component s in addition to or in lieu of those shown in .

As shown in the method of flowchart begins at step . In step a website a database and a uniform resource identifier URI are provisioned. A runtime may run in the website. The URI may be a uniform resource name URN or a uniform resource locator URL for example. In an example implementation provisioning logic provisions a website a database and a URI . In accordance with this implementation provisioning logic provisions runtime to run in the website . Runtime is isolated from other runtimes in custom code enabled BaaS module such that the other runtimes do not have access to the custom code and do not have access to data on which the custom code operates.

At step custom code is received for incorporation into a backend as a service module that is configured to provide a backend service to a corresponding application. The custom code may be received from a user such as a software developer for example. In an example implementation auto load logic receives custom code for incorporation into runtime of custom code enabled BaaS module . For example provisioning logic may receive the custom code and forward the custom code to auto load logic for further processing. In another example auto load logic may receive the custom code directly from the software developer e.g. via a push operation .

At step a request from the corresponding application is received. In an example implementation auto load logic receives load request from the corresponding application.

At step the custom code is automatically loaded dynamically in a runtime hosted by the backend as a service module while the runtime is running to provide custom backend features that are defined by the custom code to the corresponding application. For example the runtime may be a native runtime of the custom code. In another example the runtime may be implemented as a Web application. In an example implementation auto load logic automatically loads the custom code dynamically in runtime which is hosted by custom code enabled BaaS module while the runtime is running.

In an example embodiment the custom code is operable e.g. configured to access third party code modules that are external to the custom code. In another example embodiment the custom code is operable to explicitly invoke a default operation and to modify one or more inputs of the default operation before the default operation is performed. In yet another example embodiment the custom code is operable to explicitly invoke a default operation and to modify one or more outputs of the default operation by the custom code after the default operation is performed. In still another example embodiment the custom code is operable to call into the runtime to use one or more services that are provided by the runtime. Such services may include but are not limited to push notifications for push platforms database operations etc.

At step a URI request that identifies the uniform resource identifier is received at the back end as a service module. In an example implementation execution logic receives a URI request which identifies the URI .

At step the custom code is executed. In an example implementation execution logic executes the custom code .

It will be recognized by persons skilled in the relevant art s that any one or more of the steps described above may be performed automatically. In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed.

It will be recognized that custom code enabled BaaS module may not include all of the components shown in . For instance custom code enabled BaaS module may not include one or more of resource provider provisioning logic auto load logic and or execution logic . Furthermore custom code enabled BaaS module may include components in addition to or in lieu of resource provider runtime provisioning logic auto load logic and or execution logic .

Any one or more of user systems A M any one or more of servers A N application developer system custom code enabled BaaS module interface resource provider runtimes A C request pipeline third party module s service s resource provider runtime provisioning logic auto load logic execution logic and or flowchart may be implemented in hardware software firmware or any combination thereof.

For example any one or more of user systems A M any one or more of servers A N application developer system custom code enabled BaaS module interface resource provider runtimes A C request pipeline third party module s service s auto load logic resource provider runtime provisioning logic auto load logic execution logic and or flowchart may be implemented as computer program code configured to be executed in one or more processors.

In another example any one or more of user systems A M any one or more of servers A N application developer system custom code enabled BaaS module interface resource provider runtimes A C request pipeline third party module s service s resource provider runtime provisioning logic auto load logic execution logic and or flowchart may be implemented as hardware logic electrical circuitry.

For instance in an embodiment one or more of user systems A M one or more of servers A N application developer system custom code enabled BaaS module interface resource provider runtimes A C request pipeline third party module s service s resource provider runtime provisioning logic auto load logic execution logic and or flowchart may be implemented in a system on chip SoC . The SoC may include an integrated circuit chip that includes one or more of a processor e.g. a microcontroller microprocessor digital signal processor DSP etc. memory one or more communication interfaces and or further circuits and or embedded firmware to perform its functions.

As shown in computer includes a processing unit a system memory and a bus that couples various system components including system memory to processing unit . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. System memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in ROM .

Computer also has one or more of the following drives a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD ROM or other optical media. Hard disk drive magnetic disk drive and optical disk drive are connected to bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable storage media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer. Although a hard disk a removable magnetic disk and a removable optical disk are described other types of computer readable storage media can be used to store data such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. These programs include an operating system one or more application programs other program modules and program data . Application programs or program modules may include for example computer program logic for implementing any one or more of custom code enabled BaaS module interface resource provider runtimes A C request pipeline third party module s service s resource provider runtime provisioning logic auto load logic execution logic and or flowchart including any step of flowchart as described herein.

A user may enter commands and information into the computer through input devices such as keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner touch screen camera accelerometer gyroscope or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB .

A display device e.g. a monitor is also connected to bus via an interface such as a video adapter . In addition to display device computer may include other peripheral output devices not shown such as speakers and printers.

Computer is connected to a network e.g. the Internet through a network interface or adapter a modem or other means for establishing communications over the network. Modem which may be internal or external is connected to bus via serial port interface .

As used herein the terms computer program medium computer readable medium and computer readable storage medium are used to generally refer to media such as the hard disk associated with hard disk drive removable magnetic disk removable optical disk as well as other media such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like. Such computer readable storage media are distinguished from and non overlapping with communication media do not include communication media . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wireless media such as acoustic RF infrared and other wireless media. Example embodiments are also directed to such communication media.

As noted above computer programs and modules including application programs and other program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. Such computer programs may also be received via network interface or serial port interface . Such computer programs when executed or loaded by an application enable computer to implement features of embodiments discussed herein. Accordingly such computer programs represent controllers of the computer .

Example embodiments are also directed to computer program products comprising software e.g. computer readable instructions stored on any computer useable medium. Such software when executed in one or more data processing devices causes a data processing device s to operate as described herein. Embodiments may employ any computer useable or computer readable medium known now or in the future. Examples of computer readable mediums include but are not limited to storage devices such as RAM hard drives floppy disks CD ROMs DVD ROMs zip disks tapes magnetic storage devices optical storage devices MEMS based storage devices nanotechnology based storage devices and the like.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described example embodiments but should be defined only in accordance with the following claims and their equivalents.

