---

title: Smart polling frequency
abstract: For smart polling frequency in datastores by a processor device in a computing environment, individual polling operations are performed for refreshing each one of the datastores according to polling frequencies. Each one of the polling frequencies depends on recent system activity and each one of the datastores. Each of the polling frequencies are dynamically adjusted for each one of the datastores.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09514162&OS=09514162&RS=09514162
owner: INTERNATION BUSINESS MACHINES CORPORATION
number: 09514162
owner_city: Armonk
owner_country: US
publication_date: 20130607
---
The present invention relates in general to computers and more particularly to smart polling frequency in datastores in a computing environment.

In today s society computer systems are commonplace. Computer systems may be found in the workplace at home or at school. Computer systems may include data storage systems or disk storage systems to process and store data. In recent years both software and hardware technologies have experienced amazing advancement.

With the advancement of these technologies many computing systems utilize user interfaces of computing devices to display data. To obtain this data for display for example the data must be gathered from the computing system. To improve overall efficiency and lessen resource use among other benefits there is a continuing need to gather data on a more efficient basis from the computing systems.

In one embodiment a method is provided for smart polling frequency in datastores by a processor device in a computing environment. In one embodiment by way of example only individual polling operations are performed for refreshing each one of the datastores according to polling frequencies. Each one of the polling frequencies depends on recent system activity and each one of the datastores. Each of the polling frequencies are dynamically adjusted for each one of the datastores.

In another embodiment a computer system is provided for smart polling frequency in datastores by a processor device in a computing environment. The computer system includes a computer readable medium and a processor in operable communication with the computer readable medium. The processor performs individual polling operations for refreshing each one of the datastores according to polling frequencies. Each one of the polling frequencies depends on recent system activity and each one of the datastores. Each of the polling frequencies are dynamically adjusted for each one of the datastores.

In a further embodiment a computer program product is provided for smart polling frequency in datastores by a processor device in a computing environment. The computer readable storage medium has computer readable program code portions stored thereon. The computer readable program code portions include a first executable portions that performs individual polling operations for refreshing each one of the datastores according to polling frequencies. Each one of the polling frequencies depends on recent system activity and each one of the datastores. Each of the polling frequencies are dynamically adjusted for each one of the datastores.

In addition to the foregoing exemplary method embodiment other exemplary system and computer product embodiments are provided and supply related advantages. The foregoing summary has been provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

In one embodiment as described herein polling is a communications technique that determines when a terminal e.g. a server in a computing system is ready to send new changed and or altered data. For example a computer may continually interrogate its connected terminals in a round robin sequence. If a terminal has data to send it sends back an acknowledgment and the transmission of the new changed and or altered data begins. In one embodiment polling is a technique that continually interrogates a peripheral device e.g. a server in a computing system to see if it has data to transfer. Client computing devices may routinely poll server computing devices to download and or retrieve data from the computing server devices. For example a given client periodically polls a server to determine if there is new data to download. If there is new changed and or altered data then the client downloads the new and or altered data from the server.

Currently polling operations face several challenges. First detecting immediate changes to data is currently a challenge for a polling operation. For example the time it takes to detect a change in the data is between 0 and the polling interval and is unpredictable to the user. If a change is made prior to the polling interval the user is aware of the new and or changed data until the polling operation is performed. Second a current challenge polling operations experience is avoiding an increase of computing resource loads on a server especially when more than one simultaneous polling operations request an entire dataset from the server which can require a database query or the like e.g. such is the case in OpenStack which is an Infrastructure as a Service IaaS cloud computing project that is a free open source software . Third polling operations increase network traffic. Finally amongst other possible challenges polling operations may have scalability problems as the amount of data in each poll increases. For example the browser can spend too much time processing each poll thus slowing down the UI. As another example if a significant number of users login at the same time the load on the server increases. Nevertheless polling is required in many situations. For example consider some applications such as PowerVC which is based on OpenStack where the browser UI must poll the server to retrieve updates. Each poll returns the entire dataset for a given type of resource thereby causing usability and scalability problems.

Thus to address these problems the present invention provides a solution for smart polling frequency in datastores by a processor device in a computing environment. In one embodiment by way of example only individual polling operations are performed for refreshing each one of the datastores according to polling frequencies. In one embodiment a datastore is a browser side collection of data. A datastore has the following characteristics 1 a collection of data refreshed from the server 2 reflects backs data that is shown on the client and 3 represents a specific type of resource that s being displayed e.g. displayed in a browser . As described herein each one of the polling frequencies depends on recent system activity and or on each one of the datastores. Each of the polling frequencies are dynamically adjusted for each one of the datastores.

In one embodiment the datastores reside in a browser. Each datastore contributes data to the web page. A summary of the store s data may always be displayed on the page and or a detailed view of the store s data may also be made available for display e.g. on demand . All data is kept up to date via polling the server. However the polling interval e.g. polling frequency may be different for each datastore and varies as a result of user and system activity. In one embodiment the polling frequency is increased for datastores where the data is inherently more volatile. In one embodiment the polling frequency is increased while a detailed view of that store s data is visible. The polling is temporarily more frequent following a user action that may cause changes to the datastore s data. After the expected changes to the data the polling returns to the less frequent polling interval. In one embodiment the polling frequency decreases for one or more data stores when the amount of data in the datastores begin to cause scalability problems e.g. the polling is taking too long for the browser to process each poll thereby bogging down the server etc. . The polling operation may even stop on a datastore when the datastore cannot change due to environmental factors e.g. for example there is no need to poll volumes and virtual machines VMs when a storage system is not registered . In one embodiment the polling frequency decreases on empty datastores since there are no resources in the store with properties that may frequently change. There are more potential triggers to change the polling frequency. The polling frequency may also be dynamically adjusted for each individual datastores based on predefined factors user preferences time periods predefined polling frequency thresholds e.g. minimum threshold values and or maximum threshold values which indicate one of the polling frequencies is slowing down and or speeding up and the like.

Turning now to exemplary architecture of data storage systems in a computing environment is depicted. The computer system includes central processing unit CPU which is connected to mass storage device s and memory device . Mass storage devices can include hard disk drive HDD devices solid state devices SSD etc. which can be configured in a redundant array of independent disks RAID . The backup operations further described can be executed on device s located in system or elsewhere. Memory device can include such memory as electrically erasable programmable read only memory EEPROM or a host of related devices. Memory device and mass storage device are connected to CPU via a signal bearing medium. In addition CPU is connected through communication port to a communication network having an attached plurality of additional computer systems and . The computer system may include one or more processor devices e.g. CPU and additional memory devices for each individual component of the computer system .

As mentioned the polling is used to keep each type of resource up to date. Other data on the home screen A such as the VMs and processors gauges shown on the center screen as a bar chart showing the number of processors being used and reserved for example are based on the same resource datastores and are dependent on polling.

In one embodiment the server will push events to the browser so polling may not be necessary. Moreover the events will indicate what changes occurred instead of sending the entire dataset to be refreshed by the browser . In one embodiment these improvements require more advanced application programming interfaces APIs on the server which are not challenging to create. However many other server client applications are limited to rest APIs that are not designed for UIs and scalability and hence polling is necessary. For example polling is required in all OpenStack based products and in other application as well. Thus as described herein the present invention provides a solution to poll for multiple types of resources which mitigates the problems with polling listed above.

After performing the functions described above in by clicking on the Add Host button in the dialog box the add host feature will then dismiss the dialog box and move to the underlying screen as described in . is a block diagram illustrating a user interface displaying types of resources for dynamically increasing polling frequencies for smart polling frequency in datastores where the host is polled frequently because a new host is expected in a computer system in which aspects of the present invention may be realized. In a screenshot of a browser is provided e.g. a browser in the PowerVC application and the datastores illustrated has blown up boxes A E representing the type of resources show each type of resource on the browser screen. Each resource icon fronts a datastore e.g. showing current usage of 120 users of the images A 60 processors of the VMs B 2 disks of hosts C and 120 volumes of volume datastore D and datastore networks E . Clicking on the resource icon C shows a full screen view of the host resource and the represented datastore C. In one embodiment the icon bar illustrated with icons A E on the left represents types of resources the browser manages e.g. images VMs hosts and volumes displayed for illustration purposes and other types of resources are shown on the home screen e.g. the home screen A is the active resource that the user is focusing by the user previously selecting the home screen A icon . The number under each icon resource shows the number of that type of resource e.g. 1 2 or 3 and the like . As illustrated in the present invention dynamically increases polling frequencies in datastores because a new host is expected. Since a new host is expected soon in one embodiment by way of example only the new host may appear in 1 second or 20 seconds. So the Hosts datastore C begins polling every 2 seconds so that as soon as the new host appears it can update the table. For example having the polling frequencies set at a default value e.g. poll frequency occurs at every 20 seconds the polling frequencies may be increased to poll every 2 seconds. In other words the polling frequencies may be increased in relationship to the default values.

However now a new host is expected soon as described in . In one embodiment by way of example only the new host may appear in 1 second or 20 seconds. So the Hosts datastore C begins polling every 2 seconds so that as soon as the new host appears it can update the table. When the host is added to the table the Hosts datastore C will go back to polling every 30 seconds. It should be noted that there are many situations where similar logic can temporarily reduce and or elevate polling intervals. For example after registering a host and or a volume and or other resources the polling for the respective datastore may speed up because users often add several of these resources at a time. After a few minutes of no new registrations the polling frequencies would slow back down to normal e.g. a default polling frequency and or a predefined polling frequency . In one embodiment when a VM is starting and or stopping the polling level should be temporarily elevated until the VM is started or stopped. In one embodiment the present invention manages polling intervals as a constrained resource. In one embodiment all the datastores are constrained from polling too frequently otherwise the browser will hang e.g. stall and or delay because it will continually be processing data from the server. This would impact the server s performance and cause too much network traffic. These problems become more likely as the number of resources images VMs hosts and or volumes increases. In this case longer polling intervals must be used. Thus in one embodiment the present invention dynamically and automatically reduces polling frequencies when collisions and delays begin to occur and or when the server signals that the polls are taking more resources than it can currently afford. It should be noted that in one embodiment a collision and or be an update overlap occurs when new data is available before the client has finished processing the previous update. Thus the two updates may be referred to as viewed as and or defined as colliding. In one embodiment rather than viewing such as a collision such a process may be referred to as update overlaps instead of collisions. This allows the UI to gracefully scale to any number of resources though the penalty is that the data will be less and less fresh and users will more often need to click the refresh buttons on the tables. Thus in one embodiment gracefully scaling to any number of resource means displaying a high number of resources on the browser while still responding at an acceptable speed to user interactions. The flip side would be the browser getting bogged down by updates because the server is managing a high number of resources. This would lead to a negative user experience as all the UIs performance have degraded. Because the number of updates received do not increase dramatically with the number of resources the present invention continues to perform at a high level browser side.

In one embodiment by way of example only the present invention provides for smart polling frequency in datastores by a processor device in a computing environment. In one embodiment by way of example only individual polling operations are performed for refreshing each one of the datastores according to polling frequencies. Each one of the polling frequencies depends on recent system activity and each one of the datastores. Each of the polling frequencies are dynamically adjusted for each one of the datastores.

In one embodiment by way of example only the present invention dynamically adjusts each of the polling frequencies for each one of the datastores for handling increasing amounts of data in each of the datastores maintaining most current data being accessed and or updating the data that is most volatile to change.

In one embodiment by way of example only the present invention allows for the residing each of the datastores in an application browser and publishes a the data of each of the datastores in the application browser. The published data displayed in the browser may be a summary of the data and or specific details of the data.

In one embodiment by way of example only the present invention decreases one of the polling frequencies for one of the datastores experiencing a scalability problem.

In one embodiment by way of example only the present invention temporarily increases one of the polling frequencies following an operation during a detailed view of a datastore and or reduces the temporarily increased polling frequency frequencies to a slower frequency following a change to the datastore based on the operation.

In one embodiment by way of example only the present invention slows one of the polling frequencies for an empty datastore and stops one of the polling frequencies on a datastore. In one embodiment by way of example only the present invention initializes each of the polling frequencies to default values detects a response time of one of the polling frequencies is greater than equal to and or lower than a predetermined threshold dynamically decreases one of the polling frequencies and or dynamically increase one of the polling frequencies.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wired optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention have been described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the above figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While one or more embodiments of the present invention have been illustrated in detail the skilled artisan will appreciate that modifications and adaptations to those embodiments may be made without departing from the scope of the present invention as set forth in the following claims.

