---

title: Instantly restoring virtual machines by providing read/write access to virtual disk before the virtual disk is completely restored
abstract: A computer-implemented method for instantly restoring virtual machines in high input/output load environments may include (1) identifying a hypervisor that is configurable to maintain simultaneous connections to multiple datastores of a network-attached-storage system, (2) receiving a request to activate a new virtual machine on the hypervisor, (3) determining a usage of at least one connection from the hypervisor to at least one datastore of the network-attached-storage system, and (4) selecting, based on the usage of the connection, a designated connection from the hypervisor to a designated datastore of the network-attached storage system for use by the new virtual machine to store data on the network-attached-storage system. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09354908&OS=09354908&RS=09354908
owner: Veritas Technologies, LLC
number: 09354908
owner_city: Mountain View
owner_country: US
publication_date: 20130717
---
Business continuity and disaster recovery refers to the capability to restore normal or near normal business operations from a critical business application perspective after the occurrence of a disaster that interrupts business operations. Business continuity and disaster recovery may require the ability to bring up mission critical applications and the data these applications depend on and make them available to users as quickly as business requirements dictate.

In order to facilitate business continuity some organizations may wish to use backup disk images within virtual machines in failover scenarios. For example some traditional systems may instantiate a virtual machine to use a backup disk image for immediate access to data and also perform a live migration of the disk image from the backup location to a production location.

Unfortunately when these traditional systems instantiate multiple virtual machines these virtual machines may suffer from poor performance. For example high input output latency caused asynchronous input output operations for the live migration of one virtual machine may impede the synchronous input output operations of an application running within another virtual machine.

Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for instantly restoring virtual machines in high input output load environments.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for instantly restoring virtual machines in high input output load environments by using multiple connections to datastores from a hypervisor and accounting for projected input output loads and or input output latency caused by live migration of virtual machines via the connections to the datastores when selecting connections to datastores for instantiating virtual machines.

In one example a computer implemented method for instantly restoring virtual machines in high input output load environments may include 1 identifying a hypervisor that is configurable to maintain simultaneous connections to multiple datastores of a network attached storage system 2 receiving a request to activate a new virtual machine on the hypervisor 3 determining a usage of at least one connection from the hypervisor to at least one datastore of the network attached storage system and 4 selecting based on the usage of the connection a designated connection from the hypervisor to a designated datastore of the network attached storage system for use by the new virtual machine to store data on the network attached storage system.

In one embodiment determining the usage of the connection may include determining that the hypervisor is configurable to maintain an additional connection to an additional datastore of the network attached storage system. In this embodiment selecting the designated connection to the designated datastore may include selecting the additional connection to the additional datastore for use by the new virtual machine to store data on the network attached storage system.

In one embodiment determining the usage of the connection may include determining that the hypervisor has reached a maximum number of connections to datastores of the network attached storage system. In this embodiment selecting the designated connection to the designated datastore may include determining that an input output load on the designated connection to the designated datastore is less than an additional input output load on an additional connection to an additional datastore of the network attached storage system.

In some examples determining the usage of the connection to the datastore may include 1 identifying a restoration operation that is restoring a virtual machine backup by using the connection to the datastore 2 identifying a progress indicator of the restoration operation and 3 predicting an input output load on the connection to the datastore based on the progress indicator. Additionally or alternatively determining the usage of the connection to the datastore may include 1 identifying an input output queue that is used to queue input output operations transmitted to the network attached storage system via the connection to the datastore and 2 predicting an expected latency of at least one additional input output operation based on a size of the input output queue.

In one embodiment determining the usage of the connection to the datastore may include determining a degree to which the connection to the datastore is used for asynchronous input output operations. In this embodiment selecting the designated connection to the designated datastore may be based at least in part on the degree to which the connection to the datastore is used for asynchronous input output operations. Additionally or alternatively determining the usage of the connection to the datastore may include determining a degree to which the connection to the datastore is used for synchronous input output operations. In this example selecting the designated connection to the designated datastore may be based at least in part on the degree to which the connection to the datastore is used for synchronous input output operations. In some examples determining the usage of the connection to the datastore may include determining that the usage includes read operations from a deduplicated storage system.

In some examples receiving the request to activate the new virtual machine may include receiving a request to perform an instant recovery of the new virtual machine wherein the instant recovery may include providing an application with read write access to data stored within a virtual disk of the new virtual machine before the virtual disk has been completely restored.

In some examples determining the usage of the connection to the datastore may include determining that the usage includes an instant recovery of a virtual machine where the instant recovery includes providing an application with read write access to data stored within a virtual disk of the virtual machine before the virtual disk has been completely restored.

In some examples the computer implemented method may further include activating the new virtual machine using the designated connection from the hypervisor to the designated datastore of the network attached storage system.

In one embodiment a system for implementing the above described method may include 1 an identification module that identifies a hypervisor that is configurable to maintain simultaneous connections to multiple datastores of a network attached storage system 2 a receiving module that receives a request to activate a new virtual machine on the hypervisor 3 a determination module that determines a usage of at least one connection from the hypervisor to at least one datastore of the network attached storage system 4 a selection module that selects based on the usage of the connection a designated connection from the hypervisor to a designated datastore of the network attached storage system for use by the new virtual machine to store data on the network attached storage system and 5 at least one processor configured to execute the identification module the receiving module the determination module and the selection module.

In some examples the above described method may be encoded as computer readable instructions on a computer readable storage medium. For example a computer readable storage medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify a hypervisor that is configurable to maintain simultaneous connections to multiple datastores of a network attached storage system 2 receive a request to activate a new virtual machine on the hypervisor 3 determine a usage of at least one connection from the hypervisor to at least one datastore of the network attached storage system and 4 select based on the usage of the connection a designated connection from the hypervisor to a designated datastore of the network attached storage system for use by the new virtual machine to store data on the network attached storage system.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for instantly restoring virtual machines in high input output load environments. As will be explained in greater detail below by using multiple connections to datastores from a hypervisor to distribute the input output load of multiple virtual machines e.g. that are in various stages of instant recovery and live migration the systems described herein may reduce input output latency and thereby improve the performance of applications within virtual machines.

The following will provide with reference to detailed descriptions of exemplary systems for instantly restoring virtual machines in high input output load environments. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or hypervisor computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a hypervisor in communication with a computing device and a network attached storage system via a network . Computing device may be programmed with one or more of modules . Additionally or alternatively hypervisor may be programmed with one or more of modules .

In one embodiment one or more of modules from may when executed by at least one processor of computing device and or hypervisor facilitate computing device and or hypervisor in instantly restoring virtual machines in high input output load environments. For example and as will be described in greater detail below one or more of modules may cause computing device and or hypervisor to select connections to datastores for instantly restoring virtual machines in high input output load environments. For example and as will be described in greater detail below identification module may be programmed to identify hypervisor that is configurable to maintain simultaneous connections to multiple datastores of a network attached storage system . Receiving module may be programmed to receive a request to activate a virtual machine on hypervisor . Determination module may be programmed to determine a usage of connections from the hypervisor to datastores of network attached storage system. Selection module may be programmed to select based on usage of connections a designated connection e.g. from connections from hypervisor to a designated datastore e.g. from datastores of network attached storage system for use by virtual machine to store data on network attached storage system .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Hypervisor generally represents any type or form of virtualization platform capable of running and or managing multiple virtual machines on a single physical computing device. Examples of hypervisors include without limitation VMWARE ESX ESXI MICROSOFT HYPER V ORACLE VM SUN VIRTUALBOX CITRIX XENSERVER any bare metal hypervisor and or any hosted hypervisor. In some examples the term hypervisor may refer to software executing on a physical computing device that manages the execution of virtual machines on the physical computing device and or the physical computing device itself e.g. a virtual machine manager .

Network attached storage system may represent portions of a single storage device and or computing device or a plurality of storage devices and or computing devices. For example network attached storage system may represent a portion of computing system in and or portions of exemplary network architecture in . Alternatively network attached storage system in may represent one or more physically separate devices capable of being accessed by a computing device such as computing system in and or portions of exemplary network architecture in .

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between computing device hypervisor and or network attached storage system .

As illustrated in at step one or more of the systems described herein may identify a hypervisor that is configurable to maintain simultaneous connections to multiple datastores of a network attached storage system. For example at step identification module may as part of computing device in identify hypervisor that is configurable to maintain simultaneous connections to multiple datastores of a network attached storage system .

As used herein the phrase network attached storage system may refer to any computing system and or device capable of providing data storage services via a network. In some examples a network attached storage system may include a server that provides one or more clients with remote access to data and or storage available to the server. For example the network attached storage system may include a Network File System NFS server.

As used herein the term datastore may refer to any logical storage unit and or location suitable for storing data for virtual machines e.g. virtual machine disk. Examples of files that a datastore may store include without limitation virtual disk files virtual machine configuration files and virtual machine log files. In some examples a datastore may provide a uniform storage interface for virtual machines across differing underlying storage systems and or configurations. In one example a set amount of resources for handling input output operations may be allocated to each datastore.

As used herein the term connection may refer to any relationship between a hypervisor and a datastore. Examples of connections may include without limitation a datastore being mounted for use by one or more virtual machines on a hypervisor and or one or more virtual machines on a hypervisor being assigned to use a datastore for storage.

Identification module may identify the hypervisor in any suitable manner. For example identification module may identify the hypervisor by reading a configuration file that identifies the hypervisor. In some examples identification module may identify the hypervisor by receiving a communication from the hypervisor and or identifying a communication directed to the hypervisor. As will be explained in greater detail below in some examples identification module may identify the hypervisor by receiving a request to activate a new virtual machine on the hypervisor. Additionally or alternatively in some examples identification module may identify the hypervisor by executing on and or as a part of the hypervisor.

Identification module may identify the hypervisor in any suitable context. For example illustrates an exemplary system for instantly restoring virtual machines in high input output load environments. As shown in system may include a hypervisor a network file system server a storage array and a storage array . Using exemplary system as an example of identification module performing step at step identification module may identify hypervisor that is configurable to maintain simultaneous connections e.g. including connections and to datastores e.g. including datastores and of network file system server .

Returning to at step one or more of the systems described herein may receive a request to activate a new virtual machine on the hypervisor. For example at step receiving module may as part of computing device in receive request to activate virtual machine on hypervisor .

As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a hypervisor.

Receiving module may receive the request to activate the new virtual machine on the hypervisor in any suitable context. In one example request module may receive a request to activate the new virtual machine as a part of an instant recovery of a virtual machine. For example request module may receive a request to perform an instant recovery of the new virtual machine. As used herein the phrase instant recovery may include any operation that provides an application with read write access to data stored within a virtual disk of a virtual machine before the virtual disk has been completely restored.

Turning to for an example of receiving module performing step hypervisor may include virtual machines and . At step receiving module may receive a request to instantiate a virtual machine on hypervisor . In some examples the receiving module may receive the request as a part of a request to perform an instant recovery of virtual machine e.g. by allowing virtual machine immediate access to a virtual disk file while a live migration of virtual disk file is performed from storage array to storage array .

As used herein the phrase live migration as applied to virtual machine data may refer to any migration and or transfer of data that minimizes and or eliminates downtime for a workload application and or virtual machine that stores accesses and or otherwise uses the data. For example the phrase live migration may refer to ensuring that all write transactions to the data during the live migration are reflected at the target location at the end of the live migration and that an up to date version of the data is available throughout the live migration.

Returning to at step one or more of the systems described herein may determine a usage of at least one connection from the hypervisor to at least one datastore of the network attached storage system. For example at step determination module may as part of computing device in determine usage of connections from the hypervisor to datastores of network attached storage system.

Determination module may determine the connection usage from the hypervisor to datastores of the network attached storage system in any of a variety of ways. In some examples determination module may determine that the hypervisor is configurable to maintain an additional connection to an additional datastore of the network attached storage system. For example determination module may determine that the hypervisor may maintain a maximum of eight connections to eight separate datastores but that the hypervisor is currently only maintaining two connections to two separate datastores. Additionally or alternatively determination module may determine that the hypervisor has reached a maximum number of connections to datastores of the network attached storage system. For example determination module may determine that the hypervisor may maintain a maximum of four connections to four separate datastores and that the hypervisor is currently maintaining four connections to four separate datastores.

In some examples determination module may determine the connection usage by monitoring the progress of one or more operations using existing connections to datastores. For example determination module may 1 identify a restoration operation that is restoring a virtual machine backup by using the connection to the datastore 2 identify a progress indicator of the restoration operation and 3 predict an input output load on the connection to the datastore based on the progress indicator. In one example determination module may determine that the restoration of a virtual machine e.g. to a production location that was instantly recovered is 70 complete. Determination module may then project the input output load that the remaining 30 of the operation will place on the connection to the datastore.

In some embodiments determination module may determine the connection usage by monitoring the state of existing connections to datastores. For example determination module may 1 identify an input output queue that is used to queue input output operations transmitted to the network attached storage system via the connection to the datastore and 2 predict an expected latency of at least one additional input output operation based on a size of the input output queue. For example determination module may determine that an input output queue for a connection to a datastore includes 500 megabytes of incomplete input output transactions. Determination module may then determine that additional input output operations via the connection to the datastore face a latency of 50 milliseconds.

In some examples determination module may determine a degree to which the connection to the datastore is used for asynchronous input output operations. For example determination module may determine what proportion of activity on the connection to the datastore is used for storage migration of virtual machines. Additionally or alternatively determination module may determine the usage of the connection to the datastore by determining a degree to which the connection to the datastore is used for synchronous input output operations. For example determination module may determine what proportion of activity on the connection to the datastore is used by applications running within virtual machines.

In one example determination module may determine the usage of the connection to the datastore by determining that the usage includes read operations from a deduplicated storage system. For example determination module may determine that underlying storage used for the datastore includes a deduplicated storage system. In this example determination module may assign a higher projected latency to the connection to the datastore based on the determination.

In some examples determination module may determine the usage of the connection to the datastore by determining that the usage includes an instant recovery of a virtual machine. Determination module may thereby project current and or future input output loads and or current and or future input output latencies for the connection to the datastore.

Using as an example of determination module performing step storage array may include virtual disk files that correspond to virtual machines and respectively. An instant recovery of virtual machines and may have resulted in datastore being exposed to hypervisor via a connection to provide virtual machines and with instant access to virtual disk files and while virtual disk files and are migrated to a production location e.g. storage array . Likewise the instant recovery of virtual machines and may have resulted in datastore being exposed to hypervisor via a connection to provide virtual machines and with instant access to virtual disk files and while virtual disk files and are migrated to storage array . In one example determination module may determine the usage of connections and to datastores and by determining the progress of the live migrations of virtual disk files and to storage array . For example the migrations of virtual disk files and may be mostly complete meaning relatively few future asynchronous input output operations via connection to datastore and potentially low latency for future synchronous input output operations via connection to datastore . Additionally the migrations of virtual disk files and may be far from complete meaning relatively many future asynchronous input output operations via connection to datastore and potentially high latency for future synchronous input output operations via connection to datastore .

Returning to at step one or more of the systems described herein may select based on the usage of the connection a designated connection from the hypervisor to a designated datastore of the network attached storage system for use by the new virtual machine to store data on the network attached storage system. For example at step selection module may as part of computing device in select based on usage of connections a designated connection e.g. from connections from hypervisor to a designated datastore e.g. from datastores of network attached storage system for use by virtual machine to store data on network attached storage system .

Selection module may select the designated connection in any of a variety of ways. For example as mentioned earlier one or more of the systems described herein may have determined that additional connections to additional datastores are available to the hypervisor. In this example selection module may select an additional connection to an additional datastore e.g. by creating a new connection to a new datastore for use by the new virtual machine to store data on the network attached storage system. Alternatively one or more of the systems described herein may have determined that no additional connections are available to the hypervisor. In this example selection module may select the designated connection by determining that an input output load on the designated connection to the designated datastore is less than an input output load on a different connection to a different datastore of the network attached storage system.

In some examples selection module may select the designated connection to the designated datastore based at least in part on the degree to which the connection to the datastore is used for asynchronous input output operations. Additionally or alternatively selection module may select the designated connection to the designated datastore based at least in part on the degree to which the connection to the datastore is used for synchronous input output operations. For example selection module may select the designated connection to the designated datastore because the new virtual machine requires low latency for synchronous input output operations e.g. for applications running within the new virtual machine and the designated connection to the designated datastore is used for few asynchronous input output operations e.g. because storage migrations performed via the designated connection to the designated datastore are almost complete .

Turning to in some examples selection module may select a new connection to a new datastore for virtual machine to access virtual disk file e.g. because hypervisor allows more than two simultaneous connections to datastores . In other examples selection module may select connection to datastore for virtual machine and virtual disk file because the input output load on connection to datastore is higher than the input output load on connection to datastore . In one example selection module may select connection to datastore for virtual machine and virtual disk file because an input output queue for connection to datastore is relatively large and an input output queue for connection to datastore is relatively small.

As explained above in connection with method in by using multiple connections to datastores from a hypervisor to distribute the input output load of multiple virtual machines e.g. that are in various stages of instant recovery and live migration the systems described herein may reduce input output latency and thereby improve the performance of applications within virtual machines.

Virtual machine instant recovery may dramatically reduce the recovery time objective of an application from several hours to only a few minutes when backup images can be accessed from conventional disk based storage or deduplicated storage. Unfortunately performance issues may arise because of high input output latency from deduplicated storage upon which a virtual machine depends and or asynchronous input output operations from the storage migration of the virtual machine. These factors may impede the synchronous input output operations initiated by guest operating systems in other virtual machines because input output operations pertaining to multiple virtual machines may share the same NFS connection to an instant recovery datastore.

In one example systems described herein may scale the number of virtual machines that may efficiently operate in instant recovery scenarios by leveraging the number of connections that can be opened from a hypervisor e.g. ESX SERVER to an NFS server. Using this approach systems described herein may scale the number of virtual machines that can be supported from backup storage. After reaching the maximum number of connections that may be opened per NFS server the systems described herein may use load balancing e.g. determine which NFS connection from the hypervisor has the least load to activate a new virtual machine on the least loaded NFS connection.

For example if a hypervisor may open a maximum of four unique connections per NFS server when a backup system e.g. NETBACKUP receives a request for activating and or restoring a virtual machine using an instant recovery technique the systems described herein may use the following steps 1 If it is the first request for the hypervisor NETBACKUP may create a new datastore and activate the virtual machine on the newly created datastore or NFS mount point . 2 If it is not the first request and if the number of datastores created is not more than the pre determined maximum value i.e. four NETBACKUP may create a new datastore and activate the virtual machine on the newly created datastore. 3 If the maximum number of datastores i.e. four have already been created when NETBACKUP receive a new request for activating a virtual machine it may determine which datastore or NFS connection is least loaded. NETBACKUP may then activate the virtual machine on that particular datastore.

The above technique may help to ensure that guest operating systems on newly created virtual machines using instant recovery techniques will not face competition or will face minimal competition from existing storage migration input output operations. This may improve the synchronous input output performance for newly created virtual machines. For example if each datastore supports N virtual machines and the hypervisor supports M connections to datastores the preceding steps may enable scaling up to M N virtual machines.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. Compact Disks CDs or Digital Video Disks DVDs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols and or architectures such as Network File System NFS Server Message Block SMB Common Internet File System CIFS Simple Object Access Protocol SOAP or Representational State Transfer REST .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for instantly restoring virtual machines in high input output load environments.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in and or computing system in may be implemented within a virtual environment. For example modules and or data described herein may reside and or execute within a virtual machine. Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the phrase information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the phrase information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the phrase endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive data about connections between hypervisors and NFS datastores transform the data output a result of the transformation to a hypervisor use the result of the transformation to select a connection to an NFS datastore for a new virtual machine and store the result of the transformation to a configuration file on a storage device. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

