---

title: Cancelling a purchasing request
abstract: In general, the subject matter described in this disclosure can be embodied in methods, systems, and program products. A server system receives, as sent by a computing device, a request to purchase a product. The request is initiated by user selection of an element provided for display by a third-party application program. The server system sends, for receipt by a transaction processing system, a charge request to charge an account of a user of the computing device for purchase of the product. The server system determines, after the charge request has been sent for receipt by the transaction processing system, to cancel the charge request. The server system sends, for receipt by the transaction processing system, a request to cancel the charge request. The server system sends, for receipt by the computing device, an indication that purchase of the product has been cancelled.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08538834&OS=08538834&RS=08538834
owner: Google Inc.
number: 08538834
owner_city: Mountain View
owner_country: US
publication_date: 20130131
---
This application is a divisional application of and claims priority to U.S. patent application Ser. No. 13 434 373 filed Mar. 29 2012 that claims priority to U.S. Provisional Application Ser. No. 61 471 586 filed on Apr. 4 2011 entitled In Application Billing and U.S. Provisional Application Ser. No. 61 593 830 filed on Feb. 1 2012 entitled Providing Multiple Purchase Prices for a Product the entire contents of which are hereby incorporated by reference.

Distribution platforms for software application programs enable users of computing devices to browse listings of the application programs and to download certain application programs to their respective computing devices. Application distribution platforms provide users a convenient service through which the users can view those application programs that are available for installation and or execution on their devices. In some examples an application distribution platform is hosted by an organization that developed an operating system through which the application distribution platform may be accessed.

A user may register a credit card or other purchasing instrument with a distribution platform permitting the user to download multiple application programs without repeatedly entering the credit card information. For example the user may simply have to select a download interface element and provide a password in order to initiate purchase and download of an application program and if the user has provided the password recently it may be saved so that it need not be re entered .

Application distribution platforms provide developers of application programs a convenient service through which to offer their application programs to end users. A developer may upload an application program to a distribution platform and may specify a title and description for the application program. The distribution platform may be responsible for promoting the uploaded application program to end users and for delivery of the application program to those end users that request download of the application program. Application programs offered through an application distribution platform may have been developed using a common software development kit or versions thereof. In other words the application programs provided by an application distribution platform may be configured for execution by a single operating system.

An application program downloaded from an application distribution platform may include features that enable users of the application program to purchase digital software products e.g. additional levels for a game . The application distribution platform may include components that process requests to purchase such in app products and handle payment processing.

This document describes techniques methods systems and other mechanisms for purchasing content using application programs.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

This document generally describes purchasing content using application programs. In general an application program may provide a user interface that includes elements with which a user can initiate the purchase of one or more products. Example products include digital content e.g. photos and videos and additional functionality for the application e.g. new levels or features for a game . Such purchases initiated from within an application are referred to herein as in app purchases and such products are referred to herein as in app products.

As described in greater detail throughout this disclosure an in app purchasing system supports the purchase of in app products. The in app purchasing system includes a market application program on a computing device that provides a common interface for in app purchasing requests by multiple third party application programs on the computing device.

The market application program may communicate with a market server system to implement purchase of the in app product. The market server system can store information concerning in app products e.g. price name description and can provide this information to the purchasing computing device. The computing device can generate a checkout user interface that includes elements with which the user can confirm that the user would like to purchase the in app product at the specified price and complete the purchase. The in app purchasing system is described in greater detail throughout this disclosure and with reference .

The developer website includes elements with which the developer can register the one or more application programs for promotion through the application distribution platform and with which the developer can manage information displayed to end users in association with indications of the one or more application programs. The developer website also includes elements with which the developer can register one or more in app products that can be purchased using certain of the one or more application programs.

Specifically the web page displays elements and which identify application programs that developer Crazy Good Apps as identified by element has uploaded to the application distribution platform. In association with the element shown for each uploaded application program the web page displays elements that identify details of each respective application program such as icons and titles and categories and installation identifiers and price identifiers and and publication identifiers and

The developer can view the web page as a result of providing valid credentials e.g. a user name and a password for a user account of the developer with the distribution platform. Once logged in the developer may view web page . The developer may modify the settings for each application program by selecting the title for the respective application program e.g. title or . The title for each respective application program may be a selectable graphical interface element e.g. a selectable link button or icon .

Web page includes In app products links and . User selection of one of the links and results in the display of a web page for managing any in app products that end users can purchase through use of the respective application program. For example user selection of the link for the Local Bike Maps application program causes the web browser to navigate to the display of the in app purchasing webpage that is shown in .

In this example the developer would like to enable users of the Local Bike Maps application program to purchase a bike map for Portland. Accordingly the developer selects an Add In app Product element . As a result the web browser displays the web page that is shown in .

The web page includes radio buttons and with which the developer can select whether the in app product will be Managed or Unmanaged by the distribution platform. In some embodiments products that are managed can be purchased only once per user account. When a product is managed the in app purchasing system permanently stores the transaction information for the product on a per user basis. This enables an application to query the market server system and restore the products that the application program has previously downloaded. A managed product may be useful if a third party application is selling products such as game levels or application features. These products are not transient and may be restored when a user reinstalls the application wipes the data on their device or installs an application on a new device.

In some embodiments products that are unmanaged do not have their transaction information stored by the in app billing system. The third party application may be responsible for managing the transaction information of unmanaged products. Also unmanaged products can be purchased multiple times as far as the in app purchasing system is concerned. The unmanaged purchase type may be useful if the application program is selling consumable products such as fuel or magic spells.

The web page also includes a title field and a description field . The developer can provide input into fields and to specify a title and a description for the in app product. The developer can change the default language assigned to the in app product by selecting link . The default language English in this example may be inherited from the parent application.

As shown in the web page includes elements with which the developer can specify prices for the in app product in different currencies. For example the developer of the Local Bike Maps application program can select currencies in which an end user of the application may purchase the Portland bike map in app product. The developer can elect to auto populate prices for the selected currencies based on current currency exchange rates. The developer can elect whether prices should automatically change as the currency exchange rates change and can specify increments in which an automatically changing price should jump.

More specifically web page includes field for receiving developer input that specifies a price in the default currency USD in this example . The default currency for an in app product may be inherited from the parent application program i.e. the Local Bike Maps application program . The developer may change the default currency by selecting the Change Default Currency link .

In this illustration the developer would like to set prices for additional currencies. The developer selects an Add Currencies element . Dialog box appears as a result. Dialog box includes fields for different currencies with a USD United States dollars field having already been selected. The developer would also like to set prices in EUR euro GBP British pound sterling and SEK Swedish Krona . As such the developer selects the EUR field the GBP field and the SEK field

In this illustration web page displays additional elements as a result of the developer selecting fields and . For example the web page may modify to the display of .

Now with reference to web page has changed to include fields and in which the developer may specify prices in various currencies. Web page also displays a current exchange price and for each of the currencies based on the USD 1 default currency price. In some examples the web page additionally or alternatively displays the current exchange rate for each currency e.g. EUR 0.78 to USD 1.00 .

In some examples the web page auto populates fields and with prices at current exchange rates. In other words as a result of the user entering the value 1 in the USD field computing processes that support the web page may identify the current exchange rate for 1 USD in EUR GBP and SEK and may automatically populate the EUR field the GBP field and the SEK field with prices based on the identified exchange rates. The developer may not provide input that specifies the values presented in the EUR field the GBP field and the SEK field

In some examples after the user has entered the value 1 in the USD field the fields and may not automatically populate with prices based on current exchange rates. Rather the exchange prices may display as elements and and the developer can cause fields and to auto populate with prices by selecting the Auto Fill user interface element . The developer can populate individuals ones of fields and with individual ones of the exchange prices shown by elements and by selecting respective interface elements and

The developer can select elements and to specify whether the values stored in fields and are fixed or can float with changes in currency exchange rates. Moreover if a developer has specified that a particular price can float with changes in the appropriate currency exchange rate the developer can identify increments of the appropriate currency between which the price is able to float. The developer can specify such increments using sliding elements and . Furthermore a developer can specify a minimum value and a maximum value between which a price is permitted to float using user interface elements and

As an illustration of a developer s use of web page the developer specifies the value 1 in USD field e.g. by typing the value 1 using a physical or virtual keyboard . In response the system automatically generates the display of exchange prices and without further user input. The developer selects interface element to copy the current price of 0.78 EUR into field . The developer wishes that this value change as the rate of exchange between the United States dollar and the euro changes and as such the developer selects the Floats element . As a result the web page displays elements and

The developer moves the slider on element to 0 to indicate that the price in euros is to change at the smallest domination of the currency 0.01 euro in this example . The developer does not specify a minimum and maximum price in euro using the minimum and maximum fields and . As a result of this developer input after the developer saves the prices e.g. by selecting a Save element the distribution platform may regularly change the price of the in app product in euro without the developer s intervention.

Continuing with the illustration the developer prefers to have a fixed price of 0.5 GBP and as such does not select element and rather specifies the value 0.5 in GBP field . The developer does not select the Floats element for the GBP price.

The developer prefers that a price of the in app product in SEK float but in increments of 50 re. As such the developer selects element to copy the current exchange price of 6.83 SEK into field . The developer then selects the Floats element and drags the slider element to 0.5 SEK. As a result the computational processing supporting the web page rounds the value 6.83 SEK to the nearest 0.5 SEK i.e. 7.0 SEK . Further even after the developer leaves web page the in app purchasing system will continue to round the price in SEK to the nearest 0.5 SEK even as the current exchange price changes.

The developer does not desire that the in app purchasing system charge less than 5 SEK should the Swedish Krona strengthen and as such the developer specifies 5 SEK in minimum field . The developer does not desire that the in app purchasing system charge more than 10 SEK should the Swedish Krona weaken and as such the developer specifies 10 in maximum field

Once satisfied with the information that the developer has specified using web page the developer selects the save interface element . In response the in app purchasing system may save information specified by the developer e.g. the title the description and pricing rules . The in app purchasing system may regularly calculate prices for the in app product in various currencies for example upon each purchasing request by an end user or upon a regularly scheduled time interval e.g. every hour .

As a result of the user selecting the save element the in app purchasing system stores a collection of information that specifies details of the newly added in app product. This collection of information includes the following fields 

 1 Application Name The application name is set based on the application under which the in app product was created. For example the Portland bike map product is generated under the Local Bike Maps application program.

 2 In app Product ID The in app product ID is specified by the user in product ID field . Product IDs may be unique across an application s namespace. In other words upon a developer specifying a name in the product ID field e.g. after the developer selects the save interface element the in app purchasing system may determine whether the value in field is different than all previously saved product IDs for a given application name. If the product ID has already been used the developer may be prompted to enter a different product ID.

 3 Purchase type The purchase type for an in app product may be either Managed or Unmanaged as specified by radio buttons and . Other purchase types are possible.

 4 Publishing state A product s publishing state can be published or unpublished. An unpublished product may not be published by the distribution platform on a web page or other graphical user interface that lists in app products. Requests to purchase unpublished items may return an error.

 5 Product Info History List In app products may be modified e.g. a developer may change the description title and price but a developer may not be able to change the product ID. Accordingly the in app purchasing system may store a snapshot of a product each time the product changes. Each snapshot may reference a different version of the product. Accordingly the in app purchasing system is able to identify the historical details of an in app product at a given historical time. The following fields may be stored for each version of a product.

 5B Title The title is the short descriptor for the product as set in field . Titles may be unique across an application s namespace and every in app product may have a title. The title may be visible to users during checkout for example as element in .

 5C Description The description is a long descriptor for the product as set in field . A description may not have to be unique across an application s namespace. The description may be visible to users during checkout for example as element in .

 5D Price Every product may be assigned at least one price that is greater than zero. The price may be visible to users during checkout for example as element in .

 5E Price Currency The price currency specifies the type of currency for a corresponding price. A product information history list can include multiple prices and corresponding price currencies.

 5F Published Time The published time can indicate the time at which the version of the in app product was published for example a time at which the developer selected the save interface element .

 6 First Published Time The first published time can indicate the time at which the earliest version of the in app product was published.

 7 Current Version The current version field identifies the most recent version of the in app product e.g. the collection of language title description price currency and published time .

 8 Transaction History For in app products that are managed the computing system may store the following items a transaction identifier b purchase price c purchase time and d purchase state. The transaction history information may be stored in the transaction information storage . The above described transaction history information may be stored for each purchase of a product. For example the transaction information storage may store the above described transaction identifier purchase price purchase time and purchase state in association with an identifier for a user that purchased the product and an identifier for the purchased product.

Interface includes three interface elements and that identify three different maps that the Local Bike Maps application program is able to display. The Minneapolis map is free and the user may cause the device to display the Minneapolis map by selecting interface element . The Portland and Fort Collins maps however are not available for immediate display by device and may be purchased for 1 each as indicated by the text on interface elements and .

In this illustration the user decides to purchase the Portland map and as such selects the Portland element . As a result the computing device displays interface . Interface includes a purchasing dialog box that is shown as hovering over a background although dialog box may fill the entire display.

As described throughout this disclosure dialog box may be provided by components other than the Local Bike Maps application program. For example the Local Bike Maps application may as a result of user input selecting the interface element request that a market application program shown in and discussed in further detail with reference thereto generate the display of dialog box . The market application program may request from a market server system shown in and discussed in further detail with reference thereto content for presentation in the dialog box . For example the application program title the in app product developer name the in app product title and the in app product description may be retrieved from the market server system . These items may have been specified by the developer e.g. elements and and the values in fields and .

The market application program may also request that the market server provide a list of the purchasing instruments that are valid for the user. A purchasing instrument can include credit card information debit card information or e commerce payment information. The user of the computing device may have previously registered two credit cards with the user s in app purchasing system user account a VISA credit card and an RBS credit card in this example. Each of these purchasing instruments may have been assigned a default currency. For example each credit card company may provide an indication of the default currency to the market server system during validation of the credit card with the in app purchasing system.

In addition to receiving an indication of the purchasing instruments that are associated with the user the market application may receive prices for the in app product in the currencies that are assigned to the purchasing instruments e.g USD 1 for the VISA card and GBP 0.5 for the RBS card . The VISA purchasing instrument may be identified as a primary purchasing instrument and as such the market application initially displays an element that identifies the VISA card purchasing instrument. The dialog box also displays an element that lists the price and currency of the product if purchased with the presently selected purchasing instrument. The element if selected finalizes the purchase of the in app product at least from the standpoint of user input.

In this illustration the user is interested in seeing the price at which the in app product is sold if purchased in GBP with the user s RBS card. Accordingly the user selects element . As a result the computing device presents a selectable list of the user s purchasing instruments e.g. the VISA card and the RBS card along with an option for adding a new purchasing instrument. The user selects the option for the RBS card and as a result the computing device displays interface .

As shown in interface is similar to that of interface except that element has changed to identify the RBS credit card as selected and element has changed to identify the cost in GBP. Accordingly as the user switches between purchasing instruments the price for the in app product may change. As described throughout this disclosure each price may be specified by the developer as a fixed price or based on user specified rules may float without intervention from the developer as exchange rates change.

Although not shown in the figures a user may add a purchasing instrument from the checkout interface. For example the user may have selected the option to add a purchasing instrument from the pull down menu that displays upon selection of element . As a result the computing device may present a new interface not shown . The new interface may include fields and control elements for specifying the details of a new purchasing instrument. The computing system may request that a remote system confirm the details of the new purchasing instrument and as a result of a positive confirmation the user may be redirected back to an interface similar to that of interface although element may identify the new purchasing instrument and element may identify the price and currency if the in app product is purchased with the new purchasing instrument .

As shown in after the user has selected the Buy Now interface element the computing device displays interface . In this illustration interface includes a dialog box that is shown as hovering over a background display. The dialog box includes elements that identify that the purchase of the Portland bike map is pending. In some examples the dialog box is displayed for a temporary period of time e.g. the earliest of i thirty seconds and ii receiving an indication that the product has been purchased and then disappears from the interface whether or not processing of the purchase has actually completed. The display of the dialog box is discussed in additional detail with reference to box .

As shown in after dialog box has disappeared from the interface the computing device may display interface . Interface is substantially similar to interface except that the interface includes one or more elements and that indicate that the purchase of the Portland bike map is pending. In some examples zero or one of the indications on elements and are presented.

After the computing device receives an indication that that the purchase has been verified the indications that the purchase is pending as shown on elements and may be removed from the interface for example to generate the interface that is shown in . Element in interface indicates that the Portland bike map has been purchased. Specifically the element changed from the text indication of 1 to the text indication of Pending and to the text indication of Purchased. The user may cause the computing device to change to an interface that displays the Portland bike map by selecting element .

The market server system includes a developer site generator that manages the distribution platform developer site that is described above with respect to . The market server system is further configured to process in app purchasing requests as described in greater detail throughout this disclosure. For example the market server system may in response to receiving a request to purchase an in app product access the in app product catalog to identify details associated with the in app product e.g. whether the product exists a title for the product a description for the product and one or more prices for the product .

The market server system may store details regarding each purchase in the transaction information storage e.g. individuals that purchased each product times at which the products were purchased and the costs of the products at the purchased times . The automatic canceller may periodically determine whether a purchasing request should be cancelled. The automatic canceller may request that the automatic canceller at the market application measure a delay between the periodic determinations on behalf of the automatic canceller of the market server system .

Computing device includes a market application and multiple third party applications e.g. third party application . Market application is executed by computing device and serves as a common interface for in app purchasing requests by the multiple third party applications. The market application also provides a common graphical interface that prompts a user to confirm purchase of in app products initiated from different third party applications.

For example the purchasing screen user interface generator of the market application may provide the dialog box of . The purchasing screen user interface generator may access the purchasing user interface template in order to generate the purchasing screen user interface. The purchasing service handles the communications of the market application with the third party application and with the market server system . The automatic canceller institutes a delay at the request of the automatic canceller at the market server system at the expiration of which the automatic canceller prompts the automatic canceller at the server system to determine whether to cancel the purchasing request. In some examples market application is executed by a device that is remote from the computing device .

Third party application includes a third party application user interface generator that generates a user interface that is specific to the third party application and that is defined by instructions at least partially included in the third party application e.g. instructions that were downloaded in an installation file for the third party application from a distribution platform . For example third party application may provide interfaces and and may provide the backdrop of interfaces and in examples in which the dialog box does not fill the entire display .

Third party application includes various other components for processing in app purchasing requests. For example a message requester and synchronous receiver sends communications to the purchasing service of the market application and receive synchronous responses from the purchasing service . The message requester and synchronous receiver can request that the bundle generator generate a bundle parameter to be included in the communications. The asynchronous message receiver receives asynchronous responses sent by the purchasing service . The signature verifier verifies that certain types of messages received from the market application have been properly signed by the market server system . The nonce verifier determines whether a response received by the third party application to a GET PURCHASE INFO request is an original response that has not been spoofed by a malicious program. The transaction storer may store indications of which products of the third party application program a user of the computing device has purchased. The delivered content storage stores the digital products.

Third party server system is under the control of an entity that developed and or published the third party application just as other of the third party server systems are under the control of entities that developed and or published respective other of the third party applications. The third party server system provides a system for storing and processing information that is remote from the third party application . Such remote storage and processing of information can be beneficial to perform security sensitive operations to persistently store information and to deliver content e.g. a purchased digital product to the third party application . The components of the third party server system that perform these features are described in greater detail throughout this disclosure.

The in app purchasing system relieves third party application programs of many of the burdens of the in app purchasing process. For example the third party application may not need to be aware of the multiple purchasing instruments with which a user can purchase a product and may not have stored an indication of the one or more prices for the product. Rather the third party application may provide variations of a single request to the market application which may handle many of the in app purchasing steps on behalf of the third party application . Indeed the third party application may not communicate with the market server system . The protocols that govern the communication between the third party application and the market application are discussed in turn.

This disclosure refers primarily to computing device although the components and functionality described with respect to computing device apply to other of the multiple computing devices. This disclosure refers primarily to third party application although the components and functionality described with respect to third party application apply to other of the multiple third party applications. This disclosure refers primarily to third party server system although the components and functionality described with respect to third party server system apply to other of the third party server systems.

At Transitions A the third party applications and receive user input requesting purchase of an in app product e.g. as described with reference to box . Transitions A do not need to occur at the same time. At Transitions B the third party application programs and send a product purchase request to the market application e.g. as described with reference to box . At Transition C the market application sends a request for product details to the market server system e.g. as described with reference to box . The market application may perform the request of Transition C for each of the Transition B product purchase requests. In other words the request of Transition C may be performed separately for each Transition B product purchase request. At element the market server system accesses the requested details e.g. as described with reference to boxes and . At Transition D the market server system sends a response that includes the requested details to the market application e.g. as described with reference to box .

At element the market application displays a confirming user interface e.g. as described with reference to box . Should the user provide input to cancel the purchase the market application performs Transition E and sends to the third party application an indication that the purchase has been cancelled e.g. as described with reference to boxes and . Should the user provide input to confirm purchase of the product the market application performs Transition E and sends a confirming purchase request e.g. as described with reference to box . At element the market server system requests that a user s account be debited for the cost of the product or a cost derived therefrom for example a cost that accounts for a coupon or a cost that accounts for taxes and processing charges e.g. as described with reference to box .

At Transition F the market server system sends to the market application an indication that the user s account has been debited e.g. as described with reference to box . At Transition G the market application sends to the third party application an indication that the product has been purchased e.g. as described with reference to box . At Transition H the third party application requests the product from the first third party server system e.g. as described with reference to box . At Transition I the first third party server system sends the requested product to the first third party application e.g. as described with reference to box .

In additional detail the market application may provide a common interface to which multiple third party application programs are able to send product purchase requests. For example the market application may be configured to provide an application program interface with which to receive multiple product purchase requests Transitions B . The market application may be configured to request from the market server system in response to receiving a particular one of the product purchase requests particular details regarding a particular product specified by the particular product purchase request. For example the market application may be configured to send a request for product details Transition C as a result of receiving one of the product purchase requests Transition B .

The market application may be configured to send to the market server system after the market application receives a response to the request for the particular details a confirming product purchase request the confirming product purchase request causing the market server system to request that an account of a user of the computerized device be debited for a price that corresponds to a price of the particular product. For example the market application may send the confirming purchase request Transition E in response to receiving the responsive details Transition D displaying the confirming user interface as performed at element and receiving user input confirming purchase of the product as performed at element .

The market application may be configured to receive from the market server system an indication that the account of the user has been debited for the price that corresponds to the price of the particular product and in response send to the particular third party application program an indication that the particular product has been purchased. For example the market application may receive the indication Transition F and as a result may send to the first third party application the indication that the product was purchased Transition G .

The market application program may be configured to after sending the confirming product purchase request and before receiving the indication that the account of the user has been debited receive a second particular one of the product purchase requests and send to the market server system a second confirming product purchase request. For example the market application may send the confirming purchase request E as a result of a purchase request by the first third party application and while the market server system is in the process of debiting the user s account at element the second third party application may send the product purchase request Transition B and the market application may send the resulting request for product details Transition C . The market application may be configured so that Transitions B and C resulting from the product purchase request by the second third party application may occur before the market server system sends the indication that the account has been debited Transition F and the market application receives the indication that the account has been debited Transition F .

The market application may be configured to display a confirming user interface with which the user is able to provide input to cancel or confirm purchase of a product. The confirming user interface may be a same user interface that is displayed in response to each of multiple product purchase requests except that the confirming user interface is customized to display one or more features specific to a product being purchased. For example the market application may display substantially the same confirming product purchase user interface as a result of product purchase requests from both of the third party applications and and regardless of the product being purchased. The confirming product purchase user interfaces may be generated from a same template and may be customized using the details that are received from the market server system Transition D .

The market application program may be configured to receive an indication that the user provided input to cancel the particular product purchase request and in response send to a particular one of the third party application programs an indication that the user cancelled the particular product purchase request. For example the market application may be configured to display the confirming user interface element . Should the user select a button to cancel the purchase the market application may be configured to send the indication of purchase cancellation to the second third party application Transition E .

The market application program may be configured to receive a product purchase request that does not specify a price of a product or a description of a product Transition B and to request one or more of such product details from the market server system Transition C . The market server system may be configured to retrieve such price and description details in response to such a request element and send the requested details to the market application Transition D . The market application may display the received one or more prices and the description in the confirming user interface and may send an indication of a user selected price to the market server system Transition E .

The first and second third party application programs and may be configured to receive an indication that the user supplied input selecting a first product for purchase and in response send to the market application a first product purchase request that specifies the first product. For example the third party application programs and may be configured to receive an indication of the user input Transitions A and as a result send the product purchase requests Transitions B .

The third party application programs and may not be configured to communicate with the market server system . For example the third party application programs and may not include code that causes the computing device to be adapted to send to the market server system a request for the product details. Rather the third party applications and may transmit the request to the market application which may send a different request for product details to the market server system and which may handle subsequent communication with the market server system on behalf of the third party application programs and .

The first third party application program may be configured to receive from the market application the product purchased indication Transition G . As a result the first third party application may from a perspective of a user of the first third party application unlock access to the purchased product. The first third party application may unlock access to the purchased product by providing the user with access to the first product. The first product may already have been stored at the computing device by the first third party application program at a time that the first third party application sent the first product purchase request. For example the first third party application may include the purchased product e.g. a game level or an audio file as a result of an installation of the first third party application program . The purchased product may be stored on the computing device prior prior to a user requesting purchase of the product. The first third party application may not provide the user with access to the purchased product however until the first third party application receives the product purchased indication Transition G .

In some examples the first third party application may not include the purchased product as a result of an installation of the first third party application . In such examples the first third party application may retrieve the product from a first third party server system by submitting a request for the product Transition H and in response receiving the product Transition I . As discussed in additional detail with reference to box the first third party application may in some examples include or have access to the product before the third party application requests purchase of the product. In such examples as a result of receiving the product purchased indication Transition G the third party application may make the product available for use by a user of the third party application .

The following discussion provides an overview of the protocols that govern communication between each of the third party application programs e.g. third party application program and the market application program . The protocols are described in additional detail and context with reference to a below described example in app purchasing process see FIGS. and A H .

In some implementations the market application provides each third party application e.g. application with a single method call to the market application . This method call the sendPurchasingRequest bundle method call is herein referred to as a purchasing request. The purchasing request as shown above takes a single bundle parameter. The bundle parameter includes multiple fields that vary in quantity and type based on the type of purchasing request. The type of the purchasing request is set by one of the fields in the bundle. This PURCHASING REQUEST field can receive a string that is valid for five different values and thus specifies five different types of purchasing requests. These five types of requests are described in turn.

 1 A CHECK PURCHASING SUPPORTED request is sent by the third party application to verify whether the market application supports in app purchasing. The third party application can send this request upon launch of the application or before displaying a particular user interface. This request is useful to determine whether to enable or disable certain user interface features that are specific to in app purchasing. For example the Local Bike Maps application program may not display the Portland and Fort Collins interface elements as a result of a determination that in app purchasing is not supported.

 2 A REQUEST PURCHASE request is sent by the third party application to request purchase of an in app product. The third party application can send this request in response to determining that a user has selected a product for purchase. For example this request may be transmitted in response user selection of the Portland interface element .

 3 A GET PURCHASE INFORMATION request is sent by the third party application to request transaction information from the market server system . This request is transmitted by the third party application in response to the third party application receiving a notification that transaction information is awaiting retrieval by the third party application . The transaction information may indicate that a purchase has been successful or has been cancelled or that a refund has been granted.

 4 A CONFIRM NOTIFICATIONS request is sent by the third party application to acknowledge that the third party application received transaction information that was sent to the third party application in response to the third party application submitting the GET PURCHASE INFORMATION request.

 5 A RESTORE TRANSACTIONS request is sent by the third party application to retrieve a user s transaction history. The third party application may not however receive the user s transaction history in those instances in which the in app product is not managed. 

Portions of this disclosure discuss a system in which the market application retrieves from the market server system details regarding an in app product and does not provide the third party application with these details. In some implementations however the send PurchasingRequest method supports a GET PRODUCT INFORMATION type of request. This type of request is sent in implementations in which the market server system and the market application cooperate to provide the third party application with details regarding the in app products that are available for use by the third party application .

For example in response to a user launching the third party application program or in response to the user requesting that the third party application program navigate to a display that shows in app products available for purchase using the third party application program the third party application program may issue a GET PRODUCT INFORMATION request. The third party application may send this request to the market application which may send the request or a similar request for receipt by the market server system .

The market server system may in response retrieve at least some of the details regarding the in app products that are available for purchase using the third party application program . The details may include the names of the products the identifiers for the products the descriptions of the products and the prices of the products for example. The market server system may send these details for receipt by the market application which may forward such details for receipt by the third party application program . The third party application program may display the details in a user interface. For example the third party application program may use the details to populate the user interface of . As such a developer of the Local Bike Maps application program for example may not have to send an update for the application program every time the developer adds a new map. Rather the application program can add user interface elements based details of in app products received in response to a GET PRODUCT INFORMATION request.

As described above the sendPurchasingRequest function takes a single bundle parameter and this bundle parameter can include various different fields depending on the type of purchasing request.

 1 The PURCHASING REQUEST field as discussed above can include a string that specifies the type of request. This field may be common to all types of purchasing requests.

 2 An API VERSION field can include an int that specifies the version of the application store communication interface that the third party application is attempting to access this field is set to 1 in the examples throughout this disclosure . This field may be common to all types of purchasing requests.

 3 An APPLICATION NAME field can include a string that specifies the name of the application that is making the request. This field may be common to all types of purchasing requests.

 4 A PRODUCT ID field can include a long that specifies the product ID also referred to herein as a product identifier of the product for which the third party application has requested purchase. This field may be included in REQUEST PURCHASE requests.

 5 A NONCE field can include a long and may be included in GET PURCHASE INFORMATION and RESTORE TRANSACTIONS requests. The value of the nonce may be unique to each request is subsequently received by the third party application with transaction information and can be used by the third party application to verify the integrity of the transaction information.

 6 A DEVELOPER PAYLOAD field can include a string that is specified by the third party application for inclusion in a REQUEST PURCHASE request. This string can send supplemental information with an order and may be returned with the transaction information. As discussed in greater detail throughout this disclosure this payload information may be provided not only to the third party application on the computing device that is sending the purchase request but also to the third party application on other computing devices that did not send the request but that are associated with the computing device or a user of the computing device .

Further description of these parameters is provided with respect to the example in app purchasing process see FIGS. and A H .

The makeRequestBundle function is a helper method that enables a third party application to submit in a request to the makeRequestBundle helper method a string that corresponds to one of the five types of purchasing requests. The method returns a bundle that includes the first three parameters. The third party application can add additional parameters to the bundle for appropriate requests.

The market application is configured to send a synchronous response to the third party application in response to each purchasing request sent by the third party application . The synchronous response includes a bundle that is different than that described above and that includes at least one field a RESPONSE CODE field. The synchronous response can provide information that the market application is able to quickly determine such as error and status information.

The market application can also send one or more asynchronous responses to the third party application in response to each purchasing request. The use of multiple responses synchronous and asynchronous enables the third party application to immediately know the status of the request with the synchronous response and to obtain a code that is used to identify a subsequent asynchronous response but then to receive further information at a later point in time with the one or more asynchronous responses. The asynchronous nature of the communication enables the market application to push information to the third party application without the third party application repeatedly polling the market application which saves computational and energy resources.

Although asynchronous responses are described in greater detail with reference to the example in app purchasing process see FIGS. and A H a brief overview is provided in the following paragraphs. Some asynchronous responses may include the RESPONSE CODE field. The valid values for the RESPONSE CODE field may vary depending on the synchronous or asynchronous response in which the RESPONSE CODE field is included. The RESPONSE CODE field can include various values as follows.

 1 A RESULT OK value e.g. 0 can indicate that the request sent by the third party application was successfully received if received in a synchronous response or that the market application successfully communicated with the market server system if received in an asynchronous response . In the context of a CHECK PURCHASING SUPPORTED request this value can indicate that purchasing is supported.

 2 A RESULT USER CANCELED value e.g. 1 may be received in an asynchronous response to a REQUEST PURCHASE request and can indicate that the user cancelled the request for example by pressing the back button on a checkout interface e.g. in response to the user selecting the back button as shown in .

 3 A RESULT SERVICE UNAVAILABLE value e.g. 2 may be received in an asynchronous response and can indicate that market server system is unavailable for example because a network connection is unavailable.

 4 A RESULT PURCHASING UNAVAILABLE value e.g. 3 may be received in a synchronous response and can indicate that in app purchasing is not available because the API VERSION that was specified in the purchasing request is not recognized by the marketplace application . This value can also specify that the user is ineligible for in app purchasing for example because the user is in a country that is not authorized to provide in app purchasing.

 5 A RESULT PRODUCT UNAVAILABLE value e.g. 4 may be received in an asynchronous response and can indicate that the market server system cannot find the requested product in the in app product catalog . This value may be returned to a third party application when the product identifier is incorrectly formatted or when a product is listed in the in app product catalog but is unpublished.

 6 A RESULT DEVELOPER ERROR value e.g. 5 indicates that the third party application that is attempting to make a purchasing request has not declared a valid operating system permission in its manifest. This value can also indicate that the third party application is not properly signed e.g. as described with reference to and at boxes and or that the third party application sent a malformed request such as a request with missing bundle parameters or a request that uses an unrecognized request type.

 7 A RESULT ERROR value e.g. 6 indicates an unexpected server error. For example this error may be triggered if a developer attempts to purchase a product from itself which may not be allowed by the transaction processing system.

At box the third party application sends a CHECK PURCHASING SUPPORTED request. For example the message requestor and synchronous receiver of the third party application may include code that when executed by one or more processors requests that the bundle generator generate a bundle. The bundle generator may call the helper function makeRequestBundle CHECK PURCHASING SUPPORTED . As described above this function may generate a bundle that includes the three required parameters the PURCHASING REQUEST parameter specified as CHECK PURCHASING SUPPORTED the API VERSION parameter specified as 1 in this example and the APPLICATION NAME parameter identified as the name of the requesting application program . The CHECK PURCHASING SUPPORTED request may not include other parameters. Accordingly the message requestor may call the function sendPurchasingRequest bundle in order to send a request to the market application .

At box the market application executing on the same computing device as the third party application receives the request from the third party application . Specifically the purchasing service component receives the request.

At box as a result of receiving the request the purchasing service performs operations to determine whether in app purchasing is supported. In some examples the computing device includes metadata that identifies whether in app purchasing is supported either based on a value of the metadata or on presence of the metadata. In such examples the purchasing service may identify whether such metadata indicates that in app purchasing is supported or is not supported.

In some examples determining whether in app purchasing is supported involves the purchasing service requesting that the market server system determine whether in app purchasing is supported. In such examples the market server system at box determines whether in app purchasing is supported for example by identifying whether in app purchasing is restricted from use in a country in which the computing device is located. In some examples the market application may not contact the market server system to determine whether in app purchasing is supported.

At box the purchasing service returns a synchronous response to the third party application. The synchronous response includes a bundle having a single parameter the RESPONSE CODE parameter which can take four values in response to a CHECK PURCHASING SUPPORTED request RESULT OK RESULT PURCHASING UNAVAILABLE RESULT ERROR and RESULT DEVELOPER ERROR. The RESULT OK value may indicate that in app purchasing in supported. The other values are described in greater detail above. The CHECK PURCHASING SUPPORTED request from the third party application may not trigger any asynchronous responses.

At box the third party application receives the synchronous response. Although not repeatedly mentioned throughout this disclosure the message requestor and synchronous receiver is the component of the third party application that receives the synchronous response and sends every sendPurchasingRequest .

At box the third party application determines whether in app purchasing is supported. For example the third party application can parse the bundle received with the synchronous response to determine whether the RESPONSE CODE field includes the RESULT OK value. If the field includes the RESULT OK value the third party application may perform the operations of box . If the field does not include the RESULT OK value the third party application may perform the operations of box .

At box the third party application displays a user interface with in app purchase elements. For example the third party application user interface generator may request that the computing device display user interface elements that enable a user to initiate purchase of in app products e.g. elements and in . While such a user interface may be controlled by the third party user interface generator this disclosure generally refers to such operations as being performed by the third party application because the operations are being performed at the request of the third party application .

At box the third party application displays a user interface without in app purchase elements at all or with the in app purchase elements but in which the in app purchase elements are disabled. For example the third party application may not request that the computing device display user interface elements that enable purchase of in app products or may display such interface elements but disable their activation of a purchasing request when selected e.g. elements and may either not appear for display in user interface or may not cause the dialog box to appear when selected .

At box the third party application displays a user interface that includes one or more in app purchase elements. Box may provide the same operations as box and is repeated in for clarity.

At box the third party application identifies user selection of an interface element that is associated with a command for initiating purchase of an in app product. For example the third party application may identify that a user touched his finger to a region of a display that corresponded to display of the interface element to initiate purchase of the Portland bike map.

At box as a result of identifying the user selection the third party application sends a REQUEST PURCHASE request for receipt by the market application . Sending the request can include multiple operations. For example the third party application may first generate a bundle for inclusion in the request. As illustrated in the figure the request includes a purchasing request parameter an API version parameter an application name parameter a product identifier parameter and an optional payload parameter.

Third party application may generate the bundle by calling the bundle generator . The bundle generator calls the method makeRequestBundle REQUEST PURCHASE as described above. The bundle generator may further add to the bundle i the product identifier for the in app product that the user has requested to purchase and ii a developer payload. The developer payload may be an optional field and the market application may properly process the request whether or not the bundle in the request includes the developer payload parameter.

The developer payload is a string that is transmitted back to the third party application along with the transmission of any transaction information as described later in this disclosure. Moreover the developer payload can be transmitted to other devices associated with the computing device or a user of computing device . As such the developer may configure the third party application so that the payload transfers additional data concerning the purchase. The developer payload is described with greater detail throughout this disclosure.

After the bundle has been generated the third party application sends the request for receipt by the market application . The following is example code for generating a bundle for a Request Purchase request and for calling the sendPurchasingRequest method 

At box the market application receives the request. As a result of receiving the request the market application is configured to respond to the third party application with a single synchronous response and two asynchronous responses. Although not described repeatedly though this disclosure the purchasing service performs the bulk of operations described as being performed by the market application except for those designated as being performed by the purchasing screen user interface generator or the automatic canceller .

At box the market application processes the request for example by checking status information such as whether the request was correctly formed and whether the market application supports the API version listed in the request.

At box if the request is properly formed and the market application supports the API version the market application generates a bundle that includes a response code parameter a request identifier parameter and a pending intent parameter and sends the bundle to the third party application in a synchronous response. The response code parameter for a properly formatted result may specify the value RESULT OK. The request identifier parameter can include a request identifier that the market application generated to identify the particular request. The market application can store the request identifier for transmission in a subsequent asynchronous response. Using the request identifier the third party application program may be able to link an asynchronous response to a synchronous response and thus a same purchasing request.

The pending intent parameter can include a pending intent or specify a reference to the pending intent. A pending intent is an identifier for an activity that can be performed by the market application . In this example the activity is generation of a checkout user interface e.g. dialog box . By transferring the pending intent to the third party application the market application grants the third party application the right to launch the activity.

At box the third party application receives the synchronous response. The third party application analyzes the response code to determine that the response code was RESULT OK stores the request identifier in association with information identifying the particular request and extracts the pending intent.

At box the third party application uses the pending intent to launch the checkout user interface. As a result of the third party application launching the checkout user interface the dialog box may appear in the user interface. In some examples the market application provides the synchronous response without the pending intent and rather the market application directly launches the checkout user interface.

At box the market application receives an indication that the third party application has requested that the checkout user interface launch and in response requests that the purchasing screen user interface generator generate the checkout user interface. As a first step the purchasing screen user interface generator requests details regarding the purchase of the in app product from the market server system . The details may be used to customize the display of the checkout user interface. For example the market application accesses the application name and product identifier that were received with the purchasing request and provides these values and an indication of the requesting user to the market server system in a request for the details. The indication of the requesting user may be an indication of the computing device or an indication of a user account for the distribution platform for which a user of the computing device provided valid credentials. As described with reference to the request for details may include an identity certificate for the third party application program.

At box the market server system identifies the details for the in app product that the user is considering to purchase. For example the market server system may access the in app product catalog . Using the application name and product ID as an index the market server system can access information that is assigned to the in app product. The accessed information may include the information specified by the developer using the distribution platform developer site as shown in . This information can include for example the title of the product the description of the product and the price of the product in one or more currencies. This information can be at least temporarily stored by the market server system . The server system may before identifying the details for the in app product determine whether the received identity certificate matches an identity certificate that the server system had previously stored for the third party application program as described with additional reference in .

At box the market server system sends purchasing information to the transaction processing system . The purchasing information can include an indication of the user the product identifier and a price that would be debited from the user s account if the purchase is confirmed.

At box the transaction processing system receives the purchasing information. The transaction processing system can use the indication of the user to identify purchasing instruments that are associated with the user.

The transaction system may be a system that is configured to charge individuals for purchases using financial instruments. Example purchasing instruments include credit cards debit cards carrier billing e.g. with carrier billing an entity providing wireless connectivity to the mobile computing device can include the cost of purchases in a bill to a user of the mobile device for availability or use of the wireless connectivity and e commerce payment accounts. Entities and may be banks or credit card processing centers with which the transaction processing system communicates to debit an account associated with a particular financial instrument. Entities and can credit an account of the transaction processing system with the debited amount potentially with a processing charge subtracted from the debited amount .

The user may previously have provided user input that associates one or more purchasing instruments with the transaction processing system . For example the user may supply credentials for the user s account with the distribution platform to log into a web site for the transaction processing system . Once logged in the user may supply the web site with the user s credit card information for example by typing in the user s credit card numbers. The transaction processing system can validate the entered information through communication with one or more of the entities and .

At box the transaction processing system creates a transaction entity. The transaction entity may be a data structure that is generated to track a particular purchase of an in app product. As such at a later time the market server system may reference the transaction entity to request that the transaction processing system proceed with or cancel the transaction. Also the transaction processing system provides to the market server system an indication of the transaction entity and indications of the identified financial instruments. An example indication of a financial instrument is an indication that the instrument is a VISA card and along with an indication of the last four digits of the credit card number without providing the full credit card number.

At box the market server system receives the indication of the transaction entity and the indications of the purchasing instruments. The market server system stores the transaction entity and forwards to the market application the indications of the purchasing instruments and the in app product details e.g. title description and price as identified at box . The market server system may alternatively send to the market application an indication of an error for example that the market server system could not communicate with the transaction processing system that the requested in app product is unavailable or that the identity certificate received in the request for product details did not match the identity certificate stored for the third party application program.

At box the market application determines whether to send a negative asynchronous response code. For example the market application may determine to send a negative asynchronous response code as a result of the market application receiving from the market server system an indication of an error. On the other hand the market application may perform the operations of box and continue with normal processing as a result of receiving data from the market server system that is not indicative of an error.

At box the market application displays the checkout user interface for example the dialog box that is shown in . The purchasing screen user interface generator may generate the checkout user interface using a template display and may fill in particular fields or portions of the template display with information received from the market server system . As an illustration and with reference to the application name the name of the developer the product title the product description the purchasing instrument and the price may be specified by information received from the market server system and may not be a part of the template. The third party application may not store this information or send indications of such information in the purchasing request.

At box the market application determines whether the user confirmed purchase of the in app product. For example should the user select the back interface element or another interface element for cancelling the transaction not shown in the figures the market application may immediately perform the operations of box e.g. without sending the request to the market server system for performance of the operations at box . Should the user select a user interface element to confirm the purchase e.g. the Buy interface element the market application may send a purchasing request to the market server system . The purchasing request may indicate the financial instrument that the user selected. The purchasing request may include the developer payload.

At box the market server system receives the purchasing request triggering two asynchronous responses i a Response Code asynchronous response and ii an In App Notification asynchronous response. The Response Code asynchronous response is illustrated by transition and can provide status and error information about the request.

At box the market application sends to the third party application a Response Code asynchronous response. The response can include a bundle with a RESPONSE CODE parameter and a Request Identifier. The RESPONSE CODE parameter can take the values RESULT OK RESULT ERROR and RESULT DEVELOPER ERROR depending on whether the market application determined to send a negative asynchronous response box received an indication that a user cancelled the purchase box or received status information from the market server system box . The market application may send a single response code asynchronous response to the third party application even though different triggers for the response have been described and are graphically illustrated as arrows directed at box in .

At box the market application temporarily displays in those instances in which the purchase is pending and has not been cancelled due to user action or an error a user interface element that indicates to the user that the transaction is pending. For example the market application may request that the computing device display the dialog box for a determined period of time e.g. 30 seconds . Should the market application receive from the market server system an indication that the product has been purchased the market application may remove the dialog box before expiration of the determined period of time. For example the third party application may at box discussed hereinafter send to the market application an indication that the product has been purchased. As a result the market application may if the dialog box is still being displayed remove the dialog box from the display.

At box the third party application receives the asynchronous response and from the value of the response code determines whether the purchase is pending or has been cancelled e.g. due to user action or an error .

At box as a result of determining that the purchase has been cancelled the third party application requests display of a user interface element that indicates that the purchase has been cancelled. For example the third party application may request the display of an element that states cancelled not shown in the figures .

At box as a result of determining that the purchase is pending the third party application requests display of a user interface element that indicates that the purchase is pending. For example as an alternative to the pending element that is provided by the market application at box or upon the pending element that is provided by the market application being removed from the display the third party application may display interface element and or element .

At box the third party application program resumes operation. The third party application may not poll the market application or the market server system for the status of the purchasing request. Rather the third party application may await an asynchronous in app notification to perform any additional actions related to the purchasing request. As such a user of the third party application may be able to use the application and may be able to initiate purchase of additional in app products e.g. by selecting the Fort Collins interface element .

Resuming the discussion of the server side processing of a purchasing request at box the market server system has received the purchasing request from the market application and sends a request to the transaction processing system to debit an account associated with a purchasing instrument of the user. This request may be referred to herein as a charge request. The charge request may include the indication of the transaction entity stored at box and an indication of the purchasing instrument that the user has selected. The charge request may also include the price that is associated with the product and that is for a currency assigned to the purchasing instrument. In some examples such price may have been previously transmitted to the transaction processing system .

At box the transaction processing system receives the charge request and attempts to complete the transaction. The transaction processing system may do so by sending a debiting request to a system administered by the entity that issued the selected purchasing instrument e.g. one of entities and .

Sending the charge request and processing the charge request may involve additional actions beyond those described with respect to boxes and . These additional actions which can include actions performed by the market application on the user computing device are described with additional detail with reference to . Accordingly operations described with reference to may supplant the actions shown within box .

At box the transaction processing system sends to the market server system an indication that the purchase has either succeeded or has failed.

At box the market server system receives the indication and determines devices to notify about the transaction. For example the computing device may have sent the purchasing request to the market server system at the request of a user but an indication of the success or failure of the transaction may be transmitted to multiple devices that are associated with the user. For example the market server system may identify in a table or database a listing of devices that are associated with an account of the user. Such devices can include one or more telephones tablet computers netbooks laptops desktops television computers vehicle based computers and other appliance based computers.

At box the market server system generates a notification identifier that identifies transaction information for the purchase and adds the notification identifier to the notifications repository . The transaction information that is associated with the notification identifier is described in greater detail below with reference to description of a JSON string. Still the transaction information can generally include an orderID a name of the application that requested the purchase the identifier of the product that was purchased the developer payload and the purchase time.

The notifications repository can include notifications for other transactions associated with the account of the user for example if the computing device or other computing devices have yet to acknowledge receipt of the other transactions. The notifications stored in the notifications repository can each have the following fields. 1 Notification identifier. 2 Status The status can be Pending Received or Expired e.g. after 15 days without an acknowledgment . 3 Data The data can include the indication whether the purchase has either succeeded or has failed. 4 List of Devices A list of the devices determined for example at box . 5 List of Acknowledging Devices Devices may be removed from the list of devices and added to the list of acknowledging devices when a notification is acknowledged by a particular device. 6 Last Sent Timestamp This timestamp is used to determine an exponential backoff for repeated notifications. 7 Created Timestamp This timestamp is used to determine ultimate expiry of the notification. 8 Number of Attempts The current number of attempts to send the notification. 9 Ready To Send True if the notification is ready for sending.

At this stage the market server system may send to each of the devices a notification of the event that has occurred at the server system. Each device that receives the notification may process the notification in the same manner regardless of whether the device was the device that initiated the purchase. Similarly the market server system may handle an exchange of information with each device separately. Thus it is possible that the purchasing device may not receive the transaction information first for example if the purchasing device is temporarily disconnected from a network. These operations are described in greater detail below. This disclosure continues with a description of the operations performed by and with respect to individual ones of the identified devices e.g. computing device although all of the identified devices may operate in a similar manner.

At box the market server system sends to the market application an asynchronous In app notification response also referred to herein as an in app notify response notification response or notification . The notification response can include an array of notification identifiers for example those notification identifiers from the notifications repository that the computing device has yet to acknowledge.

The notification response may not include the substantive transaction information e.g. whether the purchase succeeded or was cancelled . In other words the notification response may not identify which state the purchase request is in e.g. whether it succeeded was canceled or was refunded . Rather the notification response may serve to inform the third party application that a change in purchasing state has occurred. The notification response itself may not be secured. For example the notification request may not include a nonce or be signed. As such the notification response can serve to essentially wake up the third party application or inform the third party application that transaction information is ready.

At box the market server system continues to identify whether the notifications repository includes notification identifiers for the computing device and if so performs the operations of box . The market server system may institute a delay between each sending of a notification response e.g. an exponential backoff . As described throughout this disclosure a device may be moved from the list of devices field to the list of acknowledged devices field as a result of the market server system receiving an acknowledgment from the computing device .

At box the market application receives the notification response from the market server system . The notification response from the market server system may identify the application program from which the in app product was purchased. Accordingly the market application may determine whether the identified application is installed on the computing device . If so the market application may perform the operations of box . If not the market application may send an indication to the market server system to remove for the notification identifier in the notification repository the computing device from the list of devices field.

At box the market application sends the in app notification response to the third party application . The notification response may include the one or more notification identifiers sent from the market server system to the market application .

At box the third party application receives the notification response and prepares a GET PURCHASE INFORMATION request for transmission to the market application . The request will be secured and will have a nonce as discussed below.

At box as a first stage in sending the Get Purchase Information request the third party application requests generation of a nonce. A nonce number used once is a cryptographically secure number. The nonce is returned with the asynchronous response to the Get Purchase Information request and as such enables the third party application to verify that the response corresponds to a request that the third party application made and is not a response that was spoofed by a malicious user . The nonce may be valid for a single response. The nonce can be generated by the third party application or the third party application can request that the nonce generating and verifying system at the third party server system generates the nonce.

At box the third party application generates a Get Purchase Info request. Generating the request includes creating a bundle that includes the three typical fields Purchasing Request API Version and Application Name along with a field that includes the generated nonce and a field that includes the received array of one or more notification identifiers.

At box the third party application sends the Get Purchase Info request for receipt by the market application e.g. in a sendPurchasingRequest method call .

At box the market application receives the request and if the request is properly formed and there are no errors sends a synchronous response at box for receipt by the third party application at box . The market application also sends the Get Purchase Info request or a derivation thereof to the market server system .

At box if the request is properly formed and there are no errors the market server system sends an asynchronous response code response to the market application . As described above the asynchronous bundle includes two parameters a response code parameter and a request identifier parameter. The response code can take the values RESULT OK RESULT ERROR and RESULT DEVELOPER ERROR. The request identifier can enable the third party application to link the asynchronous response to the synchronous response and thus the Get Purchase Info request.

At box the market application receives the asynchronous response and forwards the response to the third party application .

At box the market server system identifies from the notifications repository transaction information that is associated with the one or more notification identifiers.

At box the market server system generates a response. In addition to the identified transaction information the response may include the nonce that was received with the Get Purchase Info request. The response may also be signed so that the third party application can verify the integrity of the response.

At box the market server system sends a PURCHASE STATE CHANGED asynchronous response for receipt by the market application .

At box the market application receives the response and sends the asynchronous Purchase State Changed response to the third party application .

At box the third party application receives the response. The response may include a data string and a signature string. The data string may be a JSON string that contains information about the purchasing transaction such as order number price and the product that was purchased or refunded. The signature string represents the signature of the JSON string. In other words a JSON string is signed and the signature also called an identity certificate is sent to the third party application along with the JSON string. The JSON string may be unencrypted.

 1 Nonce A number that is used once and that was sent in the GET PURCHASE INFORMATION request. The market server system sends the nonce back as part of the JSON string so that the third party application can verify the integrity of the message as being the first response to the Get Purchase Information Request.

 2 NotificationId An array of one or more unique identifiers that were received in the in app notify asynchronous response and sent in the Get Purchase Info request.

 3 orderID A unique order identifier for the transaction. This unique identifier may be an identifier for the transaction entity.

 6 purchaseTime The time that the product was purchased for example in milliseconds since an epoch e.g. Jan. 1 1970 .

 7 purchaseState The purchase state of the order. Possible values can include 0 purchased 1 canceled or 2 refunded .

 8 developerPayload A optional developer specified string that contains supplemental information about an order. The computing device may have specified this string in the Request Purchase request.

At box the third party application beings the process for verifying the integrity of the response by requesting that the nonce verifier verify the nonce . The nonce verifier may have stored the nonce locally on computing device or for additional security may send the received nonce to the third party server system for remote verification of the nonce by the nonce generating and verifying system at box . The use of nonces can prevent the spoofing of messages. A message that includes a nonce may be valid only if the message is the first response that includes the nonce.

At box the signature verifier verifies the signature for example the signature of the example JSON string described above. The signature verification may be performed by the signature verifying system on the third party server system at box and not on the computing device . Performing the verification process on a server can make it difficult for malicious users to break the verification process by reverse engineering the application installation file.

The third party application or its third party server system can verify the signed response using the public key portion of an RSA key pair provided to the developer in a web page generated by the developer site generator . The use of a signature can help detect responses that have been tampered with.

At box the third party application determines whether the nonce and the signature are correct for example to determine whether the received information is authentic. The signature may include a hash value generated from the JSON string.

At box as a result of determining that the received information is not authentic the third party application may terminate this iteration of the process and may await another in app notification message e.g. as discussed at box .

At box as a result of determining that the received information is authentic the third party application may clear the Pending element. For example the third party application may remove pending element and may change element from Pending to Loaded as shown by element . The third party application may send to the market application an indication that the product has been purchased. As a result if the dialog box is still being displayed the market application may request that the dialog box be removed from the display.

At box the transaction storer stores the transaction information. For example the transaction storer may store an indication that a particular product has been purchased. In some examples the transaction storer requests that the third party server system store the transaction information in transaction information storage . Remote storage enables the information to be easily recovered if the third party application has to be reinstalled.

At box the third party application retrieves the purchased content. In various examples the market server system does not provide digital content for receipt by the third party application . Rather the market server system operates to provide an indication that a user had purchased the digital content. The third party application and the third party server system may be responsible for providing the digital content. As an illustration the Portland bike map may have already been stored by the third party application program in the delivered content storage but the third party application program may not unlock the map for display to the user until the application identifies that the map was purchased e.g. by identifying a successful determination at box .

In some examples upon identifying that the map was purchased the third party application may provide an indication of a successful purchase to the third party server system . The content delivering system may authenticate the request and return the map to the third party application at box for storage in the delivered content storage . In some examples the third party server system may not return the map to the third party application unless the third party server system verified that the nonce was correct see box and that the signature was correct see box .

In some implementations the market server system provides the third party application with the purchased content e.g. an image pack with which the third party application may generate a display of additional game levels or requests that another computing system make the purchased content available to the third party application . For example at box the third party application may request that the market server system provide the digital content for receipt by the third party application. The request to the market server system may include a code received in the Purchase State Changed response e.g. in the signed JSON string and which the market server system may use to verify that the request from the third party application is a valid request for purchased content e.g. that the product has been purchased by a user of the computing device . In another example the market server system sends the purchased content for receipt by the third party application along with the Purchase State Changed response. For example the purchased content may be included in the signed JSON string.

At box as a result of determining that the signature and the nonce are correct box the third party application generates and sends a CONFIRM NOTIFICATIONS request. The confirm notifications request can include a bundle with four parameters the normal three parameters and a parameter that includes the array of notification identifiers that was sent with the Purchase State Changed response.

The confirm notifications request triggers a synchronous response originating from the market application as shown by boxes and and an asynchronous response originating from the market server system as shown by boxes and .

At box the market server system moves the computing device from the list of devices and to the list of acknowledged devices for each notification identifier in the array. The notification identifier may remain in the notification repository if other devices are still included in the list of devices.

The third party application may not automatically re send the Get Purchase Info request should the third party application not receive one or more of the synchronous response at box and the asynchronous response at box for example because the Confirm Notifications acknowledgment was lost before being received. Rather the third party application may continue operate as typical

Should the third party application receive another in app notification potentially with the same or additional notification identifiers because the Confirm Notification request was lost the third party application can generate and send a new Get Purchase Info request with a newly generated nonce. In response to sending the request the third party application may receive transaction data and can then send another Confirm Notification response. As such the third party application may acknowledge a notification identifier multiple times. Each of the devices that sends a Get Purchase Info request in response to notification identifier may generate and send different nonces in the requests.

At box the third party application receives an indication that a user is attempting to access purchased content. For example the third party application may receive an indication that a user selected user interface element . In some examples instead of immediately providing the user with access to the associated content the third party application requests that the third party server system verify that the user can access the content. For example the third party server system may determine whether or not the transaction information storage includes an indication that the user has purchased the content. If so the third party server system may return to the third party application an indication that the third party application can access the associated content. If not the third party server system may return an indication that the third party application should not access the associated content. In some examples the content is associated with a content feed that requires regularly granted permissions to access the content feed. Use of server side access verifications permits developer revocation of permission to access a product and can secure use of in app products to those users that purchased the products.

At box a user interface is provided. The user interface may include includes elements with which a developer of an application program can specify multiple prices in multiple respective currencies for which a product is to be offered for purchase. For example developer site generator may provide the user interface shown in for display to the developer on a remote computing device for example by transmission of code over the Internet and for receipt by the remote computing device the code causing the remote computing device to display the user interface. The application program may be configured to permit a user of the application program to initiate purchase of the product from an interface that is provided by the application program. For example the Local Bike Maps application program includes an element that when selected initiates purchase of the Portland bike map product.

At box an indication of user input that specifies a first price for a first currency is received. For example the developer site generator may receive an indication of user input by the developer that specifies a first price of the multiple prices the first price being for a first currency. The user input may include the developer specifying the value 1 in field . User specification of a price includes the user typing or otherwise providing input that defines the price in distinction to selecting an element that copies a price that may have been displayed to the developer and that the developer did not define.

At box a second price for a second currency is determined. For example the developer site generator may determine the price 0.78 EUR as shown in field or as exchange price

At box determining the second price for the second currency includes receiving user input specifying the second price. For example the developer site generator may receive an indication of user input by the developer that specifies the second price through receiving an indication that the developer specified the value 0.78 in field

At box determining the second price for the second currency includes identifying an exchange rate between the first currency and the second currency and determining an exchange price by applying the exchange rate to the first price. For example the developer site generator may access a remote service that maintains current exchange rates between various currencies. Moreover the developer site generator may multiple the first price by the exchange rate to determine the exchange price. In some examples the exchange price is automatically populated in user editable field as the second price without user input specifying the second price. In some examples the exchange price is displayed as exchange price permitting the developer to specify the second price in field while the exchange price is concurrently displayed.

At box an indication is received the indication being of user input by the developer that specifies that the second price is to occasionally change as an exchange rate of the first currency to the second currency changes. For example the developer site generator may receive an indication that the developer selected element . An occasionally changing exchange rate may be an exchange rate that changes regularly or irregularly.

At box an indication is received the indication being of user input by the developer that specifies one of multiple different increments of the second currency to which the second price is to change over time as an exchange rate of the first currency to the second currency changes. For example the developer site generator may receive an indication that the developer selected an increment using slider element

At box an indication is received the indication being of user input by the developer that specifies a minimum value or a maximum value that the second price may not fall to or beneath as an exchange rate of the first currency to the second currency changes. For example the developer site generator may receive an indication that the user specified the value 5 in field and an indication that the user specified the value 10 in field

At box the first price and the second price are stored for subsequent presentation to a prospective purchaser of the product as alternative prices. For example the market server system may store the first price and the second price for subsequent presentation to a prospective purchaser as the prices shown in .

At box the exchange rate of the first currency to the second currency is identified to have changed and subsequently the second price is re determined. For example the market server system may determine after the developer has selected the save element and after the second price in dialog box has been displayed to at least one prospective purchaser that the exchange rate between the first currency and the second currency has changed. As a result the market server system may re determine the second price by applying the newly identified exchange rate to the first price. The second price that has been re determined may be displayed to another prospective purchaser for example in dialog box but on a different computing device .

At box the second price that has been re determined is rounded to the increment specified by the developer. For example the market server system may access the indication received from the user as discussed above and may round the second price that has been re determined up or down to a value identified by the increment. For example at an increment of 0.1 euro a price of 1.23 euro may be rounded to 1.2 euro. At an increment of 0.25 euro a price of 1.23 euro may be rounded to 1.25 euro. The increments may be evenly divisible into 1.0 euro and as such the values to which the price can round to may be marked off by the increment starting 0.0 euro.

At box the first price and the second price are provided to a remote computing device for display to the prospective purchaser of the product. For example the prices may be provided to computing device for display as the prices in . In this example the price GBP 0.5 is presented upon user selection of the RBS purchasing instrument option from the pull down menu. The price USD 1 is presented upon the user selecting the VISA purchasing instrument from the pull down menu. A presentation of the USD 1 price may replace the presentation of the GBP 0.5 price. For example the USD 1 price may not be displayed concurrently as the GBP 0.5 as a result of the user selection of the VISA purchasing instrument even should the prices momentarily display concurrently during a transition between the displays.

At box a request to purchase a product is received. For example the computing device may receive a request to purchase a product. The request may initiated by a user of the Local Bike Maps application program from a user interface provided by the application program

At box multiple different purchasing instruments of the user are identified. For example the computing device may access stored indications of the purchasing instruments. Previously the computing device may have sent a request to the market server system for purchasing instruments that are associated with a user of the computing device . The request may include an indication of the user e.g. an indication of a user account . The market server system may have stored indications of the purchasing instruments as described throughout this disclosure and may return indications of such purchasing instruments to the user. Each of the purchasing instruments may be assigned a primary currency for example a currency in which purchases may be transacted without incurring additional fees. The primary currency may be a currency in which a balance of the purchasing instrument is presented to the user. The primary currency for each purchasing instrument may be provided from the market server system to the computing device .

At box a first price for the product in the first currency and a second price for the product in the second currency are identified. For example the computing device may access stored indications of such prices. Previously the computing device may have sent a request to the market server system for prices for the product. The market server system may retrieve the prices from in app product catalog and may send the prices to the computing device .

At box a user interface for purchasing the product is presented. For example the dialog box that is shown in may be presented to the user. The user interface may present the first price in association with an indication that the user has selected the first purchasing instrument and present the second price in association with an indication that the user has selected the second purchasing instrument.

At box user input is received the user input being for causing a change in a selected purchasing instrument. As a result the first price may be replaced with the second price. For example as a result of the user changing the selected purchasing instrument from VISA to RBS by selecting element the price that is displayed by element may change.

At box a first request is received from a first third party application program that is executing on a computing device and that was developed by a first entity the first request being to purchase a first product for use within the first third party application program. For example the market application may receive the Request Purchase request from third party application as described at box .

As described further throughout this disclosure the market application may be developed by an entity. An entity is an individual person or organization of persons such as a corporation or a non profit group. The entity that developed the market application may be different than entities that developed third party application programs that interact with the market application . The entity that developed the market application may manage an application distribution platform. As described herein an application distribution platform is a computerized service that enables users to browse listings of application programs and download application programs therefrom.

The entity that developed the market application may be an entity that operates a computerized service that charges users of third party application programs for products that may be used in the respective third party application programs. For example a product may be purchased by selecting an element in a user interface that is provided by a particular third party application program. The features provided by the purchased product may be illustrated by one or more elements in the user interface that is provided by the particular third party application program and may not have been provided in the user interface without the purchase of the product. For example an element that indicates a health of a game character may indicate an increased health as a result of a user purchasing game character health. As another example an element that enables a user to view an additional portion of the user interface may activate as a result of a user purchase e.g. a button for viewing an additional game level may activate as a result of the user purchasing the additional game level . The computerized service may credit financial accounts of developers of the third party application programs. The market application may be developed by an entity that developed server side processing that facilitates in app purchasing.

At box in response to receiving the first request a purchasing user interface is customized to include first details that are specific to the first product. For example the purchasing screen user interface generator displays the dialog box that is shown in . The computing device may display instances of dialog box in response to product purchasing requests by different third party applications. Different instances of dialog box may have a same size same arrangement of user interface elements same color scheme and same characteristics of user interface elements e.g. font size font color and font type regardless of the product that is being purchased and regardless of the third party application program from which purchase of the product was initiated.

The content of the user interface elements in different instances of dialog box may vary. As shown in element displays the title Portland to indicate that the Portland bike map product is being purchased. Element however may display a different title as a result of a request to purchase a differently named product. Similarly element displays a description that varies depending on the individual product that is being purchased. Likewise element displays one or more prices that change depending on the product that is being purchased. As such the same purchasing user interface may be customized for purchase of different products. Furthermore elements and which identify the title of the third party application program from which the product purchasing request was initiated and the name of the developer of the third party application may identify different application program titles and developer names as the third party application program from which the purchasing request initiated changes.

At box a request for details is sent to a remote computing system and the details are received from the remote computing system in response. The details may be used to customize the purchasing user interface and may be specific to the product that is being purchased. For example the purchasing screen user interface generator may request from the market server system details that are used to generate the display of the purchasing user interface e.g. dialog box as described with respect to box . In response and as described with respect to box the purchasing screen user interface generator may subsequently receive the details from market server system .

At box the details include a product description. For example the request that is described with respect to box may identify the product for which the third party application program has requested purchase. The market server system as described with respect to box may include instructions that cause the market server system to use the identification of the product to identify a description and other details in some implementations in response to receiving the request. The description may be identified by the market server system from the in app product catalog . The description may have been specified by a developer of the third party application program. The developer of the third party application and the product that is being purchased may be the same e.g. because the same organization may have created or requested creation of the third party application and the product even though different individuals in the organization or at the request of the organization may have created the third party application program and the product .

At box the details include one or more prices for the product that is being purchased. As described above the market application may send to the market server system a request for details associated with a product at box and may receive the details in response at box . The details may include a single price for the product in a single currency or may include multiple prices for the product in multiple respective currencies. As described with respect to boxes and the market server system may identify the multiple currencies as being the default currencies that are assigned to multiple purchasing instruments of the user.

At box the details include a security image that is assigned to the user of the computing device e.g. a user account for which the computing device provided correct credentials . For example the market server system may use an identifier of the user to request from another system a security image that is assigned to the user.

A security image may be an image that is assigned to an account of the user and that is not provided for public dissemination by a system that manages the user account. For example a computerized billing system e.g. the transaction processing system may display the security image to the user after the user supplies a user name portion of the user s credentials but before the user supplies the corresponding password of the user s credentials during a process for logging into a web page for the transaction processing system . User accounts for the computerized billing system may be assigned different security images. The computing device may present the security image in various instances of dialog box e.g. each and every time that instances of dialog box are shown in association with a user s account . The display of the security image indicates that the dialog box is authentic for example that the dialog box was generated by the in app billing system and not generated by the requesting third party application in a phishing effort to obtain the user s privileged information. Use of a security image includes use of a security motion picture e.g. a movie .

In some examples in addition to or as an alternative to the display of the security image in dialog box the computing device provides an alert that indicates that the concurrently displayed dialog box is authentic. An application program may not be able to request that the computing device provide the alert without the application program being assigned one or more operating system permissions. The one or more permissions may be assigned to the market application but may not be assigned to the requesting third party application program or in some examples any third party application program. Example alerts include sounds tactile feedback and one or more displayed interface elements e.g. an icon displayed in status bar .

The details can also include an indication of one or more purchasing instruments that are associated with an account of the user as described with reference to . As such the user may use the common purchasing interface to manage the purchasing instruments. For example the user may switch between different purchasing instruments and view the in app product price that is specific to each of the purchasing instruments. Moreover a user may use the common purchasing interface to add for association with the user s account a new purchasing instrument that was not previously associated with the user s account. As shown in dialog box can show names of the purchasing instruments e.g. VISA and RBS and at least a portion of the account number for each of the purchasing instruments e.g. xxxx 8432 and xxxx 8372 . Further the user may infer that the common purchasing interface is legitimate e.g. not a phishing attempt if the names of the purchasing instruments and or the at least portions of the account numbers represent the user s actual one or more purchasing instruments and associated one or more account numbers.

At box a template is accessed and the details are filled into the template. For example the purchasing screen user interface generator may access the purchasing user interface template and perform operations that insert the received details into the template e.g. a copy of the template in situations in which the template is read only . This modified template may be displayed by the purchasing user interface generator . A template may be a collection of code that an application program can execute to generate a display. The collection of code may receive input parameters that specify content for interface elements that are specified by the template. As discussed throughout this disclosure an operation by a component of the computing device e.g. the purchasing user interface generator to display a user interface includes the component requesting that the computing device display the user interface.

In some examples the third party application that initiated the product purchase request does not receive the template or the details that are requested by the market application . For example the market application may receive the requested details from the market server system but the market server system and the market application may not provide the details or the template to the third party application . Moreover the third party application may not include the details or the template . For example the third party application may comprise a collection of code that is stored by the computing device . The collection of code may have been downloaded from an application program distribution platform. This collection of code may not include the requested details or the template .

Furthermore the third party application may not be configured to access the requested details or the template . For example the third party application may not include code that when executed causes retrieval of the details or the template to the third party application . The details and or the template may not be accessible to the third party application . For example a remote application or system may not be configured to provide the details and or the template to the third party application program for example because the third party application program may not have proper credentials with which to authenticate access to a system that would provide the details and or the template to the third party application program .

At box a second request is received from a second third party application program that is executing on the computing device and that was developed by a second entity the second request being to purchase a second product for use within the second third party application program. For example the market application may receive the Request Purchase request as shown at box but from another third party application program.

At box in response to receiving the second request the purchasing user interface is customized to include second details that are specific to the second product. For example the purchasing screen user interface generator displays the dialog box that is shown in but including details for a product for which the user of the computing device requested purchase with the other third party application program. For example the user may have launched a Music Streaming Service third party application program that offers two hours of free listening. After the two hours of free listening has expired the user may select a Purchase Additional Time interface element. In response the computing device may display a dialog box similar to that shown in except that the application program title in app product developer name in app product title in app product description and price may specify content that is specific to the Music Streaming Service application program. Moreover the operations of box can include operations that are similar to those described with respect to boxes and except the operations are specific to the second third party application program.

In general a third party application program may specify with a request to purchase an in app product an attribute of the product. The attribute of the product may be returned to the third party application program along with an indication that the product has been purchased. The attribute of the product may be an optional field that the third party application may or may not specify with any particular request to purchase a product. The round trip transmission and receipt of the attribute of the product may relieve the third party application program from having to save the attribute of the product for a duration of time during which the purchasing request is being processed.

The market application may receive the request to purchase the product and the market application may transmit the attribute of the product to the market server system . The market server system may send the attribute of the product not only back to the computing device at which the product purchase request originated sometimes referred to herein as the originating computing device but also to one or more other computing devices that are associated with the originating computing device or a user of the originating computing device. As such transmitting the attribute of the product along with the product purchasing request enables a device at which a purchasing request originated to communicate the attribute of the product to other associated devices.

The attribute of the product may not be limited to specified values by a standard or an Application Program Interface although the attribute of the product may have a maximum length for example 256 bytes . As such the attribute of the product may be any developer specified value. The attribute of the product may be used in various manners.

In some examples the attribute of the product specifies an index at which information associated with the product is stored in a database e.g. a table stored on the user computing device or a database stored at the third party server system . For example the database may store any combination of i an indication whether the product has been purchased ii a variation of the product as discussed below iii a location of the originating computing device at a time at which the product was purchased iv a brand of the originating computing device and v a model of the originating computing device. As such the in app billing system propagates the index value to the other devices that are associated with the originating computing device. These other devices are then able to identify a location in the database of the information that is associated with the product. Propagation of the index value enables inter device communication of data that is greater than a size of data permitted by the field for the attribute of the product.

In some examples the attribute of the product specifies a measure of the product. For example the third party application program may be a role playing game and the product may be potion to restore a game character s health. In this example the user may request purchase of the potion while the game character has a first level of health e.g. 30 . The purchasing request may be accompanied by an attribute of the product that specifies a measure of the product e.g. a measure of potion to restore 70 of the game character s health . As such should the game character lose further health while the potion is being purchased the game character may receive only the specified measure of the product so as to restore only the level of health that was missing when the purchasing request was originally provided. In other words the third party application may receive an indication that the potion product was purchased along with an indication that the potion is to restore 70 of the user s health even if the user s health had dropped to 10 . The cost to purchase health may not depend on the amount of health purchased as specified by the attribute of the product.

In some examples the attribute of the product specifies a variation of the product. For example the third party application program may be a role playing game and the product may be clothes for a game character or food for the game character. The market server system may permit purchase of a shirt product or a food product but may not specify variations of the shirt e.g. whether the shirt is a red shirt a green shirt a button up shirt or a t shirt or variations of the food product e.g. whether the food is a pizza a milkshake or a burrito . In other words the in app product catalog may store an identifier for the shirt product and an identifier for the food product but may not store identifiers for the variations of the shirt product and the food product.

A particular variation of a purchased product as specified by an attribute of the product may not be used by the market server system for purposes of purchasing the product. Still the particular variation of the product may be used by the third party application program . For example the third party application program may use an indication of a variation of a product to generate a correct display of the product e.g. so that the game character wears a shirt that is red and eats food that is pizza . Transmitting the variation of the product in the attribute of the product enables instances of the third party application on other computing devices to recognize the variation of the product and display the product with the correct variation.

In some examples the attribute of the product specifies a user account associated with the third party application into which a user had logged in when the user requested purchase of the product in distinction to a user account of the computing device operating system or a user account of the in app billing system . For example the third party application after launch of the third party application may request that a user select a user account into which the user is to log in. The user may have to provide credentials e.g. a password or a username and a password to login to a particular user account. Products purchased with one user account may not be available for use by a user logged into another user account unless the user of the other user account also purchased the product. As such the product attribute can specify the user account with which the product is being purchased. Accordingly instances of the third party application executing on other user devices may associate the purchased product with the purchasing user account in distinction to associating the purchased product with all user accounts with which a user may access interfaces provided by the third party application.

In box a third party application program executing on a computing device provides a user interface with which a user of the computing device is able to request purchase of a product that is for use by the third party application program. For example the third party application may perform the operations of box to display the user interface as shown in . A product is used by a third party application program if the third party application program provides a user interface from which the product is presented or can be activated.

In box the third party application program receives an indication that the user provided input requesting purchase of the product. For example the third party application may perform the operations of box as a result of the user selecting the Portland element as shown in .

In box the third party application program sends for receipt by a particular application program i a request to purchase the selected product and ii an attribute of the product. For example the third party application program may perform the operations of box to send a Request Purchase request for receipt by the market application . As described throughout this disclosure the Request Purchase request is configured to include an optional payload also referred to herein as an attribute of the product .

The Request Purchase request may also include a product identifier. The product identifier may uniquely identify the product from a collection of products that a user is able to purchase from a user interface provided by the third party application program. For example the user interface enables a user of the computing device to purchase a Portland map product and a Fort Collins map product. Each of these products may be associated with an identifier that is unique among the products offered for purchase by the Local Bike Maps application program. As described throughout this disclosure the application identifier may be used by the market server system to obtain information regarding the product from the in app product catalog .

As described throughout this disclosure the request may include both the attribute of the product and the product identifier. For example the Request Purchase request includes the attribute of the product i.e. the developer payload and the product identifier as parameters of the request. In various examples the request the attribute of the product and the product identifier are sent in separate transmissions although the market application may await receipt of all three items before requesting purchase of the product from the market server system . The attribute of the product may not be the product identifier and may not be the application name. The attribute of the product may take different values for a particular product.

At box the particular application receives the request to purchase the product and the attribute of the product. For example the market application performs the operations of box to receive the Request Purchase request.

At box the particular application sends a request for receipt by a server system to purchase the product and the attribute of the product. For example the market application performs the operations described with respect to box to send a purchasing request to the market server system . The purchasing request sent from the market application to the market server system may be the same as or different than the request sent from the third party application to the market application .

At box the server system receives a request to purchase the product and the attribute of the product. For example the market server system may perform the operations of box .

At box the server system requests that a user account is debited for a cost that corresponds to a cost of the product. For example the market server system may perform the operations of box to request that a transaction processing system debit the user account for the cost that corresponds to the cost of the product e.g. the cost of the product a cost of the product after application of a coupon or a cost of the product after taxes have been added . The user account may be a user account that is assigned to the computing device for example one of multiple user accounts associated with the in app billing system for which a user of the computing device provided valid credentials at the computing device .

At box the server system identifies other devices to notify about the purchase of the product. For example the market server system may perform the operations of box to identify other devices that are assigned to the above described one user account.

At box the server system sends for receipt by the particular application an indication that the product has been purchased and the attribute of the product shown together as element . For example the market server system may perform the operations of box to send a Purchase State Changed response to the market application . A similar Purchase State Changed response may be sent to each of the computing devices associated with the above described one user account. The indication that the product has been purchased may be a value in the purchaseState field of the JSON response e.g. the value 0 indicating that the product has been purchased see description with respect to box . As described with reference to the Purchase State Changed response may be sent as a result of the market server system sending an In App Notification see box to each of the computing devices and the computing devices each sending a Get Purchase Info request see boxes and .

The server system may send for receipt by the particular application a signature with which the indication that the product has been purchased and the attribute of the product have been signed with a cryptographic key. For example the market server system may apply a deterministic procedure to the indication that the product has been purchased and the attribute of the product to generate a hash value e.g. a single string . The market server system may encrypt the hash value and possibly other information using either a public key or a private key from a pair of public and private cryptographic keys that are mathematically linked. The encrypted hash value referred to as a certificate may be sent with the indication that the product has been purchased and the attribute of the product. As described later the other of the public key or the private key may be used by the third party application to verify that the indication that the product has been purchased and the attribute of the product were sent by the market server system and not a malicious device.

At box the particular application program receives the indication that the product was purchased and the attribute of the product. For example the market application may receive the Purchase State Changed response as described with respect to box . The signature may also be received with the indication and the attribute

At box the particular application program may send for receipt by the third party application program the indication that the product has been purchased and the attribute of the product shown as element . For example the market application may send the Purchase State Changed response as described with respect to box . The signature may also be sent with the indication and the attribute.

At box the third party application program may receive from the particular application program the indication that the product has been purchased and the attribute of the product. For example the third party application program may perform the operations of box . As described above the indication that the product has been purchased and the attribute for the product may be signed e.g. they may be accompanied with the signature .

At box the third party application program may decrypt the signature or request decryption of the signature by another system. The signature may have been generated by applying a first cryptographic key e.g. a public key or its corresponding private key to a hash also called a digest of the indication that the product has been purchased and the attribute of the product. A second cryptographic key e.g. the other of the public key or its corresponding private key may be used to decrypt the signature. For example the third party application may perform the operations of boxes and .

At box the third party application provides the user with access to the purchased product. For example the third party application may determine whether the signature is correct e.g. by analyzing whether the hash value in the signature matches a hash value of the signed information box and if so may change the user interface so that the user is presented with the purchased content or is able to access the purchased content. For example interface may change so that element includes the text Purchased and so that element becomes activated. As such when element is selected by a user the computing device displays a Portland bike map.

At box a first computing device provides a user interface with which a user may purchase a product. The user interface may be provided by a third party application program. In other words the user interface may be specified by instructions of the third party application program. For example third party application at the computing device may perform the operations of box to display interface see .

At box the first computing device receives input requesting purchase of the product. The first computing device may identify that a user of the computing device provided input to purchase the product using the interface that is provided by the third party application program. For example the third party application at the computing device may perform the operations of box in order to identify that a user selected the Portland interface element that is presented by user interface see .

At box the first computing device sends a request to purchase the product. For example the third party application and or the market application may perform the operations of box and or box to send for receipt by the market server system a request to purchase the product.

At box the server system receives as having been sent by the first computing device the request to purchase the product. For example the market server system may perform the operations of box .

At box the server system requests to charge an account that is associated with a user of the first computing device for a price that corresponds to a price of the product. The account that is associated with the user may be different than the user account to which each of the multiple computing devices is assigned. For example the market server system may perform the operations of box to request purchase of the product. The charged price may correspond to the price of the product for example by being the price of the product or being based on the price of the product e.g. by adding tax or discounting a value of a coupon from the price of the product . Requesting purchase of the product may include requesting that the account that is associated with the user be charged for the price and may not involve requesting a delivery of the product from the server system.

At box a transaction processing system requests to charge the account that is associated with the user. For example the transaction processing system may perform the operations of box to either charge the account that is associated with the user or to request that another system e.g. entity or charge the account that is associated with the user.

At box the transaction processing system sends an indication that the account has been charged. For example the transaction processing system may perform the operations of box . Sending an indication that the account has been charged may include sending an indication that the account is to be debited for the cost that corresponds to the cost of the product. For example the indication that the account has been charged may be sent by the transaction processing system after the transaction processing system has determined that the user account includes sufficient funds but before the transaction processing system verifies that the account that is associated with the user has been debited for the cost that corresponds to the cost of the product.

At box the server system receives an indication that the account has been charged. For example the market server system may perform the operations of box .

At box the server system identifies devices other than the first computing device that are assigned to the user account. For example the market server system may perform the operations of box . The multiple devices that are assigned to the user account may be devices at which the user of the computing device provided user input supplying credentials e.g. username and password for the user account. The user account may be a user account for the in app billing system for example a user account to which the user s purchases of in app products in the in app billing system are associated. The user account for the in app billing system may also be a user account for the application distribution system e.g. an application marketplace . In this example the market server system identified that a second computing device is assigned to the user account.

At box the server system sends for receipt by each of the multiple computing devices that are assigned to the user account a notification that a purchasing event has occurred. A separate notification is sent to each of the multiple devices although the notification may be the same. For example the market server system may perform the operations of box for each of the devices that are assigned to the user account. A purchasing event may include the market server system receiving from the transaction processing system an indication that a request to purchase a product has been successful e.g. confirmed or has been cancelled or that a refund has been received for a previously purchased product.

The market server system may after a length of time determine whether the market server system has received from each particular one of the multiple computing devices a confirmation that the particular computing device received the notification that the purchasing event has occurred. The confirmation may be a request for details of the purchasing event as described in additional detail below .

At box the first computing device receives the notification that the purchasing event has occurred. For example the computing device may perform the operations of box . The second computing device also receives the notification that the purchasing event has occurred. For example another computing device may perform the operations of box . The notification that is sent to the first computing device and the notification that is sent to the second computing device may be the same. For example other than a addressing information e.g. a destination address and a source address the content of the notifications may be the same. The notifications may not specify that the product has been purchased. Rather and as described with reference to box each notification may serve to wake up the recipient computing device and may prompt the recipient computing device to send a request for the details of the purchasing event.

At box the first computing device sends a request for details of the purchasing event. For example the computing device may perform the operations of box and or box to send the Get Purchase Info request. As described with respect to boxes and the request may include a nonce. Each request may include a different nonce and the first computing device may be configured to process a single response that includes any particular nonce. Subsequent responses that include the particular nonce may be discarded by the first computing device at least until the first computing device sends another request that uses the nonce . At box the second computing device sends a request for details of the purchasing event. The second computing device may also perform the operations of box and or box .

At box the server system receives from the first computing device the request for details of the purchasing event. For example the market server system may perform the operations of box for a request that was sent by the computing device . At box the server system receives from the second computing device the request for details of the purchasing event. For example the market server system may perform the operations of box for a request that was sent by the second computing device.

At box the server system sends for receipt by the first computing device an indication that the product has been purchased. For example the market server system may perform the operations of box . In this example the indication that the product has been purchased may be a Purchase State Changed response that includes a value of 0 purchased in the purchaseState field of the JSON string in the Purchase State Changed response. At box the server system sends for receipt by the second computing device an indication that the product has been purchased. For example the market server system may perform the operations of box .

The market server system may send the notification to each of the devices box before any of the devices requests details of the purchasing event boxes and or before the market server system receives any of the requests for details of the purchasing event boxes and . The market server system may send the notification to each of the devices box before the market server system sends the indication that the product has been purchased to any of the devices e.g. boxes and .

At box the first computing device receives the indication that the product has been purchased. For example the computing device may perform the operations of box . Receiving the indication that the product has been purchased may in some examples include verifying a nonce that is included with the indication boxes and verifying a signature of the indication boxes and and determining whether the nonce and the signature are correct box . At box the second computing device receives the indication that the product has been purchased. For example the second computing device may perform the operations of box .

At box the first computing device requests the product. The request may be to unlock the product from local storage on the first computing device for use by the user e.g. as described with reference to box or may be a request that a second server system send the product for receipt by the first computing device e.g. as described with reference to box . At box the second computing device requests the product e.g. as described with reference to box or box .

At box the second server system receives the request for the product e.g. as described with respect to box . The second server system may be the third party server system . At box a third server system receives the request for the product e.g. as described with respect to box .

At box the second server system sends the product for receipt by the first computing device e.g. as described with respect to box . At box the third server system sends the product for receipt by the second computing device e.g. as described with respect to box . The second server system may be the same as the third server system or may be different than the third server system.

At box the first computing device presents an interface that includes the received product. For example the first computing device may change the user interface to include content specified by the product. The content specified by the product may be audio content or displayed content. For example the computing device may perform operations that are specified by instructions of the third party application program to change the interface see to the interface see . The changed user interface may identify the product as being purchased e.g. by displaying an indication of the product that was not displayed before the user requested purchase of the product . At box the second computing device presents an interface that includes the product. For example the second computing device e.g. a tablet computer that is also assigned to a same user account as that of the mobile telephone may present a user interface that identifies the product as having been purchased.

In some implementations the market server system may send the notification for receipt by each device box but the first computing device may not receive the notification e.g. because the first computing device is no longer connected to the Internet or has been turned off . As such the second computing device and the market server system may perform the operations of boxes and before the first computing device performs the operations of box e.g. at some later time when the first computing device regains network connectivity or is turned on and as a result of the market server system sending a subsequent notification for receipt by the first computing device .

In some implementations the market server system may not receive a request to purchase the product from any of the multiple computing devices assigned to the user account other than the first computing device. As such the notification of the purchasing event that is sent to each of the multiple devices may be sent without each of the other devices independently requesting purchase of the product. Rather a user may purchase the product using one of the multiple devices and the purchase of the product may be communicated automatically to the other of the user s devices and without user intervention or input requesting that the product purchase be communicated to the other of the user s devices.

Indeed after the first computing device sends the request to purchase the product box the market server system may not receive any communication or any communication initiated as a result of user input from particular ones of the other computing devices before the market server system sends the notification to the particular ones of the devices box . As such the other computing devices may not send to the server system a communication requesting an update or a syncing operation.

At box a request to purchase a product is sent by a computing device for receipt by a server system. For example computing device may send for receipt by market server system a request to purchase a product. The request may be a Request Purchase request as described with reference to box . The product may be an in app product that is for use by a third party application program. The request to purchase the product may have been initiated by user selection of an interface element that is provided for display by the third party application program. For example the request may have been initiated by user selection of the Portland interface element as shown in .

At box the request to purchase the product is received by the server system. For example the market server system may receive the request to purchase the product as described with reference to box .

At box as a result of receiving the request to purchase the product the server system sends a charge request for receipt by a transaction processing system. The charge request may be a request to charge an account of a user of the computing device for purchase of the product. For example the market server system may send a charge request for receipt by the transaction processing system . The request to charge the account may be a request to debit a monetary value from the account. The account of the user of the computing device may be an account for which the user provided login credentials using the computing device. The account of the user may be a credit card or debit card account. In some implementations the transaction processing system may be a system managed by a credit card company. In some implementations the transaction processing system may be a system that is managed by a business entity that is different than a business entity that manages the server system.

At box the transaction processing system receives the charge request and begins operations to charge the account of the user for the product. For example the transaction processing system may send a request to charge the account to entity or entity . The transaction processing system may await a response from entity or entity regarding a status of the charge request. As described hereinafter the server system and the computing device may perform various operations while the transaction processing system is processing the charge request.

At some later point in time the transaction processing system may determine that the charge request has been successful or may determine that the charge request has been cancelled. As a result the transaction processing system may send an indication that the charge request has been successful or may send an indication that the charge request has been cancelled. The indication that the charge request has been successful may be sent as a result of the transaction processing system determining that the account of the user has been debited for an amount of the purchase or that the account of the user is able to be debited for the amount of the purchase e.g. that the account includes sufficient funds . The indication that the charge request has been cancelled may be sent as a result of the transaction processing system receiving a request to preemptively cancel the purchase as described with reference to box or the transaction processing system determining on its own initiative that the charge request should be cancelled e.g. as a result of the transaction processing system determining that the charge request is likely to be fraudulent or that the account of the user has insufficient funds .

At box the server system determines a length of time for which to delay. For example the automatic canceller at the market server system may determine a length of time for which the computing device should delay before the computing device prompts the server system to determine whether the charge request has been successful or has been cancelled. As described with respect to the determination of the length of time for which to delay can include an analysis of information from an account of the user information from a social graph or information regarding previous purchases by the user. For example if the user has recently created the account of the user e.g. by proposing a username and password or if the user has not requested any purchases using the account the server system may determine a longer length of time e.g. so as to not discourage a new user from requesting purchase of products .

At box the server system sends for receipt by the computing device an indication of the determined length of time. For example the automatic canceller of the market server system may send for receipt by the automatic canceller of the computing device a request that the computing device establish a delay for the length of time.

At box the computing device receives as having been sent by the server system the indication of the determined length of time. For example the automatic canceller may receive the request that the computing device establish the delay for the length of time.

At box the computing device institutes a delay for the received length of time. For example the computing device may execute a timer that either counts up to the length of time or a timer that counts down to the length of time so as to monitor passing of the length of time. After the computing device determines that the length of time has expired e.g. the timer has measured that the length of time has passed the computing device may perform the operations of box .

At box the computing device may send for receipt by the server system an indication that the delay for the length of time has expired. For example the automatic canceller may send for receipt by the automatic canceller at the market server system a request that the market server system determine whether the account of the user has been charged for the product.

At box the server system receives a communication from the computing device that indicates that the delay for the length of time has expired. The server system also after and as a result of receiving the communication determines whether the server system has received an indication that the charge request has been successful or has been cancelled. For example the automatic canceller at the market server system may receive the indication that the delay for the length of time has expired during the delay that is instituted by the computing device .

The indication that the delay for the length of time has expired may be a request to determine whether the server system has received the indication that the charge request has been successful or has been cancelled. The server system may access a flag to determine whether an indication that the charge request has been successful or has been cancelled was received during the delay. The flag may be set to one or more particular values if the indication had been received. The server system may access a memory location to determine whether an indication that the charge request has been successful or has been cancelled was received. The memory location may include the received indication whether the charge request has been successful or has been cancelled.

As such the server system may receive from the transaction processing system the indication that the charge request has been successful or has been cancelled and may store the indication but the server system may not perform the operations of boxes and or until the server system receives from the computing device the indication that the delay has expired.

At box as a result of determining that the server system has received an indication that the charge request has been successful or an indication that the charge request has been cancelled the server system sends for receipt by the computing device an indication that purchase of the product has been successful or has been cancelled. For example the market server system may send for receipt by the market application an indication that the request to purchase the product has been cancelled. The market server system may alternatively send for receipt by the market application an indication that the request to purchase the product has been successful. The indication that the charge request has been successful or has been cancelled may be the Purchase State Changed response that is described with reference to boxes and .

At box the computing device receives the indication that the charge request was successful or the indication that the charge request was cancelled. For example the computing device may perform the operations of box .

At box as a result of determining that the server system has not received an indication that the charge request has been successful or an indication that the charge request has been cancelled the server system determines whether to preemptively cancel the charge request. The determination whether the server system should preemptively cancel the charge request may account for the same or similar factors as the determination for the length of time for which to delay as described with reference to box . Indeed the determination whether to preemptively cancel the charge request may be a determination of a time for which to delay as described with reference to box . A determination of a zero or near zero delay may be recognized by the server system as a determination to preemptively cancel the charge request.

At box as a result of determining to cancel the charge request e.g. as a result of a determination that a delay for a 0 length of time should be instituted the server system sends for receipt by the transaction processing system a request to cancel the charge request.

At box the transaction processing system receives the request to cancel the charge request and performs operations to cancel the charge request e.g. by sending a request to entity to cancel the charge request .

At box as a result of determining to either cancel the charge request or to not cancel the charge request the server system performs the operations of box in some implementations the operations of box are performed as part of the determination whether to preemptively cancel the charge request see box . At box the server system may determine another subsequent length of time for which to delay. The subsequent length of time may be different than the length of time of the previous delay and may be determined based on various factors as described with reference to .

The determination of the subsequent length of time for which to delay may account for factors that are different than the factors accounted for in the determination of the previous length of time. For example additional information may have been received after the previously determined length of time was determined. Indeed the previously determined length of time may be a predetermined and standard length of time that is used as an initial delay for multiple or all requests to purchase products. The subsequently determined length of time may be based on the aforementioned factors.

The server system and the computing device may repeat the operations of boxes and in order to institute a delay for the subsequently determined length of time. At box the server system may determine whether during the subsequent delay the indication that the charge request has been successful or has been cancelled has been received. At box the server system may again determine whether to preemptively cancel the charge request. This repetitive process may continue until the server system receives an indication that the charge request has been successful or has been cancelled and as a result the server system performs the operations of box .

In some implementations the server system requests that the computing device measure the delay because the server system does not maintain a thread of execution for measuring the delay. Rather the server system may have a limited quantity of threads that it can execute simultaneously e.g. several dozen yet the server system may be configured to simultaneously manage hundreds of purchasing requests. As such the server system may request that individual computing devices measure delays for their respective purchasing requests. Such client side measurement of delays permits the server system to process purchasing requests for more computing device than if the server system measured delays itself. The server system may terminate a thread of execution for the received purchasing request after performing the operations of box and may invoke the thread of execution upon receiving the indication that the delay has expired box .

In some implementations the request to purchase the product does not have to be initiated by user selection of an interface element that is provided by a third party application. In some implementations the request to purchase the product does not have to specify a product that is used by a third party application program. In other words the request to purchase the product need not specify a product and need not specify an in app product. Rather the computing device may request that a server system perform a particular action as a result the server system may request that another system perform a related action and the server system may communicate to the computing device a length of time for which the computing device is to maintain a delay on behalf of the server system. The other system upon determining that the related action has been successful or has been cancelled may send an indication that the related action has been successful or has been cancelled for receipt by the server system. At box the server system may determine whether the related action has been successful or has been cancelled.

For example the market application on the computing device may receive user input that selects a user interface element for initiating purchase of a product. The user interface element may be displayed at request of a third party application program. For example the third party application program may include instructions that when executed by a computer processor cause the computing device to display the interface element. A purchase requester component of the market application may in response to identifying receipt of the user input send a request to purchase a product to the request receiver component of the market server system . The purchase requester may perform the operations of box .

The request receiver component of the market server system may be configured to perform the operations of boxes and . For example the request receiver may receive the purchasing request from the market application and as a result i send a charge request to the purchase processor component of the transaction processing system and ii request that the automatic canceller institute a delay upon termination of which the market server system is to check whether the user has been charged for the product. The market server system may be configured to not check whether the user has been charged for the product during the delay.

The delay determiner is configured to perform the operations of box to determine a length of a delay upon termination of which the market server system is configured to check whether the user has been charged for the product. The determination of the length of the delay may be performed in various manners. In some examples the length of the delay is predetermined and may be the same regardless of the product that is specified by the purchasing request. Purchase of a particular product at the request of a user may include two delays and these two delays may be for different lengths of time. For example an initially determined delay may be different than a subsequently determined delay e.g. the initial delay may be five seconds and the subsequent delay may be twenty seconds .

In some examples the length of the delay is determined by analyzing user account information . For example the user account information may specify a date at which the account was created. The date may be used in the calculation of the delay. The calculation may result in a short delay if the account was recently created for example because the account may be more likely to have been automatically generated by a computer program for generating fraudulent purchasing requests. The user account information may specify demographic information regarding the user of the computing device . The demographic information may be used in a calculation that varies the length of the delay. For example the delay may calculated to be longer for users that are men between the ages of twenty four and thirty than for users that are women between the ages of eighteen to twenty three because such men may have been determined to be less likely to purchase another in app product after a cancelled purchasing request.

In some examples the length of the delay is determined using social graph information . The social graph information may specify relationships between various users and certain of the users that have been determined to have made fraudulent purchases. A relationship between two users of the social graph may exist if one of the users sent an invitation to the other of the two users to create an account or if one of the two users agreed to follow the other user s posts on a social networking service. The delay determiner may determine that a short delay is more appropriate than a long delay if the user of the computing device has formed relationships with an excessive level of users that are associated with fraudulent activity. As such the market server system may be configured to waste less computational resources on purchasing requests that are likely to be associated with fraud. The market server system may also avoid having to pay a developer of a product for a fraudulent purchase for which an administrator of the market server system is not compensated.

In some examples the length of the delay is determined based on an analysis of information that specifies characteristics of past purchases by the user of the computing device . Should the user rarely purchase in app products and suddenly begin to frequently purchase in app products the delay determiner may determine that the length of the delay should be short because the purchase may be fraudulent. Moreover if the present purchasing request is for a product that costs significantly more than previously purchased products the delay determiner may determine that a short delay is appropriate.

The delay determiner sends the determined length of the delay to the delay sender which is configured to perform the operations of box . For example the delay sender sends for receipt by the delay receiver a request that the computing device execute a delay for the determined length of time.

The delay executor is configured to perform the operations of box . For example the delay executor may execute a process that counts clock cycles until a quantity of clock cycles specified by the determined length of the delay has lapsed at which time the computing device generates a timing interrupt.

The status checker is configured to perform the operations of box . For example the status checker may send to the status checker as a result of the computing device generating the timing interrupt a request that the status checker determine whether the charge request has been successful or has been cancelled.

The status checker is configured to perform the operations of box . For example the status checker may determine whether the outcome sender of the transaction processing system has sent an outcome of the charge request to the market server system e.g. an indication that the charge request has been successful or has been cancelled .

If the status checker determines that the market server system has received an outcome of the change request from the transaction processing system the status checker is configured to request that the status sender perform the operations of box to send an indication of the outcome to the computing device e.g. an indication that the product has been purchased or an indication that purchase of the product has been cancelled .

If the status checker determines that the market server system has not received an outcome of the change request from the transaction processing system the status checker is configured to prompt the cancellation determiner to determine whether to cancel the charge request. The cancellation determiner is configured to perform the operations of box . For example the cancellation determiner may request that the delay determiner generate another length of time for which the computing device should delay. If the length of time is zero or substantially near zero e.g. within a quarter of a second of zero the cancellation determiner may be configured to cancel the purchase.

The purchase can be cancelled by requesting that the status sender send an indication that the purchase is cancelled to both the transaction processing system and to the market application . The indications that the purchase is cancelled may be sent before the market server system receives from the transaction processing system an indication that the transaction processing system has either cancelled the charge request or an indication that the charge request has been successful.

If the length of time for which to delay is not zero or substantially near zero the cancellation determiner may be configured to request that the determined length of the delay is sent by the delay sender to the delay receiver so as to invoke another delay. Even if the cancellation determiner has determined to cancel the charge request the cancellation determiner may be configured to request that a determined length of the delay e.g. a default length of delay that follows a request to cancel the charge request is sent by the delay sender to the delay receiver . Accordingly the status checker of the market server system may periodically check for a change in status of the charge request. The market server system may not send to the computing device an indication that purchase of the product has been cancelled until the market server system receives from the outcome sender confirmation that the charge request has been cancelled.

In other words the market application may send for receipt by the transaction processing system a request to cancel the charge request the transaction processing system may send for receipt by the market application an indication that the charge request has been cancelled and thereafter the market application may send the indication that the purchase has been cancelled for receipt by the computing device .

Eventually the outcome sender may send for receipt by the market server system an indication that the charge request was successful or was cancelled either at the initiative of the transaction processing system or at the initiative of the market server system . Thereafter the status sender may be configured to send for receipt by the computing device the indication that the purchase was successful or was cancelled.

At box a developer computing device generates an application program. For example an entity that develops an application program may type computer code into the developer computing device compile the computer code into a working application program on the developer computing device or transfer a compiled application program to the developer computing device.

At box the developer computing device generates an identity certificate for the application program. For example a developer user of the developer computing device may provide input that causes a program to generate a pair of cryptographic keys e.g. a public cryptographic key and its corresponding and mathematically linked private cryptographic key and may then provide input that causes another program to sign the application program with the private cryptographic key. As an example the developer may provide input that causes execution of the JAVA Keytool command so as to cause the developer computing device to generate the pair of cryptographic keys. The developer may then provide input that causes execution of a program that compiles the application program into an application package. An application package is a group of one or more installation files for the application program. Discussion in this document regarding an application program refers to both the installation files for an application program and the application program as installed on a user s computing device.

The developer may provide input that causes execution of another command e.g. the Jarsigner command that results in the computing device signing the application package with an identity certificate. References herein to a signed application program signifies an application package that includes an identity certificate. The identity certificate included in the application package can be used by a computing system to verify an identity of a developer of the application program.

An identity certificate may include text that has been encoded also referred to as encrypted using the private key of the cryptographic key pair. The text can include for example a name of the developer e.g. a developer identifier a street address of the developer a name of the application program e.g. an application identifier and a cryptographic hash value. The cryptographic hash value may have been generated by performing a cryptographic hash function on the application program e.g. the one or more installation files in the application package . A cryptographic hash function may be a deterministic procedure that receives data and outputs a string. The hash function is configured such that the use of different input data results in a different output strings. A hash value is also known in the art as a message digest or a digest.

The developer name developer street address name of the application program and the hash value for the application program may be encoded using the private key. The resulting encoded document may be the identity certificate. The public key may be included in the identity certificate although in some examples the public key is not signed with the private key and remains unencrypted and available for use to decrypt the identity certificate. Because the public key corresponds to the private key that was used to encode the identity certificate the public key may be used to decode the identity certificate and extract the text e.g. the developer name developer street address name of the application program and the hash value .

At box the developer computing device sends the application program and the identity certificate for receipt by a server system. For example the developer may access the distribution platform publisher web page that is shown in and select the Upload New Application interface element . As a result the distribution platform developer site may display a user interface that enables the developer to select the application package from multiple files on the developer computing device. Upon selection of the application package the developer computing device may send the application package for receipt by the market server system . The application package may include installation files for the application program and the identity certificate.

At box the server system receives the third party application program and the identity certificate. For example the server system may receive the application package.

At box the server system stores the third party application program and the received identity certificate. The third party application program and the received identity certificate may be stored for subsequent access. The server system may assign the received identity certificate to the third party application program. For example the market server system may save the application package in computer readable memory and may extract the identity certificate from the application package. The market server system may store the identity certificate in association with an identifier for the application program. As such at a later point in time the market server system may be able to quickly access the identity certificate by supplying the identifier for the application program to a lookup table or a database.

At box the user computing device requests download of the application program. As described herein requesting download of an application program may include requesting transfer of the application program to the computing device or requesting installation of the application program. For example and as described throughout this document a user of the computing device may browse an application marketplace and select an application program for installation. In response the computing device may send a request to the market server system to provide the application program to the computing device or another device. For example a user of computing device may select on a web page provided by the application marketplace a user interface element associated with installation of the Local Bike Maps third party application program.

At box the server system receives the request to download the application program. For example the market server system may receive the request to provide the computing device with the Local Bike Maps application program.

At box the server system initiates sending of the third party application program. For example the market server system may receive the request to download the application program and either i send the application package for receipt by the computing device or ii request that another system send the application package for receipt by the computing device. The application package that is sent for receipt by the computing device may be the application package that was stored at box . As discussed throughout this document the sent application package may include one or more files for installing the application program and an identify certificate for the application program.

At box the computing device receives as a result of the computing device sending the request to download the third party application program i the third party application program e.g. one or more installation files for the third party application program and ii a first identity certificate for the third party application program. For example the computing device may receive the application package which includes both of these elements.

At box the computing device generates a cryptographic hash value from the third party application program. For example the computing device may apply the cryptographic hash function on the application program e.g. the one or more installation files of the application program . The cryptographic hash function may receive the one or more installation files as input and may output the generated hash value.

The program on the computing device that manages identity certificates and thus generates the cryptographic hash value or requests generation of the cryptographic hash value may be a secure system level service that is different than the market application and that is not one of the third party applications e.g. a third party application downloaded from the market server system . The secure system level service may assign identity certificates to application programs and may not change an assignment between an identity certificate and an application program unless the application program is changed or reinstalled and the system level service verifies that the identity certificate old or new is valid for the changed application program as described herein by matching hash values. Third party application programs may not be able to change the assignments by the secure system level service.

At box the computing device determines whether the generated cryptographic hash value matches the cryptographic hash value in the received identity certificate. The computing device may have to decode the identity certificate to access the cryptographic hash value in the received identity certificate. For example the secure system level service may perform a decoding procedure on the identity certificate using the public key that was received with the third party application program and that may have been included in a part of the certificate that was not encrypted with the private key . After the cryptographic hash value has been extracted from the received identity certificate the secure system level service may compare the extracted hash value to the generated hash value to determine whether the hash values match or do not match. Hash values may match if the hash values are identical and may not match if the hash values are not identical.

At box as a result of a determination that the generated hash value does not match the hash value in the received identity certificate the user computing device prevents installation of the third party application program or prevents execution of the third party application program. For example the operating system executed by the computing device or a component thereof e.g. the secure system level service may not permit the third party application program to install or execute.

At box as a result of a determination that the generated hash value matches the hash value in the received identity certificate the user computing device enables installation of the third party application program or enables execution of the third party application program. For example the operating system may install the application program and place on a desktop display or other user interface of the computing device a user interface icon with which a user can launch the application program.

Upon installation of the third party application program the computing device may store the received identity certificate in association with an identifier for the third party application program. For example the secure system level service may store the received identity certificate in storage that is not accessible to the market application or any of the third party application programs. As such the secure system level service may assign the received identity certificate to the third party application program for later access with reference to the identifier for the third party application program.

In some examples the computing device may be configured to prevent reinstallation or modification to the third party application program without changing the first identity certificate and verifying that the hash value in the changed first identity certificate matches a hash value generated from the reinstalled or modified third party application program. In other words without a user rooting or otherwise hacking the operating system of the computing device an application program may not be reinstalled without the computing device performing the operations of boxes and to ensure that the identity certificate assigned to the third party application program is valid. Rather the secure system level service may manage access to the identity certificates and ensure than an installed third party application program has a corresponding identity certificate that is valid for the installed third party application program.

At box the computing device provides a user interface that is specified by instructions of the third party application program. For example the computing device may perform the operations of box to provide the user interface as shown in . The instructions of the third party application program may be instructions included in files that are assigned to the third party application program and that may have been downloaded from an application marketplace in response to a request by a user to download the application program.

The user interface may include an interface element that initiates purchase of a product when selected by a user for example interface element . But for selection of the interface element a process for purchasing the product may not occur. The product may be a digital product for use by the third party application program in another user interface specified by instructions of the third party application program. For example the product may be digital code that generates a display of a local bike map as a result of the user of the computing device selecting the Portland interface element see .

At box the computing device receives an indication that the user has selected the interface element. For example the computing device may perform the operations of box .

At box the computing device may identify an identity certificate that is assigned to the third party application program. For example the selected user interface element may be associated with code that includes an identifier for the third party application program which is to be purchased. The computing device may use the identifier to retrieve the identity certificate previously assigned to the third party application program from among multiple identity certificates that the computing device assigns to multiple respective third party application programs. For example market application may provide the identifier for the third party application program to the secure system level service and the secure system level service may in return provide the market application with the identity certificate that was assigned to the third party application program. The identity certificate for the third party application program may have been stored by the secure system level service in a secure system location. The market application may be unable to access the identity certificate at the secure system location but may be able to request that the secure level service retrieve the identity certificate from the secure system location.

At box the computing device sends a request for purchasing the product. The request for purchasing the product may or may not be a request confirming that a remote system purchase the product. The request for purchasing the product may be a request that is part of a series of communications related to purchase of the product. For example the request for purchasing the product may be a request by the market application for details of the purchasing GUI as described with reference to box . The request for purchasing the product may include the identity certificate box . For example the request for purchasing the product may include the identity certificate as a parameter or may include an identifier that references the identity certificate. The request for purchasing the product may have been triggered by the third party application sending for receipt by the market application a Request Purchase request as described with reference to boxes and see .

At box the server system receives the request for purchasing the product. For example the market server system performs at least some of the operations of box to receive the request for details of the purchasing user interface. The received request for purchasing the product may include the identity certificate box .

At box the server system accesses an identity certificate that the server system assigned to the third party application program before the server system received the request for purchasing the product. For example the received request for purchasing the product may include an identifier for the third party application program and the market server system may use the identifier in a database or table lookup procedure to access the identity certificate that the server system at box assigned to the third party application program.

At box the server system determines whether the received identity certificate matches the accessed identity certificate. In some examples the server system may determine that the identity certificates match if the identity certificates are identical. In some examples the server system may determine that the identity certificates match if the identity certificates are able to be decoded using the same public cryptographic key which indicates that the identity certificates were encoded using the same private cryptographic key .

At box in response to a determination that the received identity certificate does not match the accessed identity certificate the server system sends an indication that purchase of the product has been cancelled. For example the market server system may at box send to the market application an indication that the Request Purchase request has been cancelled e.g. that communications for purchasing the product will not result in purchase of the product .

At box the computing device may receive the indication that the purchase is cancelled. As a result the computing device may not display the dialog box see and rather may rather continue to display user interface see . The user interface may include an indication that the purchase was cancelled.

At box in response to a determination that the received identity certificate matches the accessed identity certificate the server system accesses details regarding the product. For example the market server system may perform the operations of boxes and to identity in app item details that are either stored at the market server system or at a remote system e.g. the transaction processing system .

At box the server system sends an indication that the third party application program is able to legitimately purchase the product. As an example the market server system may perform the operations of box to send the accessed details box . As another example the market server system may perform the operations of box to send an indication that the product has been purchased box .

At box the computing device receives the indication that the third party application program is able to legitimately purchase the product. As an example of an indication that the third party application program is able to legitimately purchase the product the market application may perform the operations of box to receive the accessed details box . The accessed details may not have been stored by the computing device after sending the request for purchasing the product and before receiving the accessed details from the market server system. As another example of an indication that the third party application program is able to legitimately purchase the product the market server system may perform the operations of box . The computing device may receive the indication that the product has been purchased by performing the operations of boxes and box .

As discussed herein an indication that a third party application program is able to legitimately purchase a product is not limited to a communication that includes data that specifically identifies whether or not the third party application program is able to legitimately purchase the product e.g. such as a flag or a variable . Rather the indication may be a communication that when received by the computing device causes the computing device to continue with a process for purchasing a product. The continued process for purchasing the product may include displaying a subsequent user interface for purchasing the product e.g. dialog box see or may include displaying a user interface that indicates that the product has been purchased e.g. user interface see .

The market server system may require that uploaded third party application programs are signed with identity certificates. Signing third party application programs with identity certificates allows developers to know that their application is provided unmodified to each user s computing device. Further an administrator of the market server system is able to hold developers accountable for improperly functioning application programs.

A signed identity certificate may define which user identity is associated with which application. An application may not be able to access another application that is associated with a different user identity except through defined inter process communication calls. In some implementations developers may self sign their application programs and the application programs do not have to be signed by a central authority. Self signing provides the benefits described herein without the monetary costs sometimes required by a central authority.

A developer may sign multiple of the developer s different application programs using the same private key. A first benefit to signing multiple application programs with the same private key is that an end user s computing device may be configured to only allow installation of an update to an application program if the update has an identity certificate that matches an identity certificate of the previously installed application program e.g. because both identity certificates can be decoded using the same public key . If the identity certificates match the end user s computing device permits the update.

A second benefit to signing multiple application programs with the same private key is an ability to provide application modularity. An end user s computing device may enable application programs that are signed with the same public key to run in the same process. In this way a developer is able to deploy an application program in modules and the end user s computing device is able to update each of the modules independently.

A third benefit to signing multiple of the developer s application programs with the same private key is to enable code and data sharing among the developer s application programs. An application program that is signed with a particular private key is able to expose functionality to another application program that is signed with the same private key. As such permissions to share code and data among two or more application programs are based on the identity certificates for the two or more application programs being able to be decoded with a same public key.

Referring now to a conceptual diagram of a system that may be used to implement the systems and methods described in this document is illustrated. In the system mobile computing device can wirelessly communicate with base station which can provide the mobile computing device wireless access to numerous hosted services through a network .

In this illustration the mobile computing device is depicted as a handheld mobile telephone e.g. a smartphone or an application telephone that includes a touchscreen display device for presenting content to a user of the mobile computing device and receiving touch based user inputs. Other visual tactile and auditory output components may also be provided e.g. LED lights a vibrating mechanism for tactile output or a speaker for providing tonal voice generated or recorded output as may various different input components e.g. keyboard physical buttons trackballs accelerometers gyroscopes and magnetometers .

Example visual output mechanism in the form of display device may take the form of a display with resistive or capacitive touch capabilities. The display device may be for displaying video graphics images and text and for coordinating user touch input locations with the location of displayed information so that the device can associate user contact at a location of a displayed item with the item. The mobile computing device may also take alternative forms including as a laptop computer a tablet or slate computer a personal digital assistant an embedded system e.g. a car navigation system a desktop personal computer or a computerized workstation.

An example mechanism for receiving user input includes keyboard which may be a full qwerty keyboard or a traditional keypad that includes keys for the digits 0 9 and . The keyboard receives input when a user physically contacts or depresses a keyboard key. User manipulation of a trackball or interaction with a track pad enables the user to supply directional and rate of movement information to the mobile computing device e.g. to manipulate a position of a cursor on the display device .

The mobile computing device may be able to determine a position of physical contact with the touchscreen display device e.g. a position of contact by a finger or a stylus . Using the touchscreen various virtual input mechanisms may be produced where a user interacts with a graphical user interface element depicted on the touchscreen by contacting the graphical user interface element. An example of a virtual input mechanism is a software keyboard where a keyboard is displayed on the touchscreen and a user selects keys by pressing a region of the touchscreen that corresponds to each key.

The mobile computing device may include mechanical or touch sensitive buttons . Additionally the mobile computing device may include buttons for adjusting volume output by the one or more speakers and a button for turning the mobile computing device on or off. A microphone allows the mobile computing device to convert audible sounds into an electrical signal that may be digitally encoded and stored in computer readable memory or transmitted to another computing device. The mobile computing device may also include a digital compass an accelerometer proximity sensors and ambient light sensors.

An operating system may provide an interface between the mobile computing device s hardware e.g. the input output mechanisms and a processor executing instructions retrieved from computer readable medium and software. Example operating systems include ANDROID CHROME OS IOS MAC OS X WINDOWS 7 WINDOWS PHONE 7 SYMBIAN BLACKBERRY WEBOS a variety of UNIX operating systems or a proprietary operating system for computerized devices. The operating system may provide a platform for the execution of application programs that facilitate interaction between the computing device and a user.

The mobile computing device may present a graphical user interface with the touchscreen . A graphical user interface is a collection of one or more graphical interface elements and may be static e.g. the display appears to remain the same over a period of time or may be dynamic e.g. the graphical user interface includes graphical interface elements that animate without user input .

A graphical interface element may be text lines shapes images or combinations thereof. For example a graphical interface element may be an icon that is displayed on the desktop and the icon s associated text. In some examples a graphical interface element is selectable with user input. For example a user may select a graphical interface element by pressing a region of the touchscreen that corresponds to a display of the graphical interface element. In some examples the user may manipulate a trackball to highlight a single graphical interface element as having focus. User selection of a graphical interface element may invoke a pre defined action by the mobile computing device. In some examples selectable graphical interface elements further or alternatively correspond to a button on the keyboard . User selection of the button may invoke the pre defined action.

In some examples the operating system provides a desktop graphical user interface that is displayed after turning on the mobile computing device after activating the mobile computing device from a sleep state after unlocking the mobile computing device or after receiving user selection of the home button . The desktop graphical user interface may display several graphical interface elements that when selected invoke corresponding application programs. An invoked application program may present a graphical interface that replaces the desktop graphical user interface until the application program terminates or is hidden from view.

User input may influence an executing sequence of mobile computing device operations. For example a single action user input e.g. a single tap of the touchscreen swipe across the touchscreen contact with a button or combination of these occurring at a same time may invoke an operation that changes a display of the user interface. Without the user input the user interface may not have changed at a particular time. For example a multi touch user input with the touchscreen may invoke a mapping application to zoom in on a location even though the mapping application may have by default zoomed in after several seconds.

The desktop graphical interface can also display widgets. A widget is one or more graphical interface elements that are associated with an application program that is executing and that display on the desktop content controlled by the executing application program. A widget s application program may launch as the mobile device turns on. Further a widget may not take focus of the full display. Instead a widget may only own a small portion of the desktop displaying content and receiving touchscreen user input within the portion of the desktop.

The mobile computing device may include one or more location identification mechanisms. A location identification mechanism may include a collection of hardware and software that provides the operating system and application programs an estimate of the mobile device s geographical position. A location identification mechanism may employ satellite based positioning techniques base station transmitting antenna identification multiple base station triangulation internet access point IP location determinations inferential identification of a user s position based on search engine queries and user supplied identification of location e.g. by receiving user a check in to a location .

The mobile computing device may include other applications computing sub systems and hardware. A call handling unit may receive an indication of an incoming telephone call and provide a user the capability to answer the incoming telephone call. A media player may allow a user to listen to music or play movies that are stored in local memory of the mobile computing device . The mobile device may include a digital camera sensor and corresponding image and video capture and editing software. An internet browser may enable the user to view content from a web page by typing in an addresses corresponding to the web page or selecting a link to the web page.

The mobile computing device may include an antenna to wirelessly communicate information with the base station . The base station may be one of many base stations in a collection of base stations e.g. a mobile telephone cellular network that enables the mobile computing device to maintain communication with a network as the mobile computing device is geographically moved. The computing device may alternatively or additionally communicate with the network through a Wi Fi router or a wired connection e.g. ETHERNET USB or FIREWIRE . The computing device may also wirelessly communicate with other computing devices using BLUETOOTH protocols or may employ an ad hoc wireless network.

A service provider that operates the network of base stations may connect the mobile computing device to the network to enable communication between the mobile computing device and other computing systems that provide services . Although the services may be provided over different networks e.g. the service provider s internal network the Public Switched Telephone Network and the Internet network is illustrated as a single network. The service provider may operate a server system that routes information packets and voice data between the mobile computing device and computing systems associated with the services .

The network may connect the mobile computing device to the Public Switched Telephone Network PSTN in order to establish voice or fax communication between the mobile computing device and another computing device. For example the service provider server system may receive an indication from the PSTN of an incoming call for the mobile computing device . Conversely the mobile computing device may send a communication to the service provider server system initiating a telephone call using a telephone number that is associated with a device accessible through the PSTN .

The network may connect the mobile computing device with a Voice over Internet Protocol VoIP service that routes voice communications over an IP network as opposed to the PSTN. For example a user of the mobile computing device may invoke a VoIP application and initiate a call using the program. The service provider server system may forward voice data from the call to a VoIP service which may route the call over the internet to a corresponding computing device potentially using the PSTN for a final leg of the connection.

An application store may provide a user of the mobile computing device the ability to browse a list of remotely stored application programs that the user may download over the network and install on the mobile computing device . The application store may serve as a repository of applications developed by third party application developers. An application program that is installed on the mobile computing device may be able to communicate over the network with server systems that are designated for the application program. For example a VoIP application program may be downloaded from the Application Store enabling the user to communicate with the VoIP service .

The mobile computing device may access content on the internet through network . For example a user of the mobile computing device may invoke a web browser application that requests data from remote computing devices that are accessible at designated universal resource locations. In various examples some of the services are accessible over the internet.

The mobile computing device may communicate with a personal computer . For example the personal computer may be the home computer for a user of the mobile computing device . Thus the user may be able to stream media from his personal computer . The user may also view the file structure of his personal computer and transmit selected documents between the computerized devices.

A voice recognition service may receive voice communication data recorded with the mobile computing device s microphone and translate the voice communication into corresponding textual data. In some examples the translated text is provided to a search engine as a web query and responsive search engine search results are transmitted to the mobile computing device .

The mobile computing device may communicate with a social network . The social network may include numerous members some of which have agreed to be related as acquaintances. Application programs on the mobile computing device may access the social network to retrieve information based on the acquaintances of the user of the mobile computing device. For example an address book application program may retrieve telephone numbers for the user s acquaintances. In various examples content may be delivered to the mobile computing device based on social network distances from the user to other members in a social network graph of members and connecting relationships. For example advertisement and news article content may be selected for the user based on a level of interaction with such content by members that are close to the user e.g. members that are friends or friends of friends .

The mobile computing device may access a personal set of contacts through network . Each contact may identify an individual and include information about that individual e.g. a phone number an email address and a birthday . Because the set of contacts is hosted remotely to the mobile computing device the user may access and maintain the contacts across several devices as a common set of contacts.

The mobile computing device may access cloud based application programs . Cloud computing provides application programs e.g. a word processor or an email program that are hosted remotely from the mobile computing device and may be accessed by the device using a web browser or a dedicated program. Example cloud based application programs include GOOGLE DOCS word processor and spreadsheet service GOOGLE GMAIL webmail service and PICASA picture manager.

Mapping service can provide the mobile computing device with street maps route planning information and satellite images. An example mapping service is GOOGLE MAPS. The mapping service may also receive queries and return location specific results. For example the mobile computing device may send an estimated location of the mobile computing device and a user entered query for pizza places to the mapping service . The mapping service may return a street map with markers superimposed on the map that identify geographical locations of nearby pizza places. 

Turn by turn service may provide the mobile computing device with turn by turn directions to a user supplied destination. For example the turn by turn service may stream to device a street level view of an estimated location of the device along with data for providing audio commands and superimposing arrows that direct a user of the device to the destination.

Various forms of streaming media may be requested by the mobile computing device . For example computing device may request a stream for a pre recorded video file a live television program or a live radio program. Example services that provide streaming media include YOUTUBE and PANDORA.

A micro blogging service may receive from the mobile computing device a user input post that does not identify recipients of the post. The micro blogging service may disseminate the post to other members of the micro blogging service that agreed to subscribe to the user.

A search engine may receive user entered textual or verbal queries from the mobile computing device determine a set of internet accessible documents that are responsive to the query and provide to the device information to display a list of search results for the responsive documents. In examples where a verbal query is received the voice recognition service may translate the received audio into a textual query that is sent to the search engine.

These and other services may be implemented in a server system . A server system may be a combination of hardware and software that provides a service or a set of services. For example a set of physically separate and networked computerized devices may operate together as a logical server system unit to handle the operations necessary to offer a service to hundreds of computing devices. A server system is also referred to herein as a computing system.

In various implementations operations that are performed in response to as a result of or as a consequence of another operation e.g. a determination or an identification are not performed if the prior operation is unsuccessful e.g. if the determination was not performed . An operations that is performed as a result of another operation may have a but for causal relationship with the other operation such that the operation may not have been performed but for performance of the other operation. Operations that are performed automatically are operations that are performed without user intervention e.g. intervening user input . Features in this document that are described with conditional language may describe implementations that are optional. In some examples transmitting from a first device to a second device includes the first device placing data into a network for receipt by the second device but may not include the second device receiving the data. Conversely receiving from a first device may include receiving the data from a network but may not include the first device transmitting the data.

 Determining by a computing system can include the computing system requesting that another device perform the determination and supply the results to the computing system. Moreover displaying or presenting by a computing system can include the computing system sending data for causing another device to display or present the referenced information.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. Additionally the processor may be implemented using any of a number of architectures. For example the processor may be a CISC Complex Instruction Set Computers processor a RISC Reduced Instruction Set Computer processor or a MISC Minimal Instruction Set Computer processor. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT Thin Film Transistor Liquid Crystal Display display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provide in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM Single In Line Memory Module card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provide as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor that may be received for example over transceiver or external interface .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to device which may be used as appropriate by applications running on device .

Device may also communicate audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smartphone personal digital assistant or other similar mobile device.

Additionally computing device or can include Universal Serial Bus USB flash drives. The USB flash drives may store operating systems and other applications. The USB flash drives can include input output components such as a wireless transmitter or USB connector that may be inserted into a USB port of another computing device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN peer to peer networks having ad hoc or static members grid computing infrastructures and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

As additional description to the implementations described above the present disclosure describes the following implementations.

Implementation 1 is a computer implemented method. The method includes receiving from a first third party application program that is executing on a computing device and that was developed by a first entity a first request to purchase a first product for use within the first third party application program. The method includes in response to receiving the first request customizing a purchasing user interface to include first details that are specific to the first product and displaying the purchasing user interface that includes the first details. The method includes receiving from a second third party application program that is executing on the computing device and that was developed by a second entity a second request to purchase a second product for use within the second third party application program. The method includes in response to receiving the second request customizing the purchasing user interface to include second details that are specific to the second product and displaying the purchasing user interface that includes the second details.

Implementation 2 is the method of implementation 1. The first request was initiated by a user of the computing device selecting an interface element provided by the first third party application program. The second request was initiated by the user selecting an interface element provided by the second third party application program.

Implementation 3 is the method of implementation 1. An application program other than the first third party application program and the second third party application program a receives the first request b customizes the purchasing user interface to include the first details c displays the purchasing user interface that includes the first details d receives the second request e customizes the purchasing user interface to include the second details and f displays the purchasing user interface that includes the second details.

Implementation 4 is the method of implementation 3. The other application program was developed by a third entity that is different than the first entity and the second entity.

Implementation 5 is the method of implementation 3. The other application program was developed by a third entity that manages an application program distribution platform through which the user downloaded the first third party application program and the second third party application program to the computing device.

Implementation 6 is the method of implementation 3. The other application program was developed by a third entity that operates a computerized service that a charges users of the first third party application program and the second third party application program for products purchased using the respective application programs and b credits a financial account of a developer of the first third party application program and a financial account of a developer of the second third party application program for the products purchased using the respective application programs.

Implementation 7 is the method of implementation 1. The method further includes customizing the purchasing user interface to include the first details by i sending a request for indications of the first details to a remote computing system and in response ii receiving the indications of the first details from the remote computing system and iii accessing a template for the purchasing user interface and filling the template in with the first details. The first third party application program does not receive the indications of the first details and does not include the indications of the first details. The method further includes customizing the purchasing user interface to include the second details by i sending a request for indications of the second details to the remote computing system and in response ii receiving the indications of the second details from the remote computing system and iii accessing the template for the purchasing user interface and filling the template in with the second details. The second third party application program does not receive the indications of the second details and does not include the indications of the second details.

Implementation 8 is the method of implementation 7. The first details include one or more prices that correspond to one or more prices for purchase of the first product. The second details include one or more prices that correspond to one or more prices for purchase of the second product.

Implementation 9 is the method of implementation 7. The first details include a first description of the first product the first description having been specified by a developer of the first third party application program. The second details include a second description of the second product the second description having been specified by a developer of the second third party application program.

Implementation 10 is the method of implementation 7. Users of a computerized billing system are each assigned a security image that is specific to the individual user and that is not publicly distributed by the computerized billing system. The first details include a security image that is specific to a user of the computing device. The second details include the security image that is specific to the user of the computing device. The first third party application program and the second third party application program do not receive the security image and do not have access to the security image.

Implementation 11 is the method of implementation 7. The first third party application program and the second third party application program do not include the template and are not configured to access the template.

Implementation 12 is a computer implemented method. The method includes receiving a first request to purchase a first product for use within a first third party application program the first third party application program executing on a computing device and having been developed by a first entity the first request received from the first third party application program by a particular application program executing on the computing device. The method includes in response to receiving the first request the particular application program i requesting from a remote server system first details associated with the first product ii accessing a template of a purchasing user interface and iii displaying the purchasing user interface by modifying the template to include the first details. The method includes receiving a second request to purchase a second product for use within a second third party application program the second third party application program executing on the computing device and having been developed by a second entity the second request received from the second third party application program by the particular application program. The method includes in response to receiving the second request the particular application program i requesting from the remote server system second details associated with the second product ii accessing the template of the purchasing user interface and iii displaying the purchasing user interface by modifying the template to include the second details.

Implementation 13 is the method of implementation 12. The remote server system is administered by an organization that developed the particular application program the organization being different than the first entity and the second entity.

Implementation 14 is the method of implementation 12. The first details include a first price that corresponds to a price of the first product the first price being unknown to the first third party application program at a time that the first third party application program sends the first request. The second details include a second price that corresponds to a price of the second product the second price being unknown to the second third party application program at a time that the second third party application program sends the second request.

Implementation 15 is the method of implementation 12. The first details identify multiple purchasing instruments with which a user of the computing device may purchase the first product. The displayed purchasing user interface that includes the first details provides the user with an ability to select one of the multiple purchasing instruments with which to purchase the first product. The second details identify the multiple purchasing instruments. The displayed purchasing user interface that includes the second details provides the user with an ability to select one of the multiple purchasing instruments with which to purchase the second product.

Implementation 16 is the method of implementation 12. The displayed purchasing user interface that includes the first details provides a user of the computing device with an ability to provide input to confirm purchase of the first product such that no further input from the user is required to complete purchase of the first product after the user provides input to confirm purchase of the first product. The displayed purchasing user interface that includes the first details provides the user with an ability to provide input to confirm purchase of the second product such that no further input from the user is required to complete purchase of the second product after the user provides input to confirm purchase of the second product.

Implementation 17 is the method of implementation 12. The template is not accessible to the first third party application program and is not accessible to the second third party application.

Implementation 18 is the method of implementation 12. The first third party application program and the second third party application were downloaded to the computing device from an application distribution platform service that billed a user of the computing device for purchase of the first third party application program and the second third party application program. The purchasing user interface that includes the first details and the purchasing user interface that includes the second details provide the user with an ability to purchase the first product and second product respectively and as a result bill the user for purchase of the first product and the second product respectively.

Implementation 19 is a computer implemented method. The method includes displaying by a first third party application program that is executing on a computing device and that was developed by a first entity a user interface that enables a user of the computing device to initiate purchase of a first product for use within the first third party application program. The method includes receiving by the first third party application program input from the user that that selects the first product for purchase. The method includes sending by the first third party application program and to a particular application program a request to purchase the first product so as to cause the particular application program to i access from a remote computing system first details for the first product ii modify a generic user interface for purchasing products to include the first details the generic user interface modifiable by the particular application program to include second details for a second product in response to a request to purchase the second product being received by the particular application program from a second third party application program developed by a second entity iii display the modified user interface that includes the first details and iv receive input from the user confirming purchase of the first product.

Implementation 1 is a computer implemented method. The method includes receiving by particular application program executing on a computing system and as having been sent by a third party application program executing on the computing system i a first request to purchase a product for use by the third party application program and ii an attribute of the product. The method includes sending by the particular application program and for receipt by a server system as a result of the particular application program receiving the first request and the attribute of the product i a second request to purchase the product and ii the attribute of the product. The method includes receiving by the particular application program and as having been sent by the server system as a result of the particular application program sending the second request and the attribute of the product i an indication that the product has been purchased and ii the attribute of the product. The method includes sending by the particular application program and for receipt by the third party application program as a result of the particular application program receiving the indication and the attribute of the product i the indication that the product has been purchased and ii the attribute of the product.

Implementation 2 is the method of implementation 1. The first request includes the attribute of the product and an identifier for the product the identifier for the product uniquely identifying the product from a collection of products that a user is able to purchase from a user interface that is provided by the third party application program.

Implementation 3 is the method of implementation 2. The first request is received through the use of an application program that is adapted to receive the first request with the attribute of the product included in the first request and is also adapted to receive the first request without the attribute of the product included in the first request.

Implementation 4 is the method of implementation 1. The attribute of the product specifies an index in a database at which information regarding the product is stored.

Implementation 5 is the method of implementation 1. The attribute of the product specifies a measure of the product. A price of the product is independent of the specified measure of the product.

Implementation 6 is the method of implementation 1. The attribute of the product specifies a variation of the product.

Implementation 7 is a computer implemented method. The method includes providing by a third party application program executing on a computing device a user interface with which a user of the computing device is able to request purchase of a product that is for use by the third party application program receiving by the third party application program an indication that the user provided input requesting purchase of the product. The method includes sending by the third party application program and for receipt by a particular application program i a request to purchase the product and ii an attribute of the product. The method includes receiving by the third party application program and as having been sent by the particular application program as a result of sending the request and the attribute of the product i an indication that the product has been purchased and ii the attribute of the product.

Implementation 8 is the method of implementation 7. The particular application program is executing on the computing device.

Implementation 9 is the method of implementation 7. The request includes a the attribute of the product and b an identifier for the product the identifier uniquely identifying the product from a collection of products that the user of the third party application program is able to purchase from a user interface provided by the third party application program.

Implementation 10 is the method of implementation 7. The attribute of the product specifies an index in a database at which information regarding the product is stored.

Implementation 11 is the method of implementation 7. The method further includes providing by the third party application program a user interface with which the user is able to supply credentials for logging into each of multiple user accounts that are associated with the third party application program. The attribute of the product identifies one of the multiple user accounts in which the user was logged in when the indication that the user provided the input was received.

Implementation 12 is the method of implementation 7. The method further includes receiving by the third party application program and as having been sent by the particular application program as a result of sending the request and the attribute of the product a signature that was generated by applying a first cryptographic key to a hash of the indication that the product has been purchased and the attribute of the product. The method further includes using a second cryptographic key to decrypt the signature or requesting that another system use the second cryptographic key to decrypt the signature the first cryptographic key and the second cryptographic key being keys in a pair of a public cryptographic key and a corresponding private cryptographic key.

Implementation 13 is a computer implemented method. The method includes receiving by a server system and as having been sent by a computing device that is different than the server system i a request to purchase a product for use by a third party application program that is executing on the computing device and ii an attribute of the product. The method includes sending by the server system and for receipt by the computing device i an indication that the product has been purchased and ii the attribute of the product.

Implementation 14 is the method implementation 13. The request and the attribute of the product were sent for receipt by the server system from a particular application program that is executing on the computing device and that is different than the third party application program.

Implementation 15 is the method of implementation 13. The request includes the attribute of the product.

Implementation 16 is the method of implementation 13. The attribute of the product specifies an index in a database at which information regarding the product is stored.

Implementation 17 is the method of implementation 13. The attribute of the product specifies a measure of the product and wherein the method further comprises requesting debiting of a user account for a cost that corresponds to a cost of the product as a result of receiving the request the cost that corresponds to the cost of the product not depending on the specified measure of the product.

Implementation 18 is the method of implementation 13. The server system does not store before the attribute of the product is received by the server system and in association with information relating to the product information that identifies the attribute of the product.

Implementation 19 is the method of implementation 13. The method further includes identifying by the server system one or more additional computing devices that are associated with a user of the computing device. The method includes sending by the server system and for receipt by each of the one or more additional computing devices i an additional indication that the product has been purchased and ii the attribute of the product.

Implementation 20 is the method of implementation 19. The server system did not receive an additional request to purchase the product as having been sent by any of the one or more additional computing devices.

Implementation 1 is a computer implemented method. The method includes receiving by a server system and as having been sent by a first computing device a request to purchase a product. The first computing device is one of multiple computing devices assigned to a user account. The method includes requesting by the server system as a result of receiving the request to purchase the product to charge an account associated with a user of the first computing device for a price that corresponds to a price of the product. The method includes receiving by the server system as a result of requesting to charge the account an indication that the account has been charged. The method includes sending by the server system and for receipt by each of the multiple computing devices as a result of receiving the indication that the account has been charged a notification that a purchasing event has occurred. The method includes receiving by the server system and as having been sent by each of at least a subset of the multiple computing devices as a result of sending the notification for receipt by each of the multiple computing devices a request for details of the purchasing event. The method includes sending by the server system and for receipt by each of the at least subset of the multiple computing devices as a result of receiving the request for details of the purchasing event from each of the at least subset of the multiple computing device an indication that the product has been purchased.

Implementation 2 is the method of implementation 1. The request to purchase the product was sent by the first computing device for receipt by the server system as a result of a user of the first computing device providing input in a user interface provided by a third party application program to purchase a product for use by the first third party application program.

Implementation 3 is the method of implementation 1. The notification that the purchasing event has occurred does not specify that the product has been purchased.

Implementation 4 is the method of implementation 1. The notification is sent for receipt by each of the multiple computing devices before the server system receives the request for details of the purchasing event as having been sent by any of the multiple computing devices.

Implementation 5 is the method of implementation 4. The server system does not receive a request to purchase the product from any of the multiple computing devices other than the first computing device.

Implementation 6 is the method of implementation 5. The request for details of the purchasing event that is received as having been sent by a first computing device from the at least subset of the multiple computing devices includes a first nonce. The indication that the product has been purchased that is sent for receipt by the first computing device includes the first nonce. The request for details of the purchasing event that is received as having been sent by a second computing device from the at least subset of the multiple computing devices includes a second nonce. The indication that the product has been purchased that is sent for receipt by the second computing device includes the second nonce the second nonce being different than the first nonce.

Implementation 7 is the method of implementation 1. The method includes sending by the server system and for receipt by each of the at least subset of the multiple computing devices as a result of receiving the request for details of the purchasing event from each of the at least subset of the multiple computing device the product has been purchased.

Implementation 8 is a computer implemented method. The method includes receiving by a server system and as having been sent by a first computing device a request to purchase a product. The first computing device is one of multiple computing devices that are assigned to a user account. The received request to purchase the product was sent by the first computing device as a result of a user of the first computing device providing input to purchase the product from an interface that is provided by a third party application program. The product is for use by the third party application program. The method includes requesting by the server system as a result of receiving the request to purchase the product purchase of the product. The method includes receiving by the server system as a result of requesting the purchase of the product an indication that the product has been purchased. The method includes sending by the server system and for receipt by the first computing device subsequent to receiving the indication that the product has been purchased a first indication that the product has been purchased. The method includes identifying by the server system that a second computing device is another of the multiple computing devices that are assigned to the user account and sending by the server system and for receipt by the second computing device subsequent to receiving the indication that the product has been purchased a second indication that the product has been purchased.

Implementation 9 is the method of implementation 8. The second indication that the product has been purchased is not sent for receipt by the second computing device in response to a request to purchase the product being sent by the second computing device for receipt by the server system.

Implementation 10 is the method of implementation 8. The server system sent the second indication that the product has been purchased for receipt by the second computing device without the server system receiving after the request to purchase the product is received by the server system any communication that was sent by the second computing device.

Implementation 11 is the method of implementation 8. The method further includes sending by the server system and for receipt by the first computing device as a result of receiving the indication that the product has been purchased a first notification that a purchasing event has occurred. The method further includes receiving by the server system and as having been sent by the first computing device a first request for details of the purchasing event. Sending the first indication that the product has been purchased is performed as a result of receiving the first request for details of the purchasing event. The method further includes sending by the server system and for receipt by the second computing device as a result of receiving the indication that the product has been purchased a second notification that the purchasing event has occurred. The method further includes receiving by the server system and as having been sent by the second computing device a second request for details of the purchasing event. Sending the second indication that the product has been purchased is performed subsequent to receiving the second request for details of the purchasing event.

Implementation 12 is the method of implementation 11. The method further includes determining that the server system has not received a confirmation that the second computing device received the second notification that the product that the purchasing event has occurred and in response sending by the server system and for receipt by the second computing device an additional second notification that the purchasing event has occurred. Receiving the second request for details of the purchasing event is performed as a result of sending the additional second notification that the purchasing event has occurred.

Implementation 13 is the method of implementation 11. The first request for details includes a first nonce. The second request for details includes a second nonce. The first indication that the product has been purchased includes the first nonce. The second indication that the product has been purchased includes the second nonce.

Implementation 14 is a computer implemented method. The method includes providing by a first computing device a user interface that is specified by a third party application program executing on the first computing device the user interface including a user interface element with which a user of the first computing device is able to initiate purchase of a product that is for use by the third party application program. The method includes receiving by the first computing device user input that selects the user interface element. The method includes sending by the first computing device and for receipt by a server system a request to purchase the product. The method includes receiving by the first computing device and as having been sent by the server system subsequent to the first computing device sending the request to purchase the product a first indication that the product has been purchased. The method includes receiving by a second computing device and as having been sent by the server system subsequent to the first computing device sending the request to purchase the product a second indication that the product has been purchased wherein the first computing device and the second computing device are both assigned to a user account.

Implementation 15 is the method of implementation 14. The second indication that the product has been purchased is received by the second computing device without the second computing device having sent any communication for receipt by the server system after the first computing device sent the request to purchase the product.

Implementation 16 is the method of implementation 14. The method further includes receiving by the first computing device and as having been sent by the server system as a result of the first computing device sending the request to purchase the product a first notification that a purchasing event has occurred. The method further includes sending by the first computing device and for receipt by the server system as a result of receiving the first notification a first request for details of the purchasing event. The first computing device receives the first indication that the product has been purchased as a result of sending the first request for details receiving by the second computing device and as having been sent by the server system as a result of the first computing device sending the request to purchase the product a second notification that the purchasing event has occurred. The method further includes sending by the second computing device and for receipt by the server system as a result of receiving the second notification a second request for details of the purchasing event. The second computing device receives the second indication that the product has been purchased as a result of sending the second request for details.

Implementation 17 is the method of implementation 16. The second computing device receives the second notification that the purchasing event has occurred before the first computing device receives the first notification that the purchasing event has occurred.

Implementation 18 is the method of implementation 16. The first notification is same as the second notification. The second computing device processes receipt of the second notification same as if the second computing device had previously sent a request to purchase the product for receipt by the server system.

Implementation 19 is the method of implementation 16. The first request for details includes a first nonce. The first indication that the product has been purchased includes the first nonce. The second request for details includes a second nonce. The second indication that the product has been purchased includes the second nonce.

Implementation 20 is the method of implementation 14. The second computing device receives the second indication that the product has been purchased before the first computing device receives the first indication that the product has been purchased.

Implementation 21 is the method of implementation 14. The method further includes requesting by the first computing device as a result of receiving the first indication that the product has been purchased the product from a second server system. The method further includes receiving by the first computing device and as having been sent by the second server system as a result of the first computing device requesting the product from the second server system the product. The method further includes changing by the first computing device as a result of receiving the product the user interface to identify the product as being purchased. The method further includes requesting by the second computing device as a result of receiving the second indication that the product has been purchased the product from the second server system. The method further includes receiving by the second computing device and as having been sent by the second server system as a result of the second computing device requesting the product from the second server system the product. The method further includes presenting by the second computing device as a result of receiving the product a second user interface according to instructions specified by a copy of the third party application program that executing at the second computing device the user interface to identify the product as being purchased.

Implementation 1 is a computer implemented method. The method includes receiving by a server system and as having been sent by a computing device a request to purchase a product the request having been initiated by user selection of an interface element that is provided for display by a third party application program executing on the computing device the product being for use by the third party application program. The method includes sending by the server system and for receipt by a transaction processing system a charge request to charge an account of a user of the computing device for purchase of the product determining by the server system and after the charge request has been sent for receipt by the transaction processing system to cancel the charge request sending by the server system and for receipt by the transaction processing system a request to cancel the charge request. The method includes sending by the server system and for receipt by the computing device an indication that purchase of the product has been cancelled.

Implementation 2 is the method of implementation 1. The method includes instituting by the server system and as a result of determining to cancel the charge request a delay. The method further includes receiving by the server system and as having been sent by the transaction processing system after the request to cancel the charge request has been sent for receipt by the server system and during the delay or after the delay an indication that the charge request has been cancelled. Sending the indication that purchase of the product has been cancelled is performed as a result of receiving the indication that the charge request has been cancelled.

Implementation 3 is the method of implementation 2. Instituting the delay includes i sending by the server system and for receipt by the computing device a request that specifies a length of time so as to cause the computing device to delay for the length of time and ii receiving by the server system and as having been sent by the computing device after an expiration of the delay for the length of time as monitored by the computing device a communication that indicates that the delay has expired.

Implementation 4 is the method of implementation 1. Determining to cancel the charge request includes determining that a measure of time associated with purchase of the product has exceeded a threshold level of time.

Implementation 5 is the method of implementation 4. The measure of time associated with purchase of the product includes i a measure of time since the user selection of the interface element ii a measure of time since the request to purchase the product was sent by the computing device iii a measure of time since the request to purchase the product was received by the server system iv a measure of time since the charge request was sent by the server system or v a measure of time since the charge request was received by the transaction processing system.

Implementation 6 is the method of implementation 1. The method includes determining by the server system and as a result of receiving the request to purchase the product a length of time for which to delay. The method includes sending by the server system and for receipt by the computing device an indication of the determined length of time. The method includes receiving by the server system and as having been sent by the computing device a communication that indicates that a delay for the length of time as measured by the computing device has expired. Sending the indication that purchase of the product has been cancelled is performed in response to the server system receiving the communication.

Implementation 7 is the method of implementation 6. The method includes determining by the server system and as a result of receiving the communication that indicates that the delay has expired whether the server system has received as having been sent by the transaction processing system an indication that the charge request has been cancelled.

Implementation 8 is the method of implementation 7. The indication that the charge request has been cancelled is received in response to the server system sending the request to cancel the charge request.

Implementation 9 is the method of implementation 8. Determining to cancel the charge request includes analyzing a length of time since the account of the user was created.

Implementation 10 is the method of implementation 8. Determining to cancel the charge request includes analyzing previous requests to purchase products the previous requests having been sent by the computing device for receipt by the server system.

Implementation 11 is a computer implemented method. The method includes receiving by a server system and as having been sent by a computing device a request to purchase a product the request having been initiated by user selection of an interface element that is provided for display by a third party application program executing on the computing device the product being for use by the third party application program. The method includes sending by the server system and for receipt by a transaction processing system a charge request to charge an account of a user of the computing device for purchase of the product determining by the server system and as a result of receiving the request to purchase the product a first length of time for which to delay. The method includes sending by the server system and for receipt by the computing device an indication of the first length of time so as to cause the computing device to delay for the first length of time. The method includes receiving by the server system and as having been sent by the remote computing device a communication that indicates that the delay for the first length of time has expired. The method includes determining by the server system and as a result of receiving the communication that indicates that the delay for the first length of time has expired whether the server system has received as having been sent by the transaction processing system an indication that the charge request has been successful or has been cancelled.

Implementation 12 is the method of implementation 11. The method further includes sending by the server system and for receipt by the computing device as a result of determining that the server system has received the indication that the charge request has been successful or has been cancelled an indication that purchase of the product has been successful or has been cancelled.

Implementation 13 is the method of implementation 11. The method further includes sending by the server system and for receipt by the transaction processing system as a result of determining that the server system has not received the indication that the charge request has been successful or has been cancelled a request to cancel the charge request. The method further includes sending by the server system and for receipt by the computing device an indication that purchase of the product has been successful or has been cancelled.

Implementation 14 is the method of implementation 11. The method further includes sending by the server system and for receipt by the computing device as a result of determining that the server system has not received the indication that the charge request has been successful or has been cancelled an indication of a second length of time so as to cause the computing device to delay for the second length of time the second length of time being different than the first length of time. The method further includes receiving by the server system and as having been sent by the remote computing device a second communication that indicates that the delay for the second length of time has expired. The method further includes determining by the server system and as a result of receiving the second communication that indicates that the delay for the second length of time has expired whether the server system has received as having been sent by the transaction processing system the indication that the charge request has been successful or has been cancelled. The method further includes sending by the server system and for receipt by the computing device as a result of determining that the server system has received the indication that the charge request has been successful or has been cancelled an indication that purchase of the product has been successful or has been cancelled.

Implementation 15 is a computer implemented method. The method includes providing by a computing device a display of an interface element according to instructions of a third party application program executing on the computing device the interface element being for initiating purchase of a product the product being for use by the third party application program. The method includes receiving by the computing device an indication of user selection of the interface element. The method includes sending by the computing device and for receipt by a server system as a result of receiving the indication of user selection of the interface element a request to purchase a product so as to prompt the server system to charge an account of a user of the computing device for the product receiving by the computing device and as having been sent by the server system as a result of sending the request to purchase the product an indication of a first length of time for which to delay. The method includes instituting by the computing device and as a result of receiving the indication of the first length of time for which to delay a delay for the first length of time. The method includes sending by the computing device and for receipt by the server system an indication that the delay for the first length of time has expired so as to prompt the server system to determine whether the account of the user has been charged for the product.

Implementation 16 is the method of implementation 15. The method includes receiving by the computing device and as having been sent by the server system as a result of the computing device sending the indication that the delay for the first length of time has expired an indication that purchase of the product has been cancelled.

Implementation 17 is the method of implementation 15. The method includes receiving by the computing device and as having been sent by the server system as a result of the computing device sending the indication that the delay for the first length of time has expired an indication of a second length of time for which to delay. The method includes instituting by the computing device and as a result of receiving the indication of the second length of time for which to delay a delay for the second length of time. The method includes sending by the computing device and for receipt by the server system an indication that the delay for the second length of time has expired so as to prompt the server system to determine for a second time after the request to purchase the product was sent to the server system whether the account of the user has been charged for the product.

Implementation 18 is the method of implementation 17. The method includes receiving by the computing device and as having been sent by the server system in response to sending the indication that the delay for the second length of time has expired an indication that purchase of the product has been cancelled.

Implementation 19 is the method of implementation 17. The first length of time is different than the second length of time.

Implementation 1 is a computer implemented method. The method includes providing by a computing device a user interface that is specified by instructions of a third party application program the user interface including an interface element that when selected by a user causes the computing device to initiate purchase of a product. The method includes receiving by the computing device an indication that the user has selected the interface element. The method includes identifying by the computing device a first identity certificate that is assigned to the third party application program from among multiple identity certificates that are assigned to multiple respective third party application programs. The method includes sending by the computing device the first identity certificate for receipt by a server system so as to cause the server system to determine whether the first identity certificate matches a second identity certificate. The method includes receiving by the computing device and as a result of sending the first identity certificate for receipt by the server system and the server system having determined that the first identity certificate matches the second identity certificate an indication that the third party application program is able to legitimately purchase the product. The method includes sending by the computing device and for receipt by the server system as a result of receiving the indication that the user has selected the interface element a request for purchasing the product.

Implementation 2 is the method of implementation 1. The product is a digital product for use by the third party application program in another user interface specified by instructions of the third party application program.

Implementation 3 is the method of implementation 1. Sending the first identity certificate for receipt by the server system is performed i as a result of receiving the indication that the user has selected the interface element and ii before the computing device receives an indication that the product has been purchased.

Implementation 4 is the method of implementation 1. The request for purchasing the product includes the first identity certificate.

Implementation 5 is the method of implementation 1. The indication that the third party application program is able to legitimately purchase the product includes a receipt of details regarding the product the details not having been previously stored by the computing device.

Implementation 6 is the method of implementation 1. The details include i one or more prices for the product ii a title of the product or iii a description of the product.

Implementation 7 is the method of implementation 1. The indication that the third party application program is able to legitimately purchase the product includes a receipt of an indication that the product was successfully purchased.

Implementation 8 is the method of implementation 1. The method includes receiving by the computing device and as having been sent by a remote computing system as a result of the computing device sending a request to download the third party application program i the third party application program and ii the first identity certificate wherein the first identity certificate includes a first cryptographic hash value generated from the third party application program.

Implementation 9 is the method of implementation 8. The method includes generating by the computing device a second cryptographic hash value from the third party application program. The method includes comparing by the computing device the first cryptographic hash value to the second cryptographic hash value.

Implementation 10 is the method of implementation 9. The method includes applying a public cryptographic key to the first identity certificate to unlock the first identity certificate and extract the first cryptographic hash value from the first identity certificate.

Implementation 11 is the method of implementation 10. The first identity certificate was locked with a private key by a developer of the third party application program.

Implementation 12 a computer implemented method. The method includes receiving by a computing device and as a result of the computing device sending a request to download a third party application program i the third party application program and ii a first identity certificate for the third party application program wherein the first identity certificate includes a first cryptographic hash value generated from the third party application program by a computing system that is different than the computing device. The method includes generating by the computing device a second cryptographic hash value from the third party application program. The method includes determining by the computing device whether the first cryptographic hash value matches the second cryptographic hash value. The method includes installing by the computing device the third party application program. The method includes providing by the computing device a user interface that is specified by instructions of the third party application program the user interface including an interface element that initiates purchase of a product when selected by a user wherein the product is a digital product for use by the third party application program in another user interface specified by instructions of the third party application program. The method includes sending by the computing device and for receipt by a server system a request for purchasing the product the request including the first identity certificate so as to cause the server system to determine whether the first identity certificate matches a second identity certificate that the server system has assigned to the third party application program and receiving by the computing device an indication that the third party application program is able to legitimately purchase the product.

Implementation 13 is the method of implementation 12. The indication that the third party application program is able to legitimately purchase the product includes a receipt of details regarding the product the details not having been previously stored by the computing device.

Implementation 14 is the method of implementation 12. The computing device is configured so that the third party application program is prevented reinstalling the third party application program without updating the first identity certificate.

Implementation 15 is a computer implemented method. The method includes receiving by a server system and as having been sent by computing device as a result of a user of the computing device selecting an interface element provided for display at request of a third party application program a request that specifies a first identity certificate that the computing device assigned to the third party application program. The selection of the interface element initiates purchase of a product. The method includes accessing by the server system a second identity certificate that the server system assigned to the third party application program before the server system received the request that specifies the first identity certificate. The method includes determining by the server system whether the first identity certificate matches the second identity certificate. The method includes in response to a determination that the first identity certificate matches the second identity certificate sending for receipt by the computing device an indication that the third party application program is able to legitimately purchase the product.

Implementation 16 is the method of implementation 15. The product is a digital product for use by the third party application program in another user interface specified by instructions of the third party application program.

Implementation 17 is the method of implementation 15. The request that specifies the first identity certificate is a request for purchasing the product.

Implementation 18 is the method of implementation 15. The first identity certificate matches the second identity certificate by being identical identity certificates.

Implementation 19 is the method of implementation 15. The method includes receiving by the server system the third party application program and the second identity certificate as having been sent by a device of a developer of the third party application program. The method includes storing by the server system the second identity certificate for subsequent access and assigning the second identity certificate to the third party application program. The method includes receiving by the server system and as having been sent by the computing device a request to download the third party application program. The method includes initiating by the server system sending of the third party application program for receipt by the computing device.

Implementation 1 is computerized device. The device includes one or more computer processors. The device includes a particular application program executable by the one or more computer processors. The particular application program is configured to i provide a common interface to which multiple third party application programs are able to send product purchase requests ii request from a remote server system in response to receiving a particular one of the product purchase requests particular details regarding a particular product specified by the particular product purchase request and iii send to the remote server system after the particular application program receives a response to the request for the particular details a confirming product purchase request the confirming product purchase request causing the remote server system to request that an account of a user of the computerized device be debited for a price that corresponds to a price of the particular product. The device includes a first third party application program. The first third party application program is executable by the one or more computer processors. The first third party application program is configured to receive an indication that the user supplied input selecting a first product for purchase and in response send to the particular application program a first product purchase request that specifies the first product. The device includes a second third party application program. The second third party application program is executable by the one or more computer processors. The second third party application program is configured to receive an indication that the user supplied input selecting a second product for purchase and in response send to the particular application program a second product purchase request that specifies the second product.

Implementation 2 is the device of implementation 1. The particular application program is further configured to iv receive from the remote server system an indication that the account of the user has been debited for the price that corresponds to the price of the particular product and in response send to the particular third party application program an indication that the particular product has been purchased.

Implementation 3 is the device of implementation 2. The particular application program is further configured to after sending the confirming product purchase request and before receiving the indication that the account of the user has been debited receive a second particular one of the product purchase requests and send to the remote server system a second confirming product purchase request.

Implementation 4 is the device of implementation 1. The particular details specify multiple different prices for the particular product. The confirming product purchase request specifies one of the multiple different prices at which to purchase the particular product.

Implementation 5 is the device of implementation 1. The particular details specify multiple purchasing instruments with which the user is able to purchase the particular product. The confirming product purchase request specifies one of the multiple purchasing instruments with which to purchase the particular product.

Implementation 6 is the device of implementation 1. The particular application program is configured to display a confirming user interface with which the user is able to provide input to cancel and confirm purchase of products the confirming user interface being a same user interface that is displayed in response to each of the product purchase requests except that the confirming user interface is customized to display one or more features specific to a product being purchased.

Implementation 7 is the device of implementation 1. The particular application program is configured to receive an indication that the user provided input to cancel the particular product purchase request and in response send to a particular one of the third party application programs an indication that the user cancelled the particular product purchase request.

Implementation 8 is the device of implementation 1. The first third party application program is not configured to communicate with the remote server system. The second third party application program is not configured to communicate with the remote server system.

Implementation 9 is the device of implementation 1. The first product purchase request does not specify a price of the first product. The particular application program in response to receiving the first product purchase request identifies a user selected price from multiple prices for the first product and sends to the remote server system a first confirming product purchase request that specifies the first product and an indication of the user selected price.

Implementation 10 is the device of implementation 1. The first product purchase request does not specify a description of the first product. The particular application program in response to receiving the first product purchase request identifies a description for the first product and displays the description for the first product.

Implementation 11 is the device of implementation 1. The first third party application program in response to sending the first product purchase request receives from the particular application program an indication that the first product has been purchased requests from a server system that is managed by an entity that developed the first third party application program the first product and receives from the server system that is managed by the entity that developed the first third party application program the first product.

Implementation 12 is the device of implementation 1. The first third party application program in response to sending the first product purchase request receives from the particular application program an indication that the first product has been purchased and provides the user with access to the first product the first product having been stored by the first third party application program at a time that the first third party application program sent the first product purchase request.

Implementation 13 is the device of implementation 1. The first third party application program was downloaded to the computing device from an application distribution platform. The second third party application program was downloaded to the computing device from the application distribution platform. The particular application program was developed by a same organization that developed an operating system on which the particular application program the first third party application program and the second third party application program are executing.

Implementation 14 is a computerized server system. The server system includes one or more computer processors. The server system includes one or more computer readable media encoding instructions that when executed by the one or more computer processors cause the one or more computer processors to perform operations. The operations include receiving as having been sent by a particular application program that is executable at a remote computing device a request for details regarding a product that a user of the remote computing device selected for purchase from a user interface provided by a third party application program executable at the remote computing device the received request specifying the product. The operations include using an indication of the product to identify details that are specific to the product. The operations include sending for receipt by the particular application program the details. The operations include receiving from the particular application program and after sending the details confirmation to purchase the product and in response sending a charge request to charge the user for the product to a transaction processing system.

Implementation 15 is the computerized server system of implementation 14. The details were specified by a developer of the third party application program.

Implementation 16 is the computerized server system of implementation 14. The details include multiple prices that correspond to prices for the product. The received confirmation specifies one of the multiple prices that correspond to the prices for the product. The request to the transaction processing system specifies the one of the multiple prices.

Implementation 17 is the computerized server system of implementation 16. The received request specifies the user. Identifying the details that are specific to the product includes identifying multiple currencies assigned to the user and identifying the multiple prices as being prices that correspond to prices for the product in the multiple currencies.

Implementation 18 is the computerized server system of implementation 17. Identifying the multiple currencies includes identifying multiple purchasing instruments that are associated with the user and identifying default currencies for the multiple purchasing instruments.

Implementation 19 is the computerized server system of implementation 14. The details include multiple purchasing instruments with which the user is able to purchase the product. The received confirmation specifies one of the multiple purchasing instruments. The request to the transaction processing system specifies the one of the multiple purchasing instruments.

Implementation 1 is a computer implemented method for providing multiple prices for a product. The method includes providing data for generating a user interface that includes elements with which a developer of an application program can specify multiple prices in multiple respective currencies for which a product is to be offered for purchase. The application program being configured to permit a user of the application program to initiate purchase of the product from an interface that is provided by the application program. The method includes receiving an indication of user input by the developer that specifies a first price of the multiple prices the first price being for a first currency. The method includes determining a second price of the multiple prices the second price being for a second currency. The method includes storing the first price and the second price for subsequent presentation to a prospective purchaser of the product as alternative prices.

Implementation 2 is the method of implementation 1. The product is a product that was developed by the developer.

Implementation 3 is the method of implementation 1. The user input that specifies the first price includes typing the first price.

Implementation 4 is the method of implementation 1. Determining the second price includes receiving an indication of user input by the developer that specifies the second price.

Implementation 5 is the method of implementation 1. The method further includes as a result of receiving the indication of user input by the developer that specifies the first price i identifying an exchange rate between the first currency and the second currency ii determining the second price by applying the exchange rate to the first price without receiving an indication of user input by the developer that specifies the second price and iii presenting the second price in the user interface.

Implementation 6 is the method of implementation 5. The first price is presented in a first user editable field. Presenting the second price includes presenting the second price in a second user editable field without receiving an indication of user input by the developer that specifies the second price in the second user editable field. Storing the first price and the second price includes storing a value that has been presented in the first user editable field and storing a value that has been presented in the second user editable field.

Implementation 7 is the method of implementation 1. The method further includes as a result of receiving the indication of user input by the developer that specifies the first price i identifying an exchange rate between the first currency and the second currency ii determining a second currency exchange price by applying the exchange rate to the first price iii presenting the second currency exchange price in the user interface and iv determining the second price includes receiving an indication of user input by the developer that specifies the second price while the exchange price was concurrently displayed in the user interface.

Implementation 8 is the method of implementation 1. The method further includes receiving an indication of user input by the developer that specifies that the second price is to occasionally change as an exchange rate of the first currency to the second currency changes.

Implementation 9 is the method of implementation 8. The method further includes providing the second price for presentation to the prospective purchaser of the product. The method further includes identifying that the exchange rate of the first currency to the second currency has changed and subsequently re determining the second price based on the exchange rate having changed without receipt of user input from the developer that specifies or confirms the second price that has been re determined the second price that has been re determined being different than the second price before the re determining. The method further includes providing the second price that has been re determined to a second prospective purchaser of the product.

Implementation 10 is the method of implementation 1. The method further includes receiving an indication of user input by the developer that specifies one of multiple different increments of the second currency to which the second price is to change over time as an exchange rate of the first currency to the second currency changes.

Implementation 11 is the method of implementation 1. The method further includes providing the second price for presentation to the prospective purchaser of the product. The method further includes identifying that the exchange rate of the first currency to the second currency has changed and subsequently re determining the second price based on the exchange rate having changed and rounding the second price that has been re determined to the increment of the second currency specified by the developer. The method further includes providing the second price that has been re determined to a second prospective purchaser of the product.

Implementation 12 is the method of implementation 1. The method further includes receiving an indication of user input by the developer that specifies a minimum value that the second price may not fall to or beneath as an exchange rate of the first currency to the second currency changes.

Implementation 13 is the method of implementation 1. The method further includes providing the first price and the second price to a remote computing device for display to the prospective purchaser of the product such that the prospective purchaser is presented with the first price upon selection by the prospective purchaser of a first purchasing instrument and is presented with the second price upon selection by the prospective purchaser of a second purchasing instrument.

Implementation 14 is the method of implementation 1. The second price replaces presentation of the first price.

Implementation 15 is a computer implemented method for providing multiple prices for a product. The method includes receiving by a computing system a request to purchase a product the request initiated by a user of an application program from a user interface provided by the application program identifying by the computing system multiple different purchasing instruments of the user a first of the purchasing instruments having been assigned a first currency as a primary currency and a second of the purchasing instruments having been assigned a second currency as a primary currency. The method includes identifying by the computing system a first price for the product in the first currency and a second price for the product in the second currency. The method includes presenting by the computing system a user interface for purchasing the product the user interface presenting the first price in association with an indication that the user has selected the first purchasing instrument and presenting the second price in association with an indication that the user has selected the second purchasing instrument.

Implementation is the method of implementation . The first purchasing instrument and the second purchasing instrument are different credit cards.

Implementation 17 is the method of implementation 15. Presenting the user interface includes receiving by the computing system input from the user causing a change in a selected purchasing instrument from the first purchasing instrument to the second purchasing instrument and as a result of receiving the input from the user causing the change in the selected purchasing instrument replacing the presentation of the first price with the presentation of the second price.

Implementation 18 is the method of implementation 15. A developer of the application program provided user input that specified the first price.

Implementation 19 is the method of implementation 18. The developer provided user input specifying that the second price is to change as a rate of exchange between the first currency and the second currency change the second price not having been specified by the developer.

Implementation 20 is the method of implementation 18. The second price has been generated based on a rate of exchange between the first currency and the second currency the second price having been rounded to an increment of the second currency that was specified by the developer from among multiple increments available for specification by the developer.

Although a few implementations have been described in detail above other modifications are possible. Moreover other mechanisms for performing the systems and methods described in this document may be used. In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. Other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

