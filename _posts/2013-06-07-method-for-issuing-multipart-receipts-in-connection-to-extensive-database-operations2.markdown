---

title: Method for issuing multipart receipts in connection to extensive database operations
abstract: Disclosed herein is a technique for providing status feedback on the execution of a database request. The technique involves receiving a database request that defines an operation to be performed on at least one data record stored in a database. The data record is updated in the database in accordance with the operation, and one or more tasks that are to be performed in connection to the operation are scheduled for execution. A first version of a receipt is generated and provided to the application, and includes, for each of the one or more tasks, a status field that indicates a progress of executing the task. The method further includes the steps of, in response to a change in the execution of any of the one or more tasks, updating the status fields to produce a second version of the receipt, which is then provided to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589007&OS=09589007&RS=09589007
owner: Apple Inc.
number: 09589007
owner_city: Cupertino
owner_country: US
publication_date: 20130607
---
The invention relates generally to computing devices. More particularly embodiments of the invention relate to a method for issuing multipart receipts in connection to extensive database operations.

The proliferation of client computing devices such as smart phones and tablets has significantly increased the complexity of the manner in which client software and server software communicate and work with one another. User demands for instant feedback and speed from software applications continue to increase as well and are presenting new challenges for software developers. Consider for example a smart phone application that enables users to upload digital photographs and comment on one another s digital photographs. Designers of this application would at least under conventional database design paradigms configure a database for the application to include a separate table for each of the different types of data accessed by the application e.g. a table for user accounts a table for digital photographs binary data and a table for digital photograph comments where fields in the tables are tied to one another to establish relationships between the data.

In the above example particular database operations such as a deletion of a digital photograph from a user s account require additional tasks to be executed such as updating a global database index table deleting all comments associated with the digital photograph updating derived fields e.g. an overall rating associated with the digital photograph etc. which can take a considerable amount of time to execute. Notably under conventional design approaches the client device sits idly and waits for an acknowledgement response from the server which problematically is only issued by the server after all of the aforementioned tasks are completed on the server s end. As a result the user often experiences confusion and frustration and his or her overall experience is negatively impacted which is unacceptable and should be avoided.

Accordingly embodiments of the invention set forth a new technique for issuing multipart receipts in connection to extensive database operations. In particular a database operation that is issued by a client device and requires at least one additional task to be executed in connection with a database operation is received by a server and the server periodically issues receipts to the client device as the tasks are carried out. This provides the benefit of enabling the client device to maintain an up to date snapshot of the server s progress of executing the tasks which can be used to provide more immediate and accurate feedback to the user and enhance the user s overall experience.

One embodiment of the invention sets forth a method for providing status feedback on the execution of a database request. In particular the method is executed by a server device and includes the steps of receiving from an application executing on a client device the database request where the database request defines an operation to be performed on at least one data record stored in a database and the data record is updated in the database in accordance with the operation. Next one or more tasks that are to be performed in connection to the operation are identified and scheduled for execution. A first version of a receipt is then generated and provided to the application where the first version of the receipt includes for each of the one or more tasks a status field that indicates a progress of executing the task. The method further includes the steps of in response to a change in the execution of at least one of the one or more tasks updating the status field that corresponds to the at least one of the one or more tasks to produce a second version of the receipt which is then provided to the application.

Another embodiment of the invention sets forth a method for receiving and managing status feedback received in connection to an execution of a database request. In particular the method is carried out by a client computing device and includes the steps of issuing to a server a database request that defines an operation to be performed on at least one data record stored in a database. The method also includes the steps of receiving from the server a first version of a receipt where the first version of the receipt includes for each of one or more tasks that the server scheduled to execute in connection to the database request a status field indicating a progress of executing the task.

Yet another embodiment of the invention sets forth a method for updating a receipt that indicates a progress of executing one or more tasks in connection to a database request received from a client device. In particular the method is carried out by a computing device that is in communication with a server and includes the steps of removing from a data storage a next task to be executed where the next task was created in connection to an execution of the database request and is associated with a status field included in the receipt. The method also includes the steps of executing the task and during execution of the task providing at least one update to the status field included in the receipt where each update made to the status field causes an updated version of the receipt to be transmitted to the client computing device.

Another embodiment of the invention sets forth a non transitory computer readable storage medium storing instructions that when executed by a processor cause the processor to implement any of the methods described above. Yet another embodiment of the invention sets forth a system that includes components configured to implement any of the method steps described above.

Other aspects and advantages of the invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings which illustrate by way of example the principles of the described embodiments.

Representative applications of apparatuses and methods according to the presently described embodiments are provided in this section. These examples are being provided solely to add context and aid in the understanding of the described embodiments. It will thus be apparent to one skilled in the art that the presently described embodiments can be practiced without some or all of these specific details. In other instances well known process steps have not been described in detail in order to avoid unnecessarily obscuring the presently described embodiments. Other applications are possible such that the following examples should not be taken as limiting.

As described above embodiments of the invention provide a technique for issuing multipart receipts in connection to database operations also referred to herein as database changes that require one or more tasks to be carried out in addition to the database operation itself. In particular embodiments of the invention enable an application executing on a client device to issue a database change request to a server and to receive updates about the server s progress in executing the tasks. According to one embodiment the application issues a database change request to the server whereupon the server persists the database change request into a database so that the database change request is secure and prepared for processing. In turn the server identifies one or more tasks that are required to be executed in conjunction with the database request and generates a receipt e.g. a data object that includes a status field for each of the one or more tasks. The server then transmits the receipt to the application to indicate to the application without requiring that all of the one or more tasks first complete in execution that the database change request is acknowledged and is being processed by the server.

Notably embodiments of the invention beneficially enable the application to maintain an up to date snapshot of the progress being made by the server whenever a database change request requires additional tasks to be carried out. In one embodiment an updated receipt is pushed out to the application each time a status field within the receipt is updated e.g. when the execution of a particular task is completed. This approach provides the benefit of enabling the application to be notified of important changes on the server s side without having to consume resources by periodically polling the server for updated receipt information. Alternatively the application can issue on its own terms a request to the server to receive i.e. pull an updated receipt from the server. This approach provides the benefit of enabling the application to prevent the server from transmitting updates that are irrelevant to the application e.g. a notification that a deep deletion has completed long after the main objective of a database change request is completed.

In one embodiment the work queues are implemented as databases and are configured to operate in a first in first out FIFO manner such that the tasks are addressed and executed according to the order in which they are received. The queue processors are configured to remove and execute the tasks from the work queues and to update the respective status fields included the receipt . According to one embodiment the servers are configured to transmit an updated receipt to the application whenever a status field is updated within the receipt . The servers can also be configured to deliver an updated receipt to the application when the application queries the servers to transmit an updated receipt .

The database can be implemented using known database technologies e.g. structured query language SQL technology and include tables for storing data that is targeted by the database change requests transmitted by the client devices . As noted above the data utilized by the application can be organized within the database in a manner that requires one or more tasks to be carried out when a database change request is received. For example the database can include a table used for indexing the data stored within other tables belonging to the database . The database can also enable subscriptions to data e.g. to enable notifying a user of a new comment made to a digital photograph on which he or she previously commented. The database can further include derived fields e.g. a field that aggregates numerical ratings provided against a restaurant where the derived field must be periodically updated as ratings are added changed or removed from the database . Also as mentioned above the relationships between tables within the database can also require deep deletes to be carried out when a record is removed from the database. Notably each of these tasks can take a considerable amount of time to execute and should not prevent the client device from receiving a response to the initial database change request within a reasonable amount of time e.g. a few seconds .

More specifically the manager is configured to receive and persist requests to the database represented by persistence in . In this manner the requests and the database change requests included therein are secured within the database and can be prepared for processing. In one embodiment the request is persisted to the database as a record which as shown includes a record ID that uniquely identifies the record within the database . The manager analyzes each database change request to determine one or more tasks described below that should be carried out in connection to the database change request and generates a receipt which as shown in is referenced by record . Notably in the record references multiple receipts and is representative of the record including a receipt for each update made to the record over time.

As shown in in one embodiment the receipt can include a receipt ID and a task status field for each of the one or more tasks that are to be carried out in connection to the database change request . When the receipt is generated and configured the manager issues the receipt to the appropriate client device i.e. the client device that issued the request without waiting for each of the tasks to be executed by the queue processors . In this manner the client device receives a more immediate response from the manager whenever the client device issues a request which enhances the speed and flow of the interaction between the client device and the server . Notably the receipt ID can be retained by the application and used to query the manager for an updated receipt whenever the application desires to obtain an updated receipt .

Also shown in is a more detailed view of the work queues the queue processors and the structure of tasks that are loaded into the work queues and carried out by the queue processors . According to one embodiment a work queue exists for each of the different types of tasks that are carried out in connection with a database change request . For example there can exist a work queue for tasks involving global database index table updates a work queue for tasks involving deep deletes a work queue for tasks involving updating derived fields and so forth. Similarly there can exist for each work queue one or more queue processors that are specifically configured to carry out the type of task that is loaded into the work queue .

According to one embodiment and as shown in the task includes a task ID a receipt ID and a record ID where as noted above the task ID uniquely identifies the task within the database . Within the task the receipt ID identifies a receipt that includes a task status field that corresponds to the task via the task ID and further the record ID identifies a record that was created alongside the task in response to a database change request received and processed by the manager . Moreover although not illustrated in each task includes information for carrying out the task . For example a task loaded into a work queue that is configured to store deep deletion oriented tasks can include instructions to delete all or particular entries within the database that reference the record ID . This information can be established by one or more managers that possess the tools for determining how the tasks should be generated in response to a database change request .

Accordingly provide a detailed breakdown of how the various components of the computer system are designed to interact with one another. To supplement this information illustrates a sequence diagram that sets forth the manner in which an application executing on a client device a manager executing on a server and one or more managers executing on queue processors communicate between one another to carry out a request that is configured according to .

As shown the sequence diagram begins at step where the application issues a database change request via a request . At step the manager persists the database change request to the database as illustrated in by the persistence . At step the manager populates work queues with tasks associated with the database change request . At step the manager generates and transmits a receipt that includes a task status field for each task created at step . At step the application receives and processes the receipt . At step one or more managers which are configured to execute the tasks stored in the work queues remove the tasks from the work queues and process the tasks according to the techniques described above in conjunction with .

At step the manager identifies an update made to at least one task status field included in the receipt . At step the manager transmits the updated receipt to the application . At step the application processes the updated receipt . As previously set forth herein the application is also able to request one of the servers to return an updated receipt which is represented by the optional steps . At step the managers complete the work queue tasks . At step the manager transmits the completed receipt . At step the application processes the completed receipt .

Notably although the sequence diagram of ends at step those having skill in the art will understand that the sequence diagram is merely representative of a high level example that highlights the interaction between the application the manager and the managers . Accordingly provide an overview of how the different components of the computer system communicate with one another to carry out the various embodiments of the invention. However to provide additional details method diagrams are illustrated in and and represent the manner in which each of the components is configured to handle the various requests that are passed between one another within the computer system .

In particular illustrates a method carried out by an application executing on a client device according to one embodiment of the invention. In particular the application is configured to interface with a manager executing on a server e.g. via application programming interface API calls that enable the client device to communicate with the manager . As shown the method begins at step where the application receives a request to perform an action where the action involves carrying out a database change e.g. an insert an update or a delete . At step the application generates and issues the database change request to a manager executing on a server which as set forth above is configured to carry out database change requests .

At step the application receives a receipt from the server where the receipt includes status one or more task status fields and each task status field indicates a progress of executing a task in connection to the database change request .

At step the application determines whether a splicing technique is active. Specifically the splicing technique refers to the application being configured to emulate an occurrence of an action before the action has actually occurred. Consider for example a smartphone application that is configured to upload voice memos into cloud storage. Consider further that the voice memo once uploaded into the cloud storage undergoes additional audio filtering e.g. speech to text conversion that requires a considerable amount of time to execute. In this example there is no reason for the smartphone application to remain in a pending state while the voice memo is filtered. Accordingly the smartphone application can be configured to for example update a user interface displayed on the smartphone and make it appear to the user as if the voice memo has been completely uploaded and processed.

Accordingly if at step the application determines that splicing technique active then the method proceeds to step where the application emulates the performance of the action. Alternatively if no splicing technique is active then the method proceeds to step where the application determines whether an updated receipt is received from the server . If at step the application determines that an updated receipt is received then the method proceeds to step which is described below. Otherwise the application waits at step until an updated receipt is received from the server .

At step the application performs at least a portion of the action based on one or more updated task status fields included in the updated receipt . This can include for example updating a user interface to display a confirmation related to the latest task that has been completed. At step the application determines whether receipt indicates all tasks have been completed. If at step the application determines that receipt indicates all tasks have been completed then the method ends since no additional tasks will be executed. Otherwise the method proceeds back to step where the method steps are repeated until all tasks are completed.

At step the manager generates a receipt for the database change request . At step the manager identifies one or more tasks to be carried out in connection to the database change request . At step the manager for each of the one or more tasks adds to the receipt a task status field that is updated by the manager as progress is made in executing the task . At step the manager issues the receipt to the client device .

At step the manager for each of the one or more tasks enqueues the task into a work queue that corresponds to a type of the task where a manager is assigned to the work queue and is configured to execute the tasks that are stored in the work queue . At step the manager determines whether a task status field of the receipt is updated. If at step the manager determines that a task status field of the receipt is updated then the method proceeds to step described below. Otherwise the manager waits at step until a task status field of the receipt is updated.

At step the manager issues to the client device an updated receipt that includes the updated task status field . At step the manager determines whether all tasks have been completed. If at step the manager determines that all tasks have been completed then the method proceeds to step described below. Otherwise the method proceeds back to step where the method steps are carried out according to the techniques described above. Finally at step the manager issues to the client device an updated receipt that indicates all of the tasks have been completed.

At step the manager removes the next task from the work queue and executes the task . At step the manager identifies based on information included in the task a receipt that includes a task status field associated with the task . At step the manager updates the task status field based on the status of the execution of the task . At step the manager determines whether there are additional tasks in the work queue . If at step the manager determines that there are additional tasks in the work queue then the method proceeds back to step which is carried out by the manager in the manner previously set forth herein. Otherwise the method ends since the work queue is empty and no additional tasks require processing.

The computing device also include a storage device which can comprise a single disk or a plurality of disks e.g. hard drives and includes a storage management module that manages one or more partitions also referred to herein as logical volumes within the storage device . In some embodiments storage device can include flash memory semiconductor solid state memory or the like. The computing device can also include Random Access Memory RAM and Read Only Memory ROM . The ROM can store programs utilities or processes to be executed in a non volatile manner. The RAM can provide volatile data storage and stores instructions related to components of the storage management module that are configured to carry out the various techniques described herein.

The various aspects embodiments implementations or features of the described embodiments can be used separately or in any combination. Various aspects of the described embodiments can be implemented by software hardware or a combination of hardware and software. The described embodiments can also be embodied as computer readable code on a computer readable medium for controlling manufacturing operations or as computer readable code on a computer readable medium for controlling a manufacturing line. The computer readable medium is any data storage device that can store data which can thereafter be read by a computer system. Examples of the computer readable medium include read only memory random access memory CD ROMs DVDs magnetic tape hard disk drives solid state drives and optical data storage devices. The computer readable medium can also be distributed over network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion.

The foregoing description for purposes of explanation used specific nomenclature to provide a thorough understanding of the described embodiments. However it will be apparent to one skilled in the art that the specific details are not required in order to practice the described embodiments. Thus the foregoing descriptions of specific embodiments are presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the described embodiments to the precise forms disclosed. It will be apparent to one of ordinary skill in the art that many modifications and variations are possible in view of the above teachings.

