---

title: Co-browsing between one or more operators and one or more visitors
abstract: Apparatuses, computer readable mediums, and methods of co-browsing between a visitor and an operator are disclosed. The method may include sending the first UI event to the visitor, receiving from the visitor a first webpage data update indicating a first update to the active tab based on the first UI event, and sending the first webpage data update to the operator, on a condition of receiving a first user interface (UI) event regarding an active tab from the operator. The method may include sending the second webpage data update to the operator indicating the update to the active tab, on a condition of receiving a second webpage data update from the visitor indicating a second update to the active tab. If updates are received from both the visitor and operator a precedence may be used to determine which to process. Updates may be used to determine an active tab.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495081&OS=09495081&RS=09495081
owner: SALEMOVE, INC.
number: 09495081
owner_city: New York
owner_country: US
publication_date: 20130712
---
This application claims the benefit of U.S. Patent Application Nos. 61 671 593 filed on Jul. 13 2012 and 61 810 367 filed on Apr. 10 2013 the entire contents of both are herein incorporated by reference.

The disclosed embodiments are generally directed to co browsing and in particular to co browsing between one or more operators and one or more visitors.

Often a visitor to a custom website needs assistance. For example often a visitor to a custom website that offers products for sale needs help in a similar way as a visitor to a bricks and mortar store needs assistance. One way to assist the visitor is to permit an operator of the website to co browse the website with the visitor. However many co browsing solutions do not provide a pleasant visitor experience. For example often co browsing is achieved by sending back and forth the images of the screens of the visitor and operator but this method often results in delays in the response time of the user interface and a degradation in the quality of the displayed screen. Additionally often the co browsing system will not accurately track where the visitor is in the custom website.

Therefore there is a need in the art for an apparatus computer readable medium and method of multi tab co browsing.

Some disclosed embodiments provide a method of co browsing between a visitor and an operator. The method may include sending the first user interface UI event to the visitor receiving from the visitor a first webpage data update indicating a first update to the active tab based on the first UI event and sending the first webpage data update to the operator on a condition of receiving a first user interface UI event regarding an active tab from the operator. The method may include sending the second webpage data update to the operator indicating the update to the active tab on a condition of receiving a second webpage data update from the visitor indicating a second update to the active tab.

The method may include sending to the operator an indication that the active tab is changed to a new tab and sending the third webpage data update to the operator indicating the update to the new tab on a condition of receiving a third webpage data update from the visitor indicating a third update to a new tab.

The method may include on a condition of receiving a second user interface UI event regarding a new tab from the operator sending to the visitor an indication that the active tab is changed to the new tab sending the second UI event to the visitor receiving from the visitor a second webpage data update indicating a second update to the new tab based on the second UI event and sending the second webpage data update to the operator.

The method may include adapting the first webpage data update and the second webpage data update for the operator wherein adapting comprises adapting the first webpage data update and the second webpage data update according to a first web browsing application of the visitor to a second web browsing application of the operator.

The method may include monitoring updates to one or more tabs of the visitor and determining an active tab of the visitor based on the monitored updates wherein the active tab is one of the one or more tabs of the visitor. The method may include sending the operator the active tab of the visitor on a condition of receiving an indication from the operator to co browse with the visitor. The method may include sending at least some of the monitored updates to the one or more tabs of the visitor to the operator.

The method may include storing each of the first updates to the active tab and the second update to the active tab and sending at least one of the stored updates to the operator on a condition of receiving a request to replay an activity of the co browsing.

The method may include receiving the first UI event and the second webpage data update at approximately the same time and determining based on a precedence of the visitor and the operator whether to send the UI event to the visitor or send the second webpage data update to the operator.

In some embodiments a method of co browsing between a visitor and an operator is disclosed. The method may include on a condition of receiving a first webpage data update associated with a tab updating the tab based on the first webpage data update. The method may include on a condition of receiving an event associated with the tab sending a user interface event indicating the event receiving a second webpage data update and updating the tab based on the second webpage data update.

In some embodiments the event may be generated by at least one of a human or a co browsing assistant module.

Some embodiments provide a computer readable non transitory medium including instructions which when executed in a processing system cause the processing system to execute a method for multiple tab co browsing.

Peer A may send and receive webpage data updates and or UI events . Peer B may send and receive webpage data updates and or UI events . The co browsing server may receive webpage updates and or UI events from peer A or peer B and in response send webpage data updates and or UI events to peer A or peer B . The co browsing server may process the webpage data updates and UI events before sending them to peer A or peer B .

The co browsing server may be a remote procedure call RPC server . The co browsing server may be more than one server. The functions described in relation to the co browsing server may be provided by one or more co browsing servers . In some embodiments peer A and peer B may send some or all of the webpage updates and UI events directly to one another.

Peer A and peer B may be computing devices. Peer A and peer B may be peers to one another or may have a master slave relationship. Peer A and peer B may be on separate computing devices or on a same computing device. A person not illustrated may be a user of peer A or peer B . The user may be a visitor not illustrated to a custom website or may be an operator not illustrated of the custom website . An operator not illustrated of the custom website may be using either peer A or peer B . A visitor not illustrated of the custom website may be using either peer A or peer B . There may be more than one peer A and more than one peer B . In some embodiments Peer A and or peer B may include an automation module not illustrated that may generate events not illustrated . For example in some embodiments an operator module may be included that co browses with the visitor.

The custom website may be a website running on a webserver accessible over the Internet that offers information goods and or services to visitors. The custom website may include the web application . Some examples of the web application include a website of an automobile manufacture an automotive dealer a watch manufacturer an educational website a website of a local library and a website of a broadcasting company. In some embodiments the web application may offer goods services or information all of which may be for sale. The requests may be requests to the web application from peer A peer B or co browsing server . The responses may be responses from the web application to peer A peer B or co browsing server .

The web application interface may access a web application where peer A and peer B co browse. For example the web application interface may be Internet Explorer IE or Chrome . The web application interface may render webpage data in order to present webpage data to the user.

The webpage data may be data for a webpage such as a document object model DOM . The DOM may include a DOM application programming interface API not illustrated . The webpage data may include tab . The tab may be an indication of which tab of the web application interface that the webpage data represents.

The UI events may be a user interface event recognized by the web application interface or an event not illustrated recognized as an event by the web application interface . The user interface event may be performed by the visitor or the operator. The event may be an event recognized by the web application interface as an event. An event may include events as defined by the World Wide Web Consortium W3C . Events may include UI events . Examples of events include a mouse click mouse movement a page refresh and receipt of an event from the web application .

The webpage data update may be an update to the webpage data . The webpage data update may represent the difference between webpage data before an event and after the event. In some embodiments the webpage data update is the difference between the current DOM and a previous DOM. The previous DOM may have been updated to the current DOM based on an event not illustrated . The webpage data update may be sent in a JavaScript Object Notation JSON format or another format. The webpage update and or the UI events may include a timestamp to indicate when the update to the webpage data occurred. The webpage update and or the UI events may include the identification of the intended recipient of the webpage update or UI events. The webpage data update may include Javascript or another script from another language that was executed on the webpage data as a result of the event. The request sent to the web application as a result of the event may be included in the webpage data update . For example a XMLHttpRequest XHR that resulted from the event may be included with the webpage data update . In some embodiments the webpage data update may include a precedence of the peer that sent the webpage data update .

The synchronization engine may be configured to determine webpage data update based on webpage data changing as a result of an event. For example a user may click on a button which is an event and the web application interface may send the button click to the web application which returns updates of the webpage data . The webpage data may be updated by the web application interface . The synchronization engine may determine the difference between the webpage data before the button click and after the button click and generate webpage data update that indicates the difference. The difference may be determined before the webpage data is rendered by the web application interface or after the webpage data is rendered by the web application interface .

The synchronization engine may be configured to take the webpage data update and update the webpage data to reflect the webpage data update . In some embodiments the synchronization engine may decode the webpage data update which may be in JSON format and apply the webpage data update to the webpage data . In some embodiments the synchronization engine uses core levels or subsequent level of a DOM API. The synchronization engine may be configured to discard changes to webpage data when a webpage data update is received from a peer with a higher precedence than the peer of the synchronization engine and to make the changes to the webpage data indicated in the webpage data update .

A peer or the co browsing server may be configured to determine which tab a webpage data update or UI events is for. The peer or the co browsing server may be configured to determine the tab based on activity of the webpage data updates or UI events or the webpage data update or UI events may indicate a tab .

The adapter engine may be configured to adapt webpage data updates and UI events for a peer from one format to a second format. For example webpage data updates from peer A may be in a format for Internet Explorer and the adapter engine may adapt the webpage data updates into a format for Chrome for peer B .

The UI handler may be configured to handle UI events and to handle UI events on peer A and peer B . The UI handler may be configured to take the UI events and process the UI events . For example peer A may indicate that a user has selected or clicked a button in UI events that is sent to the co browsing server and then sent to peer B . The UI handler may replicate the UI events for the web application interface so that the web application interface mirrors the selection of the button on peer A .

In some embodiments the UI handler will simulate the UI events so that the web application interface will update the webpage data according to the UI events . The synchronization engine may then determine the webpage data update based on the UI events and send the webpage data update to the sender of the UI events . In this way one peer may act as a master peer and another peer may act as a slave peer where the slave peer sends UI events and receives webpage data updates and the master peer receives UI events and sends webpage data updates . The user of the mater peer may initiate events on the master peer and then send webpage data updates based on the events.

The sender may be a sockets program or a program capable of publishing peer network links that sends webpage data updates and UI events . The sender may send requests to the custom website . The sender of peer A or peer B may be configured to send webpage data updates and UI events to peer A or peer B directly rather than sending the webpage data updates and UI events to a co browsing server .

The listener may be a sockets program that listens for webpage data updates and UI events . In some embodiments the listener is a program capable of publishing peer network links that listens for webpage updates and UI events . The listener may listen for data from the web application .

In some embodiments the peers may set up a socket communication with sender and listener . In some embodiments peers may query other peers for webpage data updates and UI events . In some embodiments peers may communicate with one another without going through the co browsing sever .

The policy engine may be configured to resolve conflicts between peer A and peer B in co browsing. For example if peer A and peer B select different items simultaneously or approximately simultaneously or before the updates or event has been processed while co browsing then the policy engine may determine which if either of the selections should be sent to the other peer . The policy engine may have precedence where peer A and peer B are ranked. The policy engine may resolve conflicts based on the precedence of peer A and peer B .

The example is discussed in conjunction with . The example begins at where peer A may make a UI selection such as moving a mouse not illustrated over a button and selecting or clicking a button displayed on a webpage not illustrated . The web application interface of peer A may interpret the moving of the mouse and the selection of the button. The example continues at where peer A sends a hypertext transfer protocol http request to the web application that indicates the selection of the button. In some embodiments the http request may be a hypertext transfer protocol secure https . The example continues at where the web application may respond to the http request that indicates the selection of the button by generating an http response . The example continues at where the web application may send the http response to peer A . The example continues at where the web application interface of peer A may integrate the http response into the webpage data of peer A . The web application interface of peer A may add two new buttons and remove an image as a result of the button selection. Continuing at the synchronization engine may determine the difference between the webpage data before the selection of the button and after selection of the button. The synchronization engine may generate webpage data update which indicates the difference between the webpage data before the selection of the button and after selection of the button. The synchronization engine may determine the difference before the new webpage is rendered by the web application interface of peer A or after the new webpage is rendered by the web application interface of peer A .

The example continues at where the peer A sends the webpage data update to the co browsing server . The example continues at where the listener of the co browsing server may receive the webpage data update . In some embodiments the adapter engine of the co browsing server may adapt the webpage data update for peer B . For example the web application interface of peer B may be IE and the web application interface of peer A may be Chrome . The adapter engine of the co browsing server may adapt the webpage data update from IE to Chrome . In some embodiments the adapter engine of the peer A or peer B may adapt the webpage data update for peer B .

The example continues at where the co browsing server sends the webpage data update to peer B . The example continues at where the listener of peer B may receive the webpage data update . The synchronization engine of peer B may adapt the webpage data with the webpage data update . The web application interface of peer B may then render a new webpage based on the updated webpage data . Thus the changes to the webpage data of peer A may be mirrored in the webpage data of peer B .

The example continues at where a user moves a mouse of peer B that moves a cursor to a different location on a screen not illustrated of peer B . The UI handler generates a UI event that indicates the movement of the cursor. The example continues at with the sender of peer B sending the UI events to the co browsing server . The example continues at with the listener of the co browsing server receiving the UI events . The co browsing server may adapt the UI events for peer A .

The example continues at with the co browsing server sending the UI events to peer A . The example continues at with the listener of peer A receiving the UI events . In some embodiments peer A may adapt the UI events received from the co browsing server prior to applying them. The UI handler of peer A then may apply the UI events to the webpage data of peer A . The UI handler may move the cursor not illustrated of peer A to the same position as in peer B . In some embodiments if the UI events sent from peer B to peer A had included events that required changing the webpage data such as a mouse click then peer A may implement the events in the UI events and send a webpage data update to peer B indicating the changes in webpage data as a result of UI events .

Thus in the example the changes made to the webpage data of peer A are sent to peer B and UI events may be sent from peer B to peer A . In a similar fashion peer A may send UI events to peer B and peer B may send webpage data to peer A . In some embodiments the operator for example peer B and visitor for example peer A may each have separate cursors so that there may be dual cursors.

The method continues at with webpage data changes. For example the webpage data may be updated to indicate that the cursor position is now the second cursor position .

The method continues at with update webpage. The web application interface may render a new webpage based on the webpage data change. For example the web application interface may render webpage from the updated webpage data not illustrated .

The method may continue at with determine webpage data update. The webpage data update may be determined by for example peer A peer B or co browsing server . The webpage data update may be data that indicates the difference between the webpage and the updated webpage . In some embodiments the webpage data update may be determined based on the difference between the rendered webpages for example webpage and webpage . In some embodiments the webpage update may be determined based on the difference between the webpage data and the updated webpage data not illustrated .

The method continues at with store webpage update The webpage data update may be stored or the method may return to webpage . It may be determined whether to store the webpage data update based on how much has changed. For example in moving the cursor from the first cursor position to the second cursor position many events may have been received. The method may aggregate the changes to the webpage data update to be stored with the next webpage data update . The method may determine whether or not how much has changed is above a threshold level. The threshold level may be a predetermined value or determined dynamically based on one or more of storage space communication time communication packet size or delay times.

The method may continue with store webpage data update if it is determined at to store the webpage data update . The webpage data update may be associated with a tab of a web application interface and may store one or more events associated with the webpage data update locally. In some embodiments the webpage data update may be stored by sending the webpage data update to another peer or by sending the webpage data update to the co browsing server .

The method may be carried out by peer A peer B or co browsing server . In some embodiments portions of the method are carried out by peer A or peer B and the other portions of the method are carried out by co browsing server .

The co browsing server may be configured to create a room for each peer and a tab for each tab that a peer is browsing. For example the tabs in correspond to the tabs in . schematically illustrates the tabs that peer A has opened in one or more web application interfaces . schematically illustrates the tabs that peer B has opened in one or more web application interfaces . Peer A may be currently browsing tab A . Peer B may be currently browsing tab B . In some embodiments the co browsing web server only keeps track of tabs that are being browsed from the custom website or web application .

The co browsing server may be configured to create a room for a peer when a peer opens a tab of custom webserver and the co browsing server may be configured to create a tab in the associated room for the tab of the custom webserver . The co browsing server may be configured to create a tab for each tab of the web application that the peer opens. The peer may use different web application interfaces .

The co browsing server may be configured to store each of the initial webpage data the webpage data updates the current webpage data and the UI events . In some embodiments the co browsing server may be configured to store all the webpage data updates and UI events . In some embodiments the co browsing server may be configured to store only recent webpage data updates and UI events .

For example peer A may open tab which may be a webpage or tab of the custom webserver . Peer A or the custom webserver may send an indication to co browsing server that peer A opened tab . In response co browsing server may create peer A room and tab A . Additionally the co browsing server may store initial webpage data which indicates the state of the tab when first opened by peer A . The co browsing server may also store a current webpage data which indicates the current state of the tab . The co browsing server may also store webpage data update which indicates changes that are made to the tab . In some embodiments every change that is made to the tab is stored in the webpage data update so that an operator of the web application can view the browsing history of peer A for tab .

Peer A may then open tab B for webpage . Peer A or the custom webserver may send an indication to co browsing server that the peer A opened tab . In response the co browsing server may create tab B in peer A room with initial webpage data webpage data update and current webpage data . In a similar fashion co browsing server may create peer B room and tab A tab B and tab C .

The co browsing server may be configured to maintain a current tab for each of the peers . The co browsing server may determine a current tab for each of the peers based on receiving the webpage data update initial webpage data and current webpage data . The co browsing server may determine that the current tab for a peer is the tab that last received initial webpage data webpage data update or current webpage data .

The store and replay may be configured to store all or some of the webpage data updates and UI events and to replay the webpage data updates and UI events . For example an operator may request that a co browsing web session between a visitor and operator be replayed or a web session of a visitor be replayed. The store and replay may send the webpage data updates and UI events to the operator in so that the operator may view the co browsing or web session. In some embodiments the store and replay may be configured to send the webpage data updates and UI events to the operator or visitor so that the operator or visitor can pause or speed the playing of the replaying of the web session or co browsing session. In some embodiments the store and replay may only store and send to the visitor or operator the webpage data updates .

The communications network may be one or more networks including the Internet wireless local area networks private networks etc. Co browsing server peer A peer B custom webserver and peers communicate via the communication network . In some embodiments one or more of co browsing server peer A peer B custom webserver and peers may be in direct communication with one another.

Illustrated in is a visitor list selected visitor information a webpage control area and a sales tools button . The visitor list is a list of the visitors to the web application . The visitor list may include information regarding the visitors. Each of the visitors may be one of the peers illustrated in . The information regarding the visitors may include status visitor and current page . The status may indicate a current status . The current status may indicate by a color whether the visitor is active green idle for a short period of time yellow or idle for a long period of time. In some embodiments the status may indicate whether the visitor is available for co browsing or a likely candidate for co browsing based on profiling the visitor for likelihood of making a purchase. In some embodiments the status may indicate whether or not the visitor is co browsing with another operator. In some embodiments selecting an engage button will provide a list of the operators that have engaged the visitor. A visitor may be a selected visitor . In some embodiments additional information may be provided regarding the visitors. For example a number of tabs that are currently opened for the web application may be included for each of the visitors.

Information of the selected visitor may be provided by the operator web application . For example the information may include name email company phone location referral source and engagements . The selected visitor s name is Brad Fraiser. The engagements may be a number of accepted co browsing engagements illustrated as 1 and a number of rejected co browsing engagements illustrated as 0 or other engagement result.

The webpage control area may include a time on page a visits to page webpage controls the webpage address of the co browsed webpage a co browse button a page history and a page history slider .

The time on the page may indicate the number of hours minutes and seconds the selected visitor has been on the co browsed webpage . The visits to page may indicate the number of times the selected visitor has visited the co browsed page . For example the visits to page may indicate a number of times in the last 24 hour illustrated as 2 a number of times visited in the last 7 days illustrated as 5 a number of times in the last days illustrated as 8 a number of times visited in the last 365 days illustrated as 8 and a number of times visited overall illustrated as 9 .

The webpage controls may control the co browsed webpage when co browsing is turned on. The left arrow may go back a page in the browsing history the right arrow may go forward a page in the browsing history X may stop the loading of a webpage and the circular arrows may reload the webpage. The co browsed webpage may be the same webpage as peer B is viewing see . The co browse button may turn co browsing on and off. In the on mode events taken by peer A will be mirrored in peer . In the off mode peer A observes peer B also the selected visitor browse the webpage application .

The page history displays where the co browsed webpage fits into the page history . And peer A may select a different page in the page history and during co browsing the selected page in the page history will be displayed as the co browsed webpage . The page history slider may be used to access different pages in the page history .

The sales tools may be a button to access sales tools for peer A to use to try and sell a product or service to the selected visitor .

The method may continue at with was a user interface UI event received from the operator. For example peer A may be co browsing with peer B so the co browse button would have to be switched to on. Prior to the co browse button being switched to on by the operator peer A may be observing the visitor peer B . The operator of peer A may click the cursor over the watch . Peer A may then generate UI events that indicates the click of the cursor over the watch . The peer A may then send the UI events to the co browsing server .

The method may continue at with sending the first UI event to the visitor. For example the co browsing server may send the UI events to peer B . Peer B may receive the UI events and update the webpage data see based on the UI events . Peer B may then determine the difference between the webpage data before the event in UI events and after the event in UI events and generate a webpage data update and send the webpage update to the co browsing server . Note that after the click of the cursor over the watch the tab A would become webpage .

The method may continue at with receiving from the visitor a webpage data update indicating an update to the active tab based on the first UI event. Continuing with the example above the webpage update sent to the co browsing server indicates the update to tab A .

The method continues at with sending the first webpage data update to the operator. Continuing with the example above the co browsing server may send the webpage update to peer A . Peer A may receive the update and update the webpage data based on the webpage update .

The method may continue at with was an update received of the active tab from the visitor. If there was no update received then method may return to . If there was an update received of the active tab from the visitor then the method may continue at with sending a webpage data update to the operator indicating the update to the active tab. Continuing with the example the visitor at peer B may now be webpage and the visitor may click gold . Peer B may then generate a webpage update to reflect the changes in the webpage after the visitor clicks gold. Peer B may then generate a webpage update to indicate the difference to webpage after the visitor clicks gold. Peer B may then send the webpage data update to the co browsing server . The co browsing server may adapt the webpage update for peer A and then send the webpage update to peer A .

In some embodiments an indication of the tab the webpage data update regards may be sent to the operator. For example if the visitor switches tabs an indication of the switch may be sent to the operator. Additionally in some embodiments if the visitor switches tabs webpage data may be sent to the operator for the new tab. The method may end.

In some embodiments the method may include the co browsing server sending a tab to the operator. For example the co browsing server see may send data to peer A of the active tab. In the example of the active tab is tab A with webpage of peer B see .

In some embodiments the method may include sending instructions to the first visitor to display a visitor communications area. The visitor communication area may include an area for the visitor and an area for the operator. The method may include sending instructions to the operator to display an operator communication area. The operator communication area may include an area for the visitor and an area for the operator.

As illustrated in the computer system includes one or more processors one or more memory systems and one or more input output I O devices in communication by two communication buses and a bridge . The communication buses and bridge may be implemented in a variety of ways and may include one or more computer buses and or bridge devices as shown in . The I O devices can include network adapters and or mass storage devices from which the computer system can receive data from the co browsing server or the peers for processing by the processor when the computer system operates as a co browsing server or peer .

In some embodiments the methods and apparatuses for co browsing between one or more operators and one or more visitors has the advantage that a proxy does not have to be used for the co browsing since the operator and visitor may either communicate directly or through the co browsing server . In some embodiments the methods and apparatuses for co browsing between one or more operators and one or more visitors has the advantage that software extra to the web application does not need to be installed by the operator or the visitor. In some embodiments only extra lines of code are added to the web application of the operator and the visitor for the methods and apparatuses for co browsing. In some embodiments the methods and apparatuses for co browsing between one or more operators and one or more visitors has the advantage that software extra to the web application does not need to be installed by the operator or the visitor.

The methods and apparatuses provided may be implemented in a general purpose computer a processor or a processor core. Suitable processors include by way of example a general purpose processor a graphics processing unit GPU a special purpose processor a conventional processor a digital signal processor DSP a plurality of microprocessors one or more microprocessors in association with a DSP core a controller a microcontroller Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs circuits any other type of integrated circuit IC and or a state machine. Such processors may be manufactured by configuring a manufacturing process using the results of processed hardware description language HDL instructions and other intermediary data including netlists such instructions capable of being stored on a computer readable media . The results of such processing may be maskworks that are then used in a semiconductor manufacturing process to manufacture a processor which implements aspects of the disclosed embodiments.

The methods or flow charts provided herein may be implemented in a computer program software or firmware incorporated in a computer readable storage medium for execution by a general purpose computer or a processor. In some embodiments the computer readable storage medium is a non transitory computer readable storage medium. Examples of computer readable storage mediums include a read only memory ROM a random access memory RAM a register cache memory semiconductor memory devices magnetic media such as internal hard disks and removable disks magneto optical media and optical media such as CD ROM disks and digital versatile disks DVDs .

