---

title: Collecting client-side performance metrics and latencies
abstract: Technologies are described herein for collecting client-side performance metrics and latencies. A web page received by a web browser application executing on a user computing device includes markup or scripting code that instructs the browser to collect performance measures during the rendering of the content of the web page. The performance measures may include operation timings that measure the time it takes for a particular operation to complete during the rendering of the content and/or event counters that count the number of times that a specific event occurs during the rendering of the content. The web browser application sends an event report containing the collected performance measures to a reporting module executing on a server computer. The reporting module receives the event report, validates the content of the event report, and adds the event report to a database or other data storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09160640&OS=09160640&RS=09160640
owner: IMDB.COM, INC.
number: 09160640
owner_city: Seattle
owner_country: US
publication_date: 20130315
---
This application is a continuation of prior U.S. patent application Ser. No. 13 608 410 now U.S. Pat. No. 8 433 750 issued Apr. 30 2013 entitled COLLECTING CLIENT SIDE PERFORMANCE METRICS AND LATENCIES and filed Sep. 10 2012 which is a continuation of prior U.S. patent application Ser. No. 12 765 178 now U.S. Pat. No. 8 266 281 issued Sep. 11 2012 entitled COLLECTING CLIENT SIDE PERFORMANCE METRICS AND LATENCIES and filed Apr. 22 2010 both of which are expressly incorporated herein by reference in their entirety.

A content provider may provide content in web pages or other files to user computing devices across the Internet. These web pages may also contain web based advertisements ads or other external content that are sourced from third party services and rendered at the user computing device along with the content in the web page. Furthermore these web pages may also contain images or other external content that are sourced from the content provider separately from the web page itself and rendered at the user computing device along with the content in the web page. The content provider may have the ability to measure server side latencies and other performance metrics involved with serving the web pages to the user computing devices and responding to other requests for content or data on the content provider s servers. These latencies and performance metrics may be collected and stored in a data storage system allowing the content provider to monitor the performance of its servers and produce performance reports regarding the serving of the web pages or other data. However the content provider may not have the ability to measure client side latencies or other performance metrics involved in delivering and rendering the content at the user computing device.

The following detailed description is directed to technologies for collecting client side performance metrics and latencies. Utilizing the technologies described herein a content provider receives performance measures collected by browser applications during the rendering of web based content on user computing devices. Such client side performance measures may include the time it takes to render a portion of markup in a web page the duration of execution of a critical section of code the time involved in calling third party services to retrieve web based ads or external content and the occurrence of specific events during rendering of the content. The content provider may aggregate and store these client side performance measures in a database and utilize the database to provide performance monitoring and reporting regarding the client side rendering of its web based content. These and other advantages and features will become apparent from a reading of the following disclosure and a review of the associated drawings.

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described below including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures.

According to embodiments the web server serves web pages across a network to a web browser application executing on a user computing device . The web pages may be documents files or other data structures containing hypertext markup language HTML extensible markup language XML JavaScript code and other markup and or scripting code that instruct the web browser application how to render the contents of the web page on a display attached to the user computing device . The network may represent one or more of a local area network LAN a wide area network WAN the Internet or any other networking topology known in the art that connects the user computing device to the web server and other computer systems in the operating environment as will be described below.

The user computing device may be a personal computer PC a desktop workstation a laptop a notebook a wireless telephone a personal digital assistant PDA an e reader a game console a set top box a consumer electronics device a server computer and the like. The web browser application may be the INTERNET EXPLORER internet browser from MICROSOFT Corporation of Redmond Wash. the FIREFOX web browser from MOZILLA Corporation of Mountain View Calif. or any other web browser application known in the art. While the operating environment illustrated in includes a web browser application communicating with a web server it will be appreciated that the embodiments described herein may be utilized with any number of client applications known in the art that access and retrieve web pages and or other content from a remote server computer across the network . It is intended that all such client application programs and remote server computers be included in the scope of this application.

According to one embodiment the web page contains markup and or scripting code that instructs the web browser application to retrieve an advertisement ad tag regarding possible advertisements to include in rendering the web page. The ad tag may be retrieved from a third party advertisement service located across the network such as DOUBLECLICK from GOOGLE INC. of Menlo Park Calif. The ad tag may contain instructions and or a location regarding an advertisement to be included with the content of the web page rendered at the user computing device .

The web page may also contain markup or scripting code that instructs the web browser application to retrieve and render additional content from an external source. The additional content may include text graphic images such as logos product images photographs maps or advertisement graphics multi media content such as audio and or video and the like. The web browser application may retrieve the additional content from an external host such as the media server shown in across the network .

The web page sent to the user computing device by the web server further contains markup and or scripting code that instruct the web browser application to collect operation timings event counters and other performance measures that occur during the rendering of the web page according to the embodiments described herein. As will be described in more detail below in regard to operation timings may measure the time it takes the web browser application to perform a specific operation such as rendering a portion of markup executing a critical section of scripting code calling an external service to retrieve additional content across the network and the like. Event counters may be utilized to count the occurrence specific events during the rendering of the web page for example.

The web browser application may transmit an event report containing the collected operation timings event counters and other performance measures to a reporting service module in the content provider system . The reporting service module may execute on a single application server or in parallel across multiple application servers in the content provider system . In addition the reporting service module may consist of a number of subcomponents executing on different application servers or other computing devices in the content provider system . The reporting service module may be implemented as software hardware or any combination of the two. As will be described in more detail below in regard to the reporting service module may receive and validate the event report and then store the event report in a database or other data storage system in the content provider system .

The database may provide the event reports contained therein to performance monitoring and reporting systems in the content provider system in order to support performance monitoring and other desired administrative functions. In one embodiment the event reports in the database are aggregated and the performance measures contained therein summarized by any combination of specific operation or event type of operation or events type of web page time of day geographic location of the user computing device and the like. In another embodiment the aggregated performance measures from the event reports may be utilized to generate alerts upon occurrence of abnormal situations that may indicate a performance problem such as the number of specific events occurring within a set period of time exceeding a threshold value individual or aggregated durations of a specific operation exceeding a threshold value and the like. The threshold values for event counts and operation durations may be set by administrators of the content provider system and may be based on experimentation and or periodic sampling of the event reports contained in the database .

Turning now to one or more data structures containing a number of data elements will be described. It will be appreciated by one skilled in the art that the data structures shown in the figures may represent rows in a database table objects stored in a computer memory programmatic structures or any other data containers commonly known in the art. Each data element included in the data structures may represent one or more fields or columns of a database row one or more attributes of an object one or more member variables of a programmatic structure or any other unit of data of a data structure commonly known in the art. The implementation is a matter of choice and may depend on the technology performance and other requirements of the computing system upon which the data structures are implemented.

In particular shows one example of data elements that may be stored in the event report according to embodiments. As described above the event report contains data regarding operation timings event counters and other performance measures collected by the web browser application executing on the user computing device during the rendering of the contents of the web page to the connected display . The event report may contain an event report ID . The event report ID may be a globally unique identifier GUID that uniquely identifies the event report data associated with a particular rendering of the web page by the web browser application on the user computing device .

According to one embodiment the markup and or scripting code embedded in the web page may instruct the web browser application to send multiple event reports during the rendering of the web page. A single event report ID may be embedded in the web page by the web server before the web page is sent to the user computing device . In this way each event report generated by the web browser application during the rendering of the web page will contain the same event report ID allowing all of the operation timings event counters and other performance measures contained in the multiple event reports to be associated with the particular rendering of the web page at the user computing device .

The event report may also contain a timestamp . The timestamp may indicate the approximate date and time that the web page is rendered by the web browser application on the user computing device . In one embodiment the timestamp is generated by the web server and embedded in the web page before the web page is sent to the user computing device . In other embodiments the timestamp may be generated by the web browser application . For example the timestamp may be generated at the time the web browser application begins rendering the web page or it may be generated at the time each event report is sent to the reporting service module .

According to one embodiment the event report also contains a signature key . The signature key may be a numeric key utilized by the reporting service module to verify the authenticity of the event report . This may prevent erroneous or unauthorized event reports from being accepted by the reporting service module . For example the web server may compute a hash based message authentication code HMAC from the timestamp and a secret code. The web server may embed the HMAC and the timestamp in the web page before the web page is sent to the user computing device . The web browser application may then include the timestamp and the signature key containing the HMAC in each event report sent to the reporting service model during rendering of the web page . As will be described below in regard to the reporting service module may utilize the values of the timestamp and the signature key to authenticate the event reports .

The event report may also contain a page type . The page type may be a string or other value identifying the web page being rendered by the web browser application . The page type may be utilized by the performance monitoring and reporting systems along with the performance measures contained in the event report to troubleshoot performance issues in a particular web page for example. The page type may be embedded in the markup and or scripting code of the web page and included in each event report generated by the web browser application .

The event report may further contain geolocation data that identifies aspects of the geographic location of the user computing device at which the web page is rendered. For example the geolocation data may include a country code a region code GPS coordinates or other data from which the location of the user computing device may be determined. Similar to the page type the geolocation data may be utilized by the performance monitoring and reporting systems to produce reports of client side performance measures according to a particular geographic category such as country. In one embodiment the geolocation data may be determined by the web server from an IP address or other identifier of the user computing device included in the request for the web page for example. The geolocation data may then be embedded in the markup and or scripting code of the web page sent to the user computing device . In another embodiment the geolocation data may be supplied by the web browser application executing on the user computing device and included in each event report sent to the reporting service module .

According to embodiments the event report also contains a number of operation timings A N referred to herein generally as operation timing . Each operation timing represents a timing measurement collected by the web browser application while rendering the web page at the user computing device . For example the markup and or scripting code embedded in the web page may instruct the web browser application to measure the time it takes to retrieve the ad tag from the third party advertisement service as described above in regard to . Alternatively the web browser application may measure the time it takes to retrieve additional content from a media server hosting the content.

In further embodiments operation timings may be collected measuring the execution time of a specific section of scripting code the latency involved in Ajax calls or other external service calls made to retrieve additional data or content the duration of time between the start of rendering of the web page and a first user interaction with the content the total time required for rendering the web page and the like. It will be appreciated that operation timings may be collected for other operations and events beyond those described herein. Each operation timing includes an operation ID identifying the specific operation that was timed. The operation ID may be a string or numeric identifier supplied by the markup and or scripting code embedded in the web page that instructs the web browser application to time the operation as will be described in more detail below in regard to . Each operation timing further contains a time indicating the duration of the measured operation.

The event report may further contain a number of event counters A N referred to herein generally as event counter . Each event counter may represent a count of a specific event that occurred during the rendering of the web page by the web browser application . For example the markup and or scripting code embedded in the web page may instruct web browser application to increment a specific event counter each time the ad tag is returned from the third party advertisement service containing no data or a null ad. Event counters may also measure the number of times an Ajax call or other external service call fails or times out.

In another example a particular event counter may be incremented at the completion of the rendering of the web page by the web browser application indicating that the entire web page was rendered before the user of the user computing device navigated away from the page. Further an event counter may be used to measure how long a particular web page remains visible in the display connected to the user computing device . Upon receiving the web page markup and or scripting code embedded in the web page may instruct the web browser application to establish a repeating timer that expires after a specific amount of time such as 100 ms. Upon each expiration of the timer the event counter may be incremented and an event report sent to the reporting service module . This may allow the reporting service module to establish how long the user of the user computing device remains on the web page .

It will be appreciated that event counters may be collected for other operations and events beyond those described herein. Each event counter includes a counter ID identifying the specific event that was counted. The counter ID may be a string or numeric identifier that is associated with the specific markup or scripting code incrementing the event counter as will be described in more detail below in regard to . Each event counter further contains a count indicating the number of times that the measured event occurs during rendering of the web page . It will further be appreciated that the event report may contain additional data elements describing other performance measures collected by the web browser application while rendering the web page at the user computing device beyond those shown in and described above. The event report may also contain fewer or different data elements than those shown in the figure. It is intended that all such data elements contained in the event report be included in this application.

At event the web browser application receives the web page and begins to render the web page to the display connected to the user computing device . The web page may contain markup and or scripting code that instructs the web browser application to collect an operation timing for a total page load time indicated along the timeline by A in . According to one embodiment the web browser application initiates collection of this operation timing by utilizing an application programming interface API supplied by the web server with the web page . The API may include the following function for starting a timer to collect an operation timing 

At event the web browser application may begin the operation of loading of an advertisement on the page. It will be appreciated that this operation may be performed in parallel to the primary rendering operation by the web browser application . The web page may contain the following JavaScript code that is executed when loading of the advertisement begins 

At event the third party advertisement service receives the request for the ad tag and returns the ad tag to the web browser application . At event upon receiving the ad tag the web browser application may mark completion of the call to the third party advertisement service through another function in the API such as 

Returning to the sequence illustrated in the web page may contain the following JavaScript code that is executed immediately after the ad tag is received by the web browser application as shown at event 

At event the media server receives the request for the additional content and returns the content to the web browser application at event . Upon receiving the additional content the web browser application may mark completion of the call to the media server as well as the operation of loading the advertisement on the page by executing the following JavaScript code 

It will be appreciated that other operation timings event counters and other performance measurements may be collected during the rendering of the web page beyond those described above and shown in . For example multiple advertisements may appear in the web page and operation timings may be collected regarding the loading of each. In addition the web page may contain code that instructs the web browser application to collect an event counter counting each time a null ad is returned from the third party advertisement service as described above in regard to . The web browser application may mark the reception of the null ad by calling another function in the API such as 

Once all the operation timings event counters and other performance measurements have been collected the web browser application may send an event report containing the collected values to the reporting service module . This may be done automatically in the last pending end timer call for example or it may be performed through additional scripting code embedded in the web page or tied to a particular event that calls a function in the API such as 

The page type from the web page may also be encoded in the URL for the call along with the unique event report ID timestamp signature key and any geolocation data generated by the web server and embedded in the web page before being initially sent to the web browser application . This may result in an URL for the HTTP GET call such as the following 

Turning now to additional details will be provided regarding the embodiments presented herein for collecting client side performance metrics and latencies. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in parallel or in a different order than those described herein.

The routine begins at operation where the reporting service module receives the event report . For example the event report may be received in an HTTP GET call with the associated values encoded in the URL as described above in regard to . The reporting service module may then extract the values for the event report from the URL as necessary. From operation the routine proceeds to operation where the reporting service module validates the timestamp contained in the event report . As described above in regard to the timestamp may indicate the approximate date and time that the web page was rendered by the web browser application on the user computing device . In one embodiment if the timestamp indicates that the values in the event report are stale e.g. not collected in the last 15 minutes the event report may be dropped and not added to the database .

The routine proceeds from operation to operation where the reporting service module validates the signature key contained in the event report . As further described above in regard to the signature key may contain an HMAC computed from the timestamp and a secret code by the web server before the web page was sent to the user computing device . According to one embodiment the reporting service module re computes the HMAC from the timestamp in the event report and the secret code used by the web server and then compares the re computed HMAC to the signature key in the event report. If the values do not match the event report may not be authentic and therefore may be dropped.

From operation the routine proceeds to operation where the reporting service module validates the operation IDs and counter IDs contained in the event report . Next at operation the reporting service module adds the validated event report to the database . As discussed above in regard to multiple event reports may be received during the rendering of the web page by the web browser application . Each of the multiple event reports will have the same unique event report ID and the event reports may be consolidated into a single event report in the database . From operation the routine ends.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs are standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform the necessary operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard. The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

According to various embodiments the computer may operate in a networked environment using logical connections to remote computing devices and computer systems through the network . The chipset includes functionality for providing network connectivity through a network interface controller NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network such as the user computing device the web server other application servers in the content provider system and the like. It should be appreciated that any number of NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which are described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other standard interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like. For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage medium to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that may be accessed by the computer . By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized.

The mass storage device may store other system or application programs and data utilized by the computer such as the reporting service module described above in regard to . In one embodiment the mass storage device or other computer readable storage media may be encoded with computer executable instructions that when loaded into the computer may transform the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer may have access to computer readable storage media storing computer executable instructions that when executed by the computer perform the routine for collecting client side performance metrics and latencies as described above in regard to .

The computer may also include an input output controller for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to the display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for collecting client side performance metrics and latencies are presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

