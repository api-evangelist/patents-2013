---

title: Permissions of objects in hosted storage
abstract: A data object is stored in a hosted storage system and includes an access control list specifying access permissions for data object stored in the hosted storage system. The hosted storage system provides hosted storage to a plurality of clients that are coupled to the hosted storage system. A request to store a second data object is received. The request includes an indicator that the first data object stored in the hosted storage system should be used as an access control list for the second data object. The second data object is stored in the hosted storage system. The first data object is assigned as an access control list for the second data object stored in the hosted storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924674&OS=08924674&RS=08924674
owner: Google Inc.
number: 08924674
owner_city: Mountain View
owner_country: US
publication_date: 20131104
---
This application is a continuation of U.S. patent application Ser. No. 13 451 939 filed on Apr. 20 2012 which is a continuation of U.S. patent application Ser. No. 13 245 488 now U.S. Pat. No. 8 176 283 filed on Sep. 26 2011 all of which are herein incorporated by reference in their entirety.

Hosted or cloud based storage refers to off site or remote data storage that is typically provided by a third party. The third party may implement the hosted storage in a data center and provide access to the hosted storage over a network such as the Internet.

In one aspect a method includes storing in a hosted storage system a data object. The data object includes an access control list specifying access permissions for data object stored in the hosted storage system. The hosted storage system provides hosted storage to a plurality of clients that are coupled to the hosted storage system. The method further includes receiving in the hosted storage system a request to store a second data object. The request includes an identifier of the first data object to be used as an access control list for the second data object. The method further includes storing in the hosted storage system the uploaded data object. The method further includes assigning in the hosted storage system and to the uploaded data object the first data object as an access control list for the second data object.

Implementations can include any all or none of the following features. The assigning may include copying the first data object and using the copied data object as the uploaded object access control list. The assigning may include storing a reference to the first data object in associating with the second data object as the second data object s access control list. The method may further include receiving in the hosted storage system a request to access the second data object from a user. The method may further include accessing in the hosted storage system the first data object using the stored reference. The method may further include determining based on the first data object that the user is permitted to access the second data object. The method may further include providing to the user access to the object. The request to store a second data object may be a Representational State Transfer REST formatted message. The access control list of the first data object may include XML formatted text. The hosted storage system may index the data objects stored in the hosted storage system in buckets. The access control list of the first data object may specify access permissions for one or more of the buckets.

In one aspect a computer storage medium stores a computer program. The program includes instructions that when executed one or more processing devices cause the one or more processing devices to perform operations. The operations include storing in a hosted storage system a first data object includes an access control list specifying access permissions for data objects stored in the hosted storage system. The hosted storage system provides hosted storage to a plurality of clients that are coupled to the hosted storage system. The operations further include receiving in the hosted storage system a request to store a second data object. The request includes an identifier of the first data object to be used as an access control list for the second data object. The operations further includes storing in the hosted storage system the uploaded data object. The operations further include assigning in the hosted storage system and to the uploaded data object the first data object as an access control list for the second data object.

Implementations can include any all or none of the following features. Assigning may include copying the first data object and using the copied data object as the access control list. Assigning may include storing a reference to the first data object in association with the second data object as the access control list. The operations may include receiving in the hosted storage system a request to access the second data object from a user. The operations may include accessing in the hosted storage system the first data object using the stored reference. The operations may include determining based on the first data object that the user is permitted to access the second data object. The operations may include providing to the user access to the object. The request to store a second data object may be a Representational State Transfer REST formatted message. The access control list of the first data object may include XML formatted text. The hosted storage system may index the data objects stored in the hosted storage system in buckets. The access control list of the first data object may specify access permissions for one or more of the buckets.

In one aspect a computer system includes a hosted storage system configured to store a first data object that includes an access control list specifying access permissions for data objects stored in the hosted storage system. The hosted storage system providing hosted storage to a plurality of clients that are coupled to the hosted storage system. The hosted storage system is further configured to receive a request to store a second data object. The request includes an indicator that the first data object stored in the hosted storage system should be used as an access control list for the second data object. The hosted storage system is further configured to store the second data object. The hosted storage system is further configured to assign the first data object as an access control list for the second data object stored in the hosted storage system. The system further includes a client system configured to send to a hosted storage system the request to store the second data object.

Implementations can include any all or none of the following features. To assign the first data object as an access control list for the second data object stored the hosted storage system may be configured to copy the first data object and using the copied data object as the access control list. To assign the first data object as an access control list for the second data object stored the hosted storage system may be configured to store a reference to the first data object in association with the second data object as the access control list. The hosted storage system may be further configured to receive a request to access the second data object from the client system. The hosted storage system may be further configured to access the first data object using the stored reference. The hosted storage system may be further configured to determine based on the first data object that the user is permitted to access the second data object. The hosted storage system may be further configured to provide to the client system access to the object. The client system may be further configured to send the request to access the second data object to the hosted storage system. The client system may be further configured to receive access to the object. The request to store a second data object may be a Representational State Transfer REST formatted message. The access control list of the first data object may include XML formatted text. The hosted storage system may index the data objects stored in the hosted storage system in buckets. The access control list of the first data object may specify access permissions for one or more of the buckets.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

Various implementations of the subject matter described here may provide one or more of the following advantages. In one or more implementations use of named access control lists can permit efficient assignment of permissions to objects in a storage system. In a hosted storage system a single stored object can be referenced as an access control list for many other objects. A change to the referenced access control list can change the permissions for the many other objects.

A hosted storage system can receive store and server data objects to clients. The data objects can each have an access control list. Each data object and bucket can have an associated access control list that defines a list of users and their permissions with the bucket or object. The access control lists can be stored in the hosted storage system as data objects. Other data objects and buckets may reference or copy the access control list objects for use as access control lists.

The system can provide scalable stores for storing data objects. The client device can upload data objects to the hosted storage service and control access to the uploaded data objects. Access control can include a range of security levels from keeping data securely confidential to publishing it without restrictions. Data stored in hosted storage service can be secured from unauthorized access. The hosted storage service can use a simple and consistent application programming interface or API which can allow arbitrary quantities of structured or unstructured data to be kept private or shared between individuals organizations or with the world at large. The client device can store data in the hosted storage service for mutual business reasons e.g. submission of work product ordered by the owner of the hosted storage service or for use in data processing by other services e.g. images uploaded are used to automatically and dynamically create a photo gallery web page. 

The client device can be implemented using a computing device such as the computing device or the mobile device described with respect to . The client device can communicate with the hosted storage service via a network such as the Internet. The client device can communicate across the network using communication protocols such as for example one or more of Transmission Control Protocol Internet Protocol TCP IP Hypertext Transfer Protocol HTTP Secure Shell Remote Protocol SSH or Application Program Interfaces API . While only a single client device is shown there can be multiple client devices communicating across the network with the hosted storage service and or other services and devices.

The hosted storage service can be implemented such that client applications such as a client application can store retrieve or otherwise manipulate data objects in the hosted storage service . The hosted storage service can be implemented by one or more server devices which can be implemented using a computing device such as the computing device or mobile device described with respect to . For example the hosted storage service can be implemented by multiple server devices operating in the same or different data centers.

The hosted storage service generally includes an interface frontend an interface backend a storage backend metadata for objects stored in the storage backend and a keystore . In general the interface frontend may receive requests from and send responses to the client device . For instance the hosted storage service can be implemented as a Web Service with a corresponding set of Web Service Application Programming Interfaces APIs . The Web Service APIs may be implemented for example as a Representational State Transfer REST based HTTP interface or a Simple Object Access Protocol SOAP based interface.

An interface frontend can receive messages from the client and parse the request into a format usable by the hosted storage service such as a remote procedure call RPC to an interface backend . The interface frontend writes responses generated by the hosted storage service for transmission to the client . In some implementations multiple interface frontends are implemented for example to support multiple access protocols.

The interface frontend can include a graphical front end for example to display on a web browser for data access. The interface frontend can include a sub system to enable managed uploads and downloads of large files e.g. for functionality such as pause resume and recover from time out . The interface frontend can monitor load information and update logs for example to track and protect against denial of service DOS attacks.

As described above the Web Service API may be a REST based HTTP interface. In a REST based interface a data object is accessed as a resource uniquely named using a URI and the client application and service exchange representations of resource state using a defined set of operations. For example requested actions can be represented as verbs such as by HTTP GET PUT POST HEAD and DELETE verbs. The GET verb may be used to retrieve an object while the HEAD verb may be used to retrieve information about an object without retrieving the object itself. The DELETE verb may be used to delete an object from the hosted storage service . The PUT and POST verbs may be used to upload an object to the service . PUT requests can come from the client and contain authentication and authorization credentials and object metadata in a header such as an HTTP header. POST requests can be received when a client wants to upload from a web browser form. The form POST upload protocol for the hosted storage service can involve multiple required form fields to provide authentication authorization and object metadata. More generally any of the API requests may include credentials for authentication and authorization for example in a header of the request. For example an authorization header may be included in the REST requests which includes an access key to identify the entity sending the request.

Alternatively or additionally a user can be authenticated based on credentials stored in a browser cookie which gets appended to the API requests. If no valid cookie is present a redirect to an authentication frontend can be generated and the authentication frontend can be used to generate the browser cookie. The authentication frontend can be used by systems and services in addition to the hosted storage service e.g. if the organization operating the hosted storage service also operates other web services such as email service. A user can also or alternatively be authenticated based on authentication credentials from an external credentialing service or an external service that includes credentialing functionally. User or group identifier information can be calculated from the external service s credential information.

Requests sent by the client to the interface frontend can be translated and forwarded to the external service for authentication.

In general objects stored in the hosted storage service can be referenced by object identifiers. The hosted storage service can define namespaces to which a valid object identifier must conform. For example the namespace may require that object identifiers be a sequence of Unicode characters whose UTF 8 encoding is at most 1024 bytes long. As another example the namespace may require that object identifiers be globally unique identifiers GUIDs which may be 128 bit integers.

Objects can be stored in hosted storage service in buckets. In some examples each bucket is uniquely named in the hosted storage service each object is uniquely named in a bucket and every bucket and object combination is unique. Objects may be uniquely identified by a URI that includes the bucket name and the object name and identifies the hosted storage service . For example an object named long song.mp3 in a bucket named music could be specified using a URI pattern such as

The interface backend can handle request authentication and authorization can manage data and metadata and can track activity such as for billing. The interface backend can provide functionality for independent frontend backend scaling for resource utilization and responsiveness under localized heavy loads. Data management can be encapsulated in the interface backend while communication serving can be encapsulated in the interface frontend . The interface backend can isolate security mechanisms from the client facing interface frontend .

The interface backend can expose an interface usable by both the interface frontend and other systems. In some examples some features of the interface backend are accessible only by an interface frontend not shown used by the owners of the hosted storage service internal users . Such features can include those needed for administrative tasks e.g. resolving an object reference to a low level disk address. The interface backend can handle request authentication e.g. ensuring a user s credentials are valid and authorization e.g. verifying that a requested operation is permitted. The interface backend can also provide encryption and decryption services to prevent unauthorized access to data even by internal users.

A keystore can store encryption keys for data objects where the encryption keys have themselves been encrypted by the interface backend . The encrypted keys can carry associated metadata that is cryptographically bound to the key itself and are referred here to as wrapped keys. From the point of view of the interface backend the wrapped keys can be opaque objects. To obtain the cleartext key of a wrapped key for use e.g. to encrypt or decrypt a data object the interface backend can provide the wrapped key and client authentication credentials to the keystore . The keystore can verify based in part on the wrapped key s metadata that the provided authentication credential is sufficient to authorize release of the key and if so can return the unwrapped key to the interface backend . The interface backend can use the key to encrypt or decrypt the data object and then can discard the key.

In some examples the encryption key is a symmetric key that can be used to both encrypt and decrypt an object. In some examples a wrapped key can have associated metadata indicating multiple users or groups authorized to access the cleartext key. In some examples the keystore can copy a wrapped key and rewrap the key for a different principle e.g. containing different metadata .

The interface backend can manage metadata associated with data objects for example in a structured data format such as a database e.g. MySQL or BigTable . User specified names labeling the buckets can be completely defined within the metadata and object metadata can map a resource name to one or more data shares storing the resource. The metadata can also contain bucket and object creation times object sizes hashes and access control lists ACL for both buckets and objects. The interface backend can log activity and track storage consumption to support accounting for billing and chargebacks. In some examples this include quota monitoring in each dimension in which customers are charged e.g. reads writes network transfers total storage in use. 

The ACLs define who is authorized to perform actions on corresponding buckets or objects and the nature of the permitted actions. The ACLs can be an unordered list of scope role pairs plus Boolean flags. The scope may define a user or group of users and the role may define the access permissions for the user or group. In some examples the union of all scope role pairs can define access rights. In some examples more specific scope role pairs override more general ones. Table 1 Bucket Roles below shows a list of example roles that can be included in ACLs for buckets. Table 2 Object Roles below shows a list of example roles that can be included in ACLs for data objects.

Scopes can be defined to a single user or a group of users. In one implementation those users with a FULL CONTROL role and therefore able to modify the ACL for a given bucket or object may define a group of users and then provide a role for the group. For example a group of users may be managed by the hosted storage service or more generally by the service provider that provides the hosted storage service for reasons other than storage permissions for example Google Groups at groups.google.com and those groups may be identified by a single username or other identifier associated with the group of users an e mail address associated with the group of users which may or may not also correspond to an identifier of the group or a domain name associated with a group. This may allow a user to specify a preexisting group managed by the service provider that is already defined by the identifier e mail address or domain name. Similarly users may be able to specify a group of users for example by user id or e mail address and associate an access key with the group. This may allow for the formation of ad hoc groups for the management of storage permissions rather than groups already managed by the service provider.

In this way a group of users can be given a particular role simply by managing the role of the group. Similarly if the ACL is associated with a bucket containing a number of objects or the ACL is otherwise associated with multiple objects the role with respect to those objects can be easily changed by simply changing the role of the group.

Table 3 Scopes below shows a list of example scopes that can be included in ACLs for buckets and or data objects.

The FULL CONTROL role can represent all possible capabilities such as those assigned to an object or bucket owner connected to a financially responsible party. The bucket owner can be configured to always have FULL CONTROL for the bucket. In general the bucket and or object owner can create or modify scopes and roles in the corresponding ACLs but in some implementations the pair bucket owner FULL CONTROL may be prevented from being removed from the bucket ACL or the object ACL . To create an object a user can have write permission on the bucket which can be granted by WRITE and FULL CONTROL. WRITE permission on the bucket can imply permission to delete or overwrite an object in the bucket. Additional constraints can disallow certain modifications to ACLs . In some examples it is possible to create an object that the bucket owner cannot read.

The storage backend can contain multiple datastores . Although three datastores are shown more or fewer are possible. Each of the datastores can store data objects in a particular format. For example data store can store a data object as a Binary Large Object BLOB data store can store a data object in a distributed file system e.g. Network File System Google File System and data store can store a data object in a structured data format such as a database e.g. MySQL BigTable. 

A request is received by the interface frontend from the client application to store an object . The request can include a HTTP PUT or POST request an authentication credential that authenticates the principal entity making the request a data object and a target for the object consisting of a bucket and data object name. In some examples the authentication credentials can include an interoperable authentication header token or cookie. The interface frontend can make a RPC to the backend including the request headers.

The interface backend can examine and validate the authentication credentials . For example native credentials e.g. user ID token can be validated using internal validation features of the hosted storage service . External credentials e.g. user names and passwords for another system can be sent to the associated external system for validation.

The interface backend can query the request s target bucket s ACL to determine if the authenticated principal is permitted to create an object in the bucket . For example the principal or a group the principal is a member of can have the WRITE or FULL CONTROL role assigned in the bucket s ACL which would allow the principal to create an object in the bucket. If the principal is not authorized to create an object the request is denied.

Otherwise the interface backend uploads the object to the target bucket with the target data object name to a datastore . In some examples each bucket is associated with only a single datastore and specifying a target bucket specifies a datastore . In some examples the interface backend can examine the data object or use a parameter in the RPC from the interface frontend to determine which datastore to store the object in with associated metadata indicating the location of the object that is the particular datastore the object is stored in and the object s location in that datastore .

The interface backend re validates the principal s authentication and authorization . To support long running uploads expiry times of authentication credentials can be temporarily ignored.

The interface backend generates a new document key request to the keystore for a wrapped key for the newly uploaded object . The new wrapped key is tied to the authentication credentials of the principal of the request. The keystore can also supply an encryption key to encrypt the wrapped key. The interface backend encrypts the wrapped key .

The interface backend creates an ACL representing the access control list for the newly created object . In some example a default ACL is used or an ACL can be specified by the request from the client .

The interface backend generates a new document key request to the keystore for a wrapped key for every principal user or group in the ACL with permissions to read the object or modify the object s ACL . Each new wrapped key is tied to a single principal. The keystore can also supply an encryption key to encrypt the wrapped keys or the interface backend can reuse the encryption key from the step .

The interface backend stores the object s ACL and wrapped keys in the object s metadata . The encryption key or keys can be discarded by the interface backend .

A request is received by the interface frontend from the client application to download an object . The request can include a HTTP GET request an authentication credential that authenticates the principal entity making the request and a target consisting of a bucket and optionally data object name. In some examples the authentication credentials can include an interoperable authentication header token or cookie. The interface frontend can make a RPC to the backend including the request headers.

The interface backend examines and validates the authentication credentials included in the request . For example native credentials e.g. user ID token can be validated using internal validation features of the hosted storage service . External credentials e.g. user names and passwords for another system can be sent to the associated external system for validation.

The interface backend queries the request s bucket or object ACL to determine if the authenticated principal is permitted to read the target . For example the principal or a group the principal is a member of can have the READ WRITE or FULL CONTROL role assigned which would allow the principal to read or otherwise access the target. If the principal is not authorized to read or access the object the request is denied.

Otherwise the interface backend determines if the request is for a bucket or for an object . If the request is for a bucket the interface backend queries for a list of the bucket s contents and the listing is returned to the client application .

If the request is for an object the interface backend looks up the appropriate wrapped key for the given authenticated requestor from the object s metadata . The interface backend sends the wrapped key and the authentication credentials to the keystore which can return the decrypted object encryption key to the interface backend . The interface backend can fetch and decrypt the target object to be returned to the client application .

A bucket or object is created by the backend interface based on requests from the client application . The client request can include a bucket name an object name and or an ACL . The principal requesting the new bucket or object is authenticated and made the owner of the bucket or object.

If an ACL is specified in the request the specified ACL is associated with the bucket or object . If the specified ACL does not include a scope role pair specifying the principal having FULL CONTROL one such scope role pair can be added to the ACL . In one implementation an ACL may be specified in a request by enumerating each scope and role pair to be included in the ACL or may be specified by reference to the name of a pre specified or canned ACL. A list of pre specified or canned ACLs is shown in Table 4 Canned ACLs below. The canned ACLs can be cataloged by the hosted storage system and referenced by the client application by name rather than requiring the request enumerate each scope and role pair. Additionally ACLs may be generated by a client stored in the hosted storage system and specified in the request. These ACLs sometimes referred to as named ACLs may be referenced according to the same scheme as other data objects stored by the hosted storage system e.g. bucket and object name .

If an ACL is not specified in the request a default ACL can be used . For example bucket and object creation can default to the private canned ACL for authenticated users. For object creation by unauthenticated users such as for new objects created in a public read write bucket a default of bucket owner full control can be used.

An ACL can be served for example to a principal with READ WRITE or FULL CONTROL of the associated bucket or object . For example a client application can perform a HTTP GET to a target s URI with the query string acl to retrieve the ACL associated with the target. The ACL can be serialized and returned to the client application .

The serialization may be defined for example by the following extended Backus Naur form. Nonterminals appear in sans serif italics terminals appear in Courier Bold denote zero or more repetitions enclose optional entities separates alternatives and denote grouping. The terminal symbols canonical id email address and domain are defined in English below 

An ACL can be updated for example by a principal with WRITE or FULL CONTROL of the associated bucket or object . In some examples a client must read modify and write an ACL in order to update an ACL . In this example the ACL is served as part of modification . In some implementations a client application can send ACL update requests to the hosted storage system .

In some implementations some ACLs can be stored as a data object. These data object ACLs can contain the same type of data as the ACLs for example XML formatted text that specifies permission for objects or buckets in the hosted storage system . When the data object is uploaded to the hosted storage system the upload request may include a header that specifies a second data object to be used as the ACL for that uploaded data object . Additionally data objects maintained in storage with ACLs may have permissions modified to use an ACL data object such as object . For example a user administering one such data object may decide that the current ACL for that data object is no longer desired. The user may choose to modify that data object s ACL or may choose to assign the object as the data object s new ACL.

The hosted storage system can store the newly uploaded data object and assign the ACL data object as the ACL . The data in the ACL data object can be copied and stored as an ACL in the metadata . In this case a change to the ACL may be made independent of and without affecting the ACL data object

A header field in a message can specify that the ACL data object should be copied and used to create the ACL . For example a multi purpose header e.g. x storage acl which can be used for any kind of ACL or a header specific to use of a stored object as an ACL e.g. x storage custom acl may be used to specify the ACL data object . The header may include the fully qualified name of the ACL data object according to the naming convention used by the hosted storage system for all data objects e.g. bucket object . The uploading of the data object and the copy and assignment of the ACL data object as the ACL may be performed as part of a single atomic action. That is before the data object is available the client application or any other requester the ACL is created from the ACL data object

In some implementations some ACLs can be stored as a data object. These data object ACLs can contain the same type of data as the ACLs for example XML formatted text that specifies permission for objects or buckets in the hosted storage system . When the data object is uploaded to the hosted storage system the upload request may include a header that specifies a second data object to be used as the ACL for that uploaded data object . Additionally existing data objects stored with ACLs may be modified to use an ACL data object such as object

The hosted storage system can store the newly uploaded data object and assign the ACL data object to be used as the ACL. The data in the ACL data object can identified in a referenced in the metadata of the data object . In this case a change to the ACL may be made resulting in an effective change to the permissions of the data object and any other data object using the data object as an ACL.

A header field in a message can specify that the ACL data object should be referenced in the metadata for use as an ACL. For example a multi purpose header e.g. x storage acl which can be used for any kind of ACL or a header specific to use of a stored object as an ACL e.g. x storage custom acl may be used to specify the ACL data object . The header may include the fully qualified name of the ACL data object according to the naming convention used by the hosted storage system for all data objects e.g. bucket object .

The interface backend can receive a request to access the data object . In this example accessing can include reading writing listing deleting or other actions. The interface backend can dereference the reference to identify the ACL data object to determine if the user that sent the request is permitted to access the data object . If the user does have sufficient permissions the interface backed can provide the data object to the user. If the user does not have sufficient permissions the interface backend can instead send an access denied message indicating that the user lacks the correct permissions.

The computing device includes a processor a memory a storage device a high speed interface connecting to the memory and multiple high speed expansion ports and a low speed interface connecting to a low speed expansion port and the storage device . Each of the processor the memory the storage device the high speed interface the high speed expansion ports and the low speed interface are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as a display coupled to the high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In some implementations the memory is a volatile memory unit or units. In some implementations the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In some implementations the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. Instructions can be stored in an information carrier. The instructions when executed by one or more processing devices for example processor perform one or more methods such as those described above. The instructions can also be stored by one or more storage devices such as computer or machine readable mediums for example the memory the storage device or memory on the processor .

The high speed interface manages bandwidth intensive operations for the computing device while the low speed interface manages lower bandwidth intensive operations. Such allocation of functions is an example only. In some implementations the high speed interface is coupled to the memory the display e.g. through a graphics processor or accelerator and to the high speed expansion ports which may accept various expansion cards not shown . In the implementation the low speed interface is coupled to the storage device and the low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. In addition it may be implemented in a personal computer such as a laptop computer . It may also be implemented as part of a rack server system . Alternatively components from the computing device may be combined with other components in a mobile device not shown such as a mobile computing device . Each of such devices may contain one or more of the computing device and the mobile computing device and an entire system may be made up of multiple computing devices communicating with each other.

The mobile computing device includes a processor a memory an input output device such as a display a communication interface and a transceiver among other components. The mobile computing device may also be provided with a storage device such as a micro drive or other device to provide additional storage. Each of the processor the memory the display the communication interface and the transceiver are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the mobile computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide for example for coordination of the other components of the mobile computing device such as control of user interfaces applications run by the mobile computing device and wireless communication by the mobile computing device .

The processor may communicate with a user through a control interface and a display interface coupled to the display . The display may be for example a TFT Thin Film Transistor Liquid Crystal Display display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may provide communication with the processor so as to enable near area communication of the mobile computing device with other devices. The external interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the mobile computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. An expansion memory may also be provided and connected to the mobile computing device through an expansion interface which may include for example a SIMM Single In Line Memory Module card interface. The expansion memory may provide extra storage space for the mobile computing device or may also store applications or other information for the mobile computing device . Specifically the expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example the expansion memory may be provide as a security module for the mobile computing device and may be programmed with instructions that permit secure use of the mobile computing device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory non volatile random access memory as discussed below. In some implementations instructions are stored in an information carrier. that the instructions when executed by one or more processing devices for example processor perform one or more methods such as those described above. The instructions can also be stored by one or more storage devices such as one or more computer or machine readable mediums for example the memory the expansion memory or memory on the processor . In some implementations the instructions can be received in a propagated signal for example over the transceiver or the external interface .

The mobile computing device may communicate wirelessly through the communication interface which may include digital signal processing circuitry where necessary. The communication interface may provide for communications under various modes or protocols such as GSM voice calls Global System for Mobile communications SMS Short Message Service EMS Enhanced Messaging Service or MMS messaging Multimedia Messaging Service CDMA code division multiple access TDMA time division multiple access PDC Personal Digital Cellular WCDMA Wideband Code Division Multiple Access CDMA2000 or GPRS General Packet Radio Service among others. Such communication may occur for example through the transceiver using a radio frequency. In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition a GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to the mobile computing device which may be used as appropriate by applications running on the mobile computing device .

The mobile computing device may also communicate audibly using an audio codec which may receive spoken information from a user and convert it to usable digital information. The audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of the mobile computing device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on the mobile computing device .

The mobile computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium and computer readable medium refer to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few implementations have been described in detail above other modifications are possible. For example while a client application is described as accessing the delegate s in other implementations the delegate s may be employed by other applications implemented by one or more processors such as an application executing on one or more servers. In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other actions may be provided or actions may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

