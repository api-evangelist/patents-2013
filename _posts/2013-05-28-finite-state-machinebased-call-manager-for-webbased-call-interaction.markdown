---

title: Finite state machine-based call manager for web-based call interaction
abstract: Systems, methods, devices, and non-transitory storage media provide a web-based graphical user interface to allow a user to control a softphone of a user device. A context handler operates on the user device and manages a page context of the web-based graphical user interface. A call manager operates as a RESTful web service on the user device. The context handler and the call manager communicate using JavaScript Object Notation with Padding (JSONP) messages. The call manager includes a finite state machine that indicates a current state of the softphone. The call manager generates application programming interface calls to the softphone in response to receiving JSONP messages. The user interface is updated to reflect the current state of the softphone based on execution of user selections by the softphone. The context handler chunks data into multiple JSONP messages if data exceeds a data size limitation of the JSONP.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09530116&OS=09530116&RS=09530116
owner: VERIZON PATENT AND LICENSING INC.
number: 09530116
owner_city: Basking Ridge
owner_country: US
publication_date: 20130528
---
Call centers provide various services to customers such as technical support change of service sign on new customers terminate service etc. The network allows call center representatives call center agents to interact with customers or potential customers through various forms of communication such as telephone e mail etc. With the migration toward IP based communication however legacy tools and stand alone tools may present network administrators with issues that inhibit collaboration between these tools and prevent seamless interaction between these tools from the perspective of the representatives.

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following description does not limit the invention.

Representatives of a call center may use various tools to provide customer service support. For example a representative may use a computer a telephone e.g. soft or hard and various software for call handling account management etc. With current trends in call center technology migrating toward IP or Internet Web based tools representatives may be relegated to the task of performing swivel chair interfacing in which the representatives manage multiple tools. By way of example a representative may use a softphone on a computer to speak with a customer and concurrently have a browser open to use a web application that affords account management features. The representative needs to operate the softphone and the web application to serve the customer. This framework presents network administrators with various challenges relating to network management e.g. data integration user interface integration user friendliness etc. .

The term call as used herein is intended to include a telephone call. For example the call may be a Voice over Internet Protocol VoIP call a plain old telephone call or a combination thereof.

According to an exemplary embodiment a call manager acts as an intermediary component e.g. a proxy between a telephone e.g. a softphone and a context handler. According to an exemplary embodiment the call manager and the context handler are implemented on a computational device e.g. a computer . The context handler manages the content displayed on the computational device. For example the computational device includes a web browser to provide a softphone user interface and other user interfaces pertaining to customer service e.g. service account management . The context handler manages the user interfaces displayed via the web browser. According to an exemplary implementation the context handler may be implemented as a hook e.g. a Java Script hook a .com hook . As described further below user interactions via the user interfaces which are displayed by the web browser are communicated through the context handler to the call manager. Additionally other types of events may be communicated from the call manager to the context handler.

The computational device may include the softphone. According to other implementations the computational device may not include a softphone. Rather a representative may use a hardphone.

According to an exemplary embodiment the call manager includes a finite state machine FSM to identify a current state of a call and communicates that state to either the softphone or the context handler. For example a user s interaction with the softphone user interface e.g. a selection of a call button is communicated to the softphone via the context handler and the call manager. Additionally an event from the softphone e.g. ringing is communicated to the context handler via the call manager. In response the context handler may modify the user interface context or page context displayed via the web browser. For example a browser instance e.g. an object of a web page displayed by the web browser may be updated based on the event e.g. ringing .

According to an exemplary embodiment communications between the call manager and the context handler use JavaScript Object Notation with Padding JSONP . According to an exemplary embodiment the call manager establishes a RESTful web service endpoint that processes the JSONP requests and responses. According to an exemplary embodiment the context manager is configured to chunk messages that have a size greater e.g. greater than 200 characters than a message size afforded by JSONP.

Environment may be implemented to include wired optical and or wireless connections among the devices and network illustrated. A connection may be direct or indirect and may involve intermediary device s and or network s not illustrated in . Additionally the number and the arrangement of connections between the devices and the network are exemplary.

The number of devices and networks and the configuration in environment are exemplary. According to other embodiments environment may include additional devices fewer devices different devices and or differently arranged devices than those illustrated in . Additionally or alternatively environment may include an additional network and or a differently arranged network than that illustrated in .

A device may be implemented according to a centralized computing architecture a distributed computing architecture or a cloud computing architecture. Additionally a device may be implemented according to one or multiple network architectures e.g. a client device a server device a peer device a proxy device or a combination thereof .

Network includes one or multiple networks of one or multiple types. For example network may include a public network a private network a wide area network the Internet a metropolitan area network a data network a packet based network a circuit based network a telephone network e.g. Voice over Internet Protocol VoIP a public switched telephone network PSTN or some combination thereof.

Network devices include network devices that provide call center services. For example a portion of network devices may include an automatic call distribution ACD device an interactive voice response IVR device a computer telephony integration CTI device a customer relationship management CRM device a call data device a storage device that stores a customer database or some combination of these devices. Network device V includes a web based customer service device. For example network device V includes service software that allows representatives to sign up new customers pull account information pertaining to existing customers order new services order equipment disconnect service cancel a service etc. regarding a service offered by a service provider. By way of example the service may include a telephone service Internet service mobile service television service or some combination thereof. According to an exemplary embodiment service software provides a web user interface to allow a representative to control and operate the representatives telephones e.g. softphones . For example the web user interface allows the representative to make calls receive calls transfer calls to another representative etc. According to an exemplary embodiment the web user interface indicates the current state of the representatives telephones via user interface elements e.g. buttons menus etc. . As described further below the web user interface is displayed on user device via web browser .

User device includes a device having communicative and display capabilities. For example user device may include a computer e.g. a desktop computer a laptop computer or other form of a computational terminal that includes peripheral devices e.g. a display keyboard mouse etc. .

User device includes a call manager . Call manager may be implemented as a Microsoft .NET desktop application. According to other implementations call manager may be implemented according to other platforms e.g. Java etc. . According to an exemplary embodiment call manager acts as an intermediary communicative entity between softphone and context handler . For example call manager may communicate an event pertaining to a call e.g. termination of a call etc. to context handler . In turn context handler may update a user interface e.g. pertaining to softphone and displayed via web browser to reflect the occurrence of the event. Call manager is described further below.

User device includes softphone . Softphone may be implemented as a desktop application. Softphone may be implemented by softphones of various vendors e.g. Avaya Cisco Genesys Toolkit etc. . According to other implementations the representative may use a hardphone. Although not illustrated softphone may communicate with an ACD device a CTI device a voice switch device and or other types of backend network devices of a call center. User device also includes a web browser to communicate with network device V and service software . For example web browser may be implemented by web browsers of various vendors e.g. Internet Explorer Firefox Google Chrome etc. . Web browser displays user interfaces to a representative. As described further below a user interface may be updated to reflect an event based on communication between call manager and context handler .

User device also includes context handler . According to an exemplary implementation context handler may be implemented as a hook e.g. a Java Script hook a .com hook etc. . Context handler manages page context. For example web browser may display on user device customer service user interfaces stemming from communication with service software of network device V. Context handler manages a browser instance of a customer service user interface that is rendered by user device . For example the customer service user interface includes a user interface pertaining to softphone . The representative interacts with the softphone user interface when handling a call from a customer. Context handler communicates the representative s interaction with the softphone user interface to call manager . Call manager communicates with softphone and or other back end devices e.g. a T server etc. . Upon completion of the representative s request input call manager communicates to context handler which in turn updates refreshes the softphone user interface. Context handler is described further below.

Configuration module loads a configuration file to initialize call manager . As described below the configuration file may be obtained from service software or from a cache resident on user device .

Call controller module manages a call based on FSM . Browser communication module transmits messages to context handler . WCF services module provides a RESTful web service. WCF services module also provides an assemble function and generates API calls to softphone as described herein.

Event handler module listens to events e.g. call ringing call established call transfer etc. associated with a call. For example the events may pertain to a dialer e.g. Avaya Dialer or T server CTI device .

According to an exemplary scenario when call manager is launched during a system start up process of user device call manager will enter an idle state in the system tray. A call manager log is created and stored. According an exemplary implementation a representative launches web browser to communicate with network device e.g. web device hosting service software . The representative enters login information via web browser . Web device obtains user profile information from a UPM device . Web device performs authentication and authorization. Upon a successful log in web device service software selects and transmits a configuration file to user device which is received by call manager via WCF services module using the custom protocol over JSONP. The configuration file may include switch type data company identifier station identifier e.g. user device identifier call manager group level flags and T server identifier associated with a CTI device. According to another implementation call manager obtains the configuration file from cache. Call manager initializes data objects and services set forth in the configuration file.

Call manager registers with T server CTI device . T server CTI device includes a device for handling the data part of the telephone call by interacting with a telephony switch to obtain call events and route calls e.g. by an Inbound Call Management ICM system to the appropriate call center. For example call manager sends a registration request. Upon successfully registration call manager receives a registration response. Voice portal includes an automated system to interact with customers to obtain preliminary information and reason for telephone call. Voice portal may then route the call to the appropriate call center.

A call manager user interface indicates e.g. via a graphical element successful registration. After successfully registration and login of the representative calls may be received. For example when a line is established e.g. call ringing call established call manager launches a URL of service software . The URL is included in the configuration file. Thus call manager provides an auto pop up of a browser window pertaining to the incoming call. As described further below the representative may operate softphone via the browser window as well as provide other customer services.

According to an exemplary embodiment call manager monitors the number of service software browser windows opened at any given time. Call manager limits the number of browser windows. For example during the loading unloading of every page pertaining to service software a message is sent to call manager to allow call manager to count each page. If a preset limit is reached call manager verifies the number by counting the number of web browser windows loading the specific URL. After verification is made call manager displays an alert to the representative.

According to other implementations web graphical user interface may include additional different or fewer user interfaces. For example other departments associated with a service provider that interact with customers may have a user interface other than account service user interface . That is account service user interface may be replaced with a user interface relevant to the service provided by a department call center representative service provider personnel etc. For example a department e.g. a Dispatch Resource Center may be responsible for delivering installation maintenance and repair assignments to technicians. The call center representatives may interact with technicians. For example when a technician support center representative receives a call the technician s name employee code load information as well as job details are automatically displayed. Online banners and alerts may be included in the user interface to provide instant notification of outages metrics training and workload requirements.

Referring to according to an exemplary embodiment the connection between user device and service software is over a Secure Sockets Layer SSL communication. For purposes of description assume that web graphical user interface has a fully qualified domain name FQDN . According to an embodiment communication between call manager and context handler includes the use of the JSONP. The JSONP allows events to be communicated to and from call manager without requiring call manager to use the SSL. Additionally the JSONP allows events to be communication to and from context handler . In this way the data associated with web graphical user interface which is resident on user device may be updated refreshed without communication to network device V e.g. service software . According to other implementations however communication e.g. Ajax based communication may be conducted between user device and network device V to reflect events.

As illustrated in call manager shuttles messages between softphone and context handler . According to an exemplary scenario assume the representative is viewing call management user interface of web graphical user interface via browser based on a call received from a customer. Thereafter the representative interacts e.g. selects a button with call management user interface of web graphical user interface and causes an event to occur e.g. due to the selection of the button . For example the representative may terminate the call transfer the call put the call on hold etc. In turn context manager e.g. Java Script running on the page generates an event message in response to a detection of the event e.g. the representative s input via call management user interface . For example context handler generates a JSONP request. According to an exemplary embodiment the JSONP request includes a verb and parameter format as described further below. Context handler transmits the event message e.g. the JSONP request to call manager .

Call manager receives the JSONP request. Upon receipt of the JSONP request call manager compares the event indicated in the JSONP request to FSM to determine if the event is valid e.g. a valid next state etc. based on the current state indicated by FSM . If the event is valid call manager translates the event into an application programming interface API call to softphone . If the event is not valid call manager transmits an error message back to context handler . For this example assume that the event is valid. In response to determining that the event is valid call manager communicates with softphone using a cross process message e.g. a .NET communication or other API call . Upon receipt of the API call softphone executes the API call and returns a confirmation code to call manager .

Referring to upon receipt of the confirmation code call manager updates the state indicated by FSM to reflect the completion of the event. According to an exemplary embodiment context handler continuously polls FSM of call manager to obtain the current state of FSM . Based on a polling result context handler renders web graphical user interface to reflect the current state of FSM . For example according to the example described above when a next poll is received by call manager call manager transmits a JSONP response and in turn call management user interface of web graphical user interface is rendered to reflect the changed state e.g. the state associated with the selection of the button .

According to other exemplary embodiments polling may not be used. For example call manager may automatically push a state of FSM to context handler so that call management user interface of web graphical user interface may be updated refreshed when the state of FSM changes.

Given this framework there is a separation of web graphical user interface from the business logic e.g. use of softphone etc. . For example even if web browser crashes the state information of softphone is not lost since web graphical user interface obtains the current state from FSM of call manager . That is if the representative is on a call and during the call web browser crashes after the representative restarts web browser call management user interface of web graphical user interface will reflect that the representative is still on the call.

According to other scenarios an event associated with softphone causes a message to be sent to call manager . By way of example referring to softphone may be communicatively coupled to an ACD device or a voice switch device. When a call is terminated softphone receives an end of call message. Softphone reports the event to call manager in a cross process message. Call manager communicates this event to context handler and in turn web graphical user interface may be updated refreshed so that the end of call message is reflected to the representative via web graphical user interface .

Referring to assume a customer calls into voice portal via phone . During the interaction with voice portal the customer provides certain information. For example the customer may identify confirm the telephone number for which he or she is calling a language that the customer wishes to use e.g. English Spanish etc. and other types of information. According to an exemplary implementation the data may be stored as a key value pair.

Subsequent to the interaction with voice portal voice portal transfers the call to ACD server . ACD server selects among other things the appropriate representative to handle the incoming call and passes the call to the representative. Additionally voice portal passes the data to T server CTI device . ACD server informs T server CTI device of the selected representative to handle the call. In response T server CTI device passes the data to call manager via user device . Call manager and context handler communicate to each other using JSONP messaging and a .com hook to pass the data call event information and user interaction input. In this way web graphical user interface will continue to be in sync with the customer call status.

Referring to assume a technician calls into voice portal via phone . In this case assume that the service provider does not use T server CTI device . According to this framework when the data is obtained by voice portal voice portal passes at least some if not all of the data to service software . In response to receiving the data service software generates an identifier and communicates the identifier back to voice portal . The identifier identifies the data and or the call session associated with the incoming call from the technician. As illustrated in response to receiving the identifier voice portal passes the call and the identifier to ACD server . ACD server which may typically handle only the audio portion of a call is capable of receiving the identifier due to its limited data size. Additionally other devices e.g. switches routers etc. may be capable of receiving the identifier due to its limited data size. As illustrated ACD server passes the identifier and the call to user device . Call manager obtains the identifier e.g. from softphone . Call manager passes the identifier to context handler using JSONP messaging and a .com hook. In turn web graphical user interface will include call detail information relating to the technician. For example the call detail information may include customer information pertaining to customers that the technician is servicing.

Referring to assume a customer calls into voice portal via phone . In this case assume that the representative uses a hard phone versus softphone . In a manner similar to that previously described voice portal passes the call to ACD server . ACD server selects the representative and passes the call to hardphone . ACD server provides T server CTI device with information e.g. an identifier of the representative user device etc. pertaining to user device associated with hardphone . In response T server CTI device passes the data to call manager . Call manager passes the data to context handler using JSONP messaging and a .com hook so that web graphical user interface provides the appropriate information and is displayed to the representative via browser .

According to an exemplary embodiment call manager establishes a RESTful web service endpoint that can process JSONP requests over HTTP and respond with JSONP responses. However there is a data size limitation relating to JSONP requests. The data size limitation may depend on the web browser e.g. browser . In some instances data to be communicated between context handler and call manager may have a size greater than the data size limitation of a JSONP request. According to an exemplary embodiment context handler includes a chunker to overcome this limitation. For example referring to the chunker not illustrated divides data that is to be sent as a JSONP request into chunks in which each chunk has a size within the data size limit. The chunker may add padding and or encoding to chunked data. The chunker may also add sequence numbers to facilitate reassembly at the destination i.e. call manager . Call manager includes an assembler not illustrated that assembles the chunked data. Additionally the assembler may acknowledge receipt of each chunked data to network device . Since the payload data may also be base 64 encoded the chunked data may include images e.g. communication with an image scanner driver or postscript e.g. communication with a printer driver etc. .

In addition since the user of the web graphical user interface may issue several commands simultaneously the transmission of each request over JSONP will have a unique message ID where all the chunks of that same transmission will use this unique ID. Call manager after assembling all the chunks and processing the entire message will also send an acknowledgment or response for the entire message. This process will guarantee that lost or incomplete messages can be retried if the acknowledgment is not received within some timeout period.

Provided below is exemplary code to be executed by the receiving side e.g. call manager of a JSONP communication pertaining to the receipt of chunked data. The code includes processes to decode the chunked data and reassemble multiple chunked data based on sequence numbers. The code assumes the existence of a hash table object named chunks that stores the numbered chunks.

According to an exemplary embodiment the JSONP messages use a verb and parameter s command format. For example a JSONP message may include a verb e.g. dial out and parameter s that instructs call manager to interact with softphone to tell softphone to dial out a telephone number. Provided below are exemplary verbs that may be implemented in the call manager system. According to an exemplary implementation there are two types of verbs configuration verbs and runtime verbs including 

According to an exemplary embodiment when the representative interacts with call management interface of web graphical user interface context handler selects one of the runtime verbs and parameter s and transmits one or multiple JSONP messages to call manager . Call manager has or is designated by a URL e.g. http local host .

According to an exemplary embodiment service software uses the configuration verbs to configure call manager . For example when a representative logs on to service software service software obtains representative profile information e.g. name what type of calls the representative will be receiving transfer destinations etc. . Service software generates multiple JSONP requests to include portions of the configuration file and transmits the configuration file e.g. an XML file to call manager . Call manager executes a configuration process based on the configuration file. During the configuration process call manager may communicate with other devices applications etc. such as softphone a voice server a call data server etc. to register with or establish a session with these other devices applications etc.

According to an exemplary embodiment call manager operates partially as a web application and partially as a Windows application or other suitable desktop application e.g. Linux Mac OS etc. . For example as previously described call manager may operate as a RESTful web service endpoint that listens for commands from web graphical user interface of service software and also communicates with softphone e.g. a desktop application . In contrast to other approaches to allow a browser page context to communicate with a client certain processes may be performed. For example an ActiveX control of a .NET component may require instantiating an object in JavaScript obtaining proper permissions e.g. in a browser setting etc. According to an exemplary embodiment of call manager as described herein these processes are not needed.

According to an exemplary embodiment when the representative logs on to service software of network device as previously described service software obtains representative profile information. Based on the representative profile information e.g. line of business to which the representative belongs etc. the representative has particular destinations to which the representative may transfer calls. When the representative selects a destination via call management user interface context handler generates and transmits a JSONP request to call manager . Call manager may communicate with a voice server and softphone to transfer the call to the selected destination.

Processor includes one or multiple processors microprocessors data processors co processors multi core processors application specific integrated circuits ASICs controllers programmable logic devices chipsets field programmable gate arrays FPGAs system on chips SoCs programmable logic devices PLSs microcontrollers application specific instruction set processors ASIPs central processing units CPUs or some other component that interprets and or executes instructions and or data. Processor may be implemented as hardware e.g. a microprocessor etc. or a combination of hardware and software e.g. a SoC an ASIC etc. . Processor may include one or multiple memories e.g. memory storage etc.

Processor may control the overall operation or a portion of operation s performed by device . Processor may perform one or multiple operations based on an operating system and or various applications or programs e.g. software . Processor may access instructions from memory storage from other components of device and or from a source external to device e.g. another device a network etc. .

Memory storage includes one or multiple memories and or one or multiple other types of storage mediums. For example memory storage may include one or multiple types of memories such as random access memory RAM dynamic random access memory DRAM cache read only memory ROM a programmable read only memory PROM a static random access memory SRAM a single in line memory module SIMM a dual in line memory module DIMM a flash memory and or some other type of memory. Memory storage may include a hard disk e.g. a magnetic disk an optical disk a magneto optic disk a solid state disk etc. and a corresponding drive. Memory storage may include a hard disk e.g. a magnetic disk an optical disk a magneto optic disk a solid state disk etc. a Micro Electromechanical System MEMS based storage medium and or a nanotechnology based storage medium. Memory storage may include drives for reading from and writing to the storage medium.

Memory storage may be external to and or removable from device such as for example a Universal Serial Bus USB memory stick a dongle a hard disk mass storage off line storage or some other type of storage medium e.g. a compact disk CD a digital versatile disk DVD a Blu Ray disk BD etc. . Memory storage may store data software and or instructions related to the operation of device

Software includes an application or a program that provides a function and or a process. Software may include firmware. For example with reference to user device software may include an application that when executed by processor provides the functions of call manager and context handler as described herein.

Communication interface permits device to communicate with other devices networks systems and or the like. Communication interface includes one or multiple wireless interface s and or wired interface s . For example communication interface may include one or multiple transmitter s and receiver s or transceiver s .

Input provides an input into device . For example input may include a keyboard a keypad a touchscreen a touch pad a touchless screen a mouse an input port a button a switch a microphone a knob and or some other type of input.

Output provides an output from device . For example output may include a display a speaker a light e.g. light emitting diode s etc. an output port a vibratory mechanism and or some other type of output.

Device may perform a function or a process in response to processor executing software instructions stored by memory storage . For example the software instructions may be read into memory storage from another memory storage or read from another device via communication interface . The software instructions stored in memory storage may cause processor to perform processes described herein. Alternatively according to another implementation device may perform a process or a function based on the execution of hardware e.g. processor etc. .

Referring to in block a web user interface a desktop application is provided. For example a web browser of user device displays web graphical user interface to a representative operating user device .

In block a user selection via the web user interface is received. For example the representative selects a graphical element of call management user interface using a mouse of user device . By way of example assume the representative selected a call button after dialing a telephone number to reach a customer.

In block a JSONP request is generated. For example context handler determines that a single JSONP request may be generated based on the identified verb and parameters. Context handler generates a JSONP request.

In block the JSONP request is transmitted to a call manager. For example context handler transmits the JSONP request to call manager . Call manager is running as a RESTful web service.

In block the JSONP request is received by the call manager. For example call manager receives the JSONP request. Call manager interprets the verb included in JSNOP request. Call manager compares the event to FSM to see if the event is valid based on the current state indicated by FSM . For purposes of description assume that call manager determines that the event is valid.

In block it is determined whether other JSONP request s is are to be assembled. For example call manager inspects the JSONP request to determine whether there is a sequence number or a flag in the JSONP request. If it is determined that other JSONP request s is are to be assembled block YES then it is determined whether this is the last JSONP request block . For example call manager inspects the JSONP request to determine whether the JSONP request includes a last sequence number of a series of multiple JSONP requests or a flag exists indicative of a last JSONP request.

Referring to if it is determined that this is not the last JSONP request block NO then process proceeds to block of . That is context handler will generate and transmit at least one additional JSONP request to call manager . Call manager stores the JSONP request s or relevant portion for subsequent assembly. However if it is determined that the JSONP request is the last JSONP request block YES then the JSONP requests are assembled block . For example call manager assembles the data included in the JSONP requests. As further illustrated in after assembly of the JSONP requests process proceeds to block as described below.

Referring back to if it is determined that other JSONP request s is are not to be assembled block NO then an API call is generated block . For example call manager generates an API call for softphone . For example the API call will cause softphone to establish a call.

In block a cross process message is transmitted to a softphone. For example call manager transmits a .NET message to softphone . In block the API call is executed by the softphone. For example softphone receives the .NET message and executes the API call. For example softphone transmits a call establishment message to an ACD device or a voice switch. Softphone may also transmit call data to a call data server.

In block a cross process message is generated and transmitted to the call manager. For example softphone generates a .NET message for call manager to indicate a call ringing state. Softphone transmits the .NET message to call manager .

Referring to in block the finite state machine of the call manager is updated. For example call manager receives the .NET message and updates the state of finite state machine to a ringing state.

In block a poll request for a state of the finite state machine is received. For example context handler polls the finite state machine of call manager to obtain a current state of finite state machine .

In block the state of the finite state machine is provided. For example call manager provides the state to context handler .

In block the web user interface is updated based on the state of the finite state machine. For example context handler renders call management user interface to a ringing state. For example numeric buttons are displayed as inactive buttons. Call manager user interface may display an overlay that indicates the call is ringing.

Although illustrate an exemplary process according to other implementations process may include additional operations fewer operations and or different operations than those illustrated in and described herein.

In the preceding specification various embodiments have been described with reference to the accompanying drawings. However various modifications and changes may be made thereto and additional embodiments may be implemented without departing from the broader scope of the invention as set forth in the claims that follow. For example although the preceding exemplary embodiments have been described in relation to a softphone other types of communicative applications may be implemented. By way of example user device may include software for video conferencing instant messaging e mail etc. In this regard call manager may generate API calls to various types of communicative applications. Additionally web graphical user interface may correspondingly include a graphical user interface relating to the communicative application. The specification and drawings are accordingly to be regarded as illustrative rather than restrictive.

The terms a an and the are intended to be interpreted to include one or more items. Further the phrase based on is intended to be interpreted as based at least in part on unless explicitly stated otherwise. The term and or is intended to be interpreted to include any and all combinations of one or more of the associated items.

In addition while a series of blocks has been described with regard to the process illustrated in the order of the blocks may be modified in other implementations. Further non dependent blocks may be performed in parallel. Additionally with respect to other processes described in this description the order of operations may be different according to other implementations and or operations may be performed in parallel.

Embodiments described herein may be implemented as a non transitory storage medium that stores data and or information such as instructions program code data structures program modules an application etc. For example a non transitory storage medium includes one or more of the storage mediums described in relation to memory storage .

The embodiments described herein may be implemented in many different forms of software executed by hardware. For example a process or a function may be implemented as logic or as a component. The logic or the component may include for example hardware e.g. processor etc. or a combination of hardware and software e.g. software . The embodiments have been described without reference to the specific software code since software can be designed to implement the embodiments based on the description herein.

In the specification and illustrated by the drawings reference is made to an exemplary embodiment an embodiment embodiments etc. which may include a particular feature structure or characteristic in connection with an embodiment s . However the use of the phrase or term an embodiment embodiments etc. in various places in the specification does not necessarily refer to all embodiments described nor does it necessarily refer to the same embodiment nor are separate or alternative embodiments necessarily mutually exclusive of other embodiment s . The same applies to the term implementation implementations etc.

No element act operation or instruction described in the present application should be construed as critical or essential to the embodiments described herein unless explicitly described as such.

