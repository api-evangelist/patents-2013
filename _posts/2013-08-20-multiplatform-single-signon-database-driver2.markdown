---

title: Multi-platform single sign-on database driver
abstract: Systems and methods of performing single sign-on authentication from multiple platforms when establishing a connection to a database are described. An application can securely access a database based on user credentials provided during a prior authentication. In an embodiment, single sign-on is accomplished by relying on existing and emerging authentication, security service, security mechanism, and wire protocols, enabling the creation of drivers to accommodate various platforms and databases. In another embodiment, a pure type 4 Java Driver is used, eliminating dependencies on native operating functionality.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09571476&OS=09571476&RS=09571476
owner: Progress Software Corporation
number: 09571476
owner_city: Bedford
owner_country: US
publication_date: 20130820
---
The present application is a continuation of U.S. application Ser. No. 10 887 340 entitled Multi Platform Single Sign On Database Driver filed Jul. 7 2004 which is hereby incorporated by reference.

The present application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 484 654 filed Jul. 7 2003 to Silhavy et. al. entitled Providing Single Sign on and Secure Authentication in a Type Four JDBC Driver which is hereby incorporated by reference in its entirety.

Applicants hereby notify the USPTO that the claims of the present application are different from those of the parent application U.S. patent application Ser. No. 10 887 340 and any other related applications. Therefore Applicants rescind any disclaimer of claim scope made in the parent application or any other predecessor application in relation to the present application. The Examiner is therefore advised that any such disclaimer and the cited reference that it was made to avoid may need to be revisited at this time. Furthermore the Examiner is also reminded that any disclaimer made in the present application should not be read into or against the parent application the grandparent application or any other related application.

The invention relates to the field of database authentication and more specifically to providing an integrated security mechanism for logging on to a database by using credentials obtained at machine logon to accomplish database logon.

Information stored in databases is generally accessed through database applications. To get to the data a user typically must first log on to a machine or operating system OS then log on again to the particular database to which access is sought. Machine log on systems generally include a number of robust security measures such as auditing password expiration minimum password length and account lockout after multiple invalid login requests. Database logon system however are often less secure containing fewer and less robust security measures. In addition conventional database logon protocols often require a case sensitive password and other logon data to be sent from the client to the database server through an unsecured network such as the Internet increasing the risk that password and other security data will be intercepted.

The current approach has several shortcomings. First it requires users to complete two logons one to the operating system and one to the database thereby increasing the inconvenience and administrative overhead associated with sign on. It also makes the database more vulnerable to unauthorized use since database logon is completed separately from operating system logon and does not receive the benefits of operating system or machine level security systems. These problems are exacerbated when access to a database is required from different platforms as is commonly the case in enterprise computing settings. Each platform may have its own requirements for completing secure access to the database further multiplying the resource and support burden associated with logon.

Existing solutions to these problems are limited and piecemeal. For instance some sign on approaches that consolidate multiple logons exist. In addition there are drivers namely pure JAVA type 4 Java Database Connectivity JDBC drivers that provide platform independent database access without native dependencies. Although this functionality has long been desired in the art no unified solution for providing platform independent database access through single sign on has been provided to date. Suggestions to implement this functionality have similarly fallen short contemplating only single sign on access between applications on the same platform and or the same operating environment. Thus even assuming that these suggestions could be implemented a user would have to use different drivers to accomplish single sign on from different platforms or environments to a database server.

Thus what is needed is a way to import the advantages of single sign on to a way to access to a database from different platforms and operating environments.

The present invention overcomes the limitations of the prior art by providing methods and systems for enabling access to database systems using a single sign on. In an embodiment prior to database sign on a login credential is created responsive to input provided by a user during authentication of a user. This login credential is obtained and used to create a security context. The security context is used to establish a secure connection to the database for communication between a client application and the database. This provides automatic access to the database from the client application based on the prior authentication of a user.

In another embodiment several elements comprise a system for authenticating a client application to a database based on prior authentication of a client user using a security mechanism. The system includes an authentication module for performing authentication of an instance of the user to the security mechanism and client and server security services modules for creating a secure connection for communications between the database and client application consistent with the security mechanism. The system also includes a driver for opening a wire protocol connection to the database from the application and for communicating requests from the client application to the database using the secure connection created by the security services module.

Also provided is a method of supplying access to a database from a client application based on prior authentication of a user. A connection object is created for connecting to the database. This connection object is used to create a secure connection based on a user credential generated during the prior authentication of the user. The secure connection is initialized and communications with the database take place over the initialized secure connection. The client application operates in a client environment and the database operates in a database environment and two environments are of different types.

The application server and database server each comprises a machine such as a handheld or other portable device workstation network appliance terminal computing system dedicated server or other device for hosting application and database respectively and for facilitating access by application to database . In an embodiment one or more servers and are formed from a computer and include at least one processor coupled to a bus. Coupled to the bus are a memory storage device keyboard graphics adapter pointing device and network adapter. The servers and may be configured with relation to each other in any number of ways for example they may represent the same workstation or device be geographically dispersed belong to the same or different enterprises and or be linked over a private or public network. As described below one or both of the servers and may contain one or more modules for carrying out various aspects of sign on. As used herein the term module can refer to program logic for providing the specified functionality that can be implemented in hardware firmware and or software. Database server and application server may run on the same or different operating platforms and within the same or different operating environments.

Application on application server represents a database application program that during the normal course of operation accesses database . Although only a single database is shown in for ease of understanding and description those skilled in the art will recognize that the application may access a plurality of databases. Preferably however application is a Java application and comprises an applet servlet or program coded in Java that only requires the resources of the Java Run time Environment for operation and uses a JDBC driver to access a database. Multi platform single sign on database driver is a driver compatible with various operating systems that represents a set of programming interfaces for accessing database from application . Driver includes library routines to manipulate update and otherwise interface with database and various operating environments. In an embodiment driver comprises a JDBC driver and can connect application to a database that supports Structured Query Language on another or the same operation platform and or operating environment. However in another embodiment driver could comprise a .NET or other driver adapted to work with the operating system or run time environment . Although only a single application is shown in for ease of understanding and description those skilled in the art will recognize there may be a plurality of applications each having a driver .

Database is accessed by application through multi platform single sign on database driver described in more detail below . Database may take various forms such as a relational object object relational and or lightweight data access protocol database. It may comprise an Oracle DB2 Sybase Informix SQL server or any other database flat files or other form of tabular data. Database may be an enterprise secure or other database may contain any kind of data for any variety of applications and may store different types of data in different portions of the database. Preferably database includes a database management system DBMS to process and respond to queries from client machines such as application server .

Driver accesses database through signal line . As used herein and throughout this application the term signal line includes any connection or combination of connections supported by a digital analog satellite wireless firewire IEEE 1394 802.11 RF local and or wide area network Ethernet 9 pin connector parallel port USB serial or small computer system interface SCSI TCP IP HTTP email web server or other communications device router or protocol. Although in signal line is shown as facilitating bi directional communication in other cases signal line may include a connection supporting unidirectional communication. Commands and responses between driver and database through signal line are transmitted in accordance with a protocol governing data wire communication. In an embodiment a Distributed Relational Database Architecture DRDA wire protocol is used to support communication to a DB2 database server . In another embodiment a Tabular Data Stream TDS wire protocol is used to transmit data between application server and a SQL database server using a Transmission Control Protocol Internet Protocol TCP IP socket.

Client operating system hosts client security mechanism from which driver obtains security credentials in order to carry out a single sign on. Operating system can represent a Mac Windows Unix Linux IBM OS 390 z OS iSeries AS 400 mainframe or other platform for use on a computer workstation or device. Operating system of includes security mechanism for authenticating the user to the application server or operating system . This authentication which takes place prior to the database sign on supplies security credentials to be used to create secure connection . In another embodiment however client security mechanism is for authenticating user to a secure access network such as an intranet or virtual private network or to a network domain or other virtual location. Client security mechanism may comprise security calls that conform to an industry standard such as Kerberos including Kerberos Version 5 GSS API Mechanism Simple Public Key mechanisms SmartCard or biometric standard for example for use on a Windows XP platform. In the embodiment of the invention shown in client security mechanism is responsible for supplying the authentication that takes place prior to database sign on and also for facilitating out database sign on however in other embodiments different security mechanisms for carrying out each of these steps may be used. Client security mechanism interfaces with server security mechanism according to a common underlying security mechanism. In the case of an implementation relying on the Kerberos security mechanism client and server security mechanisms communicate with the Kerberos Key Distribution Center KDC through signal line not shown in order to carry out token verification and associated authentication actions.

Authentication data used by security mechanisms may take the form of a username password cryptographic or biologic data e.g. fingerprint or retinal scan and or other authentication information associated with and typically unique to a single user. The authentication data could be static or dynamic for instance changed according to an authenticator such as that used in a SecurIDO system offered by RSA Security Inc. of Bradford Mass. The security mechanisms of may specify a domain within operating system or may enable machine level or network level logon. Furthermore security mechanism may comprise the use of one or more of the aforementioned or other authentication methods used in combination with each other.

In an embodiment prior to attempting to access database through application a user will sign on to client operating system network or other domain using client security mechanism . As a result of completing this sign on the user s security credentials are stored in a credentials cache not shown in accordance with security mechanism . These credentials are later used by authentication module and client security services module calls to provide a secure connection between database and driver . Run time environment represents a set of resources required for the operation of application and also includes authentication module and client security services module . Run time environment may include core classes supporting libraries various application protocol interfaces APIs and or plug ins depending on the needs of application . In an embodiment run time environment represents the Java Run time Environment JRE and includes Java Virtual Machine JVM to support a Java application . In another embodiment run time environment is a .NET framework and includes .NET resources for supporting .NET compatible XML based applications processes and or websites. In another embodiment run time environment comprises common language run time CLR and class libraries for operation with slim .NET applications. As described later database environment may differ from client run time environment for instance when a Java application using a Java run time environment accesses a Microsoft SQL Server database operating in a Microsoft environment .

In the embodiment of the invention shown in run time environment includes authentication module and client security services module . In an embodiment an instance of a user is authenticated based on authentication module to the realm of the security mechanism in order to obtain an authenticated subject that includes the user s security credentials. The authentication module may comprise portions of a variety of authenticating modules including or within the Java Naming and Directory Interface JNDI UNIX Operating Environment Windows NT Kerberos or Keystore. In an embodiment the authentication module includes industry standard Java Authentication and Authorization Service JAAS calls to authenticate the user to the client security mechanism

Client and server security services modules follow a common protocol and comprise generic interfaces to security services module provided by security mechanism . Under this protocol client and security services modules create a secure connection between application and database . In an embodiment security services modules comprise code for carrying out security services in accordance with an industry security services standard the Generic Security Service Application Programming Interface GSS API . This affords greater flexibility in implementation as GSS API is adapted to work with a variety of security mechanisms including Kerberos and the other security mechanisms described. Other existing or emerging protocols for security services module however may also be used.

In an exemplary embodiment of the invention driver is a pure Java JDBC driver and does not rely on native operating system methods. User attempts to access a Microsoft SQL Server database from a Java application . The single sign on functionality is implemented in driver by integrating calls to perform various tasks provided by existing standards including JAAS GSS API and the Kerberos Login Module component of the Java 2 Standard Edition J2SE platform with the Windows authentication Kerberos security mechanism provided by Microsoft SQL Server. In the exemplary embodiment the user is authenticated using JAAS authentication module . Security services modules rely on GSS API calls to locate the SQL Server service pass the user s credentials to the SQL Server service to authenticate the user with SQL Server and retrieve a security token that is populated with both the user s and the SQL Server service s security tickets. Driver passes this security token to the SQL Server instance in its login packet to establish a secure connection to an instance on the SQL Server database . Because driver is a type 4 JDBC driver the same driver may support sign on from multiple applications operating on multiple platforms for instance allowing for single sign on to SQL server from a Unix machine or a Windows machine. In addition the environment of the application may differ from the environment of the database . As known by one of skill in the art a Type 4 driver is a native protocol pure Java driver. This kind of driver converts JDBC calls directly into the network protocol used by DBMSs. This allows a direct call from the client machine to the DBMS server and is particularly well suited for intranet access. In another embodiment database comprises a DB2 database. As DB2 can run on a variety of server operating platforms driver supports access to DB2 database from client operating platforms that are different from the operating platform that hosts the DB2 database. For instance in an embodiment single sign on from the same or different Java applications running on a Linux server or an IBM operating system could be accomplished to a DB2 database shows driver run time environment and operating system coupled to each other through programming interfaces for carrying out commands and calls between the various levels. Although depicts client security services module and authentication module residing in run time environment and client security mechanism hosted in operating system the various elements may be configured differently for instance security mechanism may be located outside of operating system and the authentication module may be called from outside run time environment . In other embodiments of the invention run time environment may not be required and client security services module and authentication module may be supplied by other elements. show various flow charts for carrying out single sign on authentication in accordance with an embodiment of the invention. For the sake of clarity primary reference in the description of these figures is made to the exemplary embodiment of the invention described above. The use of these standard interfaces and protocols such as JAAS and GSS API makes it easier for the single sign on solution described to operate across various platforms. On the client side one or more of these elements may be readily supplied by the Java Developer s Kit version 1.4 or higher. In a preferred environment the TDS database protocol using the TCP IP network protocol is used to access the Microsoft SQL Server database although named pipes and other network protocols may also be possible in certain implementations. References to specific protocols and methods are referred to throughout the following description.

As one of skill in the art will appreciate and as is described the class names that begin with SQLServer TDS or Util are implemented by driver . In addition references to important Java Run time environment methods are fully qualified. As is customary in the art the class names used additionally refer to calls determined by standards and protocols such as the TDS protocol. Although the following and other descriptions in this specification make reference to this particular set of operating systems protocols interfaces and standards it should be understood that such references are meant for illustration only and are not intended to constrain the scope of the invention beyond the scope otherwise conveyed in the claims. At the same time the advantages disclosed in this specification will be associated to varying degrees with the various embodiments described and not every benefit described will be present in every embodiment of the invention disclosed.

Referencing the exemplary embodiment described the process shown in begins when the user is authenticated on the Windows operating system with an active directory environment that includes authentication module of JAAS authentication calls. As described earlier this authentication step is alternatively implemented by a user signing on to a different operating system or completing another logon or authentication process potentially to a secure network or other restricted access domain. During the process of authentication the user provides her credentials in accordance with the operating system security mechanism Kerberos which in turn stores the credentials in credentials cache known as the local security authority LSA in memory resources associated with the operating system . As per the Kerberos protocol the user also has a granting ticket after being logged on. Subsequent to authentication the user launches Java application . The subsequent steps performed to achieve a connection to the database are carried out at the application and driver levels and are not visible to the user as indicated in .

After the user launches the application the application requests access to the database. Driver begins the process of opening a connection to a SQL Server instance of database by creating a wire protocol object to initiate the access process. Driver calls a SQLServerImplConnection.open method to create a connection object. In order to connect to a SQL server instance SQLServerImplConnection.open method then instantiates a TDSConnection object to support the connection at the wire protocol level. In an embodiment where the database comprises a DB2 database equivalent calls in the DRDA protocol would be used to create a connection object. Driver is then ready to create and initialize a security context for supporting secure communications between driver and database instance .

In an embodiment the process of creating a security context discussed in more detail below with reference to comprises several steps. First the driver uses the connection object to create a context. This is accomplished when the SQLServerImplConnection.open method calls TDSConnection.createSecurityContext to have the TDSConnection object construct and save an instance of the UtilSecurityContext class. Next the driver obtains an authenticated instance of the user called an authenticated subject. In accordance with the Kerberos protocol obtaining the authenticated subject requires stepping outside driver via the JAAS to the operating system where the user credentials are stored. Although the use of other security mechanisms may change the location of the user credentials the platform neutrality of Java allows JAAS to be used regardless of the operating system from which the database is accessed. The authenticated subject contains the user s security credentials and allows for a privileged communication to take place between the driver and the authentication module . The authenticated subject is used to create a security context for communication between the driver and database instance .

After the security context has been created it is initialized for communications. The step of initialization is described in detail below with reference to . Subsequent to initialization communications between the client driver and database takes place. During a computing session application uses driver to make requests of database over secure connection and replies are sent from database server back through driver to application . Correspondence between driver and database may be encrypted to further enhance security or may take place in an unencrypted form.

At the end of the session application closes connection to the database. In the exemplary embodiment SQLServerImplConnection.close method is called. The close method in turn disposes or otherwise cleans up the security resources associated with the initialized context by calling UtilSecurityContext.cleanup. UtilSecurityContext.cleanup calls org.ietf.jgss.GSSCredentials.dispose and orgietf.jgss.GSSContext.close to release the resources held by those objects. The cleanup method also calls javax.security.auth.login.LoginContext.logout to clean up the user security credentials obtained by the driver.

If the request is denied for any reason for instance because it does not conform to the authentication protocol being used or the user s credentials cannot be provided the process stops. If Login is successful however the driver obtains an authenticated subject . The LoginContext.getSubject method of the JAAS authentication protocol supplied by authentication module is used to obtain the user s security credentials from the LSA and encapsulate them in authenticated subject . The user s credentials are stored in the UtilSecurityLogin instance. The UtilSecurityContext constructor continues by extracting authenticated subject from the UtilSecurityLogin instance. It uses authenticated subject to obtain security service name and credentials needed to communicate with security mechanism to complete logon to database .

In conformance with GSS API supplied security services module the user s security credentials contained within the authenticated subject are used to create orgietf.jgss.GSSName and orgietf.jgss.GSSCredential objects. Because GSS API is supported in various database protocols including TDS for use with SQL Server or DRDA for use with DB2 access to a variety of types of databases is possible in various embodiments of the invention relying on GSS API. Together authenticated subject security service name org.ietf.jgss.GSSName and security service credential org.ietf.jgss.GSSCredential are used to create a org.ietf.jgss.GSSContext object the security context. The security context later orchestrates the authentication exchange between the client i.e. the driver the security mechanism and the requested database server further described in reference to .

Once the security context has been created the security context is initialized as shown in in accordance with an embodiment of the present invention. Continuing with the example described above after the security context is created control is returned to the driver s SQLServerImplConnection.open method. With the security context driver through SQLServerImplConnection.open method initiates creation of a login request according to database wire protocol in the case of a SQL server database by creating a TDSLoginRequest instance and calling the TDSLoginRequest.submitRequest method but in the case of a DB2 database by relying on DRDA protocols. The TDSLoginRequest.submitRequest method populates the various fields of the login record.

In order to populate the LoginRequest security token field required by the security mechanism Kerberos the submitRequest method requests the client token by using the UtilSecurityContext instance from the TDSConnection to call the UtilSecurityContext.getToken method. The UtilSecurityContext.getToken method in turn calls the org.ietf.jgss.GSSContext.initSecContext to initiate the authentication sequence of security mechanism Kerberos and get the client token to submit to the database server . The token is obtained and returned to the TDSLoginRequest.submitRequest which places the token in the appropriate field of the login request and then sends the login request to the database . Control is returned to the SQLServerImplConnection.open method.

The database server receives the login request and with it receives the client token. In accordance with the Kerberos protocol database server then sends the client token to the server via server security services module . Security mechanism evaluates the token per a server security service request. This process comprises sending the token to the KDC which could be located on a remote server for verification. If the token is not authentic then security services module sends back an error message and the logon attempt has failed. Assuming that the token is authentic there are two possibilities. First server security mechanism may return a message through security services module that the connection has been validated . At that point the database sends a login acknowledgment to the client driver . Client driver receives and processes the login acknowledgement and the security context is initialized enabling communication.

As a second possibility if the token is authentic a server token that requires further validation may be returned to database server through server security services module . Database server then sends the server token back to the driver as part of SQL Server reply. The driver receives the client token as SQLServerImplConnection.open processes the SQLServer reply. The SQLServerImplConnection.open open method then calls the TDSLoginRequest.establishSecurityContext method to process the token by sending it for verification to client security mechanism via client security services module calls and test its authenticity. If the server token is inauthentic an error message is returned. However as before if the server token is authentic client may receive a client token and send it to the server which in turn may receive client token. This process may repeat before the connection is established.

Security services module calls are then used by the driver to request the client token for formulating the driver s login request which is then sent directly to the database . While the database and driver proceed to subsequently exchange one or more tokens directly over the course of initializing the context the process of token validation are carried out through client security services module calls to the client security mechanism and server security services module calls to the server security mechanism . As shown after database sends a client token for validation to the server security mechanism it may either receive a message that the connection has been validated or may receive a server token to return to the driver . Although not shown in as mentioned previously security mechanism may also fail to validate the token thereby ending the logon attempt. Once a database connection has been established 672 however communications can take place between the driver and database . At the end of the session driver releases the credentials and login resources used to establish the security context.

