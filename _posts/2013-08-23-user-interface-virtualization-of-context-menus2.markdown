---

title: User interface virtualization of context menus
abstract: User interface virtualization describes a technique for providing a user with access to one computing device from another computing device, while translating the ergonomics of one computer's user interface style into the ergonomics of the other's. An agent running on a remote desktop may use an interface interaction API or software framework to programmatically open and manipulate a context menu on the remote desktop, and act as a proxy for a corresponding client running on a client device that accepts a “touch and swipe” style input. The client constructs and displays a native graphical user interface element at the client device that is a virtual representation of the context menu at the remote desktop.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542080&OS=09542080&RS=09542080
owner: VMware, Inc.
number: 09542080
owner_city: Palo Alto
owner_country: US
publication_date: 20130823
---
This application is a continuation in part of co pending U.S. patent application Ser. No. 13 658 291 filed Oct. 23 2012 and entitled User Interface Virtualization Techniques which claims the benefit of U.S. provisional patent application Ser. No. 61 638 469 filed Apr. 25 2012. Each of the aforementioned related patent applications is herein incorporated by reference.

This application is related to U.S. patent application Ser. No. 13 646 993 filed Oct. 8 2012 and entitled User Interface Virtualization for Mobile Devices the entire contents of which are incorporated by reference herein. This application is also related to U.S. patent application Ser. No. 13 778 495 filed Feb. 27 2013 and entitled User Interface Virtualization Profiles for Accessing Applications on Remote Devices the entire contents of which are incorporated by reference herein.

Server based computing allows a networked client device remotely situated with respect to a server computing system to access computing resources on the server. For example the client device may run desktop remoting client software and hardware that uses a remote desktop protocol such as Remote Desktop Protocol RDP Virtual Network Computing VNC or Personal Computer over Internet Protocol PCoIP to access a desktop remotely. The desktop remoting client software displays an image of a graphical user interface generated by the operating system and applications running at the server computing system e.g. in a virtual machine. The term desktop can refer to a virtual machine or physical system accessed by an end user as a local to the user desktop or workstation computer. The term desktop may also refer to the human interface environment through which users can launch interact with and manage applications settings and data. The remote desktop is accessible by the user using the remote desktop protocol and a desktop remoting client. The client device typically has a local set of input and output devices e.g. display keyboard mouse and transmits user input such as keyboard or mouse input to the remote system to be processed there and receives display and other data e.g. sound for presentation to the user using the local set of I O devices.

However users of client devices with touch screens face several challenges when interfacing with traditional desktop based applications e.g. Microsoft Windows applications and desktops through a remote display protocol. One challenge relates to latency of the network connection between the touch screen device and the remote desktop which often creates a halting or jittery user experience. Another challenge relates to attempts to remotely control a conventional point and click driven interface e.g. Windows interface from a touch screen device which is designed not for traditional point and click interactions but rather for touch screen gestures and finger swipe style of interactions.

To address these challenges it is known in the art to modify a remote desktop controlled by touch screen devices for example by automatically adjusting a font size of the remote desktop. However these largely cosmetic changes only modify the displayed contents received from the remote server do not fail to reduce latency in menu navigation and user feedback and still require users to navigate desktop applications through a point and click style interface.

It is also known in the art as described in Remote Desktop Protocol Graphics Device Interface Acceleration Extensions made available by Microsoft Inc. for a remote server to use its own video driver to render display output and encoding drawing operations that produce an image instead of encoding the actual image. For example instead of sending a bitmap image of a filled rectangle from server to client an order to render a rectangle at coordinate X Y with given width height and fill color may be sent to the client. The client then executes the drawing order to produce the intended graphics result. However this approach only produces a same corresponding graphical interface on the client as on the server which are difficult to use on a client device having a touch screen or non pointer based style of interface.

Alternatively it is also known in the art as described in United States Patent Publication No. 2011 0314093 A1 to translate user gestures on a client device into a digital representation of a remote computer s native input format such as a control common to a two button mouse e.g. click window scroll right click thereby allowing the client device to control the computer. However this approach forces a user to learn a new user interface and memorize which touch screen gestures is equivalent to a mouse input which can be cumbersome and hard to use. Further this approach still requires capturing and displaying basic screen data from the remote desktop and does not improve latency in interactions between the user and the user interface.

Consequently there is a need for improved systems and methods for providing access to a remote desktop having one style of user interface to a client device having a different style of user interface.

One or more embodiments of the present disclosure provide a method of generating a local graphical user interface GUI on a touch screen of a client device that is connected to a server device having a remote desktop. The method includes receiving from the server device user interface UI metadata that specifies content of a context menu in the remote desktop and a base image comprising a graphical representation of the remote desktop. The method further includes generating at the client device a native context menu GUI element based on received UI metadata. The native context menu GUI element includes a virtual representation corresponding to the context menu of the remote desktop. The method further includes generating a local GUI to be displayed on the touch screen of the client device. The local GUI includes the base image received from the server device and the native context menu GUI element. The method includes responsive to detecting that the native context menu GUI element has been manipulated through a touch input transmitting to the server device an input event indicating a manipulation of the corresponding context menu in the remote desktop.

Another embodiment of the present disclosure provides a method of providing access to a remote desktop of a server device having a guest operating system executing therein. The method includes generating user interface UI metadata specifying a context menu in a graphical user interface GUI of a remote desktop using an application programming interface of the guest operating system configured to programmatically manipulate the GUI of the server device. The method further includes transmitting a base image of the GUI and the generated UI metadata to a touch input client device connected to the server device and receiving from the touch input client device an input event indicating menu navigation of the context menu in the GUI of the remote desktop. The method includes programmatically manipulating the context menu in the GUI of the remote desktop according to the received input event using the application programming interface of the guest operating system.

Further embodiments of the present disclosure include a non transitory computer readable storage medium that includes instructions that enable a processing unit to implement one or more of the methods set forth above or the functions of the computer system set forth above.

Embodiments of the disclosure provide a technique and system for user interactions on a client system with one user interface scheme e.g. touch screen to remotely operate a server system with another user interface scheme e.g. point and click desktop . In one embodiment a virtual desktop infrastructure VDI uses an application programming interface API configured to programmatically manipulate and activate graphical user interface GUI elements of the server side desktop to bridge the difference in user interface schemes between the touch screen client system e.g. tablet computer smart phone and server side desktop.

For example application frameworks and Application Programming Interfaces APIs such as Microsoft Active Accessibility MSAA API and Microsoft UI Automation UTA API may derive contents of UI elements such as menu navigation at the server side desktop which are then passed to the remote client system e.g. tablet computer over a network connection e.g. via desktop remoting protocols . The menu contents are rendered as a native GUI element and engaged on the remote client directly. A user of the remote client can select menu options launch applications and documents and perform other common point and click activities directly on the tablet using a local touch friendly rendition of these menus. In another example APIs configured to manage file and filesystems at the server side desktop e.g. File Explorer APIs may be used to facilitate export of document folders for direct document launches and other file functions on the client device. In yet another example APIs configured to manage process and threads at the server side desktop e.g. Application Process API s allow remote launch and termination of applications using icons on the client device. By shifting key user interface activities such as menu operation document operations and application launches from the remote desktop running at the server to the client embodiments of the disclosure dramatically improve user experience of traditional point and click applications used on touch screen devices and augment the traditional remote display protocol driven user experience.

In the following description numerous specific details are set forth in order to provide a thorough understanding of exemplary embodiments of the present disclosure. However it will be apparent to one skilled in the art that the present disclosure may be practiced without some of these specific details. In other instances well known process operations and implementation details have not been described in detail in order to avoid unnecessarily obscuring novel aspects of the disclosure.

VDI system may include a domain controller such as Microsoft Active Directory that manages user accounts including user log in information and a connection broker that manages connections between VDI clients and desktops running in virtual machines or other platforms. Domain controller and connection broker may run on separate servers or in separate virtual machines running on the same server or different servers. In the embodiments of the present disclosure illustrated herein desktops are running in virtual machines are instantiated on a plurality of physical computers each of which includes virtualization software and hardware . Physical computers may be controlled by a virtual machine management server and be coupled to a shared persistent storage system .

All of the components of VDI system communicate via network . For simplicity a single network is shown but it should be recognized that in actual implementations the components of VDI system may be connected over the same network or different networks. Furthermore a particular configuration of the virtualized desktop infrastructure is described above and illustrated in but it should be recognized that one or more embodiments of the present disclosure may be practiced with other configurations of the virtualized desktop infrastructure.

As shown in a call out in desktop may include an application having a traditional point and click style user interface that relies on input from a pointer e.g. mouse cursor to manipulate or interact with UI elements of application . The difference in styles of user interface between client device and desktop may worsen user experience and turn routine user tasks into frustrating exercises. This problem is especially clear from . Here the graphical user interface of remote desktop may have widgets and elements that expect manipulation and interaction with a smaller more precise pointer e.g. mouse cursor and as such may have a small size that is difficult to target with a touch input illustrated as circle .

According to an embodiment VDI client includes a user interface virtualization UIV client configured to communicate with a corresponding UIV agent running on VM to translate between the point and click style user interface of the user desktop on VM and the touch and gesture user interface of client device . In one embodiment UIV client and UIV agent exchange messaging in the form of UI input events and UI metadata which are translated into remote desktop input and native GUI elements respectively at the appropriate endpoints.

In one embodiment UIV agent executing on VM is configured to invoke an interface interaction API to obtain metadata related to user interface UI widgets and elements seen on the desktop of VM . In one embodiment interface interaction API may be an API exposed by guest OS to obtain metadata related to user interface UI widgets and elements seen on the desktop of VM . For example interface interaction API may be an API traditionally used by assistive technologies e.g. screen readers to make an application running on a guest OS or the guest OS itself more accessible to persons with vision hearing or motion impairments for example such as Microsoft Accessibility API or automate software testing such as Microsoft UI Automation API. Interface interaction API is further configured to expose functionality of UI elements by enabling programmatic access e.g. for UIV agent to identify manipulate and interact with UI elements of guest OS and applications running on guest OS .

In one embodiment interface interaction API may include a software framework configured to build an application such as the .NET framework available from Microsoft Corporation or Java Runtime Environments. It should be recognized that interface interaction API may be a logical API inclusive of both OS and application framework APIs configured for the programmatic control of application behavior and is not restricted to a single literal API provided by the OS or application. UIV agent may have the ability to perform performing GPS style recalculation within such application frameworks to determine efficient ways to activate any application function from any other point in an application s interface. Such recalculation functionality may be useful to insure injection of user input even when something goes wrong and an application s state is not what VDI client expects at the point where a proxied action is sent to desktop side UIV agent . In one embodiment UIV agent is configured to intercept rendering of UI elements in order to govern actual display of application menus and other objects to determine state of an application and its application objects and to perform simulated user actions on the UI elements. For example a user s mouse click to open a context menu in an application may be intercepted by UIV agent using OS level rendering function interception techniques and the resulting menu contents displayed instead on client device using UIV client s local rendering. The application s native menu rendering running inside VM is spoofed such that context menu contents are not actually displayed inside guest OS . Such application spoofing avoids unnecessary remote display traffic and aids in de cluttering the resulting display on client device .

VDI host agent is configured to exchange VDI data to VDI client including transmitting display data and receiving traditional mouse and keyboard input data according to conventional remote desktop techniques. VDI data may include a base GUI image that is used to display the GUI of remote desktop at client device . In some embodiments base GUI image may be a graphical bitmap or framebuffer illustrating a portion of or an entirety of the display at desktop similar to a screenshot of the remote desktop. In other embodiments base GUI image may be graphical information for drawings lines polygons and other shapes fonts and graphical primitives to render an image that displays the GUI of desktop at client device .

In addition to VDI data transmitted between VDI client and VDI host agent UIV agent executing on VM is configured to transmit UI metadata to UIV client on client device . UI metadata includes information provided by interface interaction API and other interception techniques controlled by UIV agent that are descriptive of one or more UI elements of the user desktop on VM . Examples of UI elements that may be specified by UI metadata include windows buttons menus dialog or message boxes lists menu bars scroll bars title bars status bars size grips toolbars tree view controls list view controls dropdown lists and input carets. In contrast to previous approaches which used graphical primitives or drawing operations for rendering at a VDI client UI metadata includes semantic information related to contents and application state of one or more UI elements of the user desktop. For example rather than merely providing graphical primitives for drawing a rectangle menu UI metadata provides semantic information representing the contents of the menu such as the selectable options in the menu. Based on UI metadata VDI client may independently render GUI elements that display behave and are interacted with differently than corresponding UI elements on the user desktop on VM . As such UI metadata enables UIV clients within VDI client to generate render and display native GUI elements i.e. native to client device in which VDI client is executed that are most appropriate for the interface style and form factor of client device e.g. touch screen . In one embodiment information in the UI metadata may be organized into a hierarchical or tree like data structure having root elements and child elements corresponding to UI elements of a user desktop as shown in greater detail in .

In one embodiment interface interaction API allows application to expose a tree structure of UI metadata that represents the structure of graphical user interface . Elements in the tree expose properties and methods that facilitate programmatic manipulation of the GUI on desktop . In one embodiment UI metadata may include for each UI element specified a label for a UI element that is predetermined e.g. assigned in code by a developer of application and guest OS role information describing the type of UI element e.g. ROLE SYSTEM PUSHBUTTON properties that describe a UI element s state at a given moment in time e.g. invisible unavailable focused focusable pressed etc and other values contained in a UI element e.g. percentages integers non integers textual visual that may indicate information represented by the UI element. For example UI metadata may include information for window that includes an identifier e.g. id 982 a state property indicating a window is in focus within the remote desktop and information for UI elements contained within window e.g. title bar and menu bar . In another example metadata for menu includes information for a plurality of menu items within menu such as items for New Open Save etc. In some embodiments UI metadata may include graphical data such as thumbnails or icons associated with UI elements on desktop .

Referring back to UIV client is configured to construct and display a native UI element or widget having the same functionality and information as a corresponding UI element or widget on the remote desktop based on UI metadata received from UIV agent . In one embodiment UIV client may generate a native touch and gesture style GUI element that corresponds to point and click style UI element based on UI metadata provided by interface interaction API . In some embodiments native GUI elements generated by UIV client may be different than corresponding UI elements of desktop such as having differences in size shape color style manner of interaction animation and interactive behavior. For example UIV client may use UI metadata derived from a conventional drop down list on remote desktop to generate a native GUI element that appears like a large wheel that spins in response to swipe gestures. In another example UIV client may present a reformatted version of a navigation menu optimized for the form factor and touch screen ergonomics of client device . As shown a native GUI element may be overlaid on top of base GUI image represented in VDI data to form a client GUI . In one embodiment UIV client is configured to use native graphical frameworks or user interface frameworks that are local to client device to render one or more native GUI elements based on the received UI metadata .

UIV client is further configured to capture user input on the constructed native GUI element and transmit UI input events to UIV agent running in VM . In one embodiment UIV client is configured to generate UI input events based on touch input that represents interactions with the native GUI element . In one embodiment UI input events include information indicating that the corresponding GUI elements at the remote desktop on VM have been manipulated at the client device . In some embodiments UI input events may indicate a selection of activation of change of state in or interaction with a corresponding UI element or option at remote desktop . In other embodiments UI input events may indicate execution or invocation of an operation or option corresponding to a UI element at remote desktop . According to UI input events received from UIV client UIV agent is configured to query and invoke the corresponding UI elements of application or guest OS using interface interaction API to simulate input and facilitate programmatic manipulation of the user interface of the remote desktop on VM .

At step VDI client detects a UIV trigger performed by a user operating client device . In one embodiment the UIV trigger may be a pre determined gesture e.g. a unique swipe gesture performed by the user or a UI button activated by the user that indicates VDI client should render one or more UI elements of an active application running on the remote desktop e.g. application using native GUI elements. At step responsive to detecting a UIV trigger VDI client requests UI metadata from VDI host agent which receives the request at step .

At step in response to receiving a request for UI metadata VDI host agent makes an API call to interface interaction API of guest OS to obtain UI metadata e.g. UI metadata for application . For example VDI host agent may obtain a hierarchical menu structure having a list of menus sub menus and menu items of an in focus application. In one embodiment rather than return metadata for every UI element on the remote desktop UIV agent may identify a subset of UI elements of the user desktop and generate UI metadata only for the subset of UI elements. For example UIV agent may only generate UI metadata for the application that currently has focus. In another embodiment UIV agent may generate UI metadata for one or more UI elements on the remote desktop based on the received request for UI metadata. For example UIV agent may generate UI metadata for the hierarchical menu bar based on a request from VDI client that indicates only menu metadata are requested. In some embodiments VDI host agent may proactively request UI metadata from guest OS in response to detected changes in the active application or the underlying guest OS e.g. via events received via a Windows Event callback function .

At step VDI host agent generates a base image for the GUI e.g. according to a VDI protocol established between VDI client and VDI host agent and transmits the base image for the GUI along with the contents of the hierarchical menu structure to VDI client at step . As described above the base image e.g. base GUI image provides graphical information for displaying an image of the remote desktop at the client device. In one example the base image may be raw pixel data similar to a screenshot of the entire desktop to be displayed at the client device. In another example the base image may be an updated set of pixel data to changing at least a portion of earlier transmitted raw pixel data. In some embodiments the base image may be drawing operations and graphical primitives for drawing the display of the remote desktop within a client GUI of the client device.

In one embodiment the UIV client and UIV agent may use a messaging bus or message passing service to transmit and receive UI input events and UI metadata across network . In another embodiment VDI host agent may incorporate UI metadata within VDI data passed through a remote display channel e.g. PCoIP HTML5 to VDI client . Similarly VDI client may incorporate UI input events within VDI data transmitted to VDI host agent .

At step VDI client receives the base image for the GUI along with the contents of the hierarchical menu structure. At step VDI client renders the GUI based on the received base image and contents of the hierarchical menu structure and at step displays the GUI. The displayed GUI includes the base image received from VDI host agent and native GUI elements i.e. native to client device in which VDI client is executed that VDI client generated based on the contents of the menu structure. In some embodiments the native GUI elements are included in the displayed GUI as UI elements overlaid on top of the base image received from VDI host agent . In some embodiments the native GUI elements are included in the displayed GUI as a semi transparent layer incorporated into the base image received from VDI host agent . In one embodiment VDI client generates native GUI elements configured to be touch friendly. For example VDI client generates native GUI elements having a size and shape that more readily facilities activation by a touch object e.g. human finger or stylus as compared to a GUI element configured for activation by a pointer or mouse cursor. In another example VDI client generates native GUI elements responsive to touch based input and gestures including taps swipes multi point gestures etc. As such the user experiences an improved user interface because VDI client enables the user to interact with native GUI elements that are rendered in a touch friendly manner yet correspond to UI elements from the remote desktop. Furthermore embodiments of the present disclosure may use native graphical frameworks or user interface frameworks that are local to client device thereby offloading work and relying on the graphical capabilities of client device .

At step VDI client detects an input e.g. a touch screen input made by the user through the GUI onto the native GUI elements. In response to detecting an input VDI client processes the input at step . In the example of the hierarchical menu structure the input may of a type that causes menu items of a lower level to be displayed or may be a final selection. If it is the former the flow returns to step where the GUI is generated for display again. If the input is a final selection from the menu information e.g. UI input events indicating that a certain menu item has been selected is transmitted to the VDI host agent at step .

At step the VDI host agent receives the information indicating that the certain menu item has been selected. At step the VDI host agent makes an API call e.g. to interface interaction API to the guest OS to communicate that the certain menu item has been selected. The flow then returns to step where the base image for GUI may be regenerated.

In some embodiments the VDI host agent programmatically manipulates the user interface of the guest OS using an identifier that specifies an object within an object model of guest OS . In contrast to previous approach which simply invoked the server s keyboard and mouse driver to simulate keyboard and mouse events UIV agent uses interface interaction API to directly manipulate UI elements of desktop according to the UI input events received from the VDI client. In some embodiments UIV agent passes the received UI input events directly to interface interaction API in cases where UIV client transmits UI input events that are already configured for use by interface interaction API . In other embodiments UIV agent translates received UI input events into events or parameters for interface interaction API to indicate application state or property values of one or more UI elements have been changed. By way of example UIV agent may use interface interaction API to indicate for a given UI element element activation element selection spatial navigation logical navigation alerts focus changes and other property value changes.

According to one embodiment VDI client improves latency and responsiveness for UI elements that require multiple user interactions such as scrolling through items in a drop down list or navigating menus and sub menus. In one example use case menu navigation on a desktop may involve pointing and clicking on a Edit menu button causing a drop down menu to appear pointing and clicking on a menu item which may cause additional menus to appear e.g. Paste Special . . . etc. . To perform this use case under previous approaches to remote desktops a VDI client might have to receive an image of a GUI for the window and menu bar over the remote network and render the appearance of the window menu bar which might include frames of GUI animation transmit click input receive an image of a GUI for the window menu bar and now Edit menu over the remote network and render the appearance of the window menu bar and now Edit menu transmit click input possibly for one of the menu items and so forth. In contrast embodiments of the disclosure enable VDI client to construct and modify native GUI elements using UI metadata without having to make repeated network requests which increase latency and create a laggy user experience. In fact embodiments of the disclosure provide a means of accessing menu navigation metadata within an application even before a user selects a menu option. Interface related operations that use graphical feedback like drag and drop box resizing and key animations are performed locally on the client device for example as a remote session overlay and then executed within the remote session.

While embodiments of the present disclosure describe a remote desktop system that generates native GUI elements of a touch based gesture driven interface configured for a touch screen on a client device various embodiments of the client device described herein may include alternative non touch based input devices such as a microphone accelerometer gyroscopic sensor near field communications sensor etc. that may be configured to control a remote desktop according to techniques described herein.

Additionally embodiments of the present disclosure may apply techniques for user interface virtualization to tasks and user interactions beyond the menu navigation example described above. As described in greater detail below navigation of file dialogs that open save move and re name files may be shifted to a UIV client running on a client device according to techniques for user interface virtualization. In another embodiment a clipboard that temporarily stores data via cut copy and paste operations may be shifted to a UIV client running on a client device according to techniques for user interface virtualization described herein. In another embodiment operations of a desktop start menu or similar launching point may be shifted to a UIV client running on a client device according to techniques for user interface virtualization described herein. In another embodiment a task switcher for switching between active programs may be shifted to a UIV client running on a client device according to techniques for user interface virtualization described herein. In another embodiment a context menu in a graphical user interface may be shifted to a UIV client running on a client device according to techniques for user interface virtualization described herein.

In the embodiment of an application running on VM may be configured in a document centric paradigm that requires interaction with a UI element referred to as a file dialog to navigate a filesystem or listing of files. File dialog sometimes referred to as a file selector file chooser file requester or open save dialog box is configured to allow a user to select a file from the filesystem of guest OS and may perform other file related tasks such as opening saving moving and renaming documents or files stored for application . As shown file dialog may have a traditional point and click style user interface that relies on input from a pointer e.g. mouse cursor and may be difficult to navigate from a touch screen of client device . For example file dialog may have a graphical listing of files having an icon and filename text that are difficult to individually select using touch input.

According to an embodiment UIV client is configured to communicate with UIV agent running on VM to translate a point and click style file navigation UI element into a native touch and gesture style file navigation UI element at client device . In one embodiment UIV agent running on VM is configured to detect when application has invoked a file dialog that prompts the user to select a file. Upon detecting such an event UIV agent invokes a file explorer API to obtain file content metadata that specifies information related to files on VM . In one embodiment file explorer API is an API exposed by guest OS that enables access to metadata related to one or more files in the filesystem of guest OS . In one embodiment file content metadata is organized into a hierarchical or tree like data structure having root elements and child elements corresponding to directories and files respectively of the filesystem. File content metadata may include a listing of file objects having file names file types last date modified file size and other information relating to a corresponding file. File content metadata may further include graphical information such as a file icon associated with a file type or a particular file and a thumbnail image representing the contents of a file.

In one embodiment UIV agent obtains file content metadata for one or more files based on UI metadata corresponding to file dialog invoked by application . For example in some cases a file dialog invoked by application may initially display a listing of files e.g. files from a default file location such as a home directory or last used directory. As such UIV agent may use interface interaction API to determine a filesystem location e.g. directory path shown initially by file dialog and then obtain file content metadata via file explorer API for files located at that filesystem location. In another example file dialog invoked by application may have a filter applied to a listing of files displayed such as a filter based on filename e.g. log . or a filter based on file type e.g. .pdf GIF files only . As such UIV agent may use interface interaction API to determine one or more filters applied to file dialog and then obtain file content metadata via file explorer API for files that satisfy the determined filters.

In another embodiment UIV agent obtains file content metadata for one or more files based on usage data received from UIV client . For example UIV agent may obtain file content metadata for files found in a last known filesystem directory navigated to by a native file navigation GUI element described later for files at a filesystem location of a last selected file or for files at commonly selected or commonly navigated directories or filesystem locations.

Based on file content metadata received from UIV agent UIV client executing at client device is configured to construct and display a native file navigation GUI element or other native GUI element having a similar functionality and information as the corresponding file dialog . In the embodiment shown in native file navigation GUI element includes one or more buttons and a scrollable listing of files having a size shape color style manner of interaction animation and interactive behavior configured to be native to client device . For example buttons e.g. Open Cancel may be sized larger than corresponding buttons of file dialog enabling a more comfortable user experience. In another example rather than using point and click style UI elements of file dialog to navigate a filesystem scrollable listing of files may be navigated using touch input such as a up down swipe gesture to scroll through a listing of files a right left swipe gesture to navigate up one directory level or a two finger left right swipe gesture to go back or forward to a previously navigated filesystem location. In the embodiment shown native file navigation GUI element is rendered on top of or overlaid on a base image that is a graphical representative of the remote GUI on VM .

UIV client receives any touch and gesture input illustrated as touch input on native file navigation GUI element and transmits an appropriate file selection input event back to UIV agent . In one embodiment file selection input event is an indication specifying a file selected by native file navigation GUI element such as a file path or other information identifying a selected file.

UIV agent is configured to receive file selection input event and modify file dialog based on the received file selection. In one embodiment UIV agent invokes interface interaction API to inject a filepath specified by file selection input event into an appropriate field of file dialog . UIV agent may further use interface interaction API to manipulate a button that activates the file selection e.g. Open or Select button and closes out file dialog . As such embodiments of the present disclosure enable UIV agent and UIV client to seamlessly proxy navigation and selection of file objects from a remote desktop to a client GUI .

In an alternative embodiment of VDI system upon detecting an application has invoked a file dialog UIV agent is configured to intercept and spoof the system calls to open a file dialog such that a file dialog is not actually rendered on remote Desktop . Instead file navigation is shifted entirely to a native file navigation GUI element rendered and displayed entirely on client device . This alternative embodiment is illustrated on client GUI shown in a callout of . As shown a base image e.g. received via VDI data is displayed underneath native file navigation GUI element and does not include a graphical representation of file dialog .

In the embodiment of guest OS and application running on guest OS e.g. application are configured to support use of a clipboard that can be used for short term data storage and data transfer between documents and applications via cut copy and paste operations. However content to be cut or copied to clipboard has to be first selected usually by manipulating a text caret e.g. via clicking and dragging a pointer or via SHIFT key and directional arrow keys . As such it may be difficult for users to manipulate text and other content when using the clipboard at remote desktop through touch input at client device . Further network latency between a remote desktop and an accessing client may introduce user interface jitter or choppiness thereby making it difficult to perform text selection at a high level of precision for example on the level of an individual text character.

According to an embodiment UIV client is configured to communicate with UIV agent running on VM to enable a user to manipulate content for clipboard functionality of the remote desktop using a native touch and gesture clipboard GUI element rendered at client device . In addition to VDI data transmitted between VDI client and VDI host agent UIV agent and UIV client exchange clipboard metadata and clipboard input event described below to manipulate a clipboard at remote desktop using a native GUI element constructed at client device .

In one embodiment VDI client is configured to detect a UIV trigger performed by a user operating client device . The UIV trigger may be a pre determined gesture performed by the user e.g. holding down one finger or an on screen button activated by the user. In response to detecting the UIV trigger UIV client transmits to UIV agent a clipboard input event indicating a UIV clipboard feature has been activated and requesting for clipboard metadata .

In response to a request for clipboard metadata UIV agent makes an API call exposed by guest OS to obtain clipboard metadata . In one embodiment UIV agent retrieves text or other content from an open and active application seen on remote desktop . For example UIV agent may use interface interaction API to retrieve any text or other content that is visible through the viewport element of an application that has focus on remote desktop . In one embodiment UIV agent further obtains clipboard metadata that includes current contents of a clipboard at guest OS e.g. via interface interaction API or other API exposed by guest OS . UIV agent transmits the generated clipboard metadata to UIV client on client device .

UIV client is configured to construct and display a native clipboard GUI element based on the received clipboard metadata which provides a mechanism for selecting a region of text and other content using touch input. In the embodiment shown in native clipboard GUI element renders text and other content provided by clipboard metadata in a manner suitable for viewing on client device . For example native clipboard GUI element may display text with an increased font size for each of viewing and to enable a user to target a specific text character with touch input. As shown native clipboard GUI element may be displayed on top of or overlaid on a base image that is a graphical representative of remote desktop on VM .

In one embodiment native clipboard GUI element is configured to receive one or more touch inputs to manipulate a selection region that designates some portion of text as selected. As shown selection region may be defined by a position of one or more handles illustrated as a beginning handle and a closing handle disposed at ends of the selection region. A user may select a portion of text by modifying the position of handles and thereby enlarging or shrinking the size and altering the shape of selection region . In one embodiment handles are sized to a diameter suitable for a user to target each handle with touch input e.g. a finger . Accordingly by providing a local text selector mechanism UIV client removes network latency driven jitter commonly experienced during clipboard operations in traditional VDI environments. In an alternative embodiment not shown native clipboard GUI element includes a native text cursor or caret similar to remote text caret that may be re positioned within text based on touch input to define a position for example for inserting new text or pasting new content.

UIV client is further configured to capture user input on native clipboard GUI element and transmit one or more clipboard input events to UIV agent running in VM . UIV agent may then make an API call e.g. interface interaction API to modify state of desktop or clipboard based on the received clipboard input event . In one example a user may perform a selection of the locally copied text using native clipboard GUI element and upon completion of the selection e.g. indicated by activating DONE button UIV client transmits a clipboard input event indicating the selected text to UIV agent . UIV agent invokes interface interaction API to select text indicated by the received clipboard input event which may then be shown on remote desktop as selected.

In one embodiment native clipboard GUI element is configured to display and edit contents of remote clipboard . As shown in native clipboard GUI element includes buttons configured to trigger a corresponding clipboard operation e.g. cut copy paste on remote desktop based on a local text selection. For example UIV client detects input on a button corresponding to a COPY operation and transmits a clipboard input event to UIV agent that specifies a clipboard COPY operation to be performed on remote clipboard at remote desktop and that includes a copy of text and other content selected by selection region . UIV agent receives the clipboard input event and invokes interface interaction API to select the text indicated and then invoke a copy operation on clipboard or alternatively directly invoke a copy operation on clipboard that specifies the selected text.

In an alternative embodiment VDI client is configured to duplicate remote clipboard to a local clipboard at client device . Clipboard may be used for local to local data transfer between applications on client device for local to remote data transfer between an application on client device and an application on VM and for remote to remote data transfer between applications on VM . In one embodiment UIV client is configured to use received clipboard metadata to update clipboard to correspond to contents of remote clipboard at VM .

In the embodiment of guest OS running on VM includes a UI element referred to as a start menu that provides a central point for launching applications and performing tasks. Start menu sometimes referred to as an application launcher file launcher or application menu is configured to enable a user to launch an application open a file change system settings access help information and perform other tasks. Start menu may have a traditional point and click style user interface that relies on input from a pointer e.g. mouse cursor may be difficult to navigate from a touch screen of client device . For example as shown start menu may be organized into a nested menu of items and sub menus of items e.g. programs files that may be difficult to navigate using touch input.

According to an embodiment VDI client includes UIV client configured to communicate with UIV agent running on VM to generate a native launcher GUI element that is a virtual representation of start menu at client device .

In one embodiment VDI client is configured to detect a UIV trigger performed by a user operating client device to activate native launcher GUI element . For example VDI client may detect a swipe gesture or tap performed by a user on an on screen stub UI element to slide out native launcher GUI element from a hidden view. In response to detecting the UIV trigger UIV client transmits to UIV agent a request indicating native launcher GUI element has been activated and requesting start menu metadata .

In response to a request for start menu metadata UIV agent makes an API call to interface interaction API exposed by guest OS to obtain start menu metadata . In one embodiment start menu metadata includes information relating to each item contained within start menu such as an item name e.g. Microsoft Word item type e.g. application document graphical icon graphical thumbnail an item identifier that uniquely identifies the item within start menu and a location path to a corresponding file within filesystem of guest OS . UIV agent transmits the generated start menu metadata to UIV client on client device .

In one embodiment UIV agent is configured to store usage data that defines a pattern of client side selections from the start menu. In response to a request for start menu metadata UIV agent may apply a variety of filters and heuristics to usage data to identify a subset of items in start menu that may be most desired by UIV client and obtain start menu metadata for the identified subset of items based on usage data .

UIV client is configured to construct and display a native launcher GUI element based on the received start menu metadata . Native launcher GUI element may be configured to present a compact set of applications and documents for rapid selection and that may be ordered based on usage pattern represented by usage data . In one embodiment native launcher GUI element contains a plurality of items corresponding to the items within start menu such as a plurality of shortcuts to applications e.g. Programs and a plurality of documents e.g. My Documents . Alternatively native launcher GUI element contains a reduced set of items that is less than the plurality of items within start menu at remote desktop . As shown native launcher GUI element may be displayed on top of or overlaid on a base image that is a graphical representative of remote desktop on VM .

UIV client is configured to capture user input on native launcher GUI element and transmit a launcher input event to UIV agent running in VM . In one embodiment launcher input event includes a reference that identifies an item within native launcher GUI element and that corresponds to an item within start menu and further includes an indication that the referenced item has been launched. In response to receiving launcher input event UIV agent makes an API call e.g. via interface interaction API to invoke the item within start menu that is referenced by launcher input event . For example UIV agent may make an API call using interface interaction API to launch an application specified by launcher input event . In another example UIV agent may use interface interaction API to open a home directory as specified by launcher input event .

In one embodiment UIV agent may modify usage data to include the received launcher input event thereby incorporating the selection into a record of the user s past application launches document selections and other interactions that may be used in subsequent requests for start menu metadata . Accordingly UIV client and UIV agent are configured to refine a user experience for a given user over time and provides system administrator with a dataset for understanding priorities of users of mobile devices such as client device .

According to an embodiment VDI client includes UIV client configured to communicate with UIV agent running on VM to generate a native application selector GUI element that is a virtual representation of task switcher at client device . UIV agent running on VM is configured to transmit active application metadata that includes information relating to a plurality of open applications e.g. application running on guest OS . In one embodiment UIV agent obtains active application metadata using API calls to one or more APIs exposed by guest OS such as interface interaction API and a process API configure to obtain information about processes running in guest OS . Active application metadata may include a list of running applications on guest OS and may include information relating to the applications such as a window identifier associated with the application and graphical information such as a thumbnail image that provides a graphical representation of the running application.

In one embodiment UIV client is configured to generate native application selector GUI element that enables a user to traverse the list of running applications using touch input such as a swipe input to pan from one application to another. For example in the embodiment shown in native application selector GUI element is configured to provide a cover flow style user interface that displays a currently selected application in a center position and renders previous applications and next applications in the list of running applications on the periphery of the currently selected application at center. As shown graphical representations of applications are rendered at a size larger than the thumbnails of task switcher on remote desktop that enables a user operating client device to distinguish contents of each window.

In one embodiment upon receiving a touch input e.g. tap on a currently selected application UIV client transmits a switch input event to UIV agent . UIV agent may use process API to programmatically manipulate guest OS to switch to an application referred to in the received switch input event .

As described earlier the user interface virtualization techniques may be applied to a wide variety of UI elements including windows dialog boxes and menus. One specific example of a menu to which user interface virtualization may be extended is a context menu sometimes referred to as a contextual shortcut or pop up menu and is described in greater detail in conjunction with .

In the embodiment of guest OS running on VM includes a UI element referred to as a context menu that is a menu of options available in a current state or context of guest OS or applications running on guest OS i.e. application . Context menu may include a hierarchical menu of items and sub menus of items made available based on a selected object or targeted region within the GUI of guest OS for which the context menu is opened. Context menu may have a traditional point and click style user interface that relies on input from a pointer e.g. mouse cursor may be difficult to navigate from a touch screen of client device . For example in some embodiments to open a context menu a user may have to click a secondary mouse button i.e. right click to open a context menu for the region that is under cursor . Simulating a right click or opening a context menu in a specific region may be difficult to perform using touch input. Further once open context menu may be organized into a nested menu of items and sub menus that may be difficult to navigate using touch input.

According to an embodiment VDI client includes UIV client configured to communicate with UIV agent running on VM to generate a native context menu GUI element that is a virtual representation of context menu at client device .

In one embodiment VDI client detects a UIV trigger performed by a user operating client device to open a context menu and activate corresponding native context menu GUI element . In some embodiments VDI client may cause a context menu to be opened within a certain context within remote desktop based on the location of a pre determined touch input. For example VDI client may detect a gesture input e.g. two finger swipe left to right or tap input e.g. two finger tap performed by a user at a location within client GUI and cause a context menu to be opened in a corresponding location within remote desktop . depicts a touch input located within a window of application that causes a context menu to open within a corresponding location in remote desktop .

In other embodiments VDI client receives user input from a UI element within client GUI configured to open a context menu or simulate a secondary mouse button click e.g. right click . In some embodiments VDI client receives a first touch input on button to activate native context menu GUI element and a second touch input within client GUI specifying a location or region to open context menu in remote desktop . In some embodiments VDI client receives a single touch input on button and simply causes a context menu to be opened at the current location of cursor in remote desktop . While depicts UI element as a button having a right click icon it should be recognized that other forms of user interface elements may be used including an on screen stub UI element to slide out native context menu GUI element from a hidden view off screen.

In response to detecting the UIV trigger UIV client transmits to UIV agent a request indicating native context menu GUI element has been activated and requesting context menu metadata . In response to a request for context menu metadata UIV agent makes an API call to interface interaction API exposed by guest OS to obtain context menu metadata . Context menu metadata includes information for a plurality of menu items within context menu such as an item name e.g. Undo Cut Copy graphical icon if any and an item identifier that uniquely identifies the item within context menu. In cases where context menu is a nested menu having one or more sub menus context menu metadata may include information of every item in the nested menu including the sub menus stored in a hierarchical format or alternatively may include information for a limited number of levels of menu items e.g. first level and additional levels may be provided upon request from UIV client . As shown UIV agent transmits the generated context menu metadata to UIV client on client device .

In an alternative embodiment rather than actively request context menu metadata VDI client may transmit an indication to open a context menu at a specified location within remote desktop and UIV agent reactively detects a context menu has been opened obtains context menu metadata and transmits context menu metadata to UIV client .

UIV client constructs and displays a native context menu GUI element having the same functionality and information as a corresponding context menu on the remote desktop based on the received context menu metadata . In some embodiments native context menu GUI element may be configured similarly to a native menu bar GUI element shown in . In one embodiment native context menu GUI element contains a plurality of items corresponding to the items within context menu such as items Undo Cut Copy Paste. As depicted in the plurality of items may be rendered using enlarged fonts and icons to provide a touch friendly manner of interfacing with a context menu . Native context menu GUI element may include sub menu items such as the Styles item depicted in which may be navigated to further levels of context menu items within native context menu GUI element . Native context menu GUI element may include menu items such as the Font . . . menu item which may cause additional dialog boxes to be opened. It should be recognized that additional dialog boxes or other UI elements launched as a result of user input on the native context menu GUI element may be further handled according to user interface virtualization techniques described herein.

As shown native context menu GUI element may be displayed on top of or overlaid on a base image that is a graphical representative of remote desktop on VM although other methods for displaying native context menu GUI element may be used including rendering native context menu GUI element as a side panel callout arranged alongside base image such that native context menu GUI element displaces or scales base GUI image temporarily.

UIV client is configured to capture user input on native context menu GUI element and transmit a context menu input event to UIV agent running in VM . In one embodiment context menu input event includes a reference that identifies a menu item within native context menu GUI element and that corresponds to an item within context menu e.g. as specified by context menu metadata and further includes an indication that the referenced menu item has been selected.

Responsive to receiving context menu input event UIV agent programmatically manipulates context menu in the GUI of remote desktop according to received context menu input event using interface interaction API . In some embodiments in response to receiving context menu input event indicating menu navigation of context menu UIV agent makes an API call e.g. via interface interaction API to invoke at least one of the plurality of menu items within context menu that is referenced by context menu input event . For example UIV agent may make an API call using interface interaction API to invoke the Select All menu item specified by context menu input event and select all text in an application . As described earlier in some cases menu navigation of context menu may involve navigation to multiple levels of menus. UIV agent may determine a change in state of context menu generate updated UI metadata specifying the change in state of the context menu using interface interaction API and provide the updated UI metadata to UIV client .

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the disclosure may be useful machine operations. In addition one or more embodiments of the disclosure also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present disclosure may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present disclosure have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the disclosure s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

