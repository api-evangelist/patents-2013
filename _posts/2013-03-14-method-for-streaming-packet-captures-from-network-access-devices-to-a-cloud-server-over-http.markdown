---

title: Method for streaming packet captures from network access devices to a cloud server over HTTP
abstract: A system for streaming packet captures over the Internet includes multiple network access devices, each operating as one of a gateway device, a wireless access point, and a network switch, and a management server communicatively coupled to the network access devices over the Internet for managing the network access devices. The management server maintains a persistent hypertext transport protocol (HTTP) connection with each of the network access devices over the Internet. The management server is to generate a bytecode based on a filtering expression for packet captures (PCAPs) representing one or more PCAPs filtering rules, transmit the bytecode to the network access devices without requiring the network access devices to compile the PCAPs filtering rules, receive PCAPs from the network access devices captured by the network access devices based on the PCAPs filtering rules, and merge the PCAPs received from the network access devices into merged PCAPs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043439&OS=09043439&RS=09043439
owner: Cisco Technology, Inc.
number: 09043439
owner_city: San Jose
owner_country: US
publication_date: 20130314
---
Embodiments of the present invention relate generally to packet capturing. More particularly embodiments of the invention relate to streaming packet captures from network access devices to a cloud server over HTTP.

Packet capture PCAP is the act of capturing data packets crossing a computer network. Deep packet capture DPC is the act of capturing at full network speed complete network packets e.g. header and payload crossing a network with a high traffic rate. Once captured and stored either in short term memory or long term storage software tools can perform deep packet inspection DPI to review network packet data perform forensics analysis to uncover the root cause of network problems identify security threats and ensure data communications and network usage complies with outlined policy. Some DPCs can be coupled with DPI and can as a result manage inspect and analyze all network traffic in real time at wire speeds while keeping a historical archive of all network traffic for further analysis.

Typically in order to configure a network device to perform PCAPs one has to set up certain PCAP rules. Traditionally setting up a remote packet capture is a manually intensive process that can only be run on the network devices with enough resources e.g. CPU memory and storage to do all the filtering and store the results on the machine where the PCAP is taking place. For example an administrator must log into the device the device must have a program to execute the packet capture it must run the capture and store the results locally and then via a separate process one must transfer the results which may be large from the remote device to a local device for additional analysis.

This may be difficult or impossible if the device does not have enough disk space to store the capture or the device is not remotely accessible. If one wants to run this process across multiple devices for instance capturing across multiple access points APs she must repeat every step and then try to merge the results together. Finally this process does not take place over a standard service so accessing from remote devices may be difficult.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiments a centralized backend server e.g. Web based or cloud based management server maintains a persistent network connection such as a hypertext transport protocol HTTP connection with each of packet capturing devices. A network access device can be one of a gateway device an access point AP and a network switch which provides network access to one or more client devices over a local area network LAN . In one embodiment a management server presents a Web interface that has the same inputs as traditional packet captures allowing a user to select which remote devices to run the capture on and start a packet capture session. In one embodiment the management server receives one or more expressions such as a TCPDUMP expression from the Web interface for packet captures in one or more of the network access devices. The management server compiles the expressions into bytecode that is platform independent and allows the capture devices themselves to do filtering without having them to be capable of translating expressions into bytecode. Alternatively the expressions or information representing filtering rules can be transmitted from the management server to at least some of the network access devices. The network access devices can then compile the received information into a set of one or more filtering rules for packet capturing. Each of the network access devices maintains a management tunnel mTunnel with the management server so that a management server can connect to the network access devices for example for distributing packet capturing information and or reporting captured packets.

In one embodiment each of the network access devices that perform packet capture includes a HTTP server component running therein that uses HTTP chunking to stream captured information of packets to a HTTP client component running within the management server. The management server creates a process that initiates an HTTP connection to each capture device which streams results back and merges multiple PCAP streams together to a merged stream including reordering and or deduplicating the PCAP packets. The server component of a network access device streams the results of the process over a HTTP chunked connection that will work over a standard Web server. In one embodiment the management server parses the output and streams an output such as a TCPDUMP text output to the user over a Web service.

According to one embodiment network access devices may represent capture devices that a network operator e.g. administrator wishes to capture packets from. Each of network access devices is connected to management server e.g. backend system via an Internet protocol IP tunnel referred to herein as an mTunnel. Each capture device runs a Web service that a program can connect to over an mTunnel. A user connects to a Web service which can run programs that can access devices over the mTunnel. When the user selects to run a packet capture the Web service connects to a program that streams from multiple capture devices e.g. network access devices to aggregate multiple streams into one that it itself streams back to the end user either via an update to a Web interface or via a download.

Referring back to in one embodiment management server includes Web interface to allow a user such as administrator to access resources of management server such as management tools for managing network access devices . Via Web interface user can provide via path PCAP configuration information regarding how PCAPs are to be performed. Based on the PCAP configuration information capture filtering rule generator is to compile and generate bytecode representing one or more capture filtering rules . Capture filtering rules are then downloaded to any of network access devices for example as part of capture filtering rules . In one embodiment as part of PCAP configuration information user may specify via Web interface which of network access devices will receive the capture filtering rules .

A conventional system requires user to individually log into each of the network access devices that perform the packet captures to specify the PCAP configuration. Such a manual process is tedious and error prone. In one embodiment by compiling the PCAP configuration information into bytecode representing the PCAP filtering rules the network access devices do not need the processing resources that are required to compile the same filtering rules. Since the typical bytecode is much smaller in size e.g. around 20 bytes compared to a typical HTTP expression that sets up the filtering rules it takes much less resource or bandwidth to transmit from management server to network access devices and it takes less processing resource in the network access devices to execute the bytecode.

According to another embodiment a network access device may have enough processing power or bandwidth to maintain a rule generator such as rule generator to compile the packet capturing information to generate capture filtering rules . In such an embodiment management server receives packet capturing information from user via Web interface . User can specify via Web interface which of the network access devices would receive the packet capturing information. The capturing information representing filtering rules can be transmitted from the management server to at least some of the network access devices . The network access devices can then compile the received information into a set of one or more filtering rules such as rules for packet capturing.

According to one embodiment each of network access devices maintains a persistent mTunnel with management server . The bytecode representing capture filtering rules is downloaded over the mTunnels to the specified network access devices in this example as part of capture filtering rules of network access device . The capture filtering rules may be carried by a user datagram protocol UDP packet that is encapsulated in another packet and tunneled to network access device such as UDP over IP UDP IP encapsulation or UDP over HTTP UDP HTTP encapsulation. Network access device includes a router to route packets exchanged between its client devices and the Internet via path . In addition network access device includes a capture program also referred to as a packet analyzer coupled to router to capture packets or packet information e.g. parameters that satisfy capture filtering rules . Note that the network access devices can capture packets even if those packets are not being routed to or from the Internet via any kind of Layer 3 i.e. IP layer routing the packet capturing can be done at Layer 2 i.e. media access control or MAC layer . Thus even when the network access devices are operating in a bridge mode and not themselves performing any routing at Layer 3 they can still perform packet capturing at Layer 2. Of course the network access device must themselves have layer 3 connectivity i.e. an IP address in order to communicate with the management server .

Capture program may be implemented as part of router or a network stack of an operating system of network access device . Alternatively capture program may be a third party packet capture utility such as TCPDUMP utility. TCPDUMP is a packet analyzer that runs under the command line. It allows the user to intercept and display TCP IP and other packets being transmitted or received over a network to which the computer is attached. TCPDUMP works on most LINUX operating systems.

According to one embodiment network access device includes an HTTP server component that is communicatively coupled to HTTP client component of management server to maintain a persistent HTTP connection. The persistent HTTP connection may be part of an mTunnel between management server and network access device . HTTP client and HTTP server work with each other to maintain an open HTTP connection. In one embodiment when network access device powers up and contacts management server HTTP client sends an HTTP request to HTTP server . Instead of immediately responding to the HTTP request HTTP server may withhold the HTTP response until there is data to be sent to management server . Alternatively the initial HTTP request from client to server happens when the administer requests a new PCAP to start rather than when NAD boots up. The HTTP server receives configuration parameters about the new PCAP e.g. the byte code for the filtering rules the duration of the PCAP maximum number of packets to capture etc as HTTP parameters that are part of that initial HTTP fetch. HTTP client would start a new fetch for each PCAP that is requested rather than immediately starting one once NAD boots up. In one embodiment when capture program captures the PCAP information based on capture filtering rules the PCAP information is handed over to HTTP server . In response HTTP server transmits the PCAP information as part of a pending HTTP response to HTTP client . In one embodiment once HTTP client receives an HTTP response from HTTP server HTTP client immediately sends another HTTP request to HTTP server which will be withheld to maintain the HTTP connection open.

According to one embodiment the PCAP information is streamed by HTTP server to HTTP client using HTTP streaming protocols such as HTTP streaming or HTTP live streaming protocol. HTTP streaming also referred to as HTTP server push is a mechanism for sending data from a Web server e.g. HTTP server to a Web browser e.g. HTTP client . Generally the Web server does not terminate a connection after response data has been served to a client. The Web server leaves the connection open so that if an event is received it can immediately be sent to one or more clients. Otherwise the data would have to be queued until the client s next request is received. HTTP live streaming HLS is an HTTP based media streaming communications protocol. It works by breaking the overall stream into a sequence of small HTTP based file downloads each download loading one short chunk of an overall potentially unbounded transport stream. Since its requests use only standard HTTP transactions HTTP live streaming is capable of traversing any firewall or proxy server that lets through standard HTTP traffic unlike UDP based protocols.

According to one embodiment HTTP server of network access device listens for an incoming HTTP connection e.g. HTTP request from HTTP client of management server. Once the HTTP connection has been established capture program starts capturing packet information based on capture filtering rules and streams back via path the capture result to management server via HTTP server . In one embodiment packet capture program selects an interface a time or packet limit and loads the byte code into the kernel memory so that capture program will filter and unwanted packets. Alternatively capture filtering rules and the interface and time packet limits information used by capture program are provided as part of HTTP parameters in the HTTP fetch from client to server . For any packets it reads back it streams to its output and once the stream ends or times out it closes the connection and the stream ends. Similarly network access device streams the respective capture result to management server via path .

When HTTP client collects the HTTP streams from network access devices the HTTP streams are handed over to merger . The HTTP streams may be temporarily stored in buffer for reordering and or deduplication purposes. Merger merges with optional reordering and deduplication the received HTTP streams into merged PCAP stream to allow user to download it through Web interface via path .

In one embodiment capture program communicates with router to monitor certain LAN interfaces such as LAN interfaces and capture packets or at least the parameters of the packets exchanged via the selected LAN interfaces based on bytecode . Router is responsible for routing packets as part of normal network traffic between client devices associated with LAN interfaces and external network node s over Internet . Any of the LAN interfaces may represent physical interfaces such as ports logical interfaces such as virtual LANs VLANs or a combination thereof. Capture program may be implemented as part of router or vice versa. Network access device may be located behind another network access device e.g. gateway device . According to one embodiment capture program provides the PCAP information to HTTP server . HTTP server then streams the PCAP information to management server via mTunnel using an HTTP streaming protocol. As described above the packet capturing can be performed at other network layers such as Layer 2.

In addition according to one embodiment merger includes a deduplication module to remove any deduplicated stream and or packets or segments within a stream. In one embodiment for each packet segment or stream in merged stream a hash of the content is generated using a predetermined hash function e.g. SHA 1 MD5 and maintained as part of hashes . For a new packet or segment a new hash is generated and compared with the hashes to determine whether the packet or segment has already been stored in merged stream . If the new hash matches one of the hashes it means more likely than not that the corresponding packet segment exists in merged stream . Thus instead of storing the duplicated packet segment in merged stream again the duplicated packet segment may be dropped or ignored. According to one embodiment merger further includes a decoder not shown that rather than streaming back the actual packet contents the decoder interprets and decodes the content and streams back a human readable text summary of each packet.

According to one embodiment a network access device may represent a gateway device interfacing a LAN to WAN and performs network address translation NAT for its clients which may be client devices or other network access devices. A network access device may be configured behind another network access device. For example an uplink of an access point may be coupled to a downlink of a gateway device. Alternatively an uplink of a network switch may be coupled to a downlink of a gateway device or an access point etc. A network access device may be an integrated device integrating two or more of these functionalities e.g. router gateway access point and or network switch wired and or wireless.

Referring back to in one embodiment management server works for both single and multi tenant installations meaning that multiple organizations e.g. corporate clients with different network administrators may have network access devices managed by the same management server and network configuration or management can be performed using the same management server but that are firewalled off from each other and do not have access to each other s network configurations. In this example network access devices and network access devices may be associated with or owned by the different organizations and administrated by different network administrators A and B associated with the organizations. Some of network access devices may communicate with each other to form a local mesh network while some of network access devices may communicate with each other to form another local mesh network.

According to one embodiment management server includes a management module and a configuration module to manage and to configure network access devices and to generate management server configuration information for each of network access devices which may be stored in configuration information database . In one embodiment management server provides a user interface such as a Web interface to allow a network administrator such as administrators A and B to create and log into an account associated with an organization to which the network access devices or network access devices belong.

The management server further includes a NAD information database including information regarding the network access devices . In one embodiment the NAD information database includes a serial number and a mechanism to authenticate the network access device s identity e.g. the public key of a private public key pair the private key of which was embedded or stored in the network access device during the manufacturing . NAD information database may be populated different ways in different embodiments e.g. populated by the seller of the network access devices populated by the network administrator . In embodiments in which this information is populated by the seller different ones of these embodiments may associate the information regarding network access devices in the router information database with the user account in different ways example network administrators A and B may provide an order number or invoice number associated with a purchase of network access devices or .

According to one embodiment when a network access device is powered up and attempts entering network the network access device attempts to contact management server . In one embodiment certain device information such as an IP address and domain name service DNS name of management server is stored in the network access device when it is manufactured. In one embodiment when the network access device is powered up the network access device performs any self configuration processes including obtaining an IP address for itself from a dynamic host configuration protocol DHCP facility which address may be a public IP address or may be a private IP address if there is a device performing NAT between the router and the WAN that is to say the network access device is behind a device performing NAT . The network access device then accesses management server based on the server s IP address and authenticates itself e.g. signing a message e.g. including the serial number of the network access device using a private key associated and or stored with the network access device such that management server can authenticate the network access device using the associated public key stored in NAD information database maintained by management server .

In one embodiment each of network access devices creates one or more secure communication channels e.g. a control tunnel with server using the keys downloaded from management server to exchange control traffic such as management messages or notification operating statuses of the network access device etc. Such a tunnel for network management purposes is referred to herein as an mTunnel. In this example network access devices maintain at least one mTunnel with management server and network access devices maintain at least one mTunnel with management server . In one embodiment each of network access devices may maintain a persistent mTunnel with management server . Alternatively only the network access device operating as a gateway device maintains an mTunnel with management server while other network access devices behind the gateway device communicate with the gateway device to share the same mTunnel. In one embodiment a network access device operating as a gateway performs network address translation NAT for its clients which may be a network client device or another network access device.

In one embodiment once a network access device has been successfully authenticated by server the network access device downloads configuration information and stores it in a storage device within the network access device. This download may take place over a secure session layer SSL encrypted session and or the management server may encrypt the data using the public key corresponding to the private key. This secure channel may also be used to receive subsequent configuration updates from management server . According to one embodiment subsequently when there is a change in the configuration such as adding or removing a network access device changing of subnet settings for example by an administrator such as administrators A and B via a Web interface of management server management server is to generate updated configuration information and communicate the updates to the network access devices via their corresponding mTunnels such communication can be done with different mechanisms depending on the embodiment of type of information including a push mechanism a pull mechanism etc. .

A variety of tunneling protocols can be utilized over an mTunnel between a network access device and management server such as for example Internet protocol IP over user datagram protocol UDP IP UDP encapsulation. UDP is one of the core members of the Internet Protocol Suite the set of network protocols used for the Internet. With UDP computer applications can send messages in this case referred to as datagrams to other hosts on an IP protocol network without requiring prior communications to set up special transmission channels or data paths. UDP uses a simple transmission model without handshaking dialogues for providing reliability ordering or data integrity. Thus UDP provides an unreliable service and datagrams may arrive out of order appear duplicated or go missing without notice. UDP assumes that error checking and correction is either not necessary or performed in the application avoiding the overhead of such processing at the network interface level. Time sensitive applications often use UDP because dropping packets is preferable to waiting for delayed packets which may not be an option in a real time system. If error correction facilities are needed at the network interface level an application may use the Transmission Control Protocol TCP which is designed for this purpose. UDP applications use datagram sockets to establish host to host communications. An application binds a UDP socket to its endpoint of data transmission which is a combination of an IP address and a UDP port.

For example a network management message may be carried as an IP packet and the IP packet may be encapsulated within a UDP packet exchanged between a network access device and management server over a respective mTunnel. In one embodiment an IP packet having one or more network management messages embedded therein may be wrapped with a predetermined mTunnel header and is transmitted within a UDP packet between management server and a network access device even if the network access device is behind a NAT device.

In some configurations if a network access device is behind a firewall that does not allow any UDP packet going through a UDP packet carrying a network management message may be encapsulated within a hypertext transport protocol HTTP referred to herein as UDP over HTTP UDP HTTP . Since most of the firewalls allow Internet traffic using HTTP protocol with a transport control protocol TCP port of 80 it is likely a UDP packet embedded within an HTTP packet having a destination TCP port of 80 or port 443 can reach management server . In such a configuration when management server receives the HTTP packet it may remove any HTTP header to reveal a UDP packet encapsulated therein. Thereafter an IP packet encapsulated within the UDP packet may be extracted and the network management message within the IP packet can be obtained.

According to one embodiment management server and network access devices associated with an organization such as network access devices may utilize an internal set of IP addresses also referred to as mTunnel or management IP addresses to exchange network management messages via the respective mTunnel or mTunnels. That is the internal IP addresses used by management server and network access devices via the respective mTunnel or mTunnels may be in a separate IP address space e.g. 6.x.x.x that is different from an IP address space used between network access devices and their network client devices over LAN s e.g. 10.x.x.x . The internal IP addresses described herein are only used between management server and network access devices to exchange network management messages over the respective mTunnel s . In one embodiment for a network access device that performs NAT for its LAN devices it may have at least three IP addresses 1 an uplink IP address for regular network traffic to an external network e.g. external IP address used in the external network or a public IP address if the uplink interface of the network access device is directly coupled to the Internet 2 a downlink IP address e.g. a private IP address used between the network access device and its LAN devices and 3 an internal IP address e.g. a management IP address or mTunnel IP address solely used between a management server and the network access device via an mTunnel over the Internet for the purpose of exchanging network management messages. In this example management server and network access devices using the internal IP addresses to exchange network management messages over mTunnel s forms a logical network e.g. a logical management network .

Similarly management server and network access devices of another organization in this example may utilize a different set of internal IP addresses to exchange network management messages through the respective mTunnel or mTunnels where the internal IP addresses may be in a different IP address space than the one of IP addresses used between network access devices and their client devices . Similarly in this example management server and network access devices using internal IP addresses to exchange network management messages over mTunnel s forms a logical network e.g. a logical management network . The internal IP addresses referred to herein as a first set of internal IP addresses used between management server and network access devices may be different than the internal IP addresses referred to herein as a second set of internal IP addresses . The first and second sets of internal IP addresses may be in different IP address spaces or in the same IP address space dependent upon the specific configuration.

According to one embodiment when a network access device is powered up and initialized the network access device performs certain self configuration operations to determine whether the network access device should operate as a gateway or as an access point behind a gateway. In one embodiment when a network access device boots up it initializes its Ethernet interface and attempts to request an IP address e.g. a publicly accessible IP address over the Internet also referred to as an uplink IP address by broadcasting its media access control MAC address within a dynamic host configuration protocol DHCP request via its Ethernet interface. If the Ethernet interface of this network access device is connected to the Internet a DHCP server which may be a separate server or part of management server will respond with a valid IP address assignment and the network access device will operates as a gateway device. If there is no DHCP response received within a predetermined period of time the network access device assumes that it is operating behind another gateway device that performs NAT and the network access device then joins an existing network and operates as an access point.

According to one embodiment when operating behind a gateway each of the network access devices derives its own IP address and assigns IP addresses to its client devices using a predetermined method in a consistent manner. In one embodiment a network access device performs a hash operation on at least a portion of its hardware identifier such as a MAC address to generate an IP address. In a particular embodiment a network access device hashes its 6 byte MAC address using a predetermined hash function e.g. CRC 32 hash function to generate lower three bytes of its IP address. Note that each of the network access devices may generate two IP addresses for itself 1 an internal IP address in a first IP address space e.g. 6.x.x.x solely for communicating network management messages with management server via an mTunnel and 2 a private IP address in a second IP address space e.g. 10.x.x.x for normal network traffic with its client devices.

Similarly when a network client device such as client devices requests an IP address the associated network access device hashes a MAC address of the client device to derive an IP address for the client device. Since each of the network access devices performs the same hash operation using the same hash function on a MAC address of a client device the client device can consistently obtain the same IP address from different network access devices. As result the client device can roam across different network access devices without having to change its IP address or to perform any address resolution protocol ARP related operations.

Referring back to as described above network access devices and network access devices may be associated with different organizations and managed by management servers . In other configurations network access devices and network access devices may be associated with the same organization as shown as system B in . Referring to in this configurations network access devices and network access devices may be deployed and located at different sites or geographical locations of the organization. According to one embodiment at least one virtual private network VPN tunnel is maintained between at least one of network access devices and at least one of network access devices also referred to as a site to site VPN. Some or all of the network access devices can be configured via configuration interface to participate in the site to site VPN.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices. Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer readable transmission media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. firmware software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

