---

title: File block placement in a distributed file system network
abstract: A method for file block placement in a distributed file system network that includes a plurality of data storage nodes, the method comprising the steps of generating a plurality of file block placement options for a file block, each block placement option being associated with at least one of the data storage nodes, the file block placement options being based on a set of network parameters associated with the distributed file system, determining a cost valuation parameter associated with each of the plurality of file block placement options, and selecting one of the plurality of file block placement options based at least in part on the cost valuation parameter associated with each file block placement option.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09633041&OS=09633041&RS=09633041
owner: Taiwan Semiconductor Manufacturing Co., Ltd.
number: 09633041
owner_city: Hsinchu
owner_country: TW
publication_date: 20130926
---
The present invention generally relates to the field of distributed file systems and in particular to the placement of file blocks within a distributed file system.

As people have become increasingly connected to the Internet from home at work or through mobile devices more data is consumed through web browsing video streaming social networking instant communication and e commerce. At the same time people generate more data by publishing photos uploading videos updating social network status and purchasing goods and services on the Internet. This large amount of data is referred to as web scale data or big data. Known systems exist for the storage and processing of big data in a distributed manner across large numbers of computing and or storage devices which may be maintained in one or more clusters. An example of a distributed file system is the Google File System GFS which is a scalable distributed file system built with a large number of inexpensive commodity hardware devices for supporting large distributed data intensive applications. GFS is used by Google s MapReduce programming model in which programs are automatically parallelized and executed on one or more large clusters built with commodity computers.

Another example of a distributed file system is the open source Apache Hadoop which is a popular software framework that supports data intensive distributed processing on large clusters of commodity hardware devices. Some companies currently use Apache Hadoop not only for their own distributed data storage and processing but to offer distributed data storage and processing to customers via cloud based services. Distributed file systems such as Hadoop save large data sets of big data by dividing a large data set into smaller blocks and storing the blocks in multiple nodes within a cluster that contains a large number of computers each with its own data storage. To reduce the network bandwidth required for the processing of the large data set the necessary data processing code is moved to the computer node that contains the data blocks. This strategy of moving computation to the data instead of moving data to the computation seeks to maximize data locality and reduce unnecessary network transfers for the processing of the stored data.

A typical distributed file system cluster may be comprised of many racks of computers where each rack contains a number of computers such as 50 computers. Each computer on a rack is connected to the top of rack ToR switch on the rack. The top of rack switch on each rack is also connected to one or more aggregation or core switches in the cluster. Together the ToR aggregation and core switches provide interconnectivity among all computers in the cluster and access to the external world via one or more gateways connected to the cluster.

In such a distributed file system one of the computers acts as a file manager node and the other computers act as storage nodes. The file manager node acts as a master that decides where blocks of a large file should be replicated when a file is created or appended. The file manager node also decides where extra replicas of a block should be stored when a storage node storing a block fails or when the replication value of the file is increased. By dividing a large file into blocks and storing multiple copies of each block in different storage nodes the distributed file system is able to store a very large file e.g. from terabytes to petabytes reliably in a large cluster of computers running as storage nodes. Storage nodes can be added as needed to increase the storage capability of a cluster and failed storage nodes can be replaced and the replicas of the file blocks stored in the failed storage nodes can be accessed from the other storage nodes in which they are stored.

Typically the distributed file system handles a file storage request from a client of the system by creating an entry in the file manager node metadata to identify the new file. The client then breaks the data of the new file into a sequence of blocks. Then starting with the first block of the new file and block by block the client asks the file manager node for permission to append a new block to the new file and the client then receives from the file manager node the ID of the new block and a list of the storage nodes where the block should be replicated.

After the client receives the list of storage nodes where the new block should be replicated the client prepares a block write pipeline such as the client will send the ID of the new block and the IDs of other storage nodes to the 1st storage node and request it to prepare to receive the new block the 1st storage node will request the 2nd storage node to prepare to receive the new block and the 2nd storage node will request the 3rd storage node to prepare to receive the new block and so on so forth until all storage nodes are ready to receive the new block. After the block write pipeline is prepared the client initiates the block copies by copying the new block to the 1st storage node. Next the 1st storage node copies the new block to the 2nd storage node and so on until the block is replicated the number of times specified by the replication factor of the file.

The placement of file block replicas is important to the reliability and performance of the distributed file system. While placing the replicas of a block in storage nodes located in different racks can improve reliability against rack failure it may increase traffic loads in the top of rack switches and the core switches connecting the pipeline of storage nodes during block replication. Hadoop provides a rack aware replica placement policy to improve data reliability availability and some reduction of network bandwidth utilization. The default Hadoop rack aware block placement policy tries to simultaneously meet two goals a to place the replicas of a block in more than one rack to improve reliability against a single rack failure and b to place multiple replicas in a single rack to reduce inter rack traffic during block creation.

Unfortunately such a block placement policy does not consider the real time status and conditions of the network and treats all the network connections between the storage nodes and the top of rack switches in the same manner. For example a block replica may be designated for placement in a storage node even when the block replication pipeline would be congested at the network connection to from that storage node. Furthermore once a block placement decision has been made no effort is made in the network to prepare for and support the upcoming transfers required by the block placement pipeline. The block replication transfer operations are left to contend and compete with all other traffic on the network. Accordingly such a block placement policy may lead to inefficient use of the cluster network for block placement and may lead to increased congestion in the network connections to from storage nodes and in the top of rack switches and the core switches of the cluster.

This may also lead to a problem for client users such as clients of a cloud based file distribution and data processing system that have certain timing and service level requirements related to the client s Service Level Agreement SLA and or contracted Quality of Service QoS requirements. This is because the default block placement policy does not consider any notion of service assurance via the client s Service Level Agreement SLA and or and QoS requirements during the block placement decision process. Accordingly the block placement decision may not satisfy the client s SLA and QoS requirements because of network congestion to from the various storage nodes in the block placement pipeline and in the ToR and core switches.

In one aspect a method is provided for file block placement in a distributed file system network that includes a plurality of data storage nodes the method comprising the steps of generating a plurality of file block placement options for a file block each block placement option being associated with at least one of the data storage nodes the file block placement options being based on a set of network parameters associated with the distributed file system determining a cost valuation parameter associated with each of the plurality of file block placement options and selecting one of the plurality of file block placement options based at least in part on the cost valuation parameter associated with each file block placement option.

In another aspect a method is provided for file block placement in a distributed file system network that includes a plurality of network nodes the method comprising the steps of accessing a file block placement option for placement of a file block in at least one data storage node in the distributed file system network generating a network control instruction set based at least in part on the file block placement option and sending the network control instruction set to a controller node in communication with the distributed file system network.

In an aspect a computing device is provided for file block placement in a distributed file system network that includes a plurality of data storage nodes the computing device comprising a memory configured to store data and processing instructions and a processor configured to retrieve and execute the processing instructions stored in the memory. The processing instructions cause the processor to perform the steps of generating a plurality of file block placement options for a file block each block placement option being associated with at least one of the data storage nodes the file block placement options being based on a set of network parameters associated with the distributed file system determining a cost valuation parameter associated with each of the plurality of file block placement options and selecting one of the plurality of file block placement options based at least in part on the cost valuation parameter associated with each file block placement option.

In another aspect a computing device is provided for file block placement in a distributed file system network that includes a plurality of network nodes the computing device comprising a memory configured to store data and processing instructions and a processor configured to retrieve and execute the processing instructions stored in the memory. The processing instructions cause the processor to perform the steps of accessing a file block placement option for placement of a file block in at least one data storage node in the distributed file system network generating a network control instruction set based at least in part on the file block placement option and sending the network control instruction set to a controller node in communication with the distributed file system network.

Other features and advantages of the present invention should be apparent from the following description which illustrates by way of example aspects of the invention.

File block placement in a distributed file system DFS is provided in which network conditions are taken into account when determining the placement of file blocks. In an aspect the determined file block placement is facilitated by utilizing Software Defined Networking SDN enabled networking functions. In an aspect an enhanced DFS block placement algorithm obtains the real time cluster topology from the SDN controller of a software defined network obtains the real time status of the network evaluates the impact of potential block placement combinations on a specific client s SLA and QoS requirements selects an optimal block placement based on the real time cluster topology and network status and optionally allocates resources in the SDN network accordingly in support of the upcoming transfers associated with the block placement selection.

In an aspect each task monitor and storage node pair runs on a dedicated computer. For example a task monitor and a storage node may run on physical computer . Alternatively multiple task monitor and storage node pairs may run simultaneously on a single physical computer. For example a task monitor 1 a storage node 1 a task monitor 2 and a storage node 2 may all run on computer . Computer operating system virtualization such as VMware virtual machines or similar systems may be used to support multiple task monitor and storage node pairs running on a single physical computer. In an aspect one or more of computers may run a file manager node referred to as NameNode in Hadoop process to oversee file system management and determine block file placement among the storage nodes. Alternatively the file manager node function may reside in a dedicated computer such as computer separate from computers running task monitor and or storage node processes.

The computers in the data center can also run other tasks. For example computer may run software defined network SDN controller software to function as a SDN controller for the cluster network of data center and computer may run tasks to operate as a data center management system server e.g. element management system EMS network management system NMS or operations administration and maintenance OAM system to support fault management configuration management accounting management performance management and security management among other tasks. As described above a two tier switch network consisting of ToR switches and core switches is used to connect the computers of the cluster. It should be appreciated that other types of network topologies can also be used for this purpose. For example a three tier switch network may be used that consists of ToR switches End of Row EoR switches and core switches. In such a three tier switches network the ToR switches are connected to the EoR switches and the EoR switches are connected to the core switches. Of course the cluster of data center in is exemplary and other configurations of computer switches and network interconnections may be utilized in practicing aspects of the present invention. A data center may use for example a fat tree or a mesh network architecture. Other data center may have a similar network architecture and may be in communication with data center . In an aspect other data center can participate in file block placement processes described herein.

Computer may also include input output I O module which optionally may be connected by connection s to a display device not illustrated such as a cathode ray tube CRT liquid crystal display LCD light emitting diode LED display organic light emitting diode OLED display or other form of display for displaying information to a computer user. An input device such as for example a keyboard a mouse a pointing device a number of buttons a microphone and or other inputs may also be optionally coupled to computer via I O module for saving information to data storage device and or for communicating information and command selections to processor .

Network interface device is also provided in computer for one or more network connections to other computers switches and devices in data center . Network interface device may include one or more network interfaces that support wired and or wireless connection s and that may communicate via one or more protocols. For example in an aspect network interface device may include one or more wired Ethernet network interfaces for connection s that communicate via transmission control protocol TCP internet protocol IP . In an aspect network interface device may include one or more wireless network interfaces for connection s that may communicate via WiFi Bluetooth LTE WiMAX CDMA OFDM or other wireless protocols. In an aspect computer may receive file blocks from other computers in data center via network interface device and may also send file blocks to other computers in data center via network interface device .

According to an aspect enhanced block placement functionality is performed by computer by processor executing one or more sequences of one or more instructions contained in memory . Such instructions may be read into memory from another machine readable medium such as data storage device or from an external machine readable medium via I O module . In an aspect processor may represent multiple processors arranged in a multi processing arrangement to execute the sequences of instructions contained in memory or received from another source via bus . In an alternative aspect hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of processors hardware circuitry and software.

The term machine readable medium as used herein refers to any medium or device that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media such as a wired or wireless link. Non volatile media include for example optical or magnetic disks such as data storage device . Volatile media include dynamic memory such as memory . Transmission media include coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of electromagnetic waves acoustic waves or light waves such as those generated during radio frequency and infrared data communications. Common forms of machine readable media include for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium a CD ROM DVD any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM an EPROM a FLASH EPROM any other memory device chip or cartridge a carrier wave or any other medium from which a computer can read instructions or data. It should be appreciated that computer may include other known components devices and may be configured in other arrangements while still supporting the implementation of the present invention.

In an aspect file manager node and storage nodes operate in a master slave architecture. In an aspect the file manager node and storage node functionalities are implemented in software designed to run on computers. The file manager node operates as a master that manages the file system namespace and maintains the file system directory tree and the metadata for all the files and directories in the tree. The file manager node manages all the operations such as creating opening closing and renaming files and directories. The file manager node also determines the mapping of files to their component blocks and the mapping of each of the blocks to the storage nodes where they are physically stored. The storage nodes store the file blocks and provide block reading writing access to all users of the DFS service such as data processing administration TaskTracker in Hadoop and DFS import export utilities. Storage nodes periodically report the list of blocks they are storing back to the file manager node in the form of periodic heartbeat and block report messages.

In the example of file block distribution shown in two files home user file1 and home user file2 are stored in the DFS cluster. File manager node stores the mapping of the block IDs associated with each file along with the number of block replicas designated for the blocks of each file. In addition file manager node stores the mapping of each block to the storage nodes in which it is stored based on the designated number of replicas for the file of which that block is a component. As seen in the file home user file1 is broken into block IDs 1 and 3 and each block for this file is replicated 2 times. Similarly the file home user file2 consists of block IDs 2 4 and 5 and each block for this file is replicated 3 times. As shown in the diagram the blocks making up the two files are replicated and stored in storage nodes in the cluster according to the block storage nodes mapping shown in file manager node . As seen in the example shown in block ID 1 of home user file1 is replicated in storage nodes and and block ID 3 of home user file1 is replicated in storage nodes and . Similarly block ID 2 of home user file2 is replicated in storage nodes and block ID 4 of home user file2 is replicated in storage nodes and and block ID 5 of home user file2 is replicated in storage nodes and 

The DFS such as that shown in is designed to support local data processing at the site of the stored blocks such as the MapReduce type of data processing in Hadoop. In an aspect the file blocks stored in a DFS can be read in parallel by multiple processing tasks at the same time. The file manager node of the DFS provides a process monitor such as the MapReduce JobTracker of Hadoop with the location of each file block. The process monitor can use the file block locations to schedule the processing tasks to be performed on the nodes where a replica of a block is available. If a task processing a file block fails the process monitor can reschedule the task to run in a different node containing a replica of the file block.

In this regard the nodes in the cluster may communicate with each other over a TCP IP connection s . The process tracker function the file manager node function and the storage node function expose their functionalities through interfaces such as the Remote Procedure Call RPC call. Each of these functions listens on a pre configured TCP port and responds to the function call received on the TCP socket. For example in Hadoop Java application programming interfaces APIs are provided to encapsulate the RPC interfaces exposed by Hadoop MapReduce and Hadoop distributed file system HDFS . With the Hadoop Java API a data processing task can be programmed in the Hadoop MapReduce framework and such tasks can be easily scheduled to run in multiple nodes in the cluster. Such an API also enables programs to create and access files stored in the cluster without worrying about the internal details of the DFS. A client then uses the API to access the features and capabilities provided by the cluster. Many common utilities for file access and cluster maintenance are also provided.

Rack includes four computers and and a ToR switch . In the example of computer runs a client process enabling it to perform client tasks for a specific user of the distributed file system. In another aspect the client process may be implemented in a computer external to data center but in communication with data center . For example the client process may be a client task that uses the distributed file system to store large data files in the distributed file system or to initiate data processing of data stored in the distributed file system. The client task may be performed on behalf of a user that is the operator of the distributed file system or may be performed on behalf of a user that is external to the distributed file system and is utilizing the distributed file system via a cloud based service. Computer runs a file manager node process enabling it to function as the file manager node in the distributed file system cluster shown in so as to control and track the mapping of files to their component blocks and the designation and mapping of blocks to storage nodes within the cluster. Computer runs a process monitor process enabling it to function as the process monitor in the distributed file system cluster shown in so as to control and monitor data processing tasks that may be distributed among the various task monitors operating in the computers of the cluster. Lastly computer runs an Enhanced Block Placement process enabling it to conduct enhanced placement of file blocks among the storage nodes in the cluster by also taking into account network conditions in the network paths to from the various storage nodes and switches in the cluster.

The three ToR switches and are each connected to both of core switches and for control and routing of data traffic among racks and and for network connection of the cluster to an external network such as the Internet or other data center s . It should be appreciated that the configuration of functions and computers shown in is exemplary and that other arrangements of the various functions within one or more computers are also possible for implementation of aspects of the invention.

When a client creates a new file in the DFS it first requests the file manager node to create an entry in the file manager node metadata to identify the new file. The client then breaks the data of the new file into a sequence of blocks. Starting with the first block of the new file and then block by block the client asks the file manager node for permission to append a new block to the new file in DFS and then the client receives from the file manager node the block ID of the new block and a list of storage nodes where the block is to be replicated. In the example of block creation shown in computer as a client first sends a request for the creation of new block to the file manager node . File manager node then creates a new block ID of BLK1 in its metadata associated with the file and determines that the new block should be replicated to storage node 1 storage node4 and storage node5 and returns this information back to client .

Client then prepares a block write pipeline as follows 1 the client is to send the new block ID and the IDs of other storage nodes storage node4 and storage node5 to the storage node1 and requests storage node1 to prepare to receive the new block 2 storage node1 is to request storage node4 to prepare to receive the new block and the storage node4 is to request the storage node5 to prepare to receive the new block and so on so forth until all designated storage nodes are ready to receive the new block. With the block write pipeline prepared the client begins copies copying the new block to the storage node1 located in computer of rack . As storage node 1 receives the new block it begins copying the received portions of the block to storage node4 in computer of rack and so on until the block is replicated the number of times specified by the designated replication factor for the file. Replicating file blocks in a pipeline fashion accelerates file creation and reduces the amount of processing the client needs to perform to store all replicas of the blocks of file. In the example shown in the client copies the block to storage node1 storage node1 copies the block to storage node4 and storage node4 copies the block to the storage node5.

During file block replication and transfer to the designated storage nodes each file block is divided into smaller portions referred to as packets. Each packet is typically the same size such as 64 Kbytes for example. Once a storage node finishes receiving a file packet of a block from the previous storage node in the pipeline it starts transmitting the file packet to the next storage node in the pipeline without waiting for all other file packets of the file block to be received.

As mentioned above as each block of a file is sent to a storage node for storage it is actually partitioned into smaller uniform size packets for efficient transfer. In step Client sequentially initiates transfer of multiple packets 1 2 . . . N that make up block BLK1 to storage node1 . As depicted in once storage node1 and each subsequent storage node in the designated pipeline for the block receives a packet they then begin transmission of the packet to the next storage node in the pipeline without waiting for receipt of the next packet of that block. Similarly in step as each storage node receives a packet it then sends a packet acknowledgement back to the previous storage node in the pipeline that sent the packet and the previous storage node sends the acknowledgement back to its previous storage node until the packet acknowledgment is finally received at Client . As seen in step as the last packet of the block is received at a storage node the storage node sends a block complete acknowledgement for that block BLK1 back to file manager node and when Client receives the packet complete acknowledgements for all of the packets in the block Client sends a block complete acknowledgement for that block back to file manager node It should be appreciated that the sequence scheme depicted in is exemplary and that other sequence arrangements for writing a block to multiple storage nodes in the DFS may be used to implement aspects of the invention.

In an aspect an enhanced block placement process is used to designate a storage node pipeline for writing of a block that takes into account the state of the network connections in the cluster between the storage nodes and the expected timing requirements of the client among other factors. Through the use of for example software defined network SDN functionality the enhanced block placement algorithm can obtain the real time cluster topology from the SDN controller of the software defined network. The enhanced block placement algorithm can also obtain the real time status of the cluster network evaluate the impact of potential block pipeline combinations on a client s SLA and QoS requirements select an optimal block pipeline based on the real time cluster network topology and network status and optionally allocate resources in the SDN accordingly to efficiently support the upcoming transfer of block data via the designated pipeline.

The enhanced DFS block placement process of module shown in can be implemented as part of the file manager node process the process monitor process or a separate standalone process. Similarly the enhanced DFS block placement process can be executed on the same computer that runs other processes such as file manager node or process monitor or can be executed on a separate dedicated computer as depicted by computer in . The various inputs for enhanced DFS block placement module of are described below.

Block Placement Request In an aspect when a DFS client sends a request to the file manager node of the cluster to create a DFS file block block placement request is also sent to enhanced DFS block placement module from the file manager node. Block placement request includes information related to the request including at least one or more of the following 

Cluster Topology In an aspect enhanced DFS block placement module may obtain cluster topology from a SDN controller or management system or another source and the file manager node of the cluster. The topology may be a map of the cluster and may contain information describing the computers and switches of the cluster and their interconnection via a network. In an aspect at least one or more of the following information may be gathered for each computer in the cluster 

Each computer in the cluster is connected to the network with one or more network ports. For each network port on each computer at least one or more of the following information may be obtained 

For each network node e.g. switch or router at least one or more of the following information may be obtained 

For each port of all the network nodes at least one or more of the following information may be obtained 

Based upon the above information a map of the nodes and connections may be established. The resulting cluster topology can be maintained in various forms such as tables databases etc. Various methods to discover the topology of the cluster and network can be used. The file manager node can get the computer hardware software configuration information and power consumption information from the storage node process that runs on each computer. In an aspect the SDN controller may discover the addresses of the computers in the cluster by observing the traffic generated by the computers. For example a SDN controller can program all of the ToR switches so that all address resolution protocol ARP and dynamic host configuration protocol DHCP packets generated by the computers are copied by the ToR switches to the SDN controller. With all the ARP and DHCP messages received the SDN controller can discover the MAC address and IP address of all the computers as well as the ToR switches and the switches ports to which the computers are connected. The SDN controller can program all of the ToR switches and core switches to use Link Layer Discover Protocol to discover how the ToR switches and core switches are interconnected. Some or all of this information can be used to generate cluster topology which is input to enhanced DFS block placement module .

Network Status The network status is information describing the current state of the cluster network. The network status may include at least one or more of the following information for each network port in each network node 

A traffic flow in a network node identifies a sequence of packets from a source port to a destination port. A traffic flow in a network node usually identifies all the packets generated by a user application such as a DFS file import utility operating on the network node. A user application usually generates many traffic flows in multiple networks nodes. For example when a file is imported to the DFS the DFS file import utility creates many DFS file blocks in the cluster. A file block replication pipeline is recreated to replicate each block. Two traffic flows are created on all the network nodes connecting the storage nodes in the pipeline one for each direction of the traffic on the pipeline. For each active traffic flow in each network node at least one or more of the following configuration and status information may be obtained 

In an aspect the above configuration and status information may be collected from an SDN controller such as SDN controller of which may track this information using the OpenFlow protocol. The SDN controller can query the network nodes for network status information as needed and can also instruct the network nodes to report their status information to the SDN controller proactively. For example a network node can be programmed to report its status periodically. Alternatively a network node can be programmed to report its current status when its status has changed by a certain threshold amount compared with its last report status.

Storage Status The storage status includes information about the current storage state of all of the computers in the cluster. At least one or more of the following information is obtained for each computer 

In an aspect the DFS file manager node obtains storage space utilization information based on the storage node configuration information and the storage node status information provided in the heartbeat periodic messages and block report messages sent by each of the storage nodes in the cluster.

Processing Status The processing status is the information about the jobs currently performed by all the computers in the cluster. At least one or more of the following information is maintained and provided in the Processing Status for each job performed in the cluster 

On each computer at least one or more of the following information is maintained and provided in the Processing Status 

In an aspect the Processing Status information can be gathered from the DFS file manager node and from the process monitor.

SLA Policy QoS requirements In an aspect through virtualization multiple virtual DFS clusters can be created on the same cluster of physical computers in a data center. The Service Level Agreement SLA Policy QoS describes how traffic for different users will be queued and processed by the network and describes the performance guarantees promised to different users. Accordingly a data center operator may offer different service levels possibly described by an SLA with certain QoS targets to account for different user needs and budgets. For example a Bronze SLA level user may purchase the services of a virtual DFS cluster with a best effort type of service that does not have any QoS guarantee a Silver SLA level user may use the services of a virtual DFS cluster with prioritized traffic processing but without any QoS performance guarantee and a Gold SLA level user may use a virtual DFS cluster with guaranteed network throughput latency and jitter QoS performance guarantees at a higher monetary cost. In an aspect the table below describes an alternative example where different service level agreements SLAs are guaranteed with different QoS targets and different processing priorities guaranteed.

Block Placement Policy In an aspect the block placement policy includes a set of rules specifying how many replicas of a DFS block should be created and where the replicas of the block may be placed. In one example a default block placement policy may specify that three replicas of a block should be placed in at least two different racks of the cluster and that two of the three replicas should be located in the same rack. In another example a block placement policy may specify that five replicas of a block be placed in at least three racks and that at least two replicas should be placed in the same rack.

Returning to the enhanced DFS block placement module generates two outputs Placement Decision and Network Control . Placement Decision indicates a sequence of storage nodes where the block should be replicated. For a block in a file configured with a replication factor R Placement Decision is a sequence of R computer IDs storage nodes N N . . . N in which each computer ID identifies a storage node in the cluster. The generation of Placement Decision by enhanced DFS block placement module is discussed in more detail below.

In an aspect Network Control includes instructions for the SDN controller to prepare the cluster network for the traffic that will be generated for transferring and storing blocks according to the block replication pipeline specified in the Placement Decision. For example Network Control may include instructions for the SDN controller to create flow entries in the network nodes so that the required block replication network traffic is transported in one or more network paths that avoid congested network segments. Alternatively Network Control may include instructions for the SDN controller to assign or adjust the priority of a traffic flow associated with the replication of a DFS file block. In another example the Network Control can include instructions for the SDN controller to activate and optionally reserve additional network capacity by aggregating a new network connection between a top of rack ToR switch and a core switch to avoid potential congestion that might be caused by required block replication traffic. Additional network capacity may be provisioned for example using the Link Aggregation Control Protocol LACP as defined in IEEE 802.1ax between two nodes. Network capacity may be reserved for the upcoming transfer using for example the Resource Reservation Protocol RSVP or Resource Reservation Protocol Traffic Engineering RSVP TE protocols.

In an aspect network capacity may be reserved using explicit traffic policing algorithms in SDN enabled network nodes. For example in a SDN enabled network node that supports OpenFlow Spec. 1.3 a meter table with ID meter id can be created to drop any packet after the data rate exceeds a threshold. Additionally a flow entry with an instruction Meter meter id can be added to the flow table to match each direction of the TCP traffic generated by the file block replication pipeline. The new flow entry and meter table together may effectively limit the bandwidth available to the file block replication traffic flow. Network capacity may be effectively reserved by a enforcing bandwidth limits for all of the traffic flows and b making sure the total bandwidth limit of all the traffic flows in each network node does not exceed the total output bandwidth for egress network connection.

In step the enhanced DFS block placement module retrieves the network topology and real time network status from for example the SDN controller of the cluster or from one or more other sources of network information in the cluster e.g. a network or element management system . In an aspect the enhanced DFS block placement module may obtain this information in real time when the client requests the creation of a block. In another aspect the enhanced DFS block placement module may request this information from the SDN controller periodically and then use the last updated network topology and network status when the client requests the creation of a block. In another aspect the SDN controller may send this information to the enhanced DFS block placement module periodically or at a time when the network topology or network status changes. For example a node addition or removal in the cluster may trigger the SDN controller to send an updated topology to the enhanced DFS block placement module. Similarly the determination that a bandwidth utilization of a network link crosses a threshold e.g. 95 utilized for 1 minute may trigger a network status update. Hybrid solutions also may be used. For example the network topology may be sent by the SDN controller only when network topology changes are made but the network status may be queried by the enhanced DFS block placement module as required. With the network topology and real time network status the enhanced DFS block placement module can evaluate and compare different block placement options.

In step the enhanced DFS block placement module obtains the current storage status and processing status from the file manager node and from the process monitor of the cluster. In other aspects the enhanced DFS block placement module may obtain the current storage status and processing status directly from each computer in the cluster.

Next in step the enhanced DFS block placement module generates a list L of possible block placement options that satisfies the current placement policy and the SLA QoS requirements for the user. A block placement option indicates the R computers in which to store the block replicas and indicates the networking nodes and their network ports used to transport the block replication traffic.

In one aspect the enhanced DFS block placement module may first generate a list Lof all possible block placement options using graphs. The network topology can be used to create a graph using all of the computers and network nodes as graph vertices and the network connections of the cluster as graph edges. Every path connecting the client node and R computers in the graph is a possible block placement option. For example with reference to the block replication placement shown in a possible path Path1 is formed by connecting the following computers and network nodes in the order shown below 

A different path Path2 with the same 3 storage nodes above can be formed by using core switch 2 instead of core switch 1 in the order shown below 

Path1 and Path2 in the above example are both possible block placement options. All of the possible block placement options in a graph can be created using known graph traversal algorithms.

From the list Lof all possible block placement options the enhanced DFS block placement module removes those options that are not consistent with the block placement policy resulting in list L. For example if the block placement policy requires that the replicas of a block be placed in at least two racks the options that contain all of the R computers in a single rack will be removed. In another example if the block placement policy requires that the replicas of a block be placed in at least three racks then all the options that contain all of the R computers in a single rack or in only two racks will be removed.

In an aspect the block placement options that are not consistent with block placement policy can also be excluded from the list of all possible block placement options as it is being generated. For example if the list of all possible block placement options is being created using a graph traversal algorithm and the block placement policy requires that the replicas of a block be placed in at least two racks and the current path being traversed already includes two computer nodes in a single rack the graph traversal algorithm can remove all other computers in the same rack from its set of computer nodes to be traversed and as a result the graph traversal algorithm generates a list of placement options that are consistent with the block placement policy.

The enhanced DFS block placement module next removes from Lthose block placement options that would cause any user s SLA Policy QoS guarantee to be violated if the DFS file block is replicated through the network path described by that block placement option resulting in list L. For each block placement option the enhanced DFS block placement module examines the network status on all network nodes used in the block placement option and determines if the SLA policy QoS guarantee for any current traffic flow in any network node would be violated. If the SLA policy QoS guarantee for any current traffic flow would be violated on any network node by replicating the DFS file block through the network path the block placement option will be removed. For example referring to the block placement depicted in the network status for ToR switch 3 core switch 1 ToR switch 1 ToR switch 2 will be examined for the block placement option Path1 described earlier. On each of these network nodes the network status information will provide detailed information on each traffic flow along the network path. For example ToR switch 1 may contain network status information such as the following 

In Table 2 above port 1 2 and 3 of ToR switch 1 are the ports that connect to storage node 1 2 and 3 respectively and port 10 of ToR switch 1 is the port that connects to Core Switch 1. In this example CustomerA CustomerB and CustomerC have services with different SLA policy QoS guarantees and as a result the traffic flows FLOW 1 FLOW 2 and FLOW 3 are guaranteed 100 Mbps 200 Mbps and 400 Mbps of bandwidth on egress port 10 respectively. Since placement option Path1 requires replicating the block from storage node 1 to storage node 4 a new traffic flow from port 1 to port 10 will need to be added in ToR switch 1 and the new traffic flow will only have a maximum of 300 Mbps available if the egress port can only support a maximum of 1 Gbps. If the SLA policy QoS guarantee for the current customer requires 400 Mbps reserved bandwidth placement option Path1 will be removed because it would violate the current customer s SLA QoS guarantees. In an aspect a placement option that would violate the current customer s SLA QoS guarantees is marked as inadequate and in the case that all placement options are marked inadequate the placement option that least violates the current customer s SLA QoS guarantees may be selected.

In an aspect the block placement options that would cause any user s SLA Policy QoS guarantee to be violated can also be excluded from the list of all possible block placement options as it is being generated. For example when the list of all possible block placement options is created using a graph traversal algorithm the enhanced DFS block placement module examines the network status for each of the network nodes to be traversed from the current network path and determines if the SLA policy QoS guarantee for any current traffic flow in the network node would be violated. If the SLA policy QoS guarantee for any current traffic flow would be violated the network node is removed from the set of nodes to be traversed. As a result the graph traversal algorithm generates a list of placement options that would not violate any user s SLA Policy QoS guarantee.

It should be appreciated that the order of the above described sub steps associated with step may be changed. For example the block placement options that violate users SLA policy and or QoS guarantee requirements can be removed first and then the block placement options that violate the block placement policy can be removed. In an aspect some or all of the sub steps may be combined with subsequent steps in the process. Similarly some of the sub steps may be eliminated such as the filtering of the list of block placement options by SLA and or QoS. In addition it should be appreciated that other algorithms can be utilized in enhanced DFS block placement module for generating a list L of block placement options. In an aspect enhanced DFS block placement module may generate only a partial list L of block placement options or enhanced DFS block placement module may generate a truncated list L of block placement options by stopping after a fixed or variable time interval before all possible block placement options are generated. In an aspect the functions of steps and discussed in detail below may be combined such that a cost function is evaluated to determine a cost valuation parameter for each possible placement option before it is placed in the list L and if the cost valuation parameter for that possible placement option exceeds a threshold then the possible placement option is not included in the list L. Otherwise the possible placement option is included in the list L if it also satisfies the current block placement policy and the current SLA QoS requirements.

In step the enhanced DFS block placement module evaluates a cost function to determine a cost valuation parameter for each of the block placement options in the list generated in step . A cost function cost is defined so that the enhanced DFS block placement module can evaluate and rank different block placement options quantitatively in order to maximize performance. Performance in this context may refer to one or more block placement service characteristics such as placement speed reliability repeatability and effect of the placement on the cluster. For a cluster of N nodes with each node assigned a unique ID the inputs to the cost function may include one or more of the following items 

The cost function cost returns a quantitative value a cost valuation parameter indicating the cost of replicating the block for the current customer according to the current placement option being considered. The returned cost valuation parameter may be calculated via a summation of the three terms as shown below.

Where cost costand costindicate the network cost storage cost and processing cost associated with replicating the block and weight weightand weightare coefficients that can be used to adjust how the network cost storage cost and processing cost contribute to the output of the cost function cost . Different functions for cost costand costmay be defined so that cost may indicate any combination of the network cost storage cost and or processing cost. For example cost storage and costmay be defined to always return 0 so that cost only includes the network cost costassociated with the current block placement option. In another example costand costmay be defined to always return 0 so that cost only includes the storage cost cost associated with the current block placement option.

Different functions for cost costand costmay be created or tuned to work support different objectives. For example if the objective is to minimize network traffic in the cluster the output of costmay be the number of network segments or links used to transfer the block replication traffic cost BPR CPO CT NS SS PS hop count CPO where hop count CPO returns the number of network hops used in the current block placement option CPO under consideration. In an aspect as a variation of this example if network traffic involving the core switches in the data center requires higher monetary cost than traffic involving ToR switches the cost function can use a higher weight for traffic that would need to travel across the core network switches and lower weight for the traffic that would need to travel across the ToR switches.

In another aspect the objective is to balance the storage utilization across the cluster and so costmay be defined as 

where average utilization CPO SS is the average storage utilization of all the computer nodes in the cluster I I . . . I are the IDs of the R computer nodes in the current placement option storage used I is the total amount of storage used in computer node Iand total storage I is the total amount of storage installed in computer node I.

In another aspect the placement objective is to minimize replication time and so the output of costmay be the time it takes to complete the placement of the block replicas. Since the block is replicated in a pipeline fashion the block is transferred across all of the network hops as specified in the current block placement option. The time it takes to complete the block replication is the time it takes to transfer the block across the network hop with the lowest bandwidth available to the current customer. Accordingly in this aspect costmay be defined as 

lowest available bandwidth CPO the lowest available bandwidth to the current customer on all the network hops used in the current block placement option.

In an aspect the lowest available bandwidth may be obtained through the SDN services by retrieving network capacity reservation information via a SDN function call. In another aspect the lowest available bandwidth may be obtained through the SDN services by retrieving average network percentage utilization information via a SDN function call. In another aspect the lowest available bandwidth may be obtained from utilization of a network diagnostic probe from which available bandwidth information can be determined.

In a further aspect the cost function may also be defined to minimize the energy consumption of the block replication associated with the block placement option. In this case the cost functions cost costand costmay be calculated by summing the amount of energy e.g. Joules or power e.g. Watts required to transfer store and process the data block replicas associated with the current block placement option CPO .

For example costmay be a summation of the energy or power used per bit transferred by each port of each network node participating in the CPO. In another example costmay be a summation of the energy or power used per byte stored by each storage device e.g. hard disk drive solid state drive etc. participating in the CPO. Further costmay be a summation of the energy or power used per processing unit. For example costmay be defined in terms of Joules per million instructions per second MIPS or Watts per million floating point operations per second MFLOPS .

In an aspect the above energy power information may be obtained from the device manufacturer and stored in each device or in the device s management system. In an aspect the information may be provided to the enhanced DFS block placement module via the cluster topology input from an SDN controller an element management system or an alternative management method.

In an another aspect costmay be calculated by summing the average or maximum power consumption of the device s containing each network port used in the CPO with an equation for network cost as follows cost in which n the number of network ports involved in the CPO and P the average or maximum power dissipation e.g. Watts of the device containing port i.

For example consider two possible paths in which both paths traverse a total of 6 ports through two switches as follows 

In another aspect the network cost may be calculated as the sum of the average or maximum power consumption of the device s containing each network port normalized by the number of device ports as follows cost numports in which P the average or maximum power dissipation e.g. Watts of the device containing port i and numports the number of network ports on device containing port i.

In another aspect the cost function may be calculated by summing the incremental power consumed by each port used in the CPO. This may be calculated for example using the following equation cost numports in which 

Further the cost function may be normalized based on port speed as follows cost numports portspeed in which 

In an aspect the idle average and maximum power consumption specifications for devices in the cluster may be obtained from the device manufacturer and may be stored on a network device or within a network management system. These specifications may be provided to the enhanced DFS block placement module via the cluster topology input from an SDN controller element management system or other management entity in the cluster. One skilled in the art will appreciate that the device containing port i may refer to various forms factors including but not limited to rack mounted enclosure network cards blades network modules SFP small form factor pluggable and NIC network interface card .

In another aspect the objective is to balance the network utilization across the cluster and so costmay be defined as cost BPR CPO CT NS SS PS weight CT link utilization average network utilization CT NS where L L . . . L are the network links used in the block replication pipeline for the current placement option link utilization L is the current bandwidth utilization of network link L average network utilization CT NS is the average network utilization of all the network links in the cluster and weight CT L is a coefficient for network link L. In this definition of cost weight CT L allows different network links to contribute differently to the output of cost depending on the location and or type of network link Lin the cluster. For example a first network link between a computer and a ToR switch and a second network link between a ToR switch and a core switch can each have a different weight and thereby contribute differently to the output of cost. In an aspect link utilization and average network utilization may be normalized by dividing current link utilization e.g. in Mbps by the maximum link capacity e.g. the port speed in units of Mbps thereby allowing a cost function to be evaluation for networks with different link speeds.

In an aspect other inputs may be included in the calculation of the cost functions. For example if the cost functions attempt to account for monetary cost that depends on when the block is replicated the current time can be added as an input to the cost functions. Similarly the cost function may extended to include the financial cost of using a particular hop or network node port because the operating cost of each device may differ especially in a network which may have components managed by more than one service provider. In another aspect different brands or models of network switches maybe be used together in the cluster network at the same time and some brands or models of network switches may be less reliable than the others due to brand reputation well known benchmarks observed performance etc. and it is preferable to use the more reliable network switches. The brand and model of the network switches and their reliability metrics may be included in the calculation of the cost function so that the cost of using less reliable network switches is higher and the cost of using more reliable network switches is lower.

In an aspect the costmay be determined based on processing capabilities associated with each processing unit which may be measured in MIPS Megaflops or another indicator of such processing capabilities. In an aspect the costmay be determined based on the current utilization before implementation of the placement option of the processing capabilities associated with each processing unit which may be reported by the operating system OS of the processing unit.

In an aspect functions for cost costand costmay be created or tuned to support multiple objectives. Mathematical terms representing each objective may be weighted by a coefficient set to reflect by each objective s relative importance and then summed to form the final cost function e.g. cost . For example costmay be calculated to include both the time it takes to complete the block replication and the sum of the average or maximum power consumption of the device s containing each network port used in the CPO. Such an equation for network cost is provided as follows 

Of course it should be appreciated that the above descriptions of evaluating a cost function to determine a cost valuation parameter associated with a block placement option are exemplary and that other known cost function algorithms and models may be used as well.

Returning to in step the enhanced DFS block placement module selects the placement option with the lowest cost based on the cost valuation parameters determined from the cost function evaluations in step . In an alternative aspect the enhanced DFS block placement module may select the placement option with the lowest cost from the first N placement options that have a cost lower than a threshold. In an aspect the placement options may be sorted by cost by using a sorting algorithm. Alternatively status variables may be maintained to track the current minimum cost and the associated block placement option as the cost for each placement option is determined in step . As soon as the cost of a block placement option is determined to be higher than the current minimum cost further cost calculation for the current placement option may be stopped. Then the cost of the next block placement option is determined in the same manner resulting in the block placement option s with the lowest cost or n lowest costs being known at the completion of the cost determinations in step .

In step the enhanced DFS block placement module generates network control instructions for the SDN controller to prepare the network for transfer of the block replicas for storage according to the selected block placement option from step . In an aspect the network control instructions may be directed to an OAM or EMS system device in the cluster. In an aspect the enhanced DFS block placement module may generate network control instructions to direct the SDN controller to generate OpenFlow instructions for switches routers or other devices in the network. In an aspect the enhanced DFS block placement module may generate network control instructions to request the SDN controller to establish OpenFlow flow entries in the network nodes so that the block replication network traffic follows the specific path as defined by the selected block placement option. For example if the selected block placement option is Path2 as described above in step the enhanced DFS block placement module may generate network control instructions to request the SDN controller to set up flow entries in ToR switch 3 core switch 2 ToR switch 1 and ToR switch 2. In this example flow entries in core switch 2 are established so that 

In an aspect the enhanced DFS block placement module may update the stored network status information so that flow entries created in this step are included with the latest status information such as customer ID job ID and other flow configuration and reservation information. In an aspect the enhanced DFS block placement module may generate network control instructions to modify existing OpenFlow entries in different network nodes through the SDN controller in order to accommodate the incoming block replication traffic. The enhanced DFS block placement module may generate network control instructions to modify processing priorities of existing traffic flows in different network nodes. For example when a new block replication is requested from a client with higher service level and there exist other traffic flows being processed for clients with a lower service level the enhanced DFS block placement module may generate network control instructions to decrease the priorities for the existing traffic flows so that the traffic for the new block replication receives prioritized processing.

In an aspect the enhanced DFS block placement module may modify other QoS parameters such as bandwidth reservations on existing traffic flows so that the traffic flow for the new block replication can be assigned appropriate QoS parameters. For example if a new traffic flow from port 4 to port 10 needs to be created for CustomerD in the ToR switch 1 as shown above in Table 2 and the new traffic flow must be reserved at a bandwidth of 400 Mbps and according to CustomerC s SLA Policy QoS guarantee the bandwidth reserved for FLOW 3 can be reduced to 300 Mbps the enhanced DFS block placement module may create a new traffic flow FLOW 4 for CustomerD and at the same time modify traffic flow FLOW 3 to reduce its bandwidth reservation from 400 Mbps to 300 Mbps. The table below shows the modified existing traffic flow FLOW 3 and the new traffic flow FLOW 4 for this example.

In an aspect the enhanced DFS block placement module may also reconfigure the network for efficient accommodation of traffic associated with the selected placement option. For example the enhanced DFS block placement module may generate network instructions to reconfigure how the ToR switches are connected to the core switches. Typically a ToR switch is connected to a core switch through multiple network connections and those networks connections can be aggregated as multiple trunk groups. Network traffic from to different computer nodes or different customers can be directed to different truck groups. In an aspect the enhanced DFS block placement module may generate network instructions to dynamically adjust how many network connections will be aggregated in each trunk group in order to increase decrease the link capacity of each trunk group.

In an aspect the enhanced DFS block placement module may generate network instructions to move a network connection from an underutilized trunk group to a heavily utilized trunk group in order to increase the link capacity in the heavily utilized trunk group. are block diagrams depicting reconfiguration of network connections between a core switch and a top of rack switch in accordance with aspects of the invention. show a cluster which may be for example in the distributed file system network of . Cluster includes a ToR switch is connected to a core switch through 8 Gigabit Ethernet connections and the 8 connections are configured as trunk group A and trunk group B . In trunk group A and trunk group B each include 4 Gigabit Ethernet connections each providing a link capacity of 4 Gbps. When the enhanced DFS block placement module determines that the link capacity of trunk group B should be increased to 5 Gbps and trunk group A currently utilizes 3 Gbps or less the enhanced DFS block placement module reconfigures the network as shown in in which trunk group A has lost one Ethernet connection and trunk group B has added one Ethernet connection.

Returning to as described above with regard to step the network control instruction set may configure or modify different elements in the cluster and or different performance characteristics associated with different elements traffic and users of the cluster. It should be appreciated that the descriptions of network instructions provided herein are exemplary and that such instructions may be performed in other orders or combinations.

In step the enhanced DFS block placement module sends the determined network control instructions to the controller node which may be an SDN controller or may be an OAM or EMS system device operating in or in connection with the cluster. In this manner the controller node may operate on the instructions and configure the network accordingly to accommodate the network traffic associated with the selected block placement option. In step the enhanced DFS block placement module returns the sequence of computer nodes storage nodes specified in the selected block placement option to the file manager node and the file manager node then returns the sequence as the block placement decision to the DFS client that initiated the request for a new block to the file manager node.

In aspects described above the enhanced DFS block placement module executes the steps of every time a new file block is requested. In another aspect the enhanced DFS block placement module may be executed for multiple new file blocks at a time or even for all file blocks of an entire new file at a time. For example when a DFS client imports a file from a different file system to DFS it knows the size of the original file and therefore the number of blocks that need to be created and replicated to the DFS cluster. The DFS client may provide the size information to the enhanced DFS block placement module which uses the steps described above to determine and store the selected block placement option for each of the blocks all at once.

In an aspect the selected block placement option can be returned to the DFS client and the corresponding network controls can be sent to the SDN controller for each block as it is created and replicated. In another aspect the enhanced DFS block placement module may use the steps described above to determine and return the selected block placement option to the DFS client and to send network control instructions to the SDN controller for a number of blocks at a time and the number of blocks may be determined by the DFS client or by the enhanced DFS block placement module in accordance with its configuration and or the configuration and or the real time status of the cluster network.

The foregoing systems and methods and associated devices and modules are susceptible to many variations. Additionally for clarity and concision many descriptions of the systems and methods have been simplified. For example the figures generally illustrate one of each type of network device but a network system may have many of each type of device.

As described in this specification various systems and methods are described as working to optimize particular parameters functions or operations. This use of the term optimize does not necessarily mean optimize in an abstract theoretical or global sense. Rather the systems and methods may work to improve performance using algorithms that are expected to improve performance in at least many common cases. For example the systems and methods may work to optimize performance judged by particular functions or criteria. Similar terms like minimize or maximize are used in a like manner.

Those of skill will appreciate that the various illustrative logical blocks modules units and algorithm steps described in connection with the embodiments disclosed herein can often be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular constraints imposed on the overall system. Skilled persons can implement the described functionality in varying ways for each particular system but such implementation decisions should not be interpreted as causing a departure from the scope of the invention. In addition the grouping of functions within a unit module block or step is for ease of description. Specific functions or steps can be moved from one unit module or block without departing from the invention.

The various illustrative logical blocks units steps and modules described in connection with the embodiments disclosed herein can be implemented or performed with a processor such as a general purpose processor a multi core processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor can be a microprocessor but in the alternative the processor can be any processor controller microcontroller or state machine. A processor can also be implemented as a combination of computing devices for example a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The steps of a method or algorithm and the processes of a block or module described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium. An exemplary storage medium can be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor. The processor and the storage medium can reside in an ASIC. Additionally device blocks or modules that are described as coupled may be coupled via intermediary device blocks or modules. Similarly a first device may be described a transmitting data to or receiving from a second device when there are intermediary devices that couple the first and second device and also when the first device is unaware of the ultimate destination of the data.

The above description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles described herein can be applied to other embodiments without departing from the spirit or scope of the invention. Thus it is to be understood that the description and drawings presented herein represent a presently preferred embodiment of the invention and are therefore representative of the subject matter that is broadly contemplated by the present invention. It is further understood that the scope of the present invention fully encompasses other embodiments that may become obvious to those skilled in the art and that the scope of the present invention is accordingly limited by nothing other than the appended claims.

