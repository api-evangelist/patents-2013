---

title: Restricted transmogrifying driver platform
abstract: A restricted transmogrifying driver platform is described herein. In one or more implementations, a platform is provided that enables a restricted execution environment for virtual private network (VPN) drivers and other transmogrifying drivers. The platform may be implemented as an operating system component that exposes an interface through which drivers may register with the platform and be invoked to perform functions supported by the platform. The restricted execution environment places one or more restrictions upon transmogrifying drivers that operate via the platform. For instance, execution may occur in user mode on a per-user basis and within a sandbox. Further, the platform causes associated drivers to run as background processes with relatively low privileges. Further, the platform may suspend the drivers and control operations of the driver by scheduling of background tasks. Accordingly, exposure of the transmogrifying drivers to the system is controlled and limited through the platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075985&OS=09075985&RS=09075985
owner: Microsoft Technology Licensing, LLC
number: 09075985
owner_city: Redmond
owner_country: US
publication_date: 20130531
---
Currently transmogrifying drivers that effectuate transformations of underlying data from one form to another such as virtual private network VPN drivers may have system wide privileges high priority and access to sensitive data and therefore may pose considerable security risks. Due in part to these concerns users may be reluctant to install such drivers and associated software on their devices. For example users may be unwilling to download and install a VPN plugin from an online application store due to the presumed risks of this type of product. Accordingly commerce and distribution of products that contain such transmogrifying drivers may be hampered.

A restricted transmogrifying driver platform is described herein. In one or more implementations a platform is provided that enables a restricted execution environment for virtual private network VPN drivers and other transmogrifying drivers. The platform may be implemented as an operating system component that exposes an interface through which drivers may register with the platform and be invoked to perform functions supported by the platform. The restricted execution environment places one or more restrictions upon transmogrifying drivers that operate via the platform. For instance execution may occur in user mode on a per user basis and within a sandbox. Further the platform causes associated drivers to run in background processes with relatively low privileges. Further the platform may suspend the drivers and control operations of the drivers by scheduling of background tasks. Accordingly exposure of the transmogrifying drivers to the system is controlled and limited through the platform.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Due in part to security concerns with virtual private network VPN drivers and other transmogrifying drivers users may be reluctant to install products that employ transmogrifying drivers on their devices. Accordingly commerce and distribution of products that contain such transmogrifying drivers may be hampered.

A restricted transmogrifying driver platform is described herein. In one or more implementations a platform is provided that enables a restricted execution environment for virtual private network VPN drivers and other transmogrifying drivers. The platform may be implemented as an operating system component that exposes an interface through which drivers may register with the platform and be invoked to perform functions supported by the platform. The restricted execution environment places one or more restrictions upon transmogrifying drivers that operate via the platform. For instance execution may occur in user mode on a per user basis and within a sandbox. Further the platform causes associated drivers to run as background processes with relatively low privileges. Further the platform may suspend the drivers and control operations of the driver by scheduling of background tasks. Accordingly exposure of the transmogrifying drivers to the system is controlled and limited through the platform.

In the following discussion an example operating environment is first described that may employ the techniques described herein. Next example details and techniques are described which may be implemented in the example environment as well as other environments. Consequently performance of the techniques is not limited to the example environment and the example environment is not limited to performance of the example techniques. Lastly example systems and devices are described that may be employed to implement one or more embodiments.

The client device and service provider may be implemented by one or more computing devices and also may be representative of one or more entities. A computing device may be configured in a variety of ways. For example a computing device may be configured as a computer that is capable of communicating over the network such as a desktop computer a mobile station an entertainment appliance a set top box communicatively coupled to a display device a wireless phone a game console and so forth. Thus the computing device may range from full resource devices with substantial memory and processor resources e.g. personal computers game consoles to a low resource device with limited memory and or processing resources e.g. traditional set top boxes hand held game consoles . Additionally although a single computing device is shown in some instances the computing device may be representative of a plurality of different devices such as multiple servers utilized by the service provider .

The client device is further illustrated as including an operating system . The operating system is configured to abstract underlying functionality of the underlying hardware to applications that are executable on the client device . For example the operating system may abstract processing memory network and or display functionality such that the applications may be written without knowing how this underlying functionality is implemented. The applications for instance may provide data to the operating system to be rendered and displayed by a display device without understanding how this rendering will be performed.

In accordance with techniques described herein the client device is also illustrated as including transmogrifying drivers and a driver security platform that may be configured in various ways to impose restrictions upon operation of the transmogrifying drivers . The transmogrifying drivers are representative of various kinds of application modules plugins and or other third party programs that may be managed and controlled by the driver security platform described herein. Generally the transmogrifying drivers effectuate transformations of underlying data from one form to another. One example type of transmogrifying drivers is virtual private network VPN drivers that transform data packets e.g. encapsulate decapsulate into a proprietary form for secure VPN communications between a VPN client and VPN server. Other examples may include but are not limited to network interface card drivers to packetize depacketize data anti virus drivers to recognize and handle malware graphics processing drivers to process convert graphics printer drivers to translate application data into a printable format for a printer and so forth. Techniques discussed herein are also applicable to VPN tunnels and other Internet Protocol IP tunnels data pipes transport streams firewalls and so forth.

In a traditional model transmogrifying drivers may have system wide privileges high priority and access to sensitive data. Generally transmogrifying drivers are closely coupled to the operating system and are run in kernel mode. Thus transmogrifying drivers may include and or be referred to as kernel mode drivers system drivers and or class drivers. As transmogrifying drivers typically have elevated privileges and full system access in kernel mode these kinds of drivers pose a considerable security risk and may become targets implements employed by malicious parities for illegitimate purposes. Transmogrifying drivers that freely operate with unrestricted privileges and access may also negatively impact processing resources and battery life. Moreover distribution of transmogrifying drivers via an application store or other online channel may be hindered due at least in part to the concerns just enumerated.

However in accordance with inventive principles described herein a restricted execution environment may be established to enable execution of transmogrifying drivers in user mode in a restricted manner that alleviates the foregoing concerns. For example by controlling transmogrifying drivers within a restricted execution environment as discussed above and below security is imposed on operation of the drivers that is effective to make the system more reliable decrease resource consumption of driver operations prevent exploitations of the system via the drivers enable per user installations and accordingly make distribution of drivers through Internet channels a viable option.

In particular the driver security platform represents functionality of the client device to instantiate a restricted execution environment for transmogrifying drivers . Functionally represented by the driver security platform may be implemented in various ways. In some implementations the driver security platform may be provided as an operating system component however the driver security platform may also be implemented as a standalone component as illustrated. As depicted the driver security platform may include or otherwise make of a driver manager module an application container a background manager and an event broker to implement various aspects of the platform.

The driver manager module represents functionality of the platform to recognize and manage transmogrifying drivers associated with the platform. The driver manager module may control execution of the transmogrifying drivers in user mode on a per user basis through an application container or sandbox established for each driver. The application container defines a limited set of tasks that may be perform for individual drivers and restricts operations to the defined set of tasks. The application container further provides double walled sandboxed isolation meaning access is restricted both from inside the container into the system and from external entities into the container. This prevents external entities from hijacking and or gaining control over sandboxed drivers within application containers.

The background manager is operable to manage the application containers and associated drivers using background processes. This may include but is not limited to instantiating background processes for the containers and handling of task scheduling for background processes. The background processes may be assigned low privilege tokens or comparable control data that conveys relatively few privileges and access rights. In other words the driver security platform associates a relatively low priority with transmogrifying drivers that limits access and or freedom of operation. The background manager may also cause suspension of the background processes for transmogrifying drivers when not in use which further restricts the ability of transmogrifying drivers to perform work other than at the specific direction of the user and or driver security platform . For example a transmogrifying driver may be suspended other than when a set of tasks specifically defined for the driver or type of driver are being performed at the direction of the driver manager module .

The background manager may be implemented as a component of the driver security platform as illustrated. Alternatively the background manager may be configured as operating system OS component designed to manage and coordinate operations of a plurality of applications using background processes including the transmogrifying drivers . In this approach the driver security platform may be configured to interact with the background manager to take advantage of integrated functionality of the OS to support background operation of applications.

The event broker represents functionality to generate events to broker interaction between a driver and system services to perform designated tasks that are enabled with respect to a transmogrifying driver and the corresponding application container . In particular the event broker may operate to produce events that cause performance of tasks that are scheduled by the background manager . In some implementations this involve generating appropriate calls to code entry points such as system application programming interfaces APIs or other suitable interfaces. The event broker may be further configured to produce events to broker interactions with user interface elements exposed by the computing device such as display screen and UIs associated with the OS a browser a VPN client application and or other applications. A transmogrifying driver that is sandboxed in the manner described may be restricted from direct manipulation of UI components and elements. Accordingly the event broker may operate as a surrogate that enables interaction and coordination with UI components on behalf of the transmogrifying drivers without undue security exposure.

As further illustrated in the service provider may be configured to manage and provide client access to an application store service . The application store service represents a particular one of the resources that may be provided by a service provider to clients over the network . The application store service is configured to enable user access to an online application database e.g. an application marketplace to browse select purchase and or download applications. Applications from a variety of developers may be made available to clients through application store service .

In accordance with techniques discussed herein the application store service may be selected as a distribution mechanism for transmogrifying drivers that are controlled via a driver security platform . This is made possible due to the additional security measures restrictions and performance gains that are attained using the restricted execution environment s instantiated for driver via the driver security platform . In one approach transmogrifying drivers may be packaged for inclusion in the application marketplace in a designated known format associated with the driver security platform . A driver package containing a corresponding transmogrifying driver in the designated format may be made available via the application store service and may be downloaded for use by a client device over the network as represented in . In one approach the driver package may employ a proprietary format such as .appx or another comparable store specific or provider specific format associated with the application store service . In addition or alternatively the package may be configured to contain an identifier key code file extension or other suitable identifying data to facilitate recognition of the driver package as containing a transmogrifying driver that is supported by the driver security platform .

At the time of installation the driver security platform by way of the driver manager module or otherwise may recognize the driver package and or format as being associated with the driver security platform based on suitable identifying data included with the package. Accordingly in response to installation of a driver package in the recognized format the driver manager module may operate to register the corresponding transmogrifying driver with the platform and thereby effectuate the restrictions and additional security for the driver enabled through the driver security platform .

Additional details regarding these and other aspects of a restricted transmogrifying driver platform are discussed in relation to the example use scenario depicted in generally at . In this example an application container or sandbox is illustrated as containing a virtual private network VPN driver although other drivers plug ins and code are also contemplated as noted herein. The application container is configured to enable a limited set of tasks for the contained driver which in this case happens to be a VPN driver . In this VPN scenario the enabled tasks may be restricted to connect disconnect encapsulate and or decapsulate operations associated with VPN communications with a VPN server over a network. Other types of drivers and code may be associated with corresponding operations that are enabled by the platform to support the core functionality thereof while minimizing access and performance impact. A permissible set of tasks may be associated with each type of driver and or on an individual driver by driver basis. As noted the application container effectively restricts a driver to the particular set of tasks enabled for the driver through the platform.

In particular the application container and VPN driver contained therein are depicted in as being executed in user mode. The VPN driver may interact with core services and functionality of the operating system that are provided by the kernel via a driver interface . The kernel generally implements a software abstraction of underlying hardware to facilitate operation of the hardware by software components. The driver interface may represent one or more application programming interfaces APIs or other suitable interfaces associated with the operating system through which core services and functionality represented by the kernel are made accessible to code executed in user mode.

In the particular example the core services and functionality include at least VPN services to facilitate VPN communications. The VPN services may correspond to the enabled set of tasks for the VPN driver which may be configured to invoke the services via appropriate calls and callbacks supported by the driver interface. The driver interface may be instantiated within the application container as depicted or as a standalone component. Functionality represented by the driver interface may also be divided between a user mode component and a corresponding component of the kernel that operates in kernel mode. Interactions via the driver interface may be controlled via the driver security platform via the driver manager module or otherwise.

In operation the background manager may set up a background process for the application container and manage execution of the VPN driver using the background process . Tasks may be scheduled at the direction of the platform. Generally this occurs at the explicit direction of a user e.g. a user selection or user consent or in accordance with a profile established based on user input. The profile may define the set of tasks available to the VPN driver in the application container and set the associated privileges and access rights accordingly. The platform then operates to enforce restrictions indicated by the profile using the application container . The profile for example may indicate that user consent is to be obtained each time particular operations are performed e.g. for each instance of an operation in which case a notification and prompt for user consent may be generated to selectively control the particular operations. The profile may also indicate global or default user consent to allow some selected operations to occur automatically without a further indication of consent for each instance. In the absence of user consent the application container operates to prevent the driver from performing restricted tasks. In other words the restricted execution environment is configured to selectively enable operations of transmogrifying drivers in dependence upon user consent. Thus the user is provided ultimate control over the scope of interactions enabled for transmogrifying drivers that are managed via the platform.

In this manner a restricted execution environment may be implemented to control operation of the VPN driver and or other transmogrifying drivers traditionally executed in kernel mode. Such drivers generally accept input data in a particular form and process the data to produce transformed data in a different form as represented in . For example the VPN driver of may operate to encapsulate data packets into a proprietary format for secure VPN communications to a corporate server. The VPN driver may also be configured to decapsulate data packets obtained from the corporate server in the proprietary format into data that is consumable by a client device . Other types of drivers are configured to perform comparable data transformations tied to the intended functionality of the drivers. For instance a printer driver converts data for printing a network interface card driver operates to packetize and depacketize data an antivirus driver may scan files and compare files to known signatures and so forth.

Thus a driver security platform may be provided that enables a restricted execution environment configured to enforce various restrictions for VPN drivers as well as other transmogrifying drivers. The platform may be implemented as an operating system component that exposes an interface through which drivers may register with the platform and be invoked to perform tasks supported and or enabled by the platform. Transmogrifying drivers may be executed via the platform in user mode on a per user basis and within a sandboxed application container that restricts privileges and system access of the transmogrifying drivers.

Having considered the foregoing discussion of an example operating environment consider now details regarding techniques for a restricted transmogrifying driver platform described in relation to the following example procedures.

This section discusses details of techniques for a restricted transmogrifying driver platform with reference to example procedures of . In portions of the following discussion reference may be made to the example operating environment of in which various aspects may be implemented. Aspects of each of the procedures described below may be implemented in hardware firmware or software or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In at least some implementation the procedures may be performed by a suitably configured computing device such as the example client device of that includes or makes use of a driver security platform or comparable functionality.

A restricted execution environment is instantiated for the transmogrifying driver block and the transmogrifying driver is invoked to perform one or more tasks block . Then the transmogrifying driver is executed via the restricted execution environment to perform the tasks block . Here the driver manager module may establish a restricted execution environment for a particular driver when the driver is executed. The restricted execution environment may comprise an application container e.g. sandbox as previously discussed. The restricted execution environment imposes various restrictions upon the operation of a transmogrifying driver that are applied during execution. For example the restricted execution environment isolates a corresponding driver to restrict access to system resources. In particular access may be restricted to a designated set of tasks associated with functionality of the driver. The driver is invoked by the system to perform the tasks and may be unable to initiate tasks on its own. For example the restricted execution environment may prevent the driver from creating objects on its own. Instead objects for particular tasks are created by the platform and passed into the restricted execution environment for use by the driver.

The driver may also be executed via the restricted execution environment as a background task and may be assigned a privilege token that conveys limited privileges and access rights. A background process associated with the restricted execution environment may be suspended in the absence of specific direction by the platform and or a user to perform work. Additionally the restricted execution environment denies applications and other components that are not associated with the driver security platform access to the transmogrifying driver to prevent tampering and or hijacking of the driver.

Additionally the driver is executed in user mode as previously discussed and may also be installed on a per user basis. Accordingly different users can install different drivers for use on the same client device and or for the same purpose. This may facilitate use of different hardware or different software version in accordance with user preferences. Since the drivers are sandboxed in user mode installation and uninstallation of one driver does not affect the experience of other users. In reference to VPN technology for example different users of the same device could employ different VPN drivers to connect to respective VPN servers of different employers without adversely affecting one another.

Further drivers implemented using the described techniques may be easily and completely removed without leaving residual files data settings and properties that may cause instability or unintended behavior. This is possible because the restricted execution environment provides individualized allocation of storage for exclusive use by a respective driver. The driver may not have access to write data or settings elsewhere. Accordingly cleaning up the driver and state is easily accomplished by deleting the data contained in the allocated storage associated with the driver.

A set of tasks enabled for the transmogrifying driver is ascertained block . The set of tasks enabled may be based upon an identification of the driver as a particular type of driver e.g. VPN vs. printer vs. antivirus etc. and or an individual identification of each particular driver e.g. distinguish between drivers of the same type associated with different manufacturers providers . The platform may therefore support and enable a designated set of tasks for each individual driver and or on the basis of driver type. The set of tasks may be particular contracts that the operating system exposes and enables the drivers to fulfill. Thus upon identification of a given driver the platform knows the kinds of tasks the driver is able to perform enables those tasks and may prevent the driver from performing other tasks.

In particular an execution environment is established that restricts operation of the transmogrifying driver to the set of tasks that are enabled block . For example a restricted execution environment may be established in the manner previously described. The restricted execution environment enables certain tasks or contracts but otherwise prevents a driver from accessing operating system resources or performing tasks that the driver is not explicitly authorized to perform by the driver security platform.

Then operation of the transmogrifying driver is controlled through the execution environment including invoking the transmogrifying driver to perform the set of tasks that are enabled and suspending the transmogrifying driver in the absence of invocation by the driver security platform block . Again the transmogrifying driver executed via a restricted execution environment is invoked by the platform rather than being able to initiate tasks on its own. The driver may be kept in a suspended state when it is not actively being invoked to perform tasks. This may occur by way of a background process that is unsuspended to enable work and then returned to suspended state upon completion of the work. Thus the work performed by the driver occurs at the direction of the platform and or user. The driver is generally unable to perform tasks other than those designated for the driver by the platform. The driver is also unable to operate unless called upon by platform which prevents drivers from freely consuming system resources and battery life.

Access is enabled to download the plug ins via the online application store block . Then the plug ins are distributed to clients in the defined format effective to cause the clients to register the plug ins with the driver security platform and implement a restricted execution environment to control operation of the plug ins block . Inclusion of transmogrifying drivers as offerings in an application marketplace is viable in part because of the additional security measures restrictions and performance gains attainable via the driver security platform which make it more likely that users will download and install such drivers from an online store. Thus a driver package containing a corresponding transmogrifying driver in the designated format may be made available via an application store service The driver package may contain suitable identifying data to facilitate recognition of the package by the driver security platform . The driver security platform is configured to recognize the driver package upon installation and perform operations as described herein to register the driver create a restricted execution environment enforce various restrictions placed on the driver and so forth.

Having considered some example procedures consider now a discussion of an example system and device to implement various aspects in accordance with one or more embodiments.

The example computing device as illustrated includes a processing system one or more computer readable media and one or more I O interfaces that are communicatively coupled one to another. Although not shown the computing device may further include a system bus or other data and command transfer system that couples the various components one to another. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated such as control and data lines.

The processing system is representative of functionality to perform one or more operations using hardware. Accordingly the processing system is illustrated as including hardware elements that may be configured as processors functional blocks and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions.

The computer readable media is illustrated as including memory storage . The memory storage represents memory storage capacity associated with one or more computer readable media. The memory storage may include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . The memory storage may include fixed media e.g. RAM ROM a fixed hard drive and so on as well as removable media e.g. Flash memory a removable hard drive an optical disc and so forth . The computer readable media may be configured in a variety of other ways as further described below.

Input output interface s are representative of functionality to allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices using various input output devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone for voice operations a scanner touch functionality e.g. capacitive or other sensors that are configured to detect physical touch a camera e.g. which may employ visible or non visible wavelengths such as infrared frequencies to detect movement that does not involve touch as gestures and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card tactile response device and so forth. Thus the computing device may be configured in a variety of ways as further described below to support user interaction.

Various techniques may be described herein in the general context of software hardware elements or program modules. Generally such modules include routines programs objects elements components data structures and so forth that perform particular tasks or implement particular abstract data types. The terms module functionality and component as used herein generally represent software firmware hardware or a combination thereof. The features of the techniques described herein are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

An implementation of the described modules and techniques may be stored on or transmitted across some form of computer readable media. The computer readable media may include a variety of media that may be accessed by the computing device . By way of example and not limitation computer readable media may include computer readable storage media and communication media. 

 Computer readable storage media refers to media and or devices that enable storage of information in contrast to mere signal transmission carrier waves or signals per se. Thus computer readable storage media does not include signal bearing media or signals per se. The computer readable storage media includes hardware such as volatile and non volatile removable and non removable media and or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions data structures program modules logic elements circuits or other data. Examples of computer readable storage media may include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage hard disks magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other storage device tangible media or article of manufacture suitable to store the desired information and which may be accessed by a computer.

 Communication media refers to signal bearing media configured to transmit instructions to the hardware of the computing device such as via a network. Communication media typically may embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier waves data signals or other transport mechanism. Communication media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

As previously described hardware elements and computer readable media are representative of instructions modules programmable device logic and or fixed device logic implemented in a hardware form that may be employed in some embodiments to implement at least some aspects of the techniques described herein. Hardware elements may include components of an integrated circuit or on chip system an application specific integrated circuit ASIC a field programmable gate array FPGA a complex programmable logic device CPLD and other implementations in silicon or other hardware devices. In this context a hardware element may operate as a processing device that performs program tasks defined by instructions modules and or logic embodied by the hardware element as well as a hardware device utilized to store instructions for execution e.g. the computer readable media described previously.

Combinations of the foregoing may also be employed to implement various techniques and modules described herein. Accordingly software hardware or program modules including operating system applications driver security platform and other program modules may be implemented as one or more instructions and or logic embodied on some form of computer readable storage media and or by one or more hardware elements . The computing device may be configured to implement particular instructions and or functions corresponding to the software and or hardware modules. Accordingly implementation of modules as a module that is executable by the computing device as software may be achieved at least partially in hardware e.g. through use of computer readable media and or hardware elements of the processing system. The instructions and or functions may be executable operable by one or more articles of manufacture for example one or more computing devices and or processing systems to implement techniques modules and examples described herein.

As further illustrated in the example system enables ubiquitous environments for a seamless user experience when running applications on a personal computer PC a television device and or a mobile device. Services and applications run substantially similar in all three environments for a common user experience when transitioning from one device to the next while utilizing an application playing a video game watching a video and so on.

In the example system multiple devices are interconnected through a central computing device. The central computing device may be local to the multiple devices or may be located remotely from the multiple devices. In one embodiment the central computing device may be a cloud of one or more server computers that are connected to the multiple devices through a network the Internet or other data communication link.

In one embodiment this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to a user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one embodiment a class of target devices is created and experiences are tailored to the generic class of devices. A class of devices may be defined by physical features types of usage or other common characteristics of the devices.

In various implementations the computing device may assume a variety of different configurations such as for computer mobile and television uses. Each of these configurations includes devices that may have generally different constructs and capabilities and thus the computing device may be configured according to one or more of the different device classes. For instance the computing device may be implemented as the computer class of a device that includes a personal computer desktop computer a multi screen computer laptop computer netbook and so on.

The computing device may also be implemented as the mobile class of device that includes mobile devices such as a mobile phone portable music player portable gaming device a tablet computer a multi screen computer and so on. The computing device may also be implemented as the television class of device that includes devices having or connected to generally larger screens in casual viewing environments. These devices include televisions set top boxes gaming consoles and so on.

The techniques described herein may be supported by these various configurations of the computing device and are not limited to the specific examples of the techniques described herein. This is illustrated through inclusion of the driver security platform on the computing device . The functionality of the driver security platform and other modules may also be implemented all or in part through use of a distributed system such as over a cloud via a platform as described below.

The cloud includes and or is representative of a platform for resources . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud . The resources may include applications and or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Resources can also include services provided over the Internet and or through a subscriber network such as a cellular or Wi Fi network.

The platform may abstract resources and functions to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform . Accordingly in an interconnected device embodiment implementation of functionality described herein may be distributed throughout the system . For example the functionality may be implemented in part on the computing device as well as via the platform that abstracts the functionality of the cloud .

Although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claimed invention.

