---

title: Instantiating incompatible virtual compute requests in a heterogeneous cloud environment
abstract: Example embodiments disclosed herein can provide for receiving a compute request for migrating an application from a source environment to a target cloud, determining a configured option of a first resource associated with the application, and determining at least one solution in the target cloud for the application. The solution is based, at least in part, on the configured option. In more specific embodiments, when the configured option indicates the first resource is splittable, a number of second instances of a solution in the target cloud is greater than a number of first instances in the source environment. In further more specific embodiments, when the configured option indicates the first resource is mergeable, a number of second instances of a solution in the target cloud is less than the number of first instances in the source environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09503387&OS=09503387&RS=09503387
owner: CISCO TECHNOLOGY, INC.
number: 09503387
owner_city: San Jose
owner_country: US
publication_date: 20130821
---
This disclosure relates in general to the field of cloud computing and in particular to techniques for instantiating incompatible virtual compute requests in a heterogeneous cloud environment.

Computer systems and services have become critical components of enterprises and other entities. Enterprises and other entities have become increasingly reliant upon data centers to provide network services needed to conduct business or other desired activities. Consequently the demand for compute storage and network capabilities has dramatically increased in recent years. Numerous service providers provide compute storage and network resources as a service to customers. These services are often provided by distributed computer systems over a network which is referred to as a cloud that can provide cloud computing services. As the computing needs of an entity change over time it often becomes desirable to migrate computer systems to a cloud for various reasons including access to increased compute storage and network services. The process of cloud migration however can require a significant effort. Service providers and their customers seeking migration need better tools to enable smooth migrations.

A method is provided in one example and includes receiving a compute request for migrating an application from a source environment to a target cloud receiving a configured option of a first resource associated with the application and determining a solution in the target cloud for the application. The solution is based at least in part on the configured option. In a more specific embodiment the application runs on a number of first instances of a first instance type in the source environment the first instance type includes the first resource having a first parameter and the solution includes a number of second instances in the target cloud. The second instances can be associated with one or more instance types.

In further embodiments when the configured option indicates the first resource is splittable the number of second instances in the target cloud is greater than the number of first instances in the source environment. When the configured option indicates the first resource is splittable at least one of the second instances may be associated with a second instance type including a second resource a second parameter of the second resource may be less than the first parameter of the first resource and the first resource and the second resource may be a same resource type. In further embodiments when the configured option indicates the first resource is mergeable the number of second instances in the target cloud is less than the number of first instances in the source environment. In more particular embodiments the method can include reserving the second instances of the second instance type in the target cloud and migrating the application to the target cloud to run on the second instances. In further particular embodiments the first resource is one of a central processing unit CPU a memory element and a disk storage. In yet further particular embodiments the solution is based in part on an optimization criterion to minimize cost.

The compute and storage resources of source environment are denoted generally by source compute resources and source storage resources respectively. Target cloud is illustrated with the migrated services from source environment . The migrated services are instantiated as application running on virtual machines Y . Target compute resources and target storage resources enable the instantiation of the migrated services. In at least one embodiment resource manager can communicate with source environment and end user system via network and with target cloud via network . Resource manager facilitates the instantiation of incompatible virtual compute requests from source environment to target cloud .

Elements of may be coupled to one another through one or more interfaces employing any suitable connections wired or wireless which provide viable pathways for network communications. Migration system may include a configuration capable of transmission control protocol internet protocol TCP IP communications for the transmission and or reception of packets in a network. Migration system may also operate in conjunction with a user datagram protocol IP UDP IP or any other suitable protocol where appropriate and based on particular needs. Additionally any one or more of these elements of may be combined or removed from the architecture based on particular configuration needs.

For purposes of illustrating the techniques of migration system it is important to understand the activities that may be present in a computer system such as migration system shown in . The following foundational information may be viewed as a basis from which the present disclosure may be properly explained. Such information is offered for purposes of explanation only and accordingly should not be construed in any way to limit the broad scope of the present disclosure and its potential applications.

The need for complex computer systems and services has furthered the demand for compute storage and network resources in cloud environments. Numerous service providers offer cloud computing services e.g. compute storage and network resources in distributed computer systems to customers. These services help offload the responsibility from an entity that consumes the resources and help facilitate quicker and easier access to application services and information.

When an entity decides to subscribe to cloud services for its computing needs typically existing applications used by the entity are migrated from an existing computer systems environment to a new cloud environment. The new cloud environment which could be a public or private cloud is referred to herein as the target cloud e.g. target cloud . The existing computer systems environment or source environment could be another public or private cloud environment a traditional data center a colocation provider or the like. In some cases an entity already using a cloud environment for its application services may desire migration to another cloud in order to take advantage of benefits offered by a different service provider to switch from a public cloud to a private cloud or vice versa etc.

Successfully migrating virtual or other applications from a source environment to a target cloud can involve a coordinated effort by the customer i.e. the entity associated with the applications to be migrated and the service provider of the target cloud. To prepare for a migration a customer generally collects its compute and storage resource requirements. For example a customer may determine the number of computer processing units CPUs of a particular speed and the amount of memory needed in the source environment to run a particular application or multiple applications etc. In addition the customer may also determine the number of instances needed in the source environment for the application. The target cloud however may have different offerings as categories of these compute resources. Consequently it may not be possible to transfer an application from a particular category of compute resources in the source to the same category of compute resources in the target cloud.

Typically most service offerings by a cloud provider tend to be categorized. For example one cloud provider may offer the following instance types standard micro high memory and high CPU. Each instance type may have its own specification on memory size virtual CPU disk size and platform type. Another cloud provider may divide categories based on the memory size and then possibly further categorizations. In addition in some scenarios an entity may have its own virtualization platform. For example some tools may allow a user e.g. Information Technology IT administrator to customize their virtual compute resources by resource type such as memory disk and virtual CPU vCPU .

Although these cloud services are generally acceptable in an isolated and homogeneous environment many customers desire a hybrid cloud solution instead. A hybrid cloud solution may require deployment in both private and public clouds or deployment in multiple public clouds. When moving an application that is running on one or multiple virtual machines VM i.e. a unit of virtual compute the problem of converting the VM format in terms of resource requirements e.g. memory CPU disk emerges when the offering of the source environment and the target cloud differs.

Techniques for migrating a virtual machine from one host to another host from one cluster to another cluster and even from one data center to another data center generally address the transfer of machine states e.g. memory snapshots etc. but do not consider the problem of an incompatible instance type between the source environment and the target cloud. Some heuristic algorithms can calculate solutions to Knapsack problems where financial constraints are applied to resource allocation. Without taking into account which resource types of a source can be split when migrated to a new cloud however these algorithms cannot be applied to virtual machine migrations in the hybrid cloud scenarios.

Generally conservative approaches are used to ensure sufficient memory CPU and disk resources are available on a target cloud during migrations involving incompatible instance types. In one approach if an exact match for a particular resource is not found in the target cloud then a resource having bigger or larger parameters e.g. number of bytes number of bits speed number of processors etc. may be used instead. For example if a source application uses 1 Gigabyte memory 100 Gigabyte hard drive and 2 CPUs and the target cloud does not have an exact match then the application may be implemented in the target cloud using 2 Gigabyte memory 1 Terabyte hard drive and 16 CPUs if those specifications represent the next largest sizes in the target cloud. This approach and others however raise several problematic issues. First resources may be wasted in the target cloud and consequently may increase the cost of migration. Second the maximum number of times an instance can potentially migrate may be limited as each migration potentially bloats the instance. Customers and cloud service providers need techniques that provide improved efficiency when migrating applications from a source environment to a target cloud with incompatible instance types.

In accordance with one example implementation migration system can resolve the aforementioned issues associated with incompatible virtual compute requests in a migration from a source environment to a target cloud by instantiating applications and intact virtual machines in the target cloud based on which resource types are splittable and or mergeable. A user e.g. the customer can configure options to categorize each type of resource such as CPU memory disk etc. which is associated with an application to be migrated. Resource options are dependent upon the associated application requirements and can be used to categorize a compute or storage resource as splittable non splittable mergeable or non mergeable. A splittable resource is one that can be split between two or more compute instances to fulfill the compute requirements for that particular type of resource component. A compute instance or instance as used herein is the instantiation of a virtual machine in which an application can run. A mergeable resource is one that can be merged with other resources into a single compute instance and still fulfill the compute requirements for that particular type of resource component. A resource manager can compute an optimal solution in the target cloud based at least in part on the configured options i.e. splittable non splittable mergeable non mergeable and the available instance types in the target cloud. As used herein a solution is intended to mean a determined number of instances of one or more instance types in a target cloud that can satisfy a particular compute request. Other configured options such as optimization criteria may also be considered when determining a solution. For example when multiple solutions can satisfy a particular compute request an optimal solution may be selected for a requested migration based on optimization criteria.

Turning to the infrastructure of migration system in accordance with at least one embodiment is shown. Generally migration system can be implemented in any type or topology of networks. Networks and represent a series of points or nodes of interconnected communication paths for receiving and transmitting packets of information that propagate through migration system . The networks offer a communicative interface between nodes and in at least one embodiment may be configured as any local area network LAN virtual local area network VLAN wide area network WAN e.g. the Internet wireless local area network WLAN metropolitan area network MAN Intranet Extranet virtual private network VPN and any other appropriate architecture or system that facilitates communications in a network environment or any suitable combination thereof including wired and or wireless communication.

Application is provided as an example of a virtual application that may be running in source environment . Application can be a scalable application that is deployable across multiple virtual machines X . Application can be a virtual application vApp or services in any other scalable deployment. Application could be a single tier application or a multi tier application with policies and service levels for example. Application may run on a set of virtual machines X with specific source compute resources and source storage resources . Virtual machines such as virtual machines X are software implementations of a machine that execute software programs like a physical machine. Compute and storage resources and could include for example specific CPU memory architecture disk storage etc.

Compute resources and and storage resources and represent hardware software and firmware resources offered in their corresponding environments. Generally compute resources represent CPUs or any other processors and memory elements that may accompany the CPUs or other processors . Storage resources generally represent data storage options for storing data or other information e.g. disk storage . Such storage could include internal or external storage to a network element and could incorporate various network storage techniques such as for example network attached storage NAS or storage area network SAN . Compute and storage resources and of target cloud could be grouped into particular offerings that are different than compute and storage offerings in source environment . In particular parameters of certain resources in target cloud may not have one to one correspondence with parameters of resources in source environment e.g. 2 vCPU with 1 GB vs. 1 vCPU with 512 MB . Additionally the brands of resources in target cloud may differ from the brands of resources in source environment .

End user system may be inclusive of any computer configured to enable user input and communication between a user and resource manager and between a user and source environment . End user system can include suitable interfaces to a human user such as a display a keyboard a mouse a touchpad a remote control or other terminal equipment configured to facilitate communication of information from and to the user. End user system can include for example personal computers laptops user workstations terminal stations tablets mobile devices etc.

In at least one embodiment resource manager can run on any server external to source environment and target cloud . In one example resource manager could be deployed in a data center of a service provider associated with target cloud . Resource manager could alternatively be deployed in target cloud in another cloud or in any other computer system or network having communication access to source environment and target cloud . Moreover at least some communication with source environment may include interaction with a user via a user interface of end user system that enables the user to provide information needed by resource manager to determine a solution in target cloud to instantiate incompatible compute requests. As used herein a compute request is intended to include a request to migrate an application such as a virtual application running on one or more virtual machines from a source environment to a target cloud and can include compute and storage resource requirements for the application being migrated. In at least one embodiment the compute and storage resource requirements of a compute request may be provided in terms of resource requirements for the source environment.

Turning to illustrates additional details that may be associated with migration system according to at least one embodiment. Resource manager can include a user interface a user selection module a target information module a feasibility module an instance selection module and a migration module . Resource manager may also include at least one memory element and at least one processor . Resource manager can receive various inputs and at least some examples are illustrated in . A user request to perform a migration may be received from end user system . Configured options may be provided by a user and can include various options such as splittable mergeable categorizations and possibly optimization criteria e.g. cost . Instance types and instance counts may be provided by target cloud . Resource manager can also provide output designated by selection results which can include one or more solutions for migrating application and associated virtual machines X to target cloud and being instantiated as application and associated virtual machines Y . In at least one embodiment the solution can include a number of instances for each instance type in target cloud that can satisfy the compute request.

In at least one embodiment resource manager is a network element which is meant to encompass network appliances servers routers switches gateways bridges load balancers processors modules or any other suitable device component element or object operable to exchange information in a network environment. Network elements may include any suitable hardware software components modules or objects that facilitate the operations thereof as well as suitable interfaces for receiving transmitting and or otherwise communicating data or information in a network environment. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective exchange of data or information.

In an example implementation network elements of migration system such as resource manager may include software modules e.g. user interface user selection module target information module feasibility module instance selection module migration module to achieve or to foster operations as outlined herein. These modules may be suitably combined in any appropriate manner which may be based on particular configuration and or provisioning needs. In example embodiments at least some of these operations may be carried out by hardware and or firmware implemented externally to these elements or included in some other network element to achieve the intended functionality. Furthermore the modules can be implemented as software hardware firmware or any suitable combination thereof. These elements may also include software or reciprocating software that can coordinate with other network elements in order to achieve the operations as outlined herein.

Whether combined or separated in whole or in part user interface user selection module target information module feasibility module instance selection module and migration module represent various activities according to at least one embodiment disclosed herein. User interface and user selection module can coordinate to provide a graphical user interface for display on a display monitor or screen of end user system . The graphical user interface can provide selection options for a user e.g. an IT administrator for a customer seeking to migrate one or more computing services to request migration for a particular application or a set of applications to a target cloud such as target cloud . In at least one embodiment specifications or parameters of compute resources required for running the selected application or applications in the current source environment may be identified by the user. The identified specifications or parameters may be provided as input e.g. user request to resource manager as part of a compute request.

Numerous different approaches could be taken to generate compute requests for a workload in a source environment to be migrated to a target cloud e.g. a public cloud or new private cloud infrastructure . In at least one embodiment the current compute instances on which the application is running could be examined and the number of different types of compute instances could be determined. By way of illustration consider an enterprise that has a virtual application for human resources HR vApp which runs in a source environment on 100 medium instances. Each of the medium instances serves 10 000 employees and has a 32 bit platform with 1 virtual CPU vCPU 1024 Megabytes MB memory and 20 Gigabytes GB disk storage. Also assume the Information Technology IT Department of the enterprise receives a request to expand the workload in its new data center that deploys a different cloud solution so that the HR vApp can serve 20 000 employees. One option for estimating a solution for the compute request is to determine what is currently used by the HR vApp and simply replicate those instances i.e. 100 instances each of 32 bit platforms with 1 vCPU 1024 MB memory and 20 GB disk storage .

In other embodiments more sophisticated techniques may be used to determine a compute request for a workload migration. Workload migration and migration as used herein are intended to mean moving or expanding an application running on one or more virtual machines from a source environment to a target cloud. For example in the previous illustration a work load analysis could be performed e.g. by the IT department on the existing HR vApp to obtain the actual compute and storage resources being used. More specifically the actual amount of CPU memory and disk storage used by the HR vApp on each instance could be determined using work load analysis. In at least one embodiment this profiling could be performed on peak usage times and or average usage times. Compute and storage resources having appropriate parameters which are neither excessive nor insufficient could be identified based on the profiling.

In yet another embodiment a statistical distribution of the usage of resources among the compute instances could be determined. For example assume the HR vApp consumes 90 of the allocated memory resources in 95 of the instances with a mean memory usage of 900 MB. If the vApp is highly scalable in terms of memory usage then the authorized user of the HR vApp e.g. IT administrator for the enterprise could identify the memory of the current compute instances as splittable and or mergeable. This profiling can result in a set of constraints on the work load migration. Depending on whether the profiling is done per instance or collectively on all instances the number of constraints might differ. Nevertheless a set of constraints can be expressed in terms of each resource component e.g. CPU memory disk storage etc. that resource manager needs to manage during the workload migration.

The graphical user interface of end user system may provide options for categorizing the identified resources. The resources could include but are not limited to CPU memory and disk storage associated with the selected one or more applications. In particular the graphical user interface could provide options to categorize resources as splittable or mergeable. In at least one embodiment other options may also be provided to positively categorize resources when they are non splittable or non mergeable. Alternatively non splittable and non mergeable may be default categorizations of a resource when splittable and mergeable options are not configured for the particular resource. These configured options can be provided as input to resource manager and may be included in the compute request.

In at least one embodiment a policy based approach may be implemented. Policies may specify whether each type of resource is splittable non splittable mergeable or non mergeable. The policies may also specify how a resource type or a bundle of resource types can be split. In this embodiment the policies could be specific to particular types of applications or to specific applications as the applications determine whether underlying resources are splittable or mergeable. The policies can serve as additional input to resource manager .

Generally splittable and mergeable properties are quantifiable and non splittable and non mergeable properties are qualitative. One underlying assumption can be that applications running on virtual machines do not have persistent states. This is generally true for client server applications such as for example online video format conversion and for online image processing and sharing. Essentially splittable resources and mergeable resources have an additive property and an exchangeable property. An additive property of a resource can mean that splitting the resource into multiple instances is equivalent to a single instance of the resource. For example consider an application that requires 10 GB memory and runs on a single compute instance that has 10 GB memory. If the memory has an additive property then the application can be instantiated on 10 compute instances each having 1 GB memory. Conversely an additive property may also imply that combining or merging multiple resources into a single instance of the resource is equivalent to multiple instances of the resource. An exchangeable property of a resource indicates that the resource could be any brand as long as it has the same required specifications or parameters e.g. speed and or capacity etc. .

Different resources are splittable and or mergeable. For example disk space can be splittable but platform type e.g. 64 bit versus 32 bit is generally not splittable. Each splittable resource has its own behavior on how to split. For example the compute power of an instance with 1 GB memory might be comparable to the compute power of 2 instances with 512 MB memory each. Furthermore multiple resources can be bundled together and tagged as splittable. Some resources of compute instances from a source cloud may alternatively be merged into a single large compute instance for any desired need or preference of the user. A user can tag a resource or a bundle of resources as mergeable. The user may also provide rules for merging instances of the same requests into bigger instances.

Configured options may also include optimization criteria to be used by instance selection module to generate selection results . One example optimization criterion could be minimizing the total cost of migration. Accordingly instance selection module can be configured to factor in one or more optimization criteria such as the criterion of minimizing the total cost of migration when selecting instances in target cloud in which the application and virtual machines can be instantiated.

Target information module may be configured in resource manager to obtain specifications of available instance types and instance counts provided by target cloud . Instance types e.g. small medium large standard micro high high CPU etc. may be specific to each particular cloud service provider. Thus instance type information can be obtained based on instance types of the particular cloud service provider of the target cloud. Instance counts can include available numbers of instances for each instance type. Consider an example scenario for a cloud service provider having instance types in a target cloud categorized as small medium and large. In this scenario the values for vCPU memory and other resources can be obtained for available small instance types medium instance types and large instance types in the target cloud. In addition the number of available small instances medium instances and large instances in the target cloud may also be obtained. For a public cloud however these numbers may effectively be infinity or unlimited . In at least one embodiment application programming interfaces APIs provided by the cloud service provider of the target cloud may be used to obtain this information. In at least one other embodiment this information may be hard coded into resource manager or otherwise available in a memory element accessible to resource manager .

Feasibility module may be provided to determine whether prerequisite resources are available in target cloud when a migration request has been received. In at least one embodiment feasibility module can include one or more heuristic algorithms to perform a feasibility determination. Typically an underlying assumption of a public cloud offering is that its resources are immense and therefore no feasibility check is needed. In scenarios in which a target cloud is a private data center however a feasibility check may be needed. In one example the non splittable resources e.g. platform and operating system of the source environment may need a direct correspondence to resources in the target cloud. In another example a constraint may be applied to various resources. Assume a maximum number of available small instances in a target cloud is 10 000. A constraint may be applied on how many small instances can be used in the target cloud and depending on how many small instances are needed by the migrating application the constraint could potentially prevent the migration. Moreover although feasibility checking may not normally be needed for public clouds it could nevertheless be configured for such target cloud for example based on the preferences of the particular service provider.

Instance selection module can be configured in resource manager to determine appropriate solutions for work load migration from a source environment to a target cloud. More specifically instance selection module may compute resulting instantiation of the migrated application in target cloud . In at least one embodiment the flexibility of an application in terms of compute and or storage resources can be leveraged to scale out on computer components in the target cloud. Optimization variables in each constraint can be marked as splittable non splittable and mergeable non mergeable to enable instance selection module to determine solutions for work load migration in the target cloud. Accordingly an appropriate solution for a particular application to be migrated can include selected compute instances in the target cloud that leverage the flexibility of the application i.e. splittability and or mergeability to be instantiated using resources in the target cloud that are different than resources used in the source environment. Additionally intelligent calculation or gathering resource requirements during an application migration based on work load analysis can be used to further improve the rate resource allocation efficiency because compute requests can be generated based on the actual usage of resources rather than a planned usage of resources.

Numerous different implementations and or algorithms could be configured to compute selection results . In one possible embodiment instance selection module could incorporate feasibility determination functions in whole or in part. An algorithm could divide all the migrating virtual compute requests into different categories by their non splittable properties e.g. platform and operating system . It could also divide the available types of virtual compute instances from the target cloud using the same properties. Thus the categories defined by the non splittable properties of the virtual compute requests are a subset of the available categories from the target cloud. If at the target cloud no resources are available at the target cloud that have the requested category then the migration cannot be done. In addition for each category the algorithm could try to minimize the cost by solving a Knapsack problem which could take many different forms. In one example of an optimization criterion in the form of a cost constraint the algorithm could maximize the performance of converted migrated instances in target cloud .

Instance selection module may generate selection results which provide one or more solutions for the compute request. Selection results can provide a number of instances for each instance type in a target cloud that is able to satisfy the compute request. Thus the application and associated virtual machines of the compute request may be migrated to the target cloud based on one of the solutions in selection results . The virtual machines can be migrated intact. The instance types of selection results may be different than the instance types of the source environment. Once selection results have been generated migration module can handle the migration of the application or set of applications from source environment to target cloud .

Turning to a flow diagram illustrates example activities that may be associated with embodiments of migration system to instantiate incompatible virtual compute requests in heterogeneous cloud environments. In at least one embodiment a set of operations corresponds to the activities of . In one example a network element such as resource manager may perform one or more operations of the set of operations. This network element may comprise means including for example processor for performing such operations. In at least one embodiment one or more modules of resource manager e.g. user selection module target information module feasibility module instance selection module and or migration module are configured to perform when executed by a processor one or more operations of the set of operations.

At a virtual application vApp may be selected for migration by a user. The vApp may be selected by the user for example via end user system . The vApp selection could be a vApp instantiated in a source environment such as a private data center a private cloud or a public cloud. At compute request specifications for the migrated expanded workload can be generated in various ways e.g. replicate what is currently being used perform a work load analysis on the existing application to determine actual resource usage determine a statistical distribution of the usage on different resources among all compute instances . At resource manager can receive a compute request with the compute request specifications which may be provided from end user system . At resource manager can receive from the user a target cloud selection.

At resource manager can fetch the available instance type specifications and instance counts from the selected target cloud. In at least some embodiments this information can be obtained by APIs provided by the target cloud service provider or the information can be hardcoded in the resource manager or otherwise accessible to the resource manager in some external element.

At the feasibility of the requested migration for the target cloud may be determined. The feasibility determination can assess whether the migration can be successfully performed based on the particular resources of the target cloud and the particular requirements of the application and virtual machines to be migrated. The feasibility determination will be discussed in more detail with reference to .

At resource manager determines configured options indicating which resources are splittable non splittable mergeable and or non mergeable. These options may be configured by a user e.g. customer requesting migration via an end user system and may be provided in the compute request sent to resource manager . In this case resource manager can determine the configured options from the compute request. The resource manager can also receive other options e.g. optimization criteria such as minimizing cost to be used by instance selection module to determine the compute instances in the target cloud in which the application and its virtual machines are to be instantiated. In at least one embodiment these other options may also be provided in the compute request sent to resource manager .

At selection results are generated. In at least one embodiment the instance selection module can determine compute instances in the target cloud based on configured options of the resources and optionally on one or more other options such as an optimization criterion e.g. minimizing cost . Depending on the particular scenario multiple solutions may be generated and provided in selection results . For example any one of 5 large instance types 10 medium instance types or 20 small instance types may be suitable for migrating a particular application to the target cloud depending on the particular application resource requirements and the particular specifications of the instance types in the target cloud.

At the resource manager can reserve in the target cloud instances indicated by one of the solutions from the selection results. At the vApp migration may be performed to migrate the vApp and associated virtual machines from the source environment to the reserved instances in the target cloud.

Turning to a flow diagram illustrates example activities that may be associated with embodiments of migration system to instantiate incompatible virtual compute requests in heterogeneous cloud environments. In at least one embodiment a set of operations corresponds to the activities of which may be performed at of . In one example a network element such as resource manager may perform one or more operations of the set of operations. This network element may comprise means including for example processor for performing such operations. In at least one embodiment one or more modules of resource manager e.g. feasibility module are configured to perform when executed by a processor one or more operations of the set of operations.

At the virtual compute requests for migration can be divided into different categories by non splittable properties. For example compute requests having a particular operating system and platform which may be non splittable can be identified with the category corresponding to the same operating system and platform. At the available types of virtual compute instances in the target cloud may be divided by the same properties e.g. by operating systems and platforms .

At a determination is made as to whether the resources available in the target cloud have the requested categories. If the resources in the target cloud do not have the requested categories then at the virtual compute request may be stopped as the migration has been determined not to be feasible. In at least one embodiment an error message may be sent to inform the user that the requested migration cannot be performed.

However if the resources available in the target cloud do have the requested categories as indicated at then another determination may be made at as to whether any constraints prevent instantiation in the target cloud. For example in a private cloud a constraint may provide a maximum number of a certain instance type that can be used. Thus if any constraints prevent instantiation in the target cloud then at the virtual compute request may be stopped and an error message may be sent to inform the user that the requested migration cannot be performed. However if at it is determined that no constraints prevent instantiation in the target cloud then the virtual compute request has been determined to be feasible and at flow may return to e.g. to .

An example scenario is now provided to help illustrate some of the concepts of the present disclosure. Assume a service provider has a cloud offering that was selected as a target cloud by an user requesting to migrate a particular virtual application vApp from their private cloud. Also assume the service provider cloud offering provides the following instance type specifications 

In this scenario consider the user providing a compute request for the vApp represented by the following pseudo code 

In this compute request the virtual CPU is specified as splittable. Non splittable resources require that every instance selected has at least the amount of resources requested. Values are provided for vCPU 3 memory 1024 MB platform 32 bit and hard disk 20 GB . The instance count is specified as 2. Based on the instance types offered by the service provider if no options were presented in the compute request for a splittable resource a conservative selection result could be to use 2 large instances which costs 0.60 0.30 2 . With a splittable option for the vCPU however 2 medium instances and 2 small instances may be selected instead. This selection would cost 0.50 0.10 2 0.15 2 . Thus the splittable option in this scenario reduces the cost of the vApp migration from the private source cloud to the selected target cloud.

Embodiments disclosed herein at least one of which was illustrated by the above example enable a clean separation between the service provider and customers of the service provider. Customers are provided with the ability to specify how a particular application should be migrated to a cloud and sufficient processing may be provided in a middle man such as resource manager to accomplish the customer s desired goal. Thus a user e.g. a customer requesting migration of an application can have their compute requests satisfied in a desired economic way while the cloud service provider has information e.g. splittable mergeable configured options optimization criteria to enable computation of intelligent selection results without having to blindly guess at the best instance types to offer the customer. Consequently resource waste that may occur in typical conservative approaches can be reduced and the cost to the customer may also be reduced by using cheaper instances to instantiate a large instance or by using a single larger instance to instantiate multiple small instances.

Regarding the internal configuration of migration system resource manager can include one or more memory elements e.g. memory element for storing information to be used in the operations outlined herein. Resource manager may keep information in any suitable type of memory element e.g. random access memory RAM read only memory ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM application specific integrated circuit ASIC static storage etc. software hardware firmware or in any other suitable component device element or object where appropriate and based on particular needs. Any of the memory items discussed herein e.g. memory element source storage resources target storage resources should be construed as being encompassed within the broad term memory element. Moreover the information being used tracked sent or received in migration system could be provided in any database register queue table cache control list or other storage structure all of which can be referenced at any suitable timeframe. Any such storage options may also be included within the broad term memory element as used herein.

In certain example implementations the functions outlined herein may be implemented by logic encoded in one or more tangible media e.g. embedded logic provided in an ASIC digital signal processor DSP instructions software potentially inclusive of object code and source code to be executed by a processor or other similar machine etc. which may be inclusive of non transitory computer readable storage media. In some of these instances memory elements can store data used for the operations described herein. This includes the memory elements being able to store software logic code or processor instructions that are executed to carry out the activities described herein.

Additionally resource manager may include one or more processors e.g. processor that can execute software modules or algorithms to perform activities as discussed herein. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein. In one example the processor could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA an EPROM an EEPROM or an ASIC that includes digital logic software code electronic instructions or any suitable combination thereof. Any of the potential processing elements CPUs compute resources modules and machines described herein should be construed as being encompassed within the broad term processor. 

Note that with the example provided above as well as numerous other examples provided herein interaction might be described in terms of two three or four elements modules components etc. However this has been done for purposes of clarity and example only. In certain cases it may be easier to describe one or more of the functionalities of a given set of flows by only referencing a limited number of elements. It should be appreciated that these elements components modules and or the like and their teachings are readily scalable and can accommodate a large number of such elements modules and components etc. as well as more complicated sophisticated arrangements and configurations. In addition it should also be noted that these elements modules and or components may alternatively be combined in any suitable arrangements and configurations. Accordingly the examples provided should not limit the scope or inhibit the broad teachings of the resource manager as potentially applied to a myriad of other architectures.

It should be appreciated that the words optimize optimization optimum optimal and related terms are terms of art that refer to improvements in speed and or efficiency of a specified outcome and do not purport to indicate that a process for achieving the specified outcome has achieved or is capable of achieving an optimal or perfectly speedy perfectly efficient state.

It is also important to note that the operations in the preceding flow diagrams illustrate only some of the possible scenarios and patterns that may be executed in association with addressing cache coherence in updates to a shared database. Some of these operations may be deleted or removed where appropriate or may be modified or changed considerably without departing from the scope of the present disclosure. In addition a number of these operations have been described as being executed concurrently with or in parallel to one or more additional operations. However the timing of these operations may be altered considerably. The preceding operational flows have been offered for purposes of example and discussion. Migration system may provide substantial flexibility in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings of the present disclosure.

