---

title: Efficient reconstruction of virtual disk hierarchies across storage domains
abstract: A method and software is described for recreating on a target datastore a set of hierarchical files that are present on a source datastore. A content identifier (ID) is maintained for each component of the set of hierarchical files. The content ID of a component is updated when its contents are modified. The child component is copied from the source datastore to the target datastore. The content ID corresponding to the parent component on the source datastore is compared with content IDs corresponding to files present on the target datastore. When a matching content ID is discovered, it infers a copy of the parent component. The matching file on the target datastore is associated with the copied child component so that the matching file becomes a new parent component to the copied child component, thereby recreating the set of hierarchical files on the target.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037621&OS=09037621&RS=09037621
owner: VMware, Inc.
number: 09037621
owner_city: Palo Alto
owner_country: US
publication_date: 20130702
---
This application is a continuation of and claims the benefit of U.S. patent application Ser. No. 12 469 577 filed May 20 2009 issued on Jul. 2 2013 as U.S. Pat. No. 8 478 801 which is hereby incorporated by reference.

In certain computing applications it is desirable to separately maintain a data file and changes to the data file instead of writing the changes directly to the data file. For example one might want to have the ability to undo the changes and return to the original data file. Alternatively there might be a desire to make multiple independent changes to an initial file without having to copy the initial file for each independent change.

In the field of computer virtualization and particularly desktop virtualization delta disks also referred to as redo logs diff files etc. may be used to customize a base disk image for a virtual disk. A discussion of the use of such delta disks for virtual computer systems is provided in U.S. Pat. No. 7 356 679 entitled Computer Image Capture Customization and Deployment which issued on Apr. 8 2008. Each delta disk contains changes to the base disk image to provide customization and data retention for each user. The combination of base and delta disks make up a virtual disk hierarchy virtualized by virtualization software so that it appears to each user or virtual machine as a single physical disk. Each virtual disk may be organized in a manner similar to conventional physical disks i.e. into discrete addressable disk blocks. When the virtual disk is read first the delta disk is accessed to determine if the portion of the virtual disk being accessed is contained within the delta disk. For example if a particular disk block of the virtual disk includes modifications since creation of the delta disk then that disk block will be present in the delta disk. If the disk block is not present in the delta disk then the corresponding disk block is accessed in the base image from which the requested information is retrieved. Writes to the virtual disk are directed to the delta disk. If the write is directed to a previously modified disk block present in the delta disk then the previously modified disk block is overwritten otherwise the delta disk is augmented to include the newly modified disk block.

In some cases it may be desirable to have one or more chains of delta disks from a single base. In an enterprise environment for example there may be a base disk image for a company containing the operating system and installed software usable by each employee such as an email client. Then from this base disk image a plurality of departmental delta disks include software suitable for each department. Accounting software for the accounting department computer aided design software for the engineering department etc. Then from each of these departmental deltas individual deltas may be maintained by individual users.

In ordinary use of computer disk images the data storage requirements increase over time making it necessary at some point to move one or more disks images from one datastore to another. In the field of virtualization sometimes it is necessary to migrate a virtual machine from one datastore to another e.g. for load balancing or to take a physical computer out of service. However where a virtual disk is made up of a base disk image and one or more deltas each of the parent delta images and base image must be copied along with the delta or else some logical connection must be maintained across data stores which in some cases is not possible.

A method and software recreates on a target datastore a set of hierarchical files that are present on a source datastore the set including a parent component and a child component. A content identifier ID is maintained for each component of the set of hierarchical files. The content ID is updated when the contents of a corresponding one of the components are modified. In one embodiment the child component contains changes to the parent component and is writable whereas the parent component is read only. The child component is copied from the source datastore to the target datastore. The content ID corresponding with the parent component on the source datastore is compared with content IDs corresponding to files present on the target datastore. When a matching content ID is discovered a matching file is identified the matching file being a file on the target datastore that corresponds to the matching content ID. The matching file is associated with the copied child component so that the matching file becomes a new parent component to the copied child component thereby recreating the set of hierarchical files on the target datastore using the matching file.

Hardware platform may be a general purpose computing system having one or more system buses that place various hardware platform components in data communication with one another. For example one or more processors are placed in data communication with a memory using system bus es . Memory may comprise a system of memories including read only memory ROM random access memory RAM cache memories and various register memories. Non volatile data storage may include one or more disk drives or other machine readable media or mass data storage systems for storing software or data. Memory and or non volatile data storage may store virtualization software and guest system software running in virtual machine . User interface may be provided including a keyboard controller not shown a mouse controller not shown a video controller not shown and an audio controller not shown each of which may be connected to corresponding user devices not shown . As is typical for server computer systems virtualized computer system may or may not include user interface devices or they may not be connected directly to hardware platform . Instead a user interaction may be automated or occur remotely as generally known in the field of data center administration. Network interface enables data communication over a network . For example network interface may facilitate communication using a network protocol such as TCP IP or Fibre Channel.

Virtualization software is well known in the field of computer virtualization. Virtualization software performs system resource management and virtual machine resource emulation. Virtual machine resource emulation may be performed by a virtual machine monitor VMM component not shown . In typical implementations each virtual machine only one shown has a corresponding VMM instance. Depending on implementation virtualization software may be unhosted or hosted. Unhosted virtualization software generally relies on a specialized virtualization kernel for managing system resources whereas hosted virtualization software relies on a commodity operating system the host operating system such as Windows Mac OS X or Linux to manage system resources. In a hosted virtualization system the host operating system may be considered as part of virtualization software .

Virtual machine conceptually comprises the state of virtual hardware devices as emulated by virtualization software and contents of guest system software . Hardware emulation is performed by virtualization software . As shown in guest system software includes a guest operating system and guest applications . Guest operating system may be a commodity operating system such as Windows or Linux. Virtualization software is responsible for managing inputs and outputs to and from virtual machine .

Guest system software is stored on a virtual disk which may be maintained on non volatile data storage device or in datastore . The term datastore is intended to be broadly interpreted to mean a container for data and may be implemented as a container or storage volume for virtual machines formatted with a file system such as NFS or VMFS. In the present example the virtual disk image is maintained in a base disk image file and one or more delta disks on external datastore . Delta disks include at least one delta disk particular to VM as well delta disks for other VMs not shown .

Each hierarchical disk component can be thought of as being a child component and or a parent component in a chain. Each terminal delta disk is a child component since it depends on either an intermediate delta disk or a base disk image. Base disk image is a parent when it has one or more delta disks depending on it. Each intermediate delta disk is a parent of either another intermediate delta disk or a terminal delta disk. Each intermediate delta disk is also a child of either the base disk image or another intermediate delta disk.

By way of example suppose base disk image included an installation of an operating system such as Microsoft Windows and an office production suite including a word processor email client spreadsheet etc. Intermediate delta disks may include additional installed applications needed for users of a particular group in an organization such as accountants or engineers. To create an intermediate delta disk a delta disk such as delta is created which initially appears to the computer as an exact copy of base disk image since no changes were written to the delta disk. Then the virtual machine is launched using the delta disk image essentially launching the operating system installed on base disk image . Then the various departmental applications may be installed to the virtual disk formed by the hierarchical disk structure formed by the delta disk and base disk image. The virtual machine may then be powered down if needed. A snapshot of the VM is created which then makes the delta an intermediate delta disk. Terminal deltas pointing to the just created intermediate delta can then be created for a plurality of users. Each terminal delta may be individualized with configurations necessary for them to coexist on a network e.g. unique machine numbers MAC addresses etc. which are managed using well understood techniques described for example in U.S. Pat. No. 7 356 679 entitled Computer Image Capture Customization and Deployment which issued on Apr. 8 2008.

Modifying a base disk image or intermediate delta disk that has delta disks depending from them could corrupt the virtual disk images represented by the terminal delta disks. Referring to if intermediate delta disk were to be written to it could corrupt the image provided by terminal delta disk since terminal delta disk represents changes to the image presented by intermediate delta disk and these changes can be inconsistent with any changes made directly to intermediate delta disk . Therefore intermediate delta disks and the base disk image are generally locked. In one embodiment they are locked by tagging the file using a read only tag provided by the filing system which thereafter prevents any application from writing to these files. If delta disk were to be deleted then the image can be reverted back to the state prior to the changes embodied in terminal delta disk by simply referencing intermediate delta disk which becomes a terminal delta disk and read only protection removed since no additional delta disks depend from intermediate delta disk . Other protections for intermediate delta disks and base disk image files may be provided in addition to or instead of file system read only tagging. For example a database may be used to track interrelations between components of a hierarchical disk and software accessing these components can be written to ensure that base disk images and intermediate delta disks are never written to.

Management server is connected to VM hosts via network which may be for example a network such as a LAN WAN Internet or the like or a combination of different networks. VM hosts and each execute a hypervisor respectively which in turn each implement one or more VMs. In general commands flow from the virtual machine manager to the hypervisors and and information flows from hypervisors and to virtual machine manager . API provides an interface to access the functionality provided by VM manager . In one embodiment API is implemented as a web service receiving information or requests in XML format. By way of example this type of interface is described in the 3.0 Revision 20060906 Version 2.0.1 Item SDK ENG Q306 291.

Hosts and are connected via network to datastores and . Network may be an Ethernet local area network LAN Fibre Channel network or the like. In another embodiment not shown datastores are connected to communications network rather than a separate storage network. Datastores may be implemented as network attached storage NAS or as a storage area network or a combination thereof. Each datastore may be a logical storage volume backed by a physical device called logical unit number LUN a mount point like NFS or a physical disk available on the host and may as would be understood by those skilled in the art include or reside on one or more physical storage devices connected to a management or control interface not shown . Since they may be logical volumes it is possible that datastores are maintained on a common storage array or separate storage arrays. Also although not shown in there may be an intermediary storage controller or devices that act on behalf of the VM hosts connected to the network. Finally it is possible that each datastore reside within a corresponding VM host and be connected using a standard ATA or SCSI connection.

Database stores a content ID for each component of one or more hierarchical disk structures such as that shown in . Database may additionally store other data e.g. configurations settings and status related to VM hosts . Database may e.g. be a relational database an object oriented database an object relational database etc.

In an alternative embodiment a content ID may be stored in a database associated with a host server such as and in a distributed system of hypervisors. Such a distributed system of hypervisors may have a virtual machine manager but one is not required. It will be appreciated that this alternative embodiment promote scalability and fault tolerance if redundant copies of a content ID were persistently stored albeit at the time expense of additional communication regarding content IDs between the hypervisors themselves or between the hypervisors and the virtual machine manager if present.

In one embodiment each content ID is 128 bit number that is randomly generated e.g. using a pseudorandom or random number generator. It is also possible to sequentially assign content IDs. In this respect one might regard a content ID as somewhat similar to a Universally Unique Identifier UUID or a Globally Unique Identifier GUID . However in one embodiment VM manager assigns a content ID to a component i.e. a delta disk or base disk image in a virtual disk hierarchy when the hypervisor operating in conjunction with the virtual machine associated with the component performs a file open operation and an initial file write operation on the component. The content ID remains unchanged during additional file write operations by the virtual machine. However if the virtual machine performs a file close operation on the component and then performs another file open and file write operation on the component the system e.g. VM manager will assign a new content ID to the component.

Content ID collisions can occur if two components happen to be given the same content ID even though the contents are not identical. Such a collision although extremely unlikely could cause serious data corruption. One approach to prevent content ID collisions would be to monitor any content ID changes in the system and look for collisions. If the content ID of a given disk component is changed to a particular value and another disk component in the system already has a content ID of that value then you can conservatively assume that this is a collision since it is very unlikely that a disk write caused the content to suddenly become the same as another disk component. In the case of a collision a new content ID is assigned to the changed disk component. An alternate method can be used if deemed necessary for newly recognized disk images i.e. disk images that have no content ID assigned. For example file length comparison and contents of a disk block at a random file offset can be used to eliminate each other disk component as matching in which case a new content ID would be assigned.

API may be accessed remotely using a web service protocol such as SOAP. Messages may be sent and received using a script or program executing on a web service client machine not shown . The client can cause the virtual machine manager to issue a command to one of the hosts or directing it to transfer e.g. a copy operation or a copy operation and a delete operation VM from VM host to VM host as illustrated. The hypervisor may be include programming to carry out this functionality or another software component not shown within host may carry out the transfer. When VM is moved from VM host to VM host it may be necessary to move all the data files associated with the VM from datastore to datastore . For example datastore may be a disk volume controlled by hypervisor and is only readily accessible by hypervisor whereas datastore is a volume that is controlled by and readily accessible by hypervisor . Alternatively sometimes it is necessary to move data files simply because the datastore is reaching its capacity due to natural growth of delta disks as changes are written to the virtual disk they represent.

For purposes of illustration suppose VM accesses a virtual disk image implemented by a disk hierarchy including base disk and delta disk . In an embodiment where the hypervisor is provided by VMware Inc. both the base disk image and delta disk might be a VMDK file i.e. contents of a virtual machine s hard disk drive may be encapsulated using the VMDK file format. Also VM itself may be embodied in VMX file . VMX files are data files for storing the configuration settings for VMs. Thus VMX file may be transferred to target data store along with the virtual disk image associated with VM . Additional files associated with the migrating VM may also be transferred.

Arrows represent transfer of VM from source VM host to target VM host and delta disk from source datastore to target datastore . Since delta disk relies on base disk a copy of base disk needs to be present on target datastore as well.

In one embodiment on receiving a request via API to move a particular VM from VM host to VM host VM manager issues a query to database to identify the components of disk hierarchy associated with the specified VM. VM Manager then checks to see which components if any are already present on target datastore which contains files for VMs on VM host

The check is performed by accessing the content ID of hierarchical disk components present on datastore and comparing the content ID of base disk image with those disk components already on datastore . If datastore includes base disk image having a content ID that matches the value of the content ID base disk image on datastore an extremely strong inference arises that the two base disk images have the same contents. In this case VM manager does not copy the base disk image from datastore but merely associates delta disk on target datastore with the base disk image on target datastore . By associate is meant that the newly associated base disk image on the target datastore would then be referenced for disk reads when the information sought is not present in the delta disk. The reference may be written to a field within or property of the delta disk itself or it may be maintained separately. On the other hand if base disk image is not present on datastore i.e. there are no disk component on datastore having a matching content ID then base disk image is copied from datastore to datastore as shown by broken arrow .

The transfer of files as described above may be carried out on behalf of VM manager . For example VM manager may command the hypervisor or to copy only delta disk to datastore and then associate copied delta disk on datastore with the copy of base disk image already on datastore . In an alternative embodiment VM manager may be in communication with datastores and perform the move and or association directly rather than so commanding one of the VM hosts.

In one embodiment the VM being transferred might be in a powered off or suspended state such that the virtual machine is not currently executing or in a scheduling queue. In another embodiment the VM may be executing during migration of the disk e.g. as described in United States Patent Application Publication 2009 0037680 which published Feb. 5 2009. In another embodiment the virtual machine may be migrated live i.e. without significant interruption of the operation of the VM along with disk migration. Live migration of a VM is described in U.S. Pat. No. 7 484 208 which issued Jan. 27 2009. Live migration might be performed when VM manager engages in dynamic load balancing of virtual machines or some other form of distributed resource management.

Two virtual machines are referred to as linked clones when they share a common base disk image or intermediate delta disk. Some hypervisors support linked clones. It will be appreciated that a linked clone includes a specific type of virtual disk hierarchy e.g. a virtual disk hierarchy with at least one virtual delta disks associated with a virtual base disk. A linked clone might be created by a disk snapshot and facilitate the rapid deployment of the same guest system software in a multitude of virtual machines.

At some point in time a VM manager not shown receives a request to transfer VM B from source datastore to target datastore . It will be appreciated that this transfer involves among other things copying the virtual base disk with content ID X to target datastore as well as the delta disk . The reference count for base disk on target datastore is initialized at one since newly copied delta B depends on base disk . As indicated by dashed outlines VM B i.e. the file or files containing configuration and state information such as the VMX file described above and delta B may be deleted from source datastore after the virtual machine s transfer to target datastore . When delta B is deleted the reference count for base disk on source datastore is decremented from two to one indicating that only one delta disk delta A depends from base disk on source datastore . The reference count may be referenced to identify whether delta disks depend on base disk image . If the reference count is zero then no delta disks depend from base disk image it may be deleted from source datastore . In the present example base disk image is not deleted from source datastore since at this time the reference count is equal to a number that is greater than zero i.e. one. VM A still resides in source datastore and relies on the presence of a copy of base disk image in source datastore . When delta B and base disk are copied from source datastore to target datastore they each retain their respective content ID such that both copies of base disk have the same content ID.

At a later point in time the system transfers VM A and its delta disk to target datastore as shown in . A check of content IDs of components present in target datastore reveals that a copy of base disk image is already present on target datastore . Therefore the system does not create a second copy of that virtual base disk saving both copying time and storage space on target datastore . To complete the transfer of the linked clones the system associates or reparents delta disk on target datastore with the base disk image already present on target datastore thereby re creating the linked clones on target datastore . When delta A is parented to base disk the reference count for the copy of base disk on target datastore is incremented from one to two. At this time the disk hierarchy originally present on source datastore has been recreated on target datastore .

Having copied VM A and delta disk A to target datastore and having recognized the presence of a copy of base disk image on target datastore each component may be deleted from source datastore as indicated by the broken outlines of these components in . When delta A is deleted from source datastore the reference count for base disk is decremented from one to zero indicating there are no longer any delta disks depending on base disk . When base disk is copied to target datastore a check of the reference count for source datastore reveals that base disk may be deleted from source datastore since the reference count is now zero indicating no delta disks remain on source datastore that depend on base disk . Note that deletion of hierarchical disk components from source datastore is optional. For example the copy operation may be performed for data redundancy i.e. as a backup operation in which case maintaining original copies of the components on source datastore would be desirable.

In operation the system then enters a loop and determines whether the current virtual delta disk e.g. the virtual delta disk that was copied to the target datastore and deleted from the source datastore is dependent on an intermediate delta disk or base disk on the source datastore. If the determination in operation is negative the system exits the loop and proceeds to operation . If the determination in operation is positive the system proceeds with operation wherein it is determined whether the target datastore contains a copy of the intermediate delta disk or base disk on which the current delta disk depends. As described above with reference to this determination involves comparing a content ID of the dependent disk with hierarchical disk components already present on the target datastore. If there is no match then the determination in operation is negative and the system proceeds to operation .

In operation the intermediate delta disk or base disk on which the current delta disk depends is copied to the target datastore and the current delta is reparented to the just copied intermediate delta or base disk. By reparented it is meant that current delta becomes the child of the just copied intermediate delta or base disk. If the intermediate delta base disk on the source datastore no longer has any dependent deltas then it may be deleted from the source datastore. The procedure then traverses to the next component in the source hierarchy such that the previous dependent intermediate delta base disk becomes the new current delta. The procedure then loops back to operation which continues as previously described.

In operation if the target datastore does contain a copy of the intermediate delta base disk then the procedure flows to operation wherein the copied current delta on the target datastore is reparented to the copy of the intermediate delta base disk already present on the target datastore. The source datastore or database may be checked to determine whether the copy of the intermediate delta base disk on the source datastore has any dependent delta disks. If not then the copy of the intermediate delta base disk on the source datastore may optionally be deleted. The procedure then ends as indicated by done block .

Returning to operation if the current delta is not dependent on an intermediate delta base disk then the current delta is by definition actually a base disk and the procedure flows to operation .

Operation may be implemented as a check against error. If the current delta which should actually be a base disk is identified in the database or elsewhere as a delta disk then the procedure flows to operation wherein an error is generated and the procedure ends. However if the base disk is not identified as a terminal delta then the procedure flows to done block and the procedure is complete.

The path in flowchart leading through operations and then done block is highlighted in . This highlighted path shows that when a content ID match is found the just copied delta is reparented to the matched file and the procedure is completed. No other ancestors need to be copied irrespective of how many levels of components are left in the hierarchy. This is very useful as finding the match for the first parent itself means that only the terminal delta needs to be copied. Thus the relocation happens very fast compared to prior methods of disk migration. In addition to faster completion time the above described procedure reduces the amount of data to be copied when VMs are sharing base disks and significantly reduces storage requirements on the target datastore. It will be appreciated that the deletion operation mentioned above with reference to operations and are optional insofar as there might be circumstances where a system administrator might want to create multiple versions of the same virtual disk hierarchy e.g. for purposes of redundancy i.e. backups fault tolerance etc.

Any of the operations described herein that form part of the inventions are useful machine operations. The inventions also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for that purpose or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the operations.

The inventions can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can thereafter be read by a computer system. Examples of the computer readable medium include hard drives network attached storage NAS read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

It will be further appreciated that the instructions represented by the operations in the above figures are not required to be performed in the order illustrated and that all of the processing represented by the operations might not be necessary to practice the inventions. Further the processes described in any of the above figures can also be implemented in software stored in any one of or combinations of the RAM the ROM or the hard disk drive.

Although the foregoing inventions have been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications can be practiced within the scope of the appended claims. In this regard it will be appreciated that there are many other possible orderings of the operations in the processes described above and many possible modularizations of those orderings. Accordingly the present embodiments are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the appended claims. In the appended claims elements and or operations do not imply any particular order of operation unless explicitly stated in the claims or implicitly required by the disclosure.

