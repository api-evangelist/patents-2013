---

title: Secure communication between applications on untrusted platforms
abstract: Disclosed are various embodiments for facilitating secure communication between applications on an untrusted computing platform. It is verified that a first application installed in a computing device has permission to communicate with a second application also installed in the computing device based at least in part on a secure key associated with the first application. The verification may include determining that the secure key has been signed by a predetermined certificate and determining that the secure key includes a platform-specific, tamper-proof identifier of the first application. Alternatively, the verification may include determining that the first application is signed by a predetermined certificate. Communication between the first and second applications is facilitated when the first application has permission to communicate with the second application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09112854&OS=09112854&RS=09112854
owner: Amazon Technologies, Inc.
number: 09112854
owner_city: Seattle
owner_country: US
publication_date: 20130911
---
An application executed in a computing device may need to communicate with another application in the computing device for various reasons. Such communication may be facilitated via inter process communication IPC techniques. Examples of IPC techniques include communication via files signals sockets message queues pipes semaphores shared memory and so on.

The present disclosure relates to enabling secure communication between applications executed in an untrusted computing platform. Secure communications between applications may be important to facilitate a single sign on experience among the applications to authenticate access of applications to secured services or resources and for other reasons. However on untrusted computing platforms e.g. Android etc. it may be that no facility is provided to verify the source of applications. For example in Android applications are signed by a developer in order to be installed. However such signatures are generated with self signed digital certificates which are not signed by a trusted certificate authority. Consequently anyone can generate a self signed certificate claiming to be the developer. Also secret data embedded within an application is unreliable for facilitating secure communication for the reason that anything embedded in an application is likely to be extracted by others.

Various embodiments of the present disclosure facilitate secure communication between applications through the use of self signed certificates. Although an identity behind a self signed certificate may not be authenticated by a certificate authority applications that are signed by the same self signed certificate may be assumed to be from the same source. In one embodiment a whitelist of one or more self signed certificates may be maintained in an application for the purpose of facilitating secure communication among applications that are signed by those certificates. In another embodiment an application signed by a different certificate may be associated with a secure key that is signed by one of the whitelisted certificates. The secure key may be employed to grant secured access to the application.

Turning now to shown is an example scenario depicting secure communication between two applications in a computing device according to various embodiments of the present disclosure. In this non limiting example scenario the computing device includes at least two applications an electronic book reader application and a shopping application . The computing device executes an untrusted platform. For example the computing device may not include a facility for applications to authoritatively verify the identity and or source of other applications. In one embodiment despite having an untrusted platform the computing device may sandbox each application to prevent others from accessing the data and or other resources of the application.

In order to facilitate secure communication between the applications the electronic book reader application and the shopping application may each include a communication service . The communication service may include a library loaded within the respective applications. For example each of the applications may use a library to interface with an application programming interface API exposed by a separately executing communication service . The communication service leverages a respective key associated with each of the applications. The respective key may correspond to a public key from a certificate used to sign the corresponding application. Alternatively the respective key may correspond to a signed collection of data used to verify the source or identity of the application.

Where the electronic book reader application and the shopping application are distributed by an organization that controls the communication service the electronic book reader application and the shopping application may be considered first party applications. For example first party applications may be signed by a predefined set of trusted certificates. Secure communication access may be granted when a particular application has been signed by a certificate from this predefined set. However one or more applications may be distributed by a different organization for which the signing certificate is not available. Such applications may be considered third party applications. In the case of third party applications secure communication access may be granted when a particular application is associated with an appropriate secure key or a collection of data signed by a certificate from the predefined set which permits the particular application to communicate. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and one or more computing devices in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device is representative of a plurality of client devices that may be coupled to the network . The computing device may comprise for example a processor based system. Such a system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The computing device may include a display . The display may comprise for example one or more devices such as liquid crystal display LCD displays gas plasma based flat panel displays organic light emitting diode OLED displays electrophoretic ink E Ink displays LCD projectors or other types of display devices etc.

The computing device may be configured to execute various applications such as first party applications third party applications a communication service platform services and or other applications. An operating system may also be executed in the computing device . The first party applications and the third party applications may include social networking applications email applications mapping applications contact manager applications imaging applications electronic book reader applications music player applications video player applications and or other types of applications. The first party applications and the third party applications may be configured to render a user interface upon the display . The first party applications are those applications which have an application signature generated by one of a set of trusted certificates . The third party applications are those applications which have an application signature generated by a certificate that is not in the set of trusted certificates .

In one example the first party applications are those distributed by an organization that distributes the communication service . The first party applications may also be distributed by other organizations that are in close cooperation with the organization that distributes the communication service such that the authenticity and or safety of the first party applications from the other organizations may be attested to by the organization that distributes the communication service . By contrast the third party applications are not themselves signed by any of the trusted certificates but are instead associated with a secure key that is signed by a trusted certificate . Accordingly the organization that distributes the communication service or a related organization may attest to the authenticity and or safety of the third party application on an individual basis using the secure key .

The secure key may include various data used to facilitate secure communication between the third party application and other applications. Such data may include a version an issuer an application identifier an application signature one or more permissions a key signature an expiry a key identifier and or other data. The version may be used to indicate a particular version or format for the secure key which may or may not be supported by the communication service . In one embodiment the version may be used in order to revoke previously issued versions of secure keys . The issuer may include an identifier of an organization that issued the secure key e.g. a trusted organization associated with one of the trusted certificates . An application identifier may identify the associated third party application using a string or other identifier recognized by the operating system .

The application signature may correspond to the application signature and may be used to verify the association between the secure key and the particular third party application . In some cases a hash value or other identifier of the application signature may be included in the application signature instead of the application signature . On some platforms e.g. iOS a bundle identifier may be employed rather than a signature where the bundle identifier is a centrally issued non spoofable identifier for the third party application .

The permissions may indicate which applications are allowed to communicate with the associated third party application and or which resources or level of access that will be granted to such applications. The key signature corresponds to a signature of the secure key or a portion thereof by one of the trusted certificates . The expiry includes timestamp and or other values indicating when the secure key was issued and or will expire. In one embodiment the expiry includes a creation timestamp and may be used to revoke all secure keys having a creation timestamp before a threshold time. The key identifier may correspond to a unique identifier for the secure key . The key identifier may be used for example to facilitate revocation of a specific secure key by specification of a corresponding key identifier or omission of the corresponding key identifier from a whitelist of key identifiers .

The secure key may be encrypted or may be unencrypted. The secure key may correspond to extensible markup language XML yet another markup language YAML JavaScript object notation JSON and or other data formats.

The communication service is executed to facilitate secure communication between two or more applications in the computing device . To this end the communication service may perform signature checking of first party applications to ensure that they are signed by one of the predefined trusted certificates . Alternatively the communication service may perform verification of a secure key for a third party application . For instance when a first application desires to communicate with a second application the communication service may be configured to ensure that the first application should be granted access to communicate with the second application. Further the communication service may be configured to ensure that the second application should be granted access to communicate with the first application. Thus it is noted that the security checks performed by the communication service may be mutual. The communication service may facilitate inter process communication between applications using various approaches e.g. pipes sockets message queues etc.

Various platform services may be executed in the computing device . Examples of such platform services may include an application signature service and an application installation service . A call to the application signature service will return an application signature that is associated with a given application for example as identified by an application identifier . It may be assumed that the application signature returned by the application signature service is valid. In some embodiments a portion of the application signature is returned such as a public key used to verify the application signature .

The application installation service is executed to facilitate installation of applications such as the first party applications and the third party applications in the computing device . The operating system may be configured so as to deny installation of applications except by way of the application signature service . The application installation service may be configured to verify the application signature associated with an application before the application is installed. However in various embodiments the applications may be signed by self signed certificates so such signature checks may not verify that the organization that issued the certificate is what it claims to be. Thus the application platform embodied in the computing device may be considered an untrusted platform.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a hosted computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed in the computing environment for example include an authentication service an account permissions service a secure key vending service and other applications services processes systems engines or functionality not discussed in detail herein. The authentication service is configured to authenticate access by applications to secured resources . For example a user may provide security credentials to an application. Such security credentials may include a username a password and or other security credentials. The application may send the security credentials to the authentication service in order to receive an authentication token. Subsequently the authentication token may be employed by the application to access various secured resources to which the user account has been granted access.

An account permissions service may be executed to facilitate centralized maintenance of account permissions. A user may indicate whether particular applications are to have access to secured resources . Additionally a user may indicate whether particular applications are to have access to resources managed by other applications in the computing device . To this end the account permissions service may generate network pages or other user interfaces that facilitate a user providing indications of consent or non consent regarding permissions granted to an application.

The secure key vending service is executed to return a secure key if one exists for a given application identified by an application identifier . In one embodiment secure keys are distributed along with the applications. In other embodiments secure keys are obtained separately from the application from the secure key vending service upon installation of the application in the computing device . Alternatively secure keys may be obtained at runtime from the secure key vending service .

The data stored in the data store includes for example user account data secured resources and potentially other data. The user account data includes various data relating to user accounts. Such data may include security credentials e.g. usernames passwords hashes of usernames and or passwords public keys private keys etc. information relating to active or expired authentication sessions access restrictions and or permissions for the user account maximum lifetime of sessions associated with the user account and or other account information. The secured resources comprise static content dynamic content and or operations that are network accessible to authenticated computing devices .

Next a general description of the operation of the various components of the networked environment is provided. To begin a user installs various applications in the computing device . Such applications may include first party applications and third party applications . The applications are installed via the application installation service . The application installation service is configured to verify an application signature of the application prior to installation and to obtain user consent to any platform permissions requested by the application. The application installation service may provide source information to the user from the self signed certificate used to sign the application but such information may not be trusted.

When multiple applications are installed one application may be configured to communicate with another application to access secured resources exchange information and or perform other operations. Direct communication may be unavailable due to sandboxing of the applications on the device platform. Accordingly the communication service is used to facilitate this communication. In one embodiment the communication service comprises a library which is loaded by each application that is configured to communicate. Thus the application programming interface API of the communication service is made available to the application.

Given that the platform may be an untrusted platform meaning that the platform services are unable to verify application source identities the communication service is configured to verify the source of the application before facilitating communication. The applications and or the communication service may be associated with a whitelist of trusted certificates and the application signature service may provide signature information e.g. a public key to enable the communication service to determine whether the applications were signed by one of the trusted certificates . In one embodiment public keys corresponding to the trusted certificates are distributed with a first party application .

It may be impractical to include trusted certificates for each and every application source. Therefore secure keys may be employed to verify third party applications that are not signed by trusted certificates . The secure keys may be distributed with the third party application or obtained via the secure key vending service . The secure key is signed by one of the trusted certificates and can be used to verify whether the third party application is to be given communication access.

In one example scenario the communication service facilitates exchange of authentication tokens to provide a single sign on and or single log out experience for applications that access a single user account authenticated by the authentication service of an identity provider. For example a single user account may be employed to access an email account a file storage account a shopping account a music account and or other networked resources. Such resources often are accessed by way of different applications in the computing device . An authentication token exchange between the applications would avoid having to prompt the user for security credentials in each and every one of the applications. Security in such a token exchange is of paramount concern and the various embodiments disclosed herein provide security via application signature comparison and or verification of secure keys . Various approaches for token exchange are described in U.S. patent application entitled SYNCHRONIZING AUTHENTICATION SESSIONS BETWEEN APPLICATIONS filed on Sep. 11 2013 under Ser. No. 14 023 840 which is incorporated herein by reference in its entirety.

Although the computing device has been described as a single computing device it is understood that the computing device may comprise a plurality of different computing devices in some embodiments. In one embodiment the communication service may facilitate communication between an application installed in a first computing device and an application installed in a second computing device .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the communication service according to various embodiments. Specifically relates to authentication of first party applications in the computing device . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the communication service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the communication service receives a communication request in a first application from a second application. In other words it is determined that a second application requests to communicate with the first application. In box the communication service determines one or more trusted certificates that are associated with the first application. For example the first application may be associated with a whitelist of one or more trusted certificates whose signature s are a prerequisite for an application to communicate with the first application. In one embodiment one of the trusted certificates corresponds to the trusted certificate used to sign the first application.

In box the communication service determines the certificate used to sign the second application. For example the communication service may call the application signature service to receive the application signature for the second application. In various embodiments the communication service receives the public key used to verify the application signature and or an identifier of the public key.

In box the communication service verifies the source of the second application by determining whether the second application is signed by a trusted certificate determined in box . The application signature may be considered to be a form of tamper proof metadata for the platform involved. The communication service may compare a public key associated with a trusted certificate with a public key associated with the application signature for the second application. In some cases identifiers rather than the actual public keys may be used for comparison. In one embodiment the communication service may attempt to verify the application signature using public keys of the trusted certificates . Although the example of involves verifying an application signature it is understood that verifications may be performed in other embodiments based at least in part on other forms of tamper proof metadata associated with the application. In the example of if the second application has not been signed by one of the trusted certificates the communication service continues to box and denies the communication request. Thereafter the portion of the communication service ends.

If instead the second application has been signed by one of the trusted certificates the communication service moves from box to box and opens a communication channel between the first application and the second application. Such a channel may be bidirectional or unidirectional. In box the communication service may establish permissions for the communication channel. For example the communication service may enable access by the second application to certain resources of the first application but not others. Such permissions may be maintained in the permissions of a secure key or in another configuration file. In one embodiment the permissions are obtained from an account permissions service . In some cases permissions may govern whether a communication channel may be opened in box . Thereafter the portion of the communication service ends. Although involves verifying the source of the second application it is understood that the communication service may perform a similar verification on the first application as well.

Moving on to shown is a flowchart that provides one example of the operation of another portion of the communication service according to various embodiments. Specifically relates to authentication of third party applications in the computing device . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the other portion of the communication service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the communication service receives a communication request in a first application from a second application. In one embodiment the communication service may first attempt to authenticate the second application according to predetermined trusted certificates as in the flow depicted in . If the second application is not authenticated as in the communication service may proceed to box as a fallback approach. In box the communication service obtains a secure key associated with the second application. For example the secure key may be stored in the computing device and obtained via a platform service . Alternatively the secure key may be requested from a secure key vending service executed in the computing environment based upon an identifier of the second application.

In box the communication service performs a signature verification on a key signature of the secure key . The signature verification confirms that the secure key was signed by one of the trusted certificates . The signature verification also ensures that various data within the secure key has not been altered since the secure key was initially generated in a secure environment. In box the communication service determines whether the secure key was signed by a trusted certificate . If the secure key was not signed by a trusted certificate or if the contents of the secure key do not match the key signature the communication service moves to box and denies the communication request. Thereafter the portion of the communication service ends.

If instead the signature verification is successful and the secure key is signed by a trusted certificate the communication service moves from box to box . In box the communication service examines the contents of the secure key . The communication service may perform various checks upon the contents of the secure key in order to verify whether the second application should be given access to communicate with the first application. For example the communication service may verify that the secure key does not have an expiry that indicates expiration or that the secure key does not have a version that has been superseded or revoked.

In box the communication service determines whether the secure key corresponds to the second application based at least in part on a platform specific tamper proof identifier in the secure key . In one platform the communication service may compare an application identifier with a non spoofable identifier of the second application e.g. an identifier vended or confirmable by a platform service or a service in the computing environment . In another platform the communication service may compare the application signature with an application signature vended by the application signature service or a service in the computing environment . In one embodiment the application signature may correspond to a hash value or other value computed from the application signature of the application. In such an embodiment a hash value or other value may be similarly computed from a reference application signature of the application and compared to the application signature in the secure key .

If the secure key is determined not to correspond to the second application the communication service moves to box and denies the communication request. Thereafter the portion of the communication service ends. Otherwise the communication service proceeds from box to box .

In box the communication service determines whether a secure key for the first application includes appropriate permissions to facilitate the requested communication. For example if the second application requests a specific type of resource from the first application the secure key for the first application may specify whether the second application is to be given access. If the secure key for the first application does not include appropriate permissions for the requested communication the communication service moves to box and denies the communication request. Thereafter the portion of the communication service ends.

Otherwise if the secure key for the first application indicates appropriate permissions the communication service moves from box to box and determines whether user consent is to be obtained. While a secure key for the first application may indicate that a source of the first application has approved permissions for the second application in some cases explicit user consent may be a prerequisite for communication.

If user consent is a prerequisite the communication service moves from box to box and obtains a consent indication from the user. For example the communication service may render a user interface on the display with identifying information about the second application the first application the resources requested of the first application by the second application and or other information. In another example a browser may be launched to access a network page generated by an account permissions service or other service that manages application permissions and user consent in the computing environment . A previous consent indication by a user may be cached in the computing device and or stored in the computing environment so that future prompting of the user is avoided. Assuming a consent indication is obtained the communication service proceeds to box . If user consent is not a prerequisite the communication service transitions from box to box .

In box the communication service facilitates communication between the first application and the second application in response to the communication request. Such communication may be bidirectional and or unidirectional as the case may be. It is noted that verification of a secure key of the first application may be performed in like manner in order for the first application to communicate with and access resources of the second application. In such a manner a two way handshake may be performed.

In one embodiment once an application has been verified the communication service may store an association of an application identifier with the verification of the application in a mapping. Subsequently the communication service may refer to the mapping to provide a verification lookup by name of the application or by application identifier . Thereafter the portion of the communication service ends.

Although the flowcharts of depict distinct process flows for establishing communication between first party applications and between third party applications respectively the principles of the present disclosure may be applied to communication between a first party application and a third party application . Where a first party application requests to access a resource of a third party application the communication service may ensure that the first party application is signed by a trusted certificate . Likewise where a third party application requests to access a resource of a first party application the communication service may verify a secure key associated with the third party application . Moreover it is noted that secure keys may be associated with first party applications in some embodiments.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the authentication service the account permissions service the secure key vending service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. A display may also be coupled to the local interface .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor may be the first party applications the third party applications the communication service the platform services and potentially other applications. In addition an operating system may be stored in the memory and executable by the processor .

Referring now to both it is understood that there may be other applications that are stored in the memories and are executable by the respective processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memories and are executable by the respective processors . In this respect the term executable means a program file that is in a form that can ultimately be run by the processors . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memories and run by the processors source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memories and executed by the processors or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memories to be executed by the processors etc. An executable program may be stored in any portion or component of the memories including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memories are defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memories may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processors may each represent multiple processors and or multiple processor cores and the memories may each represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interfaces may be appropriate networks that facilitate communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interfaces may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processors may be of electrical or of some other available construction.

Although the authentication service the account permissions service the secure key vending service the first party applications the third party applications the communication service the operating system the platform services and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the communication service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of depict a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the authentication service the account permissions service the secure key vending service the first party applications the third party applications the communication service the operating system and the platform services that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

