---

title: Secure identification of intranet network
abstract: A method is provided for network identification based on high entropy data on a network which are not easily guessed or obtained outside the network, which can prevent an attacker from “spoofing” the network. A component in a client computer connected to a network may obtain over the network a network data block including device identification information of a device controlling the network. Upon parsing the network data block, such high entropy data as unique device identifiers may be obtained from the device identification information. Depending on availability of the unique device identifiers and authentication history of the client computer, different combinations of the unique device identifiers and/or other identification information may be used to generate a unique network identifier such as a network signature. The component may provide the network signature to applications within the client computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09143510&OS=09143510&RS=09143510
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09143510
owner_city: Redmond
owner_country: US
publication_date: 20131204
---
This Application is a Continuation of and claims benefit from U.S. patent application Ser. No. 11 788 210 that was filed on Apr. 19 2007 and that is incorporated herein by reference in its entirety.

When a client computing system is connecting to a network e.g. an intranet network identification of the network is typically performed. The network identification provides information on which network the client computing system is connected to and is used by the computing system to select resources such as for example applications services and devices included in the network. Network identification is also required by various applications and services included in the client computing system such as firewalls which may communicate with devices external to the system differently depending on whether the network is a secure or unsecured network.

Conventionally network identification is based on a domain name system DNS suffix of a network which may be obtained from a network device that controls the network. However the DNS suffix can be relatively easily guessed in which case the client computing system may become vulnerable to a spoofing attack. By this attack when the client computing system is connected to an unsecured network a secure network e.g. a secure corporate network may be spoofed by using its network identifier based on the DNS suffix to identify the unsecured network as a secure network. The client computing system may then operate as if it were connected to the secure network and a user may unknowingly take actions that may compromise the user s identity or a security of the client computing system.

Network identification particularly an intranet network identification may be performed by utilizing high entropy data associated with the network which is neither easily guessed nor obtainable outside the network. The high entropy data may be device identification information of a device controlling a network e.g. a domain controller including unique device identifiers.

The device identification information may be obtained by parsing a network data block obtained by a client computer over the network. The device identification information may depend on the unique device identifiers available. Therefore depending on the availability of the unique device identifiers and authentication history of the client computer a unique network identifier e.g. a network signature may be generated by a component in the client computer to identify the network from one or more of the unique device identifiers and in some embodiments other information. A hash function may be used to generate the unique network identifier. The generated unique network identifier may be provided to other components in the client computer.

Because the unique device identifiers have high entropy characteristics they may not be guessed by or obtained outside the network by an attacker. Therefore the network may not be easily spoofed. 

In one aspect the invention provides a method of operating a component in a client computer connected to a network. According to the method device identification information of a device controlling the network is obtained. The method also includes generating a unique network identifier from the device identification information and providing the unique network identifier as an output identifying the network.

In another aspect the invention provides a computer readable medium having computer executable instructions for performing a method of operating a component in a client computer connected to a network. The method comprises obtaining device identification information of a device controlling the network generating a unique network identifier from the device identification information and providing the unique network identifier as an output identifying the network.

In yet another aspect the invention provides a system for use in a client computer connected to a network. The system comprising a computer readable medium having a component comprising computer executable instructions that when executed perform a method of operating the client computer. The method comprises obtaining device identification information of a device controlling the network generating a unique network identifier from the device identification information and providing the unique network identifier as an output identifying the network.

The inventors have appreciated that a network can be identified using unique high entropy data associated with a network which is not easily guessed or obtainable outside the network. This complicates and may preclude spoofing the network by a malicious attacker. The high entropy data may be derived from device identification information that can be obtained upon a request by a client computer connected to the network from a device controlling the network e.g. a domain controller . The device identification information as well as other information may be obtained by parsing a network data block obtained by the client computer over the network. Examples of the device identification information include unique device identifiers such as a root domain globally unique identifier Root Domain GUID and a domain globally unique identifier Domain GUID .

The inventors have further appreciated that a unique network identifier used to identify the network can be generated by combining such device identification information using a function e.g. a hash function . Depending on the availability of the unique device identifiers and authentication history of the client computer the unique network identifier e.g. a network signature may be generated from one or more of the unique device identifiers and may also include other information.

A network signature may be generated when the client computer connects to a network. Any change in network characteristics also may result in generating a new network signature and consequently identification of a new network. The generated network signature may be provided to an operating system applications or other components within the client computer requiring knowledge of the signature and may optionally be stored in an encrypted format for future use.

Access to the secure intranet may be protected from an unsecured network and any other network by a firewall which may be implemented in any suitable way. Computing devices connected to the intranet behind the firewall may behave differently from computing devices outside the intranet .

In the example illustrated an access point is associated with the unsecured network . The unsecured network may be any network outside the intranet .

The intranet may be controlled by a domain controller which may be a server spanning one or more computing devices that contain information including logon information on the client computer and any other devices and systems and their users on the intranet . A client computer or any other device connected to an intranet may or may not be domain joined. To be trusted within a domain and to communicate with other devices encompassed by the domain a domain joined client computer needs to be authenticated with a domain controller controlling the domain by exchanging credentials. The domain controller may push down and enforce security policies applied to the domain joined client computer and thus control the client computer. A domain may be controlled by one or more domain controllers. If a client computer is non domain joined e.g. a customer having a guest account visits the domain the client computer may not access some domain resources and no authentication is required for the client computer to connect to the domain.

When the client computer is connected to the intranet the domain controller may provide device identification information such as for example a domain name system DNS suffix to the client computer . The DNS suffix is part of an Internet protocol IP address of the domain controller and may comprise a name of a company using the intranet and a category of a domain e.g. commercial educational or other . As an example a DNS suffix may be microsoft.com. 

The device identification information is typically used for communication between a client computer and a server on an intranet network. It should be appreciated that the client computer may or may not be joined to a domain network of the intranet . In order to join the domain network the client computer needs to be authenticated by the domain controller by exchanging credentials.

The client computer may comprise applications an operating system a firewall and other components not shown for simplicity. The operating system may comprise a component shown by way of example only and not to limit the scope of the invention as a network location awareness NLA component which may obtain the device identification information and generate a network identifier based on the DNS suffix . The network identifier may optionally be retained for future use. The NLA component may also obtain and store other information such as for example a type of the network and network configuration information. The NLA component may be associated with an application programming interface API to provide the network identifier and notice of changes in the network identifier to the applications the firewall and any other components of the client computer which may require the network identifier for their operation.

The applications may utilize a functionality e.g. provided by a user interface that allows receiving an input from a user of the client computer indicating whether the user considers a new network in particular the network on which the client computer does not have any information safe. Furthermore different categories of network safety may be assigned to the new network by the user.

The DNS suffix identifying the domain controller can be guessed outside the intranet for example by a malicious attacker within the unsecured network . Consequently the NLA component can be spoofed into generating a network signature that matches the signature of a secure network when a client computer is connected to another possibly unsecured network which may compromise secure identification of the intranet . The DNS suffix IP address and other information such as for example information used for mutual authentication of a client computer and a server or other devices on the network may be referred to as low entropy information which indicates that this information can be guessed or is obtainable outside the network. Therefore using the low entropy information to generate the network signature may provide a security breach whereby a malicious attacker can spoof the network. The network spoofing may include guessing low entropy information e.g. a DNS suffix used by the NLA component to generate a network signature and providing this information to a client computer connected to a network different from the network being spoofed. As a result the client computer may erroneously determine that it is connected to the network being spoofed. 

False network identification presents a particular problem for a mobile computing device that is configured to operate with more permissive security settings when on an intranet than when on an unsecured network.

However using high entropy data characteristic of a secure network i.e. information that is random or nearly random and is not obtainable outside a network to generate a unique network identifier such as a network signature may provide an additional level of security to a network identification process. In some embodiments a software component such as an NLA component or any other suitable component in a client computer may obtain the high entropy data and generate the network signature. The high entropy data may comprise one or more unique device identifiers and may be obtained as part of device identification information. The device identification information may be obtained as a result of parsing a network data block.

A network signature may be generated from one or more of the unique device identifiers and or other information. For example a combination of one or more of the unique device identifiers and or other information may be used. In some embodiments a complex combination e.g. a hash or any other suitable function may be used to generate the network signature. Because of the high entropy characteristics of the unique device identifiers the network signature may provide secure identification of the network.

An application programming interface API here shown as an API may be used by the NLA component to provide the network signature to components of the client computer which may use the network signature in any suitable way. For example the firewall may utilize the network signature to determine whether the network is safe and may secure a connection if the network is unsecured.

Data used to generate the network signature may be obtained from the network. In the embodiment illustrated the domain controller may provide the device identification information in response to a request from the client computer . The request may be part of any suitable protocol. Also a network data block obtained by client computer over the network may comprise the device identification information. In some embodiments the device identification information may be parsed to obtain one or more unique device identifiers.

In some embodiments the network data block may comprise Active Directory domain identification data. In this example the network data block may comprise such device identification information as a Root Domain Globally Unique Identifier Root Domain GUID a Domain Globally Unique Identifier Domain GUID a Forest Name and a Domain Name . Root Domain GUID and Domain GUID may be referred to as high entropy data thus being unique device identifiers. Root Domain GUID may or may not be available as part of the network data block and is shown by a dashed line. A GUID is a unique key used for device and software identity purposes and may be for example a 128 bit random number. It should be appreciated that other information such as for example a Media Access Control MAC address a serial number a random number other than a GUID or any other suitable data can be used as unique device identifiers identifying a device controlling a network if this information is not easily guessed and is not obtainable outside the network.

The network signature may be generated from one or more of the unique device identifiers and or other information. The specific approach for generating the network signature may depend on properties of the network and what information is available or can be obtained at a given time for example because of network errors or inability to reach a domain controller. The network signature generation may also depend on authentication history of the client computer.

A network data block may be obtained at block . As discussed above the network data block i.e. the network data block may comprise device identification information such as for example Root Domain GUID Domain GUID Forest Name and Domain Name. The Root Domain GUID and Domain GUID having high entropy characteristics may be referred to unique device identifiers. It should be appreciated that the device identification information above is given by way of example only and not to limit the scope of the invention and other device identification information including high entropy data may be obtained with the network data block or in any other suitable way as well. The process proceeds to a block wherein the network data block may be parsed. Parsing allows extracting unique device identifiers from the device identification information.

Upon parsing the network data block it may be determined in decision block whether Root Domain GUID is available as part of the device identification information. If the answer is affirmative the process branches to block B which is followed by blocks illustrating in further processing. Otherwise the answer is no and the process branches to block C which is a starting block of a process described in connection with .

If it has been determined in decision block that the machine is not domain joined the network signature may be generated as a hash of Root Domain GUID and Forest Name in block . Other suitable functions may be used to generate the network signature as well. If the machine is domain joined the process proceeds to decision block where it may be determined whether the machine is authenticated. If the answer is affirmative the network signature may be generated as a hash of Root Domain GUID and Forest Name in block . Otherwise if the machine is not authenticated the process continues to decision block to determine whether the machine has been previously authenticated. If the answer is yes the network signature may be generated as a hash of a GUID GUID Downgrade Root Domain GUID and Forest Name in block . GUID Downgrade is used to change the value of Root Domain GUID which could be previously obtained thus instigating generation of a new network signature. If the machine has not been previously authenticated the process branches to block where the network signature may be generated as a hash of Root Domain GUID and Forest Name.

The network signature generated at both blocks and may be output at block and used to identify the network. The network signature may be provided for example via an API coupled to NLA component to applications in the client computer requiring the network signature for operation.

If in decision block it has been determined that the machine is not domain joined the network signature may be generated as a hash of Domain GUID and Domain Name in block . Other suitable functions may be used to generate the network signature as well. If the machine is domain joined the process proceeds to decision block where it may be determined whether the machine is authenticated. If the answer is affirmative the network signature may be generated as a hash of Domain GUID and Domain Name in block . Otherwise if the machine is not authenticated the process continues to decision block to determine whether the machine has been previously authenticated. If the answer is yes the network signature may be generated as a hash of a GUID GUID Downgrade Domain GUID and Domain Name in block . As discussed above GUID Downgrade is used to change the value Root Domain GUID which results in generating a new network signature. If the machine has not been previously authenticated the network signature may be generated as a hash of Domain GUID and Domain Name in block .

The network signature generated at both blocks and may be output at block and used to identify the network. The network signature may be provided for example via an API coupled to an NLA component to applications in the client computer. The generated network signature may be stored for example in an encrypted format for future use. Any suitable encryption algorithm may be used to encrypt the network signature.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device.

Also a computer may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or conventional programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

In this respect the invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices etc. encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

