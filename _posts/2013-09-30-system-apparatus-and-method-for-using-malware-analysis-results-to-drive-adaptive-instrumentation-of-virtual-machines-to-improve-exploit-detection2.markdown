---

title: System, apparatus and method for using malware analysis results to drive adaptive instrumentation of virtual machines to improve exploit detection
abstract: According to one embodiment, an electronic device comprises a memory to store information and a processor. The processor is adapted to receive information associated with content such as network traffic, to process the stored information and to conduct operations on the content. These operations may comprise determining, by a virtual machine processed by the processor, an occurrence of an event during malware analysis of an object associated with the content, and dynamically altering a virtual machine instrumentation of the virtual machine based on information associated with the event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09596258&OS=09596258&RS=09596258
owner: FireEye, Inc.
number: 09596258
owner_city: Milpitas
owner_country: US
publication_date: 20130930
---
Embodiments of the disclosure relate to the field of data security. More specifically one embodiment of the disclosure relates to a system apparatus and method that use malware analysis results obtained during replay operations to dynamically adjust instrumentation of a virtual machine utilized for exploit detection.

Over the last decade malicious software malware has become a pervasive problem for Internet users. In some situations malware is a program or file that is embedded within downloadable content and designed to adversely influence or attack normal operations of a computer. Examples of different types of malware may include bots computer viruses worms Trojan horses spyware adware or any other programming that operates within an electronic device e.g. computer tablet smartphone server router wearable technology or other types of electronics with data processing capability without permission by the user or an administrator.

One type of malware is distributed over a network via websites e.g. servers operating on a network according to a hypertext transfer protocol HTTP standard or other well known standard. Malware distributed in this manner may be actively downloaded and installed on a computer without the approval or knowledge of its user simply by the computer accessing the web site hosting the malicious network content the malicious web site .

Besides being in the form of malware embedded objects associated with web pages hosted by the malicious web site malware may also enter a computer on receipt or opening of an electronic mail email message. For example email may contain a Uniform Resource Locator URL or an attachment such as a Portable Document Format PDF document with embedded malicious executable programs. Furthermore malware may exist in files contained in a computer memory or storage device having infected those files through any of a variety of attack vectors.

Various processes and devices have been employed to prevent the problems associated with malware. For example computers often run antivirus scanning software that scans a particular computer for viruses and other forms of malware. The scanning typically involves automatic detection of a match between content stored on the computer or attached media and a library or database of signatures of known malware. The scanning may be initiated manually or based on a schedule specified by a user or system administrator associated with the particular computer. Unfortunately by the time the scanning software detects malware some damage on the computer or loss of privacy may have already occurred and the malware may have propagated from the infected computer to other computers. Where the malware is polymorphic malware which is capable of mutating to defect signature matching antivirus scanning offers little protection.

Another type of malware detection solution employs a virtual environment that virtualizes the processing of data flows e.g. series of related packets within a sandbox environment. The sandbox environment comprises a virtual machine VM that conducts generic virtualized processing sometimes referred to as replay operations on at least some content within a data flow in efforts to detect behavioral anomalies that may signal the presence of an exploit e.g. a detected malicious attack by malware . For example in response to detecting a timeout event where no exploit has manifested after a predetermined amount of time has elapsed the VM may merely change its software profile and perform the same replay process. If an exploit is detected however and if processing time is still available the same generic VM instrumentation will continue to run for the allotted time without any intelligence as to making run time more efficient.

More specifically the above described malware detection solution is inefficient as the same replay process is used without considering the particular exploits targeted for detection if any are specifically targeted and or without considering the results of an initial analysis or whether the analysis actually detected an exploits.

Various embodiments of the disclosure relate to a malware content detection MCD system and a corresponding method for utilizing malware analysis results obtained during replay operations conducted by one or more virtual machines for exploit detection where the malware analysis results are used to dynamically adjust instrumentation of the virtual machine s to achieve reduced configuration time and increased effectiveness in exploit detection.

In general a replay operation is virtualized processing of an object by one or more virtual machines VMs within a sandboxed virtual environment in efforts to detect the presence of malware where the object is associated with network traffic propagating over a network. Examples of an object may include content received over a network e.g. Internet downloads a file e.g. PDF file Flash file or other file type a Uniform Resource Locator URL embedded within an electronic mail email message data flow e.g. series of related packets or other types of content. Herein a VM supplies malware analysis results produced during the replay operation to instrumentation control logic e.g. logic implemented within a replay analysis engine which may be part of the VMM . The instrumentation control logic is responsible for dynamically altering the instrumentation of the VM based on the malware analysis results. In other words the malware analysis results received by the instrumentation control logic are used to determine if when a dynamic change of the VM instrumentation is to occur and perhaps the changed VM instrumentation. The dynamic change to the VM instrumentation comprises changing logic associated with a particular VM process in the VM which is running as part of the host virtual system e.g. at the Host layer while preserving state so as to remain transparent to the guest virtual system e.g. Guest layer of the VM.

As this dynamic change of the VM instrumentation may be in response to detection of an exploit or a particular triggering event associated with on going malware analysis results a greater number of samples of content may be analyzed as well as the malware analysis may be conducted faster and more efficiently. In other words VM instrumentation changes are conducted based on malware analysis results uncovered from prior virtual processing of e.g. the network traffic in order to more promptly and more accurately target exploits that may be present in the network traffic. For instance if behaviors associated with the virtual processing of binary code are being analyzed instrumenting the VM to better target binary at the opcode level would greatly improve the accuracy of the malware analysis. Similarly if behaviors associated with the processing of network traffic are being analyzed altering VM instrumentation at the virtual device level e.g. within VM processes of a VM may provide more complete malware analysis. In sum prompt and directed adjustment of VM instrumentation not only reduces configuration time so as to reduce the chances of any malware detecting that it is operating within a virtual environment but also increases accuracy and effectiveness in exploit detection.

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include hardware circuitry having data processing or storage functionality. Examples of such circuitry may include but is not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit a digital signal processor semiconductor memory combinatorial logic or the like.

Logic or engine may be in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

The term content generally refers to information transmitted as one or more messages where each message may be in the form of a packet a frame an Asynchronous Transfer Mode ATM cell or any other series of bits having a prescribed format. The content may be received as a data flow namely a group of related messages within ingress network traffic.

Herein content may include one or more types of data such as text software images audio metadata and or other digital data. One example of content may include web content or any data traffic that may be transmitted using a Hypertext Transfer Protocol HTTP Hypertext Markup Language HTML protocol or may be transmitted in a manner suitable for display on a Web browser software application.

Another example of content includes electronic mail email which may be transmitted using an email protocol such as Simple Mail Transfer Protocol SMTP Post Office Protocol version 3 POP3 or Internet Message Access Protocol IMAP4 . A further example of content includes an Instant Message which may be transmitted using Session Initiation Protocol SIP or Extensible Messaging and Presence Protocol XMPP for example. Yet another example of content includes one or more files that are transferred using a data transfer protocol such as File Transfer Protocol FTP for subsequent storage on a file share.

The term malware is directed to software that produces an undesired behavior upon execution where the behavior is deemed to be undesired based on customer specific rules manufacturer based rules and any other type of rules formulated by public opinion or a particular governmental or commercial entity. This undesired behavior may include a communication based anomaly or an execution based anomaly that would 1 alter the functionality of an electronic device executing an application software in a malicious manner 2 alter the functionality of an electronic device executing that application software without any malicious intent and or 3 provide an unwanted functionality which is generally acceptable in other context.

In general a virtual machine VM is a simulation of an electronic device abstract or real that is usually different from the electronic device conducting the simulation. A VM may include one or more VM processes where each VM process is based on specifications of a hypothetical electronic component e.g. processor network interface card NIC storage device etc. so as to collectively emulate the architecture and functions of a real electronic device. For simplicity one type of VM process referred to as a virtual device may be a virtualization of an electronic device or an electronic component.

 VM instrumentation refers to a software module configured for execution on a virtual machine VM where the software module controls and or monitors virtualized operations conducted on an object associated with network traffic. These virtualized operations which are representative of operations conducted by the virtual device produce information from which behaviors may be determined. The detection of anomalous behaviors represent that the object is suspicious and may include malware. An assigned level of suspiciousness may be used to identify the likelihood that the object includes malware.

The term transmission medium is a communication path between two or more systems e.g. any electronic devices with data processing functionality such as for example a security appliance server mainframe computer netbook tablet smart phone router switch bridge or brouter . The communication path may involve wired wireless and or logical communications. Examples of wired and or wireless communications include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism. An example of logical communication includes two software components in communication with each other although they are not physically connected.

The term computerized generally represents that any corresponding operations are conducted by hardware in combination with software and or firmware.

Lastly the nomenclature s denotes one or more and the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of a communication system deploying a plurality of malware content detection MCD systems N 1 e.g. N 3 communicatively coupled to a management system via a network is shown. In general management system is adapted to manage MCD systems . For instance management system may be adapted to cause malware identifiers generated as a result of malware detection by any of MCD systems to be shared with one or more of the other MCD systems including for example where such sharing is conducted on a subscription basis. Additionally the management system may coordinate the sharing information associated with the VM instrumentation described below among the MCD systems in order to better refine malware analysis and detection.

Herein according to this embodiment of the invention first MCD system is an electronic device that is adapted to i receive network traffic that is routed over a communication network between at least one server device and at least one client device and ii monitor in real time content within the network traffic. More specifically first MCD system may be configured to inspect content received via communication network and identify suspicious objects. An object is identified as suspicious when it is assessed by a preliminary analysis engine with a certain level of likelihood that at least one characteristic identified during inspection of the object indicates the presence of malware.

Thereafter the suspicious object is scheduled by scheduler to be analyzed within a replay analysis engine . Replay analysis engine provides a static analytical environment and or a dynamic analytical environment .

The static analytical environment comprises a first analysis engine that is adapted to conduct static malware detection operations such as comparisons between binary content from the network traffic and suspected malware identifiers e.g. alphanumeric patterns associated with known or suspected malware etc. for example. The dynamic analytical environment comprises a second analysis engine which includes at least instrumentation control logic operating in concert with VM s as described herein. The second analysis engine is adapted to detect whether the suspicious object may include malware by execution of one or more VMs that are configured to simulate the receipt and or processing of the object under analysis analyzed object targeted for the client device . The second analysis engine analyzes the resultant behaviors monitored within the VM. These may include expected behaviors e.g. those typically resulting from processing objects of the type being analyzed and unexpected or anomalous behaviors and may represent those behaviors that would have occurred if the targeted client device processed the object and these behaviors are provided as malware analysis results to logic within replay analysis engine . Examples of anomalous behavior may include but are not limited or restricted to unexpected network transmissions unexpected changes in performance or the like.

In response to the malware analysis results instrumentations of the VM may be altered in a manner that is transparent to the virtualized operating system of the VM so as to re configure the VM for continued or subsequent analysis e.g. focused on a particular exploit or family of exploits that are more likely to be present within the network traffic based on the malware analysis results already provided.

Herein first analysis engine and the second analysis engine may operate on the analyzed content concurrently or may operate on the analyzed content sequentially. For sequential operations the first analysis engine normally performs static analysis on the analyzed content prior to the second analysis engine performing dynamic analysis on that content.

According to this embodiment of communication system first MCD system may be a web based security appliance that is configured to inspect ingress data traffic identify whether content associated with the data traffic may include malware and if so conduct a deeper analysis of the content. This deeper analysis is conducted in the replay analysis engine to detect anomalous and undesired behaviors that would be present if the data traffic were actually processed by an electronic device such as client device . The particulars of this analysis are described below.

The communication network may include a public computer network such as the Internet in which case an optional firewall represented by dashed lines may be interposed between communication network and client device . Alternatively the communication network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks.

The first MCD system is shown as being coupled with the communication network behind the firewall via a network interface . The network interface operates as a data capturing device sometimes referred to as a tap or network tap that is configured to receive data traffic propagating to from the client device and provide content from the data traffic to the first MCD system .

According to one embodiment of the disclosure the network interface is configured to receive and copy content from the network traffic targeted for client device normally without an appreciable decline in performance by the server device the client device or the communication network . The network interface may copy any portion of the content for example any number of data packets. According to another embodiment of the disclosure the network interface is an in line device that intercepts and routes the content being some or all of the network traffic to first MCD system . Where the network traffic does not contain suspicious object the network traffic is returned back to the network interface for re routing to the targeted destination e.g. client device .

In some embodiments the network interface may capture metadata from network traffic intended for client device where the metadata is used to determine the software profile and particular VM instrumentation s for the VM s if further malware analysis is needed. The metadata may be associated with the server device and or the client device . In other embodiments preliminary analysis logic described herein may obtain or generate the metadata associated with the network traffic.

It is contemplated that for any embodiments where the first MCD system is implemented as an dedicated appliance or a dedicated electronic device the network interface may include an assembly integrated into the appliance or networking logic that includes network ports network interface card or the like. The integrated assembly or networking logic provides coupling to the communication network in order to non disruptively tap network traffic propagating through firewall and provide the network traffic or a copy thereof to the preliminary analysis logic . In other embodiments the network interface can be integrated into an intermediary device in the communication path e.g. in firewall router switch or other network device or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to duplicate traffic from virtual networks.

Referring still to the first MCD system comprises preliminary analysis logic a database a scheduler a data store replay analysis engine and a reporting module . In some embodiments the network interface may be contained within the first MCD system . Also preliminary analysis logic scheduler and or replay analysis engine may be software modules executed by a processor that receives the suspicious object performs malware analysis and is adapted to access one or more non transitory storage mediums operating as database data store and or reporting module . In some embodiments the preliminary analysis engine may be one or more software modules executed by a processor and the scheduler and the replay analysis engine may be one or more software modules executed by a different processor where the two processors are possibly located at geographically remote locations and communicatively coupled for example via a network.

In general the preliminary analysis engine serves as a filter to permit subsequent malware analysis only on certain portions of the incoming content which effectively conserves system resources and provides faster response time in determining the presence of malware within analyzed object s . As an ancillary benefit by analyzing only a portion of incoming content that may have exploits e.g. one or more objects referred to as object s that may be exploited by malware a greater number of VMs and VM processes may be supported to run concurrently with each other.

As illustrated in according to one embodiment of the disclosure the preliminary analysis logic receives a copy of content associated with network traffic from the network interface and conducts operations in accordance with rules stored in database to determine if any of the content includes suspicious objects. The preliminary analysis logic may examine an object within the content without executing or opening the object.

For example the preliminary analysis logic may examine the attributes and or metadata for content associated with an object in order to determine whether the object originated from a blacklisted malicious server malicious web site or originated from a region or networking device that is providing a high level of content having malware. Also the preliminary analysis logic may examine the content itself to determine whether such content includes objects that have a higher probability of including malware than other objects e.g. attached files in email messages embedded URLs etc. . According to one embodiment of the disclosure the preliminary analysis logic flags suspicious objects.

Thereafter according to one embodiment of the invention the preliminary analysis logic may be adapted to transmit at least a portion of the metadata or attributes associated with the suspicious object which for example identifies the type of software e.g. browser email reader or document reader that the object requires to be processed and in some cases identifies attributes of the targeted client device to scheduler . The metadata and or attributes are used by the scheduler to determine the software profile s for the VM s as well as the VM instrumentation s needed for processing the suspicious object in the sandboxed virtual environment.

More specifically scheduler comprises queues and logic for identifying the type of object targeted for replay e.g. HTTP traffic PDF files Flash files etc. identifying the software profile and VM instrumentation needed for the VM and determining when the object is ready for processing in the dynamic analytical virtual environment of the replay analysis engine . In another embodiment of the disclosure the replay analysis engine may be adapted to receive one or more messages e.g. data packets from the preliminary analysis logic and analyze the message s to identify what VM s is are to be deployed. Replay analysis engine would provide signaling to scheduler to retrieve the VM s with particular VM instrumentation s .

For instance as an illustrative example the suspicious content under analysis may include an email message that was generated under control of Windows 8 Operating System using a certain version ver. X of Windows Outlook. The email message further includes a Portable Document Format PDF attachment in accordance with a particular version ver. Y of Adobe Acrobat . Upon determining that the email message includes a suspicious object preliminary analysis logic provides software profile information to scheduler to identify a particular type of VM instrumentation needed to conduct malware analysis of the suspicious object. According to this illustrative example the software profile information would include 1 Windows 8 Operating System OS 2 Windows Outlook version X and 3 PDF support through Adobe Acrobat version Y.

Thereafter the scheduler conducts a search as to whether any of the VM disk files within data store features a particular VM instrumentation to process the suspicious object in accordance with the above identified OS and one or more applications. If so the scheduler creates a VM with a VM process having the corresponding VM instrumentation. However if the data store does not feature a software profile supporting the above identified OS and application s the scheduler may simply ignore the VM request or may retrieve a VM image that is based on a similar software profile. For example the scheduler may receive a VM based on the same OS but a different version of a targeted application e.g. Adobe Acrobat version Z . Alternatively the scheduler may receive the same OS along with an application different from the targeted application but having similar functionality e.g. different type of browser etc. . As another alternative the scheduler may receive a different OS with a similar architecture.

During run time a VM provides malware analysis results to instrumentation control logic of which analyzes the malware analysis results and in response to identifying an event notifies the VM to request a different instrumentation. The event may include detection of an exploit through analysis of the malware analysis results or perhaps an occurrence of an anomalous behavior for example a first timeout condition e.g. a predetermined period of run time has elapsed . Hence the instrumentation control logic dynamically alters a VM process within the VM to implement a different VM instrumentation in order to optimize subsequent exploit detection processes.

The data store is configured to store one or more VM disk files where each VM disk file includes a VM instrumentation. Capable of being pre stored uploaded and or erased automatically via management system or locally uploaded by an administrator the VM instrumentations provide different functionality to increase the likelihood of detecting potential exploits. For example a first VM disk file may include a first VM instrumentation directed to analysis of JavaScript code in accordance with a first type of JavaScript engine and a second VM disk file may include a second VM instrumentation directed to deeper level analysis of JavaScript code in accordance with a different type of JavaScript engine.

The dynamic alteration of the VM instrumentation is directed to select a new VM instrumentation that may be directed to a recently detected exploit or family of exploits that commonly causes or is related to characteristics associated with anomalous behavior identified in the malware analysis results e.g. unusual network transmissions unusual changes in performance etc. . In fact some VM instrumentations may be directed to detecting the same or related exploit types but feature different functionality e.g. faster processing specifically targeted processing different software components etc. .

The replay analysis engine may flag a suspicious object as malware according to the observed anomalous behavior detected by the VM. The reporting module may issue alerts indicating the presence of malware and using pointers and other reference information identify what portion of the suspicious object may contain malware. Additionally the malicious server e.g. server device or malicious website may be added to a list of malicious network content providers and future network transmissions originating from the server device may be blocked from reaching their intended destinations e.g. by firewall .

Of course in lieu of or in addition to MCD systems it is contemplated that cloud computing services may be implemented with the replay analysis engine to conduct VM based dynamic analysis on one or more objects within the network traffic perform dynamic changes in VM instrumentation and or store and provide VM instrumentations as needed as described herein.

Referring now to an exemplary block diagram of logic associated with MCD system is shown. MCD system comprises one or more hardware processors e.g. one or more microprocessors processor cores digital signal processors application specific integrated circuits ASICs microcontrollers and or programmable logic that are coupled to communication interface logic via a first transmission medium . Communication interface logic enables communications with other MCD systems and management system of . According to one embodiment of the disclosure communication interface logic may be implemented as a physical interface including one or more ports for wired connectors or may constitute a virtual interface. Additionally or in the alternative communication interface logic may be implemented with one or more radio units for supporting wireless communications with other electronic devices.

Processor is further coupled to persistent storage via transmission medium . According to one embodiment of the disclosure persistent storage comprises a scheduler and a replay analysis engine that may be logic within a controller. Herein the controller may be implemented as part of a VM monitor VMM also referred to as a hypervisor for managing or monitoring VMs which may be hosted by a host operating system OS not shown .

Replay analysis engine comprises instrumentation control logic which includes logic that are adapted to analyze malware analysis results received from one or more VMs M 1 during run time. Such analysis is directed to optimizing performance of exploit detection processes conducted by the VMs . Such optimization is accomplished by the instrumentation control logic causing a dynamic change in the instrumentation of a VM e.g. VM while preserving the state of operation as perceived by the guest operating system.

According to one embodiment of the disclosure the dynamic change may be accomplished by changing an implementation of a VM process e.g. virtual device . More specifically the dynamic change may be accomplished by changing a pointer to at least particular function for the virtual device that is utilized by the VM while preserving both the state of the virtual device associated with the VM and the defined operation for the particular function. The defined operation may be provided from opcode associated with the particular function sometimes referred to as the specification . As an illustrative example the dynamic change may alter a pointer to a particular function e.g. ADD function to now point to a second VM instrumentation e.g. a second ADD function for the virtual device associated with the VM in lieu of the first VM instrumentation e.g. a first ADD function for the virtual device associated with the VM . Both VM instrumentations are directed to the same specification e.g. ADD data in register R1 and register R2 and store the result in register R3 but the second VM instrumentation includes additional functionality not found in the first VM instrumentation.

According to one embodiment of the disclosure the dynamic change of the VM instrumentation VM instrumentation VM instrumentation X 2 is triggered by instrumentation control logic detecting an event such as a detected behavior that may be associated with a particular exploit or exploit type for example and thereafter signaling the VM or the scheduler directly to re configure itself with one or more VM instrumentations directed to further detection of the particular exploit or exploit type.

In order to convey the malware analysis results stored in data store which may include the file names URLs server DNS names or the like associated with suspicious exploits processor s may invoke GUI logic . GUI logic provides one or more screen displays for conveying a more detailed summary of potentially malicious content being detected by MCD system .

Referring to a block diagram of logical representations for virtual machines VM and VM is shown. VM comprises a guest virtual system and a host virtual system . According to one embodiment of the disclosure the guest virtual system hereinafter Guest is logic e.g. a software module of the VM that comprises Guest OS and Guest application s . Guest OS may include an independent instance of an operating system such as Windows MAC OS LINUX or the like. Guest application s includes associated virtualized software applications such as Adobe Acrobat Explorer Mozilla Word and other data processing applications. The host virtual system hereinafter Host comprises one or more VM processes where each VM process operates as virtualized hardware in providing one or more computing resources e.g. processing storage network connectivity etc. to Guest .

VM process comprises a first logic portion e.g. software component and a second logic portion . First logic portion comprises a first interface e.g. set of instructions and or one or more registers for Guest and enables guest to visualize hardware where the physical implementation of the hardware is located at a Host kernel . The first interface is static in nature so as to preserve state information associated with the VM process as perceived by the guest .

In contrast the second logic portion comprises a VM instrumentation which is executable software that controls and or monitors operations associated with the virtual device . These virtualized operations may be used to monitor behavior of suspicious objects being executed on the Guest during virtualized use the virtual device . The VM instrumentation further provides an interface to physical resources associated with the virtualized computing resources.

As an example VM instrumentation may be a software component that is configured to monitor for a certain event e.g. access to a particular address range in memory by the CPU and issues an alert in response to each memory access. This monitoring and issuance of alerts is independent from the Guest application e.g. Adobe Acrobat running on the Guest where the process may be executing suspicious objects from intercepted network traffic. As the state of operation for the process is preserved when no further tracking is desired based on detection of the event the VM instrumentation can be dynamically changed while the Guest application continues to run. The VM instrumentation on the VM is adjusted transparent to the Guest to optimize exploit detection associated with a particular exploit monitored such as heap spray for example.

Referring now to a first embodiment of virtual machine VM conducting virtualized operations that produce an event that causes the VM instrumentation for one of the VM processes to dynamically change in a manner transparent to the Guest is shown. Herein the virtual devices include a virtual network interface card vNIC a virtual storage device vStorage device and a virtual central processing unit vCPU where vNIC is adapted to receive certain types of network traffic e.g. data packets for replay while vStorage device is adapted to receive other types of network traffic e.g. PDF files and or URLs for replay. The malware analysis results generated by VM may include an event that prompts instrumentation control logic within replay analysis engine to cause a dynamic change of the VM instrumentation CPU1 CPU2 for vCPU .

Herein vNIC of the VM receives content representative of network traffic e.g. data representative of data packets from replay analysis engine during replay operations. vNIC translates the received content into a representation e.g. data frame that is utilized by Guest and issues an interrupt not shown to Guest of the presence of read data. One type of interrupt may be a Direct Memory Access DMA request to the Guest OS . The translated data frame is pushed onto the network stack for the Guest OS and the data frame is subsequently processed by the vCPU for a particular Guest application where the output associated with the particular Guest application becomes part of the malware analysis results provided to the instrumentation control logic .

In response to receipt of an event e.g. timeout exploit instrumented by VM instrumentation CPI1 etc. the instrumentation control logic issues signaling to the VM to dynamically change its VM instrumentation from a first VM instrumentation CPU1 to a second VM instrumentation CPU2 . Such signaling may be a single command to the VM or may involve a message that includes address or other information that identifies the second VM instrumentation CPU2 stored in the data store. This dynamic change of the VM instrumentation occurs transparently to Guest as represented by a change in operating state from a first state Si to an immediately subsequent state Si 1 .

Referring now to a second embodiment of a virtual machine VM conducting virtualized operations that produce an event that causes the VM instrumentation for one of the VM processes to dynamically change in a manner transparent to the Guest is shown as the operational state of the changed VM process vCPU is maintained during the change and the interface between the VM processes and the Guest remain unaltered. As similarly shown in the virtual devices include vNIC vStorage device and vCPU where vStorage device is a virtual representation of any type of storage device e.g. Universal Serial Bus USB device digital versatile disc DVD player compact disc CD player etc. that is adapted to receive PDF files and or URLs from replay analysis engine for replay.

Herein vStorage device of the VM receives one or more objects e.g. PDF file URL etc. attached to or embedded within email messages which are part of the analyzed content from replay analysis engine provided to the VM during replay operations. In response to receiving a PDF file logic e.g. software component within vStorage device generates a first interrupt to Guest OS that prompts execution by vCPU of the Guest application that will process data representative of the PDF file stored within vStorage device . For a URL however vStorage device features logic e.g. software component that generates a second interrupt to the Guest OS to prompt execution by vCPU of a guest browser application for the uploaded URL.

In response to receipt of an event e.g. timeout exploit instrumented by a first VM instrumentation CPI1 the instrumentation control logic issues signaling to the VM to dynamically change its VM instrumentation to a second VM instrumentation CPU2 . This dynamic change of the VM instrumentation occurs transparently to Guest as represented by a change in operating state from a first state Si to an immediately subsequent state Si 1 .

Referring to an exemplary diagram of the inter communications between logic controlling dynamic alteration of the VM instrumentation for a particular VM is shown. Herein the scheduler receives information e.g. attributes and or metadata associated with suspicious object via communication path . Based on information the scheduler retrieves one or more VMs i 1 from data store e.g. causes the one or more VMs to be configured and the VM s are used for virtual analysis of the suspicious object.

According to one embodiment of the disclosure based on information associated with the suspicious object the scheduler may be configured to retrieve the VM s along with their corresponding instrumentation control logic . However in lieu of retrieval by scheduler instrumentation control logic may be pre installed logic within replay analysis engine or may be generated and loaded into the replay analysis engine by other logic. As yet an alternative embodiment a single instrumentation control logic may be configured to operate as a centralized monitoring agent for events from multiple VMs.

Upon commencing configuration of a virtual environment for processing the suspicious content as an optional feature the scheduler may be adapted to upload initial VM configuration data to instrumentation control logic via communication path . The initial VM configuration data comprises information that defines the initial state for each of the installed VM s . For instance initial VM configuration data provided to instrumentation control logic may include a starting state for VM . Additionally or in the alternative initial VM configuration data may include data representative of the current VM instrumentation s utilized by VM processes within the VM . Such representative data may be used by the instrumentation control logic to determine an alternative VM instrumentation based on a first event received from VM via communication path .

In response to detection of an event instrumentation control logic may generate a VM Instrumentation VMI Change message via communication path . The VMI Change message may include a command that upon receipt causes the VM to generate a VMI Change Request message to be provided to the scheduler via communication path . Alternatively the VMI Change message may include information that identifies a particular VM instrumentation to be substituted by VM for the current VM instrumentation. Receipt of the VMI Change Request message causes the scheduler to retrieve and load one or more VM instrumentations VMI s identified in message via communication path .

Referring to an exemplary diagram of a VM instrumentation hierarchy controlled by the instrumentation control logic is shown. Herein the VM associated with the instrumentation control logic is provided with a first VM instrumentation . Upon receipt of an event the instrumentation control logic is permitted to dynamically change the VM instrumentation. Based on the type of event detected e.g. type of exploit detected timeout etc. the instrumentation control logic selects from R 1 potential VM instrumentations R 2 where R 5 for this illustrative example . As shown second VM instrumentation is selected and an associated change is requested by the VM.

Similarly upon receipt of another event the instrumentation control logic is permitted to dynamically change the VM instrumentation. Again based on the type of event detected e.g. type of exploit detected timeout etc. the instrumentation control logic selects from four potential VM instrumentations and . As shown third VM instrumentation is selected and an associated change is requested by the VM. The process continues until the VM allocated time for execution has elapsed or the results of the VM analysis warranted early termination.

Referring to a flowchart partially illustrating operations for dynamically altering a VM instrumentation for a particular VM is shown. Herein a virtual machine VM is loaded with a first VM instrumentation for conducting replay operations on content associated with monitored network traffic block . Thereafter replay operations are scheduled to be performed on the content to capture behaviors block .

In the event that there is sufficient time for the VM to conduct malware analysis on the content block . If insufficient time is available to conduct the malware analysis the adaptive VM instrumentation alternation mechanism is halted block . If there is sufficient time to conduct the malware analysis and an exploit is detected the characteristics of the detected exploit are analyzed blocks and . Based on these characteristics the VM is subsequently loaded with a VM instrumentation targeted for further malware analysis that may be directed to the type of exploit or exploit types having some correlation with the detected exploit block .

Referring now to a flowchart partially illustrating operations for dynamically altering from a first VM instrumentation directed to a first JavaScript code analysis process to a second VM instrumentation directed to a second JavaScript code access process is shown. Herein a virtual machine VM is loaded with a first VM instrumentation for conducting replay operations on received JavaScript code using a first type of JavaScript engine block . Thereafter malware analysis operations are performed by the first JavaScript engine within the first VM instrumentation to monitor for an exploit causing an overflow condition of a first type of buffer block . For example the first type of buffer may be an x86 stack buffer. Thereafter the VM analysis results are stored block .

Upon failing to detect the exploit being monitored in the event that the VM allotted processing time has not elapsed the VM is subsequently loaded with a second VM instrumentation for conducting replay operations replay operations on received JavaScript code using a second type of JavaScript engine blocks and . Thereafter malware analysis operations are performed by the second JavaScript engine within the second VM instrumentation to monitor for an exploit causing an overflow condition of the first type of buffer block . Thereafter the VM analysis results are stored block .

Upon detecting the exploit in the event that the VM allotted processing time has not elapsed the VM may be subsequently loaded with another VM instrumentation for conducting more detailed malware analysis directed to the detected exploit. However upon failing to detect the exploit being monitored in the event that the VM allotted processing time still has not elapsed the VM is subsequently loaded with another VM instrumentation with perhaps another JavaScript engine block .

In the foregoing description the invention is described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. For instance in lieu of or in addition to the MCD system of a malware analysis described above may be conducted within firewall or other components within the communication network that is adapted to conduct dynamic alternation of the VM instrumentation of a VM based on VM analysis results.

