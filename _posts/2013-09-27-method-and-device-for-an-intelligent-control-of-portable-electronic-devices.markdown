---

title: Method and device for an intelligent control of portable electronic devices
abstract: Methods and devices for intelligently controlling a portable electronic device are described. The method includes detecting a selection of a respective application program of the plurality of application programs. The method also includes, in response to detecting the selection of the respective application program of the plurality of application programs, identifying one or more predefined hardware operations that do not correspond to one or more hardware operations associated with the respective application program; conditionally deactivating the one or more predefined hardware operations; and launching the respective application program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164780&OS=09164780&RS=09164780
owner: TENCENT TECHNOLOGY (SHENZHEN) COMPANY LIMITED
number: 09164780
owner_city: Shenzhen, Guangdong Province
owner_country: CN
publication_date: 20130927
---
This application is a continuation application of PCT patent application No. PCT CN2013 081417 entitled METHOD AND DEVICE FOR AN INTELLIGENT CONTROL OF PORTABLE ELECTRONIC DEVICES filed on Aug. 13 2013 which claims priority to Chinese Patent Application No. 201210288260.4 entitled APPLICATION CONTROL METHOD AND DEVICE THEREFOR filed on Aug. 14 2012 both of which are incorporated by reference in their entirety.

The present application relates to the technical field of portable electronic devices and in particular to intelligently controlling portable electronic devices.

With the rapid development of communication technology and electronics technology portable electronic devices have become necessary communication tools for people. With the wide spread of portable electronic devices having a large screen high brightness and high performance the battery capacity has become the main bottleneck that restricts the user of the portable electronic devices.

Currently when a user does not want to use a certain function of a portable electronic device the user needs to manually turn off this function. For example when the user finds that the quantity of electricity of the battery is low the user needs to dim out the screen and turn off the APIs Application Programming Interface of such functions as WiFi or Bluetooth manually so as to save the quantity of electricity of the terminal. When the user wants to use functions such as WiFi or Bluetooth the user needs to manually turn on these functions again.

However this increases the user s manual interaction with the terminals and degrades the user s experience in using the terminals.

In order to save the quantity of electricity of a terminal without increasing user s manual operations the embodiments described herein provide methods and devices for controlling portable electronic devices. The technical solution in accordance with some embodiments is as follows.

In some embodiments a method for controlling an application is provided the method comprising acquiring the current execution state of a terminal determining an application programming interface API invocation mode corresponding to the current execution state of the terminal according to the preset correlation between an execution state of the terminal and the API invocation mode and executing the API control thereof under the determined API invocation mode.

In another aspect a device for controlling an application is provided. In accordance with some embodiments the device comprises an acquisition module for acquiring the current execution state of a terminal a determination module for determining an application programming interface API invocation mode corresponding to the current execution state of the terminal according to the preset correlation between an execution state of the terminal and the API invocation mode and an execution module for executing the API control thereof under the determined API invocation mode.

In accordance with some embodiments a method is performed by a portable electronic device with memory storing a plurality of application programs. The method includes detecting a selection of a respective application program of the plurality of application programs. The method also includes in response to detecting the selection of the respective application program of the plurality of application programs identifying one or more predefined hardware operations that do not correspond to one or more hardware operations associated with the respective application program conditionally deactivating the one or more predefined hardware operations and launching the respective application program.

In accordance with some embodiments a portable electronic device includes means for detecting a selection of a respective application program of a plurality of application programs stored in the portable electronic device. The instructions also include means enabled in response to detecting the selection of the respective application program of the plurality of application programs including means for identifying one or more predefined hardware operations that do not correspond to one or more hardware operations associated with the respective application program means for conditionally deactivating the one or more predefined hardware operations and means for launching the respective application program.

In accordance with some embodiments a portable electronic device includes one or more processors and memory storing a plurality of application programs. The memory further stores instructions for executions by the one or more processors. The instructions include instructions for detecting a selection of a respective application program of the plurality of application programs. The instructions also include instructions for in response to detecting the selection of the respective application program of the plurality of application programs identifying one or more predefined hardware operations that do not correspond to one or more hardware operations associated with the respective application program conditionally deactivating the one or more predefined hardware operations and launching the respective application program.

In accordance with some embodiments a computer readable storage medium stores a plurality of application programs and instructions for execution by one or more processors of a portable electronic device. The instructions include instructions for detecting a selection of a respective application program of the plurality of application programs. The instructions also include instructions for in response to detecting the selection of the respective application program of the plurality of application programs identifying one or more predefined hardware operations that do not correspond to one or more hardware operations associated with the respective application program conditionally deactivating the one or more predefined hardware operations and launching the respective application program.

The beneficial effects of the technical solution provided in the embodiments of the present invention include the following acquiring the current execution state of a terminal determining an application programming interface API invocation mode corresponding to the current execution state of the terminal according to the preset correlation between an execution state of the terminal and the API invocation mode and executing the API control thereof under the determined API invocation mode. By way of controlling an API under a terminal s different execution states the electricity consumption by unnecessary applications in the terminal is reduced the goal of saving the quantity of electricity used by the terminal is accomplished without increasing a user s operation and the user experience is improved.

In order to make the objects technical solution and advantages of the present invention more clear the embodiments of the present invention will be further described in detail in conjunction with the accompanying drawings.

Referring to a method for controlling an application is provided the method comprising acquiring the current execution state of a terminal determining an application programming interface API invocation mode corresponding to the current execution state of the terminal according to the preset correlation between an execution state of the terminal and the API invocation mode and executing the API control thereof under the determined API invocation mode.

The acquiring of the current execution state of the terminal comprises monitoring an operation command received by the terminal and learning the current execution state of the terminal according to the operation command.

Furthermore the executing of the API control thereof under the determined API invocation mode comprises acquiring information about an API to be turned off and or information about an API to be turned on under the API invocation mode turning off the API to be turned off according to the information thereabout and or turning on the API to be turned on according to the information thereabout.

Optionally the method further comprises outputting alarm information or adjusting the API invocation mode of the terminal when the quantity of electricity of the terminal reaches an alarm value.

The beneficial effects of this embodiment are as follows acquiring the current execution state of a terminal determining an application programming interface API invocation mode corresponding to the current execution state of the terminal according to the preset correlation between an execution state of the terminal and the API invocation mode and executing the API control thereof under the determined API invocation mode. By way of controlling an API under a terminal s different execution states the electricity consumption by unnecessary applications in the terminal is reduced the goal of saving the quantity of electricity used by the terminal is accomplished without increasing a user s operation and the user experience is improved.

The embodiments of the present invention provide a method for controlling an application and in this embodiment there is a plurality of APIs in a terminal and APIs are some predefined functions which can provide application programs and developers with the capability of accessing a group of routines based on certain software or hardware. Each application program on the terminal corresponds to one API and a user can access the corresponding application program via this interface. For example in the situation where an API corresponds to GPRS an API corresponds to WIFI an API corresponds to screen brightness and an API corresponds to a key background light when the user turns on any one API a corresponding application program thereof will be started up accordingly. In this embodiment in order to save the quantity of electricity of the terminal the turning on and or turning off of different APIs are controlled according to the specific usage of the terminal. In particular the correlation between an execution state and an API invocation mode is preset i.e. one API invocation mode is set to correspond to each usage scenario of the terminal accordingly wherein the API invocation mode comprises turning off or turning on a preset API. For example when the user turns off the screen of the terminal and at this moment there is no operation on the terminal in view of the execution state of the terminal at this moment the API invocation mode is set to be an API for turning off WIFI and an API for turning off GPRS and so on and when the terminal is playing a song online and there is no other operation in view of the execution state of the terminal at this moment the API invocation mode is set to turn off the screen of the terminal so as to save the quantity of electricity of the terminal. In this embodiment each application of the terminal corresponds to one execution state of the terminal and each execution state corresponds to one API. As shown in Table 1 

The terminal in this embodiment can particularly be a smart phone a PC Personal Computer an MP3 Moving Picture Experts Group Audio Layer III player a PDA Personal Digital Assistant etc. which is not limited in this embodiment.

In this step the behavior of the user on the terminal is detected in real time to acquire the current execution state of the terminal wherein the particular acquiring of the current execution state of the terminal comprises monitoring an operation command received by the terminal and learning the current execution state of the terminal according to the operation command. In this embodiment the operation command received by the terminal is monitored which operation command is executed when the user triggers the terminal and the current execution state of the terminal can be learnt according to different operation commands. For example the user clicks to play a song on the terminal then it can be learnt that the current execution state of the terminal is the state of playing a song on the terminal when an operation command of playing a song is monitored.

Step is the step of determining an API invocation mode corresponding to the current execution state of the terminal according to the preset correlation between an execution state of the terminal and the API invocation mode.

In this step the correlation between the execution state of the terminal and the API invocation mode is preset and when the current execution state of the terminal is acquired an API invocation mode corresponding to the current execution state of the terminal is searched in this correlation. For example the current execution state of the terminal is the state of playing a song on the terminal then Table 1 will be search and the corresponding API invocation mode thereof is turning off the terminal screen turning off WIFI and turning off GPRS.

In this embodiment after having determined the API invocation mode corresponding to the current execution state of the terminal the preset API will be turned off or turned on accordingly so that the quantity of electricity used by the terminal can be controlled effectively so as to reduce waste of the terminal s quantity of electricity by unnecessary application. The particular executing of power saving control under the determined API invocation mode comprises acquiring information about an API to be turned off and or information about an API to be turned on under the API invocation mode turning off the API to be turned off according to the information thereabout and turning on the API to be turned on according to the information thereabout.

In this embodiment after having determined the API invocation mode the information about the API to be turned on or turned off in this invocation mode will be acquired and a corresponding control command will be generated according to the information about the API to be turned on or turned off so as to simulate an operation of the user to close or open the API of an application.

In this embodiment since the operation of the user to the terminal changes ceaselessly when the terminal performs switching under different scenarios the corresponding API invocation mode will also change such that the use of the terminal by the user will not be affected under the premise of saving power thereby improving the user experience. For example after having browsed a webpage the user exits the browser and turns off the terminal screen but after five minutes the user opens the browser again and the current execution state of the terminal changes from a network connected state to a network disconnected state and again to a network connected state and in order to save the quantity of electricity of the terminal the invoked API will also change accordingly during this process.

Step is the step of outputting alarm information or adjusting the API invocation mode of the terminal when the quantity of electricity of the terminal reaches an alarm value.

In this embodiment furthermore a quantity of electricity alarm value setting unit is provided for the user and in this unit the user can set an quantity of electricity alarm value such as setting the alarm value as 20 of the quantity of electricity and then when the total quantity of electricity of the terminal battery is lower than 20 alarm information can be output to the user which alarm information can be output in the form of text and can also be output in the form of a battery icon which is not limited in this embodiment particularly. In this embodiment when outputting the alarm information the user can switch the corresponding power saving mode according to the alarm information and the corresponding power saving mode will adjust the current API invocation mode of the terminal for example the alarm information is output when the user is listening to a song the user can choose to adjust same to a more power saving mode i.e. after selection the current API invocation mode can be adjusted to a more power saving API invocation mode for example this API invocation mode include an API for closing the song being played. Of course it is also possible that the current API invocation mode is not adjusted which is not limited in this embodiment particularly.

Optionally the user can also set to switch the API invocation mode of the terminal after the quantity of electricity reaches the alarm value. When the quantity of electricity of the terminal reaches the alarm value it can switch to the more power saving mode automatically according to the switching manner preset by the user. For example if the quantity of electricity alarm value for the user s battery is 20 and the user presets to switch to the more power saving mode automatically if the preset alarm value is below 20 then when the alarm value is lower than 20 it will switch to the more power saving mode directly.

The beneficial effects of this embodiment are as follows acquiring the current execution state of a terminal determining an application programming interface API invocation mode corresponding to the current execution state of the terminal according to the preset correlation between an execution state of the terminal and the API invocation mode and executing the API control thereof under the determined API invocation mode. By way of controlling an API under different execution states at a terminal the electricity consumption of unnecessary applications in the terminal is reduced the quantity of electricity for the terminal is saved without increasing user operations and the user experience is improved.

Referring to a device for controlling an application is provided in this embodiment comprising an acquisition module a determination module and an execution module .

The acquisition module is used for acquiring the current execution state of a terminal the determination module is used for determining an application programming interface API invocation mode corresponding to the current execution state of the terminal according to the preset correlation between an execution state of the terminal and the API invocation mode and the execution module is used for executing the API control thereof under the determined API invocation mode.

Referring to the acquisition module comprises a monitoring unit for monitoring an operation command received by the terminal and a learning unit for learning the current execution state of the terminal according to the operation command.

Referring to the execution module comprises an acquisition unit for acquiring information about an API to be turned off and or information about an API to be turned on under the API invocation mode a turning off unit for turning off the API to be turned off according to the information thereabout and or a turning on unit for turning on the API to be turned on according to the information thereabout.

Optionally referring to the device further comprises an output module for outputting alarm information or adjusting the API invocation mode of the terminal when the quantity of electricity at the terminal reaches an alarm value.

The beneficial effects of this embodiment are as follows acquiring the current execution state of a terminal determining an application programming interface API invocation mode corresponding to the current execution state of the terminal according to the preset correlation between an execution state of the terminal and the API invocation mode and executing the API control thereof under the determined API invocation mode. By way of controlling an API under a terminal s different execution states the electricity consumption by unnecessary applications in the terminal is reduced the goal of saving the quantity of electricity used by the terminal is accomplished without increasing a user s operation and the user experience is improved.

The device detects a selection of a respective application program of the plurality of application programs. For example the respective application program may be selected by a mouse click or with a touch gesture on an application icon on the display of the portable electronic device.

In some embodiments the portable electronic device includes a touch sensitive display with multiple application icons that correspond to multiple application programs of the plurality of application programs. For example in some embodiments the touch sensitive display includes a display of the multiple application icons for applications stored in the portable electronic device e.g. a web browser application icon a music player application icon a telephone application icon etc. . Detecting the selection of the respective application program includes detecting a touch gesture e.g. a tap gesture at a location on the touch sensitive display that corresponds to an application icon of the multiple applications for the respective application program.

In some embodiments in response to detecting the selection of the respective application program of the plurality of application programs the device identifies one or more hardware operations associated with the respective application program. For example in some embodiments the device identifies that a speaker operation is associated with an audio player application e.g. a music player application . In some embodiments the device identifies that a display operation and a communication operation are associated with a web browser application. In some embodiments the device identifies that a cellular communication operation is associated with a telephone application program.

In response to detecting the selection of the respective application program of the plurality of application programs the device identifies one or more predefined hardware operations that do not correspond to one or more hardware operations associated with the respective application program. In some embodiments the device identifies one or more predefined hardware operations that do not correspond to the one or more hardware operations identified in the operation described above for the respective application program. For example in some embodiments the device stores a list of predefined hardware operations e.g. display operation cellular communication operation WiFi communication operation device positioning operation high frequency computing operation etc. and the device identifies one or more predefined hardware operations that do not correspond to the one or more identified hardware operations associated with the respective application program and generates a map data structure in the memory storing members of the list of predefined hardware operations and their respective associated hardware operations that do not correspond to the predefined hardware operations. In some embodiments the devices provides a user interface for a user of the device to view and update the information in the map data structure. Alternatively the device updates the information in the map data structure based on analyzing the user s activities on the device. In some embodiments the device stores data identifying hardware operations that do not correspond to the one or more hardware operations associated with the respective application program e.g. Table 1 described above or a lookup table and identifies operations that do not correspond to one or more hardware operations associated with the respective application program from the data. This enables the device to identify one or more hardware operations that do not correspond to one or more hardware operations associated with the respective application program without identifying the one or more hardware operations associated with the respective application program.

The device conditionally deactivates the one or more predefined hardware operations. For example when a display operation is not associated with an audio player application the device deactivates a display of the portable electronic device without the user s express instruction of turning off the display of the device. The device conditionally deactivates the one or more predefined hardware operations in response to detecting the selection of the respective application program of the plurality of application programs. In other words the device conditionally deactivates the one or more predefined hardware operations without further input from a user. This eliminates the need for the user to manually deactivate one or more predefined hardware operations.

In some embodiments the device identifies one or more background application programs of the plurality of application programs. The device identifies one or more predefined hardware operations that do not correspond to one or more hardware operations associated with the one or more background application programs. Conditionally deactivating the one or more predefined hardware operations includes deactivating one or more predefined hardware operations that do not correspond to the one or more hardware operations associated with the respective application program or the one or more hardware operations associated with the one or more background application programs. For example when the device has a web browser as a foreground application program and a music player application as a background application program e.g. the music player runs in the background with both application programs being active the device does not deactivate a speaker operation because the speaker operation corresponds to a hardware operation associated with the music player application.

In some embodiments the device identifies one or more hardware operations associated with the one or more background application programs prior to identifying one or more predefined hardware operations that do not correspond to the one or more hardware operations associated with the one or more background application programs.

In some embodiments the device identifies a predefined number of most active application programs other than the respective application program as the one or more background application programs. For example in some embodiments the device identifies only one most active application program as a single background application for identifying one or more predefined hardware operations that do not correspond to one or more hardware operations associated with the background application program. The activeness of an application program may be dependent on the amount of time during which the application program is played on the device the number of times that the application program is invoked within a predefined time window and the specific time period during which the application program is played. For example the longer the application program is played the more likely the application program is deemed to be an active application program. Similarly if the application program is more frequently used during the day time rather than at night the more likely the application program is treated as an active application program.

In some embodiments conditionally deactivating the one or more predefined hardware operations includes turning off one or more application programming interface functions that correspond to the one or more predefined hardware operations. In some embodiments a respective application programming interface API function is used to activate a corresponding hardware operation e.g. an API function for activating a cellular communication operation . By turning off the respective API function the corresponding hardware operation is deactivated and more power may be saved for extending the usage of the device before the next power recharge.

In some embodiments turning off the one or more application programming interface functions that correspond to the one or more predefined hardware operations includes blocking function calls from one or more application programs to the one or more application programming interface functions that correspond to the one or more predefined hardware operations. For example when a device positioning operation e.g. a global positioning system GPS module configured to determine a position of the portable electronic device is deactivated the device blocks an API function call to activate the device positioning operation e.g. from a map application in the background .

In some embodiments turning off the one or more application programming interface functions that correspond to the one or more predefined hardware operations includes ignoring function calls from one or more application programs to the one or more application programming interface functions that correspond to the one or more predefined hardware operations.

In some embodiments the respective application program is an audio player application program. Conditionally deactivating the one or more predefined hardware operations includes one or more of turning off a display of the portable electronic device turning off a wireless communication module and turning off a device positioning system e.g. the GPS module . In some embodiments it may require different levels of user efforts to re activate those predefined hardware operations depending on their relationship with other application programs. For example the display of the device is used by many different application programs and it may be turned on by a single user touch gesture. Conversely the GPS module may remain deactivated until the user starts an application program e.g. a navigation application that cannot perform basic functions with the GPS module being deactivated.

In some embodiments the respective application program is a web browser. Conditionally deactivating the one or more predefined hardware operations includes one or more of turning off an automatic brightness adjustment for a display of the portable electronic device and reducing an operating frequency of one or more processors of the portable electronic device.

In some embodiments the respective application program is a telephone application program. Conditionally deactivating the one or more predefined hardware operations includes one or more of turning off a display of the portable electronic device turning off a wireless communication module turning off a device positioning system and reducing an operating frequency of one or more processors of the portable electronic device.

In some embodiments the device conditionally deactivates the one or more predefined hardware operations in accordance with a determination that a battery power level of the portable electronic device is below a predefined threshold e.g. 20 . In some embodiments the device monitors the battery power level of the portable electronic device and performs one or more of the operations and described above while the battery power level of the portable electronic device is below the predefined threshold.

The device launches the respective application program. In some embodiments as a result of launching the respective application program the respective application program runs as a foreground application. In some embodiments the device displays a user interface of the respective application program. In some embodiments launching the respective application program includes moving the respective application program from the background to the foreground.

As shown in the system includes one or more processing units also called herein processors memory an input output I O interface and a network communications interface . These components communicate with one another over one or more communication buses or signal lines . In some embodiments the memory or the computer readable storage media of memory stores programs modules instructions and data structures including all or a subset of an operating system an I O module a communication module application programs and an operation control module . The one or more processors are coupled to the memory and operable to execute these programs modules and instructions and reads writes from to the data structures.

In some embodiments the processing units include one or more microprocessors such as a single core or multi core microprocessor. In some embodiments the processing units include one or more general purpose processors. In some embodiments the processing units include one or more special purpose processors.

In some embodiments the memory includes high speed random access memory such as DRAM SRAM DDR RAM or other random access solid state memory devices. In some embodiments the memory includes non volatile memory such as one or more magnetic disk storage devices optical disk storage devices flash memory devices or other non volatile solid state storage devices. In some embodiments the memory includes one or more storage devices remotely located from the processing units . The memory or alternately the non volatile memory device s within the memory comprises a computer readable storage medium. In some embodiments the memory comprises a non transitory computer readable storage medium.

In some embodiments the I O interface couples one or more input output devices such as one or more displays e.g. a touch sensitive display also called a touch screen a keyboards touch screens speakers and microphones to the I O module of the system . The I O interface in conjunction with the I O module receive user inputs e.g. voice input keyboard inputs touch inputs etc. and process them accordingly. The I O interface and the I O module also present outputs e.g. sounds images text etc. to the user according to various program instructions implemented on the system .

In some embodiments the network communications interface includes wired communication port s and or wireless transmission and reception circuitry. The wired communication port s receive and send communication signals via one or more wired interfaces e.g. Ethernet Universal Serial Bus USB FIREWIRE etc. The wireless circuitry receives and sends RF signals and or optical signals from to communications networks and other communications devices. The wireless communications may use any of a plurality of communications standards protocols and technologies such as GSM EDGE CDMA TDMA Bluetooth WiFi VoIP Wi MAX or any other suitable communication protocol. The network communications interface enables communication between the system with networks such as the Internet an intranet and or a wireless network such as a cellular telephone network a wireless local area network LAN and or a metropolitan area network MAN and other devices. The communications module facilitates communications between the system and other devices e.g. the first client device and the second client device over the network communications interface .

In some embodiments the operating system e.g. Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks includes various software components and or drivers for controlling and managing general system tasks e.g. memory management storage device control power management etc. and facilitates communications between various hardware firmware and software components.

In some embodiments the system is implemented on a portable electronic device e.g. a smart phone a mobile phone a tablet computer etc. . It should be noted that the system is only one example and that the system may have more or fewer components than shown may combine two or more components or may have a different configuration or arrangement of the components. The various components shown in may be implemented in hardware software firmware including one or more signal processing and or application specific integrated circuits or a combination of thereof.

In the application programs stored in the memory include one or more foreground application programs and one or more background application programs . A foreground application program typically refers to an application program a user interface of which is currently displayed on a display of the system . For example in when a web browser displays a web page on a touch sensitive display the web browser is a foreground application program. In comparison a background application program typically refers to a currently running application program a user interface of which is not currently displayed on the display of the system. A background application program is distinct from a closed application program that is not running on the system. For example when the system stores a calendar application program but does not run the calendar application program the calendar application is deemed to be closed e.g. no instruction of the calendar application program is executed by processor s of the system . In comparison when the system runs the calendar application program but does not display a user interface of the calendar application program the calendar application program is deemed to be running in the background. Typically an application program is deemed to be running when at least one process associated with the application program is being executed by one or more processors of the system . In some embodiments the application program is deemed to be running when at least one process associated with the application program is executed at one or more predefined intervals independent of a user input by one or more processors of the system .

As shown in the system stores the operation control module in the memory . In some embodiments the operation control module further includes the followings sub modules or a subset or superset thereof an application selection module an identifying module a conditional deactivation module and an application launching module .

In some embodiments the application selection module is configured to access the I O interface through the I O module . For example in some embodiments the application selection module detects a selection of a respective application program by detecting a touch gesture at a location on a touch sensitive display that corresponds to an application icon displayed on the touch sensitive display.

In some embodiments the identifying module includes one or more of an associated operations module a non associated operations module and a background application module . In some embodiments the associated operations module is configured to identify one or more hardware operations associated with a respective application program. In some embodiments the non associated operations module is configured to identify one or more predefined hardware operations that do not correspond to the one or more hardware operations associated with a respective application program. In some embodiments the background application module is configured to identify one or more background application programs one or more hardware operations associated with the one or more background application programs and one or more predefined hardware operations that do not correspond to the one or more hardware operations associated with the one or more background application programs. In some embodiments the background application module is also configured to identify a predefined number of most active application programs.

In some embodiments the conditional deactivation module includes one or more of an API control module and a function call blocking module . In some embodiments the API control module is configured to turn off one or more application programming interface functions that correspond to one or more predefined hardware operations that do not correspond to one or more hardware operations associated with a respective application program. In some embodiments the function call blocking module is configured to block function calls from one or more application programs to one or more application programming interface functions that correspond to the one or more predefined hardware operations that do not correspond to one or more hardware operations associated with a respective application program.

In some embodiments the application launching module has access to the application programs stored in the memory and or one or more predefined commands to launch an application program in the operating system .

In some embodiments the operation control module optionally includes one or more other modules to provide other related functionalities described herein.

Details on the structures functions and interactions of the operation control module are provided with respect to and A C and accompanying descriptions.

It should be noted that in the device for controlling an application provided in the abovementioned embodiments illustration is only made by way of example according to the division of the above mentioned functional modules and in practical application the above mentioned functions can be assigned to be completed by different functional modules as required i.e. dividing the internal structure of the device into different functional modules to complete all or some of the above described functions.

In addition the device for controlling an application and the method for controlling an application provided by the above mentioned embodiments belong to the same concept and its specific implementation process can be seen in the method embodiment which will not be repeated here for brevity.

The sequence numbers of the abovementioned embodiments of the present invention are merely for description purposes and do not represent the advantages or disadvantages of the embodiments.

Those skilled in the art can understand that all or part of the steps of the abovementioned embodiments can be implemented by hardware and can also be implemented by a program instructing relevant hardware and the program can be stored on a computer readable storage medium and the abovementioned storage medium can be a random access memory a magnetic disk or an optical disk and so on.

What are described above are merely exemplary embodiments of the present invention and are not used to limit the scope of claims and any modifications equivalent substitutions improvements and so on made within the spirit and principles of the present invention shall all be deemed to be within the scope of the claims.

