---

title: Methods and apparatus to reclaim resources in virtual computing environments
abstract: Methods and apparatus to reclaim resources in virtual computing environments are described. An example method includes determining, with a processor, if a characteristic of a virtual machine meets a threshold indicating that the virtual machine is inactive, in response to determining that the characteristic meets the threshold, determining, with the processor, if a notification period has expired, and if the notification period has expired, de-provisioning, with the processor, the virtual machine to return computing resources assigned to the virtual machine to a cloud.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529613&OS=09529613&RS=09529613
owner: VMware, Inc.
number: 09529613
owner_city: Palo Alto
owner_country: US
publication_date: 20131212
---
This patent claims the benefit of U.S. Provisional Patent Application Ser. No. 61 736 422 filed on Dec. 12 2012 entitled METHODS AND APPARATUS FOR VIRTUALIZED COMPUTING and U.S. Provisional Application Ser. No. 61 828 613 filed on May 29 2013 entitled METHODS AND APPARATUS FOR VIRTUALIZED COMPUTING. Both of U.S. Provisional Patent Application Ser. No. 61 736 422 and U.S. Provisional Application Ser. No. 61 828 613 are hereby incorporated herein by reference in their entirety.

This disclosure relates generally to virtual computing and more particularly to methods and apparatus to manage virtual machines.

Virtualizing computer systems provides benefits such as the ability to execute multiple computer systems on a single hardware computer replicating computer systems moving computer systems among multiple hardware computers and so forth. Example systems for virtualizing computer systems are described in U.S. patent application Ser. No. 11 903 374 entitled METHOD AND SYSTEM FOR MANAGING VIRTUAL AND REAL MACHINES filed Sep. 21 2007 and granted as U.S. Pat. No. 8 171 485 U.S. Provisional Patent Application No. 60 919 965 entitled METHOD AND SYSTEM FOR MANAGING VIRTUAL AND REAL MACHINES filed Mar. 26 2007 and U.S. Provisional Patent Application No. 61 736 422 entitled METHODS AND APPARATUS FOR VIRTUALIZED COMPUTING filed Dec. 12 2012 all three of which are hereby incorporated herein by reference in their entirety.

 Infrastructure as a Service also commonly referred to as IaaS generally describes a suite of technologies provided by a service provider as an integrated solution to allow for elastic creation of a virtualized networked and pooled computing platform sometimes referred to as a cloud computing platform . Enterprises may use IaaS as a business internal organizational cloud computing platform sometimes referred to as a private cloud that gives an application developer access to infrastructure resources such as virtualized servers storage and networking resources. By providing ready access to the hardware resources required to run an application the cloud computing platform enables developers to build deploy and manage the lifecycle of a web application or any other type of networked application at a greater scale and at a faster pace than ever before.

Cloud computing platforms may provide many powerful capabilities for performing computing operations. However taking advantage of these computing capabilities manually may be complex and or require significant training and or expertise. Methods and apparatus disclosed herein facilitate the management of virtual machine resources in cloud computing platforms. For example as disclosed in detail herein methods and apparatus disclosed herein provide for automation of management tasks such as provisioning multiple virtual machines for a multiple machine computing system e.g. a group of servers that inter operate linking provisioned virtual machines and tasks to desired systems to execute those virtual machines or tasks and or reclaiming cloud computing resources that are no longer in use. The improvements to cloud management systems e.g. the vCloud Automation Center vCAC from VMware interfaces portals etc. disclosed herein may be utilized individually and or in any combination. For example all or a subset of the described improvements may be utilized.

The cloud computing platform provider provisions virtual computing resources e.g. virtual machines or VMs that may be accessed by users of the cloud computing platform e.g. users associated with an administrator and or a developer and or other programs software device etc.

An example application of includes multiple VMs . The example VMs of provide different functions within the application e.g. services portions of the application etc. . One or more of the VMs of the illustrated example are customized by an administrator and or a developer of the application relative to a stock or out of the box e.g. commonly available purchased copy version of the services and or application components. Additionally the services executing on the example VMs may have dependencies on other ones of the VMs .

As illustrated in the example cloud computing platform provider may provide multiple deployment environments for example for development testing staging and or production of applications. The administrator the developer other programs and or other devices may access services from the cloud computing platform provider for example via REST Representational State Transfer APIs Application Programming Interface and or via any other client server communication protocol. Example implementations of a REST API for cloud computing services includes a vCloud Administrator Center vCAC API and a vCloud Director API available from VMware Inc. The example cloud computing platform provider provisions virtual computing resources e.g. the VMs to provide the deployment environments in which the administrator and or developer can deploy multi tier application s . One particular example implementation of a deployment environment that may be used to implement the deployment environments of is vCloud DataCenter cloud computing services available from VMware Inc.

The example application director of which may be running in one or more VMs orchestrates deployment of multi tier applications onto one of the example deployment environments . As illustrated in the example application director includes a topology generator a deployment plan generator and a deployment director .

The example topology generator generates a basic blueprint that specifies a logical topology of an application to be deployed. The example basic blueprint generally captures the structure of an application as a collection of application components executing on virtual computing resources. For example the basic blueprint generated by the example topology generator for an online store application may specify a web application e.g. in the form of a Java web application archive or WAR file comprising dynamic web pages static web pages Java servlets Java classes and or other property configuration and or resources files that make up a Java web application executing on an application server e.g. Apache Tomcat application server that uses a database e.g. MongoDB as a data store. As used herein the term application generally refers to a logical deployment unit comprised of one or more application packages and their dependent middleware and or operating systems. Applications may be distributed across multiple VMs. Thus in the example described above the term application refers to the entire online store application including application server and database components rather than just the web application itself. In some instances the application may include the underlying hardware e.g. virtual computing hardware utilized to implement the components.

The example basic blueprint of may be assembled from items e.g. templates from a catalog which is a listing of available virtual computing resources e.g. VMs networking storage that may be provisioned from the cloud computing platform provider and available application components e.g. software services scripts code components application specific packages that may be installed on the provisioned virtual computing resources. The example catalog may be pre populated and or customized by an administrator e.g. IT or system administrator that enters in specifications configurations properties and or other details about items in the catalog . Based on the application the example blueprints may define one or more dependencies between application components to indicate an installation order of the application components during deployment. For example since a load balancer usually cannot be configured until a web application is up and running the developer may specify a dependency from an Apache service to an application code package.

The example deployment plan generator of the example application director of generates a deployment plan based on the basic blueprint that includes deployment settings for the basic blueprint e.g. virtual computing resources cluster size CPU memory networks and an execution plan of tasks having a specified order in which virtual computing resources are provisioned and application components are installed configured and started. The example deployment plan of provides an IT administrator with a process oriented view of the basic blueprint that indicates discrete actions to be performed to deploy the application. Different deployment plans may be generated from a single basic blueprint to test prototypes e.g. new application versions to scale up and or scale down deployments and or to deploy the application to different deployment environments e.g. testing staging production . The deployment plan is separated and distributed as local deployment plans having a series of tasks to be executed by the VMs provisioned from the deployment environment . Each VM coordinates execution of each task with a centralized deployment module e.g. the deployment director to ensure that tasks are executed in an order that complies with dependencies specified in the application blueprint .

The example deployment director of executes the deployment plan by communicating with the cloud computing platform provider via a cloud interface to provision and configure the VMs in the deployment environment . The example cloud interface of provides a communication abstraction layer by which application director may communicate with a heterogeneous mixture of cloud provider and deployment environments . The deployment director provides each VM with a series of tasks specific to the receiving VM herein referred to as a local deployment plan . Tasks are executed by the VMs to install configure and or start one or more application components. For example a task may be a script that when executed by a VM causes the VM to retrieve and install particular software packages from a central package repository . The example deployment director coordinates with the VMs to execute the tasks in an order that observes installation dependencies between VMs according to deployment plan . After the application has been deployed the application director may be utilized to monitor and or modify e.g. scale the deployment.

The example cloud manager of interacts with the components of the system e.g. the application director and the cloud provider to facilitate the management of the resources of the cloud provider . The example cloud manager includes a blueprint manager to facilitate the creation and management of multi machine blueprints and a resource manager to reclaim unused cloud resources. The cloud manager may additionally include other components for managing a cloud environment.

The example blueprint manager of the illustrated example manages the creation of multi machine blueprints that define the attributes of multiple virtual machines as a single container that can be provisioned deployed managed etc. as a single unit. For example a multi machine blueprint may include definitions for multiple basic blueprints that make up a service e.g. an e commerce provider that includes web servers application servers and database servers . A basic blueprint is a definition of policies e.g. hardware policies security policies network policies etc. for a single machine e.g. a single virtual machine such as a web server virtual machine . Accordingly the blueprint manager facilitates more efficient management of multiple virtual machines than manually managing e.g. deploying virtual machine basic blueprints individually. The management of multi machine blueprints is described in further detail in conjunction with .

The example blueprint manager of additionally annotates basic blueprints and or multi machine blueprints to control how workflows associated with the basic blueprints and or multi machine blueprints are executed. A workflow is a series of actions and decisions to be executed in a virtual computing platform. The example system includes first and second distributed execution manager s DEM s A and B to execute workflows. According to the illustrated example the first DEM A includes a first set of characteristics and is physically located at a first location A. The second DEM B includes a second set of characteristics and is physically located at a second location B. The location and characteristics of a DEM may make that DEM more suitable for performing certain workflows. For example a DEM may include hardware particularly suited for performance of certain tasks e.g. high end calculations may be located in a desired area e.g. for compliance with local laws that require certain operations to be physically performed within a country s boundaries may specify a location or distance to other DEMS for selecting a nearby DEM e.g. for reducing data transmission latency etc. Thus as described in further detail in conjunction with the example blueprint manager annotates basic blueprints and or multi machine blueprints with skills that can be performed by a DEM that is labeled with the same skill.

The resource manager of the illustrated example facilitates recovery of cloud computing resources of the cloud provider that are no longer being activity utilized. Automated reclamation may include identification verification and or reclamation of unused underutilized etc. resources to improve the efficiency of the running cloud infrastructure. Resource reclamation is described in further detail in conjunction with .

The example blueprint manager provides a user interface for a user of the blueprint manager e.g. the administrator the developer etc. to specify blueprints e.g. basic blueprints and or multi machine blueprints to be assigned to an instance of a multi machine blueprint . For example the user interface may include a list of previously generated basic blueprints e.g. the web server blueprint the application server blueprint the database server blueprint etc. to allow selection of desired blueprints. The blueprint manager combines the selected blueprints into the definition of the multi machine blueprint and stores information about the blueprints in a multi machine blueprint record defining the multi machine blueprint . The blueprint manager may additionally include a user interface to specify other characteristics corresponding to the multi machine blueprint . For example a creator of the multi machine blueprint may specify a minimum and maximum number of each blueprint component of the multi machine blueprint that may be provisioned during provisioning of the multi machine blueprint .

Accordingly any number of virtual machines e.g. the virtual machines associated with the blueprints in the multi machine blueprint may be managed collectively. For example the multiple virtual machines corresponding to the multi machine blueprint may be provisioned based on an instruction to provision the multi machine blueprint may be power cycled by an instruction may be shut down by an instruction may be booted by an instruction etc. As illustrated in an instruction to provision the multi machine blueprint may result in the provisioning of a multi machine service that includes web server s A application server s B and database server C. The number of machines provisioned for each blueprint may be specified during the provisioning of the multi machine blueprint e.g. subject to the limits specified during creation or management of the multi machine blueprint .

The multi machine blueprint maintains the reference to the basic blueprints and . Accordingly changes made to the blueprints e.g. by a manager of the blueprints different than the manager of the multi machine blueprint may be incorporated into future provisionings of the multi machine blueprint . Accordingly an administrator maintaining the source blueprints e.g. an administrator charged with managing the web server blueprint may change or update the source blueprint and the changes may be propagated to the machines provisioned from the multi machine blueprint . For example if an operating system update is applied to a disk image referenced by the web server blueprint e.g. a disk image embodying the primary disk of the web server blueprint the updated disk image is utilized when deploying the multi machine blueprint . Additionally the blueprints may specify that the machines A B and C of the multi machine service provisioned from the multi machine blueprint operate in different environments. For example some components may be physical machines some may be on premise virtual machines and some may be virtual machines at a cloud service.

Several multi machine blueprints may be generated to provide one or more varied or customized services. For example if virtual machines deployed in the various States of the United States require different settings a multi machine blueprint could be generated for each state. The multi machine blueprints could reference the same build profile and or disk image but may include different settings specific to each state. For example the deployment workflow may include an operation to set a locality setting of an operating system to identify a particular State in which a resource is physically located. Thus a single disk image may be utilized for multiple multi machine blueprints reducing the amount of storage space for storing disk images compared with storing a disk image for each customized setting.

The user interface of the illustrated example receives information from a user e.g. the administrator and or the developer indicating the assignment of skills to workflows and requests to execute workflows by DEMs. A skill is a characteristic pre requisite capability etc. of a DEM that makes it more suitable and or desirable for executing workflows assigned the same skill. A skill may indicate any information that is to be matched between DEMs and workflows during execution of workflows by DEMs e.g. a physical location a geographical area a computing hardware capability a communication capability an installed software component etc. . DEMs may be tagged with skills during their initial configuration. Tagging the DEM with the skill indicates that the DEM is capable of executing workflows that are also tagged with the skill.

The user interface of the illustrated example passes information about skills assigned to workflows to the workflow manager . The user interface also receives requests to remove an assignment of skills and passes the removal to the workflow manager .

The example workflow manager labels tags or otherwise assigns or removes an assignment received workflow skills to an identified workflow. For example the workflow manager may store an indication of the skills assignment in the repository . The workflow manager passes workflows that have been tagged or otherwise requested for execution to the queue manager .

The queue manager of the illustrated example stores information about workflows that are awaiting execution and provides the information to DEMs that are ready to execute a workflow. For example as a DEM has availability to execute a workflow the DEM contacts the blueprint manager and requests information about available workflows. The DEM of the illustrated example also provides information about skills that have previously been assigned to the workflow. The example queue manager of retrieves workflows that are awaiting execution and provides a list of workflows to the requesting DEM. The list of workflows may be sorted based on the skills assigned to the workflow and the skills assigned to the DEM so that the DEM may choose to execute a workflow that is most closely matched with the skills of the DEM. For example if the DEM is to select the first available workflow in the list the workflow with the most matching skills may be first in the list. Accordingly the workflows may be executed by the first available DEM that is most capable of executing the workflow. Because the DEMs of the illustrated example contact the example blueprint manager when they are available for executing workflows a dispatcher may not be needed and the DEMs may be kept busy without human intervention. Alternatively workflows could be dispatched or assigned to available DEMs by the queue manager . In another alternative rather than providing a list of workflows the queue manager could provide a single workflow that has been selected as most desirable e.g. based on matching skills for execution by a requesting DEM.

The resource reclaimer of the illustrated example identifies potentially inactive unused underused etc. resources by comparing an activity time to a threshold. For example the resource reclaimer may identify inactive resources by reviewing logs indicating the last time that a virtual machine was powered on the last time that a virtual machine was remotely accessed the amount of system resources consumed etc. The information from the logs is analyzed e.g. by comparing the information to a threshold to determine if the virtual machine appears to be inactive and or previsioned with excess resources e.g. where four virtual machines are provisioned but only three are utilized . When the resource reclaimer determines that a virtual machine may be inactive the resource reclaimer communicates the information to the notifier . Additionally or alternatively the resource reclaimer removes the virtual machine to free the computing resources currently assigned to the virtual machine e.g. after a number of notifications have been sent and or a user has confirmed that the virtual machine is no longer needed .

In some implementations computing resources are assigned to virtual machines that are backups of active virtual machines. Ghost machines are replicas of active live virtual machines. The ghost machines may be made live if the active live virtual machine terminates unexpectedly or for other reasons. Because the ghost machines are typically not in use they might appear as unused resources that should be reclaimed to be used by other cloud customers. However this may not be desirable where the ghost resources are utilized as backups to be activated when needed. The example resource reclaimer detects tags associated with the backup virtual machines that indicate that the backup virtual machines should not be identified as inactive virtual machines. When a virtual machine is detected as a backup virtual machine the machine is not identified as potentially inactive.

The notifier of the illustrated example notifies an owner of a virtual machine when the resource reclaimer determines that the virtual machine is inactive. For example the notifier may send an email to the identified owner of the virtual machine. Alternatively any other communication may be sent to the owner and or the inactive machine may be identified on a list without sending a separate communication to the owner. The message may include information such as Machine Name Virtual Machine Status Reclamation Requestor Machine Owner Request Date Reason for Reclamation Request Daily Cost Deadline to respond etc. In example where an email and or other message is sent the message may include a link or other user interface element that allows the user to indicate whether or not the identified virtual machine should remain in use. Other parties than the owner of the resource may be notified. For example a group owner a manager of the owner a system administrator etc.

The user interface receives instructions from and conveys information to a user e.g. the administrator and or the developer of the resource manager . For example the user interface may provide an interface by which a user is to request that reclamation processing be performed e.g. inactive and or underused virtual machine resources should be identified . The user interface may also display a status of a reclamation process including virtual machines identified as potentially inactive. The example user interface additionally provides an interface for a user to configure options associated with the reclamation. For example a user may configure the amount of time between successive notifications to the virtual machine owner the amount of time allowed for an owner to respond before reclaiming resources the amount of inactivity that will trigger identification of a virtual machine as potentially inactive and or under utilized whether or not virtual machines that are inactivated are archived and for how long etc. In some examples the user interface prompts a user with a list of potentially inactive virtual machines and requests that the user select the virtual machines for which the owner should be notified.

The archiver of the illustrated example archives virtual machines that are reclaimed according to policies configured for the resource manager and or the virtual machine to be reclaimed e.g. policies set in a multi machine blueprint for the virtual machine . Archiving reclaimed virtual machines facilitates the recovery of virtual machines that may later be determined to be active and or for which the contents are still desired. The archiver of the illustrated example stores a log of reclamation operations. The log message may contain the following information Action Date Machine Name Machine Owner Action User initiating action Description Prior Status of Reclamation Request etc.

While an example manner of implementing the cloud manager the blueprint manager and the resource manager are illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example user interface the example workflow manager and the example queue manager of and or more generally the blueprint manager the example resource reclaimer the example notifier the example user interface the example archiver of and or more generally the example resource manager may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example user interface the example workflow manager and the example queue manager of and or more generally the blueprint manager the example resource reclaimer the example notifier the example user interface the example archiver of and or more generally the example resource manager could be implemented by one or more analog or digital circuit s logic circuits programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s . None of the apparatus or system claims of this patent are to be construed to cover a purely software and or firmware implementation. Rather at least one of the example user interface the example workflow manager and the example queue manager of and or more generally the blueprint manager the example resource reclaimer the example notifier the example user interface the example archiver of and or more generally the example resource manager is are hereby expressly defined to include a tangible computer readable storage device or storage disk such as a memory a digital versatile disk DVD a compact disk CD a Blu ray disk etc. storing the software and or firmware to preclude interpreting any claim of this patent as purely software. Further still the example machine cloud manager the example blueprint manager and or the example resource manager of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

Flowcharts representative of example machine readable instructions for implementing the cloud manager the blueprint manager and or the resource manager of are shown in . In these examples the machine readable instructions comprise a program for execution by a processor such as the processor shown in the example processor platform discussed below in connection with . The program may be embodied in software stored on a tangible computer readable storage medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD a Blu ray disk or a memory associated with the processor but the entire program and or parts thereof could alternatively be executed by a device other than the processor and or embodied in firmware or dedicated hardware. Further although the example program is described with reference to the flowcharts illustrated in many other methods of implementing the example cloud manager the blueprint manager and or the resource manager may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a tangible computer readable storage medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable storage medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein tangible computer readable storage medium and tangible machine readable storage medium are used interchangeably. Additionally or alternatively the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a non transitory computer and or machine readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein when the phrase at least is used as the transition term in a preamble of a claim it is open ended in the same manner as the term comprising is open ended.

The example program of begins at block when the blueprint manager of the cloud manager of receives an instruction to create a multi machine blueprint e.g. the multi machine blueprint of . The blueprint manager displays a list of available blueprints block . For example blueprint manager may display a list including the web server blueprint the application server blueprint the database server blueprint and other available blueprints. The blueprint manager then receives an identification of one or more blueprints selected for inclusion in the multi machine blueprint block . The blueprint manager then generates and stores the definition for the multi machine blueprint that references the selected blueprints in a repository e.g. the repository block . The program of then ends.

The program of begins at block when the blueprint manager receives an instruction to provision a multi machine blueprint e.g. the multi machine blueprint of . The instruction may alternatively be any other instruction associated with the multi machine blueprint e.g. power on reboot shutdown etc. . Thus a single user instruction may cause an action to be performed for all of the machines covered by the multi machine blueprint e.g. rather than separate user instructions for each machine or basic blueprint . The blueprint manager receives an indication of quantities of machines to be provisioned e.g. via a user interface provided by the blueprint manager block . The blueprint manager then retrieves the first blueprint definition included in the multi machine blueprint block . For example the multi machine blueprint may include an indication of the order in which the blueprints of the multi machine blueprint are to be provisioned.

The blueprint manager then provisions the selected blueprint with a specified number of machines according to the blueprint definition block . For example according to the example of the blueprint manager provisions four web servers A based on a specification of four machines in the multi machine blueprint and based on the web server blueprint .

The blueprint manager then determines if there are additional blueprints to be provisioned or another action instructed block . When there are additional blueprints to be provisioned the blueprint manager selects the next blueprint block and control returns to block to provision the next blueprint. When there are no additional blueprints to be provisioned the program of ends.

In some examples after provisioning of the blueprints one or more of the provisioned machines may be encapsulated in an application collection e.g. a VMWare vApp . For example according to the example of the machines of the web servers A may be collected into a web servers vApp the machines of the application servers B may be collected into an application servers vApp and the database servers C may be collected into a database servers vApp. Further the multiple collections associated with the multi machine blueprint may be collected into a multi machine collection e.g. a multi machine vApp . For example according to the example of a multi machine vApp may be generated based on the web servers vApp the application servers vApp and the database servers vApp. The multi machine vApp may then be added to a catalog to allow administrators to deploy the multiple machines from a catalog e.g. a vApp catalog .

In some examples after a group of machines provisioned from a multi machine blueprint are collected in a collection e.g. an App the collection may be migrated to a different computing type e.g. from a physical computing type to a cloud environment . Because the components provisioned from the multi machine blueprint are converted individually to a collection individual components may be migrated or all components may be migrated. For example according to the multi machine blueprint of it may be determined that web traffic will increase greatly during a particular event. Accordingly prior to the event a vApp generated for the web servers A may be migrated from a local virtual computing platform to a cloud computing service to enable additional machines to be brought online for the web service.

The abstraction provided by multi machine blueprints enables components of a multi machine blueprint to be provisioned on different types of computing resources e.g. physical resources virtual resources cloud resources etc. . For example according to the example of the web servers A may be provisioned on physical computing resources while the application servers B are provisioned in a first cloud service and the database servers C are provisioned in a second cloud service. Furthermore the components of the multi machine blueprint may be provisioned on different resources at different times. For example during testing the components of a multi machine blueprint may be provisioned on virtual computing resources and when testing is completed a production system may be provisioned on physical computer resources.

After a multi machine blueprint has been provisioned the blueprint manager may monitor the provisioned systems to check for compliance with the configuration of the multi machine blueprint. For example the blueprint manager may periodically or aperiodically monitor the provisioned systems for changes. When a change is detected the blueprint manager may automatically revert the change provide a notification etc. For example when the multi machine blueprint is provisioned utilizing the vCAC a user may accidently maliciously etc. make changes via vCenter e.g. changes to applications changes to network configurations etc. . The blueprint manager may periodically review the provisioned systems to determine if they match the multi machine blueprint configuration and revert the configuration when a difference is detected e.g. when the network configuration has been modified outside of the multi machine blueprint configuration .

After the workflows have been transmitted to the requesting DEM block or block the queue manager receives an identification of workflow selected for execution by the requesting DEM block . The queue manager then removes the workflow from the queue to ensure that the workflow is not selected by execution by another DEM block .

The resource reclaimer selects a first virtual machine in a provisioned pool of virtual machines block . The example resource reclaimer then determines if characteristics associated with the virtual machine indicate that the virtual machine may be inactive block . For example the resource reclaimer may determine if an action e.g. power on reboot perform operation has not been performed within a threshold period of time. When the characteristics do not meet the threshold control proceeds to block which is described below. When the characteristics meet or exceed the threshold the notifier determines if a notification has already been sent to the owner of the virtual machine block . When a notification has not been sent the notifier sends a communication to the owner of the virtual machine indicating that the virtual machine is suspected of being inactive and requesting that the owner take action to maintain the virtual machine block .

When a notification has already been sent block the notifier determines if a notification period has expired block . For example a user e.g. the user requesting the reclamation may specify parameters indicating the amount of time that the system should wait following notification before determining that no response will be received and de provisioning the virtual machine computing resources. When the notification period has not expired control proceeds to block which is described below.

When the notification period has expired block the resource reclaimer reclaims the computing resources assigned to the inactive virtual machine by de provisioning or uninstalling the inactive virtual machine block . For example resource reclaimer may return the computing resources to a pool of resources available to other existing and new virtual machines e.g. virtual machines in a cloud . The archiver archives the inactive virtual machine in case the owner of the virtual machine or another party determines that the information contained in the virtual machine is wanted block . The archiving may be performed according to archiving policies identified in a blueprint associated with the virtual machine according to instructions from a user received via the user interface and or according to a policy for the resource manager . Control then proceeds to block .

After determining that the characteristics of the selected virtual machine do not meet or exceed the threshold block after determining that the notification period has not expired block and or after archiving the virtual machine or reclaiming the virtual machine resources if archiving is not performed resource reclaimer determines if there are additional virtual machines to be checked for inactivity. When there are additional virtual machines the next virtual machine is selected and control returns to block to analyze the next virtual machine for inactivity. When there are no additional virtual machines the program of ends.

The example user interface includes user interface elements to allow a user to specify provisioning processing scripts to be performed during provisioning user interface elements to allow a user to specify startup processing scripts to be performed upon startup of the multi machines and user interface elements to allow a user to specify shutdown processing scripts to be performed upon shutdown of the multi machines. According to the illustrated example after specifying the scripts a user selects an OK button to proceed to the example user interface of .

The example user interface includes user interface elements to allow a user to specify security settings for the multi machine blueprint that is being generated. While example security settings are illustrated any number or type s of security settings may be provided. According to the illustrated example after specifying the security settings a user selects an OK button to cause the multi machine blueprint generation to be completed. For example in response to selection of the OK button the multi machine blueprint may be generated and stored in a catalog to allow a user to select to provision the multi machine blueprint.

The example user interface displays a confirmation of the selections made by the user prior to the user selecting a FINISH button to provision the machines based on the settings for the components of the multi machine blueprint.

When a user selects to add components to virtual machines provisioned from a multi machine blueprint e.g. using the operation menu in the example user interface of the cloud manager displays the example user interface of . The example user interface provides user interface elements to specify a desired number of additional machines to be added to the provisioned virtual machines. In examples where a maximum number of allowable machines has been specified the user interface may restrict the number of additional machines added to remain within the specified limits e.g. by not allowing selection of a number of machines that would exceed the maximum by displaying an error messages when too many machines are selected etc. . Adding or removing machines from the provisioned multi machine blueprint allows for scaling up and or down of the systems. When components are added and or removed the system configurations are updated. For example a new web server may be brought online by provisioning the virtual hardware for the web server configuring the network settings for the new web server and adding the network information to a load balancer for adding the new web server to a pool of web servers that may be utilized in the application.

The example user interface allows a user to input network resources that may be utilized by the group for which the reservation is assigned. For example if the reservation is for the development group and a member of the development group selects to provision a particular multi machine blueprint the machines of the multi machine blueprint will be allowed to utilize the Share Network Application network and for example will not be allowed to utilize the Share App Tier network. The reservations may override a blueprint where the configurations conflict and may supplement the blueprint where a blueprint does not have a configuration value that is included in the reservation. For example if a multi machine blueprint requests a particular network that is not allowed by the reservation the reservation will override and cause the provisioned machines to utilize an allowed network. In such an example the multi machine blueprint might specify a network that is not available in the system on which the basic blueprints of the multi machine blueprint are to be provisioned.

Reservations may override and or supplement settings other than the network settings. For example a multi machine blueprint may be generated with a default set of policies e.g. a database storage policy that does not include encryption of credit card numbers . The same multi machine blueprint may be provisioned in multiple localities e.g. to avoid the need for developing a separate multi machine blueprint for each locality . Reservations associated with systems at each of the localities may include settings related to governmental policies at the localities e.g. a policy that requires that credit card information is encrypted before storage in a database . For example when the multi machine blueprint having the default policies is provisioned in a locality wherein the reservation specifies a credit card encryption policy the credit card encryption policy overrides the default policy of the multi machine blueprint so that systems provisioned from the multi machine blueprint in the locality will comply with the local laws. Accordingly a single multi machine blueprint could be created and deployed to multiple environments that include overriding or supplemental configurations.

The processor platform of the illustrated example includes a processor . The processor of the illustrated example is hardware. For example the processor can be implemented by one or more integrated circuits logic circuits microprocessors or controllers from any desired family or manufacturer.

The processor of the illustrated example includes a local memory e.g. a cache . The processor of the illustrated example is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is controlled by a memory controller.

The processor platform of the illustrated example also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a PCI express interface.

In the illustrated example one or more input devices are connected to the interface circuit . The input device s permit s a user to enter data and commands into the processor . The input device s can be implemented by for example an audio sensor a microphone a camera still or video a keyboard a button a mouse a touchscreen a track pad a trackball isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit of the illustrated example. The output devices can be implemented for example by display devices e.g. a light emitting diode LED an organic light emitting diode OLED a liquid crystal display a cathode ray tube display CRT a touchscreen a tactile output device a printer and or speakers . The interface circuit of the illustrated example thus typically includes a graphics driver card a graphics driver chip or a graphics driver processor.

The interface circuit of the illustrated example also includes a communication device such as a transmitter a receiver a transceiver a modem and or network interface card to facilitate exchange of data with external machines e.g. computing devices of any kind via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The processor platform of the illustrated example also includes one or more mass storage devices for storing software and or data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives Blu ray disk drives RAID systems and digital versatile disk DVD drives.

The coded instructions of may be stored in the mass storage device in the volatile memory in the non volatile memory and or on a removable tangible computer readable storage medium such as a CD or DVD.

While several graphical user interfaces are provided as example interfaces for obtaining user input any other type of user interface and or control may be provided e.g. a command line interface text based interface slider text box etc. . Additionally or alternatively any of the methods and apparatus described herein may be accessed programmatically e.g. using an API of the cloud manager e.g. a vCAC API by another program or device.

Although certain example methods apparatus and articles of manufacture have been disclosed herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.

