---

title: Generating vulnerability reports based on application binary interface/application programming interface usage
abstract: A method for generating vulnerability reports based on application binary interface/application programming interface usage may include extracting, by a processing device, a binary file and a security report relating to a software program executed by the processing device, the security report having a vulnerability list of pending vulnerabilities relating to the software program, detecting, from the binary file, interface usage details associated with interfaces used by the software program and associated with shared libraries used by the software program, wherein the interfaces comprise application programming interfaces (APIs) corresponding to rules that the software program follows to access and use services and resources provided by another software program, matching the interface usage details with the pending vulnerabilities of the vulnerability list, and generating a vulnerability report based on the matching, wherein the vulnerability report comprises a list of the pending vulnerabilities based on their associated interface usage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08806649&OS=08806649&RS=08806649
owner: Red Hat, Inc.
number: 08806649
owner_city: Raleigh
owner_country: US
publication_date: 20130708
---
This application is a continuation of U.S. patent application Ser. No. 13 034 559 filed on Feb. 24 2011 the entirety of which is incorporated herein by reference.

The embodiments of the invention relate generally to software compatibility and more specifically relate to generating vulnerability reports based on application binary interface application programming interface usage.

Multiple software programs that run on a computing device often share libraries provided by the based operating system employed at the computing device. For example these libraries can be used by the software programs to access various library or operating system functions e.g. reading files writing files file management network communications inter process communications memory management string manipulations user interface manipulations mathematics functions etc. . Typically these libraries change when the operating system changes or is updated for example upgrading to a newer version of an operating system can change the functions presented in one or more shared libraries change versions and arguments used in these functions and or change functionalities of some none or all of the library functions. As a result a software program developed for one operating system may not work on another operating system and similarly upgrading to the new operating system may cause a software program not to work on the new or updated operating system. To determine whether a software program is executable on a new or updated operating system the software program is typically re compiled to run on the new or updated operating system.

The aforementioned re compiling and re running of the software program is further complicated as software security or vulnerability issues are raised when multiple software programs are involved and further they include customer generated software programs e.g. third party software programs that are created and provided by sources independent of the one providing the operating system and shared libraries . One way to highlight these vulnerabilities or security issues is to provide a security report to customers so that they may investigate and correct the vulnerabilities. These tasks however require a customer to employ an entire team of software developers to tediously investigate each aspect of these security issues including software components associated with the vulnerabilities. Nevertheless these teams often fall short of completing their tasks within the allocated time period such as due to the limited and generic nature of the security reports the tedious and manual nature of the process and unavoidable human errors.

Embodiments of the invention provide for generating vulnerability reports based on application binary interface application programming interface usage is described. A method of embodiments of the invention includes extracting by a processing device a binary file and a security report relating to a software program executed by the processing device the security report having a vulnerability list of pending vulnerabilities relating to the software program detecting from the binary file interface usage details associated with interfaces used by the software program and associated with shared libraries used by the software program wherein the interfaces comprise application programming interfaces APIs corresponding to rules that the software program follows to access and use services and resources provided by another software program matching the interface usage details with the pending vulnerabilities of the vulnerability list and generating a vulnerability report based on the matching wherein the vulnerability report comprises a list of the pending vulnerabilities based on their associated interface usage.

The embodiments of the present invention are provided for generating vulnerability reports based on application binary interface ABI application programming interface API usage. In one embodiment reliable and complete vulnerability reports are generated using ABI API usage details and relevant security reports e.g. Open Vulnerability and Assessment Language OVAL reports . In one embodiment a vulnerability report is automatically generated for a software program based on the software program s usage of ABIs APIs associated with various shared libraries. Being based on ABI API usage makes the vulnerability report intelligent reliable and complete. Further in one embodiment additional reliability details and specificity are obtained from having the vulnerability report use vulnerability information that can be obtained from a relevant security report. Having this level of specificity and relevant details as well as automation eliminates the need to employ an entire team of software developers to handle vulnerability issues. In one embodiment vulnerability reports can be automatically generated in runtime e.g. on the fly on any computing device which allows these vulnerability reports to be completed accurately and in runtime as they are not subject to manual tasks and the conventional time restraints.

In one embodiment using ABI API usage details allows a provider to know understand and appreciate the needs and requirements of a third party customer as is reflected in the ABI API usage details relating to for example a third party software program s use of ABIs APIs corresponding to various shared libraries. Using these ABI API usage based vulnerability reports providers can resolve any number of vulnerability issues on their end which prevents potential customers from encountering errors and correcting the vulnerabilities on their end. However in one embodiment a vulnerability report may be provided to a customer to make the customer aware of the pending and or corrected vulnerabilities and allow the fixing of certain pending vulnerabilities if they are particular to the customer and or in response to a request from the customer. The vulnerability reports may be provided in any number of formats such as Portable Document Format PDF Open Document Format ODF plain text graph etc.

A vulnerability or vulnerability issue refers to a flaw in a software program with the potential of corrupting other parts of the software program. For example a vulnerability in a banking software s library tool e.g. libltdl can lead to exploitation by an attacker who for example can trick a local bank customer into running a software application e.g. a JAVA application that uses a function to load native libraries such as System.loadLibrary from within an attacker controlled directory containing a malicious library or module to execute an arbitrary code using the bank customer s privileges. It is contemplated that in certain cases an attacker may not be needed and that the vulnerability and its dependencies could automatically lead to problems such as when a bank customer legitimately wishes to access her account information she may due to a vulnerability end up accessing another bank customer s account information.

ABI API usage details provide ABI API usage information about various ABIs and or APIs being accessed and used by a software entity such as a third party software program belong to a third party customer. OVAL refers to a global security standard that promotes open security content standardizes the transfer of security information across various security tools and services and serves as a standard language to encode system details and maintain content repositories. It is contemplated that embodiments of the prevent invention are not limited to OVAL and that other security standards or reports may also be used to generate vulnerability reports.

As will be discussed throughout this document a provider refers to a company or organization responsible for creating and providing a base operating system local software programs shared libraries etc. while a customer refers to a third party company or organization responsible for generating and providing third party software programs that access and use the provider based shared libraries and the associated interfaces e.g. ABIs APIs . Further these shared libraries and the associated ABIs APIs may be accessed and used by one or more local software programs that are part of the operating system and independent of the one or more third party software programs. Embodiments of the invention are applicable to ABIs and or APIs and as such the term ABI s API s used throughout this document refers to ABI s and or API s .

An ABI represents a low level interface between a software program and an operating system or another software program. An ABI represents a compiled binary form of an operating system function function serving as a low level interface between local and third party software programs and the base operating system. When a function is broken such as a print function e.g. when a print command executes double prints or does not print the entire text e.g. prints hell when asked to print hello etc. the broken function indicates a possible problem with the corresponding ABI and the associated shared library. An API serves as an interface between various software programs and facilitates interaction between them while representing a particular set of rules and specifications that a software program can follow to access and make use of the services and resources provided by another particular software program that implements that API. ABI API refer to and may include data identifying ABIs and or APIs such as those providing and covering details such as data types sizes alignments identification names and other unique identifications symbol versions system call numbers binary format of object files locations versions calling conversations etc.

In one embodiment the host machine employs the ABI API vulnerability report generation mechanism ABI API vulnerability mechanism to facilitate generation of vulnerability reports for any given software entity such as a third party software program based on the software entity s ABI API usage and a security report e.g. an OVAL report . Further the ABI API vulnerability mechanism can function to generate vulnerability reports in runtime e.g. on the fly on any given computing device such as on the host machine or any other computing machine in communication with the host machine .

In one embodiment the ABI API vulnerability mechanism extracts a binary file relating to a third party software program and a security report e.g. OVAL security report associated with it. ABI API vulnerability mechanism then detects and obtains ABI API usage details also referred to as ABI API requirements from the extracted binary file. The ABI API usage details refer to the software program s relevance to and requirements with regard to certain shared libraries based on its use of ABIs APIs associated with those shared libraries . Since a third party software program is associated with a customer the ABI API usage details relating to the software program can help a provider review and understand the needs and requirements of the customer with regard to the use of shared libraries and its ABIs APIs. Further the ABI API vulnerability mechanism parses contents of the extracted security report to detect and obtain vulnerability information including a vulnerability list of any existing or pending vulnerabilities relating to the software program . For example the vulnerability list may contain a list of shared libraries and their ABIs APIs and other dependencies etc. having vulnerabilities issues. In one embodiment the binary file e.g. having the ABI API usage details and the security report e.g. having the vulnerability information are extracted from a database . The database may be part of or connected to the host machine or part of or connected to a remote machine not shown in communication with the host machine .

In one embodiment the combination or matching of the security report based vulnerability list with the ABI API usage details obtained from the binary file provides for and generates an intelligent and more relevant vulnerability report that not only includes a list of vulnerabilities but also provides the relevant usage details reflecting importance of each ABI API to the software program . Knowing the usage details and thus importance of each ABI API allows a provider to address and correct any number of vulnerabilities on the provider end. A vulnerability report may still be provided to a customer for mere reference or to fix certain vulnerabilities however even on the customer end knowing the ABI API usage details can help the customer fix any vulnerabilities with great efficiency and without requiring a team of software developers to investigate and detect ABI API usage details since that information is already provided in the vulnerability report.

In one embodiment ABI API usage details include usage detail of each ABI API and its associated shared library as it relates to and used by a third party software program . For example depending on the importance of a particular library or operating system function e.g. printing files deleting files reading files writing files file management network communications inter process communications memory management string manipulations user interface manipulations mathematics functions etc. to the third party software program an ABI API associated with that operating function is expected to be more frequently accessed than other ABIs APIs used by that third party software program . Typically a high usage ABI API may be regarded as more important than other less frequently used ABIs APIs. However for example certain large and often used libraries e.g. glibc may be regarded as important but their ABI API usage details may reveal that a relatively small and rarely used library e.g. lib.b.2 libfreedom etc. may be more important to a particular customer based on its third party software program s use of that small library.

ABI API usage may be gathered and provided in a binary file by monitoring or scanning the software code of the third party software program for which the vulnerability report is being generated. For example an in between check may be performed to determine whether there is any breakage in the ABI API. Further shared libraries and the related interfaces e.g. ABI API may be accessed and used by one or more third party software programs as well as by one or more local software programs e.g. including but not limited to local software programs that are part of and or provided by the same host or provider that provided the operating system and independent of the one or more third party software programs .

A shared library represents a collection of classes and subroutines that are used to develop and support software programs such as representing code and data that provide services to both local and other independent software programs . For example an operating system may provide shared libraries to implement aforementioned functions that are used by various local and third party software programs . Other libraries may be provided by and specific to third party software programs created and provided by third party providers e.g. a third party software development company or organization other than the provider responsible for creating and providing the operating system and the shared libraries . Each shared library provides a collection or group of ABIs APIs.

As aforementioned a third party or customer software program represents a software program that is at least partly developed by an organization other than the provider that produces the operating system and the shared libraries . For example a third party software program may include a special purpose software program that is used for or by an organization e.g. media development software for media companies specialized modeling software etc. and like a local software program accesses and uses any number of shared libraries to utilize various functions.

In one embodiment the matching process includes associating usage details to each ABI API or shared library listed in the vulnerability list as having a vulnerability issue. For example a binary file and a security report relating to a third party software program e.g. hero are extracted. The security report may list lib a as having two vulnerabilities lib b as having one vulnerability and lib c as having zero vulnerabilities. The matching module then matches the detected ABI API usage details to lib a lib b and lib c. Now suppose the ABI API usage details reveal that lib a is no longer being used by hero but lib b and lib c are still frequently used and therefore lib b and lib c are regarded as more important than lib a . Using the ABI API usage details a provider or customer based user e.g. software developer may choose to fix the single vulnerability of lib b maintain lib c and simply ignore the two vulnerabilities of lib a. Further if lib a is not anticipated to be used in the future it might be removed all together. Without having the benefit of these ABI API usage details and or by solely relying on the security report s vulnerability list the software developer would have either fixed lib a first because of lib a s two vulnerabilities or spent a great deal of time and labor probably along with a number of software developers in an effort to discover that lib a despite its two vulnerabilities is not as important to hero as lib b and lib c.

Method starts at block with extracting a binary file relating to a software entity e.g. a third party software program for which a vulnerability report is to be generated. At block ABI API usage details are detected and obtained from the extracted binary file. As aforementioned ABI API usage details provide the use and importance of each ABI API as it relates to each shared library of the software entity. At block a security report e.g. OVAL security report relating to the software entity is extracted. Vulnerability information such as a vulnerability list relating to the software entity is obtained by parsing content of the security report at block . In one embodiment the binary file e.g. having the ABI API usage details and the security report e.g. having the vulnerability information are extracted from a database. The database may be part of or connected to the host machine or part of or connected to a remote machine in communication with the host machine.

At block the ABI API usage details and the vulnerability information are stored at a database. In one embodiment the binary file and the security report may also be stored and subsequently extracted from the same or another database. At block in the ABI API usage details are matched with the items listed in the vulnerability list. The matching results are stored at the database at block . At block the matching results are used to generate a vulnerability report that is based on ABI API usage.

The exemplary computing system includes a processing device a main memory e.g. read only memory ROM flash memory RAM dynamic RAM DRAM such as synchronous DRAM SDRAM DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device in the form of a drive unit which may include fixed or removable machine accessible or computer readable storage medium which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processing device is configured to execute the processing logic for performing the operations and methods discussed herein.

The computing system may further include a network interface device . The computing system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT connected to the computing system through a graphics port and graphics chipset an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium or a computer readable storage medium on which is stored one or more sets of instructions e.g. ABI API vulnerability report generation mechanism embodying any one or more of the methodologies or functions described herein. The ABI API vulnerability report generation mechanism may also reside completely or at least partially within the main memory e.g. ABI API vulnerability report generation mechanism instructions and or within the processing device e.g. ABI API vulnerability report generation mechanism processing logic during execution thereof by the computing system the main memory and the processing device also constituting machine readable storage media. Further for example ABI API vulnerability report generation mechanism instructions may be transmitted or received over a network via the network interface device .

The machine readable storage medium may also be used to store the ABI API vulnerability report generation mechanism instructions persistently. While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

ABI API vulnerability report generation mechanism modules components and other features described herein for example in relation to can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. In addition the modules can be implemented as firmware or functional circuitry within hardware devices. Further the modules can be implemented in any combination hardware devices and software components.

In the above description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as extracting detecting probing parsing comparing analyzing saving storing scanning monitoring obtaining accessing providing facilitating generating displaying or the like refer to the action and processes of a computing system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computing system s registers and memories into other data similarly represented as physical quantities within the computing system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks magnetic optical disks ROMs compact disk ROMs CD ROMs RAMs erasable programmable ROMs EPROMs electrically EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computing system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computing system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. ROM RAM magnetic disk storage media optical storage media flash memory devices etc. a machine e.g. computer readable transmission medium non propagating electrical optical or acoustical signals etc.

Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as the invention.

