---

title: Cross-platform application framework
abstract: One set of instructions is generated in part by compiling application-specific source code. When natively executed on a platform provided by a device, the set of instructions provides an application. Another set of instructions is generated in part by compiling the same business logic source code. When natively executed on another platform provided by another device, the other set of instructions provides the same application. The business logic source code is substantially free of code specific to any platform. Moreover, the business logic source code defines substantially all application-specific functionality of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09218175&OS=09218175&RS=09218175
owner: ZIH CORP.
number: 09218175
owner_city: Lincolnshire
owner_country: US
publication_date: 20131126
---
This application is a continuation of U.S. patent application Ser. No. 13 088 172 filed Dec. 3 2013 and claims the benefit of U.S. Patent Application Ser. No. 61 324 672 filed Apr. 15 2011 the entire content of which is hereby incorporated by reference.

Increasingly sophisticated mobile computing devices have become pervasive in today s society. Such mobile computing devices no longer just have the ability to make phone calls or exchange text messages but are now able to execute full fledged software applications. Software applications for mobile computing devices can serve a wide variety of purposes. For example some software applications for mobile computing devices are simple video games. In another example some software applications for mobile computing devices support sales or inventory processes for enterprises.

Different types of mobile computing devices have different operating systems and capabilities. For example some mobile phones use the ANDROID operating system and other mobile phones use the IPHONE operating system. In another example some mobile computing devices support rich full color graphical user interfaces while other mobile computing devices only provide simple text based interfaces.

Because different types of mobile computing devices have different operating systems and capabilities if a developer wants to develop a software application for different types of mobile computing devices it has been necessary to develop separate versions of the software application for each of the different types of mobile computing devices. For example a developer may have to develop a version of a software application for IPHONE mobile phones and another version of the software application for BLACKBERRY mobile phones. Development of different versions of a software application for different types of mobile computing devices can be a costly and time consuming process.

One set of computer readable instructions is generated in part by compiling business logic source code. When natively executed on a platform provided by a device the set of computer readable instructions provides an application. Another set of computer readable instructions is generated in part by compiling the same business logic source code. When natively executed on another platform provided by another device the other set of computer readable instructions provides the same application. The business logic source code does not contain code specific to any platform. Moreover the business logic source code defines all application specific functionality of the application.

The system includes a set of computing devices A N collectively computing devices . In the Figures ellipses between elements indicate that one or more similar elements are omitted from the Figures for clarity. Reference numerals that include letters A N are not intended to indicate a minimum or maximum number of elements.

A computing device is a device that processes data. Example types of computing devices include mobile devices such as telephones smart phones feature phones tablet computers netbook computers notebook computers handheld game devices personal media players and in vehicle computers. Mobile devices are generally computing devices that are designed to be carried by hand. Different mobile devices provide different types of platforms. Example types of computing devices also include desktop computers household or commercial appliances television set top boxes digital video recorder devices televisions game consoles gaming machines point of sale computers electronic inventory management devices industrial computing devices server computers and other types of devices that process data. In the example of the set of computing devices includes a smart phone a feature phone a desktop computer and a laptop computer. Other embodiments can include other types of computing devices.

Different ones of the computing devices provide different platforms. A platform is a framework on which applications can be run. Example types of platforms include the WINDOWS PHONE 7 operating system from Microsoft Corp. the IOS operating system from Apple Inc. the ANDROID operating system from Google Inc. the WINDOWS 7 operating system from Microsoft Corp. the Telnet framework and other types of frameworks on which applications can be run.

The developer uses a developer computing system to develop the application such that versions of the application are able to run on the platforms provided by the computing devices . The term computing system encompasses systems that comprise one or more computing devices. The developer computing system provides a development environment to assist the developer in developing the application. To assist the developer in developing the application the development environment provides tools that help the developer prepare source code for the application. For example the development environment can provide text editing tools and testing tools that help the developer prepare the source code for the application.

In addition the development environment generates multiple packages A through N collectively packages . The packages can correspond to the same application each package compiled to be executed or otherwise associated with a different platform. The packages contain different sets of computer readable instructions. The instructions in different ones of the packages can be executed natively on the platforms associated with the packages . For example the package A can contain instructions that a first platform can execute natively and the package N can contain instructions that a second platform can execute natively. Execution of the instructions in the packages causes the application to be provided to a user. In some embodiments the set of packages can also include different applications for execution or association with the same platform or other platforms.

The development environment generates the packages by compiling sets of source code. Each set of source code includes the business logic source code and a different set of platform specific source code . In other words the developer uses the business logic source code and the sets of platform specific source code to generate the packages . The development environment generates different sets of computer executable instructions for different platforms by compiling the business logic source code with different ones of the sets of platform specific source code .

The business logic source code defines substantially all functionality of the application that is specific to the application. For example the business logic source code can define functionality that generates or retrieves data to be displayed by the application. In some embodiments the business logic source code defines all functionality that is specific to the application. In other embodiments small amounts of code outside the business logic source code define influence or affect functionality that is specific to the application. For example in such embodiments less than one hundred lines of code outside the business logic source code define functionality that is specific to the application.

The business logic source code is substantially free of code that is specific to any platform. In some embodiments the business logic source code can include no code or no functioning code that is specific to any platform. For example in some embodiments the business logic source code does not include code that is specific to an API of the ANDROID platform the WINDOWS PHONE 7 platform or any other platform. In another example the business logic source code does not include code that is conditionally executed depending on which platform is running the application. In yet another example the business logic source code might not include code that causes the application to present different content or have a different navigational structure depending on the platform on which the application is running. In other embodiments the business logic source code can include a small amount of code that is specific to a platform. For example in some embodiments the business logic source code includes less than twenty lines of code that are specific to a particular platform.

The sets of platform specific source code contain code that help the application operate on specific platforms. The sets of platform specific code are associated with different platforms. The sets of platform specific code are substantially free of code that defines functionality specific to applications. In some embodiments the sets of platform specific code do not include any code that defines functionality specific to particular applications. For example in some embodiments the sets of platform specific code might not include code that defines content in user interfaces of specific applications code that defines how a user navigates through applications or blocks of code executed only for specifically identified applications. In some embodiments the sets of platform specific code include small amounts of code that defines influences or affects functionality specific to a particular application. For example in some embodiments each of the sets of platform specific code includes less than twenty lines of code that define functionality specific to a particular application.

Because the sets of platform specific code are substantially free of code that defines functionality specific to applications the developer and or other developers can re use the sets of platform specific code in many applications without making any or at least substantial changes to the sets of platform specific code . For example the developer can develop business logic source code for an additional application. In this example the developer can then use the business logic source code for the additional application along with previously used sets of platform specific source code to generate sets of computer executable instructions suitable for execution on different platforms.

In some embodiments the developer may need to modify fewer than twenty lines of code to adapt the platform specific code for use with the application. Furthermore in some embodiments the developer may only need to comment out code remove commenting on code or modify values of parameters in order to adapt the platform specific code for use with the application.

In various embodiments the developer can obtain the sets of platform specific code in various ways. For example the developer can obtain the sets of platform specific code from one or more outside parties. In this example the one or more outside parties can include vendors retailers consultants other developers or other entities separate from the developer or an organization to which the developer belongs. Furthermore in this example the developer can obtain the sets of platform specific code from the one or more outside parties in exchange for items or services of value such as monetary payments. Moreover in this example the developer computing system can download or otherwise copy the sets of platform specific code from a data storage system provided by the one or more outside parties. In another example the developer can write the sets of platform specific code . In some embodiments the sets of platform specific code can be available on a software as a service SaaS basis.

In some embodiments the packages include computer executable instructions compiled from the sets of platform specific code . For example if the package A is associated with a given platform the package A can include computer executable instructions compiled from one of the sets of platform specific code that is associated with the given platform.

After the development environment generates the packages the packages are stored in a data storage system . Various embodiments implement the data storage system in various ways. For example some embodiments implement the data storage system as a file system. In another example the data storage system can be implemented as a relational database.

The computing devices obtain the packages from the data storage system . In various embodiments the computing devices obtain the packages from the data storage system in various ways. For example the computing devices can obtain appropriate ones of the packages by sending requests to a server not shown that retrieves the packages from the data storage system and sends the packages to the computing devices . In another example a computing device can perform a distribution process that pushes the packages out from the data storage system to one or more of the computing devices .

Applications developed using the developer computing system or as otherwise disclosed herein can be distributed using several different systems. For example illustrates a block diagram of an example alternate embodiment of a system for distributing applications among the many possible systems for distributing applications. In the example of an application distribution system includes the data storage system and the computing devices as described above with regard to the example of . To obtain the packages the computing devices communicate over a network with an application store . The network can comprise various types of networks. For example the network can comprise the Internet a local area network a campus area network or another type of network.

The application store is an electronic marketplace for software applications. For example the application store can be Apple Inc. s APP STORE Google Inc. s Android Market Microsoft Corp. s Windows Phone Marketplace Research In Motion Ltd. s APP WORLD Amazon.com or another electronic marketplace for software applications. In some embodiments an owner or operator of the application store may own or operate the data storage system . In other embodiments the application store and the data storage system are owned and or operated by different entities.

Users of the computing devices can use the computing devices to purchase the application through the application store . When a user of one of the computing devices purchases the application the application store retrieves one of the packages and transmits the package to the computing device. In some instances the users of the computing devices can purchase ones of the packages associated with different platforms from different application stores.

The distribution system performs a process that automatically distributes the packages to the computing devices . In other words the distribution system pushes the packages out to the computing devices . For example the computing devices can be associated with an organization the package A can be associated with a first platform and the package N can be associated with a second different platform. In this example the distribution system can communicate with the computing devices to determine which ones of the computing devices provide the first platform and which ones of the computing devices provide the second platform. In this example the distribution pushes the package A out to the computing devices that provide the first platform and pushes the package N out to the computing devices that provide the second platform. Performing such an automated distribution process can be useful in an organization setting in order to ensure that the correct software is installed on the enterprise s computing devices.

The compiler application generates the packages by compiling the business logic source code and one or more of the sets of platform specific source code . As mentioned above the business logic source code defines the functionality of the application that is specific to the application. The business logic source code does not include code that is specific to any given platform. The sets of platform specific source code contain code that help the application operate on specific platforms. The sets of platform specific source code are specific to particular platforms.

As illustrated in the example of the business logic source code comprises application source code and layer source code . The application source code and the layer source code define application specific functionality and are substantially free of code specific to any given platform. The application source code defines an application initialization operation and a navigation operation. The layer source code defines one or more layer classes.

The sets of platform specific source code include container source code sets A N collectively container source code sets and binding source code sets A N collectively binding source code sets . The container source code sets define platform specific initialization operations that initialize the application. The binding source code sets define layer output operations that generate output data that can be used by different platforms to present layers using user interface features that are native to different platforms. Each of the container source code sets contains code specific to a different platform. Each of the binding source code sets contains code specific to a different platform. The binding source code sets are substantially free of code that defines functionality specific to any particular application.

In various embodiments the layer source code the application source code the container source code sets and the binding source code sets are written in various high level programming languages. For example in some embodiments the layer source code the application source code the container source code sets and or the binding source code sets are written in the C programming language the Objective C programming language the C programming language the C programming language the Java programming language or another type of high level programming language. Because the layer source code the application source code the container source code sets and the binding source code sets are written in a high level programming language syntax errors in the source code can be detected at compile time instead of at execution time. Because syntax errors are detected at compile time instead of at execution time computing devices that run the packages may be more reliable because such computing devices are less likely to crash or hang due to such syntax errors. Furthermore because the packages comprise compiled high level programming language code the application can be executed more efficiently than if the packages contained interpreted programming language code. Thus by executing compiled code instead of interpreted code computing devices that run the packages can operate faster and more reliably.

In some instances multiple different platforms can be associated with the same container source code set and or the same binding source code set . For example IPHONEs and IPADs can both be associated with the same container source code set and or the same binding source code set . In some instances a single platform can be associated with multiple container source code sets or multiple binding source code sets . Each of the container source code sets and or binding source code sets can be stored in a different file.

To build an application the developer identifies layers to be included in the application . A layer comprises a set of content presented as a unit by an application to a user of the application. Layers can contain a wide variety of content. For example a layer of the application can contain a synopsis of a book a listing of television schedules sports scores a video clip a main menu of the application and other sets of content presented as a unit by the application to the user of the application.

Because the content in a layer is presented as a unit it is not necessary to perform a navigation operation to see additional content in the layer. A navigation operation is an operation to change the layer currently presented by an application to a user. For example in some platforms a user might need to scroll up or down to see additional content in a layer but would not need to navigate away from the layer to see the additional content.

Different platforms can present the same layer in different ways. For example a Telnet platform can present a list of book titles in a layer as a series of plain text strings representing the book titles. In this example an Interactive Voice Response IVR platform can present the same list of book titles by outputting the spoken sounds of the book titles. Furthermore in this example an IPHONE platform can present the same list of book titles as a list of richly formatted text strings representing the book titles.

Each of the layers in the application is associated with a different layer Uniform Resource Identifier URI . For example a first layer in the application contains a text area that contains a synopsis of a book and a second layer in the application contains a text area that contains a synopsis of another book. In this example the first layer can be associated with the layer URI http www.example.com application1 layer1 bookID 32 and the second layer can be associated with the layer URI http www.example.com application1 layer1 bookID 525 .

A layer comprises one or more content elements. A content element comprises a structured set of content to be presented by an application to a user. Various content elements structure sets of content in different ways. Example types of content element include lists list data items menus menu items images text blocks text input areas geographical maps panels and so on. Different platforms can present the same content elements in different ways. For example an IPHONE platform can present a menu as a list of selectable graphical elements associated with each menu item in the menu. In this example a Telnet system can present the same menu as a list of text strings associated with each menu item in the menu. Each text string in the list is associated with a number. In this example the Telnet system also displays a prompt that asks the user to enter the number of the desired menu item.

The content elements of a layer can include navigation elements. A navigation element is a content element that when selected by a user causes the application to navigate to another layer of the application. Each navigation element specifies the layer URI of the layer to which the application navigates when a user selects the navigation element. Like other types of content elements different platforms can present navigation elements in different ways. For example in some embodiments a web browser platform presents a navigation element as a hyperlink. In this example an IPHONE platform can present the same navigation element as a graphical control.

In some possible embodiments the layers of the application include a home layer. The home layer of the application is the layer of the application that by default a user of the application uses to begin working with the application. In various applications the home layer contains various types of content. For example in some applications the home layer acts like a main menu of the application and comprises navigation elements that enable the user to navigate to various other layers of the application. In other applications the home layer is a splash screen for the application.

After the developer identifies the layers to be included in the application the developer develops the layer source code . Alternatively the developer selects the layer source code from a library of already existing layer source code. That is the layer source code can be reused in multiple applications.

The layer source code defines one or more layer classes. In general each of the layer classes is a descriptive tool that defines a set of attributes and or services that characterize members objects of the class. Each of the layer classes corresponds to a different one of the identified layers. A layer module is a software object that is an instance of a layer class. A layer module represents a layer.

Each of the layer classes defined by the layer source code contains a load operation. The load operation loads data into the layer module. The load operation can perform a wide variety of activities to load content into the appropriate layer module. For example the load operation can populate a menu with menu items. In another example the load operation can retrieve data from a network or a database and populate the data into a text block.

There is no need to develop or select different layer source code for versions of the application that operate on different platforms. In other words the layer source code is not specific to any platform. Consequently the load operations defined by the layer source code load the same content into the layer modules regardless of the platform on which the application is operating.

To develop the application the developer also develops the application source code . The application source code defines an application initialization operation and a navigation operation. When executed the application initialization operation initializes a navigation map. The navigation map maps layer URIs to layer modules. In some embodiments the application source code automatically generates the layer URIs. In other embodiments the application source code uses pre defined layer URIs. When the application receives a navigation request the navigation operation uses the navigation map to identify an appropriate layer module from a plurality of layer modules. The appropriate layer module is associated with a layer URI specified by the navigation request. The load operation of the appropriate layer module is then invoked to load content into the appropriate layer module. A navigation request is a request to navigate the application from one layer of the application to another layer of the application.

There is no need for the developer to develop different application source code for versions of the application that operate on different platforms. Rather the same application source code is used in versions of the application that operate on different platforms. In other words the application source code is not specific to any platform. Consequently the navigation operation specified by the application source code uses the same load operations of the layer source code regardless of the platform on which the application is operating.

The business logic source code of the application comprises the application source code and the layer source code of the application. The business logic source code does not contain code that is specific to any platform. Moreover the business logic source code defines all functionality of the application that is specific to the application. In other words the functionality of the application as perceived by a user of the application is defined in the business logic source code in a way that is not specific to any platform.

Furthermore to develop the application the developer selects one or more platforms on which the application is to operate . For example the developer can select a platform associated with the IPHONE and the IPAD . In another example the developer can select a platform associated with Telnet clients. Different platforms provide different application programming interfaces APIs that present information to a user and receive input from the user.

After selecting the platforms on which the application is to operate the developer selects the binding source code sets associated with the selected platforms . In some embodiments the developer obtains a library of predefined sets of binding source code. In such embodiments the developer can obtain the library from various sources. In various embodiments for example the developer can download individual bindings download sets of bindings develop his or her own bindings and associated library or access the bindings from a library provided as SaaS. In use the developer can select the binding source code sets associated with the selected platforms from among the sets of binding source code stored in the library. For example the developer can acquire a copy of the library and or rights to use the library from an outside party in exchange for items or services of value. The sets of binding source code in the library can be added to the library by the developer or an outside party prior to development of the application. The sets of binding source code in the library can be re used in substantially the same form in multiple applications. For example in some embodiments the sets of binding source code in the library can be re used in exactly the same form in multiple applications. In other embodiments the sets of binding source code in the library can be re used in other applications after minor changes e.g. less than twenty lines of code to the sets of binding source code.

The binding source code sets define layer output operations that generate output data that can be used by different platforms to present layers using user interface features that are native to different platforms. For example the binding source code set A can define a layer output operation that processes layer modules to present layers using user interface features that are native to IPHONE devices. In this example the binding source code set B can define a layer output operation that processes the same layer modules to present layers using user interface features that are native to ANDROID based mobile phones.

Next the developer develops container source code sets . Each of the container source code sets corresponds to a different one of the selected platforms. As described in detail elsewhere in this document each of the container source code sets defines an initialization operation that initializes the application.

In some embodiments the developer obtains the container source code sets from a library of pre existing sets of container source code. This library can be developed maintained and or expanded by the developer an outside party or another entity in the same way the developer would access bindings from a library as discussed herein. In some instances the developer can receive a copy of the library and or rights to use the library from an outside party in exchange for items or services of value. In such embodiments the developer develops the container source code sets by modifying pre existing sets of container source code in the library such that the container source code sets identify an application class defined by the application source code of the application. Thus the container source code sets are specific to the application and individual ones of the selected platforms. However the container source code sets do not define any functionality that differentiates the application from other applications. An example initialization operation is described herein with regard to .

Next the developer selects a deployment technique for the application . The deployment technique for the application governs where various modules in the application operate. The development distribution and execution of applications using various deployment techniques are described with regard to .

After selecting the deployment technique one or more computing systems generate packages corresponding to the selected platforms . Each of the packages comprises a set of computer readable instructions compiled from the application source code for the application the layer source code for the application the container source code for a specific platform and the set of binding source code for the specific platform. The instructions in each of the packages when natively executed by devices that provide appropriate ones of the selected platforms provide the same application.

Instructions execute natively on a platform when no intervening software between the instructions and the platform is needed to execute the instructions. For example a special plug in or virtual machines is not needed execute the instructions in the packages on appropriate ones of the selected platforms.

After the packages are developed the developer distributes the packages for installation and use on the computing devices . In various embodiments the packages are distributed in various ways. For example in some embodiments an online application store such as Apple Inc. s APP STORE is used to distribute the packages . In other embodiments the packages are distributed directly to the computing devices .

When the application is launched the container module begins executing. When the container module begins executing the container module performs an initialization operation. The initialization operation initializes the application. An example initialization operation is described with regard to . As part of the initialization operation the container module provides an initial navigation request to the application module . The initial navigation request specifies a layer URI that indicates a home layer of the application.

In response to receiving a navigation request the application module performs a navigation operation. An example navigation operation is described herein with regard to . As part of the navigation operation the application module uses a navigation map to identify an appropriate layer module. The appropriate layer module is the one of the layer modules associated with the layer URI specified by the navigation request. The application module then provides a load request to the appropriate layer module. The load request is a request to perform a load operation of the appropriate layer module.

When the appropriate layer module receives the load request the appropriate layer module performs a load operation. The load operation loads content into the appropriate layer module. Various embodiments implement the load operation in various ways. For example in some embodiments each layer module comprises one or more content elements. The load operation loads data into the layer module by loading data into one or more of the content elements of the layer module. For example a layer module can contain a content element that represents a list. In the example the load operation can load data into the layer module by retrieving the titles of best selling books from a website and loading the titles into the list. Each of the layer modules can include different content elements and can implement the load operation differently. Consequently different content is loaded into different ones of the layer modules .

After the appropriate layer module performs the load operation the appropriate layer module provides a load complete event to the application module . The load complete event contains a reference to the appropriate layer module.

After receiving the load complete event from the appropriate layer module the application module generates a load complete event. The load complete event generated by the application module indicates that the appropriate layer module has completed loading content. In some deployment techniques the load complete event contains a layer reference. The layer reference comprises a pointer to the appropriate layer module. In other deployment techniques the load complete event contains a serialized version of the appropriate layer module.

The container module listens for load complete events generated by the application module . When the container module detects a load complete event generated by the application module the container module provides the layer reference or the serialized version of the appropriate layer module to the binding module .

When the binding module receives the layer reference or the serialized version of the appropriate layer module the binding module performs a layer output operation on the appropriate layer module. The layer output operation generates output data that can be used by a platform to present the appropriate layer module as one or more user interface features that are native to the platform. As described below different binding modules can generate various types of output data by performing the layer output operation on the appropriate layer module.

Various embodiments implement the layer output operation in various ways. For example in some embodiments each of the binding source code sets defines content output operations. The content output operations correspond to different types of content elements. For example the binding source code sets can include content output operations for lists content output operations for list data items content output operations for menus content output operations for menu item content output operations for images and so on.

The content output operations in the binding source code sets for different platforms generate output data that is usable by the different platforms to present content elements. For example the binding source code set A can define a content output operation that generates output data that an IPHONE platform can use to present lists. In this example the binding source code set B can define a content output operation that generates output data that an ANDROID platform can use to present lists.

When performing the layer output operation on the appropriate layer module the binding module utilizes the output operations for each of the content elements in the appropriate layer module. For example if the content elements of the appropriate layer module include a list and an image the binding module performs the output operation for the list and the output operation for the image when performing the layer output operation on the appropriate layer module. In this way the layer output operation generates output data usable to present each content element of the appropriate layer module as one or more user interface features native to a particular platform.

When a user selects a navigation element in a layer in the application the application module receives a navigation request. The navigation request specifies the layer URI of another layer of the application. When the application module receives the navigation request the process described above recurs with regard to the other layer.

As illustrated in the example of the system comprises the developer computing system . The developer computing system includes the compiler application . In the client based deployment technique the compiler application generates the packages such that each of the packages includes compiled instructions defining the application module the layer modules a container module and a binding module. The packages are suitable for installation on computing devices that provide different platforms.

When the application is deployed using the client based deployment technique the packages are distributed to the computing devices . For ease of explanation the example of only illustrates a touch screen style smart phone and a feature phone. However in other embodiments the computing devices can be a wide variety of different types of mobile devices such as inventory management devices mobile phones tablet computers netbook computers and so on. Furthermore although only mobile devices are shown it should be appreciated that the same capabilities and functionality described in this document with regard to the computing devices can in some embodiments be performed by mobile devices such as smart phones or tablet computers or non mobile devices such as desktop computers server computers and so on.

After the packages are distributed to the computing devices the computing devices install the packages . After installation the computing devices execute the instructions in the packages .

The computing device A comprises an input system and an output system . The input system enables the computing device A to receive input from a user of the computing device A. In various embodiments the input system can be a variety of different types of systems that enable the computing device A to receive input from the user . For example the input system can be a touch screen a keyboard a keypad a pointing device e.g. a mouse touchpad trackball etc. a button array a microphone or another type of system that enables the computing device A to receive input from the user . The output system enables the computing device A to provide output to the user . In various embodiments the output system can be a variety of different types of systems that provide output to users. For example the output system can be a graphics screen e.g. a monitor an LCD screen an LED screen etc. a speaker system or another type of system that is capable of providing output to users. Furthermore in some embodiments the input system and the output system are physically the same system. For instance the input system and the output system can be a single touch screen.

In addition the computing device A provides an operating system . The operating system is a software system that manages the hardware resources of the computing device A and supports the operation of software applications. In various embodiments the operating system can be a variety of different types of operating systems. For example the operating system can be a WINDOWS PHONE 7 operating system a WINDOWS 7 operating system an IPHONE operating system an OS X operating system a WEBOS operating system from Hewlett Packard Company a Linux operating system an ANDROID operating system a CHROME operating system from Google Inc. or another type of operating system.

As illustrated in the example of the computing device A comprises the package A. Execution of instructions in the package A by a processing unit of the computing device A causes the computing device A to provide the container module the application module the layer modules and the binding module .

To use the application the user uses the input system to provide a launch command to the operating system . In response the operating system provides a launch request to the container module . After the container module receives the launch request the container module the application module the layer modules and the binding module behave in the manner described above with regard to the example of .

In the client based deployment the binding module outputs user interface commands when the binding module processes a layer module. The user interface commands cause the output system to present the layer represented by the layer module. For example the user interface commands can cause the output system to display the layer or can cause the output system to output audio signals representing the layer.

As illustrated in the example of the system comprises the developer computing system . The system also comprises the computing devices . For ease of explanation only a touch screen style smart phone and a feature phone are illustrated in the example of . However in other embodiments the computing devices can be replaced by a wide variety of different types of computing devices such as desktop computers mobile phones tablet computers and so on.

The system also comprises server systems A through N collectively server systems . The server systems are computer systems. The server systems can provide different platforms. For example the server system A can provide an Active Server Pages ASP based web server platform the server system B not shown can provide a Telnet server platform and the server system N can provide a PHP based web server platform.

To generate an application using the server based deployment technique the compiler application generates the packages . Each of the packages is associated with a different platform. The compiler application generates the packages by compiling the layer source code of the application the application source code of the application the container source code sets for the platforms and the binding source code sets for the platforms. Each of the packages includes compiled instructions defining the layer modules the application module a container module and a binding module. Each of the packages is suitable for installation on the server systems that provide the platform associated with the package.

When an application is deployed using the server based deployment technique the packages are distributed to the server systems and installed on the server systems . After installation the server systems execute instructions in the packages to provide the container module the application module the layer modules and the binding module .

The computing devices do not include hardware or software that is specific to the application. For example the computing device A can be a standard telephone and the IVR version of the application is installed on the server system A. In this example a user can interact with the application by using the computing device A to call the server system A. In another example a user can interact with the application using a general purpose client application on the computing device N. General purpose client applications include applications that are not tied to a specific server based application. For example a user can interact with a web version of the application using a web browser application on the computing device N. In another example a user can interact with a Telnet version of the application using a Telnet client on the computing device N.

Like the computing device A illustrated in the example of the computing device A illustrated in the example of comprises the input system the output system and the operating system .

However instead of including the package A the computing device A illustrated in the example of comprises a browser application . In different embodiments the browser application can be different types of web browser applications. For example the browser application can be the SAFARI web browser application from Apple Inc. the INTERNET EXPLORER web browser application from Microsoft Corp. the FIREFOX web browser application from the Mozilla Foundation the CHROME web browser application from Google Inc. or another web browser application.

Although the computing device A provides a web browser application in the example of it should be appreciated that in some instances where the application is deployed using the server based deployment technique the computing device A provides other types of general purpose client applications instead of the browser application . For example the computing device A can provide a telnet client instead of the browser application . Furthermore in some instances where the application is deployed using the server based deployment technique the computing device A does not provide a general purpose client application or an operating system.

The server system A provides the container module the application module the layer modules and the binding module . The container module the application module the layer modules and the binding module illustrated in the example of operate in a similar way to the container module the application module the layer modules and the binding module illustrated in the example of .

The server system A also provides a server application . To use the application the user uses the input system to interact with the browser application . The browser application sends a web request to the server application . The web request specifies a layer URI of a layer in the application. When the server application receives the web request the server application provides a navigation request to the application module . The application module processes the navigation request as previously described. Subsequently the binding module generates resource data. The resource data represents the layer indicated by the layer URI. When the server application receives the resource data the server application sends a web response to the browser application as a response to the web request. The web response contains the resource data.

When the browser application receives the web response the browser application uses the output system to present the layer to the user . Subsequently the user can select a navigation element of the layer. When the user selects the navigation element the browser application sends another web request to the server application . The other web request specifies the layer URI of another layer in the application. The server application processes this web request in the same way as the previous web request.

To generate an application using the client shell deployment technique the compiler application generates the packages and shell application packages A through N collectively shell application packages . Each of the packages is associated with a different platform. Each of the shell application packages is associated with a different platform.

The compiler application generates the packages by compiling the layer source code the application source code the container source code sets and the binding source code sets . Each of the packages includes compiled instructions defining the one or more layer modules the application module a container module and a binding module. Each of the packages is suitable for installation on the server systems that provide the platform associated with the package. Each of the shell application packages comprises instructions that provide shell applications when executed on computing devices that provide the platform associated with the shell application package.

After the compiler application builds the packages the packages are distributed to and installed on the server systems . In addition the shell application packages are installed on the computing devices . After the shell application packages are installed on the computing devices the computing devices execute computer readable instructions in the shell application packages that cause the computing devices to provide shell applications. The shell operations operate natively on the computing devices .

From the perspective of users of the computing devices the shell applications appear to be performing all operations of the application. However in reality the shell applications are actually sending navigation requests to the server systems receiving serialized interface data from the server systems and using the serialized interface data to present layers of the application to the users. Various embodiments format the serialized interface data in various ways. For example the serialized interface data can be formatted as HTML data XML data image data or other data formatted in other ways. The client shell deployment technique can be useful in situations where it is advantageous to have the work of the application done away from the computing devices yet provide the appearance that the application is being provided by the computing devices .

The computing device A illustrated in the example of is similar to the computing device A illustrated in the example of . Like the computing device A illustrated in the example of the computing device A illustrated in the example of provides the input system the output system and the operating system . However the computing device A provides a shell application instead of the browser application . Execution of the instructions in one of the shell application packages causes the computing device A to provide the shell application .

Furthermore the server system A illustrated in the example of is similar to the server system A illustrated in the example of . Like the server system A illustrated in the example of the server system A illustrated in the example of provides the container module the application module the layer modules and the binding module .

To use the application the user uses the input system to instruct the operating system to launch the shell application . When the shell application launches the shell application provides an initial navigation request to the application module . The initial navigation request specifies a layer URI of the home layer of the application. The application module processes the navigation request as described elsewhere in this document.

When the binding module processes a layer module the binding module provides serialized interface data to the shell application . The serialized interface data represents the layer of the application indicated by the layer URI. When the shell application receives the serialized interface data the shell application uses the output system to present the layer of the application to the user . The user can select navigation elements of the layer. When the user selects a navigation element of the layer the shell application provides another navigation request to the container module . The other navigation request specifies the layer URI associated with the navigation element.

To generate an application using the hybrid deployment technique the compiler application generates a server package for the application. To generate the server package the compiler application compiles the layer source code and the application source code for the application. Hence the server package includes instructions defining one or more layer modules and the application module . The server package is suitable for installation on the platform provided by the server system A. After the compiler application generates the server package the server package is distributed to and installed on the server system A. It should be appreciated that in other embodiments the server package is distributed to and installed on other ones of the server systems .

Furthermore to generate an application using the hybrid deployment technique the compiler application generates client packages A through N collectively client packages for the selected platforms. The compiler application generates the client packages by compiling the container source code sets and the binding source code sets for the selected platforms. Hence the client packages include instructions that define the container module and the binding module . The instructions in each of the client packages are suitable for native execution on different platforms. After the compiler application generates the client packages the client packages are distributed to and installed on the computing devices .

The computing device A illustrated in the example of is similar to the computing device A illustrated in the example of . Like the computing device A illustrated in the example of the computing device A illustrated in the example of provides the input system the output system and the operating system . However instead of the package A the computing device A comprises the client package A. The client package A provides the container module and the binding module of the application but not the application module or the layer modules of the application.

Furthermore the server system A illustrated in the example of is similar to the server system A illustrated in the example of . However the server system A illustrated in the example of comprises the server package . The server package provides the application module and the layer modules of the application but not the container module or the binding module of the application.

To use the application the user uses the input system to instruct the operating system to launch the application. When the application launches the container module provides an initial navigation request to the application module at the server system A. The initial navigation request specifies a layer URI of the home layer of the application. The application module processes the initial navigation request as described elsewhere in this document.

Subsequently the container module receives a load complete event from the application module . The load complete event comprises a serialized version of a layer module. The container module provides the serialized version of the layer module to the binding module at the computing device A. The binding module then processes the serialized version of the layer module. When the binding module processes the serialized version of the layer module the binding module outputs user interface commands that cause the operating system to use the output system to display the layer to the user . The user can select navigation elements of the layer. When the user selects a navigation element of the layer the operating system provides another navigation request to the container module . The other navigation request specifies the layer URI associated with the navigation element.

As illustrated in the example of the initialization operation begins when execution of the container module begins . In various embodiments execution of the container module can begin at various times. For example in some embodiments execution of the container module begins when the operating system launches the application in response to input from the user . In other embodiments execution of the container module begins when the server application starts at the server system A. In yet other embodiments execution of the container module starts when one of the server systems starts. In yet other embodiments execution of the container module starts when the server system A first receives a web request or a navigation request for the container module .

After execution of the container module begins the container module initializes the binding module . In some embodiments the binding module follows a factory design pattern. In such embodiments the container module initializes the binding module by invoking a static initialize method of the binding module .

Different binding modules can perform different actions when the container module initializes the binding module. For example invocation of the initialization methods of some binding modules causes the computing device A to display a splash screen. In this example invocation of the initialization methods of other binding modules does not cause the computing device A to perform any actions.

Next the container module generates an event listener . In the example of the application source code defines an abstract application class. The abstract application class defines an application initialization operation and a navigation operation. The event listener listens for load complete events generated by the abstract application class. As mentioned elsewhere in this document load complete events comprise layer references. In instances where the developer selects the client based the server based or the shell application deployment techniques load complete events include layer references and the event listener provides the layer references to the binding module . In instances where the developer selects the hybrid deployment technique load complete events contain serialized versions of layer modules and the event listener provides the serialized versions of the layer modules to the binding module .

The container module then instantiates the application module . The application module is an instance of an application class defined in the application source code . The application class extends the abstract application class. The application class overrides the application initialization operation defined by the abstract application class. The application initialization operation of the application module is invoked whenever the application class is instantiated.

When executed the application initialization operation of the application module instantiates the layer modules . Each of the layer modules is an instance of a different layer class defined in the layer source code . Each of the layer classes extends An abstract layer class. The abstract layer class defines a load operation. Each of the layer classes implements the load operation in different ways. Consequently the load operations of layer modules have different behavior.

Furthermore when executed the application initialization operation of the application module generates a navigation map that maps layer URIs to the layer modules. The navigation map is a software object that maps layer URIs to the layer modules. Different applications have different application classes. The different application classes implement different application initialization methods. Hence difference applications can initialize different navigation maps.

The application initialization operation also initializes a style for the application. The style for the application can control the appearance of text in the application. In some embodiments styles can also be initialized for individual layers or types of content elements.

After instantiating the application object the container module provides an application object reference to the binding module . The application object Reference is a reference to the application object. In the example of the binding module has an application property. The container module assigns the application object reference to the application property of the binding module .

The container module then generates an initial navigation request . The initial navigation request specifies the layer URI of the home layer of the application. In The example of the container module generates the initial navigation request By invoking a navigate method of the abstract application class providing the layer URI of The home layer as a parameter.

The following is example container source code used with a Console binding. The Console binding can be used with Telnet platforms 

The following is example container source code used with a Compact Binding. The Compact binding can be used with MICROSOFT WINDOWS CE platforms.

The following is example container source code used with a MonoTouch binding. The MonoTouch binding can be used with the APPLE IPHONE and the APPLE IPAD Platforms.

As illustrated in the example of the navigation operation starts When the application module receives a navigation request . The navigation Request specifies a layer URI. The layer URI comprises a root portion and a parameter portion. The parameter portion of a layer URI comprises zero or more parameters. Each of the parameters is a name value paid. For example http example.com booksapp is the root portion of the layer URI. In this example the parameter portion of the layer URI comprises two parameters bookId 234 and lang end .

In response to receiving the navigation request the application module uses the layer URI specified by the navigation request to identify the appropriate layer module . The appropriate layer module is one of the layer modules . In various embodiments the application module identified the appropriate layer module in various ways. For example in some embodiments the application module uses a navigation map to identify the appropriate layer module. In this example the navigation map comprises a set of entries. Each entry maps any layer URI that satisfies a regular expression to a particular one of the layer modules .

After identifying the appropriate layer module the application module provides a load request to the appropriate layer module . In various embodiments the application module provides the load request to the appropriate layer module in various ways. For example in some embodiments the application module provides the load request to the appropriate layer module by calling a load operation of the appropriate layer module. When the application module calls the load operation of the appropriate layer module the application module provides the parameters specified in the layer URI to the load operation.

The appropriate layer module can perform a variety of activities to load content into the appropriate layer module. For example the appropriate layer module can obtain data from the Internet and load that data into various content items in the layer. In this example the appropriate layer module can pull a list of best selling books from a website and put a title of each of the books into a list item in a list in the layer. In another example the appropriate layer module can interact with cameras microphones speakers and other types of features of the computing devices to load content into the layer. In this example such interaction is only possible with some types of mobile devices.

After calling the load operation on the appropriate layer module the application module generates a load complete event . The load complete event comprises a layer reference. The layer reference indicates a location that stores the layer data structure generated by the load operation of the appropriate layer module.

In different embodiments computing devices are implemented in different ways. For instance in the example of the computing device comprises a memory a processing system a secondary storage device a network interface card a video interface a display device an external component interface an external storage device an input device a printer and a communication medium . In other embodiments computing devices are implemented using more or fewer hardware components. For instance in another example embodiment a computing device does not include a video interface a display device an external storage device or an input device.

The memory includes one or more computer readable data storage media capable of storing data and or instructions. As used in this document a data storage medium is a device or article of manufacture that stores data and or software instructions readable by a computing device. In different embodiments the memory is implemented in different ways. For instance in various embodiments the memory is implemented using various types of computer readable data storage media. Example types of computer readable data storage media include but are not limited to dynamic random access memory DRAM double data rate synchronous dynamic random access memory DDR SDRAM reduced latency DRAM DDR2 SDRAM DDR3 SDRAM Rambus RAM solid state memory flash memory read only memory ROM electrically erasable programmable ROM and other types of devices and or articles of manufacture that store data.

The processing system includes one or more physical integrated circuits that selectively execute software instructions. In various embodiments the processing system is implemented in various ways. For instance in one example embodiment the processing system is implemented as one or more processing cores. For instance in this example embodiment the processing system may be implemented as one or more Intel CORE series microprocessors. In another example embodiment the processing system is implemented as one or more separate microprocessors or microcontrollers. In yet another example embodiment the processing system is implemented as an ASIC that provides specific functionality. In yet another example embodiment the processing system provides specific functionality by using an ASIC and by executing software instructions.

In different embodiments the processing system executes software instructions in different instruction sets. For instance in various embodiments the processing system executes software instructions in instruction sets such as the x86 instruction set the POWER instruction set a RISC instruction set the SPARC instruction set the IA 64 instruction set the MIPS instruction set and or other instruction sets.

The secondary storage device includes one or more computer readable data storage media. The secondary storage device stores data and software instructions not directly accessible by the processing system . In other words the processing system performs an I O operation to retrieve data and or software instructions from the secondary storage device . In various embodiments the secondary storage device is implemented by various types of computer readable data storage media. For instance the secondary storage device may be implemented by one or more magnetic disks magnetic tape drives CD ROM discs DVD ROM discs Blu Ray discs solid state memory devices Bernoulli cartridges and or other types of computer readable data storage media.

The network interface card enables the computing device to send data to and receive data from a computer communication network. In different embodiments the network interface card is implemented in different ways. For example in various embodiments the network interface card is implemented as an Ethernet interface a token ring network interface a fiber optic network interface a wireless network interface e.g. WiFi WiMax etc. or another type of network interface.

The video interface enables the computing device to output video information to the display device . In different embodiments the video interface is implemented in different ways. For instance in one example embodiment the video interface is integrated into a motherboard of the computing device . In another example embodiment the video interface is a video expansion card. Example types of video expansion cards include RADEON graphics cards manufactured by An Technologies Inc. of Markham Ontario GEFORCE graphics cards manufactured by Nvidia Corporation of Santa Clara Calif. and other types of graphics cards.

In various embodiments the display device is implemented as various types of display devices. Example types of display devices include but are not limited to cathode ray tube displays LCD display panels plasma screen display panels touch sensitive display panels LED screens projectors and other types of display devices. In various embodiments the video interface communicates with the display device in various ways. For instance in various embodiments the video interface communicates with the display device via a Universal Serial Bus USB connector a VGA connector a digital visual interface DVI connector an S Video connector a High Definition Multimedia Interface HDMI interface a DisplayPort connector or other types of connectors.

The external component interface enables the computing device to communicate with external devices. In various embodiments the external component interface is implemented in different ways. For instance in one example embodiment the external component interface is a USB interface. In other example embodiments the computing device is a FireWire interface a serial port interface a parallel port interface a PS 2 interface and or another type of interface that enables the computing device to communicate with external components.

In different embodiments the external component interface enables the computing device to communicate with different external components. For instance in the example of the external component interface enables the computing device to communicate with the external storage device the input device and the printer . In other embodiments the external component interface enables the computing device to communicate with more or fewer external components. Other example types of external components include but are not limited to speakers phone charging jacks modems media player docks other computing devices scanners digital cameras a fingerprint reader and other devices that can be connected to the computing device .

The external storage device is an external component comprising one or more computer readable data storage media. Different implementations of the computing device interface with different types of external storage devices. Example types of external storage devices include but are not limited to magnetic tape drives flash memory modules magnetic disk drives optical disc drives flash memory units zip disk drives optical jukeboxes and other types of devices comprising one or more computer readable data storage media. The input device is an external component that provides user input to the computing device . Different implementations of the computing device interface with different types of input devices. Example types of input devices include but are not limited to keyboards mice trackballs stylus input devices key pads microphones joysticks touch sensitive display screens and other types of devices that provide user input to the computing device . The printer is an external device that prints data to paper. Different implementations of the computing device interface with different types of printers. Example types of printers include but are not limited to laser printers ink jet printers photo printers copy machines fax machines receipt printers dot matrix printers or other types of devices that print data to paper.

The communications medium facilitates communication among the hardware components of the computing device . In different embodiments the communications medium facilitates communication among different components of the computing device . For instance in the example of the communications medium facilitates communication among the memory the processing system the secondary storage device the network interface card the video interface and the external component interface . In different implementations of the computing device the communications medium is implemented in different ways. For instance in different implementations of the computing device the communications medium may be implemented as a PCI bus a PCI Express bus an accelerated graphics port AGP bus an INFINIBAND interconnect a serial Advanced Technology Attachment ATA interconnect a parallel ATA interconnect a Fiber Channel interconnect a USB bus a Small Computing system Interface SCSI interface or another type of communications medium.

The memory stores various types of data and or software instructions. For instance in the example of the memory stores a Basic Input Output System BIOS an operating system application software and program data . The BIOS includes a set of software instructions that when executed by the processing system cause the computing device to hoot up. The operating system includes a set of software instructions that when executed by the processing system cause the computing device to provide an operating system that coordinates the activities and sharing of resources of the computing device . Example types of operating systems include but are not limited to Microsoft WINDOWS Linux Unix Apple OS X 0 Apple IOS HP WEBOS Google CHROME OS Google ANDROID OS and so on. The application software includes a set of software instructions that when executed by the processing system cause the computing device to provide applications to a user of the computing device . The program data is data generated and or used by the application software .

The various embodiments described above are provided by way of illustration only and should not be construed as limiting. Those skilled in the art will readily recognize various modifications and changes that may be made without following the example embodiments and applications illustrated and described herein. For example the operations shown in the figures are merely examples. In various embodiments similar operations can include more or fewer steps than those shown in the figures. Furthermore in other embodiments similar operations can the steps of the operations shown in the figures in different orders.

