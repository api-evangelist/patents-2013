---

title: Dynamic library replacement
abstract: Provided are techniques for an OS to be modified on a running system such that running programs, including system services, so not have to be stopped and restarted for the modification to take effect. The techniques include detecting, by a processing thread, when the processing thread has entered a shared library; in response to the detecting, setting a thread flag corresponding to the thread in an operating system (OS); detecting an OS flag, set by the OS, indicating that the OS is updating the shared library; in response to detecting the OS flag, suspending processing by the processing thread and transferring control from the thread to the OS; resuming processing by the processing thread in response to detecting that the OS has completed the updating; and executing the shared library in response to the resuming.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09535686&OS=09535686&RS=09535686
owner: International Business Machines Corporation
number: 09535686
owner_city: Armonk
owner_country: US
publication_date: 20130315
---
The claimed subject matter relates generally to computing systems and more specifically to techniques for the modification of shared libraries without shutting down associated programs.

Most operating systems OSs provide for the implementation of shared libraries which may also be known among other names as shared or dynamically linked objects. In a typical OS shared libraries in need of a repair or patch are fixed by replacing one version with another. However programs that are currently run ng continue to use the original rather than the replacement or new version and only newly executed programs access the new version. This scenario implies that a running program must be restarted to take advantage of an OS modification and if the running program is a system service that cannot be stopped and restarted the entire computing system must be rebooted.

Provided are techniques for an OS to be modified on a running system such that running programs including system services so not have to be stopped and restarted for the modification to take effect. The techniques include detecting by a processing thread when the processing thread has entered a shared library in response to the detecting setting a thread flag corresponding to the thread in an operating system OS detecting an OS flag set by the OS indicating that the OS is updating the shared library in response to detecting the OS flag suspending processing by the processing thread and transferring control from the thread to the OS resuming processing by the processing thread in response to detecting that the OS has completed the updating and executing the shared library in response to the resuming.

Also provided are techniques for setting by an operating system OS an OS flag indicating that the OS is updating a shared library detecting by the OS that a thread flag set in response to a processing thread detecting entry into the shared library is set detecting that the thread flag has been cleared replacing the shared library with an replacement shared library in response to the detecting that the thread flag has been cleared and clearing the OS flag in response to a completion of the replacing detecting by a processing thread when the processing thread has entered a shared library in response to the detecting setting a thread flag corresponding to the thread in an operating system OS detecting an OS flag set by the OS indicating that the OS is updating the shared library.

This summary is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium ma be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational actions to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Turning now to the figures is a block diagram of a computing system architecture that may implement the claimed subject matter. A computing system includes a central processing unit CPU coupled to a display a keyboard and a pointing device or mouse which together facilitate human interaction with elements of architecture and computing system . Also included in computing system and attached to CPU is a computer readable storage medium CRSM which may either be incorporated into client system i.e. an internal device or attached externally to CPU by means of various commonly available connection devices such as but not limited to a universal serial bus USB port not shown . CRSM is illustrated storing an operating system OS which incorporates aspects of the claimed subject matter and an example of logic associated with a computer software program or simply program . Also stored on CRSM is a shared computing library or simply library i.e. a collection of computing logic incorporated and employed by other programs such as program . Coupled to library is a virtual application programming interface VAN . In this example library and VAN is configured in accordance with the claimed subject matter. Components and and their relationship to the claimed subject matter are described in more detail below in conjunction with .

Client system and CPU are connected to the Internet which is also connected to a server computer . Although in this example client system and server are communicatively coupled via the Internet they could also be coupled through any number of communication mediums such as but not limited to a local area network LAN not shown . Further it should be noted there are many possible configurations of computing system architectures and computing systems that may implement the claimed subject matter of which architecture and computing system are only simple examples.

Bus represents one or more of any of several types of bus structures which for the sake of simplicity are not shown including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced. ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component interconnects PCI bus.

Memory typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and includes both volatile and non volatile media. In this example memory includes random access memory RAM and cache memory or simply cache . Computing system and memory may also further include other removable non removable volatile non volatile computer system storage media. Memory is also illustrated storing an operating system OS a program and a shared library SL which includes a virtual application programming interface VAPI . In the following examples OS program SL and VAPI are copies of OS program library and VAPI that are loaded into RAM . SL is modified in accordance with the claimed subject matter by employing features incorporated into VAPI . VAPI and modification of SL are explained in more detail below in conjunction with .

During processing associated with a Rebuild Library block library with VAPI are recompiled or rebuilt and stored on CRSM for use by a program such as program . Finally control process to an End Setup Library block in which process is complete.

During processing associated with block a flag not shown associated with library is set to indicate that program is about to execute code or enter library . During processing associated with an operating System OS Flag Set block a determination is made as to whether or not a particular flag not shown associated with OS is set see . This OS flag is set by OS when a request to update library has been received by OS . If the OS flag is set control proceeds to a Suspend Thread block . During processing associated with block a thread of program that is responsible for the call to library that initiated process is suspended. In conjunction with the suspension a processing table not shown of OS is updated to reflect the suspension.

During processing associated with a Clear Thread Flag block a flag in OS that corresponds to the calling thread is cleared indicating to OS that the thread is not active i.e. either not in the process of being called or suspended. During processing associated with a Transfer Control to OS for Update block control is returned to OS so that library can be updated. During processing associated with a. Wait for OS to Resume Thread the thread that called library waits until OS indicates that a resumption of processing is allowed typically by changing an entry in the processing table from suspended to active.

During processing associated with a Set Thread Flag block. the thread in OS is set to indicate to OS that the thread is now active. Once the thread flag has been set during processing associated with block or if during processing associated with block a determination was made that the OS flag was not set control proceeds to an Execute Library Code block . During processing associated block the logic associated with library that was called by program is executed.

During processing associated with a Clear Thread Flag block the thread flag is cleared. Finally control proceeds to an End Call Library block during which process is complete.

Process starts in a Begin Update Library block and proceeds immediately to a Set OS Flag block . During processing associated with block a flag not shown in OS is set to indicate that OS is beginning the process of updating a library. During processing associated with a Check Next Thread block a first thread of a set of threads corresponding to a particular process see and of a set of process threads corresponding to the library being updated e.g. SI is checked. As explained above in conjunction with each processing thread currently executing has a corresponding flag in OS that indicates the particular thread is entering a library such as library . Although described with respect to one program and one library the claimed subject matter is equally applicable to scenarios with multiple programs and multiple libraries. In that case each thread of each process would have a flag for each library that may be called by the particular thread and only those threads corresponding to a library that is to be updated would be checked.

During processing associated with a Thread Sleeping block a determination is made as to whether or not the thread being checked during processing associated with is currently paused. A thread may be paused for reasons such as but not limited to waiting for a system call to return if a determination is made that the thread is sleeping control proceeds to a Wake Thread block . During processing associated with block the sleeping thread is awaken so that the thread may resume processing eventually to complete the library call that is currently executing. Once the thread is awaken or a determination is made that the thread is not sleeping control proceeds to a More Threads block . During processing associated with block as determination is made as to whether or not there are threads that still need to be checked to see if they are executing in SL . If so control returns to block the next flag corresponding to the next thread is checked and processing continues as described above. In short process continues to check the thread flags until none are set by looping through blocks and and all the thread flags associated with the library to be updated. As explained above in conjunction with once a thread has completed library code the corresponding thread flag is cleared and the OS flag set during processing associated with prevents the thread from reentering the library.

During processing associated with an Update Library block SE is updated. During processing associated with a Convert Data block any modified data or data structures associated with SL are updated. During processing associated with a Resume Threads and Clear OS Flag block the OS flag set during processing associated with is cleared and all the threads associated with SI. are resumed by updating the corresponding entries in the processing table. Finally control proceeds to an End Update Library block in which process is complete.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

