---

title: Type projection query of an instance space
abstract: Technologies are described herein for applying type projection queries to instance space graphs. Through the utilization of the technologies and concepts presented herein, a type projection may be used to describe the hierarchy of instance types connected by relationships within an instance space graph. A type projection query based on the type projection may be dynamically generated to query instances and relationships within the instance store. Filter criteria for the query can be expressed using a path notation. Results from of the type projection query may be provided as graphs of instances and relationships which are subgraphs of the queried instance space graph. Programmatic traversal of the resultant subgraph can navigate to each instance node within the result space.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08838655&OS=08838655&RS=08838655
owner: Microsoft Corporation
number: 08838655
owner_city: Redmond
owner_country: US
publication_date: 20130212
---
This application is a continuation of co pending U.S. patent application Ser. No. 12 623 378 filed Nov. 21 2009 entitled Type Projection Query of an Instance Space which is incorporated herein by reference in its entirety.

Management systems such as those used in information technology IT operations can track various instances in part by storing information about those instances. Instances may be hardware such as a computer or network device software such as an operating system or user application incidents change orders work tickets or various other entities tracked within the management system.

Information stored by the management system regarding the tracked instances may include relationships between instances. For example a peripheral may have a relationship to a computer that it is part of or connected to. Similarly an operating system or other software may be related to a computer by being installed on that computer. A work ticket may be related to a network router because the work ticket suggests replacing the router.

Information stored by management systems is generally stored within a database. It is desirable to retrieve information about instances from the database based on relationships between the instances and various other instances. For example a system manager may wish to retrieve information regarding the operating system installed on computers that are related to a certain type of network device and also related to an incident. Such retrieval generally requires making multiple queries processing and comparing the results and establishing the desired output according to the relationships retrieved from the database queries.

Technologies are described herein for type projection queries on instance spaces. A management system is provided in one embodiment that can store information about entities tracked by the management system as instances. Each instance may be of one or more types may have properties and may relate to other instances. The information may be placed in an object model store referred to as an instance store and may be represented as an instance space graph where each node of the graph is an instance and each edge of the graph is a relationship between the instances connected by that edge.

Through the utilization of the technologies and concepts presented herein a type projection may also be used to describe the hierarchy of instance types connected by relationships within an instance space graph. A type projection query based on the type projection may be dynamically generated to query instances and relationships within the instance store. Filter criteria for the query can be expressed using a path notation. The path notation can apply filters to individual nodes along paths within the instance space graph. Results from the type projection query may be provided as graphs of instances and relationships which are subgraphs of the queried instance space graph. The resultant subgraph from the type projection query can represent a hierarchical result set of instances and their relationships. Programmatic traversal of the subgraph can navigate to each instance node within the result space.

It should be appreciated that the above described subject matter may be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for applying type projection queries to instance space graphs. Through the utilization of the technologies and concepts presented herein type projection queries may be dynamically generated to query instances and relationships making up an instance space stored within an instance store. A type projection query is a query that retrieves instances according to specified instance types where the instances are related in a structure according to specified relationship types. The instance types and relationship types make up a type projection. Type projection query results may be provided as a graph of related instances providing a hierarchical view of a subgraph of the instance space. One example application of type projection queries may be to populate a user interface form with properties from several related types. The form can reference a type projection and a type projection query may be issued to retrieve all of the instances to populate the form from a single query.

Examples of management systems used in IT operations may include SYSTEM CENTER from MICROSOFT CORPORATION SYSTEM CENTER SERVICE MANAGER SCSM from MICROSOFT CORPORATION or SYSTEM CENTER OPERATIONS MANAGER SCOM from MICROSOFT CORPORATION. Such systems can store and track information about instances of hardware software infrastructure licenses users events incidents service requests trouble reports management processes and so forth associated with IT operations. The technology discussed herein may also be applied to management systems for financial operations human resources logistics compliance management or various other management operations whether related to IT or not.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures concepts and technologies for type projection queries on instance spaces will be described.

Turning now to a block diagram illustrates a type projection query system according to one or more embodiments presented herein. A type projection query is a query that can retrieve instances according to specified instance types where the instances may be related in a structure according to specified relationship types. The instance types and relationship types make up a type projection. The type projection and a set of criteria for filtering may be used by a query definition generator to produce a generic query. The query definition generator can use information about how instances are stored in the instance store to form a query strategy to satisfy the type projection and the criteria .

A database query generator can accept the generic query produced by the query definition generator and then provide the specific database query language for retrieving information from the instance store . The database query generator can use information about the specific tables within the database housing the instance store . In a system where the instance store is stored in an SQL database the database queries generated by the database query generator may be SQL queries.

The database queries generated by the database query generator may be queried against the instance store . The results of this database query may be received by a hierarchical representation generator . In a system where the instance store is stored in an SQL database these results may be a relational set of data. The hierarchical representation generator can generate a composite result from the results of the database query from the instance store . The composite result may be generated by connecting the retrieved information regarding instances and relationships into a resultant subgraph.

An object projection may provide information detailing the results of the type projection query as a resultant subgraph. These results may be exposed to a results interface . Through the results interface the resultant subgraph may be traversed to identify desired results of the type projection query. The results interface may be implemented as any software command or protocol interface such as a library or an application programming interface API .

The type projection query system may include the query definition generator database query generator hierarchical representation generator and object projection . These components may be implemented as separate modules or together as one system. The type projection query system may be subdivided into modules as illustrated differently in whole or in part. The type projection query system may operate in conjunction with a database for housing the instance store or the instance store may be stored within or in association with type projection query system

Referring now to a schematic diagram illustrates an instance space graph used for type projection queries according to one or more embodiments presented herein. The instances and relationship information within the instance store may be represented as an instance space graph . Each node of an instance space graph can represent an instance. For example a first node of the instance space graph represents a seed as the root of the instance space graph . The seed represents an instance such as a service request computer group or so forth. The seed may also represent the whole of the instances associated with the seed . Additional nodes of the instance space graph may represent computers A D incident reports A C operating systems A D and hard drives A B. Each edge of the instance space graph represents a relationship between the instances connected by that edge. For example the computer A is related to incident report A operating system A and hard drive A.

The incident report A may be an instance that relates to the computer A instance because the incident report A records details of an incident that occurred on or in association with the computer A. Similarly the operating system A may be installed on the computer A and the hard disk A may be a peripheral of the computer A. While the instance space graph may aid in visualizing relationships between the instances retrieving instances from a database based upon these relationships may require multiple steps to collect and relate various sets of instances. The type projection query as discussed herein may be used to perform these database retrievals with reduced complexity.

Referring now to a schematic diagram illustrates a type projection according to one or more embodiments presented herein. The type projection can be represented as a graph describing a hierarchy of instance types connected by relationship types. The type projection can have the seed as its root node. The seed may represent an instance type or the whole of instance types A D associated with the seed . The first instance type A may connect to the seed . Additional instance types B D may be related to the first instance type A. For example the first instance type A may describe types of computers such as computers A D within the instance space graph . The instance type B may describe types of peripherals such as the hard drives A B. The instance type C may describe types of operating systems such as the operating systems A D. The instance type D may describe types of events such as the incident reports A C.

The edges between instance type nodes within the type projection can define relationship types between the instances types A D. The relationships may be strongly typed. Such strong typing may support a path notation for instances and relations between instances. Accurate traversal of the instance relationships in the instance space and resultant subgraph may be supported by the strong typing and path notation.

According to one or more examples the relationship type between instance type A and instance type C may include an installed on relationship. This may capture subgraphs from the instance space graph where the operating system A D falling within instance type C is installed on the computer A D falling within instance type A.

While the type projection may be represented as a graph it should be appreciated that the type projection may be described through several formats. Any of these formats may be used to describe the type projection as a set of specified instance types A D along with specified relationships or paths between pairs of the specified instance types A D. According to one or more embodiments the type projection may be described using extensible markup language XML .

An example XML definition of a type projection is illustrated in Table 1. The example describes a top level type called the seed A with two children Components B and C connected by relationship types AtoB and AtoC respectively. The Component B has a Component D connected by relationship type BtoD. 

Referring now to a schematic diagram illustrates a resultant subgraph according to one or more embodiments presented herein. Applying the structure of the type projection to query from the instance store can capture relationships from the instances within the instance space graph while avoiding separate queries for the various instances followed by searching matching and analysis to determine the relationships between all of the separately retrieved instances.

The result of such a type projection query may be represented as a resultant subgraph that is a subgraph of the instance space graph . The resultant subgraph can include portions of the instance space graph having the structure of the type projection and meeting any additionally specified criteria of the type projection query. Criteria may be provided along with the type projection to support type projection queries that filter against specific properties for instances and relationships according to the specified criteria . Navigation through or programmatic traversal of the resultant subgraph can support identifying instances and their relationships within the results of the type projection query.

When a projection query using the type projection is applied to the instance space graph the structure of the type projection defines a set of instance types and relationship types for identifying areas of the instance space graph . According to the illustrated example two areas are identified. These two areas are then included in the resultant subgraph . The first identified area includes computer A according to first instance type A the hard drive A according to the instance type B the operating system A according to the instance type C and the incident report A according to the instance type D. The second identified area includes computer D according to first instance type A the hard drive B according to the instance type B the operating system D according to the instance type C and the incident report C according to the instance type D. The areas of the instance space graph rooted at computer B and at computer C do not have structure matching the type projection and thus may not be included in the resultant subgraph .

For an area of the instance space graph to match the type projection during the type projection query the instances within the instance space graph can be within the corresponding instance types A D of the type projection . Also the relationships between the instances of the instance space graph may be within the relationship types of the type projection . For example the relationship type between type instance A and type instance B in the type projection may be related to a contains relationship such that the computer A should contain the hard drive A. In that case if the relationship between computer D and hard drive B is has access to and not contains then the relationship between computer D and hard drive B may not be captured by the type projection . In such an example computer D hard drive B operating system D incident report C and their interconnecting relationships would not be included in the resultant subgraph . The type projection specifies both instance types A D and interconnecting relationship types that are used against the instance space graph during a type projection query.

In addition to the instance types A D and interconnecting relationship types provided by the type projection a type projection query may also be specified by criteria for filtering. The criteria may be specified for any one of the instances and relationships within the type projection . The criteria may specify properties or groupings. For example criteria may be specified in association with the instance type A of the type projection to filter for computers A D having a particular manufacturer or a particular processor type. The criteria for filtering may be specified as a graph or as one or more paths within a graph. A path notation may be used to specify the criteria applied to instances along one or more paths within a graph. The criteria can be expressed in various formats including XML.

According to some embodiments filter criteria may be specified as type and group memberships. For example computers A D may be filtered as being of a type or subtype specified by a domain or type of operating system. The computers A D may also be filtered as being in a certain group such as those in the finance department. Similarly satisfaction of these filtering criteria may be similar to object inheritance. For example a computer system of a specific type or application may inherit also being a computer and thus inherit all of the properties of a computer.

According to some other embodiments filter criteria may be specified as cardinality of relationships. For example computers A D may be filtered as having two or more hard drives A B such that computers A D having only one hard drive are not captured by the type projection query. According to yet some other embodiments filter criteria may support sorting paging streaming aggregation or any other processing or manipulation of instance and relationship information within the type projection query.

To perform the type projection query a database query can be generated from the type projection . Starting at the seed each relationship type may be joined to each instance type. These joins may perform a traversal of the nodes seed to instance type A from instance type A to instance type B from instance type A to instance type C and from instance type A to instance type D. In the structured query language SQL for querying databases such joining may be implemented as an outer join. An outer join can search two or more tables and find results even without the tables containing a matching record.

An example XML definition for filter criteria is illustrated in Table 2. This example criteria corresponds to the XML type projection example illustrated in Table 1. In this example criteria can filters on a property value of the instance D. A Path in the property tag can define navigation to the property name on instance D. The value of name may then be compared to the literal D. If the criteria matches all instances and relationships traversed may be returned for each instance.

Referring now to additional details will be provided regarding the embodiments presented herein for querying an instance space according to instance types and relationship types. In particular is a flow diagram illustrating a method for type projection querying an instance space according to embodiments presented herein. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may be performed sequentially in parallel or in a different order than as described herein.

The method begins at operation where the type projection query system receives a type projection . The type projection can be represented as a graph describing a hierarchy of instance types connected by relationship types. The graph represents the structure or arrangement of relationships to be matched and retrieved from the instance store .

At operation the type projection query system receives filter criteria . The filter criteria may specify properties or groupings for any one of the instances or relationships within the type projection . The filter criteria may be specified as a graph or as one or more paths within a graph.

At operation the type projection query system can generate a type query. The type projection and a set of criteria may be used by the query definition generator to produce a type query or generic query. The query definition generator can use information about how instances are stored in the instance store to form a query strategy to satisfy the type projection and the criteria .

At operation the type projection query system can generate a database query. The database query generator can accept the generic query produced by the query definition generator and then provide the specific database query language for retrieving information from the instance store .

At operation the type projection query system can apply the database query to the instance store . The database query provided by the database query generator at operation may be queried against the database housing the instance store . Security policies associated with the instance store may be applied and honored during the type projection query.

At operation the type projection query system can receive database query results. The database query result set may be obtained from the database query performed at operation against the instance store . When the instance store is housed in an SQL database these results may be a relational set of data.

At operation the type projection query system can generate a hierarchical representation from the database query results. The database query results received at operation may be accepted by the hierarchical representation generator . The hierarchical representation generator can generate a composite result by connecting the retrieved information regarding instances and relationships into a resultant subgraph or other hierarchical representation of the query results.

At operation the type projection query system can generate an object projection from the hierarchical representation. The object projection may expose information detailing the resultant subgraph .

At operation the type projection query system provides a results interface for traversing the object projection. The results interface can expose any combination of the query results the hierarchical representation or the object projection. The resultant subgraph may be traversed or otherwise examined to identify desired results of the type projection query. The results interface may be implemented as any software command or protocol interface such as a library or an API. The method may terminate after operation or the method may be repeated continuously or periodically.

Turning now to an illustrative computer architecture can execute software components described herein for type projection queries performed against an instance space within an instance store . The computer architecture shown in illustrates a conventional desktop laptop or server computer and may be utilized to execute any aspects of the software components presented herein. It should be appreciated however that the described software components can also be executed on other example computing environments such as mobile devices television set top boxes kiosks vehicular information systems mobile telephones embedded systems or otherwise. The computer architecture may apply to the computer executing the program modules associated with the type projection query system .

The computer architecture illustrated in can include a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that can couple the system memory to the CPU . The system memory may provide memory used for the type projection query system . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup can be stored in the ROM . The computer may further include a mass storage device for storing an operating system software data and various program modules such as those associated with the type projection query system . The program modules can execute portions of software components processes and routines described herein.

The mass storage device can be connected to the CPU through a mass storage controller not illustrated connected to the bus . The mass storage device and its associated computer readable media can provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not illustrated . Similarly an input output controller may provide output to a printer or other type of output device also not illustrated . A display device may be used for providing output from the computer in the form of text graphics video graphical user interface any other user interface elements or any combination thereof

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop server computer or other computing environment. The mass storage device ROM and RAM may also store one or more program modules. In particular the mass storage device the ROM and the RAM may store the program modules associated with the type projection query system for execution by the CPU . The mass storage device the ROM and the RAM may also store other types of program modules.

In general software applications or modules such as those associated with the type projection query system may when loaded into the CPU and executed transform the CPU and the overall computer from general purpose computing systems into special purpose computing systems customized to perform type projection queries against an instance store. The CPU may be constructed from any number of transistors or other discrete circuit elements which may individually or collectively assume any number of states. More specifically the CPU may operate as one or more finite state machines in response to executable instructions contained within the software or modules. These computer executable instructions may transform the CPU by specifying how the CPU transitions between states thereby physically transforming the transistors or other discrete hardware elements constituting the CPU .

Encoding the software or modules onto the mass storage device may also transform the physical structure of the mass storage device or associated computer readable storage media. The specific transformation of physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the computer readable storage media whether the computer readable storage media are characterized as primary or secondary storage and the like. For example if the computer readable storage media is implemented as semiconductor based memory the software or modules may transform the physical state of the semiconductor memory when the software is encoded therein. For example the software may transform the states of transistors capacitors or other discrete circuit elements constituting the semiconductor memory.

As another example the computer readable storage media may be implemented using magnetic or optical technology. In such implementations the software or modules may transform the physical state of magnetic or optical media when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this discussion.

Based on the foregoing it should be appreciated that technologies for type projection queries against an instance store are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

