---

title: Runtime selection of most energy-efficient approach for services requested by mobile applications
abstract: An energy conservation module may be included in a mobile communication device that receives requests for services from application programs running in the device. For each request, the energy conservation module may determine which of different, selectable ways of performing the request is likely to be the most energy efficient. The energy conservation module may then cause the request to be performed in this most energy-efficient way. This determination may be dynamic and based on current operating conditions. Middleware between the application programs and an operating system may be included that presents various APIs to the application programs to allow them to easily invoke this functionality. The different, selectable ways of performing the services may be of any type, including different, selectable computer network interfaces (e.g., Wi-Fi and cellular) and whether a complex computation should be performed within or outside of the mobile communication device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09008735&OS=09008735&RS=09008735
owner: University of Southern California
number: 09008735
owner_city: Los Angeles
owner_country: US
publication_date: 20130411
---
This application is based upon and claims priority to U.S. provisional patent application 61 222 981 entitled Runtime Selection of Most Energy Efficient Approach for Services Requested by Mobile Applications filed Apr. 11 2012 the entire content of which is incorporated herein by reference.

This disclosure relates to mobile communication devices and to energy saving approaches for minimizing the energy consumed by such devices.

The surging popularity of mobile devices has created an entirely new software market for mobile applications. Many mobile phone applications rely on network communications and data processing to provide automated and personalized services such as context or location based services. Given the very low entry barrier for mobile application development there are many application developers who focus primarily on application functionality.

But battery life of a mobile phone can be a critical bottleneck to the end user experience of using an application. For example a Nokia N95 phone battery has been reported to have dozens of hours of standby time but when used for context monitoring by sensing audio GPS and Wi Fi access points the battery has been reported to drain in 4 hours. As mobile applications become pervasive the limited battery problem may only get worse as multiple applications may in fact access the same hardware independently at different time intervals.

At each stage of a mobile application design and operation the application developer has a wide range of options to trade off battery life of a mobile phone for other important metrics. For instance many mobile devices provide multiple different approaches for interfacing with a computer network such as the Internet. These may include for example a Wi Fi interface and a cellular interface. Similarly there may be choices over whether data computations are performed within or outside of the mobile device. Each of these choices may consume different amounts of energy. Unfortunately writing application programs that make the most energy efficient choice can be costly and very difficult.

An energy conservation module may be included in a mobile communication device that receives requests for services from application programs running in the device. For each request the energy conservation module may determine which of different selectable ways of performing the request is likely to be the most energy efficient. The energy conservation module may then cause the request to be performed in this most energy efficient way. This determination may be dynamic and based on current operating conditions. Such an energy conservation module may be implemented as middleware between the application programs and an operating system. The middleware may present various APIs to the application programs to allow them to easily invoke this functionality. Application programmers may thus be freed from having to include code in their applications that make these energy conservation determinations. A higher degree of energy savings may also be realized when the energy conservation module is implemented as a middleware. The different selectable ways of performing the services may be of any type including different selectable computer network interfaces e.g. Wi Fi and cellular and whether a complex computation should be performed within or outside of the mobile communication device.

These as well as other components steps features objects benefits and advantages will now become clear from a review of the following detailed description of illustrative embodiments the accompanying drawings and the claims.

Illustrative embodiments are now described. Other embodiments may be used in addition or instead. Details that may be apparent or unnecessary may be omitted to save space or for a more effective presentation. Some embodiments may be practiced with additional components or steps and or without all of the components or steps that are described.

The mobile communication device may be of any type. For example the mobile communication device may consist of or include a cell phone a smart phone a tablet a laptop computer and or a netbook.

The mobile communication device may include a battery an operating system a data storage system a data processing system a Wi Fi network communication transceiver application programs and a cellular network communication transceiver . The Wi Fi network communication transceiver may communicate with a Wi Fi communication network which may provide a gateway to the Internet . Similarly the cellular network communication transceiver may communicate with a cellular communication network that may provide a gateway to the Internet.

The energy conservation module may include computer hardware and software having a configuration that performs the functions of the energy conservation module that are described herein.

The energy conservation module may have a configuration that maximizes the energy efficiency of the mobile communication device while the mobile communication device is running one or more of the application programs . Some of the application programs may communicate over a computer network such as the Internet via one of different selectable computer network interfaces such as the Wi Fi network communication transceiver in the cellular network communication transceiver .

The energy conservation module may have a configuration that receives requests from each of the application programs while they are running. Each request may call for data communication over the computer network. For each received request the energy conservation module may be configured to determine which of the selectable computer network interfaces that are operational at the time of receiving the request is likely to consume the least amount of energy handling the data communication that is called for by the request. The energy conservation module may have a configuration that causes the requested data communication to take place via the computer network interface that is determined likely to consume the least amount of energy handling the data communication.

The data storage system may have a configuration that stores information indicative of the energy consumption rate of each of the selectable computer network interfaces such as the energy consumption rate of the Wi Fi network communication transceiver and the energy consumption rate of the cellular network communication transceiver . The energy conservation module may have a configuration that examines the stored information when determining which of the selectable computer network interfaces is likely to consume the least amount of energy.

The determination by the energy conservation module of which selectable computer network interfaces is likely to consume the least amount of energy may take into consideration the current status of one or more operating conditions that vary over time such as the current response times available data bandwidth or network congestion associated with each of the operating computer network interfaces such as the current response times available data bandwidth or network congestion of the Wi Fi network communication transceiver and the cellular network communication transceiver . This information can also change based on location.

The energy conservation module may include middleware which may be software that is juxtaposed between the operating system and each of the application programs . The middleware may have a configuration that receives requests for data communications from the application programs via one or more APIs.

The energy conservation module may also have a configuration that receives requests from each of the application programs for data processing. For each request the energy conservation module may have a configuration that determines whether the data processing is likely to consume the least amount of energy if substantially performed by the data processing system within the mobile communication device or by a data processing system outside of the mobile communication device such as a data processing system located within the Internet server . The energy conservation module may have a configuration that causes the data processing to be substantially performed at the location that is determined to consume the least amount of energy.

The energy conservation module may perform the various functions described herein on an automated basis without user intervention following the receipt of a request for a service from an application program. In other configurations user permission for a particular energy efficient choice may be sought before the choice is made.

Various different approaches may be followed to implement one or more of the processes that have been described as well as others. The energy conservation module may also be configured to conserve energy in connection with the selection of other energy consuming devices such as sensors. Examples of these are now discussed.

As indicated the runtime services provided by the energy conservation module may be exposed to an application developer through APIs Application Programming Interfaces . These APIs can be used by software developers to obtain system services. For instance rather than directly accessing a GPS sensor or a specific radio for data transmission the software designer may simply call the API to achieve the same functionality. The energy conservation module may monitor the various energy tradeoffs and dynamically select the most energy efficient way to provide the necessary functionality. By allowing multiple applications to access the services through a centralized middleware layer moreover it is also possible to amortize the energy cost of sensing.

The energy conservation module has been implemented on a Symbian S60 platform currently and a mobile sensing application for physical activity detection was transformed to use it s API. Results from a field trial show that the energy conservation module can improve battery life in this implementation between 6 and 21 .

Mobile phones may include on board sensors such as digital cameras GPS accelerometer and gyroscope. Additional sensors such as bio sensors for heart rate and ECG may also be integrated into a mobile phone using existing wireless standards.

Location can be sensed in multiple ways that trade off location precision with energy efficiency. Context detection algorithms such as user state may dynamically vary sensor sampling rates to tradeoff accuracy of state detection with battery life. Similarly there may be energy trade off decisions on remote versus local computation.

The energy conservation module may provide a mobile application development framework that relieves the developer from making energy efficiency tradeoff decisions while the underlying framework may implement sensing computation and communication services in an energy efficient manner.

The energy conservation module may operate at the interface between a user application and the operating system of the underlying platform. The energy conservation module may service an application s demand for sensing communication and computation. The service provided by the energy conservation module may be exposed to the application developer through APIs. In the presence of energy conservation module an application programmer may not need to directly access any of the hardware sensing or communication infrastructure on the mobile phone. Instead the functionality of the hardware may be exposed to the application software through APIs provided by the energy conservation module . For instance rather than directly accessing the GPS sensor or doing computation locally on the phone the software designer may simply invoke the energy conservation module s API to achieve the same functionality. The energy conservation module may monitor the various energy tradeoffs and dynamically select the most energy efficient way to provide the necessary functionality.

The energy costs of a subset of sensing computing and communication tasks can be statically measured. The energy costs of such static choices can be measured once during initialization of the device. The energy conservation module may then store the non varying energy cost information in a non volatile database on board the mobile phone such as in the data storage system .

Some energy costs may change dynamically. For these choices the energy conservation module may use short profiling intervals to determine the most energy efficient method to achieve the desired task functionality. Energy efficient methods that are identified at runtime by the energy conservation module may be stored in a runtime database which can be used for future decision making without the need for continuous profiling such as the data storage system . The energy conservation module may further improve energy efficiency by allowing multiple applications to access the same sensor data through its centralized runtime layer thereby amortizing the energy cost rather than duplicating them.

The energy conservation module may for example be implemented on top of a Symbian S60 platform. A mobile sensing application for physical activity detection may be transformed to use the energy conservation module s API. Results from a nine hour field trial of this embodiment show that the energy conservation module can improve battery life by up to 21 .

As illustrated in there may be a sensor interface layer . The sensor interface layer may interface with each sensor and collect data from the sensor. The sensors interfaced can be both on board internal sensors available on the mobile communication device or external sensors that are connected to the mobile communication device over a wireless interface such as Bluetooth or over a wired interface. A data aggregator may receive sensor data from each sensor interface and combine them into a single sensor data record. The data aggregator may allow multiple sensor streams to be synchronized into a single time stamped sensor record.

An analyzer module may perform domain specific tasks. The analyzer module may process the sensor data record and take action based on sensor data. For instance in a mobile race game controlled by the tilt direction and tilt angle of the mobile phone the analyzer module may use gyroscope and accelerometer sensor data to compute the acceleration and angle. The data may then be used to change the game scene appropriately on the screen. In more complex sensing based applications such as continuous user state monitoring the analyzer module may perform user state classification using data from both internal and external sensors.

A transmitter module may access a backend web service to provide context specific information. In some applications the transmitter module may send all the sensor data to a backend server which may then compute the user context remotely. The transmitter module may also handle data compression and encryption for privacy and energy saving.

A visualization agent may be used in graphics intensive applications to render video or graphics on screen.

The software components illustrated in were placed in an experimental mobile sensing platform for location aware physical activity detection. The mobile platform was a Nokia E75 mobile phone an external electrocardiograph sensor ECG for detecting user heart rate and two internal sensors from the mobile phone namely accelerometer ACC and GPS. A mobile application was run on the E75 and collected the sensor data. The sensor data was analyzed to classify user state into one of several activities namely walking running fidgeting standing sitting and using ECG and ACC sensor data with multi modal signal processing as described. The user state classification was geo stamped and stored in the mobile phone to provide continuous feedback to the end user regarding their physical activity level.

GPS may be used in many mobile applications particularly location based services. Mobile phones may provide multiple options for sensing location information. For example when using Nokia Phones the user may have choices that include Bluetooth based external GPS assisted GPS traditional GPS with no assist and network based GPS that uses only cell towers to provide approximate position information.

In Bluetooth based external GPS power consumption shows only the mobile phone power consumption for establishing a Bluetooth link and to read the GPS coordinates. There is a spike in the power consumption when the connection is established the data is read over the Bluetooth channel and the power consumption drops down to idle Bluetooth power when Bluetooth is ON but not actively sending receiving data.

The assisted GPS curve in shows a large power spike when it communicates with the cell tower to get the rough location first. Once the cell tower provides the orbital data of GPS satellites the GPS receiver on the mobile phone can narrow the search for satellite signals and quickly obtain the position information. This approach took roughly 15 seconds to receive the position information from the network and an additional 35 seconds to compute the precise position from a cold start.

The curve in used GPS built in a phone. In this mode the GPS receiver continuously scans for satellite information. This approach uses lower peak power but takes nearly 100 seconds before obtaining the position information due to the absence of any assistance from the cellular network. The total energy consumed by Integrated GPS was 33.9 Joules.

The last curve in shows the power consumption of Network based position information which like Assisted GPS communicates with cell towers to triangulate its approximate position information but no further communication with satellites is used. Hence network based GPS may also consume the same power as Assisted GPS initially when communicating with the cell tower for the first 15 seconds. The power consumption may then drop to idle power since it does not try to compute accurate position information by communicating with the satellites.

Based on the total energy consumption Power consumption time to get GPS reading the Network based GPS was best for saving energy 13 Joules per sample but the location data may be only approximate. Depending on the application s desire for location accuracy the application developer may select an appropriate location sensing algorithm. Given that location based services are very popular multiple mobile applications may independently access the GPS to obtain location information.

Mobile applications that provide context based services may use the context information to access a web service provided by a back end server using one of the wireless radios for communication. To quantify the energy costs of communication a test bed was created. The test bed could send data from the mobile phone to the backend server using 3 G EDGE or Wi Fi. AT T broadband network was used for 3 G and EDGE while an 802.11g Linksys router was used for Wi Fi. The data size transmitted to the back end varied from 100 KB to 1000 KB. As the performance of mobile wireless networks varied from place to place and from carrier to carrier all of the data transfer measurements from the same location were tested during early morning within one hour to reduce network congestion problems with other users. This study was repeated multiple times but always at the same time of the day to measure day to day variations.

Data transmission may consist of three phases namely a connection phase a transfer phase and a tail phase. shows power consumption during three data phases for three wireless data transmission approaches. In this experiment a 200 KB data transfer was used. Due to shorter range even though Wi Fi has much higher bandwidth the peak power consumed was only slightly worse than 3 G and EDGE radios on the E75.

In this experiment 3 G consumed more energy than EDGE until about 400 KB of data size. In order to understand the reason the following table shows average connection and tail energy costs of all three network interfaces 

The connection and tail energy of 3 G were much higher than EDGE while the transfer energy was lower. Hence for small data packets 3 G consumed more energy than EDGE. As the data packet size increased beyond 400 KB the transfer energy dominated the overall energy costs and hence 3 G consumed less energy than EDGE.

Mobile applications may need complex computations to be performed on sensor and other data. For instance application sensor data may be used to detect whether a user is walking running or driving. Such context monitoring may require running complex signal processing algorithms on the sensor data to detect user state. The choice of whether to perform the user state detection on the mobile phone or on the back end depends on the total energy cost taking several factors into account. In one experiment a user state detection algorithm was run that used ECG and ACC data collected over a 10 minute interval to detect user state.

The local computation cost was 6.6 Joules. The remote computation cost without Gzip varied between 1.46 Joules using Wi Fi up to 22.72 Joules using 3 G. When using Gzip compression first and then transmit compressed data the energy cost varied between 1.74 Joules using Wi Fi up to 21.17 Joules using 3 G. When Wi Fi was available it was energy efficient to perform remote computation. But when the user was roaming local computation was better than EDGE or 3 G cost.

Even in this simple scenario the choice of remote versus local computation was a complex function of the wireless radio being used and whether or not data is compressed. If the same user state detection algorithm was run using fewer or more sensor samples the computation costs may have differed. Hence there may be no single statically best choice when it comes to trading off energy costs of computation with communication.

The discussion may be simplified by showing the data on a single mobile device. But mobile sensing applications may be developed to run on multiple devices where the energy tradeoffs vary from one device to another. Hence the application developer may not even be motivated to consider all the tradeoffs on a single device since these tradeoffs change with the device. Thus tracking these tradeoffs may be kept outside of the mobile sensing application layer. Rather these tradeoffs may be managed automatically at runtime where the most accurate information regarding energy consumption can be collected in a device specific manner.

The previous discussion motivated energy consumption tradeoffs between sensing computation and communication. Given the complex dynamic tradeoffs it may be unrealistic to expect software developers to worry about these tradeoffs during mobile application development. The energy conservation module may solve this problem. As indicated the energy conservation module may include the runtime middleware layer that abstracts the complexity and provides a set of APIs to the application developer. The APIs can be used by application developers to obtain system services in an energy efficient manner such as obtaining GPS information deciding whether to run a computation locally or remotely or deciding which available wireless access point to use to send data packets over the network. The energy conservation module may monitor the various energy tradeoffs at runtime and dynamically select the most energy efficient implementation to provide the necessary functionality. The developer may be relieved of the need to understand the underlying hardware architecture and the corresponding energy tradeoffs thereby improving software productivity while still achieving significant energy savings.

An energy monitor module may measure the current energy consumption by using device specific energy measurement interfaces. For instance Nokia N95 provides a Nokia Energy Profiler that allows an application to measure the energy consumption during a given time interval. Two APIs may be provided for accessing the energy monitor module.

First a StartMonitoring API may start a thread in the energy monitor to measure energy consumption while running a mobile application. It may return true if it succeeds in starting the energy measurement otherwise it returns false.

Second a StopMonitoring API may stop the monitoring thread and returns the total energy consumed in Joules rounded to the nearest integer from the time the StartMonitoring API is invoked until the time StopMonitoring API is invoked.

A configuration database may store several configuration parameters related to determining the communication and computation energy tradeoffs within a mobile sensing application. The parameters stored in the database may include the energy cost of compressing sensor data data compression ratio for sensor data transmission energy per byte and connection and tail energy for various network interfaces on board the mobile device. Some of these parameters may be position dependent such as transmission energy. But other parameters such as compression energy and compression ratio may be position independent. So the configuration database may have two logical partitions. One partition may store position independent parameters while the second partition may store position dependent parameters.

The first step in using this embodiment of the energy conservation module within any mobile application may be to populate this database with application specific information that can be statically measured for that application. So every application may call an Initialize function byte int API This function may take as input a sampled sensor data packet an array of bytes collected by the application the primary computational function passed as a function pointer that analyzes the sensor data. The sensor data collected during the first time quantum of application execution may be used to initialize the database. The initialize API may compute the energy cost of several data manipulation functions that are independent of position. First it may measure the energy cost of compressing the sample sensor data packet. Second it may measure the compression ratio of the sample data packet. Then it may invoke the user defined function to analyze the sample sensor data packet. The energy cost of executing the user defined function locally on the mobile phone using the sample sensor data may be calculated. Initialize API may then record the compression energy compression ratio and local computation cost in the configuration database as position independent information.

A location monitor module may monitor users location and provide location to multiple applications thereby effectively enabling location sharing amongst applications. A single API may be provided to access this module a GetPosition API The current GPS coordinates of the device may be provided using the most energy efficient method. The GetPosition API may first scan Wi Fi access points and compare the current Wi Fi access points with previously collected access point information. If the scanned access point information differs by more than 20 compared to the old access point information the system may assume that the user has moved otherwise the system may assume that the user has not moved. If the user has moved then the actual position information may be obtained by accessing the energy intensive GPS sensor. If the user has not moved then the last GPS position may be provided as the current GPS position. The current Wi Fi scan information may then be stored for future comparison. The choice of 20 is experimentally determined in this study. Instead of determining this information a priori it is also possible to dynamically compute how much change in Wi Fi scan is necessary before determining whether a user has moved or not.

The following procedure shows an example of internal implementation details of how position information may be determined in an energy efficient manner 

This API may use a variable called POS which may save the most recently collected position information from the GPS sensor. The GetPosition API may first scan Wi Fi access points and store the access point information in APscan variable. The variable APcurr may store the list of Wi Fi access points from the previous time GetPosition information was invoked. If APscan differs by more than 20 from APcurr then it may be assumed that the user has moved to a new position otherwise it may be assumed that the user has not changed position from the last time GetPosition API was invoked. GetPositionFromGPS function may be called only when the actual GPS sensor is accessed. The POS variable may be updated with the new position information obtained from GPS. This API may use Network Based GPS for implementing GetPositionFromGPS function as described earlier Network GPS may be the least energy consuming of the various GPS functions that are available on the Nokia E75 phone. This API may also update a global variable called MOVED to true whenever position information is obtained from GPS.

A sensor sampler module may automatically determine the best sensor sampling rate to meet an application s demand. The energy conservation module may use a simple feedback controller mechanism to determine the best sampling rate. The sensor sampling module may provide one API to access its functionality GetSamplingRate API The GetSamplingRate API may provide the best sampling rate to achieve a desired level of accuracy. The feedback controller may initially allow a sensor to sample data at the highest sampling rate. The highest sampling rate data may be used to compute the analysis function output. The energy conservation module may then use only half of the sampled data by skipping every other sample collected to compute the new analysis function output. In this implementation the analysis function output may be assumed to be user state detection. Hence if the reduced sampling rate still predicts the same user state as was done with higher sampling then the API may inform the application layer to use a reduced sampling rate.

For some analysis functions the notion of similarity may not be easily determined. But it may be relatively easy to use a training run where the sampling module can learn the similarity information. In this implementation the detected user state detection may be used for similarity comparison.

A decision maker module may inform the application when it is energy efficient to use local computation and when it is better to perform the user defined function on a backend server while taking into account the energy costs for communication. If remote computation is suggested the module may suggest whether or not to use Gzip compression and the most energy efficient network interface to transmit the sensor data for remote computation. A MakeDecision byte int Address API may provide access to the decision maker module . This function may take as input sensor data set data length and the address of the back end server.

The mobile application typically collects sensor data for some amount of time and analyzes the sensor data at the end of the epoch to take application specific action. Before invoking the application specific analysis function in the energy conservation module the application developer may invoke the MakeDecision API . The MakeDecision API may first invoke the GetPosition API to get current position. If MOVED is true then it may obtain all available network interfaces as measured by the GetPosition API and stored in APcurr. It may then call ActiveEnergyProfile function which may implement a profiling strategy. An example of code for ActiveEnergyProfile is shown in the following procedure 

The ActiveEnergyProfile may first accesses the configuration database by using the current position as an index to obtain position dependent data. The configuration database may return a configuration parameter record if there is a record associated with the current location coordinates. Otherwise it may return NULL data. Once NULL data is received then ActiveEnergyProfile may split the sensor data packet into multiple smaller data chunks. It may then send the first data chunk to the destination IP by using the first access points in the APcurr vector. It may measure the connection tail and transmission costs using the StartMonitoring API and the StopMonitoring API . The ActiveEnergyProfile may send the second data packet using the next available access point in the APcurr vector and measures the energy costs for this new access point at this location. The profiling process may be repeated for all access points and each access point may be used to send one chunk of the data. The access points may include all Wi Fi channels as well as 3 G and EDGE networks if they are available. For each of the access points including 3 G and EDGE it may store the connection trail and transmission cost byte in the configuration database indexed by the position information as a single profile record labeled as EnergyProfile in the procedure set forth immediately above. The access points at a given location may be sorted based on the total energy consumed by each access point at that location. In essence the EnergyProfile record at a given location may show in sorted order how much energy is consumed by each access point during the profiling phase.

The ActiveEnergyProle may in itself be an energy intensive profiling operation. Hence whenever there are too many access points in the APcurr vector a simple heuristics of signal strength may be used to prune the search space to just the top four access points. Studies showed that users mobility patterns are fairly repetitive and there is even high predictability in mobility patterns. Hence after a few days of system operation the ActiveEnergyProfile may rarely need to do a comprehensive profiling analysis.

Once the configuration database returns the profile record then the MakeDecision API may find the lowest energy option using the EstimateEnergy function. The EstimateEnergy function may access the configuration database to obtain position independent configuration parameters namely compression ratio and compression energy costs and local energy costs. It may then estimate the energy cost of compressing the sensor data as well as the expected size of compressed data based on compression ratio information stored in the database. Finally it may estimate the transmission cost by using the minimum EnergyProfile EPmin obtained from ActiveEnergyProfile for both compressed and uncompressed data. The function may then find the minimum of local computation energy cost transmission energy cost without compression sum of compression cost and compressed data transmission cost. Based on the results it returns true when local computation is more energy efficient. It returns false when remote computation is more energy efficient.

A data transmitter module may send data to a destination using the network interface selected by the decision maker module . It may also monitor the energy cost of the current data transmission and then update the configuration database with the measured connection tail and transmission costs at the current GPS location. It may provide a single API a SendData byte int Remote Addr API This function may take the data packet provided and transmit the data to the remote server using the selected network interface and compression configuration specified by the MakeDecision API . The MakeDecision API may set EPmin including Gzipflag variables. If Gzipflag is true then the MakeDecision API may estimate that it is better to compress data and then transmit. Hence the SendData API may automatically read this flag and send either compressed data or uncompressed data using the network interface specified by AP inside EPmin. Once the data is transmitted it may also monitor the actual energy consumed and update the configuration database with the computed values for connection tail and transmission costs. An example of pseudo code for this API is shown in the following procedure 

A mobile application was selected that was a location aware physical activity detection system referred to herein as KNOWME. KNOWME collected sensor data from an external ECG sensor connected over Bluetooth to a Nokia E75 mobile phone. In addition to ECG data KNOWME also collected accelerometer ACC sensor data from the built in accelerometer sensor on the mobile phone. The data from the two sensors was streamed once every second to the mobile phone. In the KNOWME setup ECG generated 300 sample per second. However these sensor samples were internally buffered in the sensor and bulk transmitted over the Bluetooth channel. Although ECG generated 300 samples it only transmitted 4 packets per second over the Bluetooth channel to the mobile phone. Each packet had 75 sensor samples. The accelerometer data from the phone was also collected at the rate of 300 samples per second. The baseline version of KNOWME also collected GPS position information using Network based GPS once every 10 minutes for location awareness.

Every two minutes KNOWME used the sensor data from ECG and ACC to perform activity detection about 100 KB of data was collected from the two sensors combined per every two minutes. In particular it used multi modal signal processing to classify user state into one of nine activities such as walking fidgeting running from a combination of ECG and ACC data. Using multiple sensors may be much more effective in activity classification than just using accelerometer data alone. The activity detection can be done either locally on the phone or remotely on the server.

In the second version KNOWME remote the application always uses remote computation to perform activity detection. The flow chart of the steps are shown in . KNOWME scanned for Wi Fi access point availability. If there was a Wi Fi access point available it used Wi Fi to transfer data to the backend server for computation and received the activity classification from the backend. If no Wi Fi was available it used the cellular network to transmit the data to the backend and received the activity classification from the backend. The classified activity was stored on the mobile phone with the location stamp obtained from the GPS sensor. This information stored on the mobile phone was used to provide continuous feedback to the user regarding their activity level.

The energy conservation module enhanced implementation of KNOWME is shown in . At the start of KNOWME operation a single call to Initialize API was made to compute the position independent configuration parameters such as compression ratio compression energy and the local computation cost for processing two minutes of sample data. As described earlier Initialize automatically stored the parameters in the configuration database maintained internally within the energy conservation module framework. After the initialization phase KNOWME collected sensor data just as in the baseline. But before analyzing the sensor data also once every two minutes KNOWME called the MakeDecision API . The MakeDecision API returned the decision on whether to compute locally or to use remote computation for activity classification. The MakeDecision API determined position specific energy costs for data transmission with and without Gzip and decided whether to use local or remote computation. In addition the MakeDecision API automatically selected the minimum energy network interface in the energy profile when multiple access points were available. Based on the MakeDecision API s return value KNOWME performed local or remote computation. If remote computation was preferred KNOWME sent data using the SendData API which automatically selected data compression if needed and also sent the data using the minimum energy network interface as determined during the MakeDecision API call. KNOWME received predicted user activity from the server. Then it obtained position information by invoking the GetPosition API which returned position information in an energy efficient manner. The location aware activity information was stored on the mobile phone.

GPS sensor data was only collected once every 10 minutes while activity was classified once every two minutes. Hence only one in every five activity classifications had a potentially new GPS location.

Using the energy conservation module an implementation energy savings came from multiple optimizations First the energy conservation module skipped GPS sensing whenever the user has not moved noticeably. Second it dynamically decided whether to use local or remote computation based on the expected energy consumption costs. Third the energy conservation module selected the minimum energy network interface at any given location as long as a profile for that location existed. In the absence of prior profile information the energy conservation module spent some additional energy to collect and store the position dependent profile information.

The sampling rate for external sensors in KNOWME was currently not programmable. Hence the external sensor sampling rate was not optimized in the current KNOWME. The Symbian S60 does not allow user level access for selecting EDGE or 3 G network. Hence the EDGE network was not selected even when EDGE used less energy in some cases where the data packet size is small. The system always ended with 3 G during system operation whenever cellular network was selected.

Three scenarios of KNOWME operation may be compared 1 an energy conservation module based implementation of KNOWME 2 KNOWME remote that selected remote computation only with Wi Fi given priority over 3 G and 3 KNOWME local that selected local computation. The data was collected by running KNOWME on the E75 mobile phone using the three operational modes described above. Three users each running one of the three KNOWME versions moved through identical paths during deployment study. During the field trial the users moved through an environment where first only 3 G cellular connectivity and hence no Wi Fi connectivity was available. Then one Wi Fi access point and 3 G connectivity were available. Finally two Wi Fi access points and 3 G connectivity were available.

At minute the user entered into a new environment where a single Wi Fi access point was available the access point was detected by a Wi Fi scan done at the start of analysis function . Now KNOWME had five choices local computation remote computation using Wi Fi with and without Gzip and remote computation using 3 G with and without Gzip. KNOWME invoked the MakeDecision API since the user had entered a new location where no profiling information was available. The MakeDecision API then entered a new profile phase and sent data over 3 G and Wi Fi access points with and without compression to compute the energy cost. Even though the profiled energy cost of sending data over 3 G was computed already in the first hour the 3 G energy costs varied dynamically. Hence the MakeDecision API simply computed the profiling cost of 3 G based remote computation every time the user moved to a new location. Local computation cost was already known and hence no profiling information was gathered for local computation. The new profiling phase generated two power spikes as shown at minute and on the figure. At minute the energy conservation module had all the necessary information to select the best energy efficient operation point. It selected Wi Fi with Gzip compression. The power consumption for Wi Fi was slightly higher than local computation but a Wi Fi computation took a shorter amount of time. Hence the total energy cost of Wi Fi with Gzip was lower than all other available options. Hence KNOWME operated in this mode until minute .

At minute the user had entered into a new environment where two Wi Fi access points were available in addition to 3 G. In the experimental setup one of the two Wi Fi access points was set to have a lower available bandwidth. Since the user had entered a new location with no profiling information the energy conservation module entered a profiling phase. The new profiling phase generated three power spikes one at minute where energy conservation module was profiling using Wi Fi access point a second one at minute with Wi Fi access point and a third one at minute using 3 G. All three profiles compared the cost with and without compression. At minute the energy conservation module had all the necessary information to select the best energy efficient operation point. It selected Wi Fi access point with Gzip compression as the best option and the system then operated in that mode.

Two field studies were also conducted that each lasted 9 hours. In the first field study the user stayed in a 3 G only environment for one hour then moved to a 3 G plus one Wi Fi access point environment in the second hour then moved to 3 G two Wi Fi access points environment in the third hour. Then the user repeated the movement through these three environments for two additional times for a total of 9 hours.

The 9 hour study was repeated with a different environment where the user moved through an environment with different Wi Fi access points and 3 G network availability throughout the day. This was a fairly realistic environment at least in daily living with no assumptions regarding user mobility. The second set of three bars in show the energy consumption from this field study. When using the energy conservation module KNOWME consumed 20 less energy than remote only computation and 21 less energy than local only computation. Here the availability of Wi Fi for a large fraction of time during the day made remote computation perform almost as well as the local only computation. However the energy conservation module implementation still outperformed the local only or remote only choices. These improvements were achieved even with a strong baseline where remote only computation already switched between Wi Fi and 3 G.

The energy conservation module may be used in conjunction with a broad variety of mobile application such as crowd sourcing and health monitoring. These applications may require significant improvements in energy efficiency from every aspect of mobile computing sensing computation and communication. For instance the energy conservation module may be used in mobile devices that are deployed to assist in physical rehabilitation obesity monitoring and assisted living. The energy conservation module may also be used with wireless sensor networks such as operating in field.

One or more of the following references may provide details about certain of the components or process steps described herein 

The mobile communication device and the energy conservation module may include software e.g. one or more operating systems device drivers application programs and or communication programs . When software is included the software includes programming instructions and may include associated data and libraries. When included the programming instructions are configured to implement one or more algorithms that implement one or more of the functions of the device as recited herein. Each function that is performed by an algorithm also constitutes a description of the algorithm. The software may be stored on one or more non transitory tangible storage devices such as one or more hard disk drives CDs DVDs and or flash memories. The software may be in source code and or object code format. Associated data may be stored in any type of volatile and or non volatile memory.

The components steps features objects benefits and advantages that have been discussed are merely illustrative. None of them nor the discussions relating to them are intended to limit the scope of protection in any way. Numerous other embodiments are also contemplated. These include embodiments that have fewer additional and or different components steps features objects benefits and advantages. These also include embodiments in which the components and or steps are arranged and or ordered differently.

For example the entire energy conservation module may be implemented as a user level library that each application can selectively use in its compilation. In such a case the library does not have to be included as middleware on a phone. Rather each application can decide whether or not to use the library during its compilation process.

A request for data processing from one of the application programs such as a dynamic method call may require the use of state information to perform the request. The energy conservation module may be configured to determine the minimum portion of this state information that would need to be transferred to an external data processing system for the request to be performed by the external data processing system. The energy conservation module may be configured to make this minimum portion determination only once for each application program and to store the determination as metadata that is associated with each application program.

The energy conservation module may be configured to use the determined minimum portion of state information when determining whether performing a request that requires this state information is likely to consume the least amount of energy if substantially performed by the data processing system within the mobile communication device or by the external data processing system. If the energy conservation module determines that performance of the request with the minimum portion of state information is likely to consume the least amount of energy when substantially performed by the external data processing system the energy conservation module may be configured to only deliver that minimum portion of the state information to the outside data processing system along with the request.

The energy conservation module may be configured to perform this process recursively when a request that requires state information for processing invokes another request that also requires state information.

The energy conservation module may also be configured to receive from the external data processing system any updates to the state information that performance of the request s by the external data processing system results in and to update the state information in the mobile communication device accordingly.

Unless otherwise stated all measurements values ratings positions magnitudes sizes and other specifications that are set forth in this specification including in the claims that follow are approximate not exact. They are intended to have a reasonable range that is consistent with the functions to which they relate and with what is customary in the art to which they pertain.

All articles patents patent applications and other publications that have been cited in this disclosure are incorporated herein by reference.

The phrase means for when used in a claim is intended to and should be interpreted to embrace the corresponding structures and materials that have been described and their equivalents. Similarly the phrase step for when used in a claim is intended to and should be interpreted to embrace the corresponding acts that have been described and their equivalents. The absence of these phrases in a claim mean that the claim is not intended to and should not be interpreted to be limited to these corresponding structures materials or acts or to their equivalents.

The scope of protection is limited solely by the claims that now follow. That scope is intended and should be interpreted to be as broad as is consistent with the ordinary meaning of the language that is used in the claims when interpreted in light of this specification and the prosecution history that follows except where specific meanings have been set forth and to encompass all structural and functional equivalents.

Relational terms such as first and second and the like may be used solely to distinguish one entity or action from another without necessarily requiring or implying any actual relationship or order between them. The terms comprises comprising and any other variation thereof when used in connection with a list of elements in the specification or claims are intended to indicate that the list is not exclusive and that other elements may be included. Similarly an element preceded by an a or an an does not without further constraints preclude the existence of additional elements of the identical type.

None of the claims are intended to embrace subject matter that fails to satisfy the requirement of Sections 101 102 or 103 of the Patent Act nor should they be interpreted in such a way. Any unintended coverage of such subject matter is hereby disclaimed. Except as just stated in this paragraph nothing that has been stated or illustrated is intended or should be interpreted to cause a dedication of any component step feature object benefit advantage or equivalent to the public regardless of whether it is or is not recited in the claims.

The abstract is provided to help the reader quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition various features in the foregoing detailed description are grouped together in various embodiments to streamline the disclosure. This method of disclosure should not be interpreted as requiring claimed embodiments to require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the detailed description with each claim standing on its own as separately claimed subject matter.

