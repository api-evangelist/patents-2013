---

title: Mobile application cache based on extreme scale technology
abstract: Storing data from mobile devices may comprise receiving an asynchronous communication from a mobile device over a wireless network notifying that data was dropped in a synchronizing folder; computing a hash value associated with the data; determining based on the computed hash value, a partition of an object grid comprising a plurality of virtual machines; and storing the data on the partition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348853&OS=09348853&RS=09348853
owner: International Business Machines Corporation
number: 09348853
owner_city: Armonk
owner_country: US
publication_date: 20131024
---
This application is a continuation of U.S. Ser. No. 13 677 888 filed on Nov. 15 2012 the entire content and disclosure of which is incorporated herein by reference.

The present application relates generally to computers computer systems and data storage and more particularly to mobile application cache based on extreme scale technology.

A known method exchanges data between a plurality of compute nodes having Java Virtual Machines JVM . Each JVM includes a set of computer program instructions capable of executing a distributed Java application and each compute node includes wireless network adapters to exchange data between compute nodes wirelessly. Another known method provides an external storage system for a wireless device wherein the external storage system comprises a controlled distributed scalable virtual machine system for store data.

Yet another known method provides for downloading and updating data between a mobile device and distributed database. A checksum is used to determine whether the document has changed.

Generally wireless devices can store data to one or more virtual machines. In addition a web application may communicate with a storage device remotely.

A method for mobile application cache in one aspect may comprise receiving an asynchronous communication from a mobile device over a wireless network notifying that data was dropped in a synchronizing folder. The method may further comprise computing a hash value associated with the data. The method may also comprise determining based on the computed hash value a partition of an object grid comprising a plurality of virtual machines. The method may also comprise storing the data on the partition. In one aspect the receiving the asynchronous communication comprises receiving the name value pair in a queue.

A system for storing data from mobile devices in one aspect may comprise memory and a list of name value pairs stored on the memory. The system may also comprise a synchronization module operable to execute on the processor and to receive an event from a mobile device notifying that data was dropped in a synchronizing folder on the mobile device. The synchronization module may be further operable to copy payload data from the mobile device s event into the list of name value pairs. The system may also comprise an object grid module operable to compute a hash value of a name value pair to which the payload data was copied. The object grid module may be further operable to determine based on the computed hash value a partition of an object grid comprising a plurality of virtual machines and to store the payload data on the determined partition. The system may also comprise a queue module operable to detect whether the name value pair has changed. The queue module may be further operable to communicate the detected change to the mobile device.

A computer readable storage medium storing a program of instructions executable by a machine to perform one or more methods described herein also may be provided.

Further features as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. In the drawings like reference numbers indicate identical or functionally similar elements.

A methodology of the present disclosure in one embodiment builds a system wherein a large number of mobile devices can reliably cache data within a collection of computers called an Object Grid OG . is a diagram illustrating OG architecture. An OG is a sophisticated data cache. An OG is distinguished from other caches by its availability and extreme scalability. Applications on mobile devices use an OG to reliably save and retrieve data. Data is sent to an OG via the payload of an event. The OG stores this payload in the shards of a grid.

A grid is a collection of shards a shard is a container for storing data. Shards come in two flavors primary and replica. A replica is a copy of the primary. A primary and one or more of its replicas is called a partition e.g. . When an OG is initialized it determines the number of partitions to create. Once created the number of partitions is fixed. Data is stored in the shards assigned to these partitions. Data is mapped into partitions. The mapping is a hash on the data name e.g. shown at . The hash selects which partition to use. The most common hash is a modulo seeded with the number of defined partitions. The OG copies the respective data to the primary and secondary shards of the selected partition based on the hash . Shards reside in container Java Virtual Machines JVM s e.g. shown at .

The OG maps its partitions onto a set of container JVMs. A container JVM is a JVM that serves as a data store in a grid. For increased availability the OG puts the primary and replica shards of a partition on different JVMs and if possible different physical machines e.g. shown as different computers . In this way if one JVM fails its shards can be restored. For example if a replica shard is lost the primary shard is used to create another replica. If a primary shard is lost then its replica is promoted to be the primary and another replica is created from it. As before the primary and replica shards are always placed on separate container JVMs. To achieve failover for example the primary and replica are located on separate JVMs and more than likely separate nodes i.e. servers .

Partitions separate the mapping of shards to JVMs from the mapping of data to shards . This separation allows JVMs to be added or removed without disturbing the data to shards mapping or the number of partitions.

Container JVMs are managed by a Catalog Service CS . The CS runs on a JVM separate from the container JVMs. At a minimum an OG has one CS and one Grid. When a JVM is added to an OG it registers with the CS via a well known static address . The JVM gives the CS a reference to its container for the storing and retrieving of shards.

The OG concept in one embodiment of the present disclosure is extended to include an object that is a list of name value pairs logic to receive an event from a mobile device code to copy the payload from the mobile device s event into a list of name value pairs a mechanism that detects when a name value pair in a list has changed a facility that communicates changes back to the originating mobile device via sending the changed data back to the device in the payload of an event message and an API associated with each list for the purpose of allowing applications to access and modify the data in the lists.

A name value pair comprises a key and a value such as firstname john and lastname doe where firstname is the name and john is the value in that example and lastname is the name and doe is the value in that name value pair example.

Logic e.g. module to receive an event from a mobile device may be implemented in one embodiment with data synchronization mechanism such as those used in Dropbox . Such mechanism of the present disclosure in one embodiment provides a client device mechanism for storing the name value pair also referred to as key value or key value . Such mechanism may also have an instance running in the cloud or the like computing infrastructure where the server takes the data entry in the client device and puts it in a queue. Based upon the partition hashing of the key the data is assigned to a specific partition.

A code or logic to copy the payload from the mobile device s event into a list of name value pairs may utilize the Dropbox or the like synchronization mechanism. Other technologies that allow storing and synchronizing content between two or more endpoints may be utilized.

A facility communicates changes back to the originating mobile device via sending the changed data back to the device in the payload of an event message. In one embodiment of the present disclosure this facility is implemented as a queue. The queue may include a mechanism that actively polls the synchronization mechanism to determine if there have been changes. If there have been changes the methodology of the present disclosure determines the key that changed and starts the process of sending the changes back to the mobile device.

An API may be associated with each list for the purpose of allowing applications to access and modify the data in the lists. Such API may be implemented as part of a cloud instance that provides synchronization mechanism.

In one embodiment of the present disclosure one or more queues or like data structure may be utilized. When a list of name value pairs in the OG is modified the changes are sent to a queue for delivery back to the application e.g. mobile application associated with the list. Each queue has a profile that tells the OG how to process the queue. For example messages in the queue may have assigned priority or billing instructions or analytic triggers and so on. Further messages are sent back to the mobile device as they are processed or they remain in the queue until requested by the corresponding application or they are just purged from the queue.

A methodology of the present disclosure in one embodiment provides a highly available mobile device cache that can persist the cached changes back to enterprise application servers e.g. on a cloud infrastructure. In one aspect the client is driving all of the function. The client caches the content using ObjectGrid and then via the functionalities of ObjectGrid it is listened for on a server instance e.g. the cloud instance. This event is then received and put on the queue for further processing. In one embodiment there is no need to push cache from the server instance e.g. the cloud back to the device.

When an object on the mobile device is dropped onto a synchronizing folder the logic within that synchronizing folder uses introspection to determine if it includes a callback method to return data to the associated application on the mobile device . The callback can be a remote procedure call RPC or a RESTful command or a Short Message Service SMS address that the server uses to notify client applications that data is available for pickup from the synchronizing folder .

The methodology of the present disclosure extends the concept of an OG to include a synchronizing folder on a mobile device at least one OG receive queue at least one OG send queue and a profile e.g. for managing these queues. The synchronizing folder integrates the applications on a mobile device with an OG cache connected to a wireless network for the purpose of reliably storing and retrieving data in a highly available data store. A synchronizing folder is a software entity on a mobile device whereon data can be logically dropped and sent over a wireless network to an OG wherein the data is cached in the OG s partitions . An OG queue receives the data from a synchronizing folder uses the name given to the data to compute the associated hash code and corresponding partition address and saves the data within the primary and replica shards for that partition e.g. . A profile is used to determine the order in which items in the queue are saved the application of billing rules to each item the time to live for the associated data and the rules that determine if and when the saved data will be returned back to the synchronizing folder . A typical rule would be to return data when it has changed. Another might be to batch data changes and return them to the appropriate synchronizing folder as a group or to return the data after a given period of time. Additional or different rules may apply.

When data is returned to a synchronizing folder the synchronizing folder the logic associated with the synchronizing folder in turn sends the data to the application that originally dropped the respective data onto the synchronizing folder . The association is via a callback or other asynchronous means such as an SMS to notify the application about the data s availability.

An enhanced Dropbox concept connects mobile device applications to an OG which serves as a scalable data cache for the mobile device. The methodology of the present disclosure in one embodiment provides for building a simple architecture for reliably saving and retrieving data from highly available storage devices created by an OG connected to a wireless network. In one embodiment the data is sent to and received from the OG via asynchronous events. It is thus ideal for the mobile environment which may fade in and out of service frequently. It also scales to millions of mobile devices with little difficulty and provides the means by which data is stored in and synchronized with external sources. The queues used to receive events from and to send events to applications running in mobile devices provide buffering and elasticity.

In another aspect a methodology of the present disclosure may provide an association of an application to the data saved in the shards of an Object Grid OG . is an architectural diagram illustrating system components that provide the association of application to data saved in the shards of an OG in one embodiment of the present disclosure. In the present disclosure in one embodiment shards e.g. are mapped to JVMs e.g. and applications e.g. within the JVMs subscribe to the data in the shards. A Java Virtual Machine JVM may host one or more containers and each container can host multiple shards. A JVM therefore contains the applications that are associated with the data in the JVMs shards.

An application within a JVM can receive and modify shard data or it can pass the data to an external service for further processing. Typical external services are SAP Twitter Amazon Facebook and so on. For example consider a service like Twitter . A mobile client can save data in a shard e.g. where an application exists that connects to Twitter . This application bridges the gap between the data in the shard and the protocol needed to transfer that data to Twitter . If a response is generated by Twitter or if unsolicited data is received from Twitter that data populates the shard and in doing so causes the changed data in the shard to be returned to the application in the associated mobile client . OG architecture is further described in https www.ibm.com developerworks wikis display objectgridprog ObjectGrid architecture blank spaces are inserted in the URL so that the text does not automatically convert to a hypertext link disclosure of which is incorporated herein by reference.

In one aspect a methodology of the present disclosure may add to the above described enhanced Dropbox like concept that connects mobile device applications to an OG the scaffolding necessary to connect the cached data in the OG to external services. An application e.g. in the JVM e.g. of an OG can 1 Subscribe to the data in a shard 2 Fetch the subscribed to data from a shard 3 Process the fetched data 4 Transfer the data to an external service 5 Receive data back from a service 6 Update the subscribed data within a shard and 7 send the changed data in the shard back to the originating mobile application.

In one embodiment the connection between a mobile application and its shard data is always asynchronous while the connection between shard data and external services can be either synchronous or asynchronous depending on the requirements of the external service. The methodology of the present disclosure in one embodiment allows a provider of application to enrich the data within the grid with content from external sources. The result is a highly scalable and highly available Mobile Application Platform MAP for applications to provide services to mobile devices.

While the above descriptions referred to Dropbox it should be noted that Dropbox product is not required in implementing methodologies of the present disclosure. Rather similar synchronization methods or other file hosting data storing and synchronization methods may be utilized e.g. for seamless syncing of data between a device e.g. a mobile device and a server e.g. cloud instance and distributed storage mechanism of data files or documents. In the present disclosure the notion of such mechanism is extended to include a queue that is able to listen for events e.g. cache entry modifications and then react to these events to publish the key value name value pairs to the ObjectGrid which is responsible for making these cache entries highly available via the partition and sharding design models.

The computer system may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. The computer system may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

The components of computer system may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor . The processor may include an OG module that performs the methods described herein. The module may be programmed into the integrated circuits of the processor or loaded from memory storage device or network or combinations thereof.

Bus may represent one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system may include a variety of computer system readable media. Such media may be any available media that is accessible by computer system and it may include both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory or others. Computer system may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media e.g. a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces.

Computer system may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system and or any devices e.g. network card modem etc. that enable computer system to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces .

Still yet computer system can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system. Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages a scripting language such as Perl VBS or similar languages and or functional languages such as Lisp and ML and logic oriented languages such as Prolog. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The computer program product may comprise all the respective features enabling the implementation of the methodology described herein and which when loaded in a computer system is able to carry out the methods. Computer program software program program or software in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and or b reproduction in a different material form.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements if any in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Various aspects of the present disclosure may be embodied as a program software or computer instructions embodied in a computer or machine usable or readable medium which causes the computer or machine to perform the steps of the method when executed on the computer processor and or machine. A program storage device readable by a machine tangibly embodying a program of instructions executable by the machine to perform various functionalities and methods described in the present disclosure is also provided.

The system and method of the present disclosure may be implemented and run on a general purpose computer or special purpose computer system. The terms computer system and computer network as may be used in the present application may include a variety of combinations of fixed and or portable computer hardware software peripherals and storage devices. The computer system may include a plurality of individual components that are networked or otherwise linked to perform collaboratively or may include one or more stand alone components. The hardware and software components of the computer system of the present application may include and may be included within fixed and portable devices such as desktop laptop and or server. A module may be a component of a device software program or system that implements some functionality which can be embodied as software hardware firmware electronic circuitry or etc.

The embodiments described above are illustrative examples and it should not be construed that the present invention is limited to these particular embodiments. Thus various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims.

