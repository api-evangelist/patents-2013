---

title: Sharing information between tenants of a multi-tenant database
abstract: In a method, system, and computer-readable medium having instructions for sharing information between tenants of a multi-tenant database, information is received on a connection between a first tenant of a multi-tenant database and a second tenant and the connection has information on a scope of data from the first tenant shared with the second tenant, data is allowed for a record of the first tenant to be accessible to the second tenant in accordance with the connection, information is received on a file related to the record of the first tenant, and data is allowed from the file to be accessible to the second tenant in accordance with the connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856066&OS=08856066&RS=08856066
owner: salesforce.com, inc.
number: 08856066
owner_city: San Francisco
owner_country: US
publication_date: 20130321
---
This application is a continuation of U.S. application Ser. No. 12 885 266 filed Sep. 17 2010 which claims the benefit of U.S. Provisional Patent Application 61 351 642 filed Jun. 4 2010 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request. The secure retrieval of accurate information and subsequent delivery of this information to the user system has been and continues to be a goal of administrators of database systems.

Unfortunately conventional database approaches might limit retrieval of information from the database system to users that have authorization to access data in the particular database system. Conventional database systems do not provide a mechanism for sharing data in a particular database system to users that do not have authorization for the particular database system. Accordingly it is desirable to provide techniques enabling secure sharing of information from the database system of the database system.

In accordance with embodiments there are provided mechanisms and methods for sharing information between tenants in a multi tenant database system.

In an embodiment and by way of example a method for sharing information between tenants in a multi tenant database system is provided. In a method system and computer readable medium having instructions for sharing information between tenants of a multi tenant database information is received on a connection between a first tenant of a multi tenant database and a second tenant and the connection has information on a scope of data from the first tenant shared with the second tenant data is allowed for a record of the first tenant to be accessible to the second tenant in accordance with the connection information is received on a file related to the record of the first tenant and data is allowed from the file to be accessible to the second tenant in accordance with the connection.

While one or more implementations and techniques are described with reference to an embodiment in which sharing information between tenants in a multi tenant database system environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the one or more implementations and techniques are not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. The one or more implementations encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments do not necessarily address any of these deficiencies. In other words different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Systems computer readable mediums and methods are provided for sharing information between tenants in a multi tenant database. Tenant data typically is arranged in a multi tenant database such that data of one tenant is kept logically separate from that of other tenants so one tenant does not have access to another tenant s data unless such data is expressly shared. It may be desirable for one or more tenants of a multi tenant database to share data or information with other tenants and or one or more users of another database system. In one or more embodiments users of a first tenant can specify the data to be shared with one or more users at a second tenant in a multi tenant database.

The tenant may have a connection with one or more other tenants that serves a contract to allow sharing of information or data between tenants. The connection may indicate the scope of the data shared between one or more users of a first and a second tenant. Tenants and or users of a multi tenant database system may expressly give permission to share data with users of another tenant. For example a user of a first tenant database system may give permission to provide a set of related data to one or more users for other tenants in a multi tenant database system. In another example a user of a first tenant may specify to share a record with a user of a second tenant and all related data to the shared record. Continuing with the example the parent and child records of the shared record of the first tenant may be shared with the second tenant.

Data related or associated with a shared record may be shared between tenants of a multi tenant database system. In one or more embodiments a file from a first tenant may be securely shared with a second tenant. The file may be associated with a shared record for a first tenant and the file may be shared with the second tenant in accordance with the connection between the first and second tenant.

As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers tenants. For example a given application server may simultaneously process requests for a great number of customers tenants and a given database table may store rows for a potentially much greater number of customers.

Next systems computer readable mediums with instructions and methods for sharing information between tenants in a multi tenant database will be described with reference to example embodiments. In the following examples one or more implementations are illustrated for optimizing queries. Clearly in alternate implementations the illustrated processes and process steps may be combined into fewer steps divided into more steps and or performed in a different sequence.

The tenant may have data stored in a multi tenant database that is logically separate from other tenants of the multi tenant database. In a preferred embodiment a tenant may have a tenant id number e.g. a key to identify the tenant data for retrieval and entry into the multi tenant database. For example a record for a tenant e.g. a Case a Note etc. may have a tenant id associated with the record to indicate that the record is for a tenant of multi tenant database system.

Upon entry of the received data a check may be performed to determine whether the received data may be shared with one or more tenants. For example a check may be performed by accessing one or more database tables to determine if a record of a first tenant is shared with a second tenant. Continuing with the example a shared record may have attribute e.g. a column in the database table for the record that indicates the record may be shared with other tenants.

In an embodiment the sharing of data may be perceived as a push technology. For example upon receipt of the new data the server may push the data to the second tenant. In another embodiment the sharing of data may be perceived as pull technology and the server may await a specific request to send data to a second tenant. For example the second tenant may request the new data for the first tenant from the server.

In one or more embodiments a trigger may be used to perform a check upon entry of the data in a database table. The trigger may be a database trigger with functionality provided by a database implementation and or the trigger may be a method function provided by the tenant and or the on demand database service. A trigger may cause a check to be performed to determine whether one or more tenants have a connection e.g. an agreement to share data upon entry of data to a database table.

Information may be received on a connection between a first tenant and a second tenant . The connection may indicate whether the received data may be shared with a second tenant. The connection may indicate the scope of the data shared with the second tenant including but not limited to the hierarchical relationships to shared data e.g. a shared record that are permitted to be shared and the public records related to the shared record. For example the connection may provide that entry of a Case record should cause at least a portion of related records to the Case e.g. Account Notes Attachments other Cases Comments etc to be shared with the second tenant and other related records such as Opportunities and Leads may not be shared. Continuing with the example a Case record may indicate a problem with a particular product and related Cases and Comments to the Case record may indicate the status of the handling of the problem by a reseller e.g. a first tenant and a supplier e.g. a second tenant .

In another example the Case record may have related public Case records from a third tenant that may be shared with the second tenant. Continuing with the example the Case record may indicate a particular problem with an Account and or a Product that may be shared among one or more tenants.

The connection may be established after notification to both tenants and authentication that the notification on desire to connect accept a connection came from the respective tenants. The connection may be managed to specify the tenants that share data and the scope of the shared data. An implementation of a connection is described in U.S. patent application Ser. No. 12 145 325 entitled Sharing Data Between Subscribers of a Multi Tenant Database Service filed on Jun. 24 2008 which is incorporated herein by reference and U.S. patent application Ser. No. 12 437 459 entitled Sharing Tenant Information Utilizing a Multi Tenant On Demand Database Service filed on May 7 2009 which is incorporated herein by reference.

Data for the record of the first tenant may be allowed to be accessible to the second tenant . The data for the record of the first tenant may be sent to the second tenant in accordance with the connection. For example the received data for the record may be sent to the second tenant for entry into a record for a database table for the second tenant. A new record for a table at the second tenant may be created and or an existing record of the second tenant may be used for the received data.

In a preferred embodiment the received data designated as data to share in accordance with the connection for the tenants may be placed in a queue for processing by a process that executes in the background for the on demand multi tenant database service. In one or more embodiments the queue may be implemented as a table with fleeting records a list and or any other data structure. A notification may be placed on the queue with the received data a record for the second and or any other type of method for communicating to share the received data.

Information may be received on a file related to the record of the first tenant . The received data may be a file attachment and or data for a record associated with a file attachment. For example the received data may be for a Case that has an attribute with a file name and file path for an attachment at the first tenant. In another example the Case may have a related Comment e.g. a child record of a Case record a Comment of a parent Case record to the Case etc. with a file attachment.

In another example the filepath filename may be an attribute column value for a related record to the record with the shared data. Continuing with the example the file may be a file with a history of correspondence between a reseller and a customer and the file may be shared when the Case involving the customer is shared with another tenant. The record that may be shared between tenants may have columns that indicate the related records and or files.

The connection may indicate if the file may be shared with the second tenant. For example the attachment file may be viewed as a child record to a Case e.g. a shared record and the connection for the Case record may indicate that all related records to the Case may be shared with the second tenant. In another example the connection may specify if file attachments may be shared between tenants for the connection.

The data from the file may be allowed to be accessible to the second tenant . The data from the file may be made accessible to the second tenant with the following implementations including but not limited to providing a filepath filename copying the contents of the file to a record providing a resource locator for accessing the file sending a notification with the file to one or more users and or any other method for sharing the file with a second tenant. In one or more embodiments a record with the contents of the file may be placed on a queue for processing by a background process for the on demand multi tenant database service. Continuing with the example the new record with the contents of the file may be sent to the second tenant by the background process to be entered in to the database for the second tenant. The data from the file may be copied to a record for entry into a database table at the second tenant. The file may be cleaned or stripped of any harmful code before being sent to the second tenant. In another embodiment the uniform resource locator URL may be provided to the second tenant to access the file as a column value in a database table.

In an embodiment the file may provide information on one or more records in a database table for the first tenant. For example the file that is shared may be a WSDL file describing database tables and shared columns of database tables of a first tenant that may be shared with a second tenant and the WSDL may be used to replicate a hierarchy at the first tenant for the shared records at the second tenant. In another example the file may provide the hierarchical relationship for related records at the first tenant and or mapping information between the tenants.

In one or more embodiments a user of the second tenant may specify whether to accept the record with the file attachment. For example the user of the second tenant may indicate that all shared records and file attachments may be entered automatically in the database for the second tenant in a similar hierarchical structure to the first tenant. The user of the second tenant may specify exactly how the shared records and attachments may map to the database tables of the second tenant. In another embodiment the user of the second tenant may assign their own assignment rules and or determine where the shared record and or file attachment may fit into their database system upon acceptance of the shared record and or file attachment.

In a preferred embodiment the Notes may be child records of other records including but not limited to Leads Opportunities Accounts Contacts Products Cases and Custom entities for a tenant. By designating the Note as Private the Note may not be shared with the second tenant even though the connection between the tenants may indicate that Notes may be shared. One or more attributes of the Note record at the first tenant may not be shared and or accessible to the second tenant. In an embodiment a Note may be designated to Share with Connections with the user interface and the Note may then be shared with a tenant in accordance with the connection for the first and second tenant.

In one or more embodiments the user may need to explicitly indicate that the record may be shared with the second tenant. For example a parent record of the Note record may be shared with the second tenant but the Note record may have an attribute that indicates the record may not be shared with connections and the Note may not be shared. In a preferred embodiment Notes may be shared with a second tenant when the parent record is shared Notes are designated to be shared for the connection and the Note is not private.

In a preferred embodiment the Attachment is shared as a child record when the parent record is shared. The File Name may associate a file name and a file path e.g. an attribute or field in an Attachment record with the Attachment record. In one or more embodiments the file contents are shared with the second tenant and the filename file path at the first tenant may not be shared with the second tenant. In another embodiment the filename file path may be a URL and publicly accessible so the filename file path attribute of a shared record may be shared with the second tenant.

In another example a user for a first tenant may select Forward Child Records and the child record for the shared record may be shared. For example if a Case record is shared then the child records for the Case e.g. Comments other Cases etc. may be shared but the parent record to the Case e.g. Account may not be shared.

A user may specify whether to Send Email Notifications . For example an email notification may be sent to users of a first tenant and or users of a second tenant to indicate that a record is shared and or going to be shared. In an embodiment the email notification may allow the user to decide whether to proceed with sharing a record and or related records to a shared record.

In one or more embodiments the data received may be a file and or information on a file location associated with a record. The file may be associated with a record as an attribute of the record e.g. a file name as an attribute and or the contents of the file may be inserted into a related record to the record e.g. a text field of a child record .

In another embodiment the data received may be for a record that is associated with a file e.g. a record related to an Attachment a record related to a record with a file . The record associated with the file attachment may be shared and the file attachment may be shared with the second tenant in accordance with the connection between the tenants.

Information may be retrieved on a connection between the first tenant and a second tenant . A connection and or agreement may be reached between tenants in a multi tenant database system to share at least a portion of data from the first tenant. The connection may be established by sending a notification requesting to share and receiving a response that permits sharing of data between the tenants. The user sending the notification and the user sending the response regarding establishing a connection between the tenants may be authenticated before data is shared between the tenants. An implementation of a connection is described in U.S. patent application Ser. No. 12 145 325 entitled Sharing Data Between Subscribers of a Multi Tenant Database Service filed on Jun. 24 2008 which is incorporated herein by reference and U.S. patent application Ser. No. 12 437 459 entitled Sharing Tenant Information Utilizing a Multi Tenant On Demand Database Service filed on May 7 2009 which is incorporated herein by reference. The connection may be viewed as a metadata contractual agreement between the tenants.

A determination may be made as to whether the data entered involves a shared record . The tenants may specify the shared data that may be replicated and synchronized between the tenants with the connection. For example a first tenant may specify that all data related to a particular Account record may be shared between the tenants. In another example the first tenant may indicate that a Case record and all related records e.g. child and parent records for the case may be shared with the second tenant. The first tenant may share all records and or a portion of one or more records for the first tenant.

In an embodiment a user may utilize a user interface such as illustrated in to associate a connection with a record. By associating the record with a connection the record may be a shared record between the tenants. As illustrated in the scope of sharing for a particular shared record and related records of the shared may be specified for the connection between the tenants on a record basis. Those skilled in the art will recognize that the scope of sharing may be applied for one or more shared records with the interface illustrated in and or a similar interface.

The entry of the data into the database by a tenant may trigger sharing of the data with another tenant. For example a trigger may be written to ensure that the data is replicated and or synchronized for another tenant. An example of pseudocode for a trigger is as follows 

In the example of the pseudocode for a trigger upon entry of new data to a shared record in the database for a first tenant a new record may be created in accordance with the connection between the tenants. The new record may have an id for the connection e.g. newrecord.ConnectionId the first tenant record id newrecord.LocalRecordId and indicate an entity type for the record e.g. newrecord.RelatedRecords Case . The newrecord in the example may be a Case entity type. In a preferred embodiment a Case entity type may be available as both a parent and or a child record for related records. For example an Account record may have a child Case record and the Case record may itself have a child Case record.

If the data entered does not involve shared data in accordance with the connection then the entered data may not be shared. Alternatively if the data does involve shared data then mapping information for the first tenant and second tenant may be retrieved .

Continuing with the attributes columns of the shared record of a first tenant may be mapped to columns for a record at the second tenant . A mapping table may be used to map the columns of a record for the first tenant to columns of a record for the second tenant. For example the second tenant record that is shared with the first tenant record may have a column with a foreign key for the corresponding first tenant record. In another example the first tenant may have a column that is a varchar that is a different size than the respective column of the shared record in the second tenant database and the mapping table may keep information on the different types and sizes of the columns for the tenants to ensure that the information is replicated and synchronized properly.

The mapping table may be used as a guide for creating new records and or adding to existing records at the second tenant to replicate the data. For example the mapping table may be used to create a new shared record for the second tenant and the permitted shared information from the table for the shared record at the first tenant may be assigned to columns of a record for a table at the second tenant.

The data for the shared record may be sent to the second tenant . A new record or an existing record at the second tenant may be populated with the received data at the first tenant. In one or more embodiments a notice of a request to replicate and or synchronize the received data at the first tenant to the second tenant may be placed on a queue. A background process for the on demand database service may process the notices on the queue nearly instantaneously after placement on the queue.

Embodiments of the notice may include but are not limited to an instance of a new record for the second tenant with the received data a data structure with the received data one or more keys for the first tenant record being replicated or synchronized and or the second tenant record and or any other information to communicate the need to replicate and or synchronize data. The queue may have implementations including but not limited to a table a list and or any other data structure for processing notices to process the received data. In a preferred embodiment the queue may be a table with fleeting records that are removed as the records for the replicated synchronized data is processed.

Next a determination is made as to whether the received data for the shared record includes a file attachment . For example a file may be associated with the shared record with a file name and file path as an attribute column value for the shared record. If there is no attachment associated with the shared record then a determination may be made as to whether the shared record has a relationship to another record . Alternatively if the shared record includes an attachment then the data from the attachment may be sent to the second tenant .

The data from the attachment may be copied and placed in a record for the shared tenant. Similar to the data for the shared record a notice may be placed on the queue for the data of the attachment to be replicated and or synchronized at the second tenant. Alternatively the file itself may be copied and shared with the second tenant.

The attachment associated with the record at the first tenant may be associated with a corresponding record at the second tenant. In a preferred embodiment the contents of the file may be placed in a new record and the new record may associated with the shared record for the second tenant as a child record.

The connection for the tenants may indicate whether the shared data may be edited at both the first tenant and the second tenant after it has been shared. For example the first tenant may retain write access rights to the shared records and may only permit the second tenant to read the shared data. Alternatively the second tenant may be permitted to write to the shared data and associate records to the shared data. For example second tenant may be able to associate Notes and or file attachments to a Case that is shared.

A determination may be made as to whether the shared data has related records . If there are no related records then processing for the entered shared data may end. Alternatively if there are related records then a notification may be sent to the first tenant . The notification may be sent to the first tenant to request to share the related record and or indicate that the related record is shared with the second tenant . Next connection information for the first and second tenant may be retrieved . If the connection does not indicate that the related records may be shared then a notification may be sent to the first tenant and or the second tenant to allow for sharing of the related records for the shared data.

In an embodiment the history of sharing for a Case and the assignment of the Case to connections may be displayed on a user interface for each individual Case and or Case Comment user interface. For example Case Comments e.g. 1 0001 Widget Order Correction Comment related to the Case e.g. Case may be displayed with the Case Comment Entry interface and the status of the Case Comment e.g. Shared with Connection may be displayed. The Case Comment user interface may allow for Stop Sharing the Case and or Case Comments with a connection e.g. Connection for the first tenant.

The Case Comment user interface may allow a user to Forward Case and individually assign a connection to a case to share the record. The user may be able to manage the connections for the particular case and assign the case to one or more connections for forwarding the case to a connection. In an embodiment the connections may be managed for the Case with a user interface illustrated in .

In an embodiment a Note or Attachment may be associated with the Case. For example a Note or Attachment may be assigned as related record to a Case e.g. a child record of a Case . The user may use an interface as illustrated in to input a Note or Attachment for a related Case. The Note or Attachment from a first tenant may then be forward with a Case to a second tenant in accordance with a connection if the user selects to forward related records or child records of the Case.

In another embodiment the second tenant may select to accept each record as it is received. allows a user of the second tenant to assign relationships to other records assign owners and or assign the forwarded shared record to a connection. illustrates an example of assigning relationships and owners to Cases by the second tenant. When a second tenant prefers to accept each record individually then the user may select how the record is related records at their database. For example a Contact or any other user may be assigned as an owner of the Case. In another embodiment a case may have an assignment rule that associates the case with a connection. The case may be forwarded to one or more tenants identified for a connection. Related records may be assigned to the Case such as but not limited to Accounts Contacts Assets and or a user.

Although examples may be shown referencing specific records e.g. Cases Comments etc. those with skill in the art will recognize that the implementations illustrated in the examples may be used for any type of database record or data that is to be shared.

Case Management may provide the ability to share entity data types such as Cases Comments Assets and Attachments. An entity may be a table for any type of record or collection of data. A record may be designated as connected between a first tenant and a second tenant. A Case may be related to another record. Cases may be shared e.g. forwarded individually in conjunction with other cases e.g. en masse and or in conjunction with a related record e.g. a child parent or other hierarchical relationship with another record such as an Account a Contact a Product or any other type of entity record in which the case may be related . Optionally an application programming interface API and or user interface may include but is not limited publish fields subscribe fields templates publish object field selection case history indication of connections a case number field e.g. a field generated when the case is created and or a forwarding field. For example a Case Number may be a read only field that may be generated when the case is created. Based on an API definition an example of behavior for a Case Number field may be a Publish Field should be able to publish the Case Number b Subscribe Field cannot subscribe to Case Number though the customer may map the connections Case Number to a Text field 80 and or c the Case Number may be an editable field.

Cases may be shared in ways including but not limited to when a case is a member of the parent record e.g. Account Contact individually or en masse using the Forward to Connections link on the Case list view. When sharing a case an email notification may optionally be sent to one or more users. For example if a customer shares a case with an email notification a connection owner in the partner s organization may receive the email. A partner owner may be one or more individuals users that receive information on the connection between a first and second tenant. In another example if a case is shared as a child of another record and the Send Notification Email option is selected then the notification may be sent to the Case Owner in a subscriber s user s organization. Optionally the record owner of a first tenant may be provided a notification when a record is shared with a second tenant. When sharing a case once the case is accepted all Public comments on the case at the first tenant may also be shared with the second tenant. Public comments may be provided for the various methods of sharing cases e.g. manual automated queue assignment . For example case forwarding stop sharing may be managed with the API e.g. using a PartnerNetworkRecordConnection table .

Forward Cases as Child of Another Record e.g. Account Contact Product and any Other Object where the Case is a Related List 

Cases may be forwarded with a related list and or in accordance with a hierarchical relationship. Although examples are provided of forwarding with a related list and hierarchical relationship those skilled in the art will recognize other relationships that may allow for forwarding of cases. Users may indicate relationships hierarchical relationships connections with the use of a user interface. For example if a case is shared as a parent and if the subscriber has not selected the Auto Accept option then the subscriber may accept the Case using the Cases from Connections list view. This view may include but is not limited to the following fields Connection Name Sent Date Subject Case Number Account Name Contact Name Priority Case Status Asset Name Parent Record Name and or Case Type. Continuing with the example a Parent Record Name field may be set if the Case is shared as a child of another record and is populated with the name of the parent record including type of object e.g. Account Acme . A customer may create multiple object views using the fields above and assign the same views to multiple internal users using a role assignment.

In another example case reports may be created. Using such reports customers may view which cases have been shared and updated by a connection. Case History and Case reports may have an additional section for Connections e.g. Connection and Connection History tables . Validation rules may be utilized for sharing between connections. For example a Customer can use Received Connection Name ID along with Current User Alias contains pnet to ignore validation rules e.g. when the case is shared with a connection same as other objects . Optionally a customer can use Received Connection Name and Current User contains pnet to run workflow rules e.g. rules that are the same with other objects . List views may be created. For example Received Connection Name and Sent Connection Name are available to create filter list views to show all cases shared with one or more connections. Assignment rules may be used to determine case receipt. For example when a case is assigned to a queue where the connection is a member then that connection may receive the case. Escalation rules may be applied to determine how cases are shared. For example when a case is inserted updated and is assigned to a queue where a connection is a member then the connection should receive the case. The API may provide the ability for customers to run triggers on cases using database tables e.g. PartnerNetworkConnection and PartnerNetworkRecordConnection tables .

Comments may be associated related connected to a case and shared accordingly. For example comments may be shared if designated a child of a case. Comments may be considered Public e.g. available to both internal and external users and Private e.g. only available to internal users . Comments may have publish and subscribe fields and may optionally use templates. General Forward Stop Sharing rules may be created and applied with comments. In an example when the case is shared only public comments are forwarded if the Comments object is subscribed by the target connection. If a Private or new comment on a shared case is marked Public then the comment may automatically be shared with all the connections on the parent case if the connections have subscribed to the Comments object.

A stop may be placed on sharing comments. If a comment has already been shared then the ways to stop sharing may include but are not limited to the following steps a If sharing is terminated on the case with a specific connection then an implementation may stop sharing any comments on the case with that specific connection. This stop may not impact sharing with other active connections on the case. b cases and or comments object that are not published subscribed to may automatically terminate sharing on the comments c if a comment that is shared is marked Private then sharing may be terminated with all the connections automatically. Public comments may be forwarded with cases if Comments have been published subscribed with the connection.

Cases with Comments reports may be modified to include Connection Histories and Connections table. Workflow rules may be used to determine sharing of comments.

Notes and Attachments may be shared between tenants in a multi tenant database system. Notes Attachments may be shared as a child of other supported objects including but not limited to the following Leads Opportunities Accounts Contacts Products Cases and Custom Objects. Optionally an application programming interface API and or user interface may include but is not limited publish fields subscribe fields templates publish object field selection case history indication of connections a case number field e.g. a field generated when the case is created and or a forwarding field. Public Notes and Attachments may be shared with connections with a parent record if the connection has subscribed to Notes and Attachments. User interfaces may have checkbox fields for attachments such as a Share with Connections checkbox. The attachment may be visible on edit and detail screen visible if a parent record is shared visible if attachment public and the user is associated with an organization for which the attachment is visible.

In an example the steps to share Notes and Attachments include but are not limited to the following a when an Attachment is created by default it is Public e.g. the Private option is unchecked b the new attachment may not be shared even if the parent has been shared c the user may edit the attachment and check the Share with Connections option to enable sharing. In another example in the target organization the attachment will be marked Public and Share with Connections true to enable sharing.

Notes may be created by default as Private e.g. the Public option is unchecked which means that if the parent has been shared with one or more connections then the Notes may not be shared unless the note is made Public. For a private Note Attachment if the Private option is unchecked e.g. now public then the Note may automatically be shared if subscribed to by the connection e.g. and parent is shared . In an example if the Private option is unchecked e.g. now public and the Share with Connections option is checked then the attachment may automatically be shared if subscribed to by the connection and parent is shared . Sharing Public Notes Attachments may be designated via api or using queues. Child Public Notes Attachments may be shared when sharing parent record. Public notes may automatically be inserted into target organization. Attachments may be shared if the Share with Connections checkbox is marked true on all Public attachments.

Steps to stop sharing Notes Attachments may include but are not limited to the following a if the Private option is selected then sharing must be terminated automatically with all connections. The Share with Connections checkbox may be set to false when the Attachment is marked private b if the Share with Connections checkbox is unchecked on a Public shared attachment then sharing may be terminated immediately with the target organization. If the Public option is unchecked for notes then sharing may be terminated automatically with all connections. If the Note Attachment is deleted then sharing may be terminated automatically with all connections. For custom objects if the Note and Attachment option is not selected on the subscribing organization then the Public Note Attachment may not be shared. If sharing on the parent record is terminated either with one or more connections then sharing on the Note Attachment may also be terminated. If a Note Attachment is Unpublished and Unsubscribed then sharing may be terminated automatically.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned co pending U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

