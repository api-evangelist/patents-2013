---

title: Return to sender
abstract: In some implementations, a return to sender option can be invoked from within a file editing application when a user has edited a file received as a message attachment. The user can select a file attached to a message from within a messaging application. A file editor can be invoked to open and edit the file. The user can select a return to sender option from within the file editor. In response to the selection of the return to sender option, the edited file can be automatically saved, a reply message can be automatically generated and the edited file can be automatically attached to the reply message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09575635&OS=09575635&RS=09575635
owner: Apple Inc.
number: 09575635
owner_city: Cupertino
owner_country: US
publication_date: 20130312
---
This application is a non provisional of and claims priority to U.S. Provisional Patent Application No. 61 749 136 filed on Jan. 4 2013 the entire contents of which are hereby incorporated by reference.

Electronic messaging applications e.g. email instant messaging text messaging applications etc. on computing devices often allow a user to receive files as attachments to messages from users of other devices. Sometimes the receiving user needs to edit and return a file attachment to the sending user. The process of opening editing saving and attaching the file attachment to a reply message can be a tedious and time consuming process.

In some implementations a return to sender option can be invoked from within a file editing application when a user has edited a file received as a message attachment. The user can select a file attached to a message from within a messaging application. A file editor can be invoked to open and edit the file. The user can select a return to sender option from within the file editor. In response to the selection of the return to sender option the edited file can be automatically saved a reply message can be automatically generated and the edited file can be automatically attached to the reply message.

Particular implementations provide at least the following advantages The receiving user can quickly and easily return an edited version of a file attachment to the sender of the file attachment. The receiving user is not required to navigate a file system to return the edited file to the sending user. The process of saving an edited file generating a reply message and attaching the edited file to the reply message is performed in response to a single user input thereby simplifying the process for the user and improving the user experience.

Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features aspects and potential advantages will be apparent from the description and drawings and from the claims.

This disclosure describes various Graphical User Interfaces GUIs for implementing various features processes or workflows. These GUIs can be presented on a variety of electronic devices including but not limited to laptop computers desktop computers computer terminals television systems tablet computers e book readers and smart phones. One or more of these electronic devices can include a touch sensitive surface. The touch sensitive surface can process multiple simultaneous points of input including processing data related to the pressure degree or position of each point of input. Such processing can facilitate gestures with multiple fingers including pinching and swiping.

When the disclosure refers to select or selecting user interface elements in a GUI these terms are understood to include clicking or hovering with a mouse or other input device over a user interface element or touching tapping or gesturing with one or more fingers or stylus on a user interface element. User interface elements can be virtual buttons menus selectors switches sliders scrubbers knobs thumbnails links icons radial buttons checkboxes and any other mechanism for receiving input from or providing feedback to a user.

At step the user can select the email attachment. For example the receiving user can open an email application on the computing device to view an email received from the sending user. The email can include a file attachment that the receiving user wishes to edit and return to the sending user. The receiving user can select the file attachment in order to view the file attachment.

At step the selected file attachment can be opened in a file editor. For example the user can select an option or perform an input to the email application to open the selected file attachment in a file editing application of the computing device. A file editor e.g. text editing application image editing application presentation editing application etc. can be invoked to display and edit the file attachment. When the file editor is invoked for the selected file attachment the contents of the file attachment can be displayed in the file editor application. Sometimes a copy of the file attachment can be displayed in the file editor application for editing.

At step the receiving user can edit the file attachment displayed in the file editing application. For example the user can add and or remove text images audio video or other content to and or from the file attachment or copy thereof.

At step the receiving user can provide input to save the edited file attachment. For example the user can select a menu item or graphical object to save the edited file attachment. The user can be prompted to select a file system location where the edited file attachment should be saved. The edited file attachment can then be saved e.g. stored in the file system of the computing device.

At step the user can provide input to generate a reply email. For example the receiving user can interact or provide input to the email application to generate a reply email to the email sent by the sending user.

At step the user can select to attach a file to the reply email. For example the user can select an option in the email application to attach a file to the reply email.

At step the user can navigate the files system of the computing device to locate the edited file attachment. For example when the attach file option is selected in the email application the email application can present a window that allows the user to browse the file system of the computing device to locate the edited file attachment. Once the edited file attachment is located often after traversing several directories of the file system the receiving user can select and attach the edited file attachment to the reply email.

At step the user can send the reply email with the edited file attachment. For example the user can select a menu item or other graphical object to cause the email application to transmit the reply email with edited file attachment back to the sending user.

As readily understood from reviewing the steps of process the receiving user must perform many steps that waste time and require much effort in order for the receiving user to return an edited file attachment to the sending user. The return to sender processes described herein are designed to simplify and reduce the receiving user interactions necessary for returning an edited file attachment to the sending user as illustrated by .

At step the receiving user can select the file attached to the message. For example the receiving user can select a file attached to an email text message instant message or other electronic message.

At step the user can open the file attachment in a file editor. For example if the message is an email message the receiving user can select a menu item select a graphical object or provide input to open the selected file attachment in a file editor. In response to the user input the file can be displayed in a user interface of the file editor.

At step the user can edit the file attachment. For example the receiving user can add and or remove text images video sound or other content to and or from the file attachment using features of the file editor.

At step the user can select a return to sender option within the file editor. For example the receiving user can select a menu item a graphical object or provide other user input to indicate that the receiving user would like to return the edited file attachment to the sending user. In response to the selection of the return to sender option a reply to the message received from the sending user can be generated and the edited file attachment can be attached to the message without requiring the user to take steps or provide input to save the edited file attachment generate the reply message and browse the computing device s file system to find and select the file.

At step once the reply message is generated and the edited file attachment attached to the reply message in response to the user s selection of the return to sender option the user can provide input to send the reply message back to the sending user. For example the user can select a menu item graphical object or provide other input to direct the messaging application to transmit the message with attachment to the sending user.

In some implementations GUI can present an identifier associated with the user who sent message . For example if the message is an email message the identifier can be an email address associated with the sending user. If the message is an instant message or a chat message the identifier can be a handle e.g. online name user name etc. associated with the sending user. If the message is a text message e.g. SMS message the identifier can be a telephone number associated with the sending user.

In some implementations GUI can present text describing the subject of message . In some implementations GUI can present text indicating the date and or time that message was received. In some implementations GUI can present text comprising the body of message .

In some implementations GUI can present graphical object indicating that message has an attached file. In some implementations GUI can present a graphical object e.g. an icon image etc. representing the file attached to message . For example the attached file can be a video file an audio file a text file an image file or a combination thereof. Graphical object can have an appearance that represents the type of file attached to message . Thus the appearance of graphical object can change according to the type of file attached to message . In some implementations GUI can present text associated with the attached file. For example text can be a name or identifier associated with the attached file. In some implementations the user can select graphical object and provide input e.g. a menu item selection graphical object selection double click sustained touch etc. to cause the attached file to be opened and displayed in a file editor.

In some implementations GUI can display the contents of the selected file attachment to message . For example if the file attached to message is a letter then GUI can display the contents of letter . In some implementations the user can edit the contents of the file attachment within GUI . For example if the sending user has requested that the sending user sign the letter attached to message the receiving user can edit the contents of letter by inserting text corresponding to the receiving user s signature.

In some implementations the receiving user can select an option provided by GUI to return the edited file attachment to the sending user. For example the user can select graphical object to display a menu for returning the edited version of the file attachment to the sending user. Menu can provide an option for returning the edited file attachment to only the sending user e.g. Return to Adam Bartlett . In some implementations the return to sender menu option e.g. Return to Adam Bartlett can be dynamically changed to indicate the sending user e.g. the user who sent the file attachment to the receiving user . Menu can provide an option e.g. Return to All for returning the file to all addressees associated with the received message . For example in a multiple messaging system e.g. group text messaging or an email system all addressees associated with message will receive the edited file attachment if the return to all option is selected from menu .

In some implementations in response to the user selecting the return to sender option or the return to all option from menu a reply to message will be automatically generated and the edited file attachment will be automatically attached to the reply as illustrated by and described in further detail below.

In some implementations reply message can be automatically generated to include content from message . For example reply message can be automatically addressed to the sender and or other addressees of message based on the selection of the reply to sender or reply to all option of GUI . The subject of reply message can be automatically populated based on the subject of message for example. The body of message can be automatically inserted into the body of reply message .

In some implementations the file attachment edited in GUI can be automatically attached to reply message . For example the edited file attachment can be attached without requiring the user to navigate the file system of the computing device to find the edited file and attach the edited file to reply message .

In some implementations GUI can present a graphical object e.g. an icon image etc. representing the edited file attachment. For example graphical object can be similar to graphical object of because the files are of the same type. However graphical object can differ from graphical object in that graphical object can present an appearance that indicates that the corresponding attached file is an edited version of the file attachment associated with graphical object . For example graphical object can include a graphic indicator e.g. banner sash etc. indicating that the attached file has been edited.

In some implementations GUI can present text associated with the edited file attachment. For example text can correspond to text of . That is text can correspond to the name of the attached file. In some implementations text can indicate that the file attachment is an edited version of the previously received file attachment. For example text can include text indicating that the attached file was edited and or who edited the attached file. For example the name identifier or email address of the user who edited the file can be added to the name of the attached file.

In some implementations the receiving user can edit the reply message before returning the edited file attachment to the sending user. For example the receiving user can add text to the body of the reply message . The user can add additional addressees to the To and CC fields and . The user can change the subject field . The user can add addition attachments to the reply message . Once the receiving user is ready to return the edited file attachment to the sending user the receiving user can select graphical object to send reply message to the sending user.

At messaging application can receive a message with an attachment. For example messaging application can be an email application text messaging application SMS application instant messaging application or other electronic messaging application. In some implementations when the attachment is received the attachment can be associated with metadata that identifies the message with which the attachment is associated. In some implementations the attachment metadata can include an identifier e.g. an email address associated with the user who sent the message and attachment. In some implementations only an identifier associated with the last user to send the file will be included in the attachment metadata. In some implementations the metadata can include preferences specified by the sending user. For example when sending an attachment that the sending user wants the receiving user to edit and return the sending user can specify a return file type other than the file type of the attachment. In some implementations metadata associated with an attachment can be encrypted to prevent other users from accessing the metadata.

At the received message can be displayed by messaging application . For example the content of the received message can be displayed in a user interface of messaging application . In some implementations a representation of the attachment can be displayed in a user interface of messaging application . An example GUI for messaging application can be found in .

At messaging application can receive a selection of the attachment. For example a user can select the message attachment as described above with reference to

At the messaging application can invoke editor application with the attachment. For example if the attachment is a text file then editor application can be a text editing application. If the attachment is an image file then editor application can be an image editing application. For example by invoking editor application with the attachment the attachment or identifier file name etc. can be passed as a parameter to editor application during initiation and the editor application can open and display the attachment upon display of a user interface of editor application .

At upon initiation of editor application editor application can send information identifying the attachment to share service e.g. operating system service . For example editor application can include a share service client that configures graphical object and menu . Upon initiation of editor application the share service client can transmit to share service a file identifier that identifies the attachment e.g. file file etc. opened in editor application .

At share service can obtain metadata associated with the file corresponding to the received file identifier. For example share service can obtain from the metadata a message identifier corresponding to the message in which the file e.g. attachment was received.

At share service can obtain sender information and preferences associated with the attached file. For example the metadata associated with the file can include information identifying the sender e.g. email address user name telephone number etc. of the attached file. Metadata associated with the file can include information indicating if there is more than one addressee associated with the file. The metadata associated with the file can include user preferences such as a return file type. In some implementations share service can use the message identifier to query messaging application for the user information and preferences.

At share service sends return to information to editor application . For example share service can send information identifying the sender of the attached file. Share service can send information indicating if there is more than one addressee associated with the file. Once editor application e.g. or the share service client within editor application receives the sender information and addressee information the editor application can configure graphical object and menu of based on the sender information and addressee information. For example if the file has no sender information and no addressee information then the file was on received as an attachment and the return to sender and return to all options of menu will not be displayed. If the sender is the only addressee associated with the file then only the return to sender e.g. Return to Adam Bartlett option will be displayed. If there are multiple addressees associated with the file then both return to sender and return to all options will be displayed in menu of .

In some implementations the determination as to which return to options to display in menu of as described above is performed by share service . For example the share service can determine which options to enable and can provide the text and or other configuration for menu to editor application for display upon selection of graphical object .

At editor application can receive edits changes modifications to the file from the user. Once the user is finished editing the file using the features and functions of editor application as described with reference to above the user can select one of the return to functions of menu of . In some implementations upon selection of a return to function of menu the edited file can be automatically saved in the file system of the computing device. In some implementations the name of the user who edited the file and or information indicating that the file has been edited can be added to the file metadata.

At the editor application can invoke a return to function of share service . For example editor application can use an interface of the share service client within the editor application to invoke a return to function corresponding to the selected return to option e.g. return to sender return to all and provide to share service an identifier associated with the edited file to be returned to the sender or all addressees associated with the file.

At share service can invoke a reply function of messaging application to reply to the message received from the sending user. For example messaging application can provide an application programming interface e.g. a return to API for generating a reply message with an attachment. The return to API can be parameterized to accept a message identifier a file identifier and a parameter indicating whether to reply to sender or reply to all addressees associated with the identified message. For example the message identifier can be obtained from the file metadata as described above. The file identifier can be received from editor application as described above. Whether to reply to sender or reply to all can be determined by share service based on which return to function is invoked at .

In some implementations share service can perform operations to accommodate client preferences before invoking the reply function of messaging application . For example if the file metadata includes information indicating that a return file type has been requested by the sending user then share service can convert the edited file to the requested file type before invoking the reply function at . If share service converts the file e.g. from .pages file format to .pdf file format then share service will send the file identifier for the converted file to messaging application . In some implementations messaging application can perform the file type conversion to conform to the sending user s requested file type.

At messaging application can generate and display a reply message based on the message identifier file identifier and reply to parameters received at . For example messaging application can determine which message to reply to based on the received message identifier. Once the reply message is generated messaging application can attach the file identified by the received file identifier. Alternatively if a file type conversion is required then messaging application can convert the file identified by the received file identifier into the requested file type and attach the converted file to the reply message. In some implementations messaging application can modify the name of the attached file to indicate that the file was edited as described above with reference to . In some implementations messaging application can modify the graphical object representing the attached file to indicate that the file was edited as described above with reference to . Once the reply message is generated and the edited file is attached to the reply message the reply message and edited file attachment can be displayed on a user interface of messaging application .

At messaging application can send the reply message with edited attachment to the sending user. For example once the receiving user is finished reviewing and editing the reply message displayed in the user interface of messaging application the receiving user can select a send option of messaging application to cause messaging application to transmit the reply message with edited attachment to the sending user.

In some implementations a forward to function can be provided in a similar manner as the return to functions described herein. For example selection of a forward to function can cause a message to be automatically generated based on a previously received message. Similar to the return to functions described above the subject and message body can be automatically populated based on an identified previous message. The edited attachment can be automatically attached to the forwarding message. However with forward to the addressee must be identified by the user the addressee is not automatically identified like it is with the return to functions described above.

At step the attachment can be opened in an editing application. For example in response to receiving a selection of the attachment the attachment can be opened in an editing application. If the attachment is a text file or file then the attachment can be opened in a text editing application.

At step the editing application can be configured with return to options appropriate for the opened file. For example if the file was not received as an attachment to a message then no return to options will be configured in the editing application. If the file was received as an attachment to a message then return to sender and or return to all options can be configured in the editing application as described above.

At step edits to the attachment can be received by the computing device. For example a user can provide input to the editing application to modify the contents of the attachment e.g. file .

At step a selection of a return to option can be received by the computing device. For example the editing application can receive user input indicating whether to return the edited attachment to only the sender of the attachment or to return the edited attachment to all addressees associated with the attachment.

At step in response to receiving the selection of a return to option the computing device can automatically save the edited attachment.

At step in response to receiving the selection of a return to option the computing device can automatically generate a reply to the message in which the attachment was received and automatically attach the edited attachment to the automatically generated reply message.

At step the computing device can send the reply email with edited attachment to the sending user and or addressees associated with the edited attachment.

Sensors devices and subsystems can be coupled to the peripherals interface to facilitate multiple functionalities. For example a motion sensor a light sensor and a proximity sensor can be coupled to the peripherals interface to facilitate orientation lighting and proximity functions. Other sensors can also be connected to the peripherals interface such as a global navigation satellite system GNSS e.g. GPS receiver a temperature sensor a biometric sensor magnetometer or other sensing device to facilitate related functionalities.

A camera subsystem and an optical sensor e.g. a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor can be utilized to facilitate camera functions such as recording photographs and video clips. The camera subsystem and the optical sensor can be used to collect images of a user to be used during authentication of a user e.g. by performing facial recognition analysis.

Communication functions can be facilitated through one or more wireless communication subsystems which can include radio frequency receivers and transmitters and or optical e.g. infrared receivers and transmitters. The specific design and implementation of the communication subsystem can depend on the communication network s over which the computing device is intended to operate. For example the computing device can include communication subsystems designed to operate over a GSM network a GPRS network an EDGE network a Wi Fi or WiMax network and a Bluetooth network. In particular the wireless communication subsystems can include hosting protocols such that the device can be configured as a base station for other wireless devices.

An audio subsystem can be coupled to a speaker and a microphone to facilitate voice enabled functions such as speaker recognition voice replication digital recording and telephony functions. The audio subsystem can be configured to facilitate processing voice commands and voice authentication for example.

The I O subsystem can include a touch surface controller and or other input controller s . The touch surface controller can be coupled to a touch surface . The touch surface and touch surface controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch surface .

The other input controller s can be coupled to other input control devices such as one or more buttons rocker switches thumb wheel infrared port USB port and or a pointer device such as a stylus. The one or more buttons not shown can include an up down button for volume control of the speaker and or the microphone .

In one implementation a pressing of the button for a first duration can disengage a lock of the touch surface and a pressing of the button for a second duration that is longer than the first duration can turn power to the computing device on or off. Pressing the button for a third duration can activate a voice control or voice command module that enables the user to speak commands into the microphone to cause the device to execute the spoken command. The user can customize a functionality of one or more of the buttons. The touch surface can for example also be used to implement virtual or soft buttons and or a keyboard.

In some implementations the computing device can present recorded audio and or video files such as MP3 AAC and MPEG files. In some implementations the computing device can include the functionality of an MP3 player such as an iPod . The computing device can therefore include a 36 pin connector that is compatible with the iPod. Other input output and control devices can also be used.

The memory interface can be coupled to memory . The memory can include high speed random access memory and or non volatile memory such as one or more magnetic disk storage devices one or more optical storage devices and or flash memory e.g. NAND NOR . The memory can store an operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks.

The operating system can include instructions for handling basic system services and for performing hardware dependent tasks. In some implementations the operating system can be a kernel e.g. UNIX kernel . In some implementations the operating system can include instructions for performing the return to sender features described above. For example operating system can implement the return to sender features as described with reference to .

The memory can also store communication instructions to facilitate communicating with one or more additional devices one or more computers and or one or more servers. The memory can include graphical user interface instructions to facilitate graphic user interface processing sensor processing instructions to facilitate sensor related processing and functions phone instructions to facilitate phone related processes and functions electronic messaging instructions to facilitate electronic messaging related processes and functions web browsing instructions to facilitate web browsing related processes and functions media processing instructions to facilitate media processing related processes and functions GNSS Navigation instructions to facilitate GNSS and navigation related processes and instructions and or camera instructions to facilitate camera related processes and functions.

The memory can store other software instructions to facilitate other processes and functions such as the return to sender processes and functions as described with reference to . For example software instructions can include instructions to facilitate the messaging application and or editor application processes and functions described above with reference to .

The memory can also store other software instructions such as web video instructions to facilitate web video related processes and functions and or web shopping instructions to facilitate web shopping related processes and functions. In some implementations the media processing instructions are divided into audio processing instructions and video processing instructions to facilitate audio processing related processes and functions and video processing related processes and functions respectively.

Each of the above identified instructions and applications can correspond to a set of instructions for performing one or more functions described above. These instructions need not be implemented as separate software programs procedures or modules. The memory can include additional instructions or fewer instructions. Furthermore various functions of the computing device can be implemented in hardware and or in software including in one or more signal processing and or application specific integrated circuits.

