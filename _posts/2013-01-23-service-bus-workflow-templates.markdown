---

title: Service bus workflow templates
abstract: In some examples, a service bus may include one or more computing devices configured to translate requests from one or more client applications to one or more proxy services. According to at least one example, a system may create a resource object based at least in part on a template. The template may be associated with configuration information that may identify at least one parameter associated with a third-party application. In some examples, the third-party application may be a web service or a client application. Additionally, the system may generate a message flow based at least in part on the resource object. The system may also process a request, from the third-party application, based at least in part on the message flow. Further, the system may provide a graphical user interface (GUI) associated with the template, the GUI configured to enable input of the configuration information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09357018&OS=09357018&RS=09357018
owner: Oracle International Corporation
number: 09357018
owner_city: Redwood Shores
owner_country: US
publication_date: 20130123
---
Client applications often desire to interact with third party proxy services. For example a client application may wish to make requests to a web service. However the client application and the web service may often be configured such that they cannot directly communicate with one another. For example the client application may utilize a first protocol such as the java message service JMS for sending requests while the web service may operate under a different protocol such as the hypertext transfer protocol HTTP . Additionally service buses or other types of mediators may be configured to appropriately translate such requests so that the two entities may communicate. However configuring multiple similar translations based on one or more common guidelines within a single service bus may be time consuming and error prone.

Techniques for providing workflow templates within a service bus are described. As used herein a message flow also referred to as a workflow may include any type of flow that may be generated or otherwise managed by a workflow engine or other software module for processing instructions according to a flow. In some examples the service bus may include one or more computing devices e.g. within a distributed computing system configured to translate requests from one or more client applications to one or more proxy services. According to at least one example a computing system may create a template based workflow based at least in part on a template. The template may be associated with configuration information that may identify at least one parameter associated with a third party application. In some examples the third party application may be a web service or a client application. Additionally the computing system may generate a message flow based at least in part on the template based workflow. The computing system may also process a request from the third party application based at least in part on the message flow. Further the computing system may provide a graphical user interface GUI associated with the template the GUI configured to enable input of the configuration information.

In some examples the template based workflow may include configurable actions and or locked actions. The message flow may also be configured to operate as part of a service bus e.g. a mediation engine . The mediation engine may be configured to mediate between the third party applications and one or more services. The one or more services may be web services. Additionally in some examples the computing system may receive updated configuration information via the template. The system may update the template based workflow based at least in part on the updated configuration information. Further the system may automatically update the message flow based at least in part on the updated template based workflow.

According to at least one example a computer readable memory may store instructions that when executed by one or more processors cause the one or more processors to generate a template based workflow based at least in part on a workflow template. Additionally the instructions may also cause the one or more processors to generate a plurality of workflows. The instructions may also cause the one or more processors to receive from a remote application a request to access a proxy service. The instructions may further cause the one or more processors to process the request from the remote application based at least in part on the workflows. At least one of the plurality of the workflows may include at least the template based workflow.

In some examples the workflow template may include at least configuration information associated with the remote application. Additionally in some examples at least one of the plurality of the workflows may be configured to inherit changes made to the template based workflow. The change may be made to the template based workflow based at least in part on the remote application updating the workflow template. In some examples the template based workflow may be configured to include at least one other template based workflow that may be generated based at least in part on a second workflow template. The template based workflow may also include branch nodes that may provide one or more additional workflow templates. In some examples the proxy services may be configured to at least translate access requests into requests configured for transmission to the proxy service. Such requests may be received over a network connection.

According to at least one example a computer implemented method may include providing a user interface configured to enable a client application to configure a workflow template. The workflow template may be configured to include at least configuration information associated with the client application. The method may also include generating a template based workflow based at least in part on the workflow template. A plurality of workflows may also be generated where each workflow includes the template based workflow. The method may also include receiving a request to access a proxy service. The request may be received from a client application. The method may further include processing the request from the client application based at least in part on the plurality of workflows.

In some examples the user interface may include at least a GUI component configured to enable entrance of the configuration information associated with the client application. The workflows may be configured to perform actions based at least in part on the template based workflow. In some examples the GUI may be further configured to enable the client application to update the workflow template with additional configuration information. The workflows may then be modified based at least in part on the change to the template based workflow the change based at least in part on the updated workflow template. Further in some examples the workflows may be modified in real time with reference to the updated workflow template.

The foregoing together with other features and embodiments will become more apparent upon referring to the following specification claims and accompanying drawings.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Embodiments of the present disclosure are directed to among other things providing workflow templates for use within one or more service busses also referred to as translators mediation engines or the like . In some examples a service bus may implement one or more workflows also called pipelines and or message flows for enabling interaction between software applications. In some aspects the service bus may be configured to provide asynchronous message oriented communication and or interaction between such applications which may not communicate using the same languages. For example a first client application may wish to request a resource from a proxy service e.g. a web service . However if the two systems i.e. the client application and the web service utilize different protocols and or languages the service bus may facilitate the resource request on behalf of the client application and then provide the response from the web service back to the client application. Essentially the service bus may act as a translator or mediator between the two applications.

In some aspects the service bus may provide commonly utilized commodity services and may be configured to adopt translate and or route client requests to appropriate proxy services. For example the service bus may monitor and or control routing of message exchanges between services. The service bus may also resolve contention between communicating service components and or control deployment and or versioning of services. Further in some examples the service bus may marshal the user of redundant services and or may cater to commonly needed commodity services such as but not limited to event handling event choreography data transformation data mapping message and or event queuing and or sequencing security and or exception handling protocol conversion i.e. translating and or the enforcement of proper quality of communications and or services.

Additionally in some examples the service bus may be configured to implement one or more workflow templates. Workflow templates may be provided via a GUI and or may provide the ability to provision new services on the service bus without much repetition. For example a workflow template may enable a developer to provision services that conform to one or more best practices for a variety of integration patterns. Additionally a workflow template may allow a developer to build out a message flow within the service bus that can be re used as a prototype for provisioning new services quickly. For example a template designer may define a general shape or pattern of a message flow and may be able to generate many workflows from the workflow template. The workflows in some aspects may each follow the same pattern as the workflow template and or may allow for pieces of custom logic to be inserted in particular places of the workflow.

In some aspects the workflow template may define a notion of a resource also referred to as a workflow resource or a template based workflow that may have a full life cycle like other service bus artifacts. Additionally message flows may be created and or provisioned based at least in part on this workflow template. In some examples a template designer may designate particular portions of the workflow template and or message flow where business logic may reside. In other words the workflow template may include configurable actions and lockable actions. In this way other than the configurable actions the message flows may follow flows defined by the workflow template.

This brief introduction including section titles and corresponding summaries is provided for the reader s convenience and is not intended to limit the scope of the claims nor the preceding sections. Furthermore the techniques described above and below may be implemented in a number of ways and in a number of contexts. Several example implementations and contexts are provided with reference to the following figures as described below in more detail. However the following implementations and contexts are but a few of many examples.

By way of example only the service bus computers may be configured to execute the service bus as well as other programming modules or the like. Additionally in some examples the client application computers may be configured to execute one or more client applications. Client applications may include but are not limited to web services client side software applications web browsers email clients etc. Further in some aspects the service provider computers may be configured to execute one or more services e.g. server side applications web services or the like .

In some examples the networks may include any one or a combination of multiple different types of networks such as cable networks the Internet wireless networks cellular networks intranet systems and or other private and or public networks. While the illustrated example represents the client application computers and or the service provider computers accessing the service bus over the networks the described techniques may equally apply in instances where the service bus computers are accessible over a landline phone via a kiosk or in any other manner. It is also noted that the described techniques may apply in other client server arrangements e.g. set top boxes etc. as well as in non client server arrangements e.g. locally stored applications etc. .

In some aspects the service bus computers may be any type of computing devices such as but not limited to mobile desktop thin client and or cloud computing devices such as servers. In some examples the service bus computers may be in communication with the client application computers and or the service provider computers via the networks or via other network connections. The service bus computers may include one or more servers perhaps arranged in a cluster as a server farm or as individual servers not associated with one another. These servers may be configured to perform or otherwise host features described herein including but not limited to the workflow templates. Additionally in some aspects the service bus computers may be configured as part of an integrated distributed computing environment. The service bus computers may operate within a Java EE container a WebLogic server or any other environment configured with one or more server applications enterprise portals application integration platforms transaction servers and or infrastructures telecommunication platforms and or web servers.

In one illustrative configuration the service bus computers may include at least one memory and one or more processing units or processor s . The processor s may be implemented as appropriate in hardware computer executable instructions firmware or combinations thereof. Computer executable instruction or firmware implementations of the processor s may include computer executable or machine executable instructions written in any suitable programming language to perform the various functions described.

The memory may store program instructions that are loadable and executable on the processor s as well as data generated during the execution of these programs. Depending on the configuration and type of the service bus computers the memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. . The service bus computers or servers may also include additional storage which may include removable storage and or non removable storage. The additional storage may include but is not limited to magnetic storage optical disks and or tape storage. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for the computing devices. In some implementations the memory may include multiple different types of memory such as static random access memory SRAM dynamic random access memory DRAM or ROM.

The memory the additional storage both removable and non removable are all examples of computer readable storage media. For example computer readable storage media may include volatile or non volatile removable or non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. The memory and the additional storage are all examples of computer storage media.

The service bus computers may also contain communications connection s that allow the service bus computers to communicate with a stored database another computing device or server user terminals and or other devices on the networks . The service bus computers may also include input output I O device s such as a keyboard a mouse a pen a voice input device a touch input device a display speakers a printer etc.

Turning to the contents of the memory in more detail the memory may include an operating system and one or more application programs or services for implementing the features disclosed herein including at least a service bus module . In some examples the service bus module may be configured to provide a service bus receive requests for services from client application computers transmit requests to service provider computers and provide responses to requests back to the client application computers . In other words the service bus module may be utilized as a mediator translator or type of proxy service proxy between the client application computers and the service provider computers .

By way of example only the service bus may be configured with a proxy component and or a business services component . The proxy component may be configured to receive requests from the client application computers . Such requests may include requests for data services or other information associated with the one or more service provider computers . Additionally such requests may be formatted in accordance with one or more particular protocols that are used by client applications of the client application computers sending the requests. As such the proxy may act a portal or application programming interface API for interacting with the service bus from the client application side. In some examples the business services component may be configured to provide requests to the service provider computers in a language or based at least in part on a protocol familiar to or otherwise understood by the service provider computers . For example each service provider computer may execute one or more services that operate under different protocols or different programming languages. As such via the business services component the service bus may effectively communicate with the service provider computers independent of the protocols formatting or languages utilized by the client applications. As such and similar to the proxy component the business services component may act as a portal to the service provider computers . In some examples the proxy component may expose APIs to the client application computers and or the service provider computers may expose APIs to the business services component . However other configurations are possible as well.

In some aspects the service bus may be configured to store and or implement one or more template based workflows one or more standard workflows also referred to as a standard workflow a standard pipeline or similar phrases and or one or more workflow templates . A template based workflow may include but is not limited to parameter information request information workflow message information and or actions to be performed within the workflow. In some instances a template based workflow may be considered a pipeline resource a concrete pipeline resource and or a concrete pipeline. In other words the template based workflow may implement a workflow or process for implementing a workflow on behalf of a client application. As such the template based workflows may be created or otherwise configured by the client application computers for effectively routing translating configuring and or formatting requests from the client application computers to the service provider computers . Additionally in some examples the template based workflows may be instantiated by or otherwise include a link to among other things the one or more workflow templates also referred to as workflow templates template resources pipeline templates or other similar phrases including the term template or templates . The template may be created generated requested and or configured by the client application computers e.g. via a GUI provided by the service bus .

In some examples and as discussed briefly above a template based workflow may be instantiated by or otherwise include a link to a template and or may be formed based at least in part on the template and or other customizations. In other words a template based workflow may be an object oriented abstraction formed by combining a template with any customizations i.e. a template override or the like . As noted above a template may be configured with parameters e.g. provided by the client application computers and or actions to be performed by the service bus . Actions may include both or either configurable actions placeholders or locked actions . In some examples a configurable action may be a placeholder that otherwise indicates that a developer may configure the action to be performed in the workflow based at least in part upon this template . However a locked action may be configured by an administrator of the client application computers e.g. a template designer etc. such that the action in the template based workflow may not be configured in the template based workflow based at least in part upon this template . In other words these locked actions may be predetermined by the administrators to conform to some best practices or guidelines of the client application. As such the locked actions may be locked in the template to ensure that they are not changed in the template based workflow . Further template based workflows that include templates or are formed based at least in part on templates may inherit the actions parameters and or business rules of the template. In this way changes to the template after the template based workflows are instantiated may be pushed to or otherwise updated within the template based workflows e.g. in real time . At least in this context updating the template based workflows in real time may be defined by an update instruction being performed substantially immediately after the template is changed at least before the next operation of the template based workflow is performed and or in direct response to the template being updated. Additionally in some examples the template based workflows may also be configured with and or by overrides e.g. a template override designed to alter the configuration of the workflow templates and or the functionality of the template based workflows . Further in at least one non limiting example the standard workflows may include workflows that are not instantiated using or linked to workflow templates .

As noted above users i.e. client application computers may request a mechanism to rapidly provision new services on the service bus that follow established best practices for a variety of integration patterns. As such the client application computers may utilize the templates to build out message flows and re use them as a prototype or template for provisioning new services quickly and with few or no errors. The template designer i.e. an administrator associated with a client application hosted by a client application computer may define a general shape or pattern of a message flow and be able to generate many template based workflows from this template that all follow the same pattern possibly with a few pieces of custom logic inserted in specifically designated places. In some examples a user e.g. a template designer or the like may create and or manage templates. In some aspects a user e.g. an operator or the like may create and or customize message flows based on the template.

Additional types of computer storage media which may also be non transitory that may be present in the service bus computers may include but are not limited to programmable random access memory PRAM SRAM DRAM RAM ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology compact disc read only memory CD ROM digital versatile discs DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the service bus computers . Combinations of any of the above should also be included within the scope of computer readable media.

Alternatively computer readable communication media may include computer readable instructions program modules or other data transmitted within a data signal such as a carrier wave or other transmission. However as used herein computer readable storage media does not include computer readable communication media.

In some examples the developer IDE and or the web console may be in communication with one or more data stores. For example the developer IDE and or the web console may access an overrides storage device and or a main flow and placeholders storage device . In some examples the overrides storage device may include actions nodes branches changed overrides and or added overrides. In some aspects an override may be utilized by a developer or other client application computer user to make changes to values of action properties to be performed by the service bus . For example an executable workflow may be generated by the service bus based at least in part on actions placeholders and or parameters provided by the developers . However in some examples actions and or parameters associated with a template may override predefined actions and or parameters. In some cases however only unlocked actions may be overridden. Additionally in some examples the overrides storage device may store only the overrides while the main flow information and or the placeholders may be stored in the main flow and placeholders storage device . In some aspects an action placeholder override may override a placeholder in a template with one or more actions. Further the main flow and placeholders storage device may include message flow pair nodes proxy information and or placeholders. Placeholders may include positions in a template that indicate user or developer definable and or customizable actions. For example if a developer decides to allow a user of the client application computers to customize a workflow by adding actions into the template a placeholder may be inserted. The user may then add actions and or other conditions at the placeholder.

In some examples a node placeholder override may allow a user to configure one or more pipeline pair nodes and or branch nodes. The node placeholder override may also allow a user to route nodes in a workflow that includes workflow templates. A template operational branch node placeholder override may allow a user to configure an operational branch node in a workflow that includes a workflow template. Additionally in some examples a template conditional branch node placeholder override may allow a user to configure a conditional branch node in a workflow that includes a workflow template. A stage placeholder override may allow a user to configure one or more stages. An action placeholder override may allow a user to configure one or more actions. A stage override may allow a user to configure stage specific properties such as but not limited to a list of user defined namespaces or the like. Further an action override may allow a user to override properties in an unlocked action.

In some aspects a template based workflow e.g. as described with reference to and or a workflow template e.g. as described with reference to may be generated based at least in part on the data stored within the overrides data store and or the main flow and placeholders data store respectively. For example override information may be utilized to generate the template based workflow which may or may not yet include any template information. Additionally main flow and or placeholder information may be utilized to generate the workflow template which may include the template information derived from the main flow and placeholder information or otherwise received from the developer IDE or in some aspects via the web console . Upon generation of the template based workflows and or the workflow templates the service bus may merge the two resources to generate a standard workflow e.g. as described above with reference to . This standard workflow may be stored in a memory such as but not limited to the memory of . Further in some examples the service bus may compile the standard workflow e.g. including the workflow template to generate the executable workflow . As such when the client application computers later access the proxy by sending requests to the service bus the proxy service may access the executable workflow via or by utilizing the proxy service for processing such requests.

As with the networks of the networks may include any one or a combination of multiple different types of networks such as cable networks the Internet wireless networks cellular networks intranet systems and or other private and or public networks. While the illustrated example represents the developer devices and or the client application computers accessing the service bus over the networks the described techniques may equally apply in instances where the developer devices and or the client application computers interact with the service bus over a landline phone via a kiosk or in any other manner. It is also noted that the described techniques may apply in other client server arrangements e.g. set top boxes etc. as well as in non client server arrangements e.g. locally stored applications etc. .

Description text field may allow the user or developer to input a description of the template and or the workflow being generated. The user may utilize this section to annotate or otherwise comment on the template resource such that it will be more identifiable for later utilization e.g. with other workflows or the like . In some examples a from template check box may enable selection of one or more standard of which to base the main flow of the template being created. For example when selected the selected standard workflow may serve as a prototype for the new template. Additionally a message text field may be utilized for providing error messages to users e.g. template with the name foo already exists or the like . When updating a previously generated template resource in some aspects the updates may have immediate effect on message handling options of any template based workflows instantiated from the template resource. A help link may be provided for enabling access to one or more help files and or knowledge base information associated with the user interface and or operation of the service bus . Further a next link may be provided for advancing the user and or developer to the next step in creation of the template resource. However in some examples a finish link may be provided instead of the next link when the information provided in the user interface is enough to create the template resource without additional steps.

As shown in the UI may be described as a template flow design UI otherwise referred to as a template resource design UI or template message flow design UI . The template flow design UI may include a visual representation of a service flow detailing aspects of a one or more pipeline pairs each of which may contain one or more stages. Additionally the top level of the service flow may include a branch node and or a route node in place of or along with the pipeline pair node shown. In some aspects a developer or administrator associated with a client application may be able to physically place select or otherwise manipulate the icons of the template flow design UI with use of a mouse or other input device. The pipeline pair may include a request flow and or a response flow . In some examples the request flow may indicate instructions and or actions to be performed during the workflow portion associated with requests received from client applications. Additionally in some examples the response flow may indicate instructions and or actions to be performed during the workflow portion of the flow associated with responses sent back to the client applications. The response flow and or the response sent back to the client applications may be based at least in part on a response received from a proxy service.

In some examples a branch node may be a conditional branch node or an operational branch node. The branch node may also contain pipeline pair nodes and or route nodes. In some aspects a pipeline pair node may have a request pipeline and or a response pipeline in some cases as a pair e.g. request and response . A pipeline may be made up of zero or more stages. Similarly a stage may be made up of zero or more actions. When present a route node may be last in the flow and or may contain actions. A message flow may be defined as a collection of nodes organized in a tree that represent router logic. A branch node may be defined as a node that provides conditional path processing in the flow. A pipeline pair node may be defined as a node that includes a pair of pipelines for general processing. A route node may be defined as a node configured to perform outbound communication with another service. In some non limiting examples a route node may only appear at the end of a path in the message flow . A pipeline may be defined as a named sequence of stages representing a non branching one way processing path according to some examples. A stage may include a named sequence of actions. Further an action may include a user configured processing step e.g. transformation routing etc. .

Additionally in some examples request and response paths may be created by pairing request and response pipelines together and organizing them into a single rooted tree structure. A branching node may allow for conditional execution and routing nodes at the ends of the branches may perform request and or response dispatching. This tree structure may allow for a clear overview of the router behavior making both routing actions and branching conditions explicit parts of the overall design rather than burying them deep inside of a pipeline stage. A message flow may be constructed by chaining together instances of at least three top level components including but not limited to the pipeline pair node the branching node and or the routing node. The pipeline pair node may tie together a single request and a single response pipeline into one top level element. A pipeline pair node may in some examples have only one direct descendant in the message flow. During request processing the request pipeline may be executed when visiting a pipeline pair node. When reversing the path for response processing the response pipeline may then be executed.

Additionally a branching node may allow processing to proceed down one or more or exactly one in some examples of several possible paths. Branching may be driven by a simple lookup table with each branch tagged with a string value in some cases utilizing unique string values for each . An expression configured in the branch node may be evaluated against the message context and its value may be used to determine which branch to follow. If no branch matches the value of the branch expression then a default branch may be followed. A branching node may have several descendants in the message flow one for each branch including the default branch. Further the routing node may be used to perform request response communication with another service. It may in some aspects represent the boundary between request and response processing for the proxy. When the routing node dispatches a request message request processing may be considered over. When the routing node receives a response message response processing may begin. The routing node may have support for conditional routing as well as outbound and response transformations. Whether conditions appear inside the routing node or up in the message flow as branching nodes may be configured by the user. As the routing node represents the boundary between request and response processing it may not have any descendants in the message flow.

In addition to a standard branching node i.e. a conditional branch or operational branch a template based workflow may also have a template branching node i.e. a template conditional branch and or a template operational branch . Compared to a standard branching node which may have an unlimited number of branches and each branch condition conditional expression or operation name may have to be fully configured the template branch node may only have two branches the main branch and the default branch which do not have to be fully configured. Both the main branch and the default branch in the template may serve as mini templates for the branch flow in the instantiated workflow and may contain placeholders and pipeline pair nodes. The main branch may be a mini template for a specific condition operation in the yet to be instantiated workflow and the default branch may be a mini template for a flow that is not covered via the main branch configuration similar to a switch case statement in C or java . When the user creates a template based workflow from this template they may need to fully specify the number of branches as well as a condition operation for each of the branches. For example the main branch of the operational template branch may contain a pipeline pair node a stage and a log action. In this case all configured branches of the workflow instantiated from this template may follow the same flow pattern a pipeline pair node a stage and a log action.

Each of the flows either the request flow and or the response flow may include one or more stages N If Then Else actions N actions N and or placeholders N . Each stage may include or otherwise indicate the process flow and or instructions to be performed at a given portion of the message flow. Conditions may provide the ability to enable conditional processing during the message flow e.g. utilizing if then statements or other conditional phrases . Actions may include any action to be performed on the data or other parameters associated with the request or the response. For example while the action of is shown as a log action any action may be inserted here including but not limited to assign delete insert java callout MFL transform NXSD Translation rename replace validate alert report for each if then raise error reply resume skip publish and or route to name only a few. Additionally actions may be locked such that they may not be overridden changed edited or otherwise altered by a client of the service bus e.g. pipeline resources that utilize this template object or the like . As such when locked an action may indicate a common policy or rule to be inherited by all template based workflows that utilize this template. Additionally when actions are unlocked default information may be provided in the event that a client does not assign an action or a parameter associated with the action .

In some cases an action placeholder may indicate a location provided by the administrator or developer where a client may insert any actions. Additionally an stage placeholder may indicate a location where a client may insert a stage. In this way the template may be customizable to a certain degree. That is once the design of the template resource is completed via the template flow design UI client entities and or users of the service bus may utilize a second UI to configure the template flow by adding new actions at the placeholders and or editing configuring unlocked actions . Alternatively or in addition the users may add new actions at the placeholders when editing the flow of the pipeline resource that uses the template. Additionally in some aspects branching functions may be utilized. Conditional branches e.g. similar to a switch statement may be inserted into the service flow . For example a conditional branch may state that if a value equals 1 a certain action should be taken while if the value equals 2 a different branch should be followed. In some cases the branch function may be considered a mini template resource a nested template resource and or a template function within a template resource.

In some examples a user may access the UI to configure a template based pipeline. In other words the template resource may have been created with particular actions locked and other actions unlocked and via the UI a user may configure at least the unlocked actions. For example the log actions shown in within the shaded areas may have been provided and or locked by a developer utilizing the UI . As such a user using the UI to configure the template based pipeline for use within a workflow engine may insert one or more actions N within each stage N . However the log actions if locked may not be changed or may at least have particular parameters that cannot be changed. For example the log action may be locked such that a log action is always executed at this point in the workflow however a user may configure what is logged and or how much information is logged. Other configurations are possible as well that may provide configuration of the log action without eliminating or overriding the log action itself. Additionally if no actions are placed at actions and the placeholders of are left blank by the user the template resource and or any template based workflow that inherits from the template resource may still inherit the log action. Additionally if unlocked by a developer via the UI of other stages such as but not limited to stage N may be selected such that the user may define other stages of the request flow and or the response flow .

In some aspects the message brokering module of the service bus may include content based routing of requests and or responses dynamic transformation of requests and or responses error handling service switching and or an implementation of message flows . The service bus security module may include authentication authorization identify management and or message security functionality. Additionally in some examples the configuration framework module may include a service directory a change center validation imports exports and or a data repository of configuration information. Further the service management module of the service bus may be configured for monitoring of requests and or responses providing service level agreement SLA alerts and or reporting information associated with the service bus and or the message flows .

In some examples the message flow module may process the message utilizing a workflow engine or a pipeline created by one or more developers and or users associated with the client . As noted the message flow may also include one or more template resources . As such the message flow may perform one or more actions and or branches and may also resolve one or more conditions. Additionally based at least in part on the template resource the message flow may inherit changes or other policies associated with the template resource instantiated therein. Upon processing the message flow the service bus may callout publish and or route information to the business service module . The business service module may bind the message to an appropriate protocol and then pass the message to the outbound transport module which may be configured to enable transmission of the message also referred to as a request to the service .

In some aspects the endpoint may provide a message from the business service or other endpoint to the route node . A second thread may be created or utilized to provide this message to the response flow . The response flow may be configured to perform one or more actions similar to the request flow including but not limited to log assign delete insert java callout transform translate rename replace validate alert report reply resume skip publish and or service callout. The response flow may also transmit the message back to the service consumer . Additionally as noted above each of the request flow and or the response flow may exist as a result of having instantiated one of the template resources respectively and or one or more actions. The template resources may include developer configured actions user configured actions and or may inherit changes made to the template resources without recompiling or otherwise re instantiating the proxy service .

Additionally some any or all of the processes may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. As noted above the code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

In some aspects the process of may be performed by at least the service bus module of . The process may begin at where the process may include creating a workflow resource also referred to herein as a template based workflow based at least in part on a workflow template. In some examples the workflow template may receive actions either locked or unlocked conditional statements and or branches. The workflow resource may be designed by a developer or administrator associated with a client application and or configured by a user associated with the client application. In some examples the workflow resource may be an object e.g. a type of programming resource utilized in object oriented programming that represents a template configured by the client application or developers etc. . This object may inherit later changes made to the template. The process may also include generating a plurality of message flows at . The plurality of message flows may be generated based at least in part on the workflow resource. In some aspects each of the plurality of message flows may inherit the template such that changes to the template may automatically update each of the generated message flows. Additionally the message flows may be referred to as pipelines and or workflows and may comprise a regular non template based message flow merged with a workflow resource or template resource.

The process may include receiving a request to access a proxy service. The proxy service may be any type of proxy service that a client application may wish to access. The request to access the proxy service may include a request from a client application and or a request for data stored with or otherwise managed by the proxy service. The process may end at where the process may include processing the request from the remote application based at least in part on the message flow. That is the message flow that was generated using the workflow resource i.e. based at least in part on template configured by the client application may process the resource request from the client application. This processing may follow or at least be constrained by the configuration and or policies of the template and may be updated in real time whenever changes are made to the template.

In some examples the process may include generating a plurality of workflows at . Workflows may define workflow engine tasks or processes to be performed for the client applications. Each workflow may be associated with a particular type of request to be made by the client application and or may be associated with a particular proxy service to be accessed. In some cases the workflows may inherit from the workflow resources and or workflow templates such that changes made to the workflow template may update the workflow in real time. At the process may also include receiving a request to access a proxy service. Further the process may end at where the process may include processing the request from the client application based at least in part on the workflow. In this way a client application may continue to make requests for proxy services to a mediator or translator operating the workflow e.g. the service bus of without updating each workflow when changes are requested. That is changes to a template made by the client application may automatically and in real time update each of the plurality of workflows that inherit from the template being updated.

In some examples the process may also include instantiating a workflow at . Instantiating a workflow may be done via a UI or other application configured to enable a user to create or launch a workflow. At the process may include utilizing the workflow to access one or more proxy services. Additionally in some examples the user may wish to make changes to the template. As such at the process may include a user updating the message flow template. By updating the message flow template the user may effectively update each instantiated workflow that includes the message flow template and or inherits from the message flow template. Further the process may end at where the process may include the user utilizing the workflow to access the proxy services e.g. similar to at . However at the user may utilize the workflow without re instantiating the workflow service. In other words the changes to the workflow template may have automatically updated the workflow such that the workflow does not need to be redeployed re instantiated re configured or otherwise changed at all.

Client computing devices may be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . Alternatively client computing devices and may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating over a network e.g. network described below . Although exemplary system environment is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

System environment may include a network . Network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

System environment also includes one or more server computers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing described above according to an embodiment of the present disclosure.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers Java servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM and the like.

System environment may also include one or more databases . Databases may reside in a variety of locations. By way of example one or more of databases may reside on a non transitory storage medium local to and or resident in server . Alternatively databases may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

Computer system may additionally include a computer readable storage media reader a communications subsystem e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

Computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. Communications system may permit data to be exchanged with network and or any other computer described above with respect to system environment .

Computer system may also comprise software elements shown as being currently located within working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . In an exemplary embodiment working memory may include executable code and associated data structures used by a relying party and open authorization related processing as described above. It should be appreciated that alternative embodiments of computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile non transitory removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by a computer.

Although specific embodiments of the disclosure have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the disclosure. Embodiments of the present disclosure are not restricted to operation within certain specific data processing environments but are free to operate within a plurality of data processing environments. Additionally although embodiments of the present disclosure have been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present disclosure is not limited to the described series of transactions and steps.

Further while embodiments of the present disclosure have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present disclosure. Embodiments of the present disclosure may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope. Illustrative methods and systems for providing the features described herein are described above. Some or all of these systems and methods may but need not be implemented at least partially by architectures such as those shown in above.

Although embodiments have been described in language specific to structural features and or methodological acts it is to be understood that the disclosure is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as illustrative forms of implementing the embodiments. Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments could include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

