---

title: Address matching system and method
abstract: An address matching system that maintains a central database of valid addresses has been designed. According to the invention, address matching requests are received by the system from a plurality of remote users located at respective machines (“clients”). Those requests are processed at the central system, and the results are returned to the client that made the request. In addition, novel techniques are implemented for improving the likelihood of obtaining one or more matches from a request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843464&OS=08843464&RS=08843464
owner: Stamps.com
number: 08843464
owner_city: El Segundo
owner_country: US
publication_date: 20130208
---
This patent application is continuation of U.S. patent application Ser. No. 13 330 277 filed Dec. 19 2011 which is a continuation of U.S. patent application Ser. No. 12 776 912 filed on May 10 2010 which is a continuation of U.S. patent application Ser. No. 111 748 460 filed on May 14 2007 now U.S. Pat. No. 7 743 043 which is a. Divisional of U.S. patent application Ser. No. 09 692 031 filed Oct. 19 2000 now U.S. Pat. No. 7 236 970 which claims the benefit of the filing date of U.S. Provisional Patent Application Ser. No. 60 154 523 filed Oct. 19 1999 and entitled USER ADMINISTRATION FOR ON LINE POSTAGE SYSTEM the entire contents of which is hereby expressly incorporated by reference.

The present invention relates to secure printing of value bearing items VBI such as postage for letters and other items to be delivered by the United States Postal Service USPS . More specifically the invention relates to a system and method for validating addresses using a central address matching database with such address matching being conducted over a communications network.

A significant percentage of the United States Postal Service USPS revenue is from metered postage. Metered postage is generated by utilizing postage meters that print a special mark also known as postal indicia on mail pieces. Generally printing postage and any other VBI can be carried out by using mechanical meters or computer based systems. Conventionally a business or other entity will have a meter at its place of business and will use the meter to print postal indicia on mail pieces or on labels that are then affixed to the mail pieces.

With respect to computer based postage processing systems the USPS under the Information Based Indicia Program IBIP has published specifications for imp postage meters that identify a Postal Security Device PSI . The PSD in conjunction with the user s personal computer and printer functions as the IBIP postage meter. The USPS has published a number of documents describing the PSD specifications the indicia specifications and other related and relevant information. There are also security standards for printing other types of VBI such as coupons tickets gift certificates currency vouchers and the like.

One of the standards required by the USPS is that the address of the intended recipient of a piece of mail be verified by comparing the entered address with a database of valid addresses provided by the USPS. Conventionally this requires that the sender have the database installed on their local computer and compare the intended destination address with the addresses in the database. Moreover when the USPS provides anew release of addresses each sender is required to obtain the updated database to continue to validate addresses. Thus such a system can be burdensome to its users.

In addition since addresses vary widely in terms of number of elements in the address and various address formats address matching can be a difficult undertaking even with a current list of all valid addresses available to the sender.

Therefore it would be desirable to have a method and system for performing address matching from a single central location thereby doing away with the need for each remote user to maintain an updated database of valid addresses. In addition it would be desirable to have such a system and method that allows addresses to be validated once from a particular sender such that when the sender desires to use a previously validated address again there is no need to perform address matching a second time. Moreover it would be desirable to have a method and system that takes a desired address and manipulates the format into multiple structures before comparing the address with a set of valid addresses in order to increase the likelihood of obtaining a match. The present invention addresses these desirable features.

In accordance with one aspect of the present invention an address matching system that maintains a central database of valid addresses has been designed. According to the invention address matching requests are received by the system from a plurality of remote users via respective devices clients . Those requests are processed at the central system and the results are returned to the client that made the request.

In one embodiment the central system in cooperation with the client utilizes novel address matching techniques to increase the likelihood of finding a match for a received address. Preferably the invention utilizes one or more query permuters to arrange the address data in different formats in an effort to increase the likelihood of finding a match for a particular address.

In another aspect the invention describes a method for matching an address entered by a user with a database of valid addresses comprising receiving the address from a source accessing a database that contains one or more valid addresses comparing the address from the user with the database of valid addresses and storing information relating to the address in a companion file if a match is found.

In yet another embodiment the invention is directed to a method for validating an address comprising receiving the address from a source accessing a database of valid addresses comparing the address from the source with the database of valid addresses and storing selected information relating to the address in a companion file at the remote terminal if a match is found.

In still another embodiment the invention is directed to a method of validating an address comprising receiving address data in a particular format manipulating the data into a predetermined format corresponding to the particular format comparing data in the predetermined format with valid addresses in the database and presenting the results if one or more matches are found.

In another embodiment the invention is directed to a method for importing one or more addresses from a database of addresses where the database of addresses stores address data in a selected format. The method involves storing the one or more addresses at the database of addresses in the selected format receiving the address data along with identification data to identify at least a characteristic of the database of addresses processing the identification data and processing the address data in a particular manner based on the identification data corresponding to the database of addresses.

In yet another embodiment the invention is directed to a system for comparing a received address with a set of validated addresses. The system includes a remote device that maintains an internal address book in a particular data format. The remote device includes at least one address book provider that is operative to interact with an external address book the provider being operative to access data in the external address book and to provide data relating to the database structure format of the external address book. The system also includes an address matching server that maintains a database containing the set of validated addresses. The address matching server is capable of communication with the remote device via a communication network and is operative in response to receipt of the address data and the database structure format data from the remote device to process the address data compare the processed data with the set of validated addresses and transmit one or more matches to the remote device.

In still another embodiment the invention is directed to a method of comparing a received address with a set of validated addresses including identifying an address in an external address book accessing corresponding address data in the external address book with an address book provider that is operative to interface with the external address book checking the address data against a local companion file to determine whether the address is valid and validating the address at an address matching server that maintains a database of valid addresses if the result of the check with the local companion file does not validate the address.

In another embodiment the invention is directed to a method of comparing a received address with a set of validated addresses including identifying an address in an external address book accessing corresponding address data in the external address book with an address book provider and validating the address at a remote address matching server that maintains a database of valid addresses.

In yet another embodiment the invention is directed to a method of comparing a received address with a set of validated addresses including identifying an address in an external address book accessing corresponding address data in the external address book with an address book provider and validating the address at a server that maintains a database of valid addresses wherein validating comprises using one or more query permuters to process the address data.

Referring now to there is shown an address matching system according to one illustrative embodiment of the invention. The address matching system includes an address matching system AMS server that maintains a database of a set of validated addresses. The AMS server communicates with one or more remote terminals hereinafter referred to as clients . While only one client is shown in it will be understood that the system is capable of interaction with multiple clients through a suitable interface. The clients and AMS server engage in two way communication over a suitable communication network . In one embodiment communication network comprises the Internet. It will be understood by those skilled in the art that the communication network may take many different forms such as a local area network LAN wide area network WAN wired telephone network wireless network or any other network that supports data communication between respective entities.

The clients may take many different forms and in one illustrative embodiment comprise a personal computer and printer with the personal computer in one embodiment being in communication with a PSD either locally or over a communications network. Alternatively the clients may comprise computers or any other device that has processing capabilities and that may engage in communication over communication network . Other examples are wireless display devices cellular telephones and other mobile devices. The clients are preferably programmed to provide functionality to allow users senders to enter addresses in various format structures and to compare those addresses with the database of valid addresses. The functionality of the clients in verifying addresses is described in greater detail below in connection with and . The functionality of the client and PSD in printing postage indicia in one illustrative embodiment is described in more detail in pending application Ser. No. 09 651 390 entitled AVIRTUAL PRINTING OF INDICIA LOGOS AND GRAPHICS filed on Aug. 29 2000 the disclosure of which is hereby expressly incorporated by reference. An exemplary on line system is described in U.S. patent application Ser. No. 09 163 993 filed Sep. 15 1998 the entire contents of which are hereby expressly incorporated by reference.

AMS server will typically be associated with a web site that is accessible by each client using a suitable Uniform Resource Locator URL address or the like and will maintain a database of valid addresses which is accessed by the server in response to receipt of an address match request from a client along with address data corresponding to the address that a sender at client wishes to verify.

Referring now to the basic operation of the address matching system is described in more detail. Operation begins at step with a sender entering a destination address for a corresponding piece of mail into the associated client . shows a suitable user interface that client may present to user for input of the pertinent shipping information. User interface includes a pair of windows into which the user may enter delivery and return addresses in a free form i.e. without separating the address information into multiple fields . The user interface also includes a number of windows into which the user may enter postage information as is well known in the art.

At query block client determines whether the address has been previously validated. In one embodiment this is accomplished by accessing a companion file maintained by the client that stores selected information relating to each address that has previously been validated and by comparing the address data with the data stored in the companion file. This process is described in greater detail below in connection with .

If the address has been previously validated then operation proceeds to step and the address is suitable for use and client may use the address in a postage meter procedure. On the other hand if the address has not been previously validated then operation instead proceeds to step and client processes the address and then makes an address matching request to AMS server along with the processed address data. Processing of the address data can take many different forms as is described in greater detail below. An example of such processing is described below in connection with .

Operation then proceeds to step and AMS server compares the received address data with the data in database . As will be understood in the art each record in database will preferably consist of a plurality of elements or fields as will the received address data. Thus AMS server compares corresponding fields to determine whether one or more matches exists and the results are transmitted to the requesting client at step . The results are preferably presented to the user as a list such as the list shown in .

As used herein the term match does not require that the address data correspond identically to the data in database . Rather a match or at least a potential match may be declared where there is a substantial similarity between the address data and the data in one or more records. As is well known in the art a match can be declared when the two sets of data exceed some preset threshold. For example a match can be declared where each field exceeds some preset threshold. Alternatively a match can be declared where certain of the fields match identically such as the field that contains the city data and where the other fields exceed some threshold matching value. Thus it will be understood that a match can be declared in many different ways.

Operation then proceeds to query block and client determines whether there are more than one match in the results. If not then operation proceeds to step and the matched address may then be used by the client in a postage meter procedure. If on the other hand the AMS server returned more than one potential match then operation proceeds to step and the sender selects one of the potential addresses. Client then prepares an address match request with the address data from the selected address. The query is transmitted to AMS server . At step AMS server processes the request and transmits all necessary information relating to the single address to client which may then use the address in a postage meter procedure. Operation then terminates.

In one embodiment at step the AMS server employs an address filter to ensure that only a single address is returned to client i.e. in a match address single query . The filter only allows an address that exactly matches the input address to proceed to client . If there is no exact match then the filter blocks all addresses except for a default address as determined by server . When the filter analyzes a returned range based address it initially determines whether the contents of that result aside from the range match the corresponding contents in the original input address. If so the filter determines whether the ranged value lies within the range in the result address. If so then the filter considers the address identical and server passes the address back to client .

On the other hand if the contents of the result aside from the range do not match the corresponding contents in the original input address then the filter only passes a default address.

When the server returns the results to client some of the addresses may contain ranges e.g. 100 Main Street Suite . If that address is the one selected by the user client then requires user to select the correct number from the range e.g. Suite . That address is then transmitted back to server for cleansing and validation. For this query client utilizes at Matching Address Single query for validation and the results ensures a return of a Delivery Point Bar Code DPBC value. The Matching Address Single query is described in greater detail below.

In one embodiment AMS server returns the results of an address validation along with a result code to indicate to client the outcome of the validation process. For example the result code may indicate that the input address 1 is valid 2 is corrected 3 was not found 4 has multiple potential matches 5 includes an invalid number or street 6 includes an invalid city 7 includes an invalid state 8 includes an invalid ZIP code and the like. The result code may then be used by client accordingly.

In this manner system provides a server based address matching system that does not require each user to maintain a database of validated addresses. As the set of validated addresses changes only the central database at server requires updating. Each individual client need not update any list in their respective memories. In this manner system ensures that addresses may be properly validated as soon as database is modified. There is no need to rely upon each individual user at each client to update the respective machines.

As described above each client preferably maintains one or more companion files e.g. data files a database or any other suitable storage location in a memory to which is saved selected data for each validated address. In one embodiment the records in the companion file are purged when the client software determines that the record expiration date has expired thereby requiring that the previously validated addresses be validated again. In another embodiment each record includes an associated expiration date so that client may determine whether the record is valid or whether it has expired such that the address must be validated through AMS server .

In one illustrative embodiment client maintains a companion file for each address book with which client interacts. Thus client maintains a companion file for its own internal address book and plural companion files for respective external address books as is described in more detail below. Each address book generates a unique address identity for each address record. The address identity data is stored in the companion file as a data record. In one embodiment each record in the companion file also includes a plurality of data members including 1 ZIP code 2 Address Hash 3 Address Hash Size 4 Address Identity 5 Expiration date and 6 Archive Version. The ZIP code is preferably the full twelve digit ZIP code ZIP plus add on plus delivery point plus check digit or the five digit ZIP code if the AMS server did not assign an add on to the validated address.

The Address Hash is the hash value for the last two printed lines all in upper case of the address when it was validated. As is well known in the art a hash value is a number generated from a string of text. The hash value is substantially smaller than the text itself and is generated by a formula in such a way that it is extremely unlikely that some other text will produce the same hash value. The Address Hash size is the actual size in bytes of the Address Hash value.

The Address Identity data member is a key that uniquely identifies the address to which the companion record corresponds in an address book database to associate the address in an address book with the companion record in the companion file for that address book. As described above client preferably maintains a companion file for each address book.

The Expiration date in one embodiment corresponds to the expiration date of the AMS database used to cleanse the address. The AMS server provides this date as part of the output of each address matching transaction. The expiration date is the date at which the address validation expires for the corresponding record. After that date the address is no longer considered valid even if the user has not altered it and the hash values match.

The Archive Version is a version number for the respective record format. If a change is made to the companion record format the software can identify old records and new records based on the Archive Version information which is used to ease future changes to the format of companion file records. In one embodiment the Archive Version number is used in conjunction with the MicrosoftFoundation Classes object serialization feature which is used to read and write companion files .

Referring now to operation of system and in particular client in connection with validating an address from an address book is described in more detail. Operation begins at step with the user selecting a desired destination address from an address book at client . At query block client determines whether there is a corresponding record in the companion file for the selected address. In one embodiment this is accomplished by accessing the Address Identity values in the companion file to determine whether there is an associated record for the selected address. If not operation proceeds to step and the selected address must be validated through AMS server . System then proceeds through the process shown in and described above.

On the other hand if there is an associated record in the companion file the operation proceeds to query block and client determines whether the record in the companion file is expired for example by reviewing the Expiration date data member stored in the companion file record. If the record has expired then the record is stale and operation proceeds to step . If the record is instead extant then operation proceeds to query block and client determines whether the address has been altered by the user. Preferably this is accomplished by comparing hash values for the selected address and the record in the companion file. In one embodiment the hash value is generated from the last two lines of the address e.g. street and city state ZIP and the hash value is compared to the recorded hash value in the record. If the hash values match then operation proceeds to step and the selected address is still valid. If the hash values do not match then operation proceeds to step and the address must be validated through AMS server .

In one embodiment each client maintains an internal address book i.e. a data file that contains address records stored in a preselected format. For example the address book may include the following element fields for each record in a specific order Name Title Street Address City State and Zip Code. This order is the internal canonical schema supported by system .

System also provides software resident at each client that allows for the importation of address data from various third party address books into the address book maintained by client . In one illustrative embodiment client maintains a plurality of address book providers with each provider being operative to interface with a corresponding external address book application in another embodiment for example in the case of address books that do not have an associated provider the importation of addresses relies on comma separated value CSV files. As is understood by those skilled in the art many software applications can generate CSV files that contain data in fields separated by commas.

Operation of the system in importing CSV files is now described in connection with . Operation commences at step with a user at client requesting to import one or more addresses from a third party address book. At step the user selects the CSV file s to import from a list of CSV files stored in memory or in any other suitable manner. Client then prompts the user to select the address book application used to store the CSV file and at step the user enters such information. Client maintains a set of data corresponding to field types and field sequence for each address book application. For example one address book application may designate five fields for each address record in a selected order such as name organization street address city and state and ZIP code. Another address book application may include the name and organization in one field and separate the city and state into different fields. Thus client is preferably programmed with such information for various address book applications.

Operation then proceeds to step and client receives the CSV file s from the file system and also retrieves the appropriate format information based on the address book application identified by the user. Client then parses through the data in the CSV file s reading the data for the respective fields and inserting the data into a format that is supported by client and that is suitable for storage in the native address book database of system . As is known in the art the USPS address matching service supports a particular schema format in which the first field contains data relating to Address Line 1 e.g. street address the second field contains data relating to Address Line 2 e.g. Post Office Box number and a firm or organization name the third field contains data relating to the city the fourth field contains data relating to the state and the fifth field contains data relating to the ZIP code.

Thus client determines based on the address book application used to create the address record which portion of the CSV data maps to the native address book database supported by system . Then this data is mapped to canonical fields as all other address book databases are accessed through the respective address book providers as is described in more detail below.

Operation then proceeds to query block and client determines whether the user wishes to validate one or more of the addresses via AMS server . If so then system performs the validation process as is described above in connection with . If not then operation terminates.

If the user wishes to validate an address client determines whether a match has been found for each address that the user wishes to validate. As described above the validation process may include transmitting a list of potential matches to client for display to the user and then allowing the user to select from that list to create a match. If a match is found the address data is added to the address book maintained by client and information relating to the matched address is stored in the companion file as described above.

As described in more detail below when client is provided with a list of potential address matches the user then may select one of the addresses from the list. Once the user selects one of the addresses server is queried again using one or more permuters as are described in more detail below. Server then returns a validated cleansed address that is stored in the appropriate address book and the appropriate updates are made to the corresponding companion file.

On the other hand if there are no matches found for one or more of the addresses client determines whether the user wishes to correct the address information for the unapproved address or addresses by displaying a suitable graphic on the screen and allowing the user to decide whether to correct the address es or not. If not then the non approved address data is discarded. If the user does wish to correct an address then client receives such information from the user. In one embodiment client displays a suitable graphic with plural fields windows into which the user may enter or modify data as is shown in . Once the user has entered the changes client once again attempts to validate the address via AMS server .

Referring now to there is shown another illustrative embodiment of system . In this embodiment system maintains one or more external address book application programming interface API providers hereinafter address book providers . Each address book provider is designed to natively support a corresponding external address book such that the address data at each external address book need not be stored in CSV or some other format prior to introduction to client . In one illustrative embodiment the address book providers are COM components that are installed by client . For example one or more of the address book providers are built on Extended Systems Harmony translator API that enables direct address book database traversal. Other providers may be based on Messaging Application Programming Interface MAPI protocol. When each address book provider is installed the provider registers in a suitable registry such as Windows registry using the COM category API.

Each address book provider is designed to interface between the client address book component and the respective external address book component which allows for dynamically modifying data in the corresponding address book without the need for making a copy of the data contained in the external address book. Each provider allows access to the database or databases of the respective external address book and provides the mechanism for translating in both directions between the external address book s database structure and the internal canonical schema of system e.g. data or other instructions that serve to identify the pertinent characteristics of the external address book . This then allows for entering addresses through system and writing them to an external address book or reading address data from one or more external address books and processing the address data at server to map the address data into a data structure that has the appropriate format for comparison with the set of validated addresses maintained by server .

When an address book provider is loaded it reports its schema representation to client and for each field in its schema the provider communicates 1 the name of the field 2 a canonical field name to which the field is mapped 3 data type e.g. string 4 data size and 5 attributes of that field. Thus when address data is read from a particular address book and such data is made available to client client may pass that information on to server along with schema representation information to server so that server may intelligently process the incoming address data.

The internal address book component of client provides a canonical schema into which the addresses from the respective external address books are formatted. The canonical schema is the symbolic representation of all postal address fields that are encountered in the respective external address books. These fields identify the semantics of the postal fields used for a particular address book. depicts the canonical field names encountered for various address books.

As described above client transmits an address validation request to AMS server along with the address data in a format that is compatible with the internal canonical schema. However it will be understood by those skilled in the art that a match may still be hard to obtain in the first stage because of different formats that AMS server must attempt to map to the USPS supported format.

In order to increase the likelihood of obtaining one or more matches system provides a set of query permutations to configure the input address in various formats to enhance the likelihood of obtaining one or more matches. In one illustrative embodiment system utilizes three different permuting techniques to map different schema formats to the USPS supported schema namely a direct permuter a single line permuter and a truncate permuter. Thus a structured address is processed prior to transmission to AMS server using the three permuters to increase the chance of finding a match for the address. Each permuter attempts to map the available input fields to the USPS supported schema but with a slightly different form. It will be understood that more or less permuters can be used.

The direct permuter directly maps the input data to the USPS supported schema. schematically shows a direct permutation process performed on an address record consisting of three address line fields in which the order of the first and second fields is switched and the third field Address Line 3 is mapped to respective City State and ZIP code fields in the internal canonical schema of system .

The single line permuter is used when the street address information is not contained on a single line for example when the suite number is on its own line. The single line permuter appends the Address Line 2 data to Address Line 1 to create a single line for street address data. schematically shows such a permutation process.

The truncate permuter receives the direct permuter output and analyzes the first address line to determine whether to modify the data in that line. is a flow chart showing the process steps of the truncate permuter. Operation begins at step and the first address line from the direct permuter output is taken. At query block client determines whether there are three or fewer tokens in the address line. As used herein a token is defined as an element that is separated from other elements by commas periods tabs spaces apostrophes quotes colons or semicolons.

If there are three or fewer tokens in the line then operation proceeds to step and the truncate permuter does not modify the address line and operation ends. On the other hand if there are more than three tokens in the address line then operation instead proceeds to step and client compares the fourth through last tokens in the address line with a list of common abbreviations. For example the address line may be 123 South Main St. . The fourth token is St which is found in the list of common abbreviations. The list of common abbreviations will also include other well known abbreviations such as Ave Blvd NW SW and the like.

Then at query block client determines whether there is a match. If not operation proceeds to step and only the first three tokens are kept and the fourth through last tokens are deleted from the address line. If there is a match in one of the fourth through last tokens then operation instead proceeds to step and all tokens after the matched token are dropped. For example 123 South Main St. Harbor Marina becomes 123 South Main St. . This modified address is then added to the ordered permuted address list for validation at AMS server .

As described above each external address book has its own unique set of fields some of which are not mapped to the USPS supported schema. The data in those fields is preferably saved by AMS server in memory during the permutation and address validation process. Then when a validated address is returned to client the data is reincorporated into the final address. For example the external address book may have fields for Title and Department which are not contained in the LISPS supported schema. Thus the data in those fields is removed during the conversion into the LISPS supported schema. Once a valid address is returned the data is reincorporated into the address that is presented to the user.

Typically when multiple matches are returned to client the results do not include Delivery Point Bar Code DPBC values. Thus when a user selects one of the addresses a second query is transmitted to AMS server to retrieve all necessary information concerning the selected address including a DPBC value. In another embodiment AMS server is programmed to return a DPBC value for each output address transmitted to client . In yet another embodiment AMS server compares the input 9 digit ZIP code with the ZIP code of each output address. For each output address whose ZIP code matches the input ZIP code the DPBC value is retrieved and transmitted for each output address.

In one embodiment system ranks each of the potential matches according to the following criteria 1 when only a single address is returned no ranking is necessary 2 all multiple addresses are returned with a default ranking of possible 3 addresses that match the firm name or ZIP code are ranked as better . Ranking is preferably performed by a series of conventional ranking agents such as those that determine if an address matches the input address Firm Name or ZIP code.

From the foregoing it will be apparent to those skilled in the art that the system and method of the present invention provide for validating addresses through a central server. The system and method also provide novel techniques for improving the outcome of such address validating procedures.

While the above description contains many specific features of the invention these should not be construed as limitations on the scope of the invention but rather as exemplary embodiments thereof. Many other variations are possible. Accordingly the scope of the invention should be determined not by the embodiments illustrated but by the appended claims and their legal equivalents.

