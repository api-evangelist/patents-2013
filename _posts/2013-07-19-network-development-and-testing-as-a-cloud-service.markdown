---

title: Network development and testing as a cloud service
abstract: Presented herein are techniques to receive configuration instructions for elements of a network topology to be simulated and tested. In response to receiving and in accordance with the configuration instructions, a plurality of software images (for a plurality of virtual network elements of the network topology) are configured via an Application Programming Interface (API). The plurality of software images run in a cloud host. In response to receiving and in accordance with the configuration instructions, data is configured via the API, which represents one or more connections between the virtual network elements. A plurality of software images for the plurality of virtual network elements is then executed in accordance with the data representing the connections, for development and testing of the network topology.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183121&OS=09183121&RS=09183121
owner: Cisco Technology, Inc.
number: 09183121
owner_city: San Jose
owner_country: US
publication_date: 20130719
---
Software Development Kits SDKs are a set of software tools that enable developers to access extend or customize certain software applications such as those utilized by network routers and switches. Network developers using a SDK need the ability to test these software applications either on physical or software virtual routers and switches.

Currently virtual routers and switch simulations are limited to process simulations which do not execute software that is directly deployable on a physical router and switch. Further such process simulations are typically configured via static configuration files. In order to modify the topology of a test network the entire topology must be taken down in order to update the configuration files.

Presented herein are techniques to receive configuration instructions for elements of a network topology to be simulated and tested. In response to receiving and in accordance with the configuration instructions a plurality of software images for a plurality of virtual network elements of the network topology are configured via an Application Programming Interface API . The plurality of software images run in a cloud. In response to receiving and in accordance with the configuration instructions data which represents one or more connections between the virtual network elements is configured via the API. A plurality of software images for the plurality of virtual network elements are then executed in accordance with the data representing the connections for development and testing of the network topology.

Referring first to a system for a cloud hosted sandbox environment is shown. The network development and testing environment is hosted in a cloud shown at reference numeral . The cloud hosted sandbox environment includes a hosted development portion and a hosted test network portion . The hosted development portion includes software to serve as or emulate a development machine . The hosted test network portion includes software to serve as or emulate a test pattern generator and software that emulates various network elements for example routers and and switches and as well as connections between the network elements as collectively shown at reference numeral .

A network developer i.e. user is shown at reference numeral and uses an endpoint such as desktop laptop tablet computer mobile phone to access the cloud hosted sandbox environment .

The network or cloud may consist of one or more wired and or wireless local and or wide area networks. The hosted development portion and hosted test network portion are depicted as being hosted in a network or cloud although it would be possible to execute the development portion and test network portion outside of a network environment and solely on an endpoint device e.g. endpoint device . The user may access and or log into development machine . The development machine may interface with hosted test network portion . The test traffic generator may be embodied as software running on the development machine or endpoint device .

In one embodiment the software used for the virtual network elements of the hosted test network portion may be actual deployable software used for software virtualized network devices that are commercially available subject to licensing fees and restrictions. In addition the software used for the virtual network elements of the hosted test network portion may be deployable software used in physical network elements also commercially available subject to licensing fees and restrictions. In using software of this type for the network elements in the hosted test network portion it is ensured that the test network identically matches a real world physical or virtual network topology.

As shown in the hosted development portion and hosted test network portion may be hosted within cloud hosted sandbox environment . A sandbox is a software development entity that allows a network developer to isolate untested or suspect code from live production environments. A sandbox replicates the functionality of a production environment at least to the extent that accurate testing may occur. In using a sandbox production environments are protected from damage that may occur from network elements that have not yet completed development and testing.

Another advantage of a sandbox relates to protection of intellectual property. Commonly SDKs that may include test environments are made available for free by vendors. If the software for the network elements emulated in the test environment were supplied to a network developer the developer could potentially use that software to build a real world virtual network making use of virtual routers and switches and associated libraries without having to pay any licensing fees. A sandbox environment allows a plurality of potentially separately licensable features such as libraries and virtual routers and switches to be bundled together for use in a cloud and without the need to be released into the possession of developers . This reduces unauthorized use of the software for the virtual network elements.

The test traffic generator may generate test network traffic to be supplied to the hosted test network. The SDN connections may be represented implemented as Application Programming Interfaces APIs as will be further described herein. While testing the test traffic generator may generate traffic across the test topology . This traffic may be in the form of packets frames etc. and the behavior of the network elements and the test topology overall may be monitored throughout testing and reports generated therefrom. The reports from the test traffic generator may contain statistics detailing the network operation at the various levels of the networking stack. This will include information concerning for example complete incomplete dropped Hypertext Transfer Protocol HTTP GET requests at the presentation level good missing bad checksum packets and bytes at the layer two frame level. The API is able to query each of the simulated network elements to gather further information about where the network failure has occurred.

Turning now to an example embodiment is shown that further illustrates how a network developer may set up a test topology containing network elements. For simplicity shows only two network elements router and switch . This is only an example. A network developer accesses the development machine . The development machine includes a configuration system and network APIs . The configuration system is software that allows the network developer to create configure and delete etc. network elements and connections between the network elements. Associated with each network element is a network API and a custom driver. For example switch includes a network API and a custom driver and router includes a network API and custom driver .

The development machine forwards commands via APIs across SDN control connections to the APIs for each network element in this example to network API of router and network API of switch . The API commands may for example specify port connections between network devices. For example the API commands may specify that a port on router is forward to a port on switch thus creating connection of the test topology . The APIs thus form what could be called the Orchestration Layer while the custom drivers and connections form the Packet Layer by which the data is actually transferred.

As explained above the network elements and are virtual and the connection is virtual as well lacking any physical networking cable because they are software images representing such physical elements. The network elements may be virtual machines executing software images wherein the software images may include network operating systems. The network operating systems may be for example Cisco IOS Internetwork Operating System IOS XR NX OS etc. The network operating systems may have device drivers. Device drivers are low level software components that in a physical network element interact with ports and other hardware physical devices. However since the network elements are virtual machines and the connections of the test topology are virtual the custom drivers e.g. customer drivers and are not in fact communicating with hardware devices. Rather the custom drivers and are custom drivers that identically or substantially identically emulate the behavior of the physical layer hardware layer of a physical network device. Virtual machines acting as network elements may forward packets frames to each other via this custom driver fabric. Due to this emulation a network operating system executing on a network element does not know that there is no physical layer or that it is running on a virtual machine. This is to say the network operating system could be installed on a hardware router or hardware switch and behave identically to its behavior in the hosted test network portion . This fact is important to a network developer who may be customizing extending and testing the network operating system for later use on physical or virtual routers and switches.

An example of the user interface that may be used for example by network developer to develop a test topology via development machine is shown generally at reference numeral in . The graphical user interface GUI includes a development consoles and and a test topology window . Development consoles allow the network developer to define properties and characteristics of network elements in the test topology window . These development consoles may be terminal command prompts or GUIs etc. Commands are generated from the GUI that are supplied to the cloud hosted sandbox environment . The test topology window includes a plurality of network elements along with connections that define the test topology. Using this interface a network developer or other user may design the layout for a test configuration of a network topology execute network traffic via traffic generator and view the test results.

One advantage of the setup of is that the development and testing environments are made available for development and testing in a single interface via a single unitary API which has not been possible in previous network simulation techniques.

One advantage of using APIs to create extend configure and delete network elements and connections from a topology is that the topology may be left up or online during the dynamically made changes. In prior existing network simulation testing systems network elements such as routers and switches in network simulations are merely software processes using static configuration files typically lacking a routing stack. In order to change the behavior of the network elements the network topology would have to be brought down in order to access and modify the static configuration files.

The API or Orchestration Layer may also communicate with a custom driver API on each network element. The custom driver API allows a network developer or other user to define connections between network elements.

Reference is now made to which shows examples of properties of a custom driver. Properties of the custom driver include standard properties found on typical hardware physical network elements and custom properties which among other things help define the emulated physical layer. The standard properties include the speed of the connection and whether duplex communication is active on a given port which allows bidirectional transmission between a network element and its link partner. The cable length on a given port may also be set. If the keepalives property is activated a service will periodically check if there is a network connection and reestablish it if necessary. Custom properties may include a connection peer which defines which network element is the link partner on a given port. The packet loss percentage may also be defined which helps mimic real world packet frame data loss. The reliability of the connection may also be defined. The connection may also be defined as a point to point one network element to another connection or a point to multipoint one network element to many or broadcast communication topology connection. The reliability custom property is a way of representing complete connectivity outage for that particular driver. For example if the interface had a reliability of 50 it would be expected that half the time the link would be down and unable to participate in the network topology.

A flowchart to provide an overview of the behavior of system is now described with reference to . At a customer or network developer logs in signs up for access to the development environment. The system may then create a sandbox environment at which as discussed previously is typically a development and testing environment that is isolated from a production environment. The sandbox environment is containerized that is private to the customer i.e. there may be many sandbox environments running simultaneously in the cloud that are all isolated from each other. At the network developer may then select a development environment which may comprise selecting SDKs that are relevant to their development goals. The system then creates the development environment with all the necessary tools and SDKs for the customer user to develop their applications. For example the network developer may select a network operating system development SDK in order to customize a router switch or some other network element. The network developer may then begin using for example the user interface of to develop a network topology for testing as depicted at steps and . For example at the network developer creates a set of virtual routers and switches in the test topology by programming the network level drivers with connectivity information. The test traffic generator may then generate traffic in the testing phase at . A variety of use cases may be tested at to determine whether they adequately test the use case. If the topology does not adequately test a particular use case the topology may need to be modified in some respects back at . If the topology does test a particular use case other use cases may be tested until development and testing is complete.

The software and or data may contain instructions that when executed by the processor cause the processor to implement the operations presented herein in connection with . Thus in general the memory may comprise one or more tangible non transitory computer readable storage media e.g. a memory device encoded with software comprising computer executable instructions and when the software is executed by the processor it is operable to perform the operations described herein.

In summary a method is provided comprising receiving configuration instructions for elements of a network topology to be simulated and tested configuring via an Application Programming Interface API in response to receiving and in accordance with the configuration instructions a plurality of software images running in a cloud host for a plurality of virtual network elements in the network topology configuring via the API in response to receiving and in accordance with the configuration instructions data representing one or more connections between the virtual network elements and executing the plurality of software images for the plurality of virtual network elements in accordance with the data representing the connections for development and testing of the network topology.

Further an apparatus is provided comprising a network interface unit configured to enable communications over a network a processor coupled to the network interface unit and configured to receive configuration instructions for elements of a network topology to be simulated and tested configure via an API in response to receiving and in accordance with the configuration instructions a plurality of software images for a plurality of virtual network elements in the network topology configure via the API in response to receiving and in accordance with the configuration instructions data representing one or more connections between the virtual network elements execute the plurality of software images for the plurality of virtual network elements in accordance with the data representing the connections for development and testing of the network topology.

Further a computer readable storage media is encoded which comprises computer executable instructions and when the software is executed operable to receive configuration instructions for elements of a network topology to be simulated and tested configure via an Application Programming Interface API in response to receiving and in accordance with the configuration instructions a plurality of software images running in a cloud host for a plurality of virtual network elements in the network topology configure via the API in response to receiving and in accordance with the configuration instructions data representing one or more connections between the virtual network elements execute the plurality of software images for the plurality of virtual network elements in accordance with the data representing the connections for development and testing of the network topology.

The techniques presented herein overcome deficiencies of prior systems in which network developers must use several different interfaces to configure virtual machines define port configurations set networking device parameters run test traffic etc. Furthermore the system presented herein does not allow network developers access to underlying network element software images which could undermine the sale of licenses for virtual routers and switches and associated libraries.

