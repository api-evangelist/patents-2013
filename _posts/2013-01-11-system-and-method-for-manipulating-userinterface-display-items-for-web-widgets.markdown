---

title: System and method for manipulating user-interface display items for web widgets
abstract: In one embodiment, a method includes receiving a request for web-widget manipulation. The request includes a scope of manipulation. The method further includes identifying at least one managed web widget as being covered by the scope of manipulation. In addition, the method includes identifying at least one instance of the at least one managed web widget as being covered by the scope of manipulation. Further, the method includes extracting a plurality of user-interface (UI) display items relative to the at least one managed web widget and the at least one instance. The plurality of UI display items includes at least one global UI display item and at least one website-level UI display item.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09389879&OS=09389879&RS=09389879
owner: Dell Products L.P.
number: 09389879
owner_city: Round Rock
owner_country: US
publication_date: 20130111
---
The present invention relates generally to content management and more particularly but not by way of limitation to systems and methods for manipulating user interface display items for web widgets.

In content management systems based on for example Microsoft SharePoint web widgets known as web parts are frequently deployed that provide additional features and functionality to a web user interface UI . Web widgets can include for example form builders calendars media viewers and the like. Web widgets are typically utilized in a customized form by owners of websites. On any given content management system a web widget may be deployed on thousands of websites and therefore may have many thousands of distinct customizations. It is sometimes desirable to manipulate all instances of a web widget en masse. For example it may be necessary to translate UI display items for the web widget into another language such as Spanish. Typically the only way all instances of the web widget can be manipulated en masse is by replacing the web widget with a new version. However this solution results in all website customizations being lost.

Moreover as the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

In one embodiment a method includes on an information handling system receiving a request for web widget manipulation. The request includes a scope of manipulation. The method further includes identifying by the information handling system at least one managed web widget as being covered by the scope of manipulation. In addition the method includes identifying by the information handling system at least one instance of the at least one managed web widget as being covered by the scope of manipulation. Further the method includes extracting by the information handling system a plurality of user interface UI display items relative to the at least one managed web widget and the at least one instance. The plurality of UI display items includes at least one global UI display item and at least one website level UI display item.

In one embodiment an information handling system includes a processing unit. The processing unit is operable to receive a request for web widget manipulation. The request includes a scope of manipulation. The processing unit is further operable to identify at least one managed web widget as being covered by the scope of manipulation. In addition the processing unit is operable to identify at least one instance of the at least one managed web widget as being covered by the scope of manipulation. Further the processing unit is operable to extract a plurality of user interface UI display items relative to the at least one managed web widget and the at least one instance. The plurality of UI display items comprises at least one global UI display item and at least one website level UI display item.

In one embodiment a computer program product includes a computer usable medium having computer readable program code embodied therein. The computer readable program code is adapted to be executed to implement a method. The method includes receiving a request for web widget manipulation. The request includes a scope of manipulation. The method further includes identifying at least one managed web widget as being covered by the scope of manipulation. In addition the method includes identifying at least one instance of the at least one managed web widget as being covered by the scope of manipulation. Further the method includes extracting a plurality of user interface UI display items relative to the at least one managed web widget and the at least one instance. The plurality of UI display items includes at least one global UI display item and at least one website level UI display item.

In various embodiments user interface UI display items of managed web widgets can be manipulated more comprehensively and without loss of website customizations via principles described herein. In a typical embodiment UI display items are systematically extracted at both a global level and a website level. The extracted UI display items can then be manipulated in a desired fashion and made accessible in the manipulated form to end users. As described in more detail below in a typical embodiment the extraction manipulation and accessibility can be accomplished automatically across myriads of websites that may utilize a given web widget.

For purposes of this patent application a web widget often referred to herein simply as a widget is a reusable software application that can be embedded within a website. Web widgets can include for example form builders calendars media viewers and the like. A managed web widget which may be periodically referenced herein simply as a managed widget is a web widget that is centrally maintained on a content management system for use by websites hosted thereby. Each use of a managed web widget by a website may be referenced herein as an instance of that managed web widget.

A content management system as used herein is a system that allows publishing editing modifying and or maintenance of content from a central interface. The content management system can be based on for example Microsoft SharePoint. Content management systems typically maintain a compiled widget assembly for each managed web widget. A compiled widget assembly as used herein is a deployable package for a web widget that has been compiled from source code. For example according to the Common Language Infrastructure CLI of the Microsoft .NET framework a compiled widget assembly could include one or more library assemblies e.g. dynamic link library DLL files .

A UI display item as used herein refers to a readable identifier such as text or a graphic that is presented to a user for example of a website. UI display items are generally identified by a key and generally have at least one value such as for example a text string in a language such as English. A manipulated UI display item refers to a UI display item that has been given a new or additional value such as for example a value resulting from translation into a different language. For purposes of this patent application a widget manipulator application is a software application that produces manipulated UI display items.

For purposes of this disclosure an information handling system may include any instrumentality or aggregate of instrumentalities operable to compute calculate determine classify process transmit receive retrieve originate switch store display communicate manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control or other purposes. For example an information handling system may be a personal computer e.g. desktop or laptop tablet computer mobile device e.g. personal digital assistant PDA or smart phone server e.g. blade server or rack server a network storage device or any other suitable device and may vary in size shape performance functionality and price. The information handling system may include random access memory RAM one or more processing resources such as a central processing unit CPU or hardware or software control logic ROM and or other types of nonvolatile memory. Additional components of the information handling system may include one or more disk drives one or more network ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse touchscreen and or a video display. The information handling system may also include one or more buses operable to transmit communications between the various hardware components.

The front end server farm is shown to include front end servers and . Although three front end servers are shown for illustrative purposes any number of physical or virtual server computers may be utilized in a given implementation. In addition it should be appreciated that that the content management system may also include additional servers and databases to perform for example back end functionality i.e. functionality that is not end user facing . As described in more detail with respect to the front end server farm is operable to manage web widgets extract and manipulate UI display items for the managed web widgets and make the manipulated UI display items accessible to end users.

The front end server farm centrally manages a set of managed widgets that are available for use by the websites . The managed widgets include a set of compiled widget assemblies . The compiled widget assemblies typically include a compiled widget assembly for each managed widget of the managed widgets . Each of the managed widgets is typically identified by a globally unique identifier GUID . The websites collectively maintain pointers to the compiled widget assemblies . In particular each website of the websites that utilizes a given widget of the managed widgets contains a pointer of the pointers that directs the website to an appropriate compiled assembly of the compiled widget assemblies . In that way the pointers ensure that the websites correctly invoke the compiled widget assemblies .

The front end server farm typically manages the websites according to a management hierarchy that for example groups websites into collections and or allows websites to have subsites. The management hierarchy permits manipulation functionality described herein to be applied to websites and subsites individually or collectively. An example of the management hierarchy will be described with respect to . The websites typically have widget site configurations that customize the managed widgets for the websites . The widget site configurations can include for example additional UI display items that are not defined by the compiled widget assemblies . In various embodiment the widget site configurations may be embedded as HTML within the web sites or for example stored as XML. Therefore in various embodiments there may be for example many thousands of instances of a given managed widget of the managed widgets with each instance having a pointer in the pointers and customizations in the widget site configurations .

In addition the front end server farm has a widget manipulator application resident and executing thereon. The widget manipulator application is operable to acquire and manipulate UI display items of the managed widgets . In a typical embodiment the widget manipulator application acquires the UI display items via extraction from the compiled widget assemblies and the widget site configurations . In that way the UI display items can be obtained at a global level i.e. the compiled widget assemblies and at a website level i.e. the widget site configurations . For ease of reference UI display items obtained at a global level may be referenced herein as global UI display items. Similarly UI display items obtained at a website level may be referenced herein as website level UI display items. As described in greater detail below and with respect to the ensuing Figures this functionality enables UI display items to be manipulated across all instances of a given web widget.

In a typical embodiment each of the UI display items is uniquely identified by a key and has at least one original value such as for example a text string. In a typical embodiment the widget manipulator application manipulates the UI display items by creating at least one new or additional value for each key. For example the new or additional value can be a translation of a given text string into a different language. After manipulating the UI display items the widget manipulator application can further create a new compiled widget assembly that is stored within the compiled widget assemblies i.e. published . The widget manipulation application also updates the widget site configurations . In a typical embodiment the widget manipulator application redirects an appropriate pointer of the pointers to point to the new compiled widget assembly. Subsequently the web applications is typically restarted. In a typical embodiment publishing the new compiled widget assembly updating the widget site configurations redirecting the appropriate pointer and restarting the web applications collectively result in the manipulated UI display items being made accessible to end users. Examples of extraction manipulation and accessibility by redirection will be described in greater detail with respect to the ensuing Figures.

Each of the top level websites represents components and resources used to create and manage a website such as for example themes and access to files folders and managed web widgets. The site collections are above the top level websites in the management hierarchy . Each of the site collections includes a subset of the top level websites that can be managed or manipulated as a group. The subsites are beneath the top level websites in the management hierarchy . Each subsite of the subsites is related to a top level website of the top level websites . However the subsites like the top level websites have access to files folders and managed web widgets.

The top level websites and the subsites collectively maintain widget site configurations that customize managed widgets utilized by those sites. In various embodiments the widget site configurations can be for example embedded as HTML within the top level websites and the subsites as appropriate. In various other embodiments the widget site configurations can be represented as XML either within the top level websites and the subsites as appropriate or separately therefrom.

The compiled widget assembly includes a resource library file that can be for example a library assembly file that is in a binary format e.g. a DLL file . As described in greater detail below the widget manipulator application is operable to extract global UI display items and associated values from the resource library file . Although only the resource library file is illustrated in various embodiments the compiled widget assembly can include a plurality of resource library files with the widget manipulator application being operable to extract a separate set of values for the global UI display items from each resource library file. Prior to initiation of the widget manipulator application the website contains a pointer to the compiled widget assembly . Additionally prior to manipulation the website includes widget site configurations for the web widget instance. The widget site configurations can include website level UI display items embodying customizations of the managed widget and more particularly the compiled widget assembly

The uncompiled widget assembly generally corresponds to source code for the managed widget. The uncompiled widget assembly includes a resource file that lists global UI display items and associated values for the managed widget. The resource file can be represented for example in XML format. Although only the resource file is illustrated in various embodiments the uncompiled widget assembly can include a plurality of resource files with each resource file including a separate set of values for the global UI display items.

In a typical embodiment the uncompiled widget assembly is shielded from access by third parties. For example in various embodiments the widget manipulator application may have the uncompiled widget assembly embedded and hidden therein. In various other embodiments the widget manipulator application may have built therein an access key that allows the widget manipulator application to access and or decrypt the uncompiled widget assembly . In these embodiments the uncompiled widget assembly may be stored and maintained by a third party software vendor of the managed widget alternatively the uncompiled widget assembly may be stored and maintained in encrypted form by a front end server farm such as for example the front end server farms and of respectively.

Once manipulation of the web widget instance is initiated the widget manipulator application acquires the compiled widget assembly the widget site configurations and the uncompiled widget assembly . In various embodiments the widget manipulator application extracts the global UI display items from the resource library file . However in various other embodiments the global UI display items instead may be extracted from the resource file contained within the uncompiled widget assembly

In addition to the global UI display items the widget manipulator application extracts website level UI display items from the widget site configurations . The global UI display items and the website level UI display items can then be manipulated by the widget manipulator application . In various embodiments the manipulation can include development of translated values e.g. resulting from translation into another language simple replacement of values or the like.

In a typical embodiment after the manipulation the widget manipulator application creates a new uncompiled widget assembly that contains the resource file and a new resource file . The new resource file in a typical embodiment contains values corresponding to the manipulated global UI display items. Subsequently the widget manipulator application compiles the new uncompiled widget assembly to yield a new compiled widget assembly . The new compiled widget assembly includes a new resource library file that as described with respect to the resource library file is in a binary format. The new resource library file includes in the binary format the global UI display items.

In a typical embodiment the widget manipulator application makes the manipulated UI display items accessible to end users. In particular the widget manipulator application updates the widget site configurations based on the manipulated website level UI display items to yield new widget site configurations . In addition the new compiled widget assembly is published by being centrally stored among other compiled widget assemblies such as for example the compiled widget assemblies of . Thereafter relative to the managed widget the widget manipulator application redirects the website to point to the new compiled widget assembly via a new pointer . The new pointer replaces the pointer . Once web applications such as for example the web applications of are restarted the website and the managed widget as manipulated are accessible to end users.

At step the widget manipulator application receives a request for manipulation from a requestor. The requestor may be for example a website owner an administrator for a content management system a web widget vendor or the like. In a typical embodiment the request is received via a web UI provided by the widget manipulator application. From the process proceeds to step .

At step the widget manipulator application determines a scope of manipulation. For example in various embodiments the request may conform to a website management hierarchy such as for example the website management hierarchy of . According to this example the request may specify that the scope of manipulation includes all managed widgets for a given website or collection of websites. By way of further example the request may specify that the scope of manipulation includes all instances of a given web widget or a selected group of web widgets. From step the process proceeds to step .

At step the widget manipulator application receives a selection of a manipulation type. In various embodiments the manipulation type can be a translation from a first language such as for example English to a second language such as for example Spanish. In a typical embodiment the manipulation type is solicited and received from the requestor via the web UI provided by the widget manipulator application. From step the process proceeds to step .

At step the widget manipulator application identifies all widgets within the scope of manipulation. If the request for manipulation specifies a particular widget the widget manipulator application only identifies that widget at step . However if for example the scope of manipulation specifies a collection of websites the widget manipulator application identifies all web widgets utilized by those websites. From step the process proceeds to step .

At step the widget manipulator application selects a first widget from among the widgets identified at step . From step the process proceeds to step . At step the widget manipulator application identifies all instances of the selected widget that are within the scope of manipulation. In a typical embodiment instances of each web widget can be identified by a name associated therewith. For example in various embodiments each instance s name can include a GUID for the web widget that is appended with a unique ID e.g. a numerical ID for the instance. Optionally the identified instances can be presented to the requestor for verification. From step the process proceeds to step .

At step the widget manipulator application acquires a compiled widget assembly and a set of widget site configurations for each widget instance i.e. website . From step the process proceeds to step . At step the widget manipulator application acquires an uncompiled widget assembly corresponding to the compiled widget assembly. In a typical embodiment the uncompiled widget assembly is acquired as described with respect to . From step the process proceeds to step .

At step the widget manipulator application extracts global UI display items from the compiled widget assembly. In a typical embodiment the extraction is performed as described with respect to . From step the process proceeds to step . At step the widget manipulator application extracts website level UI display items from each set of widget site configurations. In a typical embodiment the website level UI display items are extracted from widget site configurations as described with respect to . From step the process proceeds to step .

At step the widget manipulator application manipulates the UI display items extracted at steps and based on the manipulation type. The manipulation yields manipulated UI display items. The manipulated UI display items include manipulated global UI display items and for each widget instance manipulated website level UI display items. An exemplary manipulation will be described with respect to . From step the process proceeds to step . At step the widget manipulator application creates a new uncompiled widget assembly based on the manipulated global UI display items. In a typical embodiment the new uncompiled widget assembly is created as described with respect to the new uncompiled widget assembly of . From step the process proceeds to step .

At step the widget manipulator application compiles the new uncompiled widget assembly to yield a new compiled widget assembly. From step the process proceeds to step . At step the new uncompiled widget assembly is published. In a typical embodiment publication results in the new uncompiled widget assembly being centrally stored among other compiled widget assemblies such as for example the compiled widget assemblies of . From step the process proceeds to step . At step the widget manipulator application redirects each website covered by the scope of manipulation to point to the new compiled widget assembly. From step the process proceeds to step . At step the widget manipulator application updates the widget site configurations for each website covered by the scope of manipulation based on the manipulated UI display items corresponding to that website. From step the process proceeds to step .

At step the widget manipulator application determines whether there are more widgets that need to be manipulated. If so the process proceeds to step . At step the widget manipulator application selects a next widget from the widgets identified at step . From step the process proceeds to step and executes as described above. If it is determined at step that there are no more widgets that need to be manipulated the process proceeds to step . At step web applications such as for example the web applications of are restarted. At this point the manipulated UI display items are accessible to end users. From step the process proceeds to step . At step the process ends.

At step the widget manipulator application receives original values for a set of UI display items. For example in a typical embodiment the original values correspond to values extracted as described with respect to steps and of the process of . From step the process proceeds to step . At step the widget manipulator application packages the original values as a translation project. From step the process proceeds to step . At step the widget manipulator application requests translation of the translation project. In various embodiments translation can be requested from an automated translation service as described with respect to . In various other embodiments manual translation can be requested for example by transmitting the translation project to an individual. From step the process proceeds to step .

At step the widget manipulator application acquires translated values for the translation project. In various embodiments the translated values may be acquired from the automated translation or from the individual from whom manual translation was requested. At this point the translated values represent manipulated UI display items as described with respect to . From step the process proceeds to step . At step the process ends.

Although various embodiments of the method and apparatus of the present invention have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit of the invention as set forth herein.

