---

title: Configuring an origin server content delivery using a pulled data list
abstract: An exemplary system and method for generating a data list of websites and configuring at least one server computer coupled to a communications network for an origin server website content delivery may comprise a network storage device communicatively coupled to a network and storing a routing table for a CDN, the routing table map one or more edge server IP addresses for one or more edge servers to each of one or more geographic regions. The network storage device may be configured to transmit the routing table to one or more DNS servers communicatively coupled to the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141669&OS=09141669&RS=09141669
owner: Go Daddy Operating Company, LLC
number: 09141669
owner_city: Scottsdale
owner_country: US
publication_date: 20130220
---
This patent application is a continuation in part of based on and claims priority to U.S. patent application Ser. No. 13 746 624 entitled METHOD FOR TESTING METHOD OF ACCELERATING CONTENT DELIVERY filed on Jan. 26 2013 which is a continuation in part of based on and claims priority to U.S. patent application Ser. No. 13 685 127 entitled DNS OVERRIDING BASED METHODS OF ACCELERATING CONTENT DELIVERY filed on Nov. 26 2012 and is a continuation in part of based on and claims priority to U.S. patent application Ser. No. 13 685 245 entitled SYSTEMS FOR ACCELERATING CONTENT DELIVERY VIA DNS OVERRIDING filed Nov. 26 2012 all of which are assigned to Go Daddy Operating Company LLC.

This patent application is related to U.S. patent application Ser. No. 13 772 074 entitled CONFIGURING A CACHED WEBSITE FILE REMOVAL USING A PULLED DATA LIST concurrently filed herewith and also assigned to Go Daddy Operating Company LLC.

The present inventions generally relate to delivering website content and more particularly systems and methods for pulling information from a database on a central software to configure a website running on a server computer to enable a developer mode for the website or to clear a cache for the website on the server computer.

An example embodiment of a system and method for configuring an origin server website content delivery using a server computer may comprise the steps of a server computer communicating over a communications network and from the server computer a request for a data list generated from at least one job record analyzing the data list received over the communications network to identify a website for which to configure the server computer for a developer mode updating a server configuration file for the server computer to identify at least one website in the data list configured for the developer mode receiving at least one hypertext transfer protocol HTTP request for a website content for the at least one website and in response to the at least one HTTP request and for each of the at least one website identified in the server configuration file as configured for the developer mode directly routing from the server computer the at least one HTTP request for the website content to an origin server without caching the website content on or serving the website content from a cache within the server computer.

An example embodiment of a system and method for generating a data list of websites to configure for an origin server website content delivery using a server computer may comprise the steps of a server computer communicating over a communications network a request to configure a website for a developer mode on at least one server computer coupled to the communications network writing to a database coupled to the communications network a job record for the request receiving a request by the at least one server computer for the data list of websites to configure for the developer mode querying the database for at least one job record comprising the job record for the request receiving a query result comprising the at least one job record and analyzing the query result to identify at least one website in the query result to add to the data list of websites to configure for the developer mode. The developer mode may directly route from each of the at least one server computer at least one HTTP request for a website content for each of the at least one website in the data list to an origin server without caching the website content on or serving the website content from a cache within the at least one server computer. The example embodiment of the method and system may further comprise transmitting from the server computer the data list to the at least one server computer.

An example embodiment of a system and method for configuring a server computer to clear a cache for a website may comprise the steps of a server computer communicating over a communications network a request for a data list generated from at least one job record. Each job record may identify a website for which to remove at least one website file stored in a cache on the server computer. Each job record identified may not be associated in a database coupled to the communications network with at least one job check in record in the database and the job check in record may indicate that the at least one website file has previously been removed from the cache during a time interval. The method may further comprise the steps of the server computer analyzing the data list received over the communications network to identify the website for which to remove the at least one website file from the cache. Based on the previous step the server computer may remove the at least one website file from the cache and transmit to a central software running on another server computer at least one instruction to be executed by the other server computer to write the at least one job check in record associated with the at least one job record to the database.

An example embodiment of a system and method for generating a data list of websites for which to clear a cache on at least one server computer coupled to a communications network may comprise the steps of a server computer communicating over the communications network a request to remove from the cache at least one website file for a website writing to a database coupled to the communications network a job record for the request receiving a request by the at least one server computer for the data list of websites and querying the database for at least one job record comprising the job record for the request. Each record may identify a website for which to remove at least one website file stored in a cache within the server computer and may not be associated in the database with at least one job check in record the at least one job check in record indicating that the at least one website file has previously been removed from the cache during a time interval. The method may further comprise the steps of the server computer receiving at the server computer a query result comprising the at least one job record analyzing the query result to identify at least one website in the query result to add to the data list of websites for which to remove the at least one website file from the cache transmitting the data list to the at least one server computer receiving at least one instruction from the at least one server computer to write to the database the at least one job check in record for the job record and generating and writing the at least one job check record to the database.

The above features and advantages of the present inventions will be better understood from the following detailed description taken in conjunction with the accompanying drawings.

The present inventions will now be discussed in detail with regard to the attached drawing figures which were briefly described above. In the following description numerous specific details are set forth illustrating the Applicant s best mode for practicing the inventions and enabling one of ordinary skill in the art to make and use the inventions. It will be obvious however to one skilled in the art that the present inventions may be practiced without many of these specific details. In other instances well known machines structures and method steps have not been described in particular detail in order to avoid unnecessarily obscuring the present inventions. Unless otherwise indicated like parts and method steps are referred to with like reference numerals.

A network is a collection of links and nodes e.g. multiple computers and or other devices connected together arranged so that information may be passed from one part of the network to another over multiple links and through various nodes. Examples of networks include the Internet the public switched telephone network the global Telex network computer networks e.g. an intranet an extranet a local area network or a wide area network wired networks and wireless networks.

The Internet is a worldwide network of computers and computer networks arranged to allow the easy and robust exchange of information between computer users. Hundreds of millions of people around the world have access to computers connected to the Internet via Internet Service Providers ISPs . Content providers e.g. website owners or operators place multimedia information e.g. text graphics audio video animation and other forms of data at specific locations on the Internet referred to as websites. Websites comprise a collection of connected or otherwise related web pages. The combination of all the websites and their corresponding web pages on the Internet is generally known as the World Wide Web WWW or simply the Web.

Prevalent on the Web are multimedia websites some of which may offer and sell goods and services to individuals and organizations. Websites may consist of a single webpage but typically consist of multiple interconnected and related web pages. Menus and links may be used to move between different web pages within the website or to move to a different website as is known in the art. Websites may be created using Hyper Text Markup Language HTML to generate a standard set of tags that define how the web pages for the website are to be displayed. Such websites may comprise a collection of HTML and subordinate documents i.e. files stored on the Web that are typically accessible from the same Uniform Resource Locator URL and reside on the same server although such files may be distributed in numerous servers.

Users of the Internet may access content providers websites using software known as an Internet browser such as MICROSOFT INTERNET EXPLORER or MOZILLA FIREFOX. After the browser has located the desired webpage it requests and receives information from the webpage typically in the form of an HTML document and then displays the webpage content for the user. The user then may view other web pages at the same website or move to an entirely different website using the browser.

Browsers are able to locate specific websites because each website resource and computer on the Internet has a unique IP address. Presently there are two standards for IP addresses. The older IP address standard often called IP Version 4 IPv4 is a 32 bit binary number which is typically shown in dotted decimal notation where four 8 bit bytes are separated by a dot from each other e.g. 64.202.167.32 . The notation is used to improve human readability. The newer IP address standard often called IP Version 6 IPv6 or Next Generation Internet Protocol IPng is a 128 bit binary number. The standard human readable notation for IPv6 addresses presents the address as eight 16 bit hexadecimal words each separated by a colon e.g. 2EDC BA98 0332 0000 CF8A 000C 2154 7313 .

IP addresses however even in human readable notation are difficult for people to remember and use. A URL is much easier to remember and may be used to point to any computer directory or file on the Internet. A browser is able to access a website on the Internet through the use of a URL. The URL may include an HTTP request combined with the website s Internet address also known as the website s domain. An example of a URL with a HTTP request and domain is http www.companyname.com. In this example the http identifies the URL as a HTTP request and the companyname.com is the domain.

Websites unless extremely large and complex or have unusual traffic demands typically reside on a single server and are prepared and maintained by a single individual or entity. Some Internet users typically those that are larger and more sophisticated may provide their own hardware software and connections to the Internet. But many Internet users either do not have the resources available or do not want to create and maintain the infrastructure necessary to host their own websites. To assist such individuals or entities hosting companies exist that offer website hosting services. These hosting service providers typically provide the hardware software and electronic communication means necessary to connect multiple websites to the Internet. A single hosting service provider may literally host thousands of websites on one or more hosting servers.

The DNS is the world s largest distributed computing system that enables access to any resource in the Internet by translating user friendly domain names to IP Addresses. The process of translating domain names to IP Addresses is called name resolution. A DNS name resolution is the first step in the majority of Internet transactions. The DNS is a client server system that provides this name resolution service through a family of servers called domain name servers. The hierarchical domain space is divided into administrative units called zones. A zone usually consists of a domain e.g. example.com and possibly one or more sub domains e.g. projects.example.com services.example.com . The authoritative data needed for performing the name resolution service is contained in a file called the zone file and the DNS servers hosting this file are called the authoritative name servers for that zone.

The DNS infrastructure consists of many different types of DNS servers DNS clients and transactions between these entities. An important transaction in DNS is the one that provides the core service of DNS i.e. name resolution service and is called the DNS query response. A DNS query response transaction is made up of a query originating from a DNS client generically called a DNS resolver and response from a DNS name server. In this way the DNS serves as a global distributed database. Name servers serving zone files each contain a small portion of the global domain space.

The DNS may be maintained by a distributed database system which may use a client server model. Specifically clients may issue a query request using a domain name and the DNS servers may receive the query request originating from the client and resolve a domain name to an IP address for a website. The DNS may distribute the responsibility for assigning domain names and may map them to IP networks by allowing an authoritative name server for each domain to keep track of its own changes. Static addressing may be but is not necessarily used in some infrastructure situations such as finding the DNS directory host that may translate domain names to IP addresses. Static addresses may also be used to locate servers or other network hardware inside a network environment such as the disclosed CDN.

A CDN may comprise a system of networked computers servers software and other networking components that work together transparently across a network to move content closer to end users for the purpose of improving performance and scalability. A CDN may include one or more network storage devices storing one or more routing tables one or more origin servers one or more edge servers and or one or more DNS servers communicatively coupled to a network.

The origin server s may be any server that is upstream or higher in the hierarchy of servers or other network components within the network based on the direction of resolution of a request or response. The edge server s possibly one or more clusters of edge servers may include one or more servers in the CDN wherein software applications data and or other computer services have been pushed away from centralized points such as origin server s to the logical edges of the network. Using edge servers information may be replicated across distributed networks of web servers.

In some CDN models addressing and routing methodologies may be used to route packets to one or more potential receiver network components within a CDN. These addressing and routing methodologies may include unicast addressing and routing a one to one association between a destination address and a single receiver endpoint broadcast or multicast addressing and routing a one to many association between a single sender and multiple simultaneous receiver endpoints and anycast addressing and routing.

An anycast addressing and routing methodology may route packets from a single sender network component to the topologically nearest node in a group of potential receivers identified by the same destination address. Anycast may therefore be considered a one to one of many association. Because DNS is a distributed service over multiple geographically dispersed servers an anycast routing methodology may be used to route packets to the IP addresses determined by the DNS system. These packets may be routed to the nearest point within the CDN announcing a given destination IP address.

As a non limiting example a network storage device storing a routing table one or more edge servers and one or more DNS servers may be hosted within a single data center. Upon receiving a request to resolve a domain name and or to retrieve content for a website the DNS server s may determine an IP address to which to route the request. Using an anycast address and routing methodology the DNS server s may determine that the edge server s in the same data center comprise the nearest point within the CDN that announces the correct destination IP address and may route the request to the edge server s within that data center accordingly. The edge server s within the data center may then receive the request and resolve the domain name and or retrieve the website content accordingly.

Applicant has determined however that presently existing DNS systems and methods using an anycast addressing and routing methodology do not provide optimal means for accelerating content delivery. As a non limiting example the request for domain name resolution and or website content may be routed to a data center that comprises both DNS server s and edge server s . As noted above the DNS server s may use anycast to determine that the edge server s in the data center are the nearest point to the DNS server s announcing the destination IP address to resolve the request.

The DNS server s may make this determination because the DNS server s acts as the reference point to determine the nearest edge server s announcing the destination IP address. However a second edge server which also announces the destination IP address may be running in a data center geographically closer to the requesting client and would provide optimal content delivery acceleration because of its proximity to the client but may be running in a data center that does not include a DNS server. Because presently existing DNS systems use the DNS server as the reference point for anycast addressing and routing the edge server s within the data center that includes the DNS server s will be considered the nearest point as opposed to the edge server s that are in fact the nearest point to the client that issued the request and that would therefore provide the optimal content delivery acceleration within the CDN.

Applicant has therefore determined that optimal content delivery may be accomplished by configuring a CDN to override the DNS system to route a request from a client to a geographically proximal edge server.

The example embodiments illustrated herein place no limitation on network configuration or connectivity. Thus as non limiting examples the network could comprise the Internet the public switched telephone network the global Telex network computer networks e.g. an intranet an extranet a local area network or a wide area network wired networks wireless networks or any combination thereof. System components may be communicatively coupled to the network via any method of network connection known in the art or developed in the future including but not limited to wired wireless modem dial up satellite cable modem Digital Subscriber Line DSL Asymmetric Digital Subscribers Line ASDL Virtual Private Network VPN Integrated Services Digital Network ISDN X.25 Ethernet token ring Fiber Distributed Data Interface FDDI IP over Asynchronous Transfer Mode ATM Infrared Data Association IrDA wireless WAN technologies T1 Frame Relay Point to Point Protocol over Ethernet PPPoE and or any combination thereof.

The one or more network storage devices may store a routing table for the CDN that maps one or more server IP addresses to each of one or more geographic regions and may be configured to transmit the routing table to any of the one or more servers possibly to the plurality of DNS servers . The network storage device s may be as non limiting examples one or more routers switches servers database servers or any other network hardware or software capable of generating storing and or transmitting a routing table . The routing table s may include one or more electronic tables files and or database objects that store the routes and or metrics associated with those routes to particular network destinations.

The routing table may be stored within a database or other storage area in the network storage device and or within a database and or cache of any networked computer or network component. The information on the routing table may further include information about the utilization of the network around it as described herein. In one non limiting example embodiment the network storage device may comprise a database server running a database storing the routing table . Any database and or data storage described herein may comprise a local database online database desktop database server side database relational database hierarchical database network database object database object relational database associative database concept oriented database entity attribute value database multi dimensional database semi structured database star schema database XML database file collection of files spreadsheet or other means of data storage located on a computer client server or any other storage device known in the art or developed in the future.

The one or more origin servers may be any server that is upstream or higher in the hierarchy of servers or other network components within the network based on the direction of resolution of a request or response. The origin server s may have an origin server IP address and may host one or more websites . The website s may comprise any collection of data and or files accessible to a client or server communicatively coupled to the network . As a non limiting example website s may comprise a single webpage or multiple interconnected and related web pages resolving from a domain name each of which may provide access to static dynamic multimedia or any other content perhaps by accessing files e.g. text audio video graphics executable HTML eXtensible Markup Language XML Active Server Pages ASP Hypertext Preprocessor PHP Flash files server side scripting etc. that enable the website to display when rendered by a browser on a client or server. The website s files may be organized in a hosting server s file system that may organize the files for the storage organization manipulation and retrieval by the hosting server s operating system. A hosting server s file system may comprise at least one directory that in turn may comprise at least one folder in which files may be stored. In most operating systems files may be stored in a root directory sub directories folders or sub folders within the file system.

The one or more edge servers may include one or more servers in the CDN wherein software applications data and or other computer services have been pushed away from centralized points such as origin server s for example to the logical edges of the network . Using edge servers information may be replicated across distributed networks of web servers. The plurality of edge servers may include at least a first edge server in a first geographic location having a first IP address and a second edge server in a second geographic location having a second IP address . Each IP address disclosed herein may be any IP address associated with network hardware or software within the network . As non limiting examples an IP address may be an origin IP address associated with an origin server a first IP address associated with a first edge server or a second IP address associated with a second edge server . The routing table on the network storage device or any other network device and or software as disclosed herein may likewise contain a route path used to direct network traffic for an IP Address to the appropriate network hardware and or software in the appropriate geographic region.

Any geographic region s and or geographic location s disclosed herein may comprise as non limiting examples a country a state a region of a country a continent or a region of a continent. As non limiting examples the geographic location for each of the IP addresses for the client the first second or any additional edge server s or any other network hardware or software may be mapped to a geographic region including a country a state a region of a country a continent or a region of a continent.

The one or more origin servers the plurality of edge servers the plurality of DNS servers the one or more database servers and or any other server s described herein may comprise any computer or program that provides services to other computers programs or users either in the same computer or over a computer network . As non limiting examples the one of more servers could be application communication mail database proxy fax file media web peer to peer standalone software or hardware servers i.e. server computers and may use any server format known in the art or developed in the future possibly a shared hosting server a virtual dedicated hosting server a dedicated hosting server or any combination thereof .

Any of these servers may comprise a computer readable storage media storing instructions that when executed by a microprocessor cause the server s to perform the steps for which they are configured. Such computer readable media may comprise any data storage medium capable of storing instructions for execution by a computing device. It may comprise as non limiting examples magnetic optical semiconductor paper or any other data storage media a database or other network storage device hard disk drives portable disks CD ROM DVD RAM ROM flash memory and or holographic data storage. The instructions may as non limiting examples comprise software and or scripts stored in the computer readable media that may be stored locally in the server s or alternatively in a highly distributed format in a plurality of computer readable media accessible via the network perhaps via a grid or cloud computing environment.

Such instructions may be implemented in the form of software modules. Any software modules described herein may comprise a self contained software component that may interact with the larger system and or other modules. A module may comprise an individual or plurality of file s and may execute a specific task within a larger software and or hardware system. As a non limiting example a module may comprise any software and or scripts running on one or more server s containing instructions perhaps stored in computer readable media accessible by the server computer s computer processor that when executed by the computer processor cause the server computer to perform the steps for which it is configured.

The edge server s and the DNS server s may comprise proxy servers and or DNS proxy servers. These proxy servers may comprise one or more intermediary services between one or more servers and one or more clients . The proxy server s may be configured to accelerate hosting by caching the routing table and or web content for the website . As a non limiting example the one or more edge servers may comprise a caching proxy server that may cache the content of a website and or a routing table. Responses to requests for actions by the one or more servers may be accelerated because caching the routing table and or the web content of the website may eliminate computational overhead and network traffic created by one or more web servers on the edge servers fetching content from file storage on the origin server . The one or more proxy servers may also eliminate computational overhead and network traffic created by numerous calls to a database on the origin server .

The client s may be any computer or program that provides services to other computers programs or users either in the same computer or over a computer network . As non limiting examples the client s may be an application communication mail database proxy fax file media web peer to peer or standalone computer cell phone smart phone personal digital assistant PDA etc. that may contain an operating system a full file system a plurality of other necessary utilities or applications or any combination thereof on the client . Non limiting example programming environments for client applications may include JavaScript AJAX client side automation ASP JSP Ruby on Rails Python s Django PHP HTML pages or rich media like Flash Flex Silverlight any programming environments for mobile apps or any combination thereof.

Client software may be used for authenticated remote access to one more hosting computers or servers described herein. These may be but are not limited to being accessed by a remote desktop program and or a web browser as are known in the art. Any browser described herein may comprise any software application for retrieving presenting and traversing information resources on the Web including but not limited to the website s described in detail herein.

The DNS server s may be configured to determine whether the domain name to be resolved is subscribed to the CDN. In some embodiments this may be accomplished by querying a DNS zone file associated with the domain name to be resolved. A DNS zone file may comprise a text file that describes a DNS zone and comprises mappings between domain names and IP addresses and other resources. The DNS zone may comprise a subset often a single domain of the hierarchical domain name structure of the DNS. The DNS zone file may be a master file authoritatively describing a zone or may list the contents of a DNS cache. The starting point of each DNS zone may be specified though use of the origin keyword within the zone file. The DNS zone file may be organized in the form of resource records RR . Each DNS zone and or RR may comprise several fields possibly including type specific data fields.

As a non limiting example during or subsequent to a domain name registration a request may be received to subscribe the domain name to one or more CDNs. The domain name may be added as a zone within a zone file. The zone for the domain name within the DNS zone file may be designated and marked as subscribing the domain name to the one or more CDNs possibly by adding a type specific data field to the DNS zone for the domain name indicating that the registered domain name has been subscribed to the chosen CDN s and or including information defining the CDN to which the domain name is subscribed.

The DNS zone may further comprise one or more address records used to resolve the domain name to a particular IP address. These records may be abbreviated as A records for IPv4 IP addresses or as AAAA records for IPv6 IP addresses. In some embodiments these address records may be used by the DNS server s to determine the origin server IP address for the domain name. As a non limiting example the DNS server s may be configured to query the DNS zone file for the origin server IP address for the domain name. The DNS server s may isolate the DNS zone for the domain name possibly using the origin keyword within the zone for that domain name and search the DNS zone for information about the domain name possibly including the origin server IP address for the domain name the A and AAAA records for the domain name and any type specific fields designating the domain name as subscribed to the CDN.

If the domain name is not subscribed to the CDN the DNS server s may respond to the request to resolve the domain name with the IP address for the origin server . However if the domain name is subscribed to the CDN the DNS server s may be configured to determine a geographic region for the client .

In some embodiments the DNS server s may be configured to determine the geographic region for the client by performing an IP address geolocation on an IP address for any of the client an ISP for the client or one or more other DNS server computers . This geolocation may comprise identification of the geographic location of the client the client s ISP or the other DNS server computer s and associate this geographic location with an IP address MAC address image metadata etc. by automatically looking up the IP address within a geolocation database that contains the IP address data used in firewalls ad servers routing mail systems web sites and other automated systems and retrieving a user s physical address. The IP address may also be associated with geographic region information such as country region city state postal zip code latitude longitude time zone etc.

In some embodiments the geolocation may be determined by obtaining the country code for a given IP address through a DNS based Blackhole List DSNBL style lookup from a remote server. Additional deeper data sets in a geolocation database may be used to determine other geolocation parameters such as domain name connection speed ISP language proxies company name etc. As seen in the location may be the actual location of the client performing the request or an actual assessed location. In this example embodiment the client s ISP may be used to determine the geographic region of the client . In other embodiments one or more other DNS server s may be used to determine the geographic region of the client .

If the geographic region for the client is mapped in the routing table to a first IP address the DNS server s may be configured to respond to the request to resolve the domain name with the first IP address . Likewise if the geographic region for the client is mapped in the routing table to a second IP address the DNS server s may be configured to respond to the request to resolve the domain name with the second IP address .

As seen in each of the plurality of edge servers and each of the plurality of DNS server s may be hosted in one or more data centers . Although not shown in the origin server s any additional DNS server s and or database servers the network storage device s and or any other server s and or network hardware and or software used by the CDN may also be hosted in one or more data centers such as the data center in the first geographic region or the data center in the second geographic region .

The data center s may provide hosting services for websites services or software relating to the domain information or any related hosted website including but not limited to hosting one or more computers or servers in the data center s as well as providing the general infrastructure necessary to offer hosting services to Internet or other network users including hardware software Internet web sites hosting servers and electronic communication means necessary to connect multiple computers and or servers to the Internet or any other network.

A comparison of data center and data center in illustrates that at least one of the plurality of edge servers specifically first edge server is running in a datacenter not comprising one of the plurality of DNS servers . In this example embodiment datacenter comprises both the second edge server as well at least one of the plurality of DNS servers . By contrast datacenter comprises a datacenter running the first edge server but does not comprise one of the plurality of DNS servers.

As a non limiting example the CDN may receive a request to resolve a domain name and or retrieve cached web content from client where the geographic region of client is in the same first geographic region as datacenter which is running edge server s but does not comprise DNS server s .

From a content delivery acceleration perspective the edge server in datacenter would be the optimal edge server to act as a proxy server to serve cached website content to the client that made the request because of its physical proximity to the client . However because data center does not comprise DNS server s the DNS will route the request to datacenter in a second geographic location which does comprise DNS server s . An anycast addressing and routing methodology using DNS server s in datacenter as a reference point may recognize a second edge server as the nearest proxy server to DNS server s with the desired website content.

The disclosed invention provides methods and systems for configuring the CDN to override the DNS system to route a request from the client to the nearest geographically proximal edge server . Specifically the DNS server s may be configured to receive from a client in a geographic region the request to resolve a domain name to an IP address for a website and if the domain name is subscribed to the CDN the DNS server s may be configured to determine the geographic region for the client and override the DNS system by responding to the request with an IP address to which the geographic region of the client is mapped in a routing table thereby optimizing content delivery acceleration to the client .

The network storage device which may comprise a database server running a database storing at least the routing table may be configured to generate the routing table in several ways. As non limiting examples the CDN may comprise a provisioning system configured to extrapolate previously entered information to determine the IP address es and the destination hardware resource s on which to instantiate the IP address es . In some embodiments the provisioning information may be extrapolated via static routing which may include the use of fixed routes that may be manually entered by an administrator of a network into for example a network router or database server s configuration. Using this configuration information all routing decisions may be predetermined and remain static. When network changes occur the administrator may update the router configuration to include the changes. Static routing may be ideal in small network environments.

In other embodiments the provisioning information may be extrapolated via routing protocols that gather and share the routing information used to maintain and update routing tables and that allow the network to dynamically adjust to changing conditions. This routing information may in turn be used to route a routed protocol to its final destination. A routing protocol may further be a formula used by routers or other network components to determine the appropriate path onto which data should be forwarded and may specify how routers or other network components report changes and share information with other routers or other network components in a network that they can reach.

Such routing protocols may include link state protocols e.g. Open Shortest Path First or OSPF and Intermediate System to Intermediate System or IS IS which use link state routing to construct a map of the connectivity of the network send information about each node s neighbors to the entire network and independently calculate the best next hop for each possible destination in the network. These routing protocols may also include distance vector routing protocols e.g. Routing Information Protocol or RIP Interior Gateway Routing Protocol or IGRP Exterior Gateway Protocol or EGP or Border Gateway Protocol or BGP which have each node share its routing table with its neighbors to calculate paths using less computational complexity and message overhead. Routing protocols may be ideal in large network environments. The generation of the routing table may therefore be the primary goal of routing protocols and static routes.

In still other embodiments described in more detail below information for generating the routing table may be queried or extrapolated from a DNS zone file. As a non limiting example if the routing table is not cached on the DNS server s the DNS zone file for the domain name may be fetched and data for the routing table may be extracted or extrapolated from the DNS zone file. Such data may be extracted from the fields within the DNS zone for the domain name and may include as non limiting examples the A and or AAAA records the CDN the domain name is subscribed to location information that the IP addresses are mapped to etc.

In other words the zone file may be used as a starting point for compiling the zone file data into database format. The routing table and or database may further be updated with additional information from the domain name zone and or zone file. As a non limiting example each generated routing table may comprise a CDN data field identifying the CDN to which each routing table corresponds.

Once generated the database server may be configured to transmit the routing table to the DNS server s . In some embodiments the database server may transmit the routing table to the DNS server s via a replication chain. Such replication may include a set of technologies for copying and distributing data and database objects from one database to another possibly over local or wide area networks such as the Internet and synchronizing between databases to maintain consistency.

This replication may enable data from a master server possibly a database server comprising a relational database to be replicated to one or more slave servers possibly additional database servers each comprising one or more relational databases. In some embodiments where the databases change on a regular basis the replication may be transactional replication. In this model a software agent and or signal monitor may monitor the master database server or publisher for changes in data and transmit those changes to the slave databases or subscribers either immediately or on a periodic basis.

As a non limiting example in the context of the current embodiments network storage device may generate a routing table and store it within a SQL database on the network storage device . The network storage device may replicate the routing table via a replication chain to the DNS server s each of which may temporarily store the routing table in a cache memory .

The database server may periodically update the routing table in the cache memory of the DNS server s . In some embodiments this update may be responsive to a lost connection between the network storage device possibly acting as the database server and the DNS server s . The loss of connection may be determined by a signal that may be a limited form of inter process communication used as a notification sent to a process or to a specific thread within the same process in order to notify it of an event that occurred in this case a connection loss or closed terminal. If the process has previously registered a signal handler that routine is executed. Otherwise a default signal handler may be executed.

In some embodiments the signal may be a hangup possibly a SIGHUP signal sent to or from a process on the network storage device when a controlling pseudo or virtual terminal has been closed possibly due to a system shut down or reboot between the network storage device and the DNS server s . Thus in response to a hangup signal possibly a SQL hangup signal between the network storage device and the SQL server s the database server may be configured to run a process to update the routing table in the cache memory of the DNS server s .

In some embodiments that utilize a TCP keepalive parameter the network storage device comprising the database server and or the DNS server s may monitor a connection between them. If the keepalive parameter determines that this connection is no longer set to on this may be considered the transaction that causes the database server to refresh the routing table stored on the DNS server s with a new copy of the routing table from the network storage device . This keepalive parameter may also be used to maintain a connection between the origin server and the edge server s to accelerate delivery of dynamic content for the website .

As a non limiting example if it is determined by the DNS server s that the domain name is subscribed to a CDN and further determined that the behavior field in the routing table for the geographic location for the client comprises an off designation the DNS server s may be configured to respond to the request to resolve the domain name with an origin server computer IP address for the domain name. Using the example routing table in if the domain name is subscribed to the CDN the client requests resolution of the domain name from the first geographic region or second geographic region and the behavior for the client at a location in either of these regions includes an off designation the DNS server s may resolve the domain name to content from the origin server .

Using the example routing table in if the domain name is subscribed to the CDN the client requests resolution of the domain name from the first geographic region and the behavior for the client at a location in the first geographic region includes a primary designation the DNS server s may resolve the domain name with a first primary IP address for an edge server in the first geographic region. Likewise if the client requests resolution of the domain name from the second geographic region and the behavior for the client at a location in the second geographic region includes a primary designation the DNS server s may resolve the domain name with a second primary IP address for an edge server in the second geographic region.

Using the example routing table in if the domain name is subscribed to the CDN the client requests resolution of the domain name from the first geographic region and the behavior for the client at a location in the first geographic region includes a backup designation the DNS server s may resolve the domain name with a backup first IP address for an edge server in the first geographic region. Likewise if the client requests resolution of the domain name from the second geographic region and the behavior for the client at a location in the second geographic region includes a backup designation the DNS server s may resolve the domain name with a second backup IP address for an edge server in the second geographic region.

Thus in the disclosed embodiments the CDN may be configured to override the DNS system to route a request from a client to a geographically proximal edge server . This may be accomplished according to the CDN environment depicted in and using routing tables such as those depicted in .

As non limiting examples the CDN subscribe request may be received from a registrant of a domain name as the domain name is registered with a registrar and or may be received from a website owner as the website is developed and or hosted by a hosting provider. In some non limiting embodiments the request may be received via a dashboard or other control panel on a registrar and or hosting provider website. After the CDN subscribe request is received the DNS zone for the domain name may be updated to designate the domain name as CDN subscribed Step .

This principle may be demonstrated as illustrated in where a first routing table for CDN and a second routing table for CDN each have been generated. In this example embodiment each routing table may comprise a CDN No. data field identifying the CDN to which each routing table corresponds. The routing table data for each CDN may further comprise one or more IP addresses within the CDN and each of these IP addresses may be mapped to one or more geographic regions.

In the routing table data for CDN may include a first and a second IP address . The first IP address may be mapped to Geographic Regions and in the routing table and the second IP address may be mapped to Geographic Regions and in the routing table . The routing table data for CDN may include a third and fourth IP address. The third IP address may be mapped to Geographic Regions and in the routing table and the fourth IP address may be mapped to Geographic Regions and in the routing table .

As seen in if the domain name is determined to be subscribed to a CDN further steps may comprise the DNS server s determining the geographic region of the requesting client Step searching a routing table that maps one or more edge server IP addresses to each of one or more geographic regions for the geographic region for the client Step selecting an edge server IP address mapped in the routing table to the geographic region for the client Step and responding to the request to resolve the domain name by returning the IP address for the edge server Step .

As seen in the non limiting example embodiment in after registering a domain name e.g. example.com with a domain name registrar a registrant may develop a website and pay a hosting provider to host the website on the hosting provider s hosting servers which are communicatively coupled to the Internet. As a non limiting example the domain name registrar and hosting provider may be a single service provider such as GODADDY.COM.

During the domain name registration and website hosting process example.com s registrant may choose to subscribe example.com to one or more CDNs. The appropriate information for the registered domain name may be updated in the DNS. Specifically the appropriate DNS zone file s may be updated to include a DNS zone for example.com. This information may include the domain name the A and or AAAA records and a designation that the domain name is subscribed to one or more CDNs as follows 

One or more DNS servers within CDN may use the DNS zone file any previously entered static routes and or any existing routing protocols possibly within a provisioning system in the CDN to generate a routing table . The routing table may include at least the following information 

This routing table may be replicated possibly via a replication chain to the DNS server s within the CDN and may be temporarily stored in cache memory in the DNS server s . The network hardware and software used to replicate the routing table may be configured to keep the replicated data synchronized and up to date possibly by transmitting new copies of the replication table to the DNS server s . If a hangup signal is detected indicating there has been a loss of connection between the master copy of the routing table and the replicated data for the routing table the replicated data may be refreshed and or re transmitted to the DNS server s so that the data remains current.

A client computer for example in the Dallas Tex. area may request content from the website possibly using an HTTP and or TCP request to resolve the example.com to the website . The DNS server s may perform an IP geolocation to determine the geographic location in this case Dallas of the client the ISP of the client or another DNS server associated with the client that issued the request.

In response to this request the CDN possibly via the DNS server s may query the routing table stored within a database on a database server possibly running on network storage device or within the cache of the DNS server s for a behavior an address record a backup address record or any other routing data corresponding to the CDN for example.com and Dallas Tex. the location of the client. As a non limiting example the DNS server s may query the routing table using the following SQL query SELECT Behavior A A Backup FROM tbl WHERE Location CC OR Location Default Dallas ORDER BY Location CC DESC LIMIT 1. 

In alternate examples if the DNS proxy server s determines that no routing table was cached the DNS proxy s may fetch the appropriate DNS zone zone file for example.com possibly via an SQL request. If the DNS server s search the routing table and or a DNS zone for example.com and determine that example.com is not mapped to a corresponding CDN the request may be routed to the origin server for example.com.

Returning to the example comprising a cached routing table wherein example.com is subscribed to a CDN the DNS server s may determine using the data in the routing table that example.com is subscribed to CDN . The DNS server s having determined that the client sending the request is in Dallas Tex. and that example.com is subscribed to CDN may respond to the request using the stored routing data within the example routing table . Specifically the geographic region for the client is Dallas Tex. so the DNS server s may use the routing table to respond to the client s request using IP Address 60.1.1.1 2 mapped to an edge server containing the website content in the Default Texas geographic area.

The DNS server s may further determine how to respond to the request using data from the Behavior data field within the routing table to. In this example for requests that correspond to the behavior data field with an off designation the DNS server s may respond to the request to resolve the domain name with an origin server IP address the Phoenix origin server in this example. For requests that correspond to the behavior data field with a primary designation the DNS server s may respond to the request to resolve the domain name with a primary IP address for an edge server the Texas edge server in this example. For requests that correspond to the behavior data field with a backup designation the DNS server s may respond to the request to resolve the domain name with a backup IP address for an edge server the Canada edge server in this example.

The above described systems and methods can be utilized to provide a broad range of functionality and improved performance over traditional systems and methods. Though the benefits of the above described systems and methods may be understood and appreciated by those individuals having an exceptional experience base or an exceptional understanding of the complex systems and methods utilized to yield the above described benefits others without the requisite knowledge may not fully appreciate the full scope of benefits. Additionally or alternatively despite being able to readily appreciate such benefits it may be difficult for an end user to accurately quantify the benefits of the above described systems and methods. As a non limiting example benefit quantification or detailed comparisons may be useful to comparative consumers or for businesses in desiring to quantify track and account for investments and returns on investments.

To this end the present disclosure provides systems and methods for communicating benefits of the above described systems and methods to customers and potential customers. Referring to an embodiment of a method of communicating benefits of accelerating content delivery in a CDN will be described. The following steps are readily applicable to any of the above described methods for accelerating content delivery. For example as described above with respect to the present steps may be used when the CDN is configured to override the DNS system to route a request from a client to a geographically proximal edge server . Likewise as described above with respect to and the present steps may be used when the DNS server s determines the geographic region of the requesting client searches a routing table for the geographic region for the client and selects an edge server IP address mapped in the routing table to the geographic region for the client .

Specifically referring to a performance test or performance demonstration request is received Step through a performance testing platform . This request may be communicated by a requesting client computer that has not yet purchased accelerated content delivery or has purchased accelerated content delivery but would like to quantify acceleration under current configurations or consider purchasing additional or different acceleration for example using additional or different configurations. The request is communicated over the network and may be received by any of a plurality of entities having receiving entity computers . As a non limiting example the request may be received by the CDN the DNS server s or a services provider or services retailer. A services provider or services retailer may include an entity that provides any of a wide variety of services which may or may not include or be limited to those systems and methods described above. Likewise a services retailer may include an entity that simply sells but does not provide any of the above described or related services.

In response to receiving a request for a performance test a variety of performance test options may be communicated back to the requesting entity Step . As a non limiting example the requesting entity may be given the option to select from a variety of geographic locations or potential geographic locations. Likewise the requesting entity may be given the option to select between different ones of the above described options for implementing accelerated content delivery. Further still the requesting entity may be given the option to select between different potential CDNs.

Upon receiving the selected options the receiving entity runs test loads with and without acceleration Step . Specifically a performance testing platform may be used to simulate a browser loading the requesting entity s web page from multiple geographic locations including any particular locations designated by the requesting entity. From each location a load with and without acceleration is simulated. For example a load through the CDN may be performed and also a load that bypasses the CDN and goes directly to the origin of the content may be performed. Alternatively if the requesting entity has a configured acceleration protocol the test loads with and without acceleration Step may not utilize a performance testing or simulation platform and instead simply use the requesting entity s current acceleration protocol and bypass the current acceleration protocol. Notably if seeking to simulate to different acceleration protocols when bypassing the current acceleration protocol a simulated acceleration protocol may be used for example using a performance testing platform.

With the test performed a report is generated and communicated to the requesting entity Step to indicate the performance differences between the tested configurations or simulations. The report may be formatted in a graphically aware way highlighting the performance gain of accelerated content delivery. The performance gain may be renamed such as to state Your site is X faster as a result of the CDN. 

For example provides a non limiting example of a report that may be provided to the requesting entity. As described the report may be delivered by any of a variety of entities. In the illustrated non limiting example the ability to test or simulate accelerated content delivery is provided by an entity providing website or other content hosting or hosting management services through a hosting manager interface . As illustrated these services may be coupled with or complementary to or otherwise provided by entities that likewise provide domain registration or management services and or email services .

The report may be accessed as a non limiting example using a management dashboard through which performance reports regarding a website accelerator service can be reviewed. As described above with respect to various settings and configurations may be communicated for example using a settings interface . As a non limiting example the requesting entity may designate geographic locations. In the illustrated example report the requesting entity has selected to designate geographic locations relative to an East Coast and West Coast . Of course any geographic locations both national and international can be selected. Other options or settings may include the designated domain which in the illustrated non limiting example report is example.com . With these and or other settings complete a Run Test button can be used by the requesting entity to communicate the requested test.

As illustrated in the non limiting example report the report communicated following the test may indicate a clear speed increase provided by accelerated content delivery . As described above the specific speed increase may be communicated in a clear message for example that a 27 percent faster speed than original load time was achieved. Additionally or alternatively more specific information may be provided in the report . As a non limiting example the report includes a time comparison . In this non limiting example case indicating that the accelerated load time was 1.8 second compared with 2.5 seconds for the original load time. Further still the report may include information comparing accelerations associated with the specific geographic locations selected . In this case the acceleration achieved at the East Coast and West Coast are illustrated in a comparative fashion. Additionally or alternatively the report may provide a time gain . Thus the foregoing provides systems and methods that can be used to measure the speed of a website or other mechanism for content delivery and communicate that measure relative to a baseline.

A CDN may be used by many different users including as non limiting examples web masters website developers and or website administrators. These users may desire to customize their CDN experience. To accomplish this the CDN users may be enabled to configure the CDN to improve CDN server efficiencies. As non limiting examples a website administrator making frequent changes to their website may not want the CDN to cache anything while they are working on their website or while it is otherwise under construction. Similarly a website administrator that desires to cache fresh files from the origin server in each of the edge servers or notices that a cache is slowing down the resources for the website may desire to clear the cache for all edge servers to improve server efficiencies within the CDN. More detailed explanations for both of these CDN services are provided herein.

The CDN may receive a request from a user to configure each CDN server for such CDN services. Presently existing systems and methods for configuring the CDN for such services require the request to be pushed to each CDN server in the network . Each server is then configured to perform the requested CDN services. A problem with this push approach is that the time required for transmission configuration and execution of the request may vary between each of the servers. This introduces the possibility and danger of drift a breakdown of the integrity and reliability of the information and or requests being tracked within a configuration file on each of the CDN servers . Such a push approach requires each server to track the progress of each of the number of worker software modules currently running on the servers to determine if the servers have been properly configured and have executed the request for the CDN service s .

The complications introduced by a push model only compound as multiple websites are hosted and or cached on multiple servers and multiple users are configuring and accessing the multiple websites . Monitoring the progress of and tracking the configuration and executed requests for each of the users of each of the websites on each of the servers for each of the CDN services becomes exponentially difficult.

Applicant has therefore determined that a pull approach as described herein represents a more efficient approach for transmitting configuring servers for and executing such requests. An important advantage to a pull approach is that the system doesn t need to monitor the progress of and or track the configuration and executed requests for each of the users of each of the websites on each of the CDN servers for each of the CDN services. All of the CDN servers are assured to retrieve at a regular interval a list of affected websites and the operating mode that they are currently configured for such as having a cleared cache or operating with developer mode on or off thereby creating a more efficient and less messy solution. This approach eliminates the possibility of drift seen in the push approach because each CDN server maintains the integrity of the retrieved list. Any server that misses an update is returned to synchronization with all other CDN servers during the next rotation at the regular interval.

Many systems may be used to configure a CDN system via a pull approach. represents a non limiting example embodiment of such a system. A user may use a website control panel to make a request for a CDN service such as clearing a website cache on all CDN servers or developing a website in developer mode.

This website control panel may be any control panel known in the art used to administer general website administration functions. Such a control panel may be displayed and run on a client computer communicatively coupled to a network . In some embodiments the website control panel may be developed downloaded and or run on the client computer . In other embodiments the website control panel may be rendered on a server computer and accessed by transmitted to and displayed on the client computer .

The website control panel may be configured to identify the website that it controls possibly using the website s domain name IP address unique URL server on which the website is hosted etc. and may authenticate a user as a web master website developer and or website administrator of the website using any method of authentication known in the art. The website control panel may comprise a form comprising user interface components which in addition to any general website administration functions may receive one or more requests for CDN services such as clearing a cache or turning a developer mode on or off for the website . As a non limiting example a webmaster for a website website.com hosted on a server located at IP address 12.345.567 may log into the website control panel by providing a username webmaster and a password password. The webmaster may then request that certain administrative functions possibly including CDN configurations be executed for website.com.

The website control panel may be configured to connect to and maintain a connection with one or more software modules central software running on any CDN server . This connection may be made through the network using any method of network connection disclosed herein or known in the art and may be used to transmit to the central software the identification of the website and or user a request for any CDN services or any other website administration functions and or identification of the type of request received e.g. devmode devmodeon devmodeoff clearcache etc. . As non limiting examples this information may be transmitted via query strings hidden fields metadata or any other means of network data transmission known in the art.

The central software may then receive the request and the data transmitted from the website control panel . The central software may be used to accomplish any method steps disclosed herein and performed by any of the CDN servers on which the central software is running. In some embodiments the central software may comprise an Application Programming Interface API capable of connecting to any type of software within the CDN and any request to the API disclosed herein may comprise a Remote Procedure Call RPC to the API . An API may comprise a service made available to third parties which may further comprise any individual entity system hardware or software wishing to access the disclosed information and functionality. Such an API may comprise a software to software interface that specifies the protocol defining how independent computer programs interact or communicate with each other. It also may comprise a collection of pre configured building blocks allowing a third party to easily configure their software for compatibility and or extensibility.

The API may comprise any API type known in the art or developed in the future including but not limited to request style Berkeley Sockets Transport Layer Interface TLI Representational State Transfer REST Simple Object Access Protocol SOAP RPCs Standard Query Language SQL file transfer message delivery and or any combination thereof. The API may comprise computer readable code that when executed causes the API to receive an RPC i.e. function call requesting information services. Responsive to receipt of the RPC the API may perform the above described processes and transmit a request results to the requesting third party.

To submit the request via an RPC to the API the server s may require authentication with the API . Computers or servers may locate the API via an access protected URL mapped to the API and may then use an API key configured to authenticate the one or more computers or servers prior to accessing the API .

The central software may respond to the received request from the website control panel by analyzing the received request and additional transmitted data to identify the associated website and type of request received. The central software may then temporarily store the request type e.g. devmode clearcache received from the website control panel . In the interest of simplicity the following description and explanations will include only the domain name for a website. This should not limit the scope of the invention however. The associated website may be identified by any relevant website information including the website s domain name IP address unique URL server on which the website is hosted etc. Thus domain name should be understood to include any information used to identify a website .

The domain name of the identified website may be used to generate and execute a database query for a website data record which contains the domain name within a website table in the database. The website table may comprise one or more website data records each website data record comprising a data field column for a unique website identifier site id possibly generated by the database and or the central software as a sequential number. Each website data record may also comprise a data field column for a domain name for the identified website domain . As a non limiting example the query may comprise the following SQL query SELECT site id FROM websites WHERE domain website.com . The query may be executed and a query result returned to the central software .

The central software may determine if the query result comprises at least one website data record. If so the central software may analyze the website data record s to identify the data stored in the site id data field column and temporarily store this site id data. However if the query result does not comprise a website data record the central software may be configured to generate and execute a database query to create a website data record in the website table for the website information received with the request from the website control panel . The website data record may comprise a unique website data record identifier for the record and the domain name of the website identified in the request.

After generating and executing the database query to create the website data record the central software may query that website data record and temporarily store the data stored in the site id data field column as it would have with the returned website data record. The central software may then be configured to generate and execute a query to create and insert a job data record into a jobs table in the database. This jobs table may comprise one or more job data records each comprising data fields columns for a unique job data record identifier job id a unique website data record identifier site id possibly as a foreign key joining the unique website record identifier to a record in the website table a job type type identified by the request type received from the website control panel such as devmode devmodeon devmodeoff clearcache etc. and a time and or date that the centralized software received the request and or that the job data record was created create date .

To write the job data record to the database the centralized software may be configured to generate or receive as generated by the database and store a job id e.g. a sequential number for each website record insert into the job record table s site id data field column or join possibly as a foreign key the temporarily stored site id insert the temporarily stored request type received from the website control panel into the type data field column and insert a time date stamp into the create date data field column. As a non limiting example the query for a new job record referencing website id may include the following SQL query INSERT INTO jobs job id site id type create date VALUES 321 123 devmodeon Jan. 1 2013 .

One or more software modules may be written installed and run on one or more CDN servers . In some embodiments the one or more software modules may be configured to request and configure the server for a list of websites to configure for developer mode. In other embodiments the one or more software modules may be configured to clear the cache of the server on which the software modules are running if this server is not identified in a job check in table described herein.

To accomplish the method steps disclosed herein various method functions within these software modules may be configured to connect to the central software and run on each server at a regular interval such as once every minute once every 3 minutes once every 5 minutes once every 30 minutes once every 24 hours etc. depending on the method steps to be executed. The length of the regular interval may be determined by a website administrator according to a balance struck to maximize efficiencies of the CDN. As a non limiting example a website administrator may experiment with various lengths of the regular interval within the CDN to determine an ideal regular interval which allows all CDN servers to request modes for each website hosted on that server at a frequent interval without overtaxing the resources of the server.

The website administrator may set the regular interval at which the software modules may run these methods. Any method known in the art causing a computer to execute a repeated command at a regular interval may be used. As a non limiting example the regular interval may be set via the website control panel and or via a cron job on the CDN server s . When run these methods may execute a repeated command within the software modules to request from the central software at the regular interval a list of domain names pulled from information within the jobs table representing websites that are hosted on the server that hosts the software modules . For each domain name in the list a current operating mode for the website may be included indicating that the website should be updated to reflect this operating mode. As non limiting examples the list may include a pairing of website.com with devmode indicating that website.com should be updated on all CDN servers that requested the list and that host website.com to create a pass through on all HTTP requests to that server so that the requests are routed to an origin server within the CDN. Likewise the list may include a pairing of website.com with clearcache indicating that website.com should be updated on all CDN servers that requested the list and that host website.com to clear the cache for website.com if the request is not found in a job check in table described herein.

The central software may at regular intervals receive the request from the software modules for the list of domain names and their current operating mode. In response to this request the central software may generate and execute a database query for current job data records within the jobs table . In some example embodiments a request from a developer mode module may designate that the request is for job data records identified as devmode devmodeon or devmodeoff depending on the embodiment. Likewise in some example embodiments a request from a clear cache module may designate that the request is for job data records identified as clearcache. Thus as non limiting examples the generated and executed SQL query may be SELECT FROM jobs SELECT FROM jobs WHERE type devmode or SELECT FROM jobs WHERE type clearcache etc. depending on the embodiment.

In response to the generated and executed database query the database may return a query result comprising one or more job data records. The central software may then identify within each of the returned job data records the data within the site id and type fields columns according to the embodiment. For each of these job records the central software may if needed determine the domain name for the website via database query as previously described and generate an entry in the data list comprising at least the affected website possibly identified by domain name and indicating the current operating mode for the website . The list may then be transmitted to each CDN server that requested the list.

One or more software modules not shown either integrated into the central software or running separately from the central software may be configured to ensure that only the most recent job data records are selected from the jobs table and added to the data list sent to the requesting CDN server . This software may be run at a regular interval e.g. nightly at midnight each 24 hours etc. . When run this software may be configured to identify a current time e.g. via a now function generate execute and receive a query response for a database query selecting each job data record in the jobs table identify the time and or date in the create date data field column of each record returned in the query response and compare the identified current time with the identified time date in each job record. For each identified time date that is older than the last regular interval the associated job data record in the database may be updated to reflect that the record is stale. 

In some embodiments stale records may be deleted from the jobs table possibly via a database query to ensure that the jobs table does not grow unwieldy. Requests from the CDN software will clearly not include data from job data records which have been deleted thereby ensuring that only the most recent job data records are selected from the jobs table . In other embodiments the jobs table may include an additional data field column indicating a record is expired and therefore stale or not expired. In these embodiments the central software may be configured to only select those records that are not stale to include in the data list to be sent to the CDN servers . In these embodiments the software disclosed above may be configured to delete records marked as expired at the regular interval.

 Developer mode may allow a website administrator to develop and or otherwise make changes to a website the changes being immediately displayed to be reviewed by the website administrator. To accomplish this any edge server acting as a proxy server within the CDN may be configured to receive one or more HTTP requests and rather than serving any cached content stored on the edge server for the website create a pass through on the HTTP requests so that the requests are routed directly to the origin server thereby allowing the origin server to serve dynamic and non cached static content for the website .

The website control panel may receive a request from the user to activate or deactivate developer mode. As a non limiting example the website control panel may comprise a radio button user interface component with selections for developer mode on or developer mode off for website.com. The website control panel may then connect with and transmit the identified website and the request type e.g. devmode devmodeon or devmodeoff to the central software .

The central software may then receive this request and process the received data identifying the website for which to update the operating mode and the request type as a request to activate or deactivate developer mode. In some embodiments the central software may comprise an API and the request may comprise a RPC. The central software may run a database query within the website table to identify the affected website as disclosed herein and may run another database query to update the jobs table possibly by writing a new job record to reflect the developer mode request. If the request from the website control panel is identified as a request to turn developer mode on a new record may be created in the jobs table as disclosed herein including a unique job data record identifier the website unique data record identifier for the website a job type as devmode or devmodeon and a date and or time the request was received and or the record was created.

If the request from the website control panel is identified as a request to turn developer mode off in some embodiments the central software may generate and execute a database query deleting any job data records containing the identified unique website record identifier flagged as having developer mode activated. In some embodiments where the type data field column is stored as having developer mode activated e.g. devmodeon the database query may update the data field to reflect developer mode being deactivated e.g. devmodeoff .

One or more developer mode software modules running on each of the edge servers may send a request at a regular interval for the data list of websites and whether each website is operating in developer mode. The central software may receive each of these requests and for each request may query the jobs table for jobs data records flagged as having developer mode activated and may receive the query results for this query. In embodiments where requests for developer mode to be deactivated resulted in job data records being deleted all job data records flagged as developer mode records may be selected from the jobs table . In embodiments where requests for developer mode to be deactivated resulted in job records being updated to reflect developer mode being deactivated e.g. devmodeoff the database query may select only those records flagged as having developer mode activated e.g. devmodeon .

For each record in the query results the central software may identify the domain possibly via a database query to the website table as disclosed herein and may add the domain name to the data list paired with an operating mode for the website indicating that developer mode is active for this website e.g. domain website.com mode devmode . Once the identified website and operating mode pairing has been added as a list entry to the data list for each record returned in the query results the central software may then transmit the data list to each requesting developer mode module .

Each requesting developer mode module may then receive the data list and for each list entry comprising a website identifier and operating mode pairing in the list may synchronize the data list from the central software with another list of websites operating mode pairings within a configuration file that defines behavior of a related software and or hardware. As a non limiting example the CDN server s may be running a web server such as Apache Traffic Server and the configuration file may be a text and or XML file which defines the behavior of this web server or server computer such as determining which websites running on the CDN server s are currently running in developer mode and creating the previously described pass through to the origin server for these websites .

For each entry in the central software generated list the developer mode module s may analyze the entry and determine if this entry is found within the configuration file list. If so the two lists may be identified as synchronized and no action need be taken since the central software generated list indicates that the website should remain in developer mode. If the list entry from the central software generated list is not in the configuration file list the entry may be added to the configuration file list to bring the two lists into synchronization. The developer mode module s may then identify within the configuration file list any entries that are not in the central software generated list and remove them from the configuration file list.

Once the two files are synchronized on each of the edge servers the developer mode module may then execute instructions to the edge server on which it is running to re read the configuration file thereby applying the changes and updating the operating mode for each website hosted on that server. The edge serve s will then ignore all instructions to cache content for websites running in developer mode and will pass all HTTP requests through to the origin server

A clear cache operating mode for a website may comprise a one time operation that instructs all of the CDN servers to drop their files from cache for the given website . This operation received as a request from the website control panel may remove cached website content from one or more non origin servers e.g. edge servers acting as proxy web servers within the CDN. This in turn may force the edge servers to re route all HTTP requests to the origin server which may then serve fresh website files and data possibly including dynamic content until the most recent version of the content possibly comprising files or data is again stored within the cache of each of the non origin servers within the CDN.

The website control panel may receive a request from a user to clear the cache on all non origin servers in the CDN. As a non limiting example the website control panel may comprise a checkbox user interface component allowing the user to select to clear the cache for website.com. The website control panel may then connect with and transmit to the central software the identified website and the request type as clearcache. as a non limiting example. In some embodiments once a user has transmitted a clear cache request it may not be undone so that the clear cache will be performed once requested.

In some embodiments the website control panel may consume data from the central software to determine whether the website controlled by the website control panel is eligible for clearing its cache . As a non limiting example software logic may exist in which the cache for the website may only be cleared every 24 hours. The central software possibly in conjunction with the database may contain this logic and or data indicating that the cache for the identified website has been cleared within the past 24 hours. The website control panel may consume this information and may display an alert to the user that the website may not currently be cleared since 24 hours has not passed since the last clear cache request by the user for this website .

The central software may receive the clear cache request from the website control panel and process the received data identifying the website for which to clear the cache and the request type as a request for clearing the cache for the website throughout the CDN. In some embodiments the central software may comprise an API and the request may comprise a RPC. The central software may run a database query within the website table to identify the affected website as disclosed herein and may run another database query to update the jobs table possibly by writing a new job record to reflect the clear cache request.

A clear cache module running on each of the edge servers may send a request at a regular interval for a list of websites for which to clear a cache on each of the non origin CDN servers . In addition each clear cache module may identify an IP address for the server on which it is running and transmit that IP address in conjunction with the request for the list to the central software . The central software may receive these requests and for each request identify and temporarily store the IP address for the server which requested it.

The central software may then query the jobs table for job records flagged with a type indicating clear cache and may receive the query results from this query comprising one or more job records. For each record in the query results the central software may identify within each of the returned job records the data from the job id and the site id data fields columns and temporarily store this data for subsequent database queries.

The central software may for the job id data identified in each returned job data record query a job check in table for one or more job check in data records that contain that job id. The job check in table may comprise one or more job check in records each comprising data fields columns for a unique job check in data record identifier checkin id a unique job data record identifier job id possibly as a foreign key joining the unique job data record identifier to a record in the jobs table an IP address of a CDN server that has cleared its cache for the website identified in the job data record associated with the job id ip and a time and or date that the request to clear cache was received by the central software and or that the job record was created create date . As a non limiting example a SQL query for the one or more job check in data records may be SELECT job id ip FROM jobcheckin WHERE job id the temporarily stored job id and ip the temporarily stored IP address . The query may be run and a query result may be returned possibly comprising one or more job check in data records.

The central software may then determine if any records were returned in the query result. If so it may be determined that the cache for the website has already been cleared on the CDN server found at that IP address and no further action for the job record is necessary by the central software which may then repeat the process for the next job record returned. However if no job check in records were returned in the query result this may indicate that the cache still needs to be cleared for the identified website on the CDN server found at the identified IP address .

To accomplish this the central software may identify using the temporarily stored site id for the job data record the domain possibly via a database query to the website table as disclosed herein and may add the domain name to a data list generated by the central software comprising websites for which to clear a cache . In addition to the domain name for each website each entry in the data list may also include the job id associated with the clear cache job data record in the jobs table and the IP address of the CDN server that requested the data list. Once the job id data the identified website and the IP address have been added as list entries to the data list for each of the job data records returned in the query result which were not returned in the query result from the job check in data records for each of the job records the central software may then transmit the list to each requesting clear cache module on each requesting CDN server at its respective IP address .

Each clear cache software module may receive the data list of websites for which to clear the cache and in response may determine the IP address of the server on which the clear cache module is running Each clear cache module may then analyze the data list to determine if its self identified IP address is found as an IP address in the data list. If not the clear cache software module may determine that the cache for the requested website has already been cleared and no further action is necessary.

However if the clear cache module determines that the IP address for the server on which it is running is found within the data list it may determine that the cache for a website on the server needs to be cleared. Accordingly the clear cache software module may identify the website within the data list for which to clear the content from the cache . The clear cache module may also identify and temporarily store the job id from and associated with the IP address and the website in a data entry in the data list.

The clear cache software module may then be configured to clear the cache for the identified website and send instructions and or a request to the central software possibly in the form of an RPC to write a job check in data record to the job check in table . This request may include identifying information for the temporarily stored job id and the self identified IP address of the server running the clear cache module s .

The central software may receive the request to write a job check in data record to the job check in table along with the job id and the IP address of the server that cleared its cache and may write the job check in data record to the job check in table comprising a unique job check in identifier checkin id possibly an incremental number generated by the database or the central software the received job id for the clear cache job and the IP address of the server that cleared the cache for the website .

The integrated or independently running software described above not shown may delete stale job records at the regular interval using the methods described above. In some embodiments when stale job records are deleted the central software may be configured to also delete any job check in records containing the foreign job id field of the stale job records which were deleted possibly accomplished via a cascading delete functionality built into the database.

Other embodiments and uses of the above inventions will be apparent to those having ordinary skill in the art upon consideration of the specification and practice of the inventions disclosed herein. The specification and examples given should be considered exemplary only and it is contemplated that the appended claims will cover any other such embodiments or modifications as fall within the true scope of the inventions.

The Abstract accompanying this specification is provided to enable the United States Patent and Trademark Office and the public generally to determine quickly from a cursory inspection the nature and gist of the technical disclosure and in no way intended for defining determining or limiting the present inventions or any of its embodiments.

