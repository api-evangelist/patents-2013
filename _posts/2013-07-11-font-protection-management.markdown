---

title: Font protection management
abstract: Font protection management is described. In one or more implementations, a font package is obtained for an application and includes fonts that are protected by obfuscation. When the application is launched, a request to determine whether use of the protected fonts is authorized in connection with the application may be communicated to a font protection service. A response that is indicative of authorization to use the protected fonts in connection with the application may be received from the font protection service. When the response indicates that use of the protected fonts is authorized, the protected fonts may be de-obfuscated and subsequently used in connection with the application. When the response indicates that use of the protected fonts is not authorized in connection with the application, however, default fonts may be used with the application instead.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471755&OS=09471755&RS=09471755
owner: Adobe Systems Incorporated
number: 09471755
owner_city: San Jose
owner_country: US
publication_date: 20130711
---
Font providers are often unwilling to license their content for use in applications due to concerns about piracy. Traditional techniques for including fonts in an application involve embedding unprotected files for the fonts within the application. However such techniques expose the fonts for access in a usable form with minimal effort. In some conventional approaches individual application developers negotiate arrangements with font providers whereby a provider will license its font for application embedding but only if the developer agrees to encrypt the font data in the application package and then decrypt it for use. Although transmission of fonts in the clear may be avoided using this approach it provides no way of tracking usage or preventing improper use of decrypted fonts. In addition the lack of standard font encryption processes places a burden on developers to comply with particular font providers licenses and terms for use.

This Summary introduces a selection of concepts in a simplified form that are further described below in the Detailed Description. As such this Summary is not intended to identify essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Font protection management techniques are described. In one or more implementations a font package is obtained for an application and includes fonts that are protected by obfuscation. When the application is launched a client may communicate a request to a font protection service to determine whether use of the protected fonts is authorized in connection with the application. A response may be received from the font protection service that is indicative of authorization to use the protected fonts in connection with the application. When the response indicates that use of the protected fonts is authorized the protected fonts may be de obfuscated and subsequently used in connection with the application. When the response indicates that use of the protected fonts is not authorized in connection with the application however default fonts may be used with the application instead.

Additionally a service may receive and process a request to authorize use of the protected fonts. Based on processing of the request a determination is made regarding whether use of the protected fonts is authorized in connection with an application. A response that is indicative of authorization to use the protected fonts may then be communicated to a client device that sent the request. If use of the protected fonts is authorized the response is configured to contain information sufficient to enable the protected fonts to be de obfuscated and subsequently used in connection with the application. On the other hand if use of the protected fonts is not authorized the response is configured to indicate that use of the protected fonts is not authorized and default fonts may be used in connection with the application rather than the protected fonts.

Traditionally there has been no digital rights management DRM for fonts that is interoperable across a variety of platforms. Consequently font providers may generally be unwilling to license their content for use in applications in part because available techniques for including fonts in an application lack sufficient protection.

Font protection management techniques are described. In one or more embodiments a font package is obtained for an application and includes fonts that are protected by obfuscation. When the application is launched a client may communicate a request to a font protection service to determine whether use of the protected fonts is authorized in connection with the application. A response may be received from the font protection service that is indicative of authorization to use the protected fonts in connection with the application. When the response indicates that use of the protected fonts is authorized the protected fonts may be de obfuscated and subsequently used in connection with the application. When the response indicates that use of the protected fonts is not authorized in connection with the application however default fonts may be used with the application instead.

Additionally a service may receive and process a request to authorize use of the protected fonts. Based on processing of the request a determination is made regarding whether use of the protected fonts is authorized in connection with an application. A response that is indicative of authorization to use the protected fonts may then be communicated to a client device that sent the request. If use of the protected fonts is authorized the response is configured to contain information sufficient to enable the protected fonts to be de obfuscated and subsequently used in connection with the application. On the other hand if use of the protected fonts is not authorized the response is configured to indicate that use of the protected fonts is not authorized and default fonts may be used in connection with the application rather than the protected fonts.

In the following discussion an example environment is first described that may employ the techniques described herein. Example implementation details and procedures are then described which may be performed in the example environment as well as other environments. Consequently performance of the example procedures is not limited to the example environment and the example environment is not limited to performance of the example procedures.

The computing device may be configured as any suitable type of computing device. For example the computing device may be configured as a desktop computer a laptop computer a mobile device e.g. assuming a handheld configuration such as a tablet or mobile phone a tablet and so forth. Thus the computing device may range from full resource devices with substantial memory and processor resources e.g. personal computers game consoles to a low resource device with limited memory and or processing resources e.g. mobile devices . Additionally although a single computing device is shown the computing device may be representative of a plurality of different devices to perform operations over the cloud as further described in relation to .

The environment further depicts one or more service providers configured to communicate with computing device over a network such as the Internet to provide a cloud based computing environment. Generally speaking a service provider is configured to make various resources available over the network to clients. In some scenarios users may sign up for accounts that are employed to access corresponding resources from a provider. The provider may authenticate credentials of a user e.g. username and password before granting access to an account and corresponding resources . Other resources may be made freely available e.g. without authentication or account based access . The resources can include any suitable combination of services and or content typically made available over a network by one or more providers. Some examples of services include but are not limited to a news or periodical service a photo editing service a web development and management service a collaboration service a social networking service a messaging service an advertisement service and so forth. Content may include various combinations of text displayed using a variety of fonts video ads audio multi media streams animations images web documents web pages applications device applications and the like.

The computing device may also include or make use of a font package and a font loader module that represent functionality operable to implement font protection management as described herein. For example the font package and the font loader module may be configured in various ways to facilitate using protected fonts in connection with authorized applications. To do so the font loader module may be configured to unpack protected fonts from the font package . As part of unpacking the protected fonts the font loader module may obtain authorization from a font protection service to use the protected fonts in connection with an application. For authorized applications the font loader module loads the protected fronts so that they may be used in connection with those applications. In this way text may be displayed for an authorized application using the protected fonts included in the font package . Additionally the font loader module may be configured to load default or system fonts in connection with an application such as when an application is not authorized to use the protected fonts of the font package .

The font loader module may be implemented as a software module a hardware device or using a combination of software hardware firmware fixed logic circuitry etc. Further the font loader module may be implemented as a standalone component of the computing device as illustrated. In addition or alternatively the font loader module may be configured as a component of an application an operating system or other device application.

In at least some implementations the font package and the font loader module are configured to operate in connection with applications that are available to end users from an application store . Using an application store the service provider may be configured to make applications from various developers available for download to individual client devices. Some of the applications available from the store may be made freely available while others are available only if purchased. The application store may facilitate the purchase and download of applications by an end user. By way of example and not limitation an application store may be accessible through a user s mobile device such that the mobile device can be used to purchase applications from the store that are configured for the mobile device. At least one of the applications may be configured as an application that receives software updates from an application store. Other applications are also contemplated. For example an application authorized to make use of the protected fonts included in the font package may be a browser or network enabled application used to represent webpages documents and other web based content.

Having considered an example environment consider now a discussion of some example details of the techniques for font protection management in accordance with one or more implementations.

This section describes some example details of font protection management in accordance with one or more implementations. depicts generally at some portions of the environment of but in greater detail. In particular the computer readable storage media and the components included therein are depicted in greater detail. The computer readable storage media includes the font package and the font loader module as well as an application which may correspond to one of the applications depicted in .

Generally fonts distributed for use with applications are distributed without protection in part because there is no uniform digital rights management DRM interoperable across different platforms for fonts. In the absence of a uniform approach to protect font data many such platforms simply have not been configured to employ techniques for using protected fonts. As a result fonts used with these various platforms which have no way of decoding protected fonts must be unprotected. Consequently in many conventional approaches fonts are simply distributed in the clear . Font providers however oftentimes do not want their fonts to be freely distributed. Instead font providers would like to protect their fonts so that the fonts cannot be trivially moved from one computer to another or used with applications not licensed to use the fonts. Font protection management provides a consistent way to protect fonts across various platforms using font packages and a distributed font loader module.

In general the font package is obtained for use with a particular application such as application . In at least some implementations the font package may be included as part of the application . Naturally the font package may be obtained with the application when part of the application. In other implementations the font package may be separate from the application . When separate from the application the font package may be obtained along with but not included as part of the application or may be obtained separately from the application.

The font package includes obfuscated fonts a package specific name table and identifying metadata . The obfuscated fonts may comprise binary fonts themselves e.g. OpenType or TrueType fonts that are protected by obfuscation. The binary fonts may be obfuscated using any of a variety of techniques. For example obfuscating transforms may be applied to the binary fonts. Alternately or additionally the binary fonts may be scrambled hashed encrypted or the like. Other obfuscation techniques may be applied to obfuscate font data without departing from the spirit and the scope of the techniques described herein. In any case the obfuscation of binary font data is effective to inhibit fonts from being trivially moved from one computer to another or used with applications not licensed to use the fonts.

The obfuscated fonts may be de obfuscated and then used in connection with a particular application with which the font package is associated. The obfuscated fonts may be obfuscated in such a way that they are not only particular to an application but are also particular to the font package . Although the obfuscated fonts correspond to a particular application the way in which the fonts are called for use by an application may not be application specific. The name table included in the font package may map the way in which a font is called to the obfuscated font s application and package specific identity. For example the font package may include a font generally identified as sanseriflite . However in the font package the font may be uniquely identified using the font s identifier in combination with an identifier of the font package. The font package may be associated with an identifier such as PACKAGEID . Accordingly the name table for font package can include an entry that maps sanseriflite to PACKAGEID sanseriflite . To access the obfuscated font identified as PACKAGEID sanseriflite from the font package an authorized application may simply refer to the font as sanseriflite . In this way the name table may facilitate a uniform approach to employ font protection management techniques.

The identifier of the font package e.g. PACKAGEID and identifiers of the obfuscated fonts e.g. PACKAGEID sanseriflite may be included in the font package as part of the identifying metadata . In general the identifying metadata may be configured as a watermark or other metadata that identifies users and applications that are permitted to open the obfuscated fonts included in the font package . In various implementations the identifier of the font package is unique to the font package. Additionally the identifying metadata may include tokens or keys that identify each of the obfuscated fonts in the font package . In at least some implementations information in the identifying metadata may be sufficient to generate tokens or keys to identify the obfuscated fonts of the font package . Further the identifying metadata may be configured as Java Script Object Notation JSON metadata that identifies the font package and the obfuscated fonts included therein. In addition or alternately the identifying metadata may be configured as other types of serialized data such as Property List plist extensible markup language XML and the like.

As noted above the obfuscated fonts of the font package may be used in connection with a particular application such as the application . The application is depicted with an application identifier which may be used to identify the application for use with the obfuscated fonts . The application identifier may be embedded in source code of the application . From the source code of the application the application identifier may be accessible to facilitate associating the application with the font package . As discussed in more detail below the application identifier may be generated in connection with the font package and provided to a developer of the application . For instance the application identifier may be configured as a token that is displayed to a developer of the application and may be copied into source code of the application.

To use the obfuscated fonts in connection with the application the font loader module may be called. Font loader module may be configured as a library available as part of the application an application programming interface API available to the application and or other applications as a component of an operating system available to multiple applications running within the operating system or otherwise. Other configurations of the font loader module may also be employed without departing from the spirit and the scope of the techniques described herein.

In any case the font loader module may be configured to expose a callable font unpacking function . The callable font unpacking function may be called when the application is launched to initiate operation of the font loader module . Responsive to one such call the font loader module may be configured to unpack the obfuscated fonts for use in connection with the application . However the font loader module will not unpack the obfuscated fonts if their use is not authorized in connection with the application . When use of the obfuscated fonts is not authorized in connection with the application the font loader module is configured to cause one or more default fallback or system fonts to be used instead.

As part of the unpacking the font loader module may form a request for communication to a font protection service to determine authorization to use the obfuscated fonts in connection with the application . For example the font loader module may form the request a first time the application is launched. So long as a response is received from the font protection service the first time authorization is requested the font loader module need not form such requests when the application is subsequently launched. If the font protection service is unavailable e.g. a network connection cannot be established the first time however the font loader module may form another request to determine authorization to use the obfuscated fonts the next time the application is launched. The font loader module may continue forming such requests each time the application is launched until a response is received from the font protection service.

To form these requests the font loader module may use at least some of the identifying metadata e.g. an identifier of the font package and identifiers of the obfuscated fonts and the application identifier . In at least some implementations this information may be provided to the font loader module such as by specifying the information as parameters in a call to the callable font unpacking function . Additionally or alternately the font loader module may be configured to extract the identifying metadata from the font package and the application identifier from the application . For example the font loader module may use a standard decryption library e.g. OpenSSL to read the font package and parse its data using a JSON deserialization library.

In various implementations the font loader module may be configured to de obfuscate the obfuscated fonts such as when a response is received from the font protection service indicating that use of the obfuscated fonts is authorized in connection with the application . The font loader module may de obfuscate the obfuscated fonts using information contained in a response from the font protection service such as a key a shared secret or other suitable information. In some implementations the font loader module may be unable to de obfuscate the obfuscated fonts without the information from the response. The font loader module may also use the application identifier in connection with de obfuscating the fonts. As with the information provided in the response the font loader module may be unable in some implementations to de obfuscate the obfuscated fonts without the application identifier . The font loader module may also use other information in connection with the de obfuscation including information provided by the font protection service information included in the application or information included in the font package .

Once the obfuscated fonts have been de obfuscated the font loader module may then load the de obfuscated fonts for use in connection with the application . The font loader module may also de obfuscate the obfuscated fonts when the font protection service is determined to be unavailable. In this scenario the font loader may load the de obfuscated fonts for temporary use with the application. If a response is subsequently received from the font protection service indicating that use of the obfuscated fonts is not authorized in connection with the application the font loader module may subsequently load one or more default fallback or system fonts instead.

When a response is received from the font protection service the font loader module may be configured to have the response or information indicative of the response stored locally. Thus when the application is subsequently launched the font loader module may access the locally stored information to determine whether to load the obfuscated fonts or the default fonts. By storing this information locally the font loader module may avoid having to request authorization from the font protection service each time the application is launched.

The font protection service for instance may be configured to provide the developer user interface to a developer based on a subscription with the font protection service. The developer user interface may enable a developer to view and use any of the fonts available to the font protection service on a limited development basis. The development fonts depicted within the developer user interface are illustrated to represent this functionality. The developer user interface also includes development projects . The development projects may include applications that are developed by the developer and for which the development fonts are used. Development projects may represent applications that a developer is developing but not applications that are released e.g. for beta testing or sold via an application store . For development projects a developer may be free to use the development fonts without having to pay a fee for them. In this way a developer may be able to test a variety of different fonts in connection with a development project and determine which fonts are suitable for a given project. In contrast a developer may have to pay a fee to a font s provider each time an application is activated by an end user.

The font protection service may enable a developer through the developer user interface or other means to license or purchase fonts for use in connection with applications. For example the font protection service may enable a developer to purchase a number of licenses to use the fonts of the font protection service. The number of licenses purchased by the developer may correspond to a number of authorizations that the font protection service is allowed to give to users of the application . In one or more implementations a developer may pay a subscription fee and while the subscription remains active the font protection service may authorize use of any of its fonts in connection with the developer s applications. The subscription model may entitle a developer to a certain number of authorizations over a particular time period. However a developer may upgrade a subscription to a higher level thereby entitling the developer to a greater number of authorizations over the same time period. Approaches other than a subscription based model and a pay per use model may also be employed for charging developers or other parties to have protected fonts authorized.

Regardless of how authorization to use the fonts of the font protection service are paid for the developer user interface enables a developer to select which fonts are to be included with a project for distribution to end users. Based on a developer s font selection in the developer user interface font selection information may be communicated to the font protection service . The font selection information indicates which fonts are to be included in in a development project . Using the font selection information the font protection service is configured to generate a font package. For example the application may correspond to one of the development projects that a developer is ready to distribute. In this example the font selection information provided by the developer through the developer user interface indicates which fonts are to be used in connection with the application e.g. sanseriflite .

The font protection service may then generate the font package for the application . To generate the font package the font protection service obfuscates the unobfuscated unencrypted font data of the selected fonts and generates the additional information for the font package including the name table and the identifying metadata . The font protection service then packages the obfuscated fonts and additional information into a serialized format such as a JSON format or another suitable format. Through the developer user interface the developer may select to download the font package for use with the application . The font protection service can communicate the generated font package to the developer and may do so when the developer selects to download the font package.

In addition the font protection service is configured to generate a token e.g. the application identifier for inclusion in the source code of the application . In one or more implementations the developer user interface displays the token generated by the font protection service . The developer may thereby copy the token from the development user interface and embed it into the source code of the application . The token may be included in the software in other ways without departing from the spirit and the scope of the techniques described herein.

Once the developer has the font package from the font protection service and has embedded the application identifier in the application the developer may distribute the application and the font package . Although the font package is depicted as being distributed to the computing device as part of the application in at least some implementations the font package may not be included as part of the application . When the font package is not included as part of the application it may be separate from but distributed with the application or it may be separate and distributed separately from the application. In addition the application and font package may not be distributed directly to a computing device associated with an end user. Instead the application and font package may first be distributed to one or more intermediaries not shown and then distributed to a computing device of the end user. Intermediaries may include mobile service providers an application store a website that makes the application available for download and the like.

Regardless of the means by which the application and the font package are distributed the application and font package are nevertheless distributed to a computing device such as the computing device . At the computing device text included in an application interface of the application may be displayed using the obfuscated fonts of the font package subject to authorization by the font protection service .

As discussed above the first time the application is launched the font loader module is configured to form an authorization request for communication to the font protection service . The font loader module may form the authorization request using at least some of the identifying metadata of the font package and the application identifier embedded in the application. The computing device may communicate the authorization request over the network to the font protection service which may be embodied on one or more servers of a service provider .

Using the authorization request the font protection service may determine authorization to use the obfuscated fonts in connection with the application . To do so the font protection service may determine whether the application identifier corresponds to the application for which the font package is generated. The font protection service may use the application identifier and the identifying metadata included in the authorization request to make this determination. The font protection service may compare this information to information that is stored in connection with generating font packages. If it is determined that the application identifier does not correspond to the font package identified in the authorization request the font protection service will not authorize use of the obfuscated fonts in connection with the application . In such instances the font protection service sends an authorization response back to the computing device indicating that use of the obfuscated fonts in connection with the application is not authorized. On the other hand if the font protection service determines that the application identifier does correspond to the font package identified by the identifying metadata the obfuscated fonts can be authorized for use in connection with the application .

Using the identifying metadata the font protection service may also determine whether the font package corresponds to the obfuscated fonts for which authorization is requested. In particular the font protection service may determine whether the fonts identified in the authorization request are the fonts that were included in the font package . If a determination is made that the fonts identified in the authorization request do not correspond to the font package the font protection service will not authorize use of the obfuscated fonts. In such instances the font protection service is configured to send an authorization response back to the computing device indicating that use of the obfuscated fonts in connection with the application is not authorized. However if it is determined that the fonts identified in the authorization request do correspond to the font package the font protection service can authorize use of the obfuscated fonts.

Authorization to use the obfuscated fonts in connection with the application also depends on whether there are any remaining authorizations allowed e.g. authorizations paid for . Accordingly the font protection service may compare a number of authorizations given to a number of authorizations allowed to use the obfuscated fonts in connection with the application . If there are no remaining authorizations allowed the font protection service generally determines that use of the obfuscated fonts is not authorized in connection with the application . In some situations however a developer may be given a grace period to purchase more authorizations. For example if the number of authorizations to use an obfuscated font in connection with an application is reached a developer may be given a period of time e.g. a week thirty days etc. to purchase more authorizations. During the grace period the font protection service may be configured to authorize use of the obfuscated fonts in connection with the application even though the developer has no remaining authorizations allowed. If the developer does not purchase more authorizations before the grace period ends the font protection service is then configured to indicate that use of the obfuscated fonts in connection with the application is not authorized.

If the number of authorizations given to use the obfuscated fonts is less than the number of authorizations that are allowed the font protection service can authorize use of the obfuscated fonts in connection with the application . In at least some implementations the font protection service is configured to record a number of authorizations given to use the obfuscated fonts with the application . By recording this information the font protection service can compare the number of authorizations given to the number of authorizations allowed as described above. Additionally the font protection service can communicate this information to a font provider such as in a report indicating a number of times the font provider s font has been authorized for use with any applications. Based on the number of authorizations given the font protection service may also initiate compensation of the font provider.

Regardless of whether the fonts identified in the authorization request are authorized for use with the identified application the font protection service sends an authorization response to the computing device that is indicative of authorization. The authorization response may be stored locally at the computing device . Thus when the application is subsequently launched the font loader module may access the authorization response from local storage rather than request authorization from the font protection service .

When the font protection service determines that use of the identified fonts is authorized in connection with the identified application the authorization response indicates that such use is authorized. Further the authorization response enables the font loader module to de obfuscate the obfuscated fonts in the font package and use these fonts in connection with the application . Once the fonts are de obfuscated the font loader module may load the fonts so that text included in the application interface is displayed using the fonts of the font package . As discussed previously the font loader module may also de obfuscate the obfuscated fonts when it is determined that the font protection service is unavailable and an authorization response regarding use of the obfuscated fonts in connection with the application has not yet been received. In such instances the font loader module may temporarily use the obfuscated fonts with the application . When the application is subsequently launched the font loader module may again attempt to obtain authorization from the font protection service . Until an authorization response is received from the font protection service the font loader module may continue loading the fonts from the font package for use with the application .

In one approach when the authorization response indicates that use of the obfuscated fonts is authorized in connection with the application such authorization may be considered permanent . That is authorization given to use the obfuscated fonts in connection with the application is not later revoked such as when a developer fails to pay for authorizations given during a grace period. Authorization given to use the obfuscated fonts in connection with the application may carry over to upgrades such that an upgraded version of the application may also be authorized to use the obfuscated fonts. On the other hand authorization given to use the obfuscated fonts in connection with the application may not carry over when the application is uninstalled and then reinstalled. Reinstalls may be considered a new activation of the application and thus require use of the obfuscated fonts to be authorized through the font protection service.

When the font protection service determines that use of the identified fonts is not authorized in connection with the application the authorization response indicates that such use is not authorized. As a result the authorization response may cause the font loader module to have default fonts used in connection with the application . The default fonts may correspond to system fonts or fallback fonts that are used in place of the fonts of the font package . Consequently text included in the application interface is displayed using the default fonts rather than the fonts of the font package .

The font loader module may also be configured to re request authorization to use the obfuscated fonts in connection with the application even though the authorization response indicates that such use is not authorized. A developer may for instance have initially paid for too few authorizations to meet the demand to use the fonts in connection with the application. However after being informed that the purchased authorizations have been consumed the developer may purchase more authorizations. By re requesting authorization at regular intervals an application user that was initially denied authorization to use the obfuscated fonts may subsequently be given authorization based on an additional purchase of activations.

Having discussed example details of the techniques for font protection management consider now some example procedures to illustrate additional aspects of the techniques.

This section describes example procedures for font protection management in one or more implementations. Aspects of the procedures may be implemented in hardware firmware or software or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In at least some implementations the procedures may be performed by a suitably configured device such as the example computing device of that makes use of a font loader module or the service provider of which may be used to implement the font protection service of .

A request is communicated to a font protection service to determine authorization to use the protected fonts in connection with the application block . For example when the application is launched a first time authorization request may be communicated to the font protection service . The information included in the authorization response may be used to determine authorization to use the obfuscated fonts in connection with the application .

A response is received from the front protection service that is indicative of authorization to use the protected fonts in connection with the application block . For example the authorization response may be received from the font protection service . The authorization response may indicate that use of the obfuscated fonts in connection with the application is authorized or is not authorized.

The protected fonts are de obfuscated and used in connection with the application when the response indicates that such use is authorized block . For example the authorization response may indicate that use of the obfuscated fonts is authorized in connection with the application . In this case the obfuscated fonts may be de obfuscated and used with the application . The de obfuscated fonts of the font package may for instance be applied to text included in an application interface of the application .

On the other hand default fonts are used in connection with the application when the response indicates that use of the protected fonts is not authorized in connection with the application block . For example the authorization response may indicate that use of the obfuscated fonts is not authorized in connection with the application . As a result the default fonts which may correspond to fallback or system fonts may be used with the application instead of the fonts of the font package . It follows then that text included in the application interface is displayed using the default fonts when the obfuscated fonts are not authorized for use in connection with the application .

A determination is made regarding whether use of the protected fonts is authorized in connection with the application block . For example the font protection service may determine whether use of the obfuscated fonts is authorized in connection with the application . The font protection service may do so using information included in the authorization request as well as other information accessible to the font protection service e.g. information stored responsive to generating a font package developer purchase information and so on. As part of determining whether use of the obfuscated fonts is authorized in connection with the application the font protection service may compare a number of authorizations given to a number of authorizations allowed. The font protection service may also determine whether information stored at the font protection service indicates that an application and font package identified in the authorization request correspond to the obfuscated fonts .

A response is communicated to a requestor that is indicative of authorization to use the protected fonts in connection with the application block . For example the authorization response may be communicated from the font protection service over the network and to the computing device . The authorization response indicates whether the obfuscated fonts are or are not authorized for use in connection with the application .

Authorizations given for using the protected fonts in connection with the application are recorded block . For example when a determination is made that use of the obfuscated fonts is authorized in connection with application communication of the authorization response is considered an authorization given. Thus the font protection service may increment a value representative of authorizations given to use the obfuscated fonts in connection with the application . In this way the font protection service may track how many authorizations have been given to use the obfuscated fonts in connection with the application .

Information is communicated to a font provider regarding the number of authorizations given block . For example the font protection service may communicate a report to a provider of the obfuscated fonts . The report may indicate how many times authorization has been given to use the obfuscated fonts in connection with the application . Further the report may indicate how many times authorization has been given to use the obfuscated fonts in connection with any application not just with application .

Compensation of the font provider is initiated based on the number of authorizations given block . For example the font protection service may initiate compensation of the provider of the obfuscated fonts . The compensation may be based on the recorded number of authorizations given such as those recorded in block . Compensation may be initiated in a variety of ways by the font protection service . The font protection service may tally the number of authorizations given and pay the font provider directly. Alternately the font protection service may communicate an amount that the font provider is to be compensated to another entity assigned to pay the font provider. The font protection service may initiate compensation of a font provider in other ways without departing from the spirit and the scope of the techniques described herein.

A request is formed by the font loader module for communication to a font protection service to determine authorization to use the protected fonts in connection with the application block . For example responsive to receiving a call via the callable font unpacking function the font loader module may form the authorization request for communication to the font protection service . The authorization request may be effective to determine whether use of the obfuscated fonts in connection with the application is authorized or not.

The protected fonts are de obfuscated by the font loader module for use by the application when a response from the font protection service indicates that the use is authorized in connection with the application block . For example the font loader module may de obfuscate the obfuscated fonts when the authorization response indicates that use of the obfuscated fonts is authorized in connection with the application. The font loader module may then load the de obfuscated fonts for use by the application .

Default fonts are used by the application when the response indicates that the use is not authorized in connection with the application block . For example the font loader module may cause the default fonts to be used with the application when the authorization response indicates that use of the obfuscated fonts is not authorized in connection with the application. Thus the font loader module causes text included in the application interface to be displayed using the default fonts rather than the fonts of the font package .

Having described example procedures in accordance with one or more implementations consider now an example system and device that can be utilized to implement the various techniques described herein.

The example computing device is illustrated includes a processing system one or more computer readable media and one or more I O interface that are communicatively coupled one to another. Although not shown the computing device may further include a system bus or other data and command transfer system that couples the various components one to another. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated such as control and data lines.

The processing system is representative of functionality to perform one or more operations using hardware. Accordingly the processing system is illustrated as including hardware elements that may be configured as processors functional blocks and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions.

The computer readable storage media is illustrated as including memory storage . The memory storage represents memory storage capacity associated with one or more computer readable media. The memory storage component may include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . The memory storage component may include fixed media e.g. RAM ROM a fixed hard drive and so on as well as removable media e.g. Flash memory a removable hard drive an optical disc and so forth . The computer readable media may be configured in a variety of other ways as further described below.

Input output interface s are representative of functionality to allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices using various input output devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone a scanner touch functionality e.g. capacitive or other sensors that are configured to detect physical touch a camera e.g. which may employ visible or non visible wavelengths such as infrared frequencies to recognize movement as gestures that do not involve touch and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card tactile response device and so forth. Thus the computing device may be configured in a variety of ways as further described below to support user interaction.

Various techniques may be described herein in the general context of software hardware elements or program modules. Generally such modules include routines programs objects elements components data structures and so forth that perform particular tasks or implement particular abstract data types. The terms module functionality and component as used herein generally represent software firmware hardware or a combination thereof. The features of the techniques described herein are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

An implementation of the described modules and techniques may be stored on or transmitted across some form of computer readable media. The computer readable media may include a variety of media that may be accessed by the computing device . By way of example and not limitation computer readable media may include computer readable storage media and computer readable signal media. 

 Computer readable storage media refers to media and or devices that enable persistent and or non transitory storage of information in contrast to mere signal transmission carrier waves or signals per se. Thus computer readable storage media does not include signals per se or signal bearing media. The computer readable storage media includes hardware such as volatile and non volatile removable and non removable media and or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions data structures program modules logic elements circuits or other data. Examples of computer readable storage media may include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage hard disks magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other storage device tangible media or article of manufacture suitable to store the desired information and which may be accessed by a computer.

 Computer readable signal media refers to a signal bearing medium that is configured to transmit instructions to the hardware of the computing device such as via a network. Signal media typically may embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier waves data signals or other transport mechanism. Signal media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

As previously described hardware elements and computer readable media are representative of modules programmable device logic and or fixed device logic implemented in a hardware form that may be employed in some implementations to implement at least some aspects of the techniques described herein such as to perform one or more instructions. Hardware may include components of an integrated circuit or on chip system an application specific integrated circuit ASIC a field programmable gate array FPGA a complex programmable logic device CPLD and other implementations in silicon or other hardware. In this context hardware may operate as a processing device that performs program tasks defined by instructions and or logic embodied by the hardware as well as a hardware utilized to store instructions for execution e.g. the computer readable storage media described previously.

Combinations of the foregoing may also be employed to implement various techniques described herein. Accordingly software hardware or executable modules may be implemented as one or more instructions and or logic embodied on some form of computer readable storage media and or by one or more hardware elements . The computing device may be configured to implement particular instructions and or functions corresponding to the software and or hardware modules. Accordingly implementation of a module that is executable by the computing device as software may be achieved at least partially in hardware e.g. through use of computer readable storage media and or hardware elements of the processing system . The instructions and or functions may be executable operable by one or more articles of manufacture for example one or more computing devices and or processing systems to implement techniques modules and examples described herein.

The techniques described herein may be supported by various configurations of the computing device and are not limited to the specific examples of the techniques described herein. This functionality may also be implemented all or in part through use of a distributed system such as over a cloud via a platform as described below.

The cloud includes and or is representative of a platform for resources . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud . The resources may include applications and or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Resources can also include services provided over the Internet and or through a subscriber network such as a cellular or Wi Fi network.

The platform may abstract resources and functions to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform . Accordingly in an interconnected device implementation implementation of functionality described herein may be distributed throughout the system . For example the functionality may be implemented in part on the computing device as well as via the platform that abstracts the functionality of the cloud .

Although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claimed invention.

