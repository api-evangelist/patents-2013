---

title: Dynamic rule management for kernel mode filter drivers
abstract: A method for providing rules for a plurality of processes from a user mode to a kernel mode of a computer is disclosed. The method includes providing to the kernel mode a policy for at least a first process of the plurality of processes, the policy indicating at least when and/or how notifications are to be provided from the kernel mode to the user mode upon detection in the kernel mode of launching of the first process. The method further includes selecting, from the rules stored in the user mode, rules related to the launching of the first process, in response to receiving from the kernel mode a first notification in accordance with the policy, and providing the selected rules related to the launching of the first process from the user mode to at least one of the one or more filter drivers in the kernel mode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043812&OS=09043812&RS=09043812
owner: Real Enterprise Solutions Development B.V.
number: 09043812
owner_city: 'S-Hertogenbosch
owner_country: NL
publication_date: 20130624
---
The present invention relates to computing systems. More specifically aspects of the invention relate to rule management for kernel mode filter drivers.

The discussion below is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter. When a user logs in to a computer a user session is created. In that user session applications are being used. Each application includes one or more processes running in the user session. In order to provide a secure and robust environment to the user each process should be controlled by applying certain security constraints. These constraints can be applied on different levels such as a process level establishing e.g. whether the process is allowed to run and or whether the rights assigned to the process is to be elevated a file level establishing e.g. whether files are allowed to be read or written by a process a registry level establishing e.g. whether registry settings are allowed to be read or written by a process or a network level establishing e.g. whether data is allowed to be sent and or received to from the network.

Whether and how processes within a user session should be controlled is provided in rules. Controlling the processes is done via filter drivers implemented in the kernel mode of the computer and a rule provider implemented in the user mode schematically shown in illustrating a typical computer . As shown the computer comprises a user mode a kernel mode and an application programming interface API which provides a communication medium between the user mode and the kernel mode . The user mode comprises at least one software application that could be run which in turn includes at least one process . The user mode also comprises a rule provider storing rules for all of the processes that could potentially be running in the user mode of the computer . The kernel mode comprises various kernel mode filter drivers shown as a filter driver FD a FD and a FD designed to control access of processes to computer resources e.g. a computer resource could be a network interface card and the process could be a process within a web browser application that needs network access .

Typically the process is controlled in a manner illustrated in . Such control includes the rule provider providing all possible rules i.e. all of the rules associated with each of the processes which may possibly be run on the computer to the various kernel mode filter drivers as the user session is being started and or as the computer is being turned on. This is shown in with arrows and where the arrow illustrates all rules relevant to the FD being provided to the FD the arrow illustrates all rules relevant to the FD being provided to the FD and the arrow illustrates all rules relevant to the FD being provided to the FD . When a filter driver intercepts a request to execute a particular process indicating launching of the process the driver goes through all of the rules stored therein to determine how the request should be handled i.e. whether the process should be allowed to run should be elevated should be blocked etc. A filter driver intercepting such a request arrow from the process to the filter driver is illustrated in . In such an example the filter driver goes through all of the rules provided to it from the rule provider in order to make a decision as to how the process should be handled. Once the decision is made the filter driver provides an indication to the process regarding whether and or how the process is allowed to continue this step is not shown in .

One problem with the implementation illustrated in arises when a computer includes a large number of processes which may be run where each application is associated with a large number of rules. In such a situation providing all of these rules to the filter drivers results in the long start up time and large claim on the scarce kernel resources. Another problem is that the filter drivers having to search through the large number of rules stored therein to find the rules applicable to a particular process being launched also results in slow processing of rules in runtime.

This Summary and the Abstract herein are provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary and the Abstract are not intended to identify key features or essential features of the claimed subject matter nor are they intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background. An aspect of the invention provides a method and a system for management of rules for kernel mode filter drivers in a manner that improves on at least some of the drawbacks of the current implementation described above.

In different aspects of the invention three methods that allow providing rules for a plurality of processes from a user mode to a kernel mode of a computer are disclosed. The first method is a method implemented in the user mode of the computer. The second method is a corresponding method implemented in the kernel mode of the computer. The third method is a method including steps implemented both in the user and in the kernel modes. For all of the methods the processes can be launched in the user mode of the computer while the rules are provided from the user mode to one or more filter drivers implemented in the kernel mode.

The first method comprises the step of providing from the user mode to the kernel mode a policy for at least a first process of the plurality of processes the policy indicating at least when and or how notifications are to be provided from the kernel mode to the user mode upon detection in the kernel mode of launching of the first process. The first method further includes the steps of selecting from the rules stored in the user mode rules related to the launching of the first process in response to receiving from the kernel mode a first notification in accordance with the policy for the first process and providing the selected rules related to the launching of the first process from the user mode to at least one of the one or more filter drivers in the kernel mode.

The second method includes the steps of obtaining in the kernel mode a policy for at least a first process of the plurality of processes the policy indicating at least when and or how notifications are to be provided from the kernel mode to the user mode upon detection in the kernel mode a launching of the first process and in response to detecting the launching of the first process providing a first notification from the kernel mode to the user mode in accordance with the received policy for the first process where the first notification provides a trigger to the user mode for selecting from the rules stored in the user mode rules related to the launching of the first process and for providing the selected rules related to the launching of the first process to at least one of the one or more filter drivers.

The third method includes the steps of obtaining a policy for at least a first process of the plurality of processes the policy indicating at least when and or how notifications are to be provided from the kernel mode to the user mode upon detection in the kernel mode of launching of the first process and in response to receiving in the user mode from the kernel mode a first notification in accordance with the policy for the first process selecting from the rules stored in the user mode rules related to the launching of the first process. The third method further includes the steps of providing the selected rules related to the launching of the first process from the user mode to at least one of the one or more filter drivers.

All of three methods could also include an optional step of providing an indication to the first process regarding whether and or how the first process is allowed to continue in accordance with the selected rules related to the launching of the first process. Such indication could include e.g. blocking the first process replacing security token for the first process injecting a dynamically linked library DLL and or loading additional rules stored in non paged pool i.e. stored in a memory that is always physical present and is a scarce system resource for the first process and or for a user session in which the first process was launched pool.

An aspect of the present invention is based on the recognition that loading rules to the filter drivers of the kernel mode of a computer only on as needed basis i.e. when rules are loaded only after a process has been launched and relate only to that process instead of loading rules related to all processes that could potentially be run on the computer and optionally removing the rules when they are no longer needed allows decreasing demands on the limited memory and processing resources in the kernel without compromising the security of the system.

Management of when and which rules are loaded may be achieved by specially configuring a so called a managing kernel unit MKU implemented in the kernel mode of a computer and specially configuring a so called process management unit PMU implemented in the user mode of that computer. The rules for all of the processes that could be launched in the user mode of the computer are stored in a rule provider in the user mode. The MKU is configured to register itself with the operating system of the computer which registration allows the MKU to detect when a new process is being launched by intercepting request of that process to access the computer resources that the filter drivers in the kernel mode are intended to control access to. The MKU is provided with policies typically upon initiation of a user session as to whether and or when and or how the MKU should provide notifications to the PMU upon detection of the activations of new processes. Such policies are typically established by a knowledge engine i.e. the policies can be e.g. just in time generated based on the actual environment system configuration etc. or stored in a knowledge database. By providing a notification to the PMU indicating that a new process has been launched the MKU triggers the PMU to access the rule provider to determine whether there are any rules related to the newly launched process that should be provided to the kernel mode filter drivers and to provide such rules to the appropriate filter drivers. As a result when a process makes a request to access a resource that a particular filter driver is intended to control access to the filter driver can quickly identify the rules related to that process and handle the request accordingly. A similar approach could be followed in removing rules loaded to the filter drivers when a process that was launched is rundown i.e. when the execution of the process stops . With such dynamic managements of rules for the filter drivers start up time of the computer can be decreased because all rules for all processes that could potentially run in the user mode of the computer no longer need to be loaded to the filter drivers at start up. In addition only loading the rules to the filter drivers on as needed basis results in decrease of runtime response times and demand on the kernel s memory and processing power because the filter drivers have to store and process significantly less rules compared to the prior art implementation described above.

According to other aspects of the invention devices adapted to carry out methods having one or more of the above mentioned features are proposed. For the first method the device could be a PMU while for the second method the device could be an MKU. Such devices could be implemented in hardware in software or a combination of both. In a preferred embodiment the MKU could be a specially configured filter driver implemented in the kernel mode of the computer.

Still other aspects of the invention relate to a computer program and a preferably non transitory computer readable storage medium storing computer program for performing each of the methods having one or more of the above mentioned features. This advantageously enables at least some of the device functionality to be implemented in software.

Hereinafter embodiments of the invention will be described in further detail. It should be appreciated however that these embodiments may not be construed as limiting the scope of protection for the present invention.

The user mode comprises at least one software application that could be run on the computer which application in turn includes at least one process . While only one application including one process is shown in in order to simplify the explanations provided herein in a typical computer environment there are many software applications each application comprising plurality of processes that could be launched. Examples of software applications include text editing software a web browser or a computer video game while examples of processes that could be launched as a part of each of these applications include one or more executable programs such as notepad.exe calculater.exe or PdfReader.exe.

The user mode also comprises a rule provider storing rules for all of the processes that could be launched in the user mode of the computer . A rule may be viewed as a data structure containing parameters needed to make a decision on how a particular kernel mode filter driver should act when it intercepts a request for the launching of the process. When such a rule is provided to the particular kernel mode filter driver within the kernel mode the filter driver can respond to a request from a process in a manner that preserves security of the computer environment. For example for a voice message process the rule provider could store one rule for the file system filter driver to only allow local file access to voice messages and another rule for the network driver to only allow access to the website that stores additional voice mail messages. Another rule in the registry filter driver may be loaded to turn on monitoring of registry access for the voice message application.

In an embodiment the rules stored in the rule provider are validated for a user session in which the process was launched. Rule validation comprises checking that the rules can be processed whenever needed which is important to prevent problems at run time as incompatible or incomplete rules may cause unpredictable results. Carrying out validation proactively by validating the rules stored in the rule provider for the particular user session is intended to prevent or at least diminish these problems.

In an embodiment the rules could be organized and optimized for performance by supporting existing pre fetching mechanisms and using enhanced locking mechanisms. Efficient storage of these rules in memory allows better processing speed.

In addition to storing the rules the rule provider could also store policies for each of the processes that could be launched. A policy indicates when and or how a notification is to be provided from the kernel mode to the user mode when the kernel mode detects launching of a process in the user mode . For example for a voicemail process a policy could indicate to the MKU to send a notification on voice mail process startup and rundown. In an embodiment the rule provider could be implemented as a storage external to the computer but to which the computer has access to e.g. in a form of an external database.

The user mode also includes a PMU cooperating with an MKU implemented in the kernel mode . As described in greater details in association with the MKU is configured to enable process notification and process control while the PMU is configured to provide rules for the processes that could be launched in the user mode to the kernel mode . While the descriptions below are provided referring to the PMU and the MKU as devices such term implies that in various embodiments the functionality of the PMU and the MKU may be implemented in hardware software or any combination of hardware and software and could be distributed among a plurality of such devices.

In a preferred embodiment the computer is such that there is a separate instance of the user mode for each user session. In other words the application could be an application running in a particular user session and the rule provider and the PMU could run in each user session independent of other user sessions for providing to the kernel mode rules for the processes that could be launched in that user session.

The kernel mode comprises one or more kernel mode filter drivers illustrated in the exemplary embodiment of as filter drivers and designed to provide security to the computer by controlling access of processes executed in the user mode to computer resources associated with the computer the computer resources not shown in . For example the filter driver could be a network filter driver for controlling access of the process to a network that the computer is connected to the filter driver could be a registry filter driver for monitoring and controlling registry access while the filter driver could be a file system filter driver for monitoring and controlling file system access.

The method steps of are first described in conjunction with an exemplary architecture of the computer illustrated in . However while the method steps of may be described in conjunction with persons skilled in the art will recognize that any system configured to perform the method steps in any order is within the scope of the present invention.

The method begins in step where policies are provided to the MKU . The provided policies include at least one policy related to notifications for the process but preferably include multiple policies for all processes that could be launched in the user mode . Such policies could initially be stored in the rule provider and provided e.g. by the PMU or by some other entity within the user mode such as e.g. the application to the MKU e.g. upon start up of a computer. In an embodiment the policies and the rules stored in the rule provider comprise policies and rules specific to a particular user session. In this case the policies could be provided only for the process which could be launched in a particular user session upon start of the user session typically at log in of the user.

In step the MKU detects launch of a new process e.g. the process illustrated in . In an embodiment the MKU could be a kernel mode filter driver similar to the filter drivers and which may be registered with the operating system of the computer and as a result of the registration able to receive notifications when a new process is launched and when the launched process is rundown. In response to detecting the launch of the process the MKU refers to the policies provided to it in step to identify a policy related to the process . The method then continues to step where the MKU provides a first notification to the PMU that is in accordance with the policy for the process . Thus the MKU is configured to notify the PMU of process activations based on policies previously provided to the MKU from the user mode .

The method then proceeds to step where in response to receiving the notification of step from the MKU the PMU accesses the rule provider to determine whether there are any rules associated with the launching of the process that need to be provided to any of the filter drivers in the kernel mode and possibly to the MKU . If so then in step the PMU starts setting up secure environment associated with the launched process by loading appropriate rules to the appropriate filter drivers in the kernel mode . Step may also include loading certain rules for the process to the MKU when the MKU is implemented as a filter driver. In various embodiments the rules required by the one or more filter drivers for the launched process may be loaded to the respective filter drivers either directly from the rule provider to the filter drivers in the kernel mode from the rule provider to the PMU and then to the individual filter drivers in the kernel mode or from the rule provider to the PMU and then to the MKU which can provide the rules to the individual filter drivers. Once the rules are loaded to the appropriate filter drivers in the kernel mode the filter drivers that intercept requests from the process are able to handle the requests according to the rules in a manner that it is currently done in prior art implementations. In addition to providing the appropriate rules in step in one embodiment as a part of setting up the secure environment for the process the PMU could also e.g. copy necessary files into folders start up other processes and perform other actions as known in the art for creating a dedicated preset user specific environment adapted to the user. Furthermore system resources such as e.g. CPU memory disk space and number of network connections could be trimmed or extended. Also as a part of setting up the secure environment for the process the PMU could block the process from executing and or inject a DLL which is an extension to a process that can be used to change behaviour of that process to limit or extend or manage its capabilities.

In an optional embodiment as a part of step the PMU may determine which rules stored in the rule provider for the process are applicable for a particular user session in which the process was launched. In this manner only the rules relevant for the particular user session will be loaded to the filter drivers in step .

In an optional embodiment the method of could continue with step of where the PMU would also provide a notification to the MKU regarding the rules that were provided in step . Various processes have various security tokens associated with them the token determining what the process is allowed to do access. Normally when a process is launched a token for that process is obtained from an application that launched the process and used in the user mode . As a part of step the PMU could instruct the MKU to replace the token for the launched process the token being stored in user mode memory. Alternatively or additionally as a part of step the PMU could instruct the MKU to re process the rules that may have been loaded to the MKU in step . If this is the case then the MKU could re process the rules as instructed by the PMU in step shown in .

In step based on the notification received from the PMU in step the MKU could provide an indication to the launched process as to how the process is allowed to proceed. Such an indication could be e.g. an indication that the process is not allowed to run or may be allowed to continue. At this point optional changes may have been applied to the process by the PMU and or the MKU to limit or expand its behaviour and capabilities. For example the process may be allowed to only open documents stored in specific locations only access given websites or may get extended rights to access specific objects. Also a process may be setup to be monitored for certain activities.

The method steps described above could be repeated when the launched process is rundown as the rundown procedure may require security considerations similar to those associated with the launching of a process. This is schematically illustrated in with steps through and implies that the policies provided to the MKU in step also included policies indicating when and or how notifications are to be provided from the kernel mode to the user mode upon detection in the kernel mode of rundown of the launched processes.

In step the MKU detects rundown of the process and refers to the policies provided to it in step to identify a policy related to the rundown of the process . The method then continues to step where the MKU provides a notification to the PMU that is in accordance with the policy for the rundown of the process . The method then proceeds to step where in response to receiving the notification of step from the MKU the PMU accesses the rule provider to determine whether there are any rules associated with the rundown of the process that need to be provided to any of the filter drivers in the kernel mode and possibly to the MKU . If so then in step the PMU replaces loaded rules related to the launching of the process with rules related to the rundown of the process in the respective filter drivers in the kernel mode . If in step the PMU determines that the rule provider does not have rules related to the rundown of the process for one of the filter drivers to which rules related to the launching of the process were loaded then the PMU may be configured to simply delete the rules loaded to that filter driver that related to the launching of the process . In an embodiment the PMU may be configured to select and load only the rules related to the rundown of the process that are applicable to the particular user session in which the process was executed. The method could then proceed to step where the PMU would provide a notification to the MKU regarding the rules that were provided in step . In step based on the notification received from the PMU in step the MKU could provide an indication to the rundown process as to how the process is allowed to proceed. Such an indication could be e.g. an indication that other processes may need to be terminated files may need to be saved away for future use and or rules may be unloaded to free up system resources.

For illustrative purposes below is provided one particular example of dynamic rule management according to one embodiment of the present invention.

Consider that the user is using a voice message application. The application comprises only one base process voicemsg.exe in this case which can play selected voicemail messages. Part of these messages is stored on a local private user share while common messages are stored on a global website that can be accessed and listened to by multiple users. The MKU is configured to intercept the launching of this process and provide a notification to the PMU . Before process launching continues rules are loaded from the rule provider to a system file filter driver and a network filter driver in the kernel mode for allowing access to the local and network voice messages while blocking access to other files that may not be used by voicemsg.exe. Also registry rules are loaded to a registry filter driver in the kernel mode for monitoring registry changes. In addition the PMU sets or initiates some other entity to set the registry settings to a known state. The PMU also preloads or initiates some other entity to preload some voice messages into the local file share. Additional rules that allow additional processes needed by the voicemsg.exe are also loaded to the appropriate filter drivers in the kernel mode . When above has completed the process may continue to launch and a reply message is send to the MKU which allows voicemsg.exe to complete its startup.

In the launching of the voicemsg.exe process described above an example of a rule for blocking access of voicemsg.exe to all files could be as follows 

An example of a rule for allowing access for voicemsg.exe to access its selected local voice messages could be as follows 

Once the user stops the process voicemsg.exe the MKU intercepts the rundown. Captured registry changes are used to determine the next startup values and these are saved at this point for future use. Rules that are no longer needed are unloaded from the filter drivers in the kernel mode . Final logging buffers are captured and processed. Then a reply is send to the MKU and further process rundown is allowed.

It is to be understood that any feature described in relation to any one embodiment may be used alone or in combination with other features described and may also be used in combination with one or more features of any other of the embodiments or any combination of any other of the embodiments. One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of non transitory computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory or flash memory on which alterable information is stored. Those skilled in the art can implement the description and or figures as processor executable instructions which can be written on any form of a computer readable medium.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above as has been held by the courts. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

