---

title: Distributed association engine
abstract: A computer-implemented method for a distributed association engine, comprising searching, by a processor, for one or more objects of interest within a spatial bounded area, identifying, by the processor, the one or more objects of interest responsive to the search, and mapping, by the processor, one or more relationships between a user and the one or more objects of interest in a personal network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09462015&OS=09462015&RS=09462015
owner: VIRTUALBEAM, INC.
number: 09462015
owner_city: Millbrae
owner_country: US
publication_date: 20131031
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Patent Application No. 61 720 681 filed on Oct. 31 2012 and entitled DISTRIBUTED ASSOCIATION ENGINE which is hereby incorporated by reference in its entirety.

Server based search systems have inherent delays due to round trip signal travel and processing delays. Due to these delays server based systems are unable to meet the requirements of real time search of dynamic spaces comprising objects that may change one or more parameters such as for example location orientation or relationships. Server based systems fail to make use of the computing resources available on user devices which continue to increase in power over time.

Current search engines can only map and process a single static object instant relationship. Current platforms cannot model dynamic objects or respond to requests in a timely manner. Client server computing centralizes intelligence to serve the needs of less intelligent client applications. Current client applications have total dependency on the server side. Cloud computing adds a loss to true value of time and data. Communicating changes back to a server limits processing of real time changes of dynamic objects.

In various embodiments a computer implemented method for a distributed association engine is disclosed. The computer implemented method comprises searching by a processor for one or more objects of interest within a spatial bounded area identifying by the processor the one or more objects of interest responsive to the search and mapping by the processor one or more relationships between a user and the one or more objects of interest in a personal network

In various embodiments a system for implementing a distributed association engine is disclosed. The system comprises a display screen a processor and a non transient memory medium operatively coupled to the processor. The memory medium is configured to store a plurality of instructions configured to program the processor to search for one or more objects of interest within a spatial bounded area identify the one or more objects of interest responsive to the search and map one or more relationships between a user and the one or more objects of interest in a personal network.

In various embodiments a non transitory computer readable memory medium is disclosed. The non transitory computer readable memory medium is configured to store instructions thereon that when loaded by a processor cause the processor to search for one or more objects of interest within a spatial bounded area identify the one or more objects of interest responsive to the search and map one or more relationships between a user and the one or more objects of interest in a personal network.

Reference will now be made in detail to several embodiments including embodiments showing example implementations of systems and methods for a distributed association engine. Wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality. The figures depict example embodiments of the disclosed systems and or methods of use for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative example embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

In some embodiments a distributed association engine is disclosed. The distributed association engine processes multi instant relationships between multiple people and multiple objects of interest in real time. The distributed association engine may be distributed such that a processing load is distributed on one or more devices. In some embodiments a plurality of devices run identical spatial and social search algorithms and exchange result sets. The additional processing power available on the plurality of devices is leveraged to quickly model a physical and or virtual world of objects and relationships among the objects. In one embodiment laws of locality enable the distributed association engine to process search and or requests faster than a server based engine. The distributed association engine also allows mapping modeling and interacting with static objects dynamic objects and or virtual objects in real time.

In one embodiment a distributed association engine is coupled with a flexible adaptive front end to provide safe private quick and autonomous discovery of a user s surroundings search for friends and or track one or more objects. A user may select objects of interests OOIs and interact with the objects of interest. In one embodiment a distributed association engine enables searching within any shape or form in four dimensions one dimensional time plus three dimensional space. The search algorithms may be distributed for example running locally on a single device and or distributed on several devices. The distributed association engine identifies objects of interest through one or more search algorithms. The objects of interest may comprise dynamic objects virtual objects static objects and or any other type of object.

In one embodiment the distributed association engine runs at least partially on a user mobile device. By keeping both code and data local users can manage properties of and relationships to target objects of interest much faster than server based engines. The distributed association engine creates a distributed model of social personal and product graphs on the mobile device allowing users to manage multiple OOIs run search requests against multiple OOIs along multiple dimensions simultaneously in real time. In one embodiment the properties of target OOIs and user relationships to the OOIs are calculated and displayed in real time by the distributed association engine. The properties of each association of interest and each object of interest are displayed in real time by the distributed association engine.

In one embodiment a device running a VirtualBeam Application vbApp implementing a distributed association engine comprises the center or zero location of a search. A graphical user interface GUI is presented to illustrate the user central nature of the search such as for example by displaying the user and or device at the center of a bubble view or at the start of a beam cone view of a search. In one embodiment the use of a distributed system allows inter device and device server communication to increase efficiency. Distributed searching lowers the overall necessary bandwidth and decreases load on back end servers for any given number of user searches and reduces overall bandwidth required for all vbApp enabled devices on a network.

In some embodiments a distributed association engine leverages object relational modeling discrete math and graph theory to construct a model of a real time space world that is capable of absorbing change and convergence among a plurality of nodes in semi real time. In one embodiment all nodes run identical DTM code with a small footprint. Nodes may comprise for example mobile devices servers and or other devices. The distributed search algorithms and data structure are scalable and may run on any node.

In some embodiments associations need not connect two distinct objects. For example a self referenced association has the same object as a start point and end point of the association. The distributed association engine may implement a self referenced association as a directed edge discussed in more detail below and or as a variable or member in a class. In some embodiments dynamic properties of associations such as for example distance to an OOI is stored in the representation of the association for example as a variable within an edge. In one embodiment each association is described as . For example an association for a relationship between a Facebook user and an object may comprise where Facebook Like is a unique static ID reserved for the act of liking something on Facebook and the start node ID and the end node ID comprise system wide unique object IDs for the object and user.

As a vbApp learns and discovers new associations the vbApp builds a map of a user s personal networks such as for example social professional and or other types of personal networks. The personal networks may be constantly changing because of change in associations amongst people and objects. To create model and manage personal networks the vbApp implements a library of functions. In one embodiment the vbApp uses the library to create a model of personal networks while user private data remains on the device and is not shared.

In one embodiment the vbApp comprises a node within a VirtualBeam System vbSystem . The vbApp is configured to run standalone and autonomously without server support. The vbApp creates updates manages and controls one or more user personal networks . The vbApp attempts to model graphs and solve problems autonomously on the vbApp enabled device. If the vbApp is unable to solve a problem autonomously the vbApp may enlist one or more additional devices within the vbNet in a distributed association engine. For example in one embodiment a vbApp may communicate with one or more additional vbApp enabled devices over the vbNet to solve a search request generated by the vbApp . In other embodiments the vbApp may communicate with one or more servers to model and or solve complex problems.

In some embodiments a personal network is communicated to a server to generate a global map of all personal networks . The global map allows a vbApp to solve complex problems as part of the vbSystem . By sharing personal networks with the one or more backend servers vbServers which implement instances of vbNet one or more global networks are generated. In one embodiment one or more topology servers are implemented to develop and track the topology of the global network to assist in solving problems. Communication between the vbNet nodes vbApps is secure and encrypted and includes privacy and security features. In some embodiments a vbApp implements a local instance of the vbNet . Each node may participate in solving a particular problem announcing a discovered pattern sharing patterns of interest sharing a portion or subset of a personal graph identified nodes subgraphs and or other interactions with the vbNet .

In one embodiment the vbApp is configured to provide a private secure useful and easy to use real time location based service LBS . In one embodiment a distributed association engine may facilitate operations by providing an operations support system services such as for example authorization and authentication of handheld devices and mobile applications that request access to a vbNet user authentication establishing proper encoding schemas and or additional support services. In one embodiment the multi dimensional search experience may be tightly coupled with a unique user experience user interface UX UI . In some embodiments a social graph is merged with a product graph through a personification engine. For example a friend finder application may come with a deal finder feature that looks for deals and displays them in real time.

In one embodiment a vbNet comprises a dynamic topology modeler DTM . A DTM constructs the personal networks of a user as each relationship between the user and one or more OOIs is identified. The DTM handles topological and other requests. The DTM is agnostic to peculiarities of the personal and or global networks that are modeled and can be used to model simple to complex networks. In some embodiments one or more domain mappers convert the agnostic library functions for example the DTM constructs into domain specific functions. For example in one embodiment a vbNet addNode O Object call is replaced by or encapsulated in the body of a higher level function specific to a domain.

In some embodiments all vbApps run identical DTM code. For example each vbApp may execute the same set of Objective C or Java classes. By running identical code sharing between vbApps is seamless and allows the distributed association engine to expand to additional devices without the need to adapt or change objects. A proprietary application layer protocol may be used to communicate between vbApps . The protocol is used to carry and exchange network and other properties.

A vbApp may share subnets of one or more personal networks or the entire network stored by the vbApp using DTM. For example a vbApp may share the vbApp s view of the world such as objects and the relationships between those objects with other vbApps including mobile devices and or servers. A vbApp can subscribe to local and or global vbNet events communicate changes to the vbSystem and request services from the vbNet . In some embodiments the information shared by the vbApp is limited to only the change in associations detected by the vbApp. For example as a vbApp discovers one or more nodes and or associations between nodes the vbApp may generate a personal network. Each of the discovered nodes and or associations between the nodes may be communicated to a vbServer as it is discovered. If an association between two previously discovered nodes changes for example a Node A and a Node B are no longer associated the vbApp may only communicate the change in relationship between Node A and Node B instead of communicating the entire personal network each time a change is detected. The changes communicated by the vbApp to the vbServer are multicasted to one or more additional vbApps in communication with the vbNet and which have Node A and Node B in the node s personal network.

In one embodiment the vbNet models associations and solves topological problems. A local instance of the vbNet is used to model personal local networks . A server or remote side of vbNet components can be utilized to construct super nets that model a global network of interconnected individual personal networks . In some embodiments the vbNet network logic is agnostic to non topological properties of the personal networks . A vbNet may comprise local instances and or remote instances. The remote servers of the vbSystem build holistic views and construct models of global or super networks using software objects the DTM provides.

In some embodiments a vbApp applies graphical modeling techniques to build one or more semi isomorphic maps of one or more networks that the vbApp learns over time. For example when a vbApp searches for a doctor shows interest in a landmark shares observations with other friends makes a call tags an object to track or performs an activity the vbApp gradually constructs a graphical model of a personal network on a local host such as for example a mobile device. The vbApp keeps both logic and data on the local host. The DTM which comprises the core of the vbNet logic is agnostic to peculiarities of the networks modeled. Almost any type of network sub net super net path or similar can be modeled and analyzed.

A vbApp may be configured to add one or more OOIs to a user s personal network . For example a user may use the vbApp to search for a hospital in the neighborhood to lookup location of a bus in downtown San Francisco to find Facebook friends visiting from out of town show interest in a landmark point at a retail store click an ad like a picture and or recommend an article on a social network. The OOIs and the relationships between the user and the OOIs may be added to the personal network . A topological model of the relationships and objects that participate in the relationships may be built on the local device by the vbApp . In some embodiments a vbApp imports OOIs and relationships from a user s social and business networks. For example if a user logs into a social and or business network such as for example Facebook LinkedIn Google Plus Skype and or other social networks through a vbApp interface the vbApp learns the users social and business networks of friendships business connections and other types of associations and adds the OOIs and relationships to the user s personal network . A user may use the vbApp to add associations and or objects to the vbApp s private network for predefined time intervals allowing the distributed association engine to support ad hoc relationships. For example in one embodiment a relationship exists between a tour bus in San Francisco and a tourist on the tour bus with a one day ticket. The tourists wishes to know the distance to the tour Bus while on the tour. The tourist T may add the tour bus B to a private network on the tourist s vbApp enabled device for 24 hours. A vbApp can instruct the vbNet to create associations at a first time and remove the associations at a second time. In some embodiments the generation and or removal of associations is periodic. The DTM provides the logic to model graphs and operate graph structures of relationships. For example the association Tourist T track location of Bus B is added to the personal network of the Tourist T and is deleted from the vbNet after 24 hours.

In some embodiments a personal network of a vbApp is limited by one or more spatial boundaries VB SPC . A VB SPC allows the vbApp to generate a model of a physical and or virtual space of interest to a user such as for example a space in which the user is physically located. In one embodiment a vbApp is concerned only with objects of interest that are located within or related to a search area such as for example a two dimensional 2D or three dimensional 3D area. The search area may be specified by a user and or automatically generated by a vbApp . A vbApp comprising a VB SPC allows a user to discover the user s surroundings scan a building and or identify objects of interest in some sub space of the search area. In some embodiments the vbApp lets users specify and modify search area properties. For example a vbApp can search for objects in a search area limit the types of objects identified in the search area and or otherwise modify the search area properties. U.S. Patent Appl. Pub. No. 2012 0041966 published on Feb. 16 2012 entitled DIRECTIONAL INFORMATION SEARCH FROM A MOBILE DEVICE is herein incorporated by reference in its entirety.

In one embodiment a vbNet and or a vbApp comprise several generic software objects comprising one or more primitive software objects which may be dynamically assembled together and used in different configurations in application programs with economy in memory usage and execution time. In one embodiment the following software objects may be available to a vbNet through a software library referred to as a VB DTM dynamic topology modeler library. Objects of the DTM library the object properties and usage are described in more detail below.

In one embodiment random access linear data lists comprise generic pointers to a location in memory space of the executing code such as for example local RAM a machine farm or a cloud server which may contain a single primitive data object of the native programming language and or a generic pointer to a data structure of that language. Examples may include integers low and high precision floating point real numbers Boolean functions strings of characters generic pointers to complex data structures and or any suitable primitive data object. In one embodiment any of the data types may be stored in a single list in any of the list s elements in any order. The single list provides a list processing environment which is data type agnostic and provides fast storage and retrieval means. The list storage property facilitates design and control of the memory usage in any of the other generic objects of the vbNet such as for example nodes graphs arcs and or other objects. In traditional systems not all the elements of a data structure designed to represent a graph are necessarily required while executing a related algorithm on that graph. A data structure designed and declared in a conventional and static way comprises 

In one embodiment a vbNet comprises recursive and flexible construction of complex associative data structures from generic and simple structures. The recursive and flexible construction allows a vbNet to model fractal phenomenon molecular structures social network agents and associations and many other data in different disciplines in a natural and versatile manner. In one embodiment a node represents an object such as for example an OOI a vbApp enabled device and or other objects in personal and or global networks. A node is connected to other nodes with an edge or an arc. In one embodiment a node may comprise static data and or dynamic data. Static data may comprise for example a numeric integer value and a list of pointers to all edges or arcs which are incident to the node. Dynamic data of a node may comprise for example an optional zero to any number of vbntList objects.

In one embodiment an edge defines a reflexive two way relation between a pair of unordered nodes such as for example a reflexive relationship between a Node A and a Node B. In one embodiment an edge comprises static data and or dynamic data. The static data may comprise a general purpose real value and pointers indicating the nodes at each end of the edge. The dynamic data may comprise an optional zero to any number of vbntList objects.

In one embodiment an arc defines a directed one way relation between a pair of ordered nodes such as for example NodeA NodeB or NodeA NodeB. In one embodiment an arc comprises static data and or dynamic data. The static data may comprise for example a general purpose real value and pointers indicating the two nodes at each end. The dynamic data may comprise for example an optional zero to any number of vbntList objects. In various embodiments edges and or arcs may represent for example the relationships between nodes within a personal and or global network.

In one embodiment graphs and digraphs comprise container objects for nodes edges and or arcs. A graph and or a digraph is constructed to represent certain relationships of objects and object attributes. In some embodiments graphs and digraphs comprise standard algorithms to operate on nodes edges and or arcs contained within the graph and or digraph. In various embodiments the algorithms may include 

In one embodiment a graph and or a digraph comprises static data and or dynamic data. The static data may comprise for example a list of nodes a list of edges a list of arcs and or a list of pointers to auxiliary structures which may be requested to be built and destroyed on demand. The dynamic data may comprise for example an optional zero to any number of vbntList objects. In some embodiments graphs and or digraphs represent one or more personal and or global networks.

In one embodiment a vbNet comprises one or more super nodes. A super node may represent a graph and or a digraph object implicitly and may be used to construct one or more super net and or super dinet objects. In one embodiment super nodes comprise virtual objects with no memory allocation and are implicitly defined as the head and or the tail of a super edge and or a super arc. The objects of the vbNet comprise self similar objects. For example in one embodiment a node and a super node comprise the same object within the DTM library. The self similar nature of the vbNet allows the vbNet to model increasingly complex networks including for example networks of networks.

In one embodiment a vbNet comprises one or more super edges and or super arcs. Super edges and super arcs may connect a pair of unordered super nodes in a super net and a pair of ordered super nodes in a super dinet. In one embodiment a super edge and or a super arc may be used to recursively construct complex and hierarchical data models out of graphs digraphs super nets and super dinets. In one embodiment a super edge and or a super arc comprises static data and or dynamic data. The static data may comprise for example a general purpose real value and pointers indicating the two super nodes at each end.

The pointers may indicate a graph digraph super net and or a super dinet as nodes of a super net or super dinet. The dynamic data may comprise for example an optional zero to any number of vbntList objects.

In one embodiment a vbNet comprises one or more super nets and or super dinets. Super nets and or super dinets comprise container objects for super nodes super edges and or super arcs. Super nets and or super dinets are constructed to represent certain relationships between complex objects such as for example graphs digraphs super nets and or super dinets as nodes and attributes. Super nets and super dinets are similar to graphs and digraphs and provide algorithms to operate on super nodes super edges and or super arcs contained therein. In one embodiment a super net or super dinet comprises static data and or dynamic data. The static data may comprise for example a list of super nodes a list of super edges super arcs and or pointers to auxiliary structures which may optionally be requested to be built and destroyed. The dynamic data may comprise for example an optional zero to any number of vbntList objects.

In some embodiments each element of the vbNet for example nodes edges arc super nodes super edges super arcs and or other vbNet objects are extensions of a single software class. For example in one embodiment a class may be defined as an object class. An association such as for example an edge and or an arc may be defined by extending the object class to include references to a start node an end node and the direction of the relationship for example a single direction arc or a bidirectional edge. Other objects such as for example a super edge may be defined by extending the object class to include a reference to a start super node and an end super node.

For example in one embodiment a vbNet object may comprise a vbStar. A vbStar comprises a constellation of nodes and or OOIs forming a star topology with one OOI at the center of the star and one or more other OOIs or leaves connected to the center by one or more associations such as an edge or an arc. In some embodiments a leaf may represent another node such as for example a vbApp enabled device or OOI within the vbNet. In some embodiments a leaf comprises a reference to a remote or third party object. Each leaf may be identified by a leaf ID. The leaf ID may comprise for example a unique ID generated by the vbApp and or the vbNet for a node. Each leaf may have a type identifier indicating the type of object represented by the leaf such as for example a vbApp enabled device an OOI a super node an association and or any other object.

In various embodiments the vbNet comprises an organically growing network. One or more nodes edges arcs and or nets comprise extensions of one or more objects of interest. The vbNet may organically expand by collapsing supernodes into nodes of a supernet and or expanding supernodes into a personal graph or net. Self referenced links and or associations for OOIs allow modeling of multi dimensional associations. For example in one embodiment an association X is friends with Y is stored by a node. The is friends with association is modeled as an edge and or an arc with one or more dynamic properties such as for example distance to price of call per minute last time association made or any other suitable dynamic property. A vbApp may process the association and or execute one or more algorithms between X and Y without need to consult with and or make a request to a vbServer.

In one embodiment a vbNet comprises auxiliary data. Auxiliary data comprises data objects which are large and or transiently required for one or more algorithms. For example an adjacency matrix of a graph structure in social networks if allocated as a two dimensional array will waste a considerable amount of memory space. However certain algorithms need an adjacency matrix of a graph structure in order to run efficiently in time. In one embodiment a vbNet s various graph like structures do not automatically allocate such matrices as the graph is being built. Instead a vbNet may comprise methods and function calls to create adjacency matrix data and to delete the adjacency matrix data when the data is not needed. In one embodiment several number of different matrices may be associated with graphs and dynamic creation and allocation of auxiliary data becomes important to handle memory size at run time as well.

In some embodiments each of the vbApps comprises a sandbox . A sandbox is configured to store OOIs and vbApps in the vbApp s personal network. illustrate sandboxes for each of the vbApps at a time T. In one embodiment the OOIs and or the vbApps added to a vbApp s sandbox comprise objects identified by the vbApp during a search. illustrates a sandbox for the first vbApp comprising connections to three OOIs and the third vbApp . Although the first vbApp has interacted with a fourth OOI and the fourth vbApp these objects have not been added to the first vbApp s sandbox . In some embodiments a user may select one or more identified objects to be excluded from a sandbox. In some embodiments the excluded objects are non responsive to one or more searches conducted by the first vbApp

In one embodiment each of the OOIs may comprise a real world and or virtual object. Each object for example an OOI and or a vbApp enabled device within the vbNet is represented by an n tuple comprising one or more descriptors. For example the n tuple may comprise longitude latitude altitude one or more type codes a last time changed indicator a first time discovered indicator and or any other descriptor. In some embodiments the n tuple may comprise a source of static data a source of dynamic data a source for social data length width object tree identifier including root and offspring a life span and or any other data source. Mobile and dynamic objects may have additional parameters such as for example vector and or speed. Static objects may be stationary but comprise one or more dynamic properties such as for example a price quantity. In one embodiment objects may comprise a system wide unique identifier. Objects may also comprise logical names which have local significance and need not be unique such as for example an object logical name identifying an OOI as GoodCoffeeShop. 

In some embodiments the n tuple associated with an object is used to determine whether the object is responsive to a search request. For example the fourth vbApp may conduct a search which returns an OOI as a result. The OOI comprises a static OOI with a single dynamic and or variable property p. The fourth vbApp comprises a unique ID which is issued by a vbServer which checks uniqueness. The OOI comprises a unique local identifier assigned by the fourth vbApp such as for example id D .id j . The OOI may also be discovered by the second vbApp . The second vbApp comprises a unique identifier assigned by the vbServer. The second vbApp assigns a unique local identifier to the OOI such as for example id B .id j . In one embodiment every object returned by a vbApp search is assigned an ID that is unique for that vbApp . In some embodiments a vbApp may not assign a static object a unique object ID until the particular static object is placed into one of the vbApp s collections such as for example the sandbox. The vbApp may provide automatic retrieval of dynamic properties of the object.

In one embodiment objects may be public private protected and or shared. The objects may be placed into multiple collections and shared over multiple vbApps . In one embodiment a vbApp may change its view of a public object. For example a vbApp may change a local status of an OOI from public to private when the OOI is added to the vbApp s sandbox. Public private and protected objects may be shared with sharing of the objects determined by the relationship between a first vbApp and a second vbApp . For example in one embodiment protected objects may only be shard by a first vbApp to a second vbApp identified as a trusted friend. Examples of private objects may include for example a family car a FedEx package the number of seats remaining in an arena for a specific show and or other semi public objects. Public objects may include for example a specific commercial flight a manufacturer coupon and or any other public object. Protected objects may include for example children parents and or other sensitive objects.

In some embodiments a connection between a vbApp and an object comprises a loose connection. A loose connection may be represented by an edge. A loose connection comprises a connection between a vbApp and an object available at the system level but not available to the entire computing platform on which the vbApp is running. A VbApp may comprise a node or vertex comprising one or more descriptors. The vbApp may be loosely associated with a static OOI. The vbApp and the OOI may be linked by an edge. The static OOI may comprise one or more descriptors such as for example Static OOI category Static OOI data and or other descriptors. Examples of static OOIs include shops restaurants and or other static real world objects. The vbApp may also be loosely associated with one or more dynamic OOIs. The dynamic OOI may comprise one or more descriptors for example dynamic OOI type dynamic OOI data and or other descriptors. Examples of dynamic OOIs include friends family members taxis planes and or other mobile objects. The vbApp may further be associated with one or more virtual OOIs. The virtual OOI may comprise one or more descriptors such as for example virtual OOI type virtual OOI data and or other descriptors. Examples of virtual OOIs include e coupons e retailers and or other virtual objects. In various embodiments a dynamic OOI may comprise other vbApp enabled devices.

In one embodiment the OOIs in the sandbox may represent nodes in a vbApp node list . As discussed above edges may represent associations to particular nodes and or networks of nodes. The OOIs include representative edges and or arcs. Edges as discussed above may represent relationships to particular nodes or networks of nodes. A sandbox provides access to the OOIs stored by the vbApp . In one embodiment access to a sandbox is limited to authorized requestors. In various embodiments as OOis and associations of interest are learned by the vbApp for example by the DTM software library the nodes and edges form two separate lists for example a node list and an edge list . When a user selects a new OOI for inclusion in a sandbox or the vbApp automatically adds an OOI to a sandbox the length of the node list grows by one. The length of the edge list need not change unless the user enters into a tight relationship with a node for example by showing an interest in the node. A sandbox may provide access to the node list and the edge list . A model of the distributed network of all vbNet users may be generated on a multi dimensional graph. A vbApp in various embodiments may comprise active or tight relationships comprising relationships between the vbApp and an OOI in the sandbox and loose relationships comprising relationships between the user and any OOI that appears in a search result and is displayed to the user.

In some embodiments a vbApp is implemented on a mobile device comprising a display interface such as for example a touch screen. The vbApp may be configured to display results on the mobile device s touch screen including objects which the user interacts with relationships associations the user builds with those objects functions that the user can apply and or other object interactions. The vbApp may also calculate and display properties of mobile stationary and or dynamic objects as well as properties of associations between those objects. For example a vbApp may discover all of a user s Facebook friends who are currently in a specific geographic location. The friends are shown on the user s phone s touch screen as small icons. In one embodiment the background may be similar to a radar like screen where the location altitude and or other properties of all objects in close space can be shown simultaneously. The vbApp may also allow a user to choose what the user would like to see about discovered objects and or discovered associations. As an example for friends a user may choose to see in a single view round trip air ticket in dollars to a friend s city multiple ticket prices for multiple cities corresponding to multiple friends price per minute to call and or conference call one or more friends and or additional interactions. The vbApp may allow the user to run a shortest path routing algorithms for example to determine least cost routing and or other algorithms using default and or selected techniques back tracking branch bound and or other algorithms against particular properties of objects and associations identified by the vbApp. For example if the vbApp calculations on the vbApp to determine the proper order or sequence to visit OOIs given shortest time shortest distance and or other object properties. Other examples include for example choosing to see the value of the a property in distance in kilometers for one or more taxi s or choosing to see the price for round trip tickets to target out of country landmarks of interest stored in a sandbox or price per minute for international conference call to several friends. In some embodiments vbApps may share the output of algorithms run locally on the vbApp enabled device with one or more additional vbApps and or vbServers. For example the output of a search discovery sort seek and or other algorithms. In some embodiments the vbApp is configured to share a personal network collection behavioral pattern trend and or other models in a vbApp s distributed graph data struction for example using DTM software library calls. vbApps communicate via VB graph exchange protocol and may use a VB graph description language and or other graph description or markup languages to specify the OOIs and or associations of interest that are to be shared. In some embodiments the vbApp is configured to display objects and associations to the user. For example an intuitive graphical UX UI may depict multi point relationships and populate them with data giving a novel experience such as for example displaying all gas stations in 20 mile kilometer proximity displaying the gas station locations specials and price of unleaded gas at that location. In other embodiments a user may be interested in rental units pointing at a high rise in coffee shops in a different town shopping malls within 20 miles radius restaurants for sale along highway and or rush hour traffic on the Golden Gate bridge each of which may be represented by the vbApp.

In one embodiment the vbApp may support a default sandbox. The default sandbox may appear as an item in a horizontal slider on the interface . In various embodiments dragging an OOI into the sandbox icon adds a new object or node to the node list of the sandbox. A sandbox may have any number of nodes. A user may label a sandbox with a custom logical name such as for example my family or may leave the sandbox unnamed. A vbApp may comprise one or more sandboxes and a user may have multiple sandboxes across multiple vbApps. A user may select or deselect a sandbox for display on the vbApp interface . The OOIs stored in the sandbox may be displayed or hidden depending on whether the sandbox is selected.

In one embodiment a user may select the sandbox option from the horizontal slider to display one or more OOIs stored in the vbApp sandbox. In one embodiment a user may select one or more individual sandboxes to display or hide the OOIs stored in that sandbox. In all sandboxes are displayed and the screen shows icons for a flight OOI two individual OOIs a public bus line OOI a gas station OOI and twitter OOIs . In one embodiment a back arrow may allow a user to return to the previous screen. The sandbox including details of the stored OOIs may be stored on the local host for example the mobile device running the vbApp.

In one embodiment the horizontal slider may comprise predefined and or user defined labels for one or more OOIs stored in the sandbox. The labels may comprise sub categories within the sandbox . OOIs without an assigned label may keep their original category names for example a label assigned to the OOI by the vbSystem. For example if a Facebook friend was added to the sandbox but no labeled was assigned then Facebook may be displayed as an item in the horizontal slider and may show the stored Facebook friend. illustrates one embodiment comprising three user defined labels kids gas and commute . In one embodiment selection of a see all option shows all OOIs of the sandbox labeled or unlabeled. In one embodiment OOIs may still appear in the OOI s original category even after they are moved to the sandbox and assigned user defined logical names.

In one embodiment the interface comprise a search results area a primary visual functions indicators area display areas that can be configured to show advertisements and or messages the horizontal slider a secondary controls area and or other areas. In one embodiment a Default Beam dBeam is displayed on the interface. In a 2D View the dBeam comprises a length r where r may be equal to the radius of the circle . In idle time the dBeam may move in a first direction such as for example counter clockwise. The dBeam may stop when the dBeam encounters an OOI icon. The vbApp may display details from the appropriate collections for the OOI.

In one embodiment a use case Open Default Sandbox as Main Scenario with Drop OOI into Default Sandbox as Alternative Scenario may be set. A Pre Condition Persona may be set by the user or the system. A Post Condition Sandbox may be Open with OOIs displayed in one section of the interface or Sandbox has a new or updated OOI .

A vbNet API provides the means for the developer to design a broad range of features and applications to be built on top of the vbApp and vbNet. The vbNet provides a programming interface to create modify study and or analyze simple to complex structures. A vbApp can run vbNet logic locally and entirely on the local host and or using remote functions that run on remove vbServers and or other vbApps. In some embodiments the distribution of logic and data depends on the capabilities of the devices and the desired configuration of the distributed association engine. In various embodiments a vbApp uses remote APIs for operations and service provider support systems such as for example authentication of vbApp enabled devices third party system integration mobile VPN management public geo data repositories and or other service provider support systems. In some embodiments a vbApp will attempt to solve search and discovery problems autonomously on the local host without consulting a remote server and or other vbApp allowing a vbApp to respond to a user request faster and keeping private data and or code on the local host. If the local host is incapable of solving the given problem autonomously the vbApp will contact remote services such as for example one or more additional vbApps and or vbServers. In one embodiment the core of the vbNet is the DTM software library. A vbNet may be used to model simple to complex networks for usage trend user behavior and or other statistical and associative information. A vbApp uses the vbNet to model personal professional product and or other graphs. The vbNet comprises a distributed architecture. In some embodiments A vbNet node may operate stand alone or as part of a larger group and logic and data both reside on the mobile device and need not leave the vbApp enabled device.

In some embodiments the vbNet implements specific behavioral identification and interaction systems. For example in one embodiment the vbNet implements a subscribe describe prescribe behavioral system. The subscribe describe prescribe behavioral system allows a user such as for example an enterprise user to identify one or more specific associations and or behaviors that the enterprise user wishes to interact with. For example in various embodiments the subscribe describe prescribe behavioral system identifies one or more vbApp enabled devices to receive targeted content to exclude from a search and or to perform one or more interactions with.

In one embodiment a user subscribes to a specific set of behaviors and or associations. When a node within the vbNet such as for example a vbApp enabled device displays the specific set of behaviors and or associations the vbNet provides a notification to the user. The user may prescribe one or more interactions with the vbApp enabled device comprising the subscribed behavior. For example the user may generate targeted context specific content for the vbApp based on the subscribed set of behaviors and or associations.

In one embodiment a user may describe an object such as for example an object of interest and or a vbApp. The user may describe the object by identifying one or more associations behaviors or descriptors of the object. For example in one embodiment an enterprise user may specify target OOIs as anyone in Manhattan going down an elevator between 11 00 AM and 1 00 PM who has more than 5 connections on LinkedIn and whose offices are less than five miles away from the user s approximate location at lunch time. describe an object representing a new store in a mall In another embodiment an enterprise user may describe a target OOI as anyone going up an escalator in a Target store in California. The user describes the object by describing the associations between the characteristics of the target OOIs and or by describing the behavior and actions of the objects. The description of the object may further comprise a n tuple comprising one or more descriptive terms.

In some embodiments a user may prescribe a specific set of behaviors and or associations that the user wishes to exclude from future interactions such as for example searches. The user may identify a specific set of behaviors and or associations such as for example a relationship between a node and an OOI and exclude any nodes on the vbNet that match the prescribed set of behaviors.

In some embodiments the subscribe describe prescribe behavioral system is used to deliver content to a vbApp enabled device. For example an enterprise user may subscribe to a specific set of behaviors that the enterprise user wishes to identify such as for example a vbApp enabled device having an association with one or more OOIs located in a specific area at a specific time. The enterprise user prescribes a behavior based on the frequency and connections of the vbApp enabled device that meets the subscribed behaviors. The enterprise use may prescribe an action such as for example displaying context information advertisements coupons information sales offers additional suggested associations and or other interactions with the vbApp enabled device.

In some embodiments the subscribe describe prescribe behavioral system is used by a vbNet to solve complex problems using large data sets. For example the vbNet may be configured to assist in research such as for example medical research by assigning data points as OOIs within a virtual space and applying the subscribe describe prescribe framework to identify connections patterns and or changes in the data set. In some embodiments the vbNet is configured to establish one or more supernets connecting research from multiple fields and or multiple institutions. Because the vbNet is platform agnostic the vbNet may interact with any data set provided.

In some embodiments the subscribe describe prescribe behavioral system is configured to provide directed information to vbApp enabled devices such as for example by providing mobile advertisements. The directed information is provided to one or more vbApp enabled devices comprising one or more associations and or behaviors such as for example position orientation altitude OOIs in a sandbox connections to OOIs and or other contextual information. The contextual information is automatically identified by the vbNet without the need for the user to provide this information. In some embodiments the directed information is displayed by the vbApp enabled device for example on a display screen integral with the vbApp enabled device. The directed information may provide additional information about the vbApp s surrounding such as for example providing directed information regarding landmarks stores and or other objects located in proximity to the vbApp enabled device.

In some embodiments the subscribe describe prescribe behavioral system is used to monitor one or more nodes. For example in one embodiment one or more nodes in the vbNet may represent patients within a hospital. Each patient wears a device that tracks movement position orientation and or additional characteristics. A doctor and or hospital staff utilizes a vbApp enabled device to describe a set of behaviors that indicate that a patient requires attention by medical personal. The vbApp enabled device subscribes to this set of behaviors and receives a notification each time the described nodal activity is detected.

In some embodiments a vbApp enabled device such as for example a mobile device is in communication with one or more of the vbServers . The vbApp enabled device provides information such as for example associations between the vbApp and one or more OOIs sensor information instrumentation data management data signaling data and or other types of data. The sensor information and or the instrumentation data is used for location and tracking the position of the vbApp enabled device . In various embodiments motion sensor data from gyroscopes accelerometers and or magnetometers is processed on the vbApp enabled mobile device. In embodiments in which the vbApp enabled device has limited computing resources the vbApp sends the collected sensor data to a vbServer for further processing and analytics such as for example execution of motion and or activity recognition algorithms. The management information and or the signaling information is used to provide communication between the vbApp enabled device and the rest of the vbNet .

In some embodiments a vbApp enabled device interacts with the vbNet to provide a user interface. The vbApp enabled device interacts with the vbServers to provide a behavioral analysis model such as for example a subscribe describe prescribe behavioral model. An enterprise vbApp enabled device or other authorized vbApp enabled device provides a graphical or textual programming interface through which a user can specify and or identify Describe one or more patterns or combinations of associations and or behaviors that an enterprise user wishes to monitor. A pattern may be modeled for example as associations built between objects for example to form a path a link a topological structure and or other associations. In one embodiments the enterprise vbApp enabled device interacts with a VB web site to communicate to the vbServer the patterns of interest the user wishes to subscribe to. In one embodiment a vbServer may instruct one or more vbApp enabled devices to look for patterns or graphs of interest. A user may subscribe to patterns stored on one or more vbServers and or may describe and add new patterns of interest to the vbNet . The enterprise vbApp enabled device may prescribe one or more tasks to be performed by the vbNet when a specific pattern of interest is detect discovered or reported by a vbApp enabled device and or a vbServer . The vbNet provides means to formally describe and or verify graph or pattern descriptions of interest. The description of a graph or pattern of interest carries the description of a single graph and or multiple graphs sub graphs nodes supernodes supernets and or other vbNet objects.

In one embodiment the describe subscribe prescribe behavioral model allows a user to interact with the vbNet in three steps a describe step a subscribe step and a prescribe step. In the describe step a user using a vbApp enabled device defines what patterns collections activities behaviors motion orientation and or other parameter the user is interested in. The describe step enables a user to specify a graph structure of interest for example by identifying which mobile devices and or other objects or devices should be attempting to identify the patterns of interest spending time detecting patterns and or reporting the discovery of patterns. In the subscribe step a user defines which vbApp enabled target devices and or users should look for and or subscribe to the described patterns and or criteria. In the prescribe or prescription step the user identifies what actions should be taken by the vbNet when a certain collection permutation path activity pattern behavior criteria and or other entity object or net is discovered. The prescribed action may include for example shutting down a vbApp enabled device changing properties of sensors and or actuator hardware displaying a specific message or advertisement to the user of the vbApp enabled device which detected and reported pattern and or to other vbApp enabled devices informing a designated server such as for example a third party server that the pattern occurred and entities have reported the pattern and or any other suitable action. For example in one embodiment the enterprise vbApp enabled device may prescribe an interaction with a vbApp enabled device that matches a subscribed pattern. The prescribed action may comprise for example delivering content to the vbApp enabled device excluding the vbApp enabled device from future search and or providing one or more additional interactions with the identified vbApp enabled device

With reference now to in some embodiments a vbApp enabled device is required to register with the vbNet prior to interacting with the vbServers and or other vbNet objects. A user downloads a vbApp to a user device such as for example the mobile device . The user installs and activates the vbApp which contacts one or more of the vbServers through a VPN . A vbServer registers the vbApp and assigns a unique node ID to the vbApp enabled device . A secure channel is established between the vbApp enabled mobile device and the vbNet through the VPN . The vbApp enabled mobile device and the vbNet may exchange information regarding the vbApp s nodal or personal network. The vbNet is enabled to generate virtual spaces learn associations and identify OOIs model the OOIs and associations in data structures through nodes super nodes nets super nets and other objects create ad hoc associations search along multi dimensional paths on a local host exchange graph descriptions between graph exchange protocols generate private point to point channels with high secure encryption enable interaction of vbApp enabled devices through the exchange and description protocols signal channel and or management control change the properties of one or more devices generate domain specific modules to convert domain specific structure into vbNet agnostic models generate multi point visualization and or perform additional operations.

The processor subsystem may comprise any processing circuitry operative to control the operations and performance of the electronic device . In various aspects the processor subsystem may be implemented as a general purpose processor a chip multiprocessor CMP a dedicated processor an embedded processor a digital signal processor DSP a network processor a media processor an input output I O processor a media access control MAC processor a radio baseband processor a co processor a microprocessor such as a complex instruction set computer CISC microprocessor a reduced instruction set computing RISC microprocessor and or a very long instruction word VLIW microprocessor and or other processing device. The processor subsystem also may be implemented by a controller a microcontroller an application specific integrated circuit ASIC a field programmable gate array FPGA a programmable logic device PLD and so forth.

In various aspects the processor subsystem may be arranged to run an operating system OS and various mobile applications. Examples of an OS comprise for example operating systems generally known under the trade name of Apple OS Microsoft Windows OS Android OS and any other proprietary or open source OS. Examples of mobile applications comprise for example a telephone application a camera e.g. digital camera video camera application a browser application a multimedia player application a gaming application a messaging application e.g. email short message multimedia a viewer application a vbApp and so forth.

In some embodiments the electronic device may comprise a system bus that couples various system components including the processing subsystem the input output subsystem and the memory subsystem . The system bus can be any of several types of bus structure s including a memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to 9 bit bus Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect Card International Association Bus PCMCIA Small Computers Interface SCSI or other proprietary bus or any custom bus suitable for mobile computing device applications.

In some embodiments the input output subsystem may comprise specialized output circuitry associated with output devices such as for example an audio peripheral output device . The audio peripheral output device may comprise an audio output including one or more speakers integrated into the electronic device . The speakers may be for example mono or stereo speakers. The audio peripheral output device also may comprise an audio component remotely coupled to audio peripheral output device such as for example a headset headphones and or ear buds which may be coupled to the audio peripheral output device through the communications subsystem .

In some embodiments the input output subsystem may comprise a visual peripheral output device for providing a display visible to the user. For example the visual peripheral output device may comprise a screen such as for example a Liquid Crystal Display LCD screen incorporated into the electronic device . As another example the visual peripheral output device may comprise a movable display or projecting system for providing a display of content on a surface remote from the electronic device . In some embodiments the visual peripheral output device can comprise a coder decoder also known as a Codec to convert digital media data into analog signals. For example the visual peripheral output device may comprise video Codecs audio Codecs or any other suitable type of Codec.

The visual peripheral output device also may comprise display drivers circuitry for driving display drivers or both. The visual peripheral output device may be operative to display content under the direction of the processor subsystem . For example the visual peripheral output device may be able to play media playback information application screens for application implemented on the electronic device information regarding ongoing communications operations information regarding incoming communications requests or device operation screens to name only a few.

In some embodiments the input output subsystem may comprise a motion sensor . The motion sensor may comprise any suitable motion sensor operative to detect movements of electronic device . For example the motion sensor may be operative to detect acceleration or deceleration of the electronic device as manipulated by a user. In some embodiments the motion sensor may comprise one or more three axis acceleration motion sensors e.g. an accelerometer operative to detect linear acceleration in three directions i.e. the x or left right direction the y or up down direction and the z or forward backward direction . As another example the motion sensor may comprise one or more two axis acceleration motion sensors which may be operative to detect linear acceleration only along each of x or left right and y or up down directions or any other pair of directions . In some embodiments the motion sensor may comprise an electrostatic capacitance capacitance coupling accelerometer that is based on silicon micro machined MEMS Micro Electro Mechanical Systems technology a piezoelectric type accelerometer a piezoresistance type accelerometer or any other suitable accelerometer.

In some embodiments the motion sensor may be operative to directly detect rotation rotational movement angular displacement tilt position orientation motion along a non linear e.g. arcuate path or any other non linear motions. For example when the motion sensor is a linear motion sensor additional processing may be used to indirectly detect some or all of the non linear motions. For example by comparing the linear output of the motion sensor with a gravity vector i.e. a static acceleration the motion sensor may be operative to calculate the tilt of the electronic device with respect to the y axis. In some embodiments the motion sensor may instead or in addition comprise one or more gyro motion sensors or gyroscopes for detecting rotational movement. For example the motion sensor may comprise a rotating or vibrating element.

In some embodiments the motion sensor may comprise one or more controllers not shown coupled to the accelerometers or gyroscopes. The controllers may be used to calculate a moving vector of the electronic device . The moving vector maybe determined according to one or more predetermined formulas based on the movement data e.g. x y and z axis moving information provided by the accelerometers or gyroscopes.

In some embodiments the input output subsystem may comprise a virtual input output system . The virtual input output system is capable of providing input output options by combining one or more input output components to create a virtual input type. For example the virtual input output system may enable a user to input information through an on screen keyboard which utilizes the touch screen and mimics the operation of a physical keyboard or using the motion sensor to control a pointer on the screen instead of utilizing the touch screen. As another example the virtual input output system may enable alternative methods of input and output to enable use of the device by persons having various disabilities. For example the virtual input output system may convert on screen text to spoken words to enable reading impaired persons to operate the device.

Vehicles of communication may comprise a network. In various aspects the network may comprise local area networks LAN as well as wide area networks WAN including without limitation Internet wired channels wireless channels communication devices including telephones computers wire radio optical or other electromagnetic channels and combinations thereof including other devices and or components capable of associated with communicating data. For example the communication environments comprise in body communications various devices and various modes of communications such as wireless communications wired communications and combinations of the same.

Wireless communication modes comprise any mode of communication between points e.g. nodes that utilize at least in part wireless technology including various protocols and combinations of protocols associated with wireless transmission data and devices. The points comprise for example wireless devices such as wireless headsets audio and multimedia devices and equipment such as audio players and multimedia players telephones including mobile telephones and cordless telephones and computers and computer related devices and components such as printers.

Wired communication modes comprise any mode of communication between points that utilize wired technology including various protocols and combinations of protocols associated with wired transmission data and devices. The points comprise for example devices such as audio and multimedia devices and equipment such as audio players and multimedia players telephones including mobile telephones and cordless telephones and computers and computer related devices and components such as printers. In various implementations the wired communication modules may communicate in accordance with a number of wired protocols. Examples of wired protocols may comprise Universal Serial Bus USB communication RS 232 RS 422 RS 423 RS 485 serial protocols FireWire Ethernet Fibre Channel MIDI ATA Serial ATA PCI Express T 1 and variants Industry Standard Architecture ISA parallel communication Small Computer System Interface SCSI communication or Peripheral Component Interconnect PCI communication to name only a few examples.

Accordingly in various aspects the communications interface may comprise one or more interfaces such as for example a wireless communications interface a wired communications interface a network interface a transmit interface a receive interface a media interface a system interface a component interface a switching interface a chip interface a controller and so forth. When implemented by a wireless device or within wireless system for example the communications interface may comprise a wireless interface comprising one or more antennas transmitters receivers transceivers amplifiers filters control logic and so forth.

In various aspects the communications interface may provide voice and or data communications functionality in accordance with different types of cellular radiotelephone systems. In various implementations the described aspects may communicate over wireless shared media in accordance with a number of wireless protocols. Examples of wireless protocols may comprise various wireless local area network WLAN protocols including the Institute of Electrical and Electronics Engineers IEEE 802.xx series of protocols such as IEEE 802.11a b g n IEEE 802.16 IEEE 802.20 and so forth. Other examples of wireless protocols may comprise various wireless wide area network WWAN protocols such as GSM cellular radiotelephone system protocols with GPRS CDMA cellular radiotelephone communication systems with 1xRTT EDGE systems EV DO systems EV DV systems HSDPA systems and so forth. Further examples of wireless protocols may comprise wireless personal area network PAN protocols such as an Infrared protocol a protocol from the Bluetooth Special Interest Group SIG series of protocols including Bluetooth Specification versions v1.0 v1.1 v1.2 v2.0 v2.0 with Enhanced Data Rate EDR as well as one or more Bluetooth Profiles and so forth. Yet another example of wireless protocols may comprise near field communication techniques and protocols such as electro magnetic induction EMI techniques. An example of EMI techniques may comprise passive or active radio frequency identification RFID protocols and devices. Other suitable protocols may comprise Ultra Wide Band UWB Digital Office DO Digital Home Trusted Platform Module TPM ZigBee and so forth.

In various implementations the described aspects may comprise part of a cellular communication system. Examples of cellular communication systems may comprise CDMA cellular radiotelephone communication systems GSM cellular radiotelephone systems North American Digital Cellular NADC cellular radiotelephone systems Time Division Multiple Access TDMA cellular radiotelephone systems Extended TDMA E TDMA cellular radiotelephone systems Narrowband Advanced Mobile Phone Service NAMPS cellular radiotelephone systems third generation 3G wireless standards systems such as WCDMA CDMA 2000 UMTS cellular radiotelephone systems compliant with the Third Generation Partnership Project 3GPP fourth generation 4G wireless standards and so forth.

In various aspects the memory subsystem may comprise any machine readable or computer readable media capable of storing data including both volatile non volatile memory and removable non removable memory. For example memory may comprise read only memory ROM random access memory RAM dynamic RAM DRAM Double Data Rate DRAM DDR RAM synchronous DRAM SDRAM static RAM SRAM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory e.g. NOR or NAND flash memory content addressable memory CAM polymer memory e.g. ferroelectric polymer memory phase change memory e.g. ovonic memory ferroelectric memory silicon oxide nitride oxide silicon SONOS memory disk memory e.g. floppy disk hard drive optical disk magnetic disk or card e.g. magnetic card optical card or any other type of media suitable for storing information.

In some embodiments the memory subsystem may contain a software program for implementing a vbApp using the capabilities of the mobile computing device . In one embodiment the memory subsystem may contain an instruction set in the form of a file for executing a vbApp on the mobile computing device . The instruction set may be stored in any acceptable form of machine readable instructions including source code or various appropriate programming languages. Some examples of programming languages that may be used to store the instruction set comprise but are not limited to Java C C C Python Objective C Visual Basic or NET programming. In some embodiments a compiler or interpreter is comprised to convert the instruction set into machine executable code for execution by the processing subsystem . Examples of virtual and other objects stored on a local device for example voice message recording picture temporarily or for a time period to be shared such as recordings and pictures or other data on the local device

Examples of handheld mobile devices suitable for implementing the system and method of distributed self similar learning using mobile computing devices comprise but are not limited to the Apple iPhone and iPod RIM Blackberry Curve Pearl Storm and Bold Hewlett Packard Veer Palm now HP Pixi Pre Google Nexus S Motorola DEFY Droid generations 1 3 Droid X Droid X2 Flipside Atrix and Citrus HTC Incredible Inspire Surround EVO G2 HD7 Sensation Thunderbolt and Trophy LG Fathom Optimus T Phoenix Quantum Revolution Rumor Touch and Vortex Nokia Astound Samsung Captivate Continuum Dart Droid Charge Exhibit Epic Fascinate Focus Galaxy S Gravity Infuse Replenish Seek and Vibrant Pantech Crossover T Mobile G2 Comet myTouch Sidekick Sanyo Zio Sony Ericsson Xperia Play.

Examples of tablet computing devices suitable for implementing the system and method of distributed self similar learning using mobile computing devices comprise but are not limited to Acer Iconia Tab A500 the Apple iPad 1 and 2 Asus Eee Pad Transformer Asus Eee Slate Coby Kyros Dell Streak Hewlett Packard TouchPad Motorola XOOM Samsung Galaxy Tab Archos 101 internet tablet Archos 9 PC tablet Blackberry PlayBook Hewlett Packard Slate Notion ink Adam Toshiba Thrive and the Viewsonic Viewpad.

In this example the computing device comprises one or more processor circuits or processing units on or more memory circuits and or storage circuit component s and one or more input output I O circuit devices . Additionally the computing device comprises a bus that allows the various circuit components and devices to communicate with one another. The bus represents one or more of any of several types of bus structures including a memory bus or local bus using any of a variety of bus architectures. The bus may comprise wired and or wireless buses.

The processing unit may be responsible for executing various software programs such as system programs applications programs and or module to provide computing and processing operations for the computing device . The processing unit may be responsible for performing various voice and data communications operations for the computing device such as transmitting and receiving voice and data information over one or more wired or wireless communication channels. Although the processing unit of the computing device includes single processor architecture as shown it may be appreciated that the computing device may use any suitable processor architecture and or any suitable number of processors in accordance with the described embodiments. In one embodiment the processing unit may be implemented using a single integrated processor.

The processing unit may be implemented as a host central processing unit CPU using any suitable processor circuit or logic device circuit such as a as a general purpose processor. The processing unit also may be implemented as a chip multiprocessor CMP dedicated processor embedded processor media processor input output I O processor co processor microprocessor controller microcontroller application specific integrated circuit ASIC field programmable gate array FPGA programmable logic device PLD or other processing device in accordance with the described embodiments.

As shown the processing unit may be coupled to the memory and or storage component s through the bus . The memory bus may comprise any suitable interface and or bus architecture for allowing the processing unit to access the memory and or storage component s . Although the memory and or storage component s may be shown as being separate from the processing unit for purposes of illustration it is worthy to note that in various embodiments some portion or the entire memory and or storage component s may be included on the same integrated circuit as the processing unit . Alternatively some portion or the entire memory and or storage component s may be disposed on an integrated circuit or other medium e.g. hard disk drive external to the integrated circuit of the processing unit . In various embodiments the computing device may comprise an expansion slot to support a multimedia and or memory card for example.

The memory and or storage component s represent one or more computer readable media. The memory and or storage component s may be implemented using any computer readable media capable of storing data such as volatile or non volatile memory removable or non removable memory erasable or non erasable memory writeable or re writeable memory and so forth. The memory and or storage component s may comprise volatile media e.g. random access memory RAM and or nonvolatile media e.g. read only memory ROM Flash memory optical disks magnetic disks and the like . The memory and or storage component s may comprise fixed media e.g. RAM ROM a fixed hard drive etc. as well as removable media e.g. a Flash memory drive a removable hard drive an optical disk etc. . Examples of computer readable storage media may include without limitation RAM dynamic RAM DRAM Double Data Rate DRAM DDRAM synchronous DRAM SDRAM static RAM SRAM read only memory ROM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory e.g. NOR or NAND flash memory content addressable memory CAM polymer memory e.g. ferroelectric polymer memory phase change memory ovonic memory ferroelectric memory silicon oxide nitride oxide silicon SONOS memory magnetic or optical cards or any other type of media suitable for storing information.

The one or more I O devices allow a user to enter commands and information to the computing device and also allow information to be presented to the user and or other components or devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone a scanner and the like. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card etc. . The computing device may comprise an alphanumeric keypad coupled to the processing unit . The keypad may comprise for example a QWERTY key layout and an integrated number dial pad. The computing device may comprise a display coupled to the processing unit . The display may comprise any suitable visual interface for displaying content to a user of the computing device . In one embodiment for example the display may be implemented by a liquid crystal display LCD such as a touch sensitive color e.g. 76 bit color thin film transistor TFT LCD screen. The touch sensitive LCD may be used with a stylus and or a handwriting recognizer program.

The processing unit may be arranged to provide processing or computing resources to the computing device . For example the processing unit may be responsible for executing various software programs including system programs such as operating system OS and application programs. System programs generally may assist in the running of the computing device and may be directly responsible for controlling integrating and managing the individual hardware components of the computer system. The OS may be implemented for example as a Microsoft Windows OS Symbian OS Embedix OS Linux OS Binary Run time Environment for Wireless BREW OS JavaOS Android OS Apple OS or other suitable OS in accordance with the described embodiments. The computing device may comprise other system programs such as device drivers programming tools utility programs software libraries application programming interfaces APIs and so forth.

The computer also includes a network interface coupled to the bus . The network interface provides a two way data communication coupling to a local network . For example the network interface may be a digital subscriber line DSL modem satellite dish an integrated services digital network ISDN card or other data communication connection to a corresponding type of telephone line. As another example the communication interface may be a local area network LAN card effecting a data communication connection to a compatible LAN. Wireless communication means such as internal or external wireless modems may also be implemented.

In any such implementation the network interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information such as the selection of goods to be purchased the information for payment of the purchase or the address for delivery of the goods. The network interface typically provides data communication through one or more networks to other data devices. For example the network interface may effect a connection through the local network to an Internet Host Provider ISP or to data equipment operated by an ISP. The ISP in turn provides data communication services through the internet or other packet based wide area network . The local network and the internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on the network interface which carry the digital data to and from the computer system are exemplary forms of carrier waves transporting the information.

The computer can send messages and receive data including program code through the network s and the network interface . In the Internet example a server might transmit a requested code for an application program through the internet the ISP the local network the network and the network interface . In accordance with the invention one such downloaded application provides for the identification and analysis of a prospect pool and analysis of marketing metrics. The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer may obtain application code in the form of a carrier wave.

Various embodiments may be described herein in the general context of computer executable instructions such as software program modules and or engines being executed by a computer. Generally software program modules and or engines include any software element arranged to perform particular operations or implement particular abstract data types. Software program modules and or engines can include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. An implementation of the software program modules and or engines components and techniques may be stored on and or transmitted across some form of computer readable media. In this regard computer readable media can be any available medium or media useable to store information and accessible by a computing device. Some embodiments also may be practiced in distributed computing environments where operations are performed by one or more remote processing devices that are linked through a communications network. In a distributed computing environment software program modules and or engines may be located in both local and remote computer storage media including memory storage devices.

Although some embodiments may be illustrated and described as comprising functional components software engines and or modules performing various operations it can be appreciated that such components or modules may be implemented by one or more hardware components software components and or combination thereof. The functional components software engines and or modules may be implemented for example by logic e.g. instructions data and or code to be executed by a logic device e.g. processor . Such logic may be stored internally or externally to a logic device on one or more types of computer readable storage media. In other embodiments the functional components such as software engines and or modules may be implemented by hardware elements that may include processors microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA logic gates registers semiconductor device chips microchips chip sets and so forth.

Examples of software engines and or modules may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints.

In some cases various embodiments may be implemented as an article of manufacture. The article of manufacture may include a computer readable storage medium arranged to store logic instructions and or data for performing various operations of one or more embodiments. In various embodiments for example the article of manufacture may comprise a magnetic disk optical disk flash memory or firmware containing computer program instructions suitable for execution by a general purpose processor or application specific processor. The embodiments however are not limited in this context.

The functions of the various functional elements logical blocks modules and circuits elements described in connection with the embodiments disclosed herein may be implemented in the general context of computer executable instructions such as software control modules logic and or logic modules executed by the processing unit. Generally software control modules logic and or logic modules comprise any software element arranged to perform particular operations. Software control modules logic and or logic modules can comprise routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. An implementation of the software control modules logic and or logic modules and techniques may be stored on and or transmitted across some form of computer readable media. In this regard computer readable media can be any available medium or media useable to store information and accessible by a computing device. Some embodiments also may be practiced in distributed computing environments where operations are performed by one or more remote processing devices that are linked through a communications network. In a distributed computing environment software control modules logic and or logic modules may be located in both local and remote computer storage media including memory storage devices.

Additionally it is to be appreciated that the embodiments described herein illustrate example implementations and that the functional elements logical blocks modules and circuits elements may be implemented in various other ways which are consistent with the described embodiments. Furthermore the operations performed by such functional elements logical blocks modules and circuits elements may be combined and or separated for a given implementation and may be performed by a greater number or fewer number of components or modules. As will be apparent to those of skill in the art upon reading the present disclosure each of the individual embodiments described and illustrated herein has discrete components and features which may be readily separated from or combined with the features of any of the other several aspects without departing from the scope of the present disclosure. Any recited method can be carried out in the order of events recited or in any other order which is logically possible.

It is worthy to note that any reference to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is comprised in at least one embodiment. The appearances of the phrase in one embodiment or in one aspect in the specification are not necessarily all referring to the same embodiment.

Unless specifically stated otherwise it may be appreciated that terms such as processing computing calculating determining or the like refer to the action and or processes of a computer or computing system or similar electronic computing device such as a general purpose processor a DSP ASIC FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein that manipulates and or transforms data represented as physical quantities e.g. electronic within registers and or memories into other data similarly represented as physical quantities within the memories registers or other such information storage transmission or display devices.

It is worthy to note that some embodiments may be described using the expression coupled and connected along with their derivatives. These terms are not intended as synonyms for each other. For example some embodiments may be described using the terms connected and or coupled to indicate that two or more elements are in direct physical or electrical contact with each other. The term coupled however also may mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. With respect to software elements for example the term coupled may refer to interfaces message interfaces application program interface API exchanging messages and so forth.

It will be appreciated that those skilled in the art will be able to devise various arrangements which although not explicitly described or shown herein embody the principles of the present disclosure and are comprised within the scope thereof. Furthermore all examples and conditional language recited herein are principally intended to aid the reader in understanding the principles described in the present disclosure and the concepts contributed to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions. Moreover all statements herein reciting principles aspects and embodiments as well as specific examples thereof are intended to encompass both structural and functional equivalents thereof. Additionally it is intended that such equivalents comprise both currently known equivalents and equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure. The scope of the present disclosure therefore is not intended to be limited to the exemplary aspects and aspects shown and described herein. Rather the scope of present disclosure is embodied by the appended claims.

The terms a and an and the and similar referents used in the context of the present disclosure especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. Recitation of ranges of values herein is merely intended to serve as a shorthand method of referring individually to each separate value falling within the range. Unless otherwise indicated herein each individual value is incorporated into the specification as when it was individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as in the case by way of example provided herein is intended merely to better illuminate the disclosed embodiments and does not pose a limitation on the scope otherwise claimed. No language in the specification should be construed as indicating any non claimed element essential to the practice of the claimed subject matter. It is further noted that the claims may be drafted to exclude any optional element. As such this statement is intended to serve as antecedent basis for use of such exclusive terminology as solely only and the like in connection with the recitation of claim elements or use of a negative limitation.

Groupings of alternative elements or embodiments disclosed herein are not to be construed as limitations. Each group member may be referred to and claimed individually or in any combination with other members of the group or other elements found herein. It is anticipated that one or more members of a group may be comprised in or deleted from a group for reasons of convenience and or patentability.

While certain features of the embodiments have been illustrated as described above many modifications substitutions changes and equivalents will now occur to those skilled in the art. It is therefore to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the disclosed embodiments.

Various aspects of the subject matter described herein are set out in the following numbered clauses 

1. A computer implemented method for a distributed association engine comprising searching by a processor for one or more objects of interest within a spatially bounded area identifying by the processor the one or more objects of interest responsive to the search and mapping by the processor one or more associations between the one or more objects of interest in a personal network.

2. The computer implemented method of clause 1 comprising storing by the processor the one or more objects of interest in a sandbox.

3. The computer implemented method of clause 2 comprising identifying by the processor one or more changes to the associations between the user and the one or more objects of interest and transmitting by the processor the one or more changes to a server.

4. The computer implemented method of clause 3 comprising generating by the processor a super network wherein one or more nodes within the super network comprise a subset of the personal network and one or more additional networks.

5. The computer implemented method of clause 1 comprising identifying by the processor a n tuple associated with each of the one or more objects of interest wherein the n tuple comprises a plurality of descriptors and wherein the plurality of descriptors are used to determine if the one or more objects of interest are responsive to the search.

6. The computer implemented method of clause 1 wherein the one or more objects of interest comprise at least one of a static object a dynamic object a virtual object a virtual association application or any combination thereof.

7. The computer implemented method of clause 6 wherein each of the one or more objects of interest comprise a node within the personal network and wherein the one or more relationships between the user and the one or more objects of interest comprises one of an edge or an arc.

8. A system comprising a display screen a processor and a non transient memory medium operatively coupled to the processor wherein the memory medium is configured to store a plurality of instructions configured to program the processor to search for one or more objects of interest within a spatial bounded area identify the one or more objects of interest responsive to the search and map one or more relationships between a user and the one or more objects of interest in a personal network.

9. The system of clause 8 wherein the processor is further programmed to display the map of the one or more relationships on the display screen.

10. The system of clause 8 wherein the processor is further programmed to store the one or more objects of interest in a local memory medium.

11. The system of clause 8 wherein the processor is further programmed to identify one or more changes to the associations between the user and the one or more objects of interest and transmit the one or more changes to a server.

12. The system of clause 11 wherein the processor is further programmed to generate a global network one or more nodes representative of a subset of the personal network and one or more additional networks.

13. The system of clause 8 wherein the processor is further programmed to display the global network on the display screen.

14. The system of clause 8 wherein the processor is further programmed to identify a n tuple associated with each of the one or more objects of interest wherein the n tuple comprises a plurality of descriptors and wherein the plurality of descriptors are used to determine if the one or more objects of interest are responsive to the search.

15. The system of clause 8 wherein the one or more objects of interest comprise at least one of a static object a dynamic object a virtual object a virtual association application or any combination thereof.

16. The system of clause 8 wherein each of the one or more objects of interest comprise a node within the personal network and wherein the one or more relationships between the user and the one or more objects of interest comprises one of an edge or an arc.

17. A non transitory computer readable memory medium configured to store instructions thereon that when loaded by a processor cause the processor to search for one or more objects of interest within a spatial bounded area identify the one or more objects of interest responsive to the search and map one or more relationships between a user and the one or more objects of interest in a personal network.

18. The non transitory computer readable medium of clause 17 wherein the instructions stored thereon further cause the processor to store the one or more objects of interest in a local memory medium.

19. The non transitory computer readable medium of clause 17 wherein the instructions stored thereon further cause the processor to identify a n tuple associated with each of the one or more objects of interest wherein the n tuple comprises a plurality of descriptors and wherein the plurality of descriptors are used to determine if the one or more objects of interest are responsive to the search.

20. The non transitory computer readable medium of clause 19 wherein the one or more objects of interest comprise at least one of a static object a dynamic object a virtual object a virtual association application or any combination thereof.

21. A computer implemented method for a self similar distributed association engine comprising generating by a processer a plurality of nodes wherein each node represents an object identifying by the processor one or more associations between the plurality of nodes and modeling by the processor a first graph of a first subset of the plurality of nodes and the one or more associations between the first subset of nodes.

22. The computer implemented method of clause 21 comprising generating by the processor a super node wherein the super node comprises a node representative of the first graph.

23. The computer implemented method of clause 22 comprising modeling by the processor a second graph of a second subset of the plurality of nodes and the one or more associations between the second plurality of nodes generating by the processor a second super node representative of the second graph and identifying by the processor one or more associations between the first super node and the second super node.

24. The computer implemented method of clause 23 comprising modeling by the processor a super graph comprising the first super node the second super node and the one or more associations between the first super node and the second super node.

25. The computer implemented method of clause 24 comprising generating by the processor a third super node wherein the third super node comprises a node representative of the super graph.

26. The computer implemented method of clause 21 comprising generating by the processor a domain specific set of nodes and associations wherein the domain specific nodes represent one or more domain specific objects and wherein the domain specific associations represent one or more domain specific associations between the objects.

27. A computer implemented method for behavioral analysis comprising identifying by a processor a set of attributes wherein each attribute comprises one of an association a behavior or a descriptor of a node monitoring by the processor a network of nodes for a node of interest wherein the node of interest is identified as a node comprising the set of attributes and performing by the processor a predetermined action when the node of interest is identified.

28. The computer implemented method of clause 27 comprising transmitting by the processor the set of attributes to a plurality of nodes in the network of nodes receiving by the processor one or more nodes of interest identified by the plurality of nodes in the network of nodes.

29. The computer implemented method of clause 27 comprising generating by the processor a notification that the node of interest has been identified.

30. The computer implemented method of clause 27 comprising transmitting by the processor a message to the node of interest.

32. A computer implemented method comprising generating by a processor a plurality of nodes representative of a plurality of objects identifying by the processor one or more associations between the plurality of nodes generating by the processor a personal graph of the plurality of nodes and the one or more associations transmitting by the processor a sub set of the personal graph to one or more mobile devices comprising a distributed association engine.

33. The computer implemented method of clause 32 comprising receiving by the processor a plurality of graph sub sets from the one or more mobile devices generating by the processor a super net comprising a plurality of nodes representative of the sub set of the personal graph and the plurality of sub sets received from the one or more mobile devices.

34. The computer implemented method of clause 33 comprising identifying by the processor one or more changes in the associations between the plurality of nodes and transmitting by the processor the one or more changes to the one or more mobile devices.

35. The computer implemented method of clause 32 comprising generating by the processor an ad hoc association between a first node and a second node wherein the ad hoc association comprises a limiting factor wherein when the limiting factor is met the ad hoc association is deleted.

36. The computer implemented method of clause 35 wherein the limiting factor comprises one of a time limit a distance limit or behavioral limit.

