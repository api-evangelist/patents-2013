---

title: Systems and methods for network communications
abstract: Systems and methods enable a method including: providing a first system; generating data to be sent over a network link; determining a transport protocol that will be used to transmit data over the network communication link; negotiating connection services to be performed on data that will transmitted over the network communication link; sending a request to open a network communication link; sending a request to the connectivity services of the second system for credentials of the second system; receiving the credentials from the connectivity services module of the second system; verifying that the credentials match an authenticated computer system; opening a network connection between the first system and the second system when the second system's credentials have been verified by the connectivity services module of the first system; and transmitting the data to the second system according to the determining network protocol and negotiated connection services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09215227&OS=09215227&RS=09215227
owner: Unisys Corporation
number: 09215227
owner_city: Blue Bell
owner_country: US
publication_date: 20130823
---
Modern computers connect to networks in order to receive and send information. By receiving information from other computers the capabilities of a computer system greatly expand. For example a computer connected to the Internet can download a wealth of information which is not necessarily stored in the physical data storage drives of the computer or the computer can communicate with other computers. The Internet exemplifies most of the benefits provided by networking computers.

Networked computers offer users an expanded user experience through the Internet. Users can access information quickly and freely using web browsing software. More recently computer companies are using networks to introduce parallel processing under the theory that a group of computers processing information in parallel can solve a problem more efficiently than one computer working alone. Virtual machines virtual appliances cloud computing massively parallel processing systems and many other examples exhibit how computers using networks expand their processing capabilities.

The following is an example of a computer using TCP IP to perform Internet communication over a series of networks. Networking relies on a number of software layers to send information over a network. At the top an application layer interacts with a user and processes tasks under the command of a user. Whenever an application needs to communicate with another computer which may be running another application the application calls upon an Internet layer to handle delivery of data. The Internet layer commonly implements the Internet Protocol IP such as IPv4 or IPv6. The Internet protocol creates packets of information which are a sequence of octets containing a header and body. The header describes the packets source destination and control information while the body describes the data being transmitted. The IP layer then transmits the created packet through network hardware such as an Ethernet link to another computer system. When the packet arrives at the destination computer the destination computer calls upon a transport layer. Commonly the transport layer relies on transmission control protocol TCP to provide a communication service. Due to network congestion or unpredictable network behavior some data packets may be lost corrupted or delivered out of order. In general TCP detects problems in the received packets requests retransmission of lost data rearranges out of order data and reassembles the received data so that an application on the receiving computer system may process the received data.

For example in the context of a website a server may send an HTML file describing a website hosted by the server. The server calls the TCP layer to divide the HTML file into a sequence of segments and the TCP layer forwards the segments to the IP layer. The IP layer creates IP packets for transmission by adding a header that includes among other things a destination IP address. When a client computer receives the IP packets from the server the TCP layer on the client side reassembles the received packets and any other processes to assure that all data is received by the server. The TCP layer then streams the information to a web browser running on the client computer the web browser processes the information and displays the website.

In general a networking API defines an interface between an application and the underlying network stack. For example an application running on the Microsoft Windows operating system calls the Windows Sockets API Winsock to access the underlying TCP IP protocol stack. Winsock guarantees that a conforming application will function with a conforming protocol implementation from any network software vendor.

While TCP IP and networking APIs perform many important steps for network communication these software layers cannot perform many other important network functions. For example authentication services are left up to the application layer to perform. More specifically if a client computer requests access to a website TCP IP creates the request on the client side and TCP IP on the server side unpackages the transmitted data and sends the unpackaged data to the application hosting the website. Upon receiving the request for access the application performs authentication services by checking a username and password. In other words a connection between the host computer and the client computer is opened before the host computer has a chance to authenticate the user.

Also because the TCP IP stack has an agreed upon standard the TCP IP stack cannot be changed by an application. So an application must specify its communication protocols like security protocols type of networking protocols etc. So an application developer would need to perform a software update anytime he wished to change how the application transmits data. For example a public connection may use TCP IP but a more private connection may call for a different type of protocol such as Infinband. But because of the inherent problems of updating an application a developer may decide against changing the called network protocol.

In light of all these problems there exists a need in the art to securely open network connections and avoid application updates for network transmission changes.

The systems and methods described herein attempt to overcome the drawbacks discussed above by creating a network API capable of creating a messaged based connectivity layer. The connectivity layer chooses a transport protocol performs authentication services and encrypts data for additional security. By creating this connectivity layer applications no longer need to perform authentication services or data encryption but simply pass data along to the connectivity layer where data is encrypted and other computers are authenticated.

The connectivity layer provides additional security. Firstly the connectivity layer prevents unauthorized access. During the connection handshake authentication credentials are exchanged. If the authentication credentials do not match acceptable credentials a connection between a first computer and a second computer fails. In this way a first computer prevents unauthorized access and an application running on the first computer does not need to process authentication information. Also the connectivity layer may encrypt data before sending the data over a network. As a result data sent through the network transmits securely and the application may be ignorant to any encryption keys used when encrypting data for additional security. In this way only the connectivity layer possesses the encryption keys necessary to translate the data into a readable format.

Through all of the improvements demonstrated by including the connectivity layer network communication becomes more secure. Also applications may be upgraded without changing the network protocols. The application simply calls the connectivity layer API whenever a network transmission needs to be made. Also the connectivity layer may determine which transport protocol best servers the intended transmission. The transport protocol may be any understood protocol including TCP IP Infiniband user datagram protocol UDP or any other network protocol.

In one embodiment a computer program product comprising a computer usable medium having a computer readable program code embodied therein the computer readable program code adapted to be executed to implement a method for network communication the method comprises providing a first system wherein the first system comprises distinct software modules and wherein the distinct software modules comprises a user application module a network application programming interface module a connectivity services module and a transport protocol module generating by the user application module data to be sent over a network link based on at least one process performed by the user application module or information entered by a user sending by the network application programming interface module a request to open the communication link to the connectivity services module determining by the connectivity services module of the first system a transport protocol that will be used to transmit data over a network communication link sending by the connectivity services module of the first system a request to open the network communication link to the transport module in response to a request by the user application module negotiating by the connectivity services module of the first system or a connectivity services modules of a second system connection services to be performed on data that will transmitted over the network communication link with a connectivity services module of a second system receiving by the connectivity services of the first system a request for credentials of the first system for sending to the connectivity services module of the second system to verify that the credentials match an authenticated computer opening by the connectivity services module of the first system a network connection between the first system and the second system when the first system s credentials have been verified by the connectivity services module of the second system and transmitting by the transport protocol module and the connectivity services module of the first system the data to the second system according to the determining network protocol and negotiated connection services.

In another embodiment a computer program product comprising a computer usable medium having a computer readable program code embodied therein the computer readable program code adapted to be executed to implement a method for network communication the method comprises providing a first system wherein the first system comprises distinct software modules and wherein the distinct software modules comprises a user application module a network application programming interface module a connectivity services module and a transport protocol module sending by the network application programming interface module a request to open the communication link to the connectivity services module determining by the connectivity services module of the first system a transport protocol that will be used to transmit data over a network communication link sending by the connectivity services module of the first system a request to open the network communication link to the transport module in response to a request by the user application module negotiating by the connectivity services module of the first system or a connectivity services modules of a second system connection services to be performed on data that will transmitted over the network communication link with a connectivity services module of a second system receiving by the connectivity services module of the first system a request from the connectivity services of the second system for credentials of the first system sending by the connectivity services module of the first system the first system s credentials to the connectivity services module of the second system opening by the connectivity services module of the first system a network connection between the first system and the second system when the first system s credentials have been verified by the connectivity services module of the second system and transmitting by the transport protocol module and the connectivity services module of the first system the data to the second system according to the determined network protocol and negotiated connection services.

In yet another embodiment a computer program product comprising a computer usable medium having a computer readable program code embodied therein the computer readable program code adapted to be executed to implement a method for network communication the method comprises providing a first system wherein the first system comprises distinct software modules and wherein the distinct software modules comprises a user application module a connectivity services module and a transport protocol module determining by the connectivity services module of the first system a transport protocol that will be used to transmit data over the network communication link receiving by the connectivity services module of the first system a request to open a communication link from the transport module wherein the request was initiated by the connectivity services module of a second system negotiating by the connectivity services module of the first system or a connectivity services module of the second system connection services to be performed on data that will transmitted over the network communication link during a network handshake wherein negotiating includes determining a size and format for messages to be sent from the second computer to the first computer receiving by the connectivity services module of the first system by the connectivity services of the first system a request for credentials of the first system for sending the credentials to the second system to verify that the credentials match an authenticated computer opening by the connectivity services module of the first system a network connection between the first system and the second system when the first system s credentials have been verified by the connectivity services module of the second system receiving by the transport protocol module of the first system data from the second system according to the determining network protocol and negotiated connection services sending by the transport protocol module of the first system the received data to the connectivity services module of the first system translating by the connectivity services module of the first system the received data into a message based on the agreed upon message size and format and sending by the connectivity services module of the first system the message to the user application module.

In another embodiment a computer program product comprising a computer usable medium having a computer readable program code embodied therein the computer readable program code adapted to be executed to implement a method for network communication the method comprises providing a first system wherein the first system comprises distinct software modules and wherein the distinct software modules comprises a user application module a connectivity services module and a transport protocol module determining by the connectivity services module of the first system a transport protocol that will be used to transmit data over the network communication link receiving by the connectivity services module of the system a request to open a communication link from the transport module wherein the request was initiated by a connectivity services module of a second system negotiating by the connectivity services module of the first system connection services to be performed on data that will transmitted over the network communication link with a connectivity services module of a second system during a network handshake wherein negotiating includes determining a size and format for messages to be sent between the second system and the first system determining by the connectivity services module of the first system whether to require credentials before allowing access to the second system opening by the connectivity services module of the first system a network connection between the first system and the second system when the second system s credentials have been verified by the connectivity services module or when the connectivity services module of the first system grants access to the second system without requiring validated credentials receiving by the transport protocol module of the first system data from the second system according to the determined network protocol and negotiated connection services sending by the transport protocol module of the first system the received data to the connectivity services module of the first system translating by the connectivity services module of the first system the received data into a message based on the agreed upon message size and format and sending by the connectivity services module and the network application interface module of the first system the message to the user application module.

Additional features and advantages of an embodiment will be set forth in the description which follows and in part will be apparent from the description. The objectives and other advantages of the invention will be realized and attained by the structure particularly pointed out in the exemplary embodiments in the written description and claims hereof as well as the appended drawings.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of the invention as claimed.

Reference will now be made in detail to the preferred embodiments examples of which are illustrated in the accompanying drawings.

The embodiments described above are intended to be exemplary. One skilled in the art recognizes that numerous alternative components and embodiments may be substituted for the particular examples described herein and still fall within the scope of the invention.

Referring to a host computer system is connected to and in communication with a client computer system . The client computer system communicates with the host computer through a network . The client computer system may receive data from the host computer system or send data to the host computer in a variety of different configurations for example in the situation where the host computer system is a web server and the host computer system provides website data to the client computer system when the client computer system accesses the website hosted by the host computer system . In another example the host computer system provides access to virtual computing resources to the client computer system over the network i.e. in a infrastructure as a service IaaS cloud . In another embodiment the host computer system and the client computer system are partitions of servers in a datacenter. The client computer may be but is not limited to a remote computer system.

The host computer system at least includes a processor a block of memory a network interface and physical storage . The client computer also at least includes a processor a block of memory a network interface and physical storage . The hardware of the host and client computers may communicate through one or more data buses as illustrated by the arrows within the computers . While the elements listed above are illustrated in it is to be understood that the host computer and the client computer may include many more hardware components such as a CD ROM drive DVD ROM drive tape drive audio modules universal serial bus USB ports power supplies cooling devices heat sinks network interfaces or any other components that may be included in a computing device. While a single client computer is illustrated as connected to the host computer the host computer may connect to a plurality of client computers. The size and configuration of the host computing system may increase or decrease depending on computing model customer need or the number of client computers connected to the host computer .

The processor may be computer hardware configured to execute instructions of a computer program which may be saved in the memory and perform basic logical operations of the host computer . The processor may be embodied by one or more processors if the host computer is a multi processor system. If the host computer has multiple processors each processor may perform a different task and each processor may be differently configured to accommodate their specific tasks. Alternatively all of the processors may be constructed in the same manner and one or more of the processors may be a spare processor included for redundancy. Additionally one or more of the processors may provide supervisory control over the other processors . The processor may have any clock speed or performance characteristics necessary to perform network communication and execute the software routines defining the network communication software modules.

The processor may also be computer hardware configured to carry out the instruction of a computer program which may be saved in the memory or the physical storage . The processor of the client computer may have lighter performance specifications when compared to the processor of the host computer because the client computer may not perform heavy processing tasks. However in general the processor may be similar in design to the processor . The processor may have any clock speed or performance characteristics necessary to perform network communication and execute the software routines defining the network communication software modules.

The memory or may include any computer storage medium either volatile or non volatile removable or non removable such as FLASH RAM ROM EEPROM or any other storage medium that is configured to store information according to any method or technology. The memory or is configured to store computer readable information such as computer readable instructions and data. The memory or may be implemented to store program code to direct the processor or to process information and requests to or from other computing systems connected to the host computer system or client computer in any manner such as through the network interface or .

The network interface or provides a network connection means and network protocols useful for sending and receiving information from and to other computer systems connected to the host computer or the client computer . The network interface or may be connected to a network of any type such as a local area network LAN a wide area network WAN or a wireless local area network WLAN . The network interface or may communicate with other computer systems on the network through network protocols such as TCP IP FTP SSH Infiniband or any other network protocol. In addition the network interface or may be connected to a network through any means including wireless means such as Bluetooth IEEE 802.11 and infrared or wired means such as Ethernet firewire and coaxial. The network communication protocol may be message based or packet based. As will be described below the additional software layers of the exemplary embodiments assure that all network communication is after some translation message based.

The network interface or may include different software layers for receiving and translating packets or messages sent over the network which is described in more detail with references to . From a very high level the network interfaces receive data through networking hardware and software layers directing the physical hardware of the network interfaces translate the data using uniform networking protocols so that data can be translated and understood by user applications executed by the processors . For example the host computer may be a web server and the client computer may request data describing a website hosted by the host computer . Using a physical connection such as Ethernet the client computer sends a request to the host computer s address such as an IP address and the host computer responds with data comprising the website hosted by the host computer . The data comprising the website may be packaged according to a networking protocol such as TCP IP. Software modules interpret the TCP IP packets and sends the data to a user application such as a web browser on the client computer .

In conventional network communication software layers the network API would communicate directly with the transport protocol and the transport protocol would translate the data to be sent through a physical link such as an Ethernet wire. Under this conventional system the user application was tasked with some networking processes such as encrypting data authenticating clients and including public private keys. According to the exemplary embodiments the user application is no longer responsible for such tasks because the host connectivity services layer performs many of these tasks.

According to the embodiment shown in the link layer is the lowest layer of computer networking. In some embodiments the link layer may comprise a physical layer and a data link layer such as those layers defined by the Open Systems Interconnection OSI model. In general the link layer consists of basic network hardware transmission technologies. The link layer defines the means for transmitting raw bits rather than data packets or messages over a physical link. The physical layer may convert data into a physical signal that is transmitted over linking hardware. For example the physical layer may define modulation techniques for sending signals over a physical link. The physical layer defines many other services such as multiplexing circuit switching and many other services. The link layer may define data transmission logic for any physical link such as Ethernet Infiniband Bluetooth USB or any other network communication. In general the link layer defines methods and standards to connect multiple nodes of a network together.

The transport protocol may be a set of protocols for transmitting data over a network. The transport protocol may receive data from another level organize the data into packets and transmit the packets to another node of the network. The transport protocol may also detect errors in packets received request retransmission of a packet or reorder packets that were received out of order. Alternatively the transport layer may send data as messages rather than data packets. For example the transport protocol may comprise TCP IP UDP or Infiniband protocol. In some embodiments the transport protocol includes a plurality of protocols and the transport protocol selects one of the plurality of protocols used to transmits data.

The user application is any software application stored on a computer readable medium and executed by a processor. The user application may be any application installed on and provided by a host computer . For example the user application may be a web based application accessed through a network address. In this example a client computer may use the user application executed by the host computer through a web browser. In another example the user application may be virtualization software used to provide a virtual machine including an operating system and a virtual application. The user application may be any type of application hosted by a host computer .

The network API may be a set of data structures and subroutines called by the user application to perform some functionality with another layer. Conventional network APIs may call the transport protocol layer to perform networked data transmission but the network API of the exemplary embodiments generally calls the connectivity services layer as described below but in some situations the network API still communicates directly with the transport protocol . The network API may be for example a network sockets style API. Because the network API interacts with the connectivity services layer the conventional sockets style network APIs must be extended to provide the methods required by the host connectivity services layer so that the connectivity services layer can provide connection establishment negotiation services and subsequently message framing services.

The host connectivity services layer is a software layer between the transport protocol and the network API . The host connectivity services layer receives data from the network API or the transport protocol and translates the data. For example if the user application needs to send data to another node on the network the user application calls the network API to generate a data transmission. The network API transmits a message to the host connectivity services layer . For example a message may be defined as an amount of data presented by the corresponding user application in a single send request. As another example a message may be defined as an amount of data having a specified or arbitrary length. The host connectivity services layer in tandem with the transport protocol begins a process which is described in more detail below when referring to or of opening a network connection authenticating the network connection performing connectivity handshakes and any other necessary processes for network communication.

When the host connectivity services layer receives data from the transport protocol the host connectivity services layer organizes the data from the transport layer into a message. The amount of data presented by the user application may change depending on the network transmission but the message size is constrained by a maximum message size parameter set by the host connectivity services layer . The host connectivity services layer handles message framing during the initial network handshake. For example if the transport protocol is TCP IP the data received from the transport protocol may be in the form of packets. The host connectivity services layer waits until an entire message is received using TCP IP and then passes the message to the user application . In this way the user application always receives data in a message based format from the host connectivity services layer . Furthermore a corresponding user application executed by a connected computer receives the data comprising the message as a complete message.

In this way the host connectivity services layer allows the user application to simply send a message to the host connectivity services layer through the network API whenever network communication should be performed. The user application is not responsible for authenticating connected computer systems opening secure connections encrypting data or any other connection handshakes necessary to open network communication. In other words the user application does not know and does not need to know what operations and processes are performed to open network communication with another node or computer system. The exemplary embodiments assure the user application of a secure connection every time because the host connectivity services layer performs the necessary connectivity services for secure network connection.

As shown in not all communications from the host connectivity services layer are sent through the transport protocol . The host connectivity services layer may bypass the transport protocol when the transport protocol is not necessary for the particular communication being performed. For example a network handshake or authentication process may not require the use of the transport protocol .

The connectivity services distinguish the host connectivity services layer of the exemplary embodiments from a connectivity services library included in a conventional host computer . The connectivity services included in the host connectivity services layer of the exemplary embodiments perform networking tasks previously allocated to the user application . The host connectivity services layer also provides transport protocol flexibility. For example the host connectivity services layer may send a network transmission using TCP IP when communication with a first client computer and subsequently send an Infiniband transmission to a second client computer. Because the user application simply sends data messages to the host connectivity services layer the user application does not need to undergo a software update or modification to change the network transmission protocol used by the host computer .

Referring now to the client computer has similar software layers as the host computer shown in . Like the host computer the client computer includes a link layer a transport protocol a user application and a network API . The client connectivity services layer is a software layer between the transport layer and the user application so the client connectivity services layer is similar in nature to the host connectivity services layer of the host computer. The network API on the client computer may comprise a plurality of distinct software modules including a winsock layer B and uConnect layer A.

The user application may be any user application that uses network communication. For example the user application for the client computer may be a web browser.

The link layer and the transport protocol are substantially the same as the link layer and transport protocol of .

The network API may be any network API used for network communication. The network API includes a winsock module B to communicate between the user application and the transport protocol . For example the network API may include Winsock B if the client computer executes the Windows operating system. If the client computer executes another operating system the user application may call another network API such as Linux Sockets or BSD sockets on Macintosh.

In addition to Winsock layer B the network API may also include a second module referred to herein as uConnect A. uConnect A can expose the client connectivity services layer to the user application . uConnect A can facilitate communication between user application and the client connectivity services layer . For example uConnect A may be a dynamic link library called by the user application when services provided by connectivity services are called such as authentication or data encryption. In order to call uConnect A the user application may need an initial software update but any changes to network protocols will not require a software update.

Referring to and the host connectivity services layer and the client connectivity services layer include connectivity routines for secure connection such as authentication framing messages encrypting data connection service protocols and assume identity functions. For example the connectivity services layer may communicate with each other when a host computer and a client computer perform network communication. Of course a situation where a host computer communicates with another host computer or a client computer communicates with another client computer can be imagined. In such situations the host connectivity services layer may communicate with another host connectivity services layer on another host computer or the client connectivity services layer may communicate with another client connectivity services layer on another client computer . The operation of the host and client connectivity services layer do not substantially change when communicating host to host or client to client.

The host and client connectivity services layer require certain connection protocols to be agreed upon between a host computer and a client computer before opening network communication. For example the host connectivity services layer may require that the client computer and the host computer agree to a message size before sending any data. The maximum message size is bounded by the system and or transport characteristics. In one embodiment the message size may range between 1 and 65536 bytes or the system limit if smaller This handshake may include requiring both the host connectivity services layer of the host computer and the client connectivity services layer on the client computer to further agree on a transmission protocol. For example the client computer may not have an Infiniband port so Infiniband protocol cannot be used and TCP IP or UDP is selected.

Both the host connectivity services layer and the client connectivity services layer include a message framing service. The message framing service provides a user application with only a full message. If a partial message is received or some of the message is still incoming the host or client connectivity services layer wait to provide the received data to the user application or until a full message has been received. The host connectivity services layer and the client connectivity services layer may agree to a method for resolving disparate message sizes such as employing no message framing using the smallest values supplied by the two application use a minimum value supplied by the host connectivity services layer and the client connectivity services layer or both the host connectivity services layer and the client connectivity services layer must specify the same value. If the host connectivity services layer and the client connectivity services layer do not conform to the selected method connection will fail between the host computer and the client computer .

The host connectivity services layer and the client connectivity services layer also perform an authentication service. The authentication service allows the host computer to validate access from the client computer . For example the host connectivity services layer may request from the client connectivity services layer authentication credentials. The client connectivity services layer may supply the credentials and gain access if the host connectivity services layer recognizes the supplied credentials. Alternatively the client connectivity services layer may request guest access. In some embodiments the host connectivity services layer does not require authentication before opening a connection.

Yet another service provided by the host connectivity services layer and the client connectivity services layer is an encryption service. For example the host connectivity services layer and the client connectivity services layer may encrypt data received from the user application respectively. For example the host connectivity services layer and the client connectivity services layer may encrypt all data sent through the physical link using SSL TLS. The encryption method must be agreed upon by the host connectivity services layer and the client connectivity services layer before transmitting encrypted data. The encryption servicer may further include the use of public and private keys.

Further still the host connectivity services layer and the client connectivity services layer may provide an assume identity service. This function allows the host computer to assume the user identity of an accepted client computer connection. Using authentication information and credentials provided by the client computer the host computer may assume certain variables about the user such as language convention and other variables. The authentication information provided by the client computer may set these variables without the client computer providing them.

Also during connection establishment the connectivity services layer of the first computer and the connectivity services layer of the second computer begin a negotiation session to negotiate connection services in step . The handshaking performed in step may involve authentication settings message length settings message encryption settings and any other network communication services that need to be negotiated. It is assumed that the first computer and the second computer agree to all communication services but if any pertinent communication settings cannot be agreed upon the communication attempt fails. For example if the message size format cannot be agreed upon exactly the network communication socket may not open.

After establishing a connection the first computer may require the connectivity services layer of the second computer to provide credentials to authenticate the second computer in step . The authentication process of step may involve requesting credentials from a client computer receiving the credentials and validating the credentials as recognized and valid credentials. If a client computer initiates connection step may involve receiving a request for credentials providing credentials and waiting for the host computer to confirm the credentials. It should be noted that the first computer may provide credentials to the second computer depending on which computer is a host computer. In step the second computer may request guest privileges because the second computer does not have proper network credentials. Depending on the security of the information to be sent the first computer may grant guest privileges. Upon receiving and verifying the second computer s credentials the connectivity services layer opens a network connection in step and transmits data according to the agreed upon services and determined transport protocols in step . The transmitted data may be in the format of a message and may include encryption SSL . Message creation and encryption are both performed by the connectivity services layer of the first computer. Also because the first and second computer agreed to the message format and the encryption level during connection establishment the connectivity services layer of the second computer can translate the encrypted data and form the transmitted data into the message.

Alternatively the connectivity services layer of the first computer and the connectivity services layer of the second computer may inform the user applications respectively running on the first and second computers that the network connection has been established and the two applications exchange data.

Also during connection establishment the connectivity services layer of the first computer and the connectivity services layer of the second computer begin a negotiation session to negotiate connection services in step . The handshaking performed in step may involve authentication settings message length settings message encryption settings and any other network communication services that need to be negotiated. It is assumed that the first computer and the second computer agree to all communication services but if any pertinent communication settings cannot be agreed upon the communication attempt fails. For example if the message size format cannot be agreed upon exactly the network communication socket will not open.

After establishing a connection the first computer may require the connectivity services layer of the second computer to provide credentials to authenticate the second computer in step . The authentication process of step may involve requesting credentials from a client computer receiving the credentials and validating the credentials as recognized and valid credentials. In step the second computer may request guest privileges because the second computer does not have proper network credentials. Depending on the security of the information to be sent the first computer may grant guest privileges. Upon receiving and verifying the second computer s credentials the connectivity services layer opens a network connection in step and receives data according to the agreed upon services and transport protocols in step .

After receiving data from the second computer the connectivity services layer of the first computer translates the data into a message according to the agreed message format in step . The connectivity services of the first computer may wait until all data for the message is received to reconstruct the message. Step may involve decrypting an encrypted message. After the message has been translated the connectivity services layer of the first computer sends the message to the user application in step .

As shown by the exemplary embodiments network communication may be more efficiently and securely handled by the connectivity services layer. By inserting the connectivity services layer between a user application and a networking stack the user application no longer has to perform networking tasks such as data encryption handshaking and authentication. As such network communication methods and protocols may change without the knowledge of the user application and without requiring a software update for the user application. The connectivity services layer also provides flexibility in how network communication is performed because the user application is agnostic to the method of data transmission. In other words the user application simply provides data to be sent but the connectivity services layer can transmit the received data according to any method or protocol without changing the nature of the user application.

The exemplary embodiments can include one or more computer programs that embody the functions described herein and illustrated in the appended flow charts. However it should be apparent that there could be many different ways of implementing aspects of the exemplary embodiments in computer programming and these aspects should not be construed as limited to one set of computer instructions. Further those skilled in the art will appreciate that one or more acts described herein may be performed by hardware software or a combination thereof as may be embodied in one or more computing systems.

The functionality described herein can be implemented by numerous modules or components that can perform one or multiple functions. Each module or component can be executed by a computer such as a server having a non transitory computer readable medium and processor. In one alternative multiple computers may be necessary to implement the functionality of one module or component.

Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as generating or determining or receiving or sending or negotiating or the like can refer to the action and processes of a data processing system or similar electronic device that manipulates and transforms data represented as physical electronic quantities within the system s registers and memories into other data similarly represented as physical quantities within the system s memories or registers or other such information storage transmission or display devices.

The exemplary embodiments can relate to an apparatus for performing one or more of the functions described herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine e.g. computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a bus.

The exemplary embodiments described herein are described as software executed on at least one server though it is understood that embodiments can be configured in other ways and retain functionality. The embodiments can be implemented on known devices such as a personal computer a special purpose computer cellular telephone personal digital assistant PDA a digital camera a digital tablet an electronic gaming system a programmed microprocessor or microcontroller and peripheral integrated circuit element s and ASIC or other integrated circuit a digital signal processor a hard wired electronic or logic circuit such as a discrete element circuit a programmable logic device such as a PLD PLA FPGA PAL or the like. In general any device capable of implementing the processes described herein can be used to implement the systems and techniques according to this invention.

It is to be appreciated that the various components of the technology can be located at distant portions of a distributed network and or the Internet or within a dedicated secure unsecured and or encrypted system. Thus it should be appreciated that the components of the system can be combined into one or more devices or co located on a particular node of a distributed network such as a telecommunications network. As will be appreciated from the description and for reasons of computational efficiency the components of the system can be arranged at any location within a distributed network without affecting the operation of the system. Moreover the components could be embedded in a dedicated machine.

Furthermore it should be appreciated that the various links connecting the elements can be wired or wireless links or any combination thereof or any other known or later developed element s that is capable of supplying and or communicating data to and from the connected elements. The term module as used herein can refer to any known or later developed hardware software firmware or combination thereof that is capable of performing the functionality associated with that element. The terms determine calculate and compute and variations thereof as used herein are used interchangeably and include any type of methodology process mathematical operation or technique.

The embodiments described above are intended to be exemplary. One skilled in the art recognizes that numerous alternative components and embodiments that may be substituted for the particular examples described herein and still fall within the scope of the invention.

