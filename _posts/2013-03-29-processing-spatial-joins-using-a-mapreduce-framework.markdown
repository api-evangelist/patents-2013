---

title: Processing spatial joins using a mapreduce framework
abstract: Techniques, systems, and articles of manufacture for processing spatial joins using a MapReduce framework. A method includes partitioning a spatial data domain based on a distribution of spatial data objects across multiple nodes of a cluster of machines, defining at least one operation to be performed on the partitioned spatial data domain based on one or more predicates of a query, and executing the at least one defined operation on the partitioned spatial data domain to determine a response to the query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311380&OS=09311380&RS=09311380
owner: International Business Machines Corporation
number: 09311380
owner_city: Armonk
owner_country: US
publication_date: 20130329
---
Embodiments of the invention generally relate to information technology and more particularly to data processing techniques.

Spatial data characterize information that is intended to represent various objects in a database. Simple objects can include points lines circles squares rectangles etc. while complex objects can be composed for example from multiple simple objects. Additionally spatial data can be derived from multiple applications such as maps location based services trajectories distributed grids navigation information asset exploration distribution of resources planning transportation information sensors etc. Further spatial data can be derived from multiple sources such as for example global positioning system GPS data geo tagged web data and sensor streams.

Processing spatial data is increasingly challenging as the amount of such data continues to grow. Existing processing approaches attempt to handle spatial joins within databases or attempt to handle two way spatial joins on MapReduce. However a need exists for processing multi way spatial joins on MapReduce.

In one aspect of the present invention techniques for processing spatial joins using a MapReduce framework are provided. An exemplary computer implemented method can include steps of partitioning a spatial data domain based on a distribution of spatial data objects across multiple nodes of a cluster of machines defining at least one operation to be performed on the partitioned spatial data domain based on one or more predicates of a query and executing the at least one defined operation on the partitioned spatial data domain to determine a response to the query.

In another aspect of the invention an exemplary computer implemented method can include steps of partitioning a spatial data domain based on a distribution of spatial data objects across multiple nodes of a cluster of machines implementing a bounding for example a rectangle around each spatial data object in the partitioned spatial data domain processing one or more predicates of a query against each bounding in the partitioned spatial data domain to one or more of the one or more predicates that are applicable to the spatial data objects defining at least one operation to be performed on the partitioned spatial data domain based on the one or more predicates of the query and executing the at least one defined operation on the partitioned spatial data domain to determine a response to the query.

Another aspect of the invention or elements thereof can be implemented in the form of an article of manufacture tangibly embodying computer readable instructions which when implemented cause a computer to carry out a plurality of method steps as described herein. Furthermore another aspect of the invention or elements thereof can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform noted method steps. Yet further another aspect of the invention or elements thereof can be implemented in the form of means for carrying out the method steps described herein or elements thereof the means can include hardware module s or a combination of hardware and software modules wherein the software modules are stored in a tangible computer readable storage medium or multiple such media .

These and other objects features and advantages of the present invention will become apparent from the following detailed description of illustrative embodiments thereof which is to be read in connection with the accompanying drawings.

As described herein an aspect of the present invention includes processing spatial joins efficiently using a MapReduce framework. At least one embodiment of the invention includes techniques for computing spatial and hybrid joins on data distributed over multiple nodes. Specifically an aspect of the invention includes defining a distribution of spatial objects across multiple reducers that is across multiple partitions so as to minimize the cost of processing the query.

By way of illustration consider the following example in connection with processing spatial joins. An example query Q might include a request to locate all establishments within seven kilometers km of a hospital and that overlaps with a residential area. Accordingly Q RPRand RPR wherein R establishments R a hospital R a residential area P a geographic range and P an overlap. In this example the spatial predicates include P Range R R 7 km and P Overlap R R .

A query such as the one in the above example is a conjunction of spatial predicates on relations. As used herein a relation contains one or more spatial objects. In at least one embodiment of the invention a query can also include non spatial predicates. Spatial joins include joining data that satisfy spatial predicates and can be computationally intensive . As noted herein processing of spatial joins becomes more challenging for large amounts of data.

Accordingly at least one embodiment of the invention includes processing multi way spatial joins on a MapReduce platform using predicates of overlap range and nearest neighbor. Such techniques further include partitioning the spatial data and using the partitions in MapReduce functions. Spatial operators such as described herein can be used to write spatial queries. By way of example a spatial query might include overlaps r r indicating that roverlapping with ris a true statement. Special cases in connection with such a query might include rtouching or equaling r. An overlap to predicate subsumes the special cases. Hence if rtouches ror requals r it is implied that roverlaps r.

Another example spatial query can include range r r d wherein the query is deemed true if any point in ris within distance d of any point in r. Additionally for example a spatial query can include NearestNeighbor r r wherein the query is deemed true if ris nearest to r. Specifically rand rare spatial objects belonging to relations Rand R respectively. NearestNeighbor r r is deemed true if object ris nearer to object rthan any other object r in relation R.

At least one embodiment of the invention can include bounding shapes such as rectangles used in representing objects. It is to be appreciated that bounding rectangles are used herein as merely an example and that one or more various bounding shapes can be used in accordance with one or more embodiments of the invention. Such an example embodiment utilizing bounding rectangles can additionally include initially checking and or processing the predicate on the rectangles and if matches exist with the rectangles then checking and or processing can be carried out for the corresponding actual objects. Also at least one embodiment of the invention includes distributing records based on map and reduce functions such that predicates on bounding areas are true. If predicates are not true for the objects those predicates will not be true for the corresponding bounding rectangles.

Accordingly in the example embodiment noted above there are relations R Rand so on which are tables. These tables include records having one or more fields. One of these fields includes the geometry of the spatial object that the record represents. This field may include the actual geometry or the bounding box rectangle of the spatial object. This field is hence referred to as the spatial attribute of the object. There can also be other attributes in the records which are non spatial in nature. For example a relation Rcan include a table identified as FORESTS which includes identification of all forests in a location for example the US . This table or relation may have multiple records each representing a distinct forest in the US. Each record can have one attribute referred to as geometry which shows the actual geometry of that forest or a bounding box rectangle of that forest. Additionally the record may also include other attributes such as the name of the forest the area of the forest etc.

Objectives of one or more embodiments of the invention include causing tuples that agree on a join to reside on the same reducer and to achieve load balancing for multiple reducers. Accordingly at least one embodiment of the invention includes partitioning a space that is a spatial data domain using the x range and or the y range as disjointed rectangles referred to herein as partition cells. Additionally these partition cells can be further partitioned using a partition strategy. The partition strategy can be chosen by creating and maintaining statistics of the data by traversing the data entirely or by randomly sampling the data. By way of example the partition cells can be further partitioned uniformly in the x dimension and or the y dimension. Such a strategy works well for instance if spatial objects are distributed uniformly in the data.

At least one embodiment of the invention can also include creating partition cells based on the distribution of relations in the data. This is carried out for example using pre processing such as selecting bins in the x dimension and or the y dimension wherein the bins are of size g. Additionally such an embodiment includes determining the frequency of the number of objects starting in each cell of size g and merging cells such that each resulting partition cell has an equal number of objects. The frequency determination and merging steps can be carried out for example using cumulative frequency and the number of desired reducers. In at least one embodiment of the invention the processing is carried out on a cluster of machines. In such an embodiment the number of reducers is decided by the strength and or size of the cluster of machines available and whether each partition of the data can fit into the memory of a single reducer.

Additionally at least one embodiment of the invention can include defining operations including project split and replicate as further detailed below. By way of example assume u is a bounding rectangle and C a set of partition cells. As such a project operation determines the partition cell in which the start point of bounding rectangle u resides. An example project operation might include project u C which outputs key a partition cell and the value u.

Here it is assumed that the record is represented by the bounding box rectangle attribute therein. In this example it is u. When processing on MapReduce there are two steps involved map and reduce. Operations including project split and replicate are implemented via the map step. The map step operates on an individual record. When all of the map jobs are done executing each such job has marked records to be sent to some particular reducer. Each reducer then receives all of the records that the map jobs have sent and the reducer processes those records. Similar to the project operation split and replicate are also executed by the map step but with the difference that split and reduce may send the same record to multiple reducers not just one reducer as in the case of the project operation.

A split operation determines all cells with at least one point in common with bounding rectangle u. An example split operation might include split u C which outputs a set of key value pairs such as key a partition cell reducer the value u wherein u is sent to all reducers whose partition cell contains some part of u.

Further a replicate or replication operation returns all partition cells that satisfy a certain condition f . Condition f is used for efficiency purposes. A replicate operation can include for example replicating the bounding rectangle to all reducers that lie to the right and below the rectangle u. Condition f determines the extent of replication to be carried out to prevent unnecessary replication. For instance an example replicate operation might include replicate u C f which outputs key a partition cell value u such that every partition cell and u satisfies f. The project split and replicate operations can be carried out on relations R R . . . wherein the operations are carried out for each tuple in R.

By way of illustration of one or more embodiments of the invention let the number of reducers be k. Here k is decided based on the relations sizes and whether a single partition can fit entirely within the main memory of a single reducer. Accordingly an example embodiment of the invention can include dividing the data space into a grid with k partition cells. Further for a given query with relations contained therein a project split and or replicate operation can be selected and performed on the relations as a map function.

The intermediate result of the selected operation s with the same key is routed to a single reducer. Accordingly the keys with the same partition cell are routed to the same reducer. The MapReduce framework includes a mechanism to identify reducers with cardinal numbers. The keys lie in this range. By way of example if the number of reducers is ten the keys can range from zero to nine. Accordingly the key determines the reducer. Additionally if two tuples agree on a predicate those tuples are to be present on the same reducer. Also at least one embodiment of the invention can include validating the relations agreement. As noted herein the map operations project split and replicate ensure that the tuples which satisfy a certain predicate are present together for at least one reducer.

Further as a result of the selected operation s a spatial join is output as part of the noted reducer. Additionally at least one embodiment of the invention includes compiling a union of the outputs from all of the reducers to generate a composite output. Each individual reducer outputs the result of processing the tuples assigned thereto. This output is stored on the distributed file system DFS in a file specific to this reducer. The combination of the files of all reducers provides the composite output for the join query.

By way of further illustration consider the following example embodiment of the invention implementing an overlap spatial predicate. Let Rand Rbe two relations to be joined based on an overlap spatial predicate. Also let rbe a rectangle in Rand rbe a rectangle in Rthat satisfy the overlap predicate. Accordingly the example embodiment includes splitting rand rin the mapper. As used herein the mapper is an abstract entity representing the task that the map jobs are intended to carry out. The phrase splitting rand rin the mapper for example indicates that the map jobs execute the operation split on the tuples they receive. Additionally the reducer will find the overlap because overlaps will reach at least one reducer. Such an embodiment of the invention can also include removing duplicates for example by scanning the output and recording only unique results.

At least one embodiment of the invention can additionally include permitting the reducer to find the overlap only if in the partition cell the following is satisfied The starting point of the intersection of rand rlies in the partition cell. This ensures that there is no duplicate.

Additionally by way of illustration consider the following example embodiment of the invention implementing a range spatial predicate. Let Rand Rbe two relations to be joined based on spatial predicate range with parameter d. Accordingly the example embodiment of the invention includes determining the tuples in Rand Rwhich satisfy the given range predicate. Let rbe a rectangle in Rand rbe a rectangle in Rthat satisfy the range predicate. If Rhas more tuples than R ris projected in the mapper otherwise ris projected in the mapper. The phrase projected in the mapper indicates that the map jobs execute the operation project on the tuples they receive. Also unless otherwise determined assume Rhas more tuples than R if not swap rand rin the subsequent steps detailed below.

Such an example embodiment of the invention also includes replicating rwith function such that dist c r 

At least one embodiment of the invention includes the use of a multi way join. Consider for example a join query that states Roverlaps R and Roverlaps R. Such an embodiment of the invention can include joining Rwith Rand obtained results O as well as joining Owith R. This sequence can be repeated for additional predicates in a serial manner. Additionally Ois the result of the join query Roverlaps R. Also the result of Roverlaps R that is O must contain the rectangles of both Rand R. Because the multi way join query includes Roverlaps R the relation Ois joined with Rusing the rectangles of Rand R where the rectangles in Rcome from O.

An example embodiment of the invention utilizing a multi way join can also include the following. Consider a join query that states Roverlaps R and Roverlaps R. Such an embodiment of the invention can include replicating all relations with a suitable function For one dimensional 1D partitions the rectangle can be replicated to all partition cells right of a given bounding rectangle. For two dimensional 2D partitions the rectangle can be replicated to all partition cells right of and below the rectangle. 1D partitions are intervals. For instance 1 5 6 10 11 15 16 20 is an example of four partitions of the 1D range 1 20. An example of 2D partition might include partitioning a rectangle 1 1 20 20 into four distinct rectangles as 1 1 10 10 1 11 10 2 11 1 20 10 11 11 20 20 .

Additionally for 1D partitions the reducer corresponding to the partition cell of the rightmost rectangle computes the join. This avoids duplicate processing. Also for 2D partitions the partition cell containing the largest starting x coordinate and the largest starting y coordinate computes the join assuming that the origin is at the top left corner . The join computation noted here is for multi way joins and is used so that there are no duplicates present in the final output.

An additional example embodiment of the invention includes utilizing a multi way join can also include the following. Consider a join query that states Rrange d R and Rrange d R. Such an embodiment of the invention can include computing the distance metric D to estimate the amount of replication to different cells. This can be carried out for example via the use of a join graph. Additionally such an embodiment of the invention can also include determining and or identifying a relation to project. Such a determination can be made for example by use of a join graph where the nodes are the relations and the edges are the predicates. The weights of the edges are proportional to the range parameter d. Further for rectangle r in R such an embodiment includes communicating the rectangle to all partition cells within a distance D R c from r.

At least one embodiment of the invention can also include implementing a controlled replication operation. Such an embodiment includes selectively replicating rectangles which for example can include removing the rectangles that need not be replicated from the set of rectangles. Further the rectangles which will not be present in the output can be identified or the output tuple can be computed at the reducer itself. To identify these rectangles at least one embodiment of the invention includes following an algorithm that examines the rectangles in a partition cell and discovers the rectangles which either do not belong to any output tuple formed entirely within the partition cell or belong to any partial result with at least one rectangle crossing over to other partition cells.

Consider the following example query Roverlaps R Roverlaps R and Roverlaps R. In such an example rectangles u vneed not be replicated and do not overlap with any other rectangle. Further rectangle vneed not be replicated as it does not overlap with any rectangle from R.

Additionally at least one embodiment of the invention can include implementing a controlled replication operation within a limit. In such an embodiment a rectangle is not replicated to all partition cells rather a rectangle may only be replicated to a defined limit. The limit is determined using the join query and determining the maximum distance to which a rectangle must be replicated to ensure a correct and complete output. One such method includes using a join graph such as previously described herein and summing the distances d in all of the range predicates and the maximum diagonal sizes of all of the relations to obtain the limit.

In the map step of the second cycle illustrated in step the marked rectangles are projected while the unmarked rectangles are replicated. In the reduce step of the second cycle illustrated in step each reducer includes all of the tuples to compute the final partial output of the join query. Each reducer computes the partial output and outputs the partial output to the distributed file system . The files are subsequently collated together to form the final join output.

Additionally partitioning can include configuring containers in the x dimension and or the y dimension of the spatial data domain wherein each container is a uniform size. Also at least one embodiment of the invention includes determining the number of spatial data objects starting in each container and merging one or more partitions in the spatial data domain such that each resulting partition has an equal number of spatial data objects.

Step includes defining at least one operation to be performed on the partitioned spatial data domain based on one or more predicates of a query for example a query provided by a user . As detailed herein the predicates can include at least one of an overlap parameter overlap with a range parameter within a range of and a nearest neighbor parameter. Additionally as also noted herein an operation can include a project operation wherein said project operation determines a partition in which the start point of a spatial data object resides. Another operation includes a split operation wherein said split operation determines all partitions that share at least one point of a spatial data object. Yet another operation includes a replication operation wherein said replication operation determines all partitions that satisfy a given condition.

Step includes executing the at least one defined operation on the partitioned spatial data domain to determine a response to the query. Additionally at least one embodiment of the invention includes compiling two or more spatial joins on the spatial data domain determined in response to the query to generate a composite output.

The techniques depicted in can also include defining the distribution of spatial data objects across multiple nodes of the cluster of machines wherein the defining can be carried out to balance said distribution of spatial data objects across the multiple nodes of the cluster of machines.

Step includes defining at least one operation to be performed on the partitioned spatial data domain based on the one or more predicates of the query. Step includes executing the at least one defined operation on the partitioned spatial data domain to determine a response to the query.

The techniques depicted in and can also as described herein include providing a system wherein the system includes distinct software modules each of the distinct software modules being embodied on a tangible computer readable recordable storage medium. All of the modules or any subset thereof can be on the same medium or each can be on a different medium for example. The modules can include any or all of the components shown in the figures and or described herein. In an aspect of the invention the modules can run for example on a hardware processor. The method steps can then be carried out using the distinct software modules of the system as described above executing on a hardware processor. Further a computer program product can include a tangible computer readable recordable storage medium with code adapted to be executed to carry out at least one method step described herein including the provision of the system with the distinct software modules.

Additionally the techniques depicted in and can be implemented via a computer program product that can include computer useable program code that is stored in a computer readable storage medium in a data processing system and wherein the computer useable program code was downloaded over a network from a remote data processing system. Also in an aspect of the invention the computer program product can include computer useable program code that is stored in a computer readable storage medium in a server data processing system and wherein the computer useable program code is downloaded over a network to a remote data processing system for use in a computer readable storage medium with the remote system.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in a computer readable medium having computer readable program code embodied thereon.

An aspect of the invention or elements thereof can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform exemplary method steps.

Additionally an aspect of the present invention can make use of software running on a general purpose computer or workstation. With reference to such an implementation might employ for example a processor a memory and an input output interface formed for example by a display and a keyboard . The term processor as used herein is intended to include any processing device such as for example one that includes a CPU central processing unit and or other forms of processing circuitry. Further the term processor may refer to more than one individual processor. The term memory is intended to include memory associated with a processor or CPU such as for example RAM random access memory ROM read only memory a fixed memory device for example hard drive a removable memory device for example diskette a flash memory and the like. In addition the phrase input output interface as used herein is intended to include for example a mechanism for inputting data to the processing unit for example mouse and a mechanism for providing results associated with the processing unit for example printer . The processor memory and input output interface such as display and keyboard can be interconnected for example via bus as part of a data processing unit . Suitable interconnections for example via bus can also be provided to a network interface such as a network card which can be provided to interface with a computer network and to a media interface such as a diskette or CD ROM drive which can be provided to interface with media .

Accordingly computer software including instructions or code for performing the methodologies of the invention as described herein may be stored in associated memory devices for example ROM fixed or removable memory and when ready to be utilized loaded in part or in whole for example into RAM and implemented by a CPU. Such software could include but is not limited to firmware resident software microcode and the like.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus . The memory elements can include local memory employed during actual implementation of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during implementation.

Input output or I O devices including but not limited to keyboards displays pointing devices and the like can be coupled to the system either directly such as via bus or through intervening I O controllers omitted for clarity .

Network adapters such as network interface may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

As used herein including the claims a server includes a physical data processing system for example system as shown in running a server program. It will be understood that such a physical server may or may not include a display and keyboard.

As noted aspects of the present invention may take the form of a computer program product embodied in a computer readable medium having computer readable program code embodied thereon. Also any combination of computer readable media may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM a Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using an appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of at least one programming language including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. Accordingly an aspect of the invention includes an article of manufacture tangibly embodying computer readable instructions which when implemented cause a computer to carry out a plurality of method steps as described herein.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module component segment or portion of code which comprises at least one executable instruction for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It should be noted that any of the methods described herein can include an additional step of providing a system comprising distinct software modules embodied on a computer readable storage medium the modules can include for example any or all of the components detailed herein. The method steps can then be carried out using the distinct software modules and or sub modules of the system as described above executing on a hardware processor . Further a computer program product can include a computer readable storage medium with code adapted to be implemented to carry out at least one method step described herein including the provision of the system with the distinct software modules.

In any case it should be understood that the components illustrated herein may be implemented in various forms of hardware software or combinations thereof for example application specific integrated circuit s ASICS functional circuitry an appropriately programmed general purpose digital computer with associated memory and the like. Given the teachings of the invention provided herein one of ordinary skill in the related art will be able to contemplate other implementations of the components of the invention.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of another feature integer step operation element to component and or group thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed.

At least one aspect of the present invention may provide a beneficial effect such as for example distributing spatial objects across multiple reducers to minimize cost.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

