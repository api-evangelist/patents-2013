---

title: Scripting language executor service for applications
abstract: A method and system for executing scripts on virtual machines is provided. The system includes an executor service that accepts scripts, parameters, authentication information from another process that needs to invoke a script on a target virtual machine (or group of virtual machines). The executor service remains running even after a script has completed execution. The executor service accepts any number of scripts and places them in a command queue. Agents running on the target virtual machine(s) check-in with the executor service to receive scripts from the command queue. Also, the executor service may directly invoke a script using a persistent connection to a virtual machine management center.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08904388&OS=08904388&RS=08904388
owner: VCE Company, LLC
number: 08904388
owner_city: Richardson
owner_country: US
publication_date: 20130110
---
Embodiments of the present invention generally relate to a method for remotely executing scripting language on computer systems.

Software developers use general purpose programming languages such as Java or C to write software applications in a wide variety of application domains due to the flexibility afforded by such programming languages. In contrast scripting languages such as PowerShell or bash are typically used by system administrators to quickly complete administrative tasks and automate tasks on computer systems. For example system administrators can write scripts to install software change configurations and settings launch software or even execute additional scripts. As such there is a demand for solutions that combine software applications and scripts which are typically supported by very different support stacks e.g. compiled language vs. run time interpreter .

Embodiments of the present disclosure provide a method for executing a script on a plurality of virtual machines. The method includes loading by a first process a library configured to connect to a virtual management center and enable remote execution of a script on the plurality of virtual machines. The method includes establishing a connection to the virtual management center based on the loaded library. The method further includes receiving from a second process a command request having a script and specifying at least one target virtual machine of the plurality of virtual machines on which to invoke the script. The method includes responsive to determining an agent is available on the target virtual machine storing the received command request associated with the target virtual machine in a command queue. The method includes responsive to determining an agent is not available on the target virtual machine invoking execution of the script on the target virtual machine using the connection to the virtual management center.

Embodiments of the present disclosure provide a system for executing scripts on a plurality of virtual machines. The system includes one or more computer processors a memory containing a program which when executed by the one or more computer processors is configured to perform an operation. The operation includes loading by a first process executing in the computer processor a library configured to connect to a virtual management center and enable remote execution of a script on the plurality of virtual machines. The operation further includes establishing a connection to the virtual management center based on the loaded library and receiving from a second process executing in the computer processor a command request. The command request may have a script and specifying at least one target virtual machine of the plurality of virtual machines on which to invoke the script. The operation further includes responsive to determining an agent is available on the target virtual machine storing the received command request associated with the target virtual machine in a command queue. The operation includes responsive to determining an agent is not available on the target virtual machine invoking execution of the script on the target virtual machine using the connection to the virtual management center.

Embodiments of the present disclosure provide a non transitory computer readable storage medium having computer readable program code embodied therewith. The computer readable program code includes computer readable program code configured to load by a first process a library configured to connect to a virtual management center and enable remote execution of a script on a plurality of virtual machines. The computer readable program code further includes computer readable program code configured to establish a connection to the virtual management center based on the loaded library and computer readable program code configured to receive from a second process a command request having a script and specifying at least one target virtual machine of the plurality of virtual machines on which to invoke the script. The computer readable program code further includes computer readable program code configured to responsive to determining an agent is available on the target virtual machine store the received command request associated with the target virtual machine in a command queue. The computer readable program code includes computer readable program code configured to responsive to determining an agent is not available on the target virtual machine invoke execution of the script on the target virtual machine using the connection to the virtual management center.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures. It is contemplated that elements disclosed in one embodiment may be beneficially utilized on other embodiments without specific recitation.

Embodiments of the present invention provide a method and system for executing scripts on virtual machines. The system includes an executor service that accepts scripts parameters authentication details and other information from another process that needs to invoke a script on a target virtual machine or group of virtual machines . The executor service may remain running even after a script has completed execution. The executor service may accept any number of scripts and place them in a command queue. Agents running on the target virtual machine s may periodically check in with the executor service to receive scripts from the command queue. Further the executor service may directly invoke a script on target virtual machine s using a persistent connection to a virtual machine management center.

As in conventional computer systems the host computer includes system hardware and system software. The system hardware generally includes memory a processor some form of memory management unit MMU which may be integrated with the processor a disk interface and a network interface . The memory stores data and software such as an operating system and currently running application programs. MMU is configured to manage a virtual memory for processes running in host computer . The processor may be a single processor or two or more cooperating processors in a known multiprocessor arrangement. Examples of disk interface are a host bus adapter and a network file system interface. An example of network interface is a network adapter also referred to as a network interface controller NIC . In some embodiments a plurality of NICs is included as the network interface . It should further be recognized that system hardware also includes or is connected to conventional registers interrupt handling circuitry a clock etc. which for sake of simplicity are not shown in the figures.

One or more virtual machines VMs illustratively depicted as VMs and are configured within the host computer and share the hardware resources of the host computer . Each virtual machine typically includes a guest operating system OS and virtualized system hardware not shown which includes one or more virtual CPUs virtual system memory one or more virtual disks one or more virtual devices etc. all of which are implemented to emulate the corresponding components of an actual computer.

The virtual machines run on top of a hypervisor sometimes referred to as a virtual machine monitor or VMM which is a software interface layer that abstracts system hardware into virtualized hardware thereby enabling sharing of system hardware of the host computer amongst the virtual machines. The hypervisor acts as an interface between VM and the system hardware for executing VM related instructions and for transferring data to and from memory processor s disk interface etc. The hypervisor may run on top of an operating system of the host computer or may run directly on hardware components of the host computer .

In one embodiment the computing environment includes a virtual machine management center configured to centrally manage the VMs . For example a system administrator may interact the VM management center e.g. via administrative client or console to start VM pause a VM take a snapshot of a VM s state allocate resources for a VM or monitor metrics for CPU or memory utilization metrics. In some embodiments the VM management center may be configured to remotely invoke a script on a VM to perform one or more administrative tasks on the VM. In some implementations the guest OS running on a virtual machine e.g. VM may have a plug in or extension installed sometimes referred to as a VM toolkit that allows the VM management center to access and manipulate the VM. One example of a VM management center is a vCenter R Server made available by VMware Inc. In one embodiment the VM management center includes a console configured to allow administrative access to the VM management center and its VM management functionality described above.

In one embodiment the computing environment includes a server having a runtime environment and an application executing thereon. In the embodiments illustrated herein the runtime environment is a Java Virtual Machine JVM although it should be recognized that other runtime environments and or applications executing on top of the guest OS may be used without departing from the scope of the teachings herein. The embodiments presented should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative.

In one embodiment the application may be an infrastructure application configured to programmatically modify one or more VMs and . However in many cases software products running on the VMs and may not provide a native application programming interface API that can be used to perform administrative operations. In the embodiments described herein a native API refers to an interface or framework that makes certain functionality or commands available to third party applications e.g. application in a particular programming language or software framework. For example a software product running on VMs may not provide a native Java API that can be used by the application to perform the desired operations.

To solve this problem software developers use scripting languages relied on by system administrators to perform the desired operations. Applications such as the application which may have been developed using a general purpose programming language such as Java are configured to execute one or more scripts written in a scripting language. In the embodiments illustrated herein the scripting language is PowerShell although it should be recognized that other scripting languages may be used without departing from the scope of the teachings herein. Again the embodiments presented should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative. Table 1 illustrates a sample PowerShell script for setting network settings on a virtual machine.

In one embodiment to execute a PowerShell script the application may be configured to spawn a process and execute a PowerShell script from the spawned process. After the PowerShell script is exited control is returned to the application . Table 2 illustrates sample Java code for one example technique for executing a PowerShell script.

As shown above in Table 1 the PowerShell script may load one or more libraries relied on by the script. However loading the libraries may add additional execution time to the script. If an application needed to execute several scripts each call would be an independent process that needs to wait until libraries are loaded for PowerShell. Each invocation of a PowerShell script performs functions e.g. establish a connection load libraries that are not usable by any subsequent invocations. Accordingly embodiments of the present invention provide a system for executing a script on a remote VM.

In one embodiment the executor service includes one or more libraries configured to facilitate execution of a script on a target VM. The libraries may include an automation library that provides access to the VM management center such as a PowerCLI framework made available from VMware Inc. In one embodiment the executor service further includes a persistent connection to VM management center that may be used to automate administration of VMs under the control of the VM management center . The executor service may be configured to invoke a script of a command request on one or more target VMs using the persistent connection to VM management center .

In one embodiment the executor service is configured to store the received command requests and provide the command request to target VMs when an agent executing on each VM periodically poll with the executor service for any command requests to be fulfilled. In one embodiment the executor service includes a command queue configured to store one or more command requests received from applications. The command queue is configured to allow retrieval of the command requests based on a given target virtual machine i.e. indexed by target VM . In some embodiments the command queue may be configured to maintain status of each command request and store any reported status e.g. script output for the requesting applications.

In one embodiment the executor service further includes a secure message module configured to secure the channel of communication between requesting applications and the executor service as well as channels of communication between the executor service and target VMs. For example the secure message module may be configured to decrypt command requests received from authorized applications and encrypt for status messages to the applications. In another example the secure message module may be configured to encrypt command requests transmitted to one or more target VMs as well as decrypt responses from the target VMs.

At step where the executor service launches and loads one or more libraries configured to facilitate invocation of scripts on remote VMs such as an automation library or framework. It should be appreciated that the libraries are loaded as a one time execution time cost even though numerous script invocations may be performed thereby significantly reducing the execution time over traditional techniques.

At step the executor service establishes a connection with the VM management center . At step the VM management center authenticates the connection from the executor service . In some embodiments the executor service uses administrative credentials e.g. root username password and a pre determined network address of the VM management center to establish a connection to the VM management center . It should be appreciated that the persistent connection may be retained through numerous script invocations rather than connecting and disconnecting with the VM management center upon each invocation.

At step upon loading libraries and establishing a persistent connection with the VM management center the executor service begins listening for command requests from applications.

At step the Java application transmits a command request to the executor service to invoke a script on a target VM. In one embodiment the command request may include a plurality of fields such as a PowerShell script configured to be executed on a target VM or group of VMs parameters if suitable and authentication information needed to invoke the script on the target VM s . An example of a command request organized in a structured format is shown below in Table 3.

As shown the field CommandText includes string text of a PowerShell script to be executed on a target machine specified by a target identifier e.g. the TargetVirtualMachine field. In this example the command request specifies that the CommandText script is to be executed on a plurality of target VMs as identified by a network address string e.g. 192.22.5.5 . In one embodiment the command request may target a plurality of virtual machines using multicast and broadcast operation modes described later.

Referring back to at step the executor service receives and parses the command request from the application . In one embodiment the executor service uses the secure message module to authenticate the command request and ensure that the command requests are from authorized entities. It should be appreciated that any channels of communication between requesting applications and the executor service e.g. command requests and status requests and the executor service and agents e.g. check in requests and responses may be run through the secure message module and may be omitted from further discussion.

At step the executor service determines one or more target VMs specified by the command request. A command request may specify a target virtual machine to execute a given script using a variety of ways. In one embodiment the executor service may determine the command request specifies a unicast mode of operation that targets a single VM to receive the command request. In some embodiments the single target VM may be identified by name or by network address e.g. IP address . The executor service may further determine that the command request specifies a multicast mode of operation that targets a group of VMs to receive the command. Under multicast the target VMs may be specified by a wildcard expression of names or network addresses e.g. 172.22.1. . The executor service may also determine that the command requests specifies a broadcast mode of operation that targets all VMs in the system e.g. computing environment to receive the command.

At step the executor service determines whether an agent is available for the target VM s . In some embodiments the executor service may be initiated e.g. by application with an enabled agent option that specifies that the executor service should function as a message broker to retain all command requests received from the application and dispatch the command requests to polling VMs. At step responsive to determining that an agent is available for the target VMs of the command request the executor service inserts the command request into the command queue .

In some embodiments the executor service may be initiated with a disabled agent option that specifies the executor service should directly execute the command request on the target VM s . At step responsive to determining that an agent is not available for the target VM of the command request the executor service remotely executes the script of the command request using the connection to the VM management center . In one implementation the executor service executes an Invoke VMScript command that directs the VM management center to remotely execute the specified script using specified credentials for the target VM s .

At step the VM management center invokes the script on the guest OS of the target VM s and returns a response if suitable. While not shown in it should be appreciated that the executor service may receive the script response from the VM management center that results from remote execution of the script . The executor service may store the script response within the command queue to later provide to the application as described below in conjunction with .

It should further be appreciated that in some embodiments command requests may specify on an individual basis whether a given command request should be saved to the command queue or directly executed. As such certain command requests may be executed directly on a target VM lacking an agent as illustrated by VM in and may be stored in the command queue for other target VMs having an agent e.g. VM in 

At step the executor service receives the check in request from the agent running on the VM . At step the executor service determines whether any command requests exist in command queue for the VM . In some embodiments the executor service queries the command queue for unicast command requests associated with the VM originating the check in request. In some embodiments the executor service may identify any multicast command requests associated with a group of VMs of which the VM is a member of. In some embodiments the executor service may identify any broadcast command requests in the command queue.

At step responsive to determining that there are no command requests in the command queue associated with the VM the executor service may optionally transmit an acknowledgement message to the agent running on the VM . The acknowledgement message may acknowledge receipt of the check in request e.g. received at step and confirm no scripts are available for the agent to be executed on the VM .

Otherwise at step responsive to determining there are command requests in the command queue associated with the VM checking in the executor service retrieves the command request s from the command queue and transmits the script to the requesting agent in the VM . In some embodiments the executor service may modify the command queue to maintain a log record that the script associated with the command request has been transmitted to a particular target VMs. For example in cases where the command request specifies a multicast or broadcast mode of operation the executor service may avoid re transmitting duplicate scripts to target VMs based on the log record.

At step the agent running on the target VM receives the script from the executor service. In some embodiments the agent may decrypt the received script to verify the script is an authentic command from an authorized entity e.g. the executor service . At step the agent executes the script on the guest OS of the target VM. For example using the example from Table 3 the agent may execute a PowerShell script comprising commands to set the gateway and DNS settings as follows 

In some embodiments the executed script may result in script output such as verbose text output describing progress and status of the script execution. At step the agent running on a target VM transmits a command response to the executor service . The command response may include an acknowledgement that the script has been successfully executed on the target VM and may include a copy of the script output resultant from executing the script on the target VM. In some embodiments the command response may include an identifier that associates the command response with a corresponding command request at the executor service .

At step the executor service receives the command response from the agent running on the target VMs. In some embodiments the executor service stores the script output associated with the command request within the command queue . In some embodiments the executor service updates the command queue to indicate a status for the command request corresponding to the received command response to indicate the script has been executed on the target VM.

At step the application that initiated the original command request e.g. at step transmits a status request to the executor service for an update regarding the command request. The status request may specify the command request for which status is sought using a unique identifier or other information. It should be appreciated that the application may transmit a status request not just for scripts scheduled for execution via the command queue e.g. at step but in addition scripts directly invoked on a target VM e.g. at step . In some embodiments the application may periodically transmit a status request to the executor service similar to the periodic polling by the agents .

At step responsive to receiving the status request the executor service determines the status of the command request based on information provided by the command queue. For example the status of a command request may specify a script has been executed is currently being executed or has not yet been picked up by an agent on a target VM. In some embodiments the executor service retrieves from the command queue any script output associated with the command request indicated by the status request. In other embodiments the executor service may retrieve information from the command queue regarding any new e.g. since a last status request status updates for the requesting application from any command requests.

At step the executor service transmits a response to the status request to the application . In one some embodiments the response to the status request may include any script output resultant from execution of the script on a given target VM s . In some embodiments the response to the status request may include status codes error codes or other return values resulting from invocation of the script at the target VM. At step the application receives the status response from the executor service and may continue its execution which may include transmission of additional command requests to the executor service .

Accordingly embodiments of the present disclosure advantageously enable a software application to efficiently execute scripts on a plurality of virtual machines. Embodiments of the present disclosure reduce the amount of wait time for loading libraries need by the scripts. Further for embodiments having agents running on the target VMs provides improved network security as less firewall ports need to be opened to run scripts on the virtual machines. Rather ports may be opened between the executor service and the target virtual machines on which scripts need to be run.

Various embodiments of the present disclosure may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored.

The invention has been described above with reference to specific embodiments and numerous specific details are set forth to provide a more thorough understanding of the invention. Persons skilled in the art however will understand that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The foregoing description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

While the foregoing is directed to embodiments of the present disclosure other and further embodiments of the present disclosure may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

