---

title: Unified hardware and software debugging
abstract: A device receives information specifying a functional model that includes a set of variables and a set of computations, and receives debugging information associated with the functional model. The device generates computer code based on the set of computations associated with the functional model, the set of variables associated with the functional model, and the received debugging information. The device executes the generated computer code based on the debugging information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489283&OS=09489283&RS=09489283
owner: The MathWorks, Inc.
number: 09489283
owner_city: Natick
owner_country: US
publication_date: 20130314
---
The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

Software developers may utilize debugging tools often referred to as debuggers when developing software. Debuggers may assist in the software development process by for example executing segments of a software program to determine whether the software is operating properly. However debuggers are often language specific meaning that in order for a software developer to debug a software program that includes multiple programming languages the software developer may be required to debug the software program using multiple debuggers one debugger at a time.

Furthermore many integrated development environments IDEs support multiple programming languages but may only support debugging in the context of one programming language to another programming language. Such IDEs simply require a user to set up separate projects that are technology specific e.g. a C project a Java project etc. which prevents seamless debugging from one programming language to another programming language. Thus when debugging a project implemented in multiple programming languages the user may be inconvenienced by having to jump between IDEs.

Systems and or methods described herein may enable a user to define debugging information in a high level programming language e.g. a functional model and may rewrite the debugging information to a lower level programming language e.g. C code Java code etc. so that debugging may occur in the lower level programming language. In one example implementation the systems and or methods may provide unified debugging of an application which is implemented in a combination of declarative programming languages e.g. the hardware description language HDL and imperative programming languages e.g. the C programming language . In other words depending on the application the high level programming language may be converted into a combination of descriptive languages imperative languages or either of these languages. The systems and or methods may provide a unified interface for debugging the application independent of the final form of the application which may be a combination of hardware code e.g. code written in a hardware description language such as VHDL Verilog SystemC etc. compilable software code e.g. code written in the C Java etc. programming languages as well as interpreted code that executes in conjunction with an executive and need not be compiled e.g. MATLAB code Python code etc. .

Functional model may include an algorithmic model a block diagram model etc. produced by the TCE. Functional model may include one or more nodes e.g. blocks one or more connections between the nodes one or more inputs and or outputs for the nodes etc. In one example a user may specify debugging information in functional model . The debugging information may include test points e.g. signal or state monitoring input output points e.g. input out value monitoring break points e.g. conditional break points assertions e.g. conditional break points with complex conditions etc. associated with functional model . In one example the TCE may receive the debugging information from the user via the visual representation of functional model .

Debug code generation module may receive functional model and the debugging information and may generate computer code with a functionally equivalent form of the debugging information. The debugging information may be generated as part of computer code or may be generated as separate e.g. as directives or meta information accessible by the IDE as part of a program database from computer code . Alternatively or additionally debug code generation module may generate code that is modified compared to code that would be generated from functional model without the debugging information to produce computer code . In one example computer code may include compiled HDL code that may need to be synthesized to execute on hardware uncompiled software code e.g. C code Java code etc. that may need to be compiled before execution etc. In one implementation the user may select a computer code language e.g. a programming language associated with the debugging information and debug code generation module may generate computer code in the selected computer code language. In some implementations computer code may include a portion that is interpreted to execute in conjunction with the generated code which has been compiled and or synthesized . Functional model may include a higher level representation of computer code and debug code generation module may automatically translate the debugging information from the higher level representation to the lower level representation of computer code .

Although not shown in in one example implementation the TCE may execute computer code and may generate debugging data based on the execution of computer code . The debugging data may include data generated based on the debugging information. For example if the debugging information specifies monitor variable A in functional model the debugging data may include identified values of variable A over time. The TCE may store and or output e.g. provide for display the generated debugging data.

The terms code program program code computer code and or programming code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code that may require further processing to execute e.g. C code HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python code written as text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

A declarative language may specify constraints on variables and the values of the variables. With a declarative language instructions may include a set of constraints over variables. The constraints may cause a change in state that is affected simultaneously for all states affected by constraints. A constraint may not be able to state when an explicit state change occurs in the computation of the new state. An imperative language may describe when to explicitly change a state and the values of the variables. With an imperative language it may be important for a user to know what a sequence of execution is for instructions since the user may obtain the state and make explicit changes to the state every time an instruction is executed.

User interfaces as described herein may include graphical user interfaces GUIs or non graphical user interfaces such as text based interfaces. The user interfaces may provide information to users via customized interfaces e.g. proprietary interfaces and or other types of interfaces e.g. browser based interfaces etc. . The user interfaces may receive user inputs via one or more input devices may be user configurable e.g. a user may change the sizes of the user interfaces information displayed in the user interfaces color schemes used by the user interfaces positions of text images icons windows etc. in the user interfaces etc. and or may not be user configurable. Information associated with the user interfaces may be selected and or manipulated by a user of the TCE e.g. via a touch screen display a mouse a keyboard a keypad voice commands etc. .

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices.

Server device may include one or more server devices or other types of computation and communication devices that gather process and or provide information in a manner described herein. Server device may include a device that is capable of communicating with client device e.g. via network . In one example server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. and or software e.g. a simulator executing on the aforementioned devices. In one example server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for server device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN an intranet the Internet or a combination of networks.

TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one implementation TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In some implementations TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . Alternatively or additionally TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dassault Syst mes etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dassault Syst mes SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

TCE may include a modeling system that may be used in the creation of a functional model and that may enable generation of executable code based on the model. For example TCE may include a graphical modeling tool or application that provides a user interface for a numerical computing environment. Additionally or alternatively TCE may include a graphical modeling tool and or application that provides a user interface for modeling and simulating e.g. by executing a model a dynamic system e.g. based on differential equations difference equations algebraic equations discrete events discrete states stochastic relations etc. .

A dynamic system either natural or man made may be a system whose response at any given time may be a function of its input stimuli its current state and a current time. Such systems may range from simple to highly complex systems. Natural dynamic systems may include for example a falling body the rotation of the earth bio mechanical systems muscles joints etc. bio chemical systems gene expression protein pathways weather and climate pattern systems and or any other natural dynamic system. Man made or engineered dynamic systems may include for example a bouncing ball a spring with a mass tied on an end automobiles aircrafts control systems in major appliances communication networks audio signal processing systems and a financial or stock market and or any other man made or engineered dynamic system.

The system represented by a model may have various execution semantics that may be represented in the model as a collection of modeling entities often referred to as blocks. A block may generally refer to a portion of functionality that may be used in the model. The block may be represented graphically textually and or stored in some form of internal representation. Also a particular visual depiction used to represent the block for example in a graphical block diagram may be a design choice.

A block may be hierarchical in that the block itself may include one or more blocks that make up the block. A block including one or more blocks sub blocks may be referred to as a subsystem block. A subsystem block may be configured to represent a subsystem of the overall system represented by the model. A subsystem block may be a masked subsystem block that is configured to have a logical workspace that contains variables only readable and writeable by elements contained by the subsystem block.

A graphical model e.g. a functional model may include entities with relationships between the entities and the relationships and or the entities may have attributes associated with them. The entities my include model elements such as blocks and or ports. The relationships may include model elements such as lines e.g. connector lines and references. The attributes may include model elements such as value information and meta information for the model element associated with the attributes. A graphical model may be associated with configuration information. The configuration information may include information for the graphical model such as model execution information e.g. numerical integration schemes fundamental execution period etc. model diagnostic information e.g. whether an algebraic loop should be considered an error or result in a warning model optimization information e.g. whether model elements should share memory during execution model processing information e.g. whether common functionality should be shared in code that is generated for a model etc.

Additionally or alternatively a graphical model may have executable semantics and or may be executable. An executable graphical model may be a time based block diagram. A time based block diagram may include for example blocks connected by lines e.g. connector lines . The blocks may include elemental dynamic systems such as a differential equation system e.g. to specify continuous time behavior a difference equation system e.g. to specify discrete time behavior an algebraic equation system e.g. to specify constraints a state transition system e.g. to specify finite state machine behavior an event based system e.g. to specify discrete event behavior etc. The lines may represent signals e.g. to specify input output relations between blocks or to specify execution dependencies between blocks variables e.g. to specify information shared between blocks physical connections e.g. to specify electrical wires pipes with volume flow rigid mechanical connections etc. etc. The attributes may include meta information such as sample times dimensions complexity whether there is an imaginary component to a value data type etc. associated with the model elements.

In a time based block diagram ports may be associated with blocks. A relationship between two ports may be created by connecting a line e.g. a connector line between the two ports. Lines may also or alternatively be connected to other lines for example by creating branch points. For instance three or more ports can be connected by connecting a line to each of the ports and by connecting each of the lines to a common branch point for all of the lines. A common branch point for the lines that represent physical connections may be a dynamic system e.g. by summing all variables of a certain type to 0 or by equating all variables of a certain type . A port may be an input port an output port an enable port a trigger port a function call port a publish port a subscribe port an exception port an error port a physics port an entity flow port a data flow port a control flow port etc.

Relationships between blocks may be causal and or non causal. For example a model e.g. a functional model may include a block that represents a continuous time integration block that may be causally related to a data logging block by using a line e.g. a connector line to connect an output port of the continuous time integration block to an input port of the data logging block. Further during execution of the model the value stored by the continuous time integrator may change as the current time of the execution progresses. The value of the state of the continuous time integrator may be available on the output port and the connection with the input port of the data logging block may make this value available to the data logging block.

In one example a block may include or otherwise correspond to a non causal modeling function or operation. An example of a non causal modeling function may include a function operation or equation that may be executed in different fashions depending on one or more inputs circumstances and or conditions. Put another way a non causal modeling function or operation may include a function operation or equation that does not have a predetermined causality. For instance a non causal modeling function may include an equation e.g. X 2Y that can be used to identify the value of one variable in the equation e.g. X upon receiving an assigned value corresponding to the other variable e.g. Y . Similarly if the value of the other variable e.g. Y were provided the equation could also be used to determine the value of the one variable e.g. X .

Assigning causality to equations may include determining which variable in an equation is computed by using that equation. Assigning causality may be performed by sorting algorithms such as a Gaussian elimination algorithm. The result of assigning causality may be a lower block triangular matrix that represents the sorted equations with strongly connected components representative of algebraic cycles or loops. Assigning causality may be part of model compilation.

Equations may be provided in symbolic form. A set of symbolic equations may be symbolically processed to for example produce a simpler form. To illustrate a system of two equations X 2Y U and Y 3X 2U may be symbolically processed into one equation 5Y U. Equations may also include inequalities which need to be satisfied for example X

As such a non causal modeling function may not for example require a certain input or type of input e.g. the value of a particular variable in order to produce a valid output or otherwise operate as intended. Indeed the operation of a non causal modeling function may vary based on for example circumstance conditions or inputs corresponding to the non causal modeling function. Consequently while the description provided above generally describes a directionally consistent signal flow between blocks in other implementations the interactions between blocks may not necessarily be directionally specific or consistent.

In some implementations connector lines in a model may represent related variables that are shared between two connected blocks. The variables may be related such that their combination may represent power. For example connector lines may represent voltage current power etc. Additionally or alternatively the signal flow between blocks may be automatically derived.

In some implementations one or more blocks may also or alternatively operate in accordance with one or more rules or policies corresponding to a model in which they are included. For instance if the model were intended to behave as an actual physical system or device such as an electronic circuit the blocks may be required to operate within for example the laws of physics also referred to herein as physics based rules . These laws of physics may be formulated as differential and or algebraic equations e.g. constraints etc. . The differential equations may include derivatives with respect to time distance and or other quantities and may be ordinary differential equations ODEs partial differential equations PDEs and or differential and algebraic equations DAEs . Requiring models and or model components to operate in accordance with such rules or policies may for example help ensure that simulations based on such models will operate as intended.

A sample time may be associated with the elements of a graphical model. For example a graphical model may include a block with a continuous sample time such as a continuous time integration block that may integrate an input value as time of execution progresses. This integration may be specified by a differential equation. During execution the continuous time behavior may be approximated by a numerical integration scheme that is part of a numerical solver. The numerical solver may take discrete steps to advance the execution time and these discrete steps may be constant during an execution e.g. fixed step integration or may be variable during an execution e.g. variable step integration .

Alternatively or additionally a graphical model may include a block with a discrete sample time such as a unit delay block that may output values of a corresponding input after a specific delay. This delay may be a time interval and this interval may determine a sample time of the block. During execution the unit delay block may be evaluated each time the execution time has reached a point in time where an output of the unit delay block may change. These points in time may be statically determined based on a scheduling analysis of the graphical model before starting execution.

Alternatively or additionally a graphical model may include a block with an asynchronous sample time such as a function call generator block that may schedule a connected block to be evaluated at a non periodic time. During execution a function call generator block may evaluate an input and when the input attains a specific value when the execution time has reached a point in time the function call generator block may schedule a connected block to be evaluated at this point in time and before advancing execution time.

Further the values of attributes of a graphical model may be inferred from other elements of the graphical model or attributes of the graphical model. The inferring may be part of a model compilation. For example the graphical model may include a block such as a unit delay block that may have an attribute that specifies a sample time of the block. When a graphical model has an execution attribute that specifies a fundamental execution period the sample time of the unit delay block may be inferred from this fundamental execution period.

As another example the graphical model may include two unit delay blocks where the output of the first of the two unit delay blocks is connected to the input of the second of the two unit delay block. The sample time of the first unit delay block may be inferred from the sample time of the second unit delay block. This inference may be performed by propagation of model element attributes such that after evaluating the sample time attribute of the second unit delay block a graph search proceeds by evaluating the sample time attribute of the first unit delay block since it is directly connected to the second unit delay block.

The values of attributes of a graphical model may be set to characteristic settings such as one or more inherited settings one or more default settings etc. For example the data type of a variable that is associated with a block may be set to a default such as a double. Because of the default setting an alternate data type e.g. a single an integer a fixed point etc. may be inferred based on attributes of elements that the graphical model comprises e.g. the data type of a variable associated with a connected block and or attributes of the graphical model. As another example the sample time of a block may be set to be inherited. In case of an inherited sample time a specific sample time may be inferred based on attributes of elements that the graphical model comprises and or attributes of the graphical model e.g. a fundamental execution period .

As further shown in TCE may be associated with debug code generation module . Debug code generation module may include the features described above in connection with for example . In one example debug code generation module may be part of TCE . Alternatively or additionally debug code generation module may be a separate component from TCE .

Although shows example components of environment in other implementations environment may include fewer components different components differently arranged components and or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more other tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in other implementations device may include fewer components different components differently arranged components and or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more other tasks described as being performed by one or more other components of device .

As shown in process may include receiving types of debugging information block and receiving condition types for each type of debugging information block . For example as shown in user interface may enable a user of TCE to specify types of debugging information. For example the user may specify test points e.g. signal or state monitoring input output points e.g. input output value monitoring break points e.g. conditional break points assertions e.g. conditional break points with complex conditions etc. associated with functional model . If the user specifies for example break points user interface of may enable the user to specify types of break point conditions. For example the user may specify data based break point conditions e.g. when a signal and or variable has a specific value time based break point conditions e.g. at a particular time counter based break point conditions e.g. after a counter reaches a particular value and any combination of the aforementioned break point conditions.

Returning to process may include receiving information associated with each condition type block and receiving other options for each type of debugging information block . For example as shown in user interface may enable the user of TCE to specify types of the data based break point conditions such as manual entry of data based break point conditions a set of variables associated with such conditions a set of such conditions etc. As shown in user interface may enable the user to specify types of the time based break point conditions such as manual entry of time based break point conditions clock cycles per break point milliseconds per break point etc. As shown in user interface may enable the user to specify types of the counter based break point conditions such as manual entry of counter based break point conditions a set of variables associated with such conditions a set of such conditions etc. Thus user interfaces may enable the user to specify information associated with each condition type e.g. data based time based counter based etc. .

As shown in user interface may enable the user to specify other options for the break point conditions. For example the user may select Boolean expressions e.g. AND OR etc. that may be used to combine one or more break point conditions. Alternatively or additionally the user may select a clock edge to define a break point e.g. establish break point when a clock transitions from one value to another value . Alternatively or additionally the user may define a break point any time a signal e.g. in functional model changes value.

TCE may receive the information associated with each condition type and or the other options for each type of debugging information and may configure debug code generation module with the received information. Alternatively or additionally TCE may pre configure debug code generation module with the information associated with each condition type and or the other options for each type of debugging information.

As further shown in process may include configuring a debug code generation module based on the received types of debugging information the condition types the information associated with each condition type and or the other options block . For example TCE may configure debug code generation module with the different types of debugging information the different types of conditions for each type of debugging information the information associated with each condition type and or the other options for each type of debugging information. Alternatively or additionally TCE may pre configure debug code generation module with the different types of debugging information the different types of conditions for each type of debugging information the information associated with each condition type and or the other options without receiving such information from a user.

Although show example information that may be provided in user interfaces in other implementations user interfaces may include less information different information and or additional information than depicted in .

As shown in process may include receiving information regarding a functional model block and presenting a visual representation of the functional model block . For example TCE may receive information associated with functional model and may present a visual representation of functional model as shown in . Functional model may include computational semantics and may be executable e.g. an executable unified modeling language UML diagram an executable time based block diagram a state transition diagram code provided in an array based language etc. . Functional model may be associated with debugging information. The debugging information may include for example test points input output points break points assertions etc. associated with functional model . The debugging information may include metadata that is separate from e.g. in a separate file or associated with functional model . In one example functional model may include a model generated from an array based programming language a dynamically typed programming language etc. Functional model may include inferred data types sample times dimensions complexity continuous and discrete times etc. Visual representation may include representations e.g. blocks connections etc. of information associated with functional model .

In one example implementation functional model may include a time based block diagram model with blocks that represent dynamic systems and include differential equations difference equations and or algebraic equations a state transition diagram a data flow diagram a control flow diagram dynamically typed text array based text a declarative model an imperative model a model that allows constraints equalities and or assignments a model that allows inferring of execution attributes e.g. execution order task allocation sample times data types complexity dimensions etc. etc.

As further shown in process may include receiving via the visual representation debugging information associated with the functional model block . For example as shown in a user may utilize visual representation to select a point of functional model where debugging is to be performed. The user may select point e.g. by double clicking on a location of point and TCE may provide a user interface that enables the user to provide debugging information to TCE . The debugging information may include test points input output points break points assertions etc. associated with functional model . In one example user interface may enable the user to specify break point condition s such as data based time based and or counter based break point conditions as the debugging information. As further shown in if the user does not specify a break point condition user interface may indicate that a current condition is not specified as indicated by reference number .

As shown in if the user selects the data based break point condition in user interface TCE may provide a user interface that enables the user to specify a data based break point condition. In one example the user may manually enter data associated with functional model e.g. x b AND 2 b z y as the data based break point condition in user interface . Alternatively or additionally the user may select the data based break point condition from a set of variables and or conditions provided in user interface . After the user specifies the data based break point condition user interface may provide an indication that the current condition is as shown in . As further shown in the user may point to select etc. the indication and TCE may provide a user interface that displays the data based break point condition provided by the user in .

As shown in if the user selects the time based break point condition in user interface TCE may provide a user interface that enables the user to specify a time based break point condition. In one example the user may manually enter time information associated with functional model e.g. break every 100 clock cycles or milliseconds as the time based break point condition in user interface . Alternatively or additionally the user may select the time based break point condition as clock cycles or a time period e.g. milliseconds in user interface . After the user specifies the time based break point condition user interface may provide an indication that the current condition is OR as shown in . The condition may correspond to the data based break point condition specified in and the condition may correspond to the time based break point condition specified in . Alternatively or additionally the user may specify how the conditions and are combined such as with other Boolean operators e.g. an AND operator in based on a clock edge based on any time a signal changes value etc.

As shown in if the user selects the counter based break point condition in user interface TCE may provide a user interface that enables the user to specify a counter based break point condition. In one example the user may manually enter the counter based break point condition in user interface as follows 

In one example the user may select a set of signals e.g. test points to be logged as the debugging information. Accessibility to the test points may be turned on and off by the user. The instantaneous values of the signals may be observed from outside the executing computer code and multiple values of a same signal may be logged from outside the executing computer code . During execution of computer code the user may dynamically select which signals to log and or observe.

Returning to process may include receiving selection of a computer code language associated with the debugging information block . For example as shown in the user may point to select etc. a line e.g. a signal connecting blocks and provided in visual representation of functional model . When the user points to selects etc. the line TCE may provide a user interface that enables the user to select one or more languages for debugging functional model one or more languages for executing computer code etc. For example the user may select the C language the HDL etc. for debugging functional model and or for executing computer code .

In one example implementation if the user marks a block line variable etc. of functional model as being debugged in the C language and the HDL debug code generation module may automatically generate computer code for the block line variable etc. in the C language and the HDL. The user may switch between the C language version of computer code and the HDL version of computer code to debug timing issues e.g. blocks and or lines of computer code may have different numerical outputs when executing in the C language or in the HDL due to different clock domains debug fixed point approximations e.g. the C language and the HDL may use different fixed point libraries etc.

Alternatively or additionally the user may switch between the C language version of computer code and the HDL version of computer code for example when the C language version of computer code is legacy code with functionality modeled in functional model and when the HDL version of the computer code is generated for the C language version of computer code . Alternatively or additionally the user may switch between the C language version of computer code and the HDL version of computer code for example when the HDL version of computer code is legacy code with functionality modeled in functional model and when the C language version of the computer code is generated for the HDL version of computer code . The switching between the C language version of computer code and the HDL version of computer code may occur in a simulator or on a target hardware component e.g. an application specific integrated circuit ASIC a field programmable gate array FPGA a CPU a GPU etc. while executing computer code or before executing computer code . Computer code may include switch logic that enables the user to turn on or off execution in the C language or the HDL based on for example a block parameter in functional model . In one example the switch logic may enable the user to on or off all or a portion of computer code simultaneously.

Alternatively or additionally the user may designate a conditional break point as an event when there is a difference between execution of the C language version of computer code and execution of the HDL version of computer code for a block line variable etc. marked for debugging in both the C language and the HDL in functional model . In some implementations actions taken for conditional break points may include logging data when there is a discrepancy between the C language version of computer code and the HDL version of computer code logging a particular number of values before the event etc.

Two debuggers e.g. debuggers for the C language version of computer code and the HDL version of computer code debuggers for functional model and computer code etc. may exchange information using inter process communication IPC that may be hidden to the user. The IPC may include for example IPC shared memory on a Linux host machine message passing on a Windows host machine etc.

As further shown in process may include generating computer code based on the functional model the debugging information and the computer code language block . For example as shown in debug code generation module may receive a functional model debugging information associated with functional model and hardware code based on functional model . Functional model may include the features of functional model described herein. The debugging information may include for example test points input output points break points assertions etc. associated with functional model . Hardware code may include code formulated in a hardware language e.g. HDL VHDL Verilog SystemC etc. that corresponds to functional model . As further shown in debug code generation module may generate hardware code based on functional model hardware code the debugging information and or a language selected by a user e.g. as shown in . Alternatively or additionally debug code generation module may modify hardware code based on the debugging information to produce hardware code . In one example hardware code may include compiled hardware code e.g. code in the HDL the Verilog language etc. that may be executed. When generating hardware code debug code generation module may introduce further functionality to implement debugging information e.g. break point behavior for example because there is no concept of sequential execution in hardware code . In one example debug code generation module may introduce logic to prevent execution of a particular set of high level function blocks of functional model .

Hardware code unlike software code may execute concurrently and not sequentially. This may imply that it is not possible to halt execution after a certain operation performs e.g. when a multiplication is executed but before a sum that uses the result of the multiplication is execute . Additionally the user may not desire to halt or break the entire hardware execution but only one section or module of it. To handle this circumstance debug code generation module may generate additional logic to effectively halt execution so that the workings can be examined or debugged. For instance the generated HDL code could when a break condition is true may latch values of input and output signals and may disable execution of a relevant section. At this point by making the input output and designated internal sections available via a software portion or other means it may be possible for the user to perform debugging steps. Since the code is generated from a high level view the user may not have to specify the mechanism but rather may indicate a desire to debug. Debug code generation module may automatically insert the additional logic to implement the debugging functionality. In some implementations different additional simpler or more complex conditions can also be satisfied by this mechanism. For example when a break condition is satisfied a counter may start decrementing down from a number. When the counter reaches zero a latch operation and a disable operation may be triggered. This may allow debug code generation module to halt the number of clock steps after the break condition has been satisfied.

In some implementations these operations may be executed concurrently on hardware and not on a software based simulator e.g. which may emulate concurrency via sequential operations . This may permit use of physical input and output data and may provide improved execution performance but may not require advanced knowledge by the user.

In one example implementation debug code generation module may align hardware code sequentially in line with hardware code . When debug code generation module generates hardware code debug code generation module may not optimize out variables that have been specified by the debugging information. For example b 2 a and a 3 may normally be optimized to b 6 but if a or b is a variable to monitor debug code generation module may not optimize out a or b.

Alternatively or additionally as shown in debug code generation module may generate software code based on functional model the debugging information and or a language selected by a user e.g. as shown in . In one example software code may include software code e.g. code in the C language the Java language etc. that may be executed after being compiled. Generating debugging information for functional model may be more straightforward for software code than for hardware code because debug code generation module may know exactly where debugging e.g. a break point should occur in functional model . Debug code generation module may know what element e.g. block of functional model is associated with the break point and which line of software code corresponds to the break point. Debug code generation module may provide traceability information between functional model and software code . In one example one break point may end up in multiple lines of software code e.g. a block of functional model may execute an output an update a derivative method etc. that are separate lines of software code .

Returning to process may include executing the generated computer code block and generating debugging data based on the executed generated computer code block . For example TCE may execute computer code and may generate debugging data based on the execution of computer code . The debugging data may include data generated based on the debugging information associated with functional model . For example if the debugging information specifies monitor variable A in functional model the debugging data may include identified values of variable A over time. In one example the debugging data and additional debugging information in computer code may be related to the debugging information of functional model . The additional debugging information in computer code may be added by debug code generation module and may not be provided by the debugging information of functional model .

In one example TCE may execute one or more portions of computer code in a simulator an emulator etc. Alternatively or additionally TCE may execute one or more portions of computer code on a target hardware component e.g. an ASIC a FPGA a CPU a GPU etc. . As described above in connection with computer code may include hardware code and or software code . Computer code may be manually executed and or may be automatically generated e.g. by debug code generation module from all or a portion of functional model .

In one example implementation TCE may perform unified debugging of hardware code and software code by simultaneously debugging functional model and computer code e.g. executing computer code . For example debug code generation module may step through a list of blocks lines variables etc. of functional model and may trigger execution of the list of blocks lines variables etc. in computer code . TCE may display functional model in a debug mode and computer code in the debug mode either simultaneously or in an alternating manner. TCE may enable traceability of the debugging between functional model and computer code . For example TCE may enable debugging traceability from functional model to computer code by tracing from a block line variable etc. in functional model to a line variable etc. in computer code . Alternatively or additionally TCE may enable debugging traceability from computer code to functional model by tracing back from a line variable etc. in computer code to a block line variable etc. in functional model . Such traceability may be visually presented to the user via annotations highlighting colored text etc.

As further shown in process may include storing and or outputting the generated debugging data block . For example TCE may store and or output e.g. provide for display the generated debugging data. If the debugging info specifies a test point e.g. a signal to monitor TCE may store and or output values of that signal periodically e.g. every clock cycle . In some implementations when computer code is generated TCE may provide a user interface as shown in . User interface may enable the user to view a portion of functional model in a side by side relation to a portion of computer code . This may aid the user in debugging one or more portions of functional model such as portion of functional model . Portions and shown side by side may capture the same functionality and portion e.g. a code pane may be automatically generated e.g. with the debugging information from portion e.g. a model pane .

In one example implementation the debugging information of functional model may include a conditional break point in functional model . The conditional break point may be specified as at least one of a variable value conditional break point that specifies a point at which to halt execution of computer code when a particular variable value meets a particular condition a time conditional break point that specifies a point at which to halt execution of computer code based on a particular time based condition and or a counter break point that specifies a point at which to halt execution of computer code based on a particular value of a counter.

When computer code includes hardware code executing computer code based on the debugging information may include identifying during execution of computer code a break point indicated by the debugging information. The break point may be associated with at least one of an input or an output of a particular functional block of functional model . Execution of computer code may be halted based on identifying the break point. Halting execution of computer code may include holding a value constant while halting execution of computer code where the value is associated with the at least the input or the output of the particular functional block.

Although show example information that may be provided in user interfaces in other implementations the user interfaces of may include less information different information and or additional information than depicted in .

Systems and or methods described herein may enable a user to define debugging information in a high level programming language and may rewrite the debugging information to a lower level programming language so that debugging may occur in the lower level programming language. In one example implementation the systems and or methods may provide unified debugging of an application which is implemented in a combination of declarative programming languages and imperative programming languages. In other words depending on the application the high level programming language may be converted into a combination of descriptive languages imperative languages or either of these languages. The systems and or methods may provide a unified interface for debugging the application independent of the final form of the application which may be a combination of hardware code compilable software code as well as interpreted code that executes in conjunction with an executive and need not be compiled.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

For example while series of blocks have been described with regard to the order of the blocks may be modified in other implementations. Further non dependent blocks may be performed in parallel.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an application specific integrated circuit ASIC or a field programmable gate array FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

