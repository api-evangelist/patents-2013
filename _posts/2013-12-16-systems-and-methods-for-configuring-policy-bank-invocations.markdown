---

title: Systems and methods for configuring policy bank invocations
abstract: Systems and methods for configuring and evaluating policies that direct processing of one or more data streams are described. A configuration interface is described for allowing users to specify object oriented policies. These object oriented policies may allow any data structures to be applied with respect to a payload of a received packet stream, including any portions of HTTP traffic. A configuration interface may also allow the user to control the order in which policies and policy groups are executed, in addition to specifying actions to be taken if one or more policies are undefined. Systems and methods for processing the policies may allow efficient processing of object-oriented policies by applying potentially complex data structures to unstructured data streams. A device may also interpret and process a number of flow control commands and policy group invocation statements to determine an order of execution among a number of policies and policy groups. These policy configurations and processing may allow configuration and processing of complex network behaviors relating to load balancing, VPNs, SSL offloading, content switching, application security, acceleration, and caching.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09450837&OS=09450837&RS=09450837
owner: CITRIX SYSTEMS, INC.
number: 09450837
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20131216
---
The present application claims priority to and is a continuation of U.S. Non provisional application Ser. No. 11 685 180 entitled Systems and Methods For Configuring Policy Bank Invocations and filed on Mar. 12 2007 which is incorporated herein by reference in its entirety for all purposes.

The present invention relates to computer networking technologies. Specifically the present invention relates to systems and methods for configuring and applying policies and settings in network devices.

Network devices and clients may provide a number of complex functions with respect to network traffic. Among other functions network devices may provide load balancing application security content switching SSL offloading acceleration and caching. However as the number and complexity of the functions provided by network devices grows the complexity and amount of configuration required for a network device may similarly increase. Further improper or suboptimal configuration of a network device may result in decreased performance network errors application incompatibility and weakened security.

Many network devices may utilize a policy framework to control network device functions. In these frameworks a policy may specify a rule and an action which dictates a behavior under certain conditions. For example with HTTP traffic a policy framework may allow a user to configure device behavior based on content within the HTTP stream. These policies may become complex depending on the content to be analyzed and the behaviors sought. Thus there exists a need for a policy framework which allows a user to apply structure to network traffic for the purpose of writing policies to direct device behavior. There similarly exists a need for a network device which can then implement such structured policy expressions in an efficient manner.

In addition as the number and complexity of network device functions grow the number of policies required for their configuration may also grow. With an increase in the number of policies there also exists a need for specifying and implementing processing orders among policies and groups of policies.

Further some desirable policies used in network devices may not always have defined results. For example a policy may specify behavior in response to a given field of an HTTP request but may be undefined in cases where the field is not present or the field has an unexpected value. While it may be possible in some cases to write policies that are always defined this may require additional policies or more complex policies and may increase administrative overhead. Thus there exists a need for configuration systems which allow a user to specify one or more actions for the case in which a policy is undefined.

The present invention is directed towards systems and methods for configuring and evaluating policies that direct processing of one or more data streams. A configuration interface is described for allowing users to specify object oriented policies. These object oriented policies may allow any data structures to be applied with respect to a payload of a received packet stream including any portions of HTTP traffic. A configuration interface may also allow the user to control the order in which policies and policy groups are executed in addition to specifying actions to be taken if one or more policies are undefined. Systems and methods for processing the policies may allow efficient processing of object oriented policies by applying potentially complex data structures to unstructured data streams. A device may also interpret and process a number of flow control commands and policy group invocation statements to determine an order of execution among a number of policies and policy groups. These policy configurations and processing may allow a user to efficiently configure complex network behaviors relating to load balancing VPNs SSL offloading content switching application security acceleration and caching.

In one aspect the present invention relates to systems and methods of configuring a policy of a network device with an object oriented expression to specify structure in a payload of a packet stream received by a network device In one embodiment the method comprises providing a configuration interface for configuring a policy for a network device receiving via the configuration interface an expression for the policy the expression identifying i an object class to apply to a portion of the payload of a packet stream and ii a member of the object class and receiving via the configuration interface information identifying an action for the policy the action to be taken based on an evaluation of the expression.

In a second aspect the present invention relates to systems and methods for applying object oriented expressions in a policy to specify structure in a payload of a packet stream received by the appliance. In one embodiment a method comprises identifying by an appliance a policy to evaluate with respect to a payload of a received packet stream the policy specifying i an object class to apply to a portion of the payload of a packet stream ii a member of the object class and iii an action selecting by the appliance a portion of the payload identified by the object class determining by the appliance a value for the member of the object class and taking in response to the determined value the action. In another embodiment a method comprises identifying by an appliance a policy comprising an object oriented expression to evaluate with respect to a payload of a received packet stream assigning by the appliance values to a data structure specified by the object oriented expression based on a portion of the payload performing by the appliance an evaluation of the expression based on the assigned values and taking in response to the evaluation an action specified by the policy. Corresponding systems may include a packet processor for receiving packet streams and a policy engine for evaluating one or more object oriented policies and taking associated actions.

In a third aspect the present invention relates to systems and methods for applying object oriented expressions in a policy to specify structure in a payload of a packet stream received by the appliance. In one embodiment a method comprises identifying by an appliance a policy comprising an object oriented expression to evaluate with respect to a payload of a received packet stream assigning by the appliance values to a data structure specified by the object oriented expression based on a portion of the payload performing by the appliance an evaluation of the expression based on the assigned values altering in response to the evaluation a portion of the received packet stream and transmitting by the appliance the altered packet stream. Corresponding systems may include a packet processor for receiving and forwarding the packet stream and a policy engine for evaluating one or more object oriented policies and taking associated actions.

In a fourth aspect the present invention relates to systems and methods for configuring and or processing a policy used by a network device by specifying an action to be taken in the event an element of the policy is undefined. In one embodiment a method comprises providing a configuration interface for configuring a policy of a network device identifying by the configuration interface a policy comprising a first action to be taken based on an evaluation of an expression receiving via the configuration interface information identifying a second action for the policy the second action to be taken if an element of the policy is undefined. In another embodiment a method of applying a policy specifying an action to be taken in the event an element of the policy is undefined comprises identifying by an appliance a policy to evaluate with respect to a payload of a received packet stream the policy specifying i an expression ii a first action to be taken based on an evaluation of the expression and iii a second action to be taken if an element of the policy is undefined determining by the appliance an element of the policy is undefined with respect to the payload and taking by the appliance in response to the determination the second action. Corresponding systems may include a packet processor for receiving a packet stream and a policy engine for evaluating one or more policies and taking associated actions.

In a fifth aspect the present invention relates to systems and methods for configuring and or processing flow control among policies used in processing a packet stream. In one embodiment a method comprises providing a configuration interface for configuring a plurality of policies of a network device at least one policy of the plurality of policies comprising a policy identifier and receiving via the configuration interface information identifying a first policy of the plurality of policies the first policy identifying i a rule comprising a first expression and ii a first action to be taken based on an evaluation of the rule and receiving via the configuration interface information identifying a second policy of the plurality of policies to apply subsequent to the first policy if the rule evaluates to true. In another embodiment a method includes identifying by an appliance a plurality of policies to apply to a received packet stream at least one policy of the plurality of policies comprising a policy identifier processing by the appliance a first policy of the plurality of policies the first policy identifying i a rule comprising a first expression and ii a first action to be taken based on an evaluation of the rule and iii a second policy of the plurality of policies determining by the appliance based on an evaluation of the expression the rule evaluates to true and processing by the appliance in response to the determination the identified second policy. Corresponding systems may include a packet processor for receiving a packet stream and a policy engine for evaluating one or more policies and taking associated actions.

In a sixth aspect the present invention relates to systems and methods for configuring and or processing flow control among policy groups used in a network device processing a packet stream. In one embodiment a method comprises providing a configuration interface for configuring a plurality of policy groups for a network device identifying by the configuration interface a first policy of a first policy group the first policy specifying a rule comprising a first expression and receiving via the interface information identifying a second policy group to be processed based on an evaluation of the rule. In another embodiment a method comprises identifying by an appliance a first policy group to apply to a received packet stream processing by the appliance a first policy of the first policy group the first policy identifying i a rule comprising a first expression and ii information identifying a second policy group evaluating by the appliance the rule and processing by the appliance in response to the evaluation of the rule the identified second policy group. Corresponding systems may include a packet processor for receiving a packet stream and a policy engine for evaluating one or more policies and taking associated actions.

In a seventh aspect the present invention relates to systems and methods for configuring and or processing one or more application security profiles for a device each application security profile specifying a number of checks performing security functions related to an application. In one embodiment a method comprises providing a configuration interface for configuring an application security profile receiving via the configuration interface a first setting the setting specifying corresponding to a first check of the application security profile receiving via the configuration interface a second setting the second setting specifying corresponding to a second check of the application security profile identifying by the configuration interface a policy the policy specifying a rule comprising a first expression and receiving via the interface information identifying the application security profile to be processed based on an evaluation of the rule. In another embodiment a method may comprise identifying by an appliance a first policy to apply to a received packet stream the first policy specifying a rule comprising a first expression and identifying an application security profile evaluating by the appliance the rule processing by the appliance in response to the evaluation of the rule a first check specified by the application security profile and processing by the appliance in response to the evaluation of the rule a second check specified by the application security profile. Corresponding systems may include a packet processor for receiving a packet stream and a policy engine for evaluating one or more application security profiles and taking associated actions.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments of the present invention below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as servers or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office . In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliance is depicted. For example a first WAN optimization appliance is shown between networks and and s second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm 

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiments the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif. In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element nat comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identify specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

In some embodiments the policy engine may provide a configuration mechanism to allow a user to identify specify define or configure policies directing behavior of any other components or functionality of an appliance including without limitation the components described in such as vServers VPN functions Intranet IP functions switching functions DNS functions acceleration functions application firewall functions and monitoring agents . In other embodiments the policy engine may check evaluate implement or otherwise act in response to any configured policies and may also direct the operation of one or more appliance functions in response to a policy.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a min filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client a collection agent and or monitoring agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol. The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments the client agent includes a monitoring agent as discussed in conjunction with . The monitoring agent may be any type and form of script such as Visual Basic or Java script. In one embodiment the monitoring agent monitors and measures performance of any portion of the client agent . For example in some embodiments the monitoring agent monitors and measures performance of the acceleration program . In another embodiment the monitoring agent monitors and measures performance of the streaming client . In other embodiments the monitoring agent monitors and measures performance of the collection agent . In still another embodiment the monitoring agent monitors and measures performance of the interceptor . In some embodiments the monitoring agent monitors and measures any resource of the client such as memory CPU and disk.

The monitoring agent may monitor and measure performance of any application of the client. In one embodiment the monitoring agent monitors and measures performance of a browser on the client . In some embodiments the monitoring agent monitors and measures performance of any application delivered via the client agent . In other embodiments the monitoring agent measures and monitors end user response times for an application such as web based or HTTP response times. The monitoring agent may monitor and measure performance of an ICA or RDP client. In another embodiment the monitoring agent measures and monitors metrics for a user session or application session. In some embodiments monitoring agent measures and monitors an ICA or RDP session. In one embodiment the monitoring agent measures and monitors the performance of the appliance in accelerating delivery of an application and or data to the client .

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Referring now to an example of a portion of an object model used to facilitate processing of HTTP data is shown. In brief overview object classes are defined for a number of elements in the HTTP protocol. Defined classes include a request response hostname url query cookie and text . Each class is defined to include a number of fields and or methods which may include or return objects corresponding to other classes or may include or return other data types such as integers.

Still referring to now in greater detail an object model may comprise a set of defined object classes which allows a computing device to specify and manipulate data and or a set of defined object classes which allows a user of a computing device to direct the operations of the computing device. An object model may have any properties associated with object oriented design or programming including without limitation inheritance abstraction encapsulation and polymorphism. Examples of object models that may be used in conjunction with the object oriented expressions described herein include without limitation the Java object model the Component Object Model COM and the HTML Document Object Model DOM and any portion or combinations of portions of those models. In some embodiments an object model or a portion of an object model may correspond to a protocol. For example an object model may be created to represent HTTP communications with the object model providing classes and methods for accessing and manipulating HTTP communications. Or an object model may be created to represent TCP IP UDP ICA or SSL communications. Or an object model may be created to represent an appliance with the object model providing classes and methods for accessing and manipulating state information relating to an network appliance .

An object class may comprise an abstract description of an object and any methods associated with the object. An object a particular instance of a class may represent any type or form of data process or protocol. Example objects may include without limitation strings text numbers lists protocols data streams connections devices data structures systems and network packets.

An object class may have a number of members. A member of an object class may comprise any field method constructor property or variable specified by the object class. In some embodiments a member of an object class may comprise an object of a second object class. For example in the embodiment shown the object class http request contains a method getUrl which returns a url object. In other embodiments a member of an object class may be a primitive data type of an underlying architecture such as an integer floating point number byte array or boolean variable. For example the class cookie contains a field count which is an integer identifying the number of name value pairs in the list. In still other embodiments a member of an object class may comprise a constant. In still other embodiments a member of an object class may comprise a method.

In some cases a member of an object class may be defined in the object class definition. In other cases a member of an object class may be defined in a parent class of the object class. In still other cases a member of an object class may be defined in a parent of the object class and modified in the class definition for the object. For example both the cookie and query classes inherit the methods getName and getValue from their parent class list nv which is a class representing lists of name value pairs.

In the embodiment shown the http request class contains a number of methods which may be used to process an HTTP request. Fields and methods me be provided to identify and manipulate any portion or portions of an HTTP request including without limitation the URL cookie body content type date version and hostname. In one embodiment a method or methods may be provided to determine whether a given data stream is a validly formatted HTTP request. A similar class and or methods may also be provided for an HTTP response.

The url class shown may comprise any number of fields and methods for operating and identifying a url. In one embodiment the url may contain methods for parsing one or more of a hostname port server domain file suffix path and query. In one embodiment the url may be a subclass of a general text object which may allow the url to be treated as unformatted text. For example the url class may be a subclass of the text class . In one embodiment the url class may comprise methods for rewriting all or a portion of the url. In some embodiments the url class may be applied to any portion of text. For example the url class may comprise a constructor which accepts a string of text and creates a url object by parsing the string. In these and other embodiments the url class may comprise a method for indicating whether a URL is a properly formatted URL. In some embodiments a URL class may comprise a method for identifying one or more URLs in a text string. For example a static method findURL might be provided which returns a list of validly formatted URLs in a given text sequence. This method could be used for example to find a number of URLs contained in the body of an HTTP response. The url class may then provide methods for modifying one or more of the found URLs.

The cookie class may comprise any number of fields and methods for identifying and processing a cookie. In one embodiment the cookie may be an HTTP cookie. In the embodiment shown the cookie class represents a cookie as a list of name value pairs. The getValue method in response to receiving a number n may return a text object of the nth value in the list. The getName method in response to receiving a number n may return a text object of the nth value in the name. In other embodiments a cookie may be represented using any other syntax or data type including without limitation a string or linked list. In some embodiments the cookie class may provide a method for inserting and or altering a cookie. In other embodiments a HTTP response or request object class may provide a method for inserting or modifying a cookie contained in a request or response.

The text class shown may comprise any number of fields and or methods for operating on a text sequence. A text sequence may comprise any sequence of bytes capable of being treated as characters. In some embodiments a text object may comprise a discrete sequence of bytes. In other embodiments a text object may comprise one or more bytes of a byte stream. In these embodiments a text object may be used to operate on portions of the byte stream even if the entire stream has not been received. Methods that may be used in conjunction with text objects may include without limitation comparisons truncations searches sorts and regular expression matching and searching. For example a method may be provided to determine whether a given substring is found within a text object. Or for example a method may be provided to determine a portion of a text object preceding a special character. Or for example a method may be provided for identifying a sequence of text following a given regular expression.

In some embodiments methods may also be provided for formatting or confirming formatting of text so that it can be processed by other classes and or methods. For example a method may be provided that ensures a text object may be treated as XML. This method might check that the text object conforms to proper XML formatting and does not contain any malicious or inadvertent errors. Or for example a similar method may be provided to determine whether a text sequence can be treated as a URL. This method may for example find and replace any characters which need to be replaced by escape sequences so that the text object conforms to proper URL formatting conventions.

An object model may be implemented using any physical data structures or other underlying physical implementations. In some embodiments a number of objects may access the same object in physical memory to perform the methods associated with each object. In one embodiment the object model shown may be implemented so that a plurality of object instances operate on a underlying data stream without needing to produce separate copies of the data stream for each object instance. To give a detailed example with respect to the object model shown an appliance may receive an HTTP communication from a client and store it in memory. The appliance may then execute identify a http request object and then call functions in the http request object class to obtain a url and or a cookie object. The appliance may then call addition functions or reference fields in the url and cookie objects. Some or all of these methods may operate by parsing some or all of the underlying data stream and then returning references to portions of the stream. For example a url object may store the beginning and ending memory locations of the url in the underlying data stream. Each method of the url class may then parse and or modify portions of data within the identified memory locations. In this manner the appliance may be able to process a data stream using an object model without having to maintain additional copies of data in the data stream.

In other implementations one or more additional copies of some or all of a data stream may be made with respect to some objects. These object may perform operations on a copy of a portion of data stream and as may be appropriate update the data stream with any changes made to the copy.

The object model shown and others may specify object classes and data structures that can be applied to any input stream. For example the object model shown may be used to treat any input stream as an http request object and then utilize any of the functionality provided by the http request object class. Further although the object model shown relates to HTTP data other object models may be used to provide functionality with respect to TCP SSL or ICA streams. In some embodiments an object model and implementation may be provided such that an appliance may select from a number of object models to process a given data stream. For example upon receiving a given data stream an appliance may determine that the data stream is an ICA stream and apply an appropriate object model for processing the ICA stream. However if HTTP data is transmitted within the ICA stream the appliance may also apply an HTTP object model such as the one shown for processing the HTTP data. In this way an appliance may specify any structure or structures to apply to a received byte stream.

Referring now to an example documentation screen for an object class representing a URL is shown. In brief overview the documentation screen comprises a partial list of a number of methods and a constructor for the http url t class which represents a URL. The documentation screen indicates a number of methods are implemented in the http url t class and a number of methods implemented in the parent class text t. These classes may correspond to the url and text classes described with respect to .

Referring now to a number of example object oriented expressions for use in a policy engine are shown. In brief overview an object oriented expression contains a number of object classes which may correspond to protocols protocol objects data structures and data types. An object oriented expression may specify a member of an identified object which may comprise methods data types or other object classes. A number of example object oriented expressions are shown. These object oriented expressions may be used by a network device in performing any function including without limitation analyzing traffic flows identifying system properties load balancing content switching and application security.

Still referring to now in greater detail object oriented expressions may comprise any expression which allows the specification of data and functions with respect to an object model. A first example object oriented expression identifies an object class and a member of the object class. In the syntax of the object oriented expressions shown a member of an object is designated by a period following the object and then a string naming the member of the object. For example HTTP.REQ identifies the member method named REQ for the HTTP object. In this example method names may be denoted with all uppercase. In other embodiments any other syntax may be used to specify object oriented expressions. Examples of syntaxes that may be used include without limitation the syntax or a combination of syntaxes of ActionScript Java JavaScript C Visual FoxPro VB.Net C Python Perl PHP Ruby and or Objective C.

In the example object oriented expression the expression identifies the protocol HTTP. In one embodiment HTTP may correspond to an object class an abstract object class a static object class or any other component of an object model. In some embodiments HTTP may be a parent class of a number of object classes used to represent and process HTTP communications. In other embodiments HTTP may be a static class or method comprising one or more objects and or methods relating to the representation and processing of HTTP communications. For example the expression HTTP.REQ may return an object corresponding to an HTTP request within a data stream. In one embodiment this object may be an instance of an object class such as the http request class discussed in . In the embodiment shown the expression may return a boolean value indicating whether joe is contained in a value named id in the query portion of a URL of an HTTP request.

The example object oriented expression provides an example of explicit typecasting which may be used to specify structure with respect to arbitrary portions of a data stream. In the example the string returned from a HTTP request header item corresponding to eh Accept Language is explicitly typecast into a list. The TYPECAST TO LIST method accepts as an argument the list delimiter and returns a list based on the delimiter. The expression then identifies a CONTAINS method to determine whether one of the list elements is en . This example may be used to configure a device to detect whether an HTTP request indicates the requestor accepts English as a language. In some embodiments an object model and expression syntax may allow a data stream to be explicitly typecast into any object class. This may allow a user configuring a device to specify arbitrary structures to be applied with respect to a data stream. This may in turn allow a user to leverage knowledge of a protocol or convention to format input streams in a manner convenient for processing.

As another example of an explicit typecasting the expression HTTP.RES.HEADER Location .TYPECAST TO URL.QUERY may be used to typecase an element of the HTTP header so that it is treated as a URL. By typecasting text elements to a URL the URL processing methods may be made available to analyze content in any portion of a network traffic stream.

In some embodiments two or more object oriented expressions may be used in conjunction with an operator such as AND OR NOT GREATER THAN or LESS THAN to produce a value. For example in expression two expressions which may return boolean values are joined with an OR operator. The result of the combined expression will be the OR of the values returned by the two expressions. In other embodiments operators may work with respect to any objects or data types including without limitation integers floating point numbers and strings.

Though the specific examples shown reflect object oriented statement in the context of an HTTP object model object oriented statements and models may be used to access any portions or portion of network traffic passing through a device. In addition object oriented statements and models may be used to access system properties of a device or properties of a given connection or connected device.

In one embodiment an object oriented expression may be used to base network device behavior on any properties of the device. For example the expression SYS.TIME.WITHIN time1 time2 might be used to base behavior based on a time of day or day of year. Or for example the expression SYS.CONNECTIONS.SSL OPEN.COUNT might be used to return a count of the total number of SSL connection are currently open with a system. In both of these examples the SYS object represents the system executing the policy and a number of methods and or fields are provided within the SYS object to access information about system status.

In another embodiment an object oriented expression may be used to base network device behavior on any properties of a client connected to the device. In one embodiment a CLIENT object might be provided to represent the properties of a client sending or receiving a currently processed data stream. For example the expression CLIENT.IP.SRC.IN SUBNET 10.100.202.0 24 might be used to return a true false value based on whether a client corresponding to a data stream is in a given subnet. Or for example the expression CLIENT.AGENT.VERSION NUM might be used to retrieve the version number of a client agent executing on the client. Or for example the expression CLIENT.VLAN.VIRTUAL IP might be used to access the virtual IP address of a client.

In still another embodiment an object oriented expression may be used to base network device behavior on any property of a server connected to the device. For example SERVER.METRICS.HTTP.AVG RESP TIME might be used to access the average response time of a server for generating HTTP requests. Or for example SERVER.ICA.MAX CONNECTIONS. might be used to identify a maximum number of ICA connections specified for a given server. Or for example SERVER.ETHER.HEADER might be used to identify the ethernet packet headers of a given connection to a server.

In some embodiments an object oriented expression may be used to buffer a certain amount of a communication before or during processing. For example an appliance serving as a proxy for HTTP communications may wish to base some behavior on an initial part of the response. In this case it may be desirable to only buffer a portion of the response so that end to end response time does not unduly suffer. In one embodiment an expression may specify a number of bytes to receive before an expression is evaluated. For example the expression HTTP.REQ.getBody 5000 .TYPECAST TO NV LIST .getValue id may be used to buffer the first 5000 bytes of an HTTP request body and then treat those bytes as a name value pair list. The expression then specifies to get the value corresponding to the name id. 

Referring now to an example of a policy which may be used in configuring a device is shown. In brief overview a policy comprises an expression which may be evaluated in the context of a rule . A policy may also comprise an action which specifies an action to be taken if the rule is satisfied.

Still referring to now in greater detail a policy may be used to configure a device. In some embodiments a policy may be used to configure any device including without limitation a WAN optimization appliance an SSL VPN appliance an acceleration appliance a caching appliance a load balancing appliance and or a device providing any combination of features of those devices. In other embodiments a policy may be used to configure a client agent or server agent.

In some embodiments a policy engine executing on a device may interpret evaluate and or execute policies with respect to functions of the device. For example a policy engine may execute on an appliance and interpret and execute a number of policies directing other actions and modules of the appliance including without limitation an SSL VPN module an Intranet IP module a switching module a DNS module an acceleration module an application firewall module and or a monitoring agent . In some embodiments a single set of policies may be provided for directing a plurality of appliance functions. In other embodiments a separate set of policies may be used to configure each of a number of appliance functions. Policies may be stored in any manner within a device. In some embodiments a policy may be compiled before it is executed on a device. In other embodiments a policy may be interpreted at runtime.

A policy may comprise one or more expressions . An expression in a policy may be evaluated by a device at runtime with respect to the objects specified in the expression to produce a value. An expression may be any type of expression. In one embodiment an expression may be an object oriented expression. An expression may be used anywhere within a policy. In some embodiments an expression may be specified in a rule of a policy. In other embodiments an expression may be specified in an action of a policy.

A policy may also comprise a rule . The rule may be evaluated at runtime with respect to objects methods and operators identified in the rule to produce a result. Depending on the result the appliance may then execute one or more actions specified in the policy. For example if a rule evaluates to true an appliance may execute the action associated with the rule. Or if a rule evaluates to false and appliance may not execute the action associated with the rule. In some embodiments a rule may comprise a single expression. In other embodiments a rule may comprise a plurality of expressions connected by operators.

A policy may also comprise an action . An action may specify any action to be taken. Examples of actions may include without limitation blocking or allowing a data stream forwarding a data stream or object to a given server or device storing an object in memory altering a portion of a data stream altering one or more system properties performing an acceleration technique and performing a compression technique. In the policy shown upon determining that an HTTP request URL contains a user identifier of JOE the policy dictates an action of forwarding the request to a specified server. In some embodiments an action may comprise an expression to be evaluated at runtime

Referring now to an example of an expression input screen for a user to input an object oriented expression is shown. In brief overview an expression input screen comprises a number of pull down menus which allow a user to specify members of classes to include in a created expression. The screen may also comprise a display where a user may be able to see and or edit a text version of the expression. The screen may further comprise a display which displays to the user information corresponding to one or more objects.

Still referring to now in greater detail an expression input screen allows input of object oriented expressions by a user in any manner. In the embodiment shown pull down menus may be used to select objects. In other embodiments any other input elements may be used to accept an object oriented expression including without limitation text fields menus buttons checkboxes and toolbars. In some embodiments input elements of a screen may provide functionality for a user to create and verify valid expressions. In some embodiments the pull down menus may be automatically populated with members of the previous specified class. For example upon a user selecting URL in the menu shown the next pull down menu may be populated with the members of the URL object class. In this way a user may be able to efficiently navigate class hierarchies and object models to generate an expression. In other embodiments syntax highlighting auto completion and or auto recommendation may be used to enable a user to easily create and verify expressions. For example a user may be provided with a text field to compose an expression wherein the text field highlights in red any unrecognized objects or syntax. Or for example a user may be provided with a text field which upon a user typing an object class the text field displays a list of members of the object class.

In some embodiments an expression input screen may display to the user information about any objects or expressions. In some embodiments the screen may display the properties and or recommended uses of a given class. In one embodiment the screen may be integrated with or used alongside one or more class documentation screens such as depicted in .

Referring now to an example of a configuration interface screen which may be used to configure a plurality of policies corresponding to one or more network devices is shown. In brief overview a screen displays a list of network device functions with folders containing one or more policies policy groups or settings related to the functions. In the example shown the screen displays folders for system policies network policies DNS policies SSL policies SSL offload policies compression policies integrated caching policies protection features load balancing policies content switching policies cache redirection policies global load balancing policies SSL VPN policies and application security policies. In some embodiments a number of policies policy groups and or settings corresponding to a function may be referred to as a profile.

Still referring to now in greater detail a configuration interface may allow a user to specify policies or settings related to one or more network devices. In some embodiments a configuration interface may be used to configure an appliance including without limitation a VPN appliance acceleration appliance or WAN optimization device. In some embodiments a single configuration interface may allow a user to configure a plurality of appliances. For example a user may be able to specify one or more appliances to apply a given policy policy group or setting to. In one embodiment a user may be able to specify that a number of appliances share a configuration profile. For example a user may configure a cluster of appliances such that each appliance has the same policy settings. In other embodiments a configuration interface may be used to configure one or more client agents .

A configuration interface may comprise any means of collecting input including without limitation GUIs and command line interfaces. A configuration interface may comprise one or more expression input screens . In one embodiment a configuration interface may read configuration information from a file. In another embodiment a configuration interface may receive configuration information over a network. For example a configuration interface may comprise means for a user to download one or more policies settings policy groups or profiles. These may comprise commonly used policies or settings for a number of applications.

A configuration interface may obscure any aspects of a policy policy group or configuration from a user. For example a configuration interface may fill in any portions of a policy or policy group automatically or by default such that the user does not need to actively configure those portions. For example a configuration interface may provide a default list of actions where the user only needs to specify a list of rules under which the actions should be taken. The syntax and implementation of the actions may be completely or partially hidden from the user.

Referring now to an example of using a computer to configure an appliance using a configuration interface is shown. In brief overview a configuration interface comprising an expression input screen is displayed on a client . The client transmits the configuration data received via the configuration interface to the appliance .

Still referring to now in greater detail a configuration interface may be displayed on a client in any manner. In some embodiments a configuration interface may comprise an application executing on the client. In other embodiments a configuration interface may comprise a web page displayed by the appliance. In still other embodiments a configuration interface may comprise a web page displayed by a third device.

A configuration interface may comprise any means for a user to input configuration data including without limitation text fields menus buttons windows checkboxes and drag and drop functions. In some embodiments a configuration interface may comprise an expression input screen . In other embodiments a configuration interface may also provide screens for a user to input one or more policies. In some embodiments these screen may be integrated with one or more expression input screens.

A configuration interface may transmit configuration information to an appliance by any means. The configuration information may be transmitted via any protocol or protocols. In one embodiment user inputted configuration information may be saved to a file on the client and then the file may be transmitted to the appliance. In other embodiments a user may input information into a web page or a web application which may then transfer the configuration information to the appliance. In some embodiments the configuration information may be compiled formatted or otherwise processed before it is transmitted to the appliance . In still other embodiments the configuration information may be compiled formatted or otherwise processed after it has been received by the appliance.

Referring now to an embodiment of a method of configuring an object oriented policy of a network device with an object oriented expression to specify structure in a payload of a packet stream received by a network device is depicted. In brief overview a configuration interface is provided by a device in order to configure a policy for a network device step . The device receives via the configuration interface an expression for the policy step . The device receives via the configuration interface user information identifying an action to be taken based on an evaluation of the expression step .

Still referring to now in further detail a configuration interface may be provided for configuring a policy for a network device in any manner step . In some embodiments the configuration interface may comprise a command line interface. In other embodiments the configuration interface may comprise a graphical user interface. The configuration interface may comprise one or more of a drag and drop interface a list selection interface or a syntax highlighting interface. In some embodiments the configuration interface resides on a client device . In other embodiments the configuration interface executes on the network device . In some embodiments a device providing the configuration interface is connected to an appliance by a network . In some embodiments the configuration interface is a webpage. In some other embodiments the configuration interface is a webpage that resides on the network device . In other embodiments the configuration interface is a webpage that resides on a separate server .

A device receives via the configuration interface an expression for the policy specifying an object class to apply to a portion of the payload of a packet stream and a member of the object class step . In some embodiments the expression may be received via an expression input screen . In one embodiment the expression identifies a portion of text within a packet stream. In certain embodiments the expression specifies a protocol and may also specify one or more methods and fields related to the protocol. For example the expression may specify a protocol of HTTP HTML FTP SMTP ICA and or SSL. The specified protocol may then be applied to parse a data stream according to the protocol.

The received expression may specify any object class. For example the received expression may specify any of the object classes described in the object model of . An object class may be specified in any manner. In one embodiment specifying an object class may comprise specifying an instance of the object class. For example the expression HTTP.REQ may specify an instance of the http request object from . In some embodiments the received expression may comprise an object oriented expression.

The received expression may also specify any member of an identified object class. The member may comprise any object data type or method. In some embodiments the member comprises a field. In other embodiments the member may comprise a field corresponding to a second object class. In some embodiments the member of the object class comprises a method. In some embodiments the member of the object class is inherited from a parent class of the object class. The member of the object class may correspond to an HTTP request or response. In other cases a member of the class may be a uniform resource locator URL or a cookie.

In other embodiments the expression comprises an explicit typecasting. The explicit typecasting may be used to specify an object class to use with respect to a field or returned object. For example a field containing a number may be explicitly typecast to an alphanumeric string in order to execute a string comparison. Or for example a stream of bytes may be typecast to a list with a given delimiter. Or for example a data stream may be typecast as corresponding a particular protocol or protocol object.

A device may receive via the configuration interface information that identifies an action for the policy the action to be taken based on an evaluation of the expression step . In some embodiments the action may comprise an object oriented expression. In certain embodiments the method performs the action in order to provide load balancing content switching application security application delivery network acceleration or application acceleration. For example in order to accelerate network activity the method may evaluate an expression to determine the location of the user and based on the user s location route the user s traffic to the geographically closest server or servers . In some embodiments a policy may perform security acceleration load balancing or content switching functions by rewriting a URL in either the HTTP request or response. For example an action may specify to modify the HTTP request so that the URL refers to a specific server or server farm . In some cases the action received from the configuration interface may be an expression for no action or for a default action.

Referring now to an embodiment of a method of applying by a device object oriented expressions in a policy to specify a structure in a payload of a packet stream received by an appliance is depicted. In brief overview an appliance identifies a policy comprising an object oriented expression to evaluate with respect to a payload of a received packet stream step . The appliance assigns values to a data structure specified by the object oriented expression based on a portion of the payload step . The appliance performs an evaluation of the expression based on the assigned values step and takes in response to the evaluation an action specified by the policy step .

Still referring to now in further detail an appliance may identify a policy to apply to a data stream any manner step . In some embodiments an appliance may read a policy from one or more configuration files. In other embodiments a policy engine in an appliance may store a number of policies in memory. In still other embodiments an appliance may identify a policy in response to a type or protocol of the data stream. For example an appliance may have a set of policies applied to all incoming TCP streams. Or for example an appliance may identify one or more policies that are applied to SSL streams. In one embodiment an appliance may identify a policy based on a sender or a recipient of a data stream. For example a VPN appliance may have a set of policies which are applied to incoming connection requests from clients. Or an acceleration device may identify one or more polices to apply to a HTTP stream from a server . In some embodiments the policy may comprise a policy received via a configuration interface .

The packet stream may be received in any manner and from any source. In some embodiments the packet stream may be transparently intercepted by the appliance. In other embodiments the appliance may receive the packet stream in the process of proxying one or more transport layer connections. The packet stream may comprise any type of packets including without limitation IP packets TCP packets UDP packets and ICMP packets. The packet stream may comprise any other protocol or protocols.

The identified policy may comprise an object oriented expression to evaluate with respect to the payload of a packet stream. The object oriented expression may comprise any type of object oriented expression and may specify one or more object classes fields and methods. In some embodiments the object oriented expression may comprise part of a rule. In some embodiments the expression may specify one or more objects corresponding to a client server HTTP protocol or the appliance.

The object oriented expression may be evaluated with respect to any payload of a packet stream. In one embodiment the expression may be evaluated with respect to the payload of a TCP or UDP stream. In another embodiment the expression may be evaluated with respect to an SSL stream. In still another embodiment the expression may be evaluated with respect to the payload of an ICA stream. The packet stream may be received from any source including without limitation a client server client agent server agent or a second appliance.

The appliance assigns values to a data structure as specified by the object oriented expression step . A data structure may comprise the physical representation of an object instance. In some embodiments the appliance may parse some or all of the received payload to assign the values. In other embodiments the appliance may perform any methods specified by the expression or included in an object model to assign values. For example with respect to the expression 

the appliance may assign values to an object corresponding each of the request header and comma delimited list specified. In some embodiments the assigning of values may comprise determining a portion or portions of the data stream corresponding to an object. In some embodiments the step includes applying by the appliance a class specified by the object oriented expression to a byte stream of the payload. For example if an expression specifies a URL class the appliance may assign a value to an underlying URL data structure by determining the starting and ending points of a URL within the received payload. These starting and ending points may then be stored in a URL data structure and used to perform any of the methods in the URL class. In some embodiments the appliance may assign values to a plurality of data structures specified by the object oriented expression. In one embodiment a policy engine may perform any functions related to the evaluation of a policy.

The appliance may perform an evaluation of the expression based on the assigned values in any manner step . In some embodiments the appliance may use one or more methods of an object class specified by the expression to perform the evaluation. In some embodiments the evaluation may produce a boolean value. In other embodiments the evaluation may produce an integer string or other object. The appliance may use the assigned values in any manner. In the URL example above the appliance after determining a starting and ending point for the URL may then use those values to perform any operations with respect to the URL. In some embodiments the appliance may then perform the getSuffix method referenced in which identifies a file type suffix of the requested URL. This method may also comprise determining a starting and ending point of the suffix in relation to the starting and ending point of the URL. The appliance may then use the starting and ending points of the suffix to perform any evaluations of the file suffix such as comparing it to the string .jsp to determine if the requested URL corresponds to a Java Server Page.

In some embodiments the appliance may evaluate a rule comprising the expression. In other embodiments the appliance may evaluate a rule comprising a plurality of expressions.

The appliance may then in response to the evaluation take an action specified by the policy step . In one embodiment the appliance takes an action if the result of the evaluation is a value corresponding to true. In another embodiment the appliance may take an action if the result of the evaluation is non zero. The action taken may be any action including without limitation any action relating to load balancing content switching application security application delivery network acceleration or application acceleration. In some embodiments the action may comprise a no action. 

In some embodiments the appliance may perform the action immediately following the evaluation. In other embodiments the appliance may perform the action subsequent to evaluating at least one other policy. In still other embodiments the appliance may perform the action after waiting a predetermined amount of time or waiting until a resource becomes available. In one embodiment the appliance may perform the action after receiving additional portions of the packet stream.

In some embodiments the appliance may then forward the received packet stream to one or more appliances servers clients or client agents. The appliance may perform any other network appliance functions with respect to the packet stream including without limitation acceleration compression and load balancing.

Now referring to a method in an appliance for applying object oriented expressions in a policy to specify structure in a payload of a packet stream received by the appliance is shown. In brief overview the appliance identifies a policy including an object oriented expression to evaluate with respect to a payload of a received packet stream step . The appliance assigns values to a data structure specified by the object oriented expression based on a portion of the payload step . The appliance also performs an evaluation of the expression based on the assigned values step . In response to the evaluation the appliance alters a portion of the received packet stream step and transmits the altered packet stream step .

Still referring to now in greater detail the appliance may identify a policy that specifies an object oriented expression to evaluate with respect to a payload of a received packet stream step . This step may be performed in any manner described herein.

The appliance may assign values to a data structure specified by the object oriented expression based on a portion of the payload in any manner step . This step may be performed in any manner described herein.

The appliance performs an evaluation of the expression based on the assigned values step . This step may be performed in any manner described herein.

In response to the evaluation the appliance may alter a portion of the received packet stream step . In some embodiments altering a portion of the received packet stream may comprise taking an action in response to the evaluation step . In some embodiments the portion of the packet stream that is altered is specified by a data structure identified by the object oriented expression. In other embodiments the portion of the packet stream that is altered is specified by a second object oriented expression. In some embodiments the portion of the packet stream to be altered may be specified by an object oriented expression in an action of the policy. In some embodiments the appliance may rewrite a URL in the body of an HTTP response or request. In other embodiments the appliance may rewrite a form field value in the packet stream. The form field that is altered may be a field in an HTTP request an HTTP response or any other field in an object that is part of the packet stream. In still another embodiment the appliance may alter one or more name value pairs contained in the packet stream. In some embodiments the appliance may rewrite a portion of the received packet stream to obscure or remove confidential data including without limitation personal identification numbers checking account routing numbers personal contact information social security numbers passwords and other confidential information.

To give a detailed example upon receiving an HTTP stream from a client destined to a server an appliance providing application security functions for the server may determine to apply a policy 

In this example the appliance may parse some or all of the HTTP stream to identify the portion of the stream containing the request and then the cookie within the request. The appliance may do this in any manner including maintaining one or more internal data structures with references pointers pointing to the areas of the stream corresponding to the request and cookie. The appliance may then identify the value of a username name value pair within the cookie and determine the whether the length of the value is greater than 20 characters. A length of over 20 characters may indicate an application error or a malicious attack such as an attempted buffer overflow attack. Upon determining the length is greater than 20 characters the appliance may then alter the value to void or any other signal which may notify the server receiving the stream that an inappropriate value was sent by the client. The appliance may use and or modify any internal data structures in order to alter the stream. The appliance may then forward the altered stream to the server. In other embodiments the appliance may simply block the stream from reaching the server upon detecting the potential overflow. In these embodiments the appliance may return an error message to the client.

In another embodiment the appliance may replace an entire HTTP response with a new response. For example if the appliance determines that a response contains confidential data in a form the appliance may replace the response with a response indicating an error or with a response comprising neutral content. In yet another embodiment an appliance may replace or rewrite an entire HTTP request or response header.

The appliance may then transmit the altered packet stream in any manner step . In some embodiments the appliance may forward the altered packet stream to a server or client designated as the recipient of the stream. In other embodiments the appliance may redirect the stream to an appliance server or client other than the intended recipient of the stream. The appliance may transmit the altered packet stream using any protocol or protocols including without limitation TCP IP UDP SSL and ICA.

Referring now to an embodiment of a method in an appliance for applying a policy specifying an action to be taken in the event an element of the policy is undefined is shown. In brief overview an appliance identifies a policy to evaluate with respect to a payload of a received packet stream where the policy specifies i an expression ii a first action to take based on the expression and iii a second action to take if an element is undefined step . The appliance determines that an element of the policy is undefined with respect to the payload step . In response to its determination that an element is undefined the appliance takes the second action step . Broadly speaking the method allows a policy to specify an action to be taken if an error or exception is encountered when the appliance attempts to evaluate the policy. In this manner the second action may be a fallback or error handling method.

Still referring to now in greater detail an appliance identifies a policy to evaluate with respect to a payload of a received packet stream where the policy specifies an expression a first action to take based on the expression and a second action to take if an element of the policy is undefined step . The appliance may identify the policy in any manner. In one embodiment the expression may be an object oriented expression. In another embodiment the expression may identify an object class to apply to a portion of the payload of a packet stream and a member of the object class. In another embodiment the expression specifies a protocol and may also specify one or more related methods and fields. The expression may identify any type of object and or object class. In some embodiments the expression may comprise one or more methods of an object class.

The packet stream may be received in any manner and from any source. In some embodiments the packet stream may be transparently intercepted by the appliance. In other embodiments the appliance may receive the packet stream in the process of proxying one or more transport layer connections. The packet stream may comprise any type of packets including without limitation IP packets TCP packets UDP packets and ICMP packets. The packet stream may comprise any other protocol or protocols.

The first action specified by the policy may comprise any action. In some embodiments the first action may comprise an action to be performed if the expression or a rule containing the expression evaluates to true. In some embodiments the action may relate to load balancing content switching application security application delivery network acceleration or application acceleration. In other embodiments either action may comprise to a no action or a default action.

The second action specifies an action to be taken if an element of the policy is undefined. An element of the policy may comprise any portion of the policy including without limitation one or more expressions rules or operators. An element may be undefined in any circumstance where an appliance cannot successfully assign a value to the element. In one embodiment an element may be undefined if the element results in a comparison of incompatible types such as for example determining whether an integer is greater than a list or a boolean value is equal to a string. In other embodiments an element may be undefined if the element results in one or more null values. For example if an expression attempts to access a username value within a URL object and the expression is applied to a data stream with a URL with no username value specified an operation with respect to the username may be undefined. In other embodiments an element may be undefined as a result of one or more improper typecasts.

In some embodiments the second action may have been specified by a user via a configuration interface. For example upon entering or viewing a policy in the configuration interface a user may be prompted to enter an action to be taken if the policy is undefined at runtime. In other embodiments the second action may comprise a preconfigured default second action. For example a group of policies may have a default action to take in the event of an undefined element. For example a group of policies enabling URL rewriting may have a default second action of not rewriting any URLs. Or a group of policies for performing load balancing may have a default second action of forwarding the packet stream to a designated backup server.

The appliance may determine if an element of the policy is undefined with respect to the payload in any manner step . In some embodiments the appliance may determine that the policy is undefined in the process of evaluating the policy. In other embodiments the appliance may determine that the policy is undefined in the process of precompiling compiling or interpreting the policy. In some embodiments the appliance may determine the policy is undefined by detecting one or more exceptions generated during the evaluation of the policy. For example the appliance may detect a null pointer overflow or arithmetic processing exception during the evaluation of the policy.

In response to the determination that an element is undefined the appliance may take the second action step . The second action may comprise any action described herein. In some embodiments the second action may comprise terminating the receipt and or transmission of the packet stream. In other embodiments the second action may comprise no action.

Referring now to an example of a policy bank is shown. In brief overview a policy bank comprises a group of one or more policies with a specified order for evaluation. In the example shown the order is specified by line numbers for each of the policies. Each policy may also have a flow instruction generally indicating a policy to be evaluated after evaluation of the current policy.

Still referring to now in greater detail a policy bank may comprise any number of policies including without limitation 1 2 3 4 5 6 10 20 50 and 100 policies. The policies of a policy bank may comprise any policies described herein. In some embodiments a policy bank may comprise a group of policies performing a common function. For example a policy bank may comprise a group of policies providing load balancing functions. Or for example a policy bank may comprise a group of all the policies for providing caching.

A policy bank may be configured in any manner. In some embodiments a configuration interface may be provided which allows a user to create and group one or more polices. In some embodiments a configuration interface may be provided which allows a user to name a given policy bank. In other embodiments a configuration interface may be provided which allows a user to specify one or more attributes of a policy bank. For example a policy bank may have a default action to perform in the event of an exception or undefined policy. Or for example a policy bank may have a set of circumstances in which the policy bank is applied. For example a user may specify that a policy bank is to be used with respect to all incoming HTTP traffic. Or for example a user may specify a policy bank to be used upon receiving any connection requests from new devices. In other embodiments a policy bank may comprise a set of attributes which are used to enforce certain characteristics in the policies of the policy bank. For example a policy bank may require that no policies in the policy bank access a certain object. The attributes of a policy bank may be enforced at configuration time or at runtime.

A policy bank may be stored in any manner. In some embodiments a policy bank may be stored on a file in an appliance. In other embodiments a policy bank may be stored in a policy engine of an appliance.

A policy bank may comprise any means of ordering policies for evaluation. In one embodiment a policy bank may comprise an ordered list of policies. In other embodiments a policy bank may comprise a set of policies with one or more flow instructions indicating an evaluation order. In still other embodiments a policy bank may comprise a numbered list of policies to be executed in order of increasing numbers.

Each expression in a policy bank may specify a flow instruction . A flow instruction may comprise any information or expression indicating a policy to be executed in the event the policy containing the flow instruction evaluates to true. In one embodiment a flow instruction may comprise a NEXT statement which indicates that the next policy in the bank should be evaluated. In another embodiment a flow instruction may comprise a GOTO statement which identifies another policy in the policy bank to be evaluated next. In some embodiments a GOTO statement may identify a policy by a line number. In other embodiments a GOTO statement may identify a policy by a policy name or other identifier. In still another embodiment a flow instruction may comprise an END statement which indicates that no more policies of the policy bank should be evaluated.

In some embodiments a flow instruction may comprise an expression or expression to be evaluated to determine the policy to be executed next. A flow instruction may comprise any expression including without limitation any object oriented expression. For example the flow instruction specifies that an integer following a servnum portion of a query should be added to 17 to determine the line of the policy to be executed next. In the example policy bank the flow instruction may be used to distribute HTTP requests among a number of servers based on a parameter in the requests.

In some embodiments a configuration interface may be provided with means for a user to order policies within a policy bank. The configuration interface may allow a user to specify line numbers priorities list ordering or any other means of specifying evaluation order. In some embodiments a configuration interface may allow a user to specify one or more flow instructions with respect to a policy or a policy bank. In other embodiments the configuration interface may also provide any input means for entering one or more flow instructions corresponding to policies in the policy bank.

Referring now to an embodiment of a method of flow control among policies used in a network device processing a packet stream is shown. In brief overview the method includes identifying by an appliance a plurality of policies to apply to a received packet stream where at least one of the policies includes a policy identifier step . The appliance processes a first policy of a plurality of policies the first policy identifying i a rule that includes a first expression ii a first action to be taken based on an evaluation of the rule and iii a second policy from among multiple policies step . Based on an evaluation of the expression the appliance determines that the rule evaluates to true step . In response to the determination the appliance processes the identified second policy step .

Still referring to now in further detail the appliance identifies a plurality of policies to apply to a received packet stream where at least one of the plurality policies specifies a policy identifier step . The appliance may identify the plurality of policies in any manner. In some embodiments the appliance may identify that the plurality of policies corresponds to policies for a given data stream data stream source or data stream recipient. In one embodiment the plurality of policies may comprise a policy bank.

The packet stream may be received in any manner and from any source. In some embodiments the packet stream may be transparently intercepted by the appliance. In other embodiments the appliance may receive the packet stream in the process of proxying one or more transport layer connections. The packet stream may comprise any type of packets including without limitation IP packets TCP packets UDP packets and ICMP packets. The packet stream may comprise any other protocol or protocols.

The at least one policy identifier may comprise any means of identifying a policy including without limitation a line number policy name or priority number. In some embodiments each policy of the multiple policies specifies a ranking indicating a default order in which the policies should be processed.

The appliance processes a first policy of the plurality of policies in which the first policy identifies a rule that specifies a first expression a first action to be taken based on the evaluation of the rule and an expression identifying a second policy of the plurality of policies step . The first policy may be processed in accordance with any method for evaluating and processing a policy. In some embodiments the first policy may comprise an object oriented expression. In other embodiments the first policy may comprise a rule comprising an object oriented expression.

The first policy may contain any expression identifying a second policy. In some embodiments the first policy may comprise a name of a second policy. In other embodiments the first policy includes an integer that specifies the ranking of a second policy to be processed next if the first action applies.

In some embodiments the first policy may comprise a flow instruction . The first policy may comprise any flow instruction including next goto or end. The first policy may comprise any other elements including without limitation an action to be performed if an element of the first policy is undefined. In one embodiment each policy of the plurality of policies may comprise a flow instruction.

Based on the evaluation of the expression by the appliance the appliance determines the rule evaluates to true step . In some embodiments this step includes evaluating an object oriented expression .

In response to the determination that the rule evaluates to true the appliance may process the identified second policy step . In one embodiment step may comprise executing a flow instruction specified by the first policy. In some embodiments the appliance may evaluate an expression to determine a ranking of a second policy from among the multiple policies to be processed next. In some other embodiments the appliance may evaluate an object oriented expression to determine a ranking of a second policy among the multiple policies to be processed next. For example the appliance may evaluate an expression to determine a line number to be used in conjunction with a GOTO flow instruction. After determining the line number the appliance may then process the policy at the given line number.

In some embodiments the appliance may also take the action specified by the first policy upon determining the rule is true. In other embodiments upon determining the rule is true the appliance may store the action specified by the first policy in a list. This list may be used to store a number of actions to be taken. In one embodiment as an appliance processes a number of policies in a policy bank the appliance may store a list of actions for each policy that contained a rule that evaluated to true. After processing the number of policies the appliance may then take all of the actions stored in the list. In another embodiment as an appliance processes a plurality of policy banks the appliance may store a list of actions for each policy that contained a rule that evaluated to true. After processing the number of policy banks the appliance may then take all of the actions stored in the list.

Referring now to a block diagram illustrating flow control among a plurality of policy groups is shown. In brief overview a policy bank comprises a number of policies. One of the policies comprises an invocation action which invokes a second policy bank . The invocation action indicates a policy bank to be processed if the rule of the policy containing the action evaluates to true. After processing the invoked policy bank an appliance may then resume processing the first policy bank . This processing will be further described with respect to .

Still referring to a configuration interface may be provided which allows a user to specify an order of execution among policy groups by including one or more invocation actions . An invocation action may identify a policy group in any manner including without limitation by name by memory location or by any other identifier. In some embodiments the policy groups may comprise policy banks. In still other embodiments an invocation action may specify a specific policy within a second policy bank.

In some embodiments an invocation action may include one or more directives indicating how the second policy group is to be processed. In one embodiment an invocation action contained in a first policy bank may specify whether or not processing of the first policy bank should be resumed after processing the invoked policy bank. In another embodiment an invocation action may specify whether or not processing of the first policy bank should be resumed if a hard stop or exception is encountered in the invoked policy bank. For example an invocation action may specify that if an END flow instruction is encountered in the second policy bank that processing should resume with the first policy bank. Or an invocation action may specify that if an exception or END flow instruction is encountered in the second policy bank that no more policies of the first policy bank should be processed.

In this manner a user may configure a number of policy banks to ensure that certain policies are processed even where the results of one or more policy banks are uncertain. For example a policy bank providing policies for denying access to restricted URLs may invoke a policy bank for providing SQL security upon detecting that a URL indicates that a request contains SQL queries. The invocation may specify that regardless of the outcome of the SQL security policy bank processing processing should resume at the URL module after the processing of the SQL policy bank. In this manner the user may be assured that all of the restricted URL enforcement policy bank are executed which may ensure that all restricted URLs are blocked.

A user may also use policy bank invocation actions to ensure that policies are not evaluated in the event a given policy bank encounters an exception or hard stop. For example a policy bank providing content switching policies may after determining an application corresponding to a request may invoke a policy bank containing application security policies for the application. The invocation may indicate that if the application security policy bank encounters an END instruction no more policies are to be evaluated in the content switching policy bank. This may be used in cases where an END instruction in the application security policy bank indicates that a security requirement has not been met and thus no more processing of the request should be done.

In some embodiments an appliance may be configured with one or more default execution orders for policy groups. For example an appliance might have one or more global policy groups which are always applied first followed by one or more appliance or vServer specific policy groups which are processed following the global policy groups. In some embodiments policy banks may have a default ordering responsive to the functions the policy banks perform. For example a policy bank of SSL policies may be applied first to incoming traffic and then a set of security policies may be to the decrypted traffic followed by a bank of content switching policies.

Referring now to an embodiment of a method of flow control among policy groups used in a network device processing a packet stream is shown. In brief overview an appliance identifies a first policy group to apply to a received packet stream step . The appliance processes a first policy of the first policy group where the first policy identifies i a rule specifying a first expression and ii information identifying a second policy group step . The appliance evaluates the rule step . In response to the evaluation of the rule the appliance processes the identified second policy group step . After processing the second policy group the appliance processes a second policy of the first policy group step .

Still referring to now in greater detail an appliance may identify a first policy group to apply to a received packet stream in any manner step . The packet stream may be received from any source and may comprise any protocol or protocols.

In some embodiments the first policy may comprise an object oriented expression. In other embodiments the first policy may comprise a rule including at least one expression and or object oriented expression. In some embodiments the first policy specifies an action to be taken based on an evaluation of the rule .

The information identifying a second policy group may comprise any form of identifying information. In one embodiment the second policy group may comprise a policy bank and the identifying information may comprise a name of the policy bank. In some embodiments the information identifying the second policy bank may comprise an invocation action .

The appliance may process the first policy in any manner step . The appliance may evaluate one or more object oriented expressions in processing the policy.

The appliance may evaluate the rule in any manner step . In some embodiments the appliance may evaluate an object oriented expression . In some embodiments the appliance may determine a boolean value corresponding to the rule.

In response to the evaluation of the rule the appliance processes the identified second policy group step . In some embodiments the appliance may only process the second policy group if the rule evaluates to true. In other embodiments the appliance may only process the second policy group if the rule evaluates to a non zero value. The appliance may process the second group in any manner. In some embodiments the appliance may process the second policy bank beginning with a specific policy identified by an invocation action .

In some embodiments after processing the second policy group the appliance may process a second policy of the first policy group. For example in an appliance may evaluate the policy of line in the policy bank . If the rule is true the appliance may take the invocation action and the appliance may process policy bank . After completing the processing of policy bank P the appliance may return to the policy bank and process the next instruction which is line . In some embodiments the appliance may only resume processing the first policy bank if the second policy bank results in a soft stop such as where the last instruction of a policy bank points a NEXT instruction as in line of policy bank . In other embodiments the appliance may resume processing of the first policy bank even where a hard stop is indicated such as line of policy bank

In some embodiments the second policy group may also contain one or more invocation actions. In these embodiments policy bank evaluations may be chained in any manner. In some embodiments an appliance may process a third policy group where the third policy group is identified by a policy in the second policy group. In other embodiments the first policy bank may have a plurality of invocation actions . In these embodiments the appliance may process a third policy group where the third policy group is identified by a second policy of the first policy group. In still other embodiments the first policy specifies a second policy of the first policy group to be processed after the second policy group is processed. For example a policy comprising an invocation action may also comprise a flow instruction which specifies a policy of the first policy group to be processed after processing returns from the second policy group.

Referring now to a number of configuration screens for configuring an application security profile are shown. In brief overview a profile creation screen allows a user to input a name and general properties for a new application security profile. A profile configuration screen allows a user to select one or more checks contained within a profile. Two check configuration screens may then allow a user to modify settings of an individual check.

Still referring to now in greater detail a creation screen allows a user to input a profile name and additional information relating to the profile. A profile may be named in any manner. In some embodiments a profile name may reflect the function or functions of the profile. Any additional information may be specified along with the profile. In one embodiment the profile may specify information about the type of network traffic the profile applies to. For example the profile may apply to HTTP or HTML traffic. Or the profile may apply to webservices traffic.

A profile configuration screen may allow a user to specify one or more checks to use with the profile. A check may comprise any set of policies or actions related to a common security function. For example a cookie check may comprise a set of policies settings or actions to prevent cookie tampering. Or a credit card check may comprise a set of policies settings or actions to prevent against confidential credit card information being transmitted via a device. In the embodiment shown a user is given a choice to block alert or log with respect to a given check. If block is selected the profile may block all traffic which does not satisfy the check. If alert is selected an administrator or user may receive an alert if a packet stream does not satisfy the check. If log is selected a log entry may be created each time a packet stream is transmitted through a device that does not comply with the check. The profile configuration screen may provide the option to modify any of these checks and rules. In some embodiment any modifications to a check may be translated into an underlying policy expression used to configure a network device.

A check configuration screen may comprise any input means for modifying a check. In one embodiment a user may be able to specify one or more policies to be included in a check. In another embodiment a user may be able to modify one or more settings of the check. A setting of a check may comprise any information used by the check in determining whether a traffic stream satisfies the check. For example with respect to a check that validates starting URLs a setting may comprise one or more allowed starting URLs. Or for example for a form field format check a setting may comprise one or more addresses for which the format check should be applied. In some embodiments a setting may correspond to one or more elements of an underlying policy. For example an allowed starting URL may be incorporated as an expression in the rule of a policy having an action that allows the traffic to pass.

Referring now to a flow diagram of a method for configuring one or more application security profiles for a device where each application security profile specifies a number of checks to perform security functions related to an application is shown. In brief overview the method comprises providing a configuration interface for configuring an application security profile step . The method comprises receives a first setting via the configuration interface which corresponds to a first check of the application security profile step . The method also comprises receiving via the configuration interface a second setting which corresponds to a second check of the application security profile step . The method also comprises identifying a policy that specifies a rule that includes a first expression step . The method may then comprise receiving information identifying an application security profile to be processed based on an evaluation of the rule step .

Still referring to now in further detail a configuration interface is provided for configuring an application security profile step . The configuration interface may comprise any configuration interfaces components and methods described herein. In some embodiments the configuration interface comprises one or more of a drag and drop interface a list selection interface or a syntax highlighting interface. In other embodiments the configuration interface may comprise an expression configuration screen . In still other embodiments the configuration interface may comprise any number of profile creation screens check configuration screens and or setting configuration screens . In still other embodiments the configuration interface is a command line interface. The configuration interface may execute on any device. In some embodiments the method includes executing the configuration interface on a device in communication with a network device . In other embodiments the method includes executing the configuration interface on the network device . In one embodiment the method provides a user with a configuration interface for creating a plurality of application profiles.

A device may receive via a configuration interface a first setting that specifies a corresponding first check of the application security profile step . In some embodiments the device receives from the configuration interface a URL to be used by the first check. In other embodiments the device receives from the configuration interface an expression specifying one or more URLs to be used by the first check. In still other embodiments the device receives from the configuration interface an object oriented expression specifying one or more URLs to be used by the first check. In some embodiments the setting may comprise an indication whether the check should block log or generate an alert with respect to a packet stream that violates the check. In other embodiments the setting may comprise an element of one or more policies included in the check.

The device also receives via the configuration interface a second setting that specifies a corresponding second check of the application security profile step This setting may be received in any manner including any manner in which the first setting was received.

The device may identify via the configuration interface a policy that specifies a rule which includes a first expression step . In some embodiments the policy may comprise an object oriented expression. The policy may be identified in any manner. In some embodiments the policy may be chosen from a list. In other embodiments the policy may be chosen via a drag and drop interface. In still other embodiments the policy may be automatically chosen with respect to a given profile. In one embodiment the policy may be input directly by a user.

The device may receive via the interface information that identifies the application security profile to be processed based on an evaluation of the rule step . In one embodiment the application security profile may be represented as a policy bank and an invocation action may be added to the policy identifying the policy bank. In some embodiments the method includes storing the application security profile. In other embodiments the method includes transmitting the application security profile to a network device .

In some embodiments an application security profile may be specified as an action for more than one policies. For example there may be several conditions under which an application security profile including form field consistency and buffer overflow checks should be applied. A plurality of policies each specifying one of the several conditions each may invoke the application security profile as an action.

Referring now to an embodiment of a method for executing one or more application security profiles for a device each application security profile specifying a number of policy groups performing security functions related to an application is shown. In brief overview the method includes an appliance identifying a first policy to apply to a received packet stream where the first policy specifies a rule that includes a first expression and identifies an application security profile step . The appliance evaluates the rule step . The appliance in response to the evaluation of the rule processes a first check specified by the application security profile step . In response to the evaluation of the rule the appliance also processes a second check specified by the application security profile step .

Still referring to now in further detail the method includes an appliance to identify a first policy to apply to a received packet stream where the first policy specifies a rule that includes a first expression and identifies an application security profile step . In some embodiments the appliance comprises a VPN proxy device. In some other embodiments the appliance identifies a first policy to apply to a received TCP packet stream. The packet stream may be received in any manner and from any source. The packet stream may comprise any protocol or protocols.

The appliance evaluates the rule of the policy step . The appliance may evaluate the rule according any to technique. In some embodiments the rule may comprise an object oriented expression. In other embodiments the rule may comprise a plurality of object oriented expressions. In some embodiments the appliance may determine a boolean value as a result of evaluating the expression.

In response to the evaluation of the rule the appliance processes a first check specified by the application security profile step . In some embodiments the appliance may process the first check in response to determining that the rule is true.

The appliance may process the first check in any manner. In some embodiments the appliance evaluates at least one setting of the first check to determine whether to apply the first check. In some other embodiments the appliance determines that a URL contained in the packet stream matches at least one setting of the first check and applies the first check in response to the determination. In still other embodiments the appliance may determine that a URL contained in the packet stream matches an expression of one setting of the first check and applying the first check in response to the determination. In other embodiments the appliance may determine that a URL contained in the packet stream matches an object oriented expression of one setting of the first check. The appliance may apply the first check in response to the determination.

Also in response to the evaluation of the rule the appliance may process a second check specified by the application security profile step . In some embodiments the appliance may process the second check in response to determining that the rule is true. In some embodiments the method uses at least one of the first check and second check in order to perform one of SQL injection detection invalid starting URL detection cookie tampering detection form field consistency detection buffer overflow detection cross site scripting detection credit card number detection and invalid URL detection. In some other embodiments the method uses at least one of the first check and second check to perform one of SQL injection blocking invalid starting URL blocking cookie tampering blocking inconsistent form field blocking buffer overflow blocking cross site scripting blocking credit card number blocking and invalid URL blocking.

While the invention has been particularly shown and described with reference to specific preferred embodiments it should be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention as defined by the appended claims.

