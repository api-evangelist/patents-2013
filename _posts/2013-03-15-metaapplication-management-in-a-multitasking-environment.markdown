---

title: Meta-application management in a multitasking environment
abstract: Techniques are disclosed to identify concurrently used applications based on application state. Upon determining that usage of a plurality of applications, including a first state of a first application of the plurality of applications, satisfies a criterion for identifying concurrently used applications, the plurality of applications is designated as a first meta-application having a uniquely identifiable set of concurrently used applications. The first meta-application has an associated criterion for launching the first meta-application. Upon determining that the criterion for launching the first meta-application is satisfied, at least one of the plurality of applications is programmatically invoked.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09207973&OS=09207973&RS=09207973
owner: International Business Machines Corporation
number: 09207973
owner_city: Armonk
owner_country: US
publication_date: 20130315
---
This application is a continuation of co pending U.S. patent application Ser. No. 13 828 507 filed Mar. 14 2013. The aforementioned related patent application is herein incorporated by reference in its entirety.

Embodiments disclosed herein relate to facilitating user productivity in a multitasking environment. More specifically embodiments disclosed herein relate to techniques for managing meta applications in a multitasking environment.

Applications that execute on a software based computing platform may often be supported by an operating system that abstracts the hardware by providing an interface to facilities provided by the computing platform. Some operating systems may also provide an environment where several tasks may run concurrently with a minimal of interference therebetween but with support for safe data sharing. In that context the operating system may manage the available hardware resources in a manner to promote fairness in resource allocation among the tasks.

Embodiments presented in this disclosure provide a computer implemented method to identify concurrently used applications based on application state. The method includes upon determining that usage of a plurality of applications including a first state of a first application of the plurality of applications satisfies a criterion for identifying concurrently used applications designating the plurality of applications as a first meta application having a uniquely identifiable set of concurrently used applications. The first meta application has an associated criterion for launching the first meta application. The method also includes upon determining that the criterion for launching the first meta application is satisfied programmatically invoking at least one of the plurality of applications.

Other embodiments presented in this disclosure provide a computer program product to identify concurrently used applications based on application state. The computer program product includes a computer readable storage medium having program code embodied therewith. The program code is executable by one or more computer processors to upon determining that usage of a plurality of applications including a first state of a first application of the plurality of applications satisfies a criterion for identifying concurrently used applications designate the plurality of applications as a first meta application having a uniquely identifiable set of concurrently used applications. The first meta application has an associated criterion for launching the first meta application. The program code is also executable in order to upon determining that the criterion for launching the first meta application is satisfied programmatically invoke at least one of the plurality of applications.

Still other embodiments presented in this disclosure provide a system to identify concurrently used applications based on application state. The system includes one or more computer processors and a memory containing a program which when executed by the one or more computer processors is configured to perform an operation that includes upon determining that usage of a plurality of applications including a first state of a first application of the plurality of applications satisfies a criterion for identifying concurrently used applications designating the plurality of applications as a first meta application having a uniquely identifiable set of concurrently used applications. The first meta application has an associated criterion for launching the first meta application. The operation also includes upon determining that the criterion for launching the first meta application is satisfied programmatically invoking at least one of the plurality of applications.

Users may often access multiple different applications that execute simultaneously on a computing device. In part because information or capabilities provided by one application may not necessarily be similarly available in other applications accomplishing a task may often entail several applications in specific states to first be arranged prior to beginning the task. One example includes opening a spreadsheet containing username and password information launching a web browser to point to a specific uniform resource locator URL to log in to a specific web application and running an email client to compose a new email message. Such applications and states may then allow the user to perform a desired task involving retrieving desired information from the web application pasting the information into the new email message and sending the new email message to a desired recipient. In situations where the task is often repeated the process of the user identifying a set of applications desired for the task manually running each application and navigating to an appropriate state in each application may be tedious and time consuming at least in some cases. Further some situations may pose even greater difficulty to performing the tasks such as when the user is alternating between multiple distinct tasks each having a different set of associated applications.

Accordingly at least some embodiments presented in this disclosure provide techniques to identify sets of applications that tend to be used concurrently by a user such as to perform a specific task. If the user subsequently only launches a subset of applications of an identified set the remaining applications in the identified set may be launched for the user automatically in response to user confirmation or in response to user request. Further application states may be captured automatically or in response to a user request and subsequently restored. Examples of application states include a uniform resource locator URL in a web browser a currently opened file in a word processor along with a line number and a cursor position and a connected database server in a database browser along with active database connections and database entities being interacted with. Identified sets of applications may also be referred to herein as meta applications. Further the degree of interoperability between the applications may vary from case to case. For example in some embodiments the applications have a high degree of interoperability and a comparatively smaller degree orchestration by the user is involved. In other embodiments the applications have a low or no degree of interoperability and comparatively higher degree of orchestration by the user is involved.

In some embodiments applications may be further qualified by application state in the identification process. That is such embodiments include identifying sets of applications or application states that tend to be used concurrently by a user. In other words application states may be used as an input in identifying and qualifying sets of applications that tend to be used together. Accordingly different states of a given application may result in different applications that are suggested to be launched. At least in some embodiments the application states are also restored upon launching the applications. Consequently sets of applications that tend to be used together by a user including respective states thereof may be more accurately identified and restored for a user. Such restoration of application and states may also be referred to herein as content aware application recall. Thus user productivity in a multitasking environment may be improved at least in some cases at least relative to alternative approaches that do not take into account capture or restore application states in identifying sets of applications that tend to be used concurrently.

Hence one embodiment disclosed herein provides a launcher tool that is configured to automatically manage meta applications for the user. Meta applications may also be referred to as application groups and the launcher tool may also be referred to herein as a launcher. Managing the meta applications may include operations such as creating identifying storing and restoring the meta applications for the user. Restoring the meta applications is also referred to as loading or recalling the meta applications.

Accordingly the meta applications may effectively provide snapshots of a multitasking environment suitable for completing one or more given tasks where the snapshots may subsequently be restored so that the user may resume the given tasks. The snapshots may include state information associated with each application. In restoring meta applications application states may also be restored based on the state in formation. In some embodiments the meta applications are managed without requiring any explicit input from the user. In other embodiments the user is prompted to confirm each operation that the launcher is to perform. In still other embodiments the user may also explicitly request that the launcher perform a desired operation.

For example a first meta application may provide a developer with a document containing database notes and opened in a word processor a database documentation webpage opened in a web browser and a database control panel tool that is connected to a database referenced in the database notes. A second meta application may provide an inventor with access to invention disclosure information opened in an application for managing patent dockets an online patent search tool opened in a web browser and a group chat window in an instant messaging IM application and involving the co inventors named in the invention disclosure information. Each meta application and or the states thereof may be launched or closed based on user request. In some embodiments any application in a given meta application and that is not yet invoked may be launched automatically for the user without user intervention or upon user confirmation. Additionally or alternatively the states thereof may also be launched automatically for the user.

For example in some embodiments the predefined criteria may include meta frequency meta duration and least common meta application. Meta frequency refers to a measure of how often a set of applications is manually launched proximate in time to one another and or how often the applications are in a characteristic set of application states when concurrently executing. Meta duration refers to how long a set of applications execute concurrently and or how long the applications are in the characteristic set of application states. Least common meta application refers to how often a specific subset of applications executes concurrently where the subset is selected from all currently executing applications.

At least in some embodiments the more proximate in time a set of applications are launched relative to one another the more often the set of applications is in a characteristic set of application states when concurrently executing and the longer the set of applications execute concurrently then the more likely that the launcher designates the set of applications as a new meta application recognized by the launcher . In some embodiments measures of user interactivity with each application may also be taken into account by the launcher . For example an application in the set and with which the user has little or no recent interaction may be excluded from the meta application even if the application otherwise would become part of the meta application.

After creating the meta application the launcher may determine whether subsequent application usage satisfies predefined criteria for loading the meta application. If so the launcher invokes at least one application that is part of the meta application. In some embodiments the launcher invokes all yet to be invoked applications in order to complete the meta application e.g. such that all applications that are part of the meta application are executing concurrently. In other embodiments the launcher invokes less than all of the yet to be invoked applications upon user confirmation or based on an explicit user request.

In some embodiments to determine whether subsequent application usage satisfies predefined criteria for loading the meta application the launcher may determine a current execution state associated with the user which includes all currently executing applications and the respective states thereof. The current execution state may also be referred to as a current user state. Depending on the embodiment the current execution state may also include one or more measures associated with the currently executing applications such as time of invocation duration of execution usage frequency user interactivity etc. The launcher may then compare the current execution state with each of the meta applications to determine one or more partial matches each partial match having an associated similarity score. The similarity scores may be determined based on a predefined function of one or more of the measures and may further include respective weights for each measure. The predefined function may be tailored to suit the needs of a particular case.

In one embodiment partial matches having a similarity score beyond a predefined loading threshold are then identified by the launcher . Each partial match is a different meta application partially but not completely matching the current execution state. Further complete matches may be disregarded by the launcher because a meta application that is a complete match is already executing in its entirety and need not have any component application launched. For each meta application partially matching the current execution state and satisfying the predefined loading threshold the launcher may launch one or more applications in the respective meta application yet to be launched.

For example suppose the first meta application described above is returned as a partial match in terms of the word processor and the web browser. The launcher may determine a set difference between the first meta application and a subset of the first meta application corresponding to the partial match word processor web browser database control panel tool word processor web browser database control panel tool. The launcher may then launch the set difference e.g. database control panel tool without user intervention or upon user confirmation. At least in some embodiments the manner in which the set difference is determined may be expressed as one or more rules for determining missing applications to launch. A meta application partially matching the current execution state and satisfying the predefined loading threshold may be referred to as a qualified partial match. The predefined loading threshold may be tailored to suit the needs of a particular case.

In some embodiments by matching a current execution state with previously stored meta applications and identifying partial matches the launcher may present sets of applications and associated states that the user may previously have found useful but that the user has subsequently neglected forgotten about or found it difficult to navigate back to. For example suppose that the user after using the first meta application described above and writing database notes in the word processor forgets about the existence of the database notes in subsequent use of the web browser and the database control panel tool. Based on the techniques disclosed herein the launcher may automatically open the database notes launching the word processor in the process also if not already launched thereby completing a launch of the first meta application and associated state and without requiring any intervention on the part of the user.

Other embodiments are broadly contemplated. For example in one embodiment each meta application is launched and or organized into a different virtual desktop for the user. In another embodiment a user may specify how to load a desired state for a currently executing application having a different state. For example if the application is a web browser a desired state specifying a target web page and scrollbar position may be loaded in the current web browser window in a new browser window or in a new browser tab based on preferences indicated by the user.

Accordingly the launcher may manage meta applications and application states based on the techniques disclosed herein. For example the launcher may initiate an operation to restore desired meta applications and or states without user intervention or upon user confirmation. Thus productivity of the user of the applications may be improved at least in some cases.

Assume also that subsequently only two of the applications of the meta application namely the database control panel and the web browser are in use as reflected by the user state . In one embodiment the launcher may either without user intervention or upon an explicit user request compare the user state with the stored meta applications and states in an attempt to find qualified partial matches. Assume that the meta application is returned as a qualified partial match. The launcher may then identify one or more applications not currently executing also referred to herein as missing applications. In this particular example the word processor is identified as the missing application. The launcher may then prompt the user to confirm that the word processor and the associated state thereof should be loaded. Upon user confirmation the launcher loads the word processor and the associated state thereby restoring the meta application as reflected in the updated user state . Accordingly based on the techniques disclosed herein the launcher is configured to automatically provide recommendations to the user of applications and states to launch and restore in order to recreate a multitasking environment previously automatically identified and stored for the user as being a potentially desirable multitasking environment.

Assume that in a first scenario a first user accesses a vacation calendar via the web browser and is reminded that a personal engagement is scheduled for the following day. The first user may then access a work calendar via the email client to schedule a vacation day to accommodate the personal engagement. Before logging the vacation day the first user may also access a chat window of the instant messaging application to verify with a manager that the absence on short notice is acceptable.

Assume that in a second scenario a second user accesses the web browser to perform Internet searches for prior art pertaining to a new patent idea of the second user. The second user may then use the email client to access an internal invention database in order to begin drafting an invention disclosure for the new patent idea. The second user may then use the presentation graphics program to create some diagrams to illustrate aspects of the new patent idea.

In both of the scenarios the email client and the web browser are used. When the email client and the web browser are subsequently executed some approaches such as those that only consider which applications are executing and that do not consider states associated therewith may not be able to distinguish between the two scenarios as reflected by a third scenario . For example in the third scenario the launcher may determine two candidate applications to launch including the instant messaging application and the presentation graphics program to complete the different meta applications respectively. But in the third scenario the launcher may not necessarily be able to select the application actually desired by the user. At least in some cases an incorrect application may be selected unless the user is asked to and able to select the correct application to launch.

On the other hand in approaches that do take into account which applications are executing and further take into account the states associated therewith such as in the two scenarios the launcher may correctly select the desired application for each user and without user intervention. The launcher may also restore the state of the selected application. Accordingly configuring the launcher to store application states and to consider application states in selecting applications to launch may at least in some cases improve accuracy of the launcher in selecting the correct applications for restoring desired multitasking environments.

In some embodiments various techniques may be used in identifying storing and loading application states. Some application states may be sufficiently captured by storing a reference to any document or data currently open in the application e.g. a file pathname for a word processor a URL for a web browser etc. Other applications may be adequately represented in the meta application even if no application state associated therewith is captured.

However still other applications may have states that may not necessarily be readily captured via certain predefined techniques such as via operating system level calls. One example of such an application may be an email client configured to provide email functionality calendar functionality and database access functionality. If the associated application state is not captured then the launcher may not be able to restore a state of the desired functionality within the email client when the email client is subsequently launched for the user. In such scenarios the available options may be as follows. If no state is readily discoverable the application may just be stored as having no available state information. In such scenarios the meta application merely indicates that the application executes simultaneously with the other applications of the meta application. Doing so however may lower application selection accuracy at least in some cases because the application may be considered noise when searching for meta applications matching a current user state.

As an alternative in one embodiment application specific state searching tools may be implemented that are configured to capture state for a given application via existing application programming interfaces APIs . Doing so may allow for example a mechanism specific to the email client and that would request a shortcut to a current focus or context within the email client. Subsequent re invocation of the shortcut may restore the state of the email client as desired. Such an approach may apply to at least a subset of applications such as word processors web browsers and integrated development environments IDEs without undue effort at least in some cases. This approach may also be applied to an expanded set of applications based on additional implementation of aspects of the application specific state searching tools as needed.

In some embodiments multitasking environments having an arbitrarily large number of concurrently executing applications may be filtered to disqualify applications that are not deemed to belong to any specific meta application. For example certain applications such as the email client and the instant messaging application may often be executing even when not actively being used. In one embodiment such applications should not be included in any new meta applications being generated. To this end the following approaches may be adopted. If an application is executing but used infrequently then the application may be flagged as being potentially inactive such as by lowering an activity score being maintained for the application. The determination that the application is used infrequently may be made based on a small number of interactions monitored between the user and the application the application being minimized to a task bar of a window manager the application being minimized to a system tray of the window manager etc. The lowered activity score results in a lower likelihood for the application to be included in a new meta application. Additionally or alternatively if an application was manually launched long before a new set of applications are manually launched the application may also be discounted.

Further still in scenarios where the launcher incorrectly includes an application in a new meta application the user may manually reconfigure the new meta application using the launcher such as providing a manual override in order to de select applications that are not part of a desired multitasking environment. Allowing such manual intervention by a user may further improve accuracy of partial matching and restoring of applications and associated states at least in some cases. In some embodiments each indication of inactivity described above may be accorded a different weight and the weights may be tailored to suit the needs of a particular case.

In one embodiment the launcher provides a graphical user interface GUI that may include a variety of windows including an alert window a main window and a settings window each of which is discussed in further detail below.

For a given one of the stored meta applications selected by activating an associated tab the meta application specific operations allow the user to launch the given meta application launch the given meta application rename the given meta application disable the given meta application delete the given meta application as being a member of the available meta applications reorder the given meta application relative to other meta applications add a specified application to the given meta application and configure settings associated with the given meta application. The user may also click on a new tab to manually create a new meta application to be added to the stored meta applications .

The contents of the given meta application include a list of all applications included in the meta application an associated ordering of each application an associated checkbox for selecting each application an executable pathname of each application indicates of whether states are supported or enabled for the respective application and state information if any associated with the respective application.

For a given one of the applications selected via the checkbox the application specific operations allow the user to launch the given application close the given application disable the given application disable a state stored for the given application restore a state for the given application remap the given application to a new pathname rename the given application delete the given application as a member of the meta application delete a state for the given application capture a state for the given application reorder the given application relative to other applications in the meta application and configure settings specific to the given application. The settings at each level of granularity may be configured via the settings window which is further described below in conjunction with .

A third one of the settings allows user configuration of whether the launcher automatically detects new meta applications to launch. A fourth one of the settings allows user configuration of whether the launcher prompts for user confirmation of an automatic launch. A fifth one of the settings allows user configuration of whether the launcher automatically loads application states. A sixth one of the settings allows user configuration of whether the launcher prompts for user confirmation when automatically loading application states.

A seventh one of the settings allows user configuration of whether the launcher enforces a maximum number of applications in a single automatically detected meta application where the maximum number may be specified by the user. An eighth one of the settings allows user configuration of the frequency with which the launcher captures application state information where the time window triggering capture is configurable by the user. A ninth one of the settings allows user configuration of the sensitivity of the launcher in detecting new meta applications via a slider control. A tenth one of the settings allows user configuration of the sensitivity of the launcher in identifying existing meta applications also via a slider control.

In one embodiment after configuring the settings the user may activate the save button to save the settings activate the apply button to apply the changes and or activate the exit button to exit the settings window . The names types and number of settings may be tailored to suit the needs of a particular case.

In some embodiments each meta application is uniquely identifiable via a respective meta application name and or via a respective meta application identifier respectively. Further each application is uniquely identifiable via a respective application name and or via a respective application identifier respectively. Further still each application state is uniquely identifiable via a respective state name and or via a respective state identifier respectively. At least in some embodiments multiple states may be stored for each application. The steps are discussed in further detail below in conjunction with .

At step the launcher determines that subsequent application usage satisfies the criterion for launching the first meta application. In some embodiments the criteria for identifying concurrently used applications and for launching the first meta application respectively are different criteria. At step the launcher programmatically invokes at least one of the applications. At step the launcher optionally restores a state associated with the programmatically invoked application. The steps are discussed in further detail below in conjunction with . After the step the method terminates.

In one embodiment the identification module is configured to determine qualified partial matches of a current user state according to the techniques disclosed herein. The restoration module is configured to capture and restore state information associated with the applications according to the techniques disclosed herein. The customization module is configured to present and modify user preferences for the launcher based on user input and according to the techniques disclosed herein. The launching module is configured to programmatically launch one or more missing applications according to the techniques disclosed herein. The names types functionalities and number of modules of the launcher may be tailored to suit the needs of a particular case.

Accordingly at least some embodiments presented in this disclosure provide techniques to identify sets of applications that tend to be used concurrently by a user to perform a specific task. If the user subsequently only launches a subset of applications of an identified set the remaining applications in the identified set may be launched for the user without user intervention upon user confirmation or upon user request. Application states may also be captured and subsequently restored for the user. As a result productivity of the user may be improved at least in some cases.

The computer generally includes a processor connected via a bus to a memory a network interface device a storage an input device and an output device . The computer is generally under the control of an operating system. Examples of operating systems include UNIX versions of the Microsoft Windows operating system and distributions of the Linux operating system. More generally any operating system supporting the functions disclosed herein may be used. The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. Similarly the memory may be a random access memory. While the memory is shown as a single identity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. The network interface device may be any type of network communications device allowing the computer to communicate with other computers via the network .

The storage may be a persistent storage device. Although the storage is shown as a single unit the storage may be a combination of fixed and or removable storage devices such as fixed disc drives solid state drives floppy disc drives tape drives removable memory cards or optical storage. The memory and the storage may be part of one virtual address space spanning multiple primary and secondary storage devices.

The input device may be any device for providing input to the computer . For example a keyboard and or a mouse may be used. The output device may be any device for providing output to a user of the computer . For example the output device may be any conventional display screen or set of speakers. Although shown separately from the input device the output device and input device may be combined. For example a display screen with an integrated touch screen may be used.

As shown the memory of the computer includes the applications and the launcher and the storage of the computer includes the meta applications and application states of . By configuring the launcher according to the techniques disclosed herein and to manage the applications such as to facilitate launching the meta applications and restoring the application states user productivity on the computer may be improved at least in some cases.

In the preceding reference is made to embodiments presented in this disclosure. However the scope of the present disclosure is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice contemplated embodiments. Furthermore although embodiments disclosed herein may achieve advantages over other possible solutions or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the scope of the present disclosure. Thus the preceding aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

Aspects presented in this disclosure may be embodied as a system method or computer program product. Accordingly aspects disclosed herein may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects disclosed herein may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this disclosure a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects disclosed herein may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the computer of a user partly on the computer of the user as a stand alone software package partly on the computer of the user and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the computer of the user via any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects presented in this disclosure are described above with reference to flowchart illustrations or block diagrams of methods apparatus systems and computer program products according to embodiments disclosed herein. It will be understood that each block of the flowchart illustrations or block diagrams and combinations of blocks in the flowchart illustrations or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart or block diagram block or blocks.

Embodiments of the invention may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the embodiments presented herein the applications and launcher may execute in the cloud and the meta applications and application states may also be stored in the cloud. The launcher may invoke the meta applications and restore the application states according to the techniques disclosed herein. Thus the user may access the meta applications from any computing system attached to a network connected to the cloud e.g. the Internet and be charged based on the processing environment s used.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments disclosed herein. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. Each block of the block diagrams or flowchart illustration and combinations of blocks in the block diagrams or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While the foregoing is directed to embodiments presented in this disclosure other and further embodiments may be devised without departing from the basic scope of contemplated embodiments and the scope thereof is determined by the claims that follow.

