---

title: Account management services for load balancers
abstract: A configurable load balancer can be utilized in a multi-tenant environment, where the load balancer can incorporate, or utilize, an account management service operable to perform security tasks such as authentication, authorization, and session management. Customers can utilize the load balancer to control access that users have to resources associated with those customers, without having to build and maintain a dedicated user management system. By implementing security functionality at the load balancer level, traffic can be managed before reaching the resources, which can help to reduce traffic and load on the resources, and can also help to prevent attacks and secure sensitive information. Visibility into the traffic through the load balancer also allows for behavior and usage monitoring, which is helpful for tasks such as billing and usage limit enforcement.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424429&OS=09424429&RS=09424429
owner: Amazon Technologies, Inc.
number: 09424429
owner_city: Reno
owner_country: US
publication_date: 20131118
---
As an increasing number of applications and services are being made available over networks such as the Internet an increasing number of content application and or service providers are turning to technologies such as cloud computing. Cloud computing in general is an approach to providing access to electronic resources through services such as Web services where the hardware and or software used to support those services is dynamically scalable to meet the needs of the services at any given time. A user or customer typically will rent lease or otherwise pay for access to resources through the cloud and thus does not have to purchase and maintain the hardware and or software to provide access to these resources.

Often customers wanting to utilize these resources must build or otherwise provide a mechanism for differentiating between users authenticating users and otherwise controlling access to various resources provided as part of the cloud offering. This often entails the customer providing some type of user management system that is under control of the customer. Customers often underestimate the complexity of building such a system and often inadvertently provide systems that are easily broken into by malicious parties. Even large companies often do not implement such systems correctly as high profile companies have had sites hacked into and passwords stolen among other such activity.

Systems and methods in accordance with various embodiments of the present disclosure may overcome one or more of the aforementioned and other deficiencies experienced in conventional approaches to managing access to resources in an electronic environment. In particular various embodiments provide mechanisms for managing account related and other such functionality using a management service associated with or incorporated in a component such as a load balancer or load balancing service.

In various embodiments electronic resources are provided that are not associated with a specific customer or account. For example data servers application servers virtual machines and other such resources might be shared among a variety of customers where the access for each of those customers is determined through the terms of a respective customer account. A customer might utilize these resources for various purposes such as to provide a website or application that is accessible by end users. Access to a website can be for authorized users only or the website might provide access to content based at least in part upon an identity of an authorized user among other such options. In order to manage this access the customer can subscribe to an account management service or other such service that can be integrated in or associated with a load balancing component or service. The account management service can be a Web service for example that can expose a configurable application programming interface API or other such interface enabling a customer to take advantage of functionality of the service without having to build a dedicated user management system. The account management service can manage sensitive information such as passwords credit card numbers social security numbers phone numbers and the like and store this information in a way that is separated from the website components. If the website is compromised or hacked confidential user data would not be accessible. Further by implementing the service at the load balancer all requests to the resources can be intercepted or otherwise processed before reaching those resources whereby functions such as authentication and authorization can be performed in a way that is visible to the provider and can require no customer involvement other than building user rules policies roles groups pools and or permissions for determining access to the respective resources. In at least some embodiments information passed between the service and the resources can use HTTP request and response headers or other such mechanisms such that the service does not need to address the technology choice of the resources and or applications and web or cloud applications do not have to perform tasks such as authentication or authorization.

Various other applications processes and uses are presented below with respect to the various embodiments.

The control plane in this example is essentially a virtual layer of hardware and software components that handles control and management actions such as provisioning scaling replication etc. The control plane in this embodiment includes a Web services layer or tier which can include at least one Web server for example along with computer executable software application servers or other such components. The Web services layer also can include a set of APIs or other such interfaces for receiving Web services calls or requests from across the network . Each API can be provided to receive requests for at least one specific action to be performed with respect to the data environment such as to provision scale clone or hibernate an instance of a relational database. Upon receiving a request to one of the APIs the Web services layer can parse or otherwise analyze the request to determine the steps or actions needed to act on or process the call. For example a Web service call might be received that includes a request to create a data repository. In this example the Web services layer can parse the request to determine the type of data repository to be created the storage volume requested the type of hardware requested if any or other such aspects. Information for the request can be written to an administration Admin data store or other appropriate storage location or job queue for subsequent processing.

A Web service layer in one embodiment includes a scalable set of customer facing servers that can provide the various control plane APIs and return the appropriate responses based on the API specifications. The Web service layer also can include at least one API service layer that in one embodiment consists of stateless replicated servers which process the externally facing customer APIs. The Web service layer can be responsible for Web service front end features such as authenticating customers based on credentials authorizing the customer throttling customer requests to the API servers validating user input and marshalling or unmarshalling requests and responses. The API layer also can be responsible for reading and writing database configuration data to from the administration data store in response to the API calls. In many embodiments the Web services layer and or API service layer will be the only externally visible component or the only component that is visible to and accessible by customers of the control service. The servers of the Web services layer can be stateless and scaled horizontally as known in the art. API servers as well as the persistent data store can be spread across multiple data centers in a region for example such that the servers are resilient to single data center failures.

The control plane can include what is referred to herein as a sweeper component now shown . A sweeper component can be any appropriate component operable to poll various components of the control plane or otherwise determine any tasks to be executed in response to an outstanding request. In this example the Web services layer might place instructions or information for the create database request in the admin data store or a similar job queue and the sweeper can periodically check the admin data store for outstanding jobs. Various other approaches can be used as would be apparent to one of ordinary skill in the art such as the Web services layer sending a notification to a sweeper that a job exists. The sweeper component can pick up the create database request and using information for the request can send a request call or other such command to a workflow component operable to instantiate at least one workflow for the request. The workflow in one embodiment is generated and maintained using a workflow service as is discussed elsewhere herein. A workflow in general is a sequence of tasks that should be executed to perform a specific job. The workflow is not the actual work but an abstraction of the work that controls the flow of information and execution of the work. A workflow also can be thought of as a state machine which can manage and return the state of a process at any time during execution. A workflow component or system of components in one embodiment is operable to manage and or perform the hosting and executing of workflows for tasks such as repository creation modification and deletion recovery and backup security group creation deletion and modification user credentials management and key rotation and credential management. Such workflows can be implemented on top of a workflow service as discussed elsewhere herein. The workflow component also can manage differences between workflow steps used for different database engines such as MySQL as the underlying workflow service does not necessarily change.

An example create database workflow for a customer might include tasks such as provisioning a data store instance allocating a volume of off instance persistent storage attaching the persistent storage volume to the data store instance then allocating and attaching a DNS address or other address port interface or identifier which the customer can use to access or otherwise connect to the data instance. In this example a user is provided with the DNS address and a port address to be used to access the instance. The workflow also can include tasks to download and install any binaries or other information used for the specific data storage technology e.g. MySQL . The workflow component can manage the execution of these and any related tasks or any other appropriate combination of such tasks and can generate a response to the request indicating the creation of a database in response to the create database request which actually corresponds to a data store instance in the data plane and provide the DNS address to be used to access the instance. A user then can access the data store instance directly using the DNS address and port without having to access or go through the control plane . Various other workflow templates can be used to perform similar jobs such as deleting creating or modifying one of more data store instances such as to increase storage. In some embodiments the workflow information is written to storage and at least one separate execution component not shown pulls or otherwise accesses or receives tasks to be executed based upon the workflow information. For example there might be a dedicated provisioning component that executes provisioning tasks and this component might not be called by the workflow component but can monitor a task queue or can receive information for a provisioning task in any of a number of related ways as should be apparent.

The control plane in this embodiment also includes at least one monitoring component . When a data instance is created in the data plane information for the instance can be written to a data store in the control plane such as a monitoring data store . It should be understood that the monitoring data store can be a separate data store or can be a portion of another data store such as a distinct set of tables in an Admin data store or other appropriate repository. A monitoring component can access the information in the monitoring data store to determine active instances in the data plane . A monitoring component also can perform other tasks such as collecting log and or event information from multiple components of the control plane and or data plane such as the Web service layer workflow component sweeper component and various host managers. Using such event information the monitoring component can expose customer visible events for purposes such as implementing customer facing APIs. A monitoring component can constantly monitor the health of all the running repositories and or instances for the control plane detect the failure of any of these instances and initiate the appropriate recovery process es .

Each instance in the data plane can include a host manager component. A host manager in one embodiment is an application or software agent executing on an instance and or application server such as a Tomcat or Java application server programmed to manage tasks such as software deployment and data store operations as well as monitoring a state of the data store and or the respective instance. A host manager in one embodiment listens on a port that can only be reached from the internal system components and is not available to customers or other outside entities. In some embodiments the host manager cannot initiate any calls into the control plane layer. A host manager can be responsible for managing and or performing tasks such as setting up the instances for a new repository including setting up logical volumes and file systems installing database binaries and seeds and starting or stopping the repository. A host manager can monitor as well as monitoring for error conditions such as I O errors or data storage errors. A host manager can also perform and or mange the installation of software patches and upgrades for the data store and or operating system. A host manger also can collect relevant metrics such as may relate to CPU memory and I O usage.

The monitoring component can communicate periodically with each host manager for monitored instances such as by sending a specific request or by monitoring heartbeats from the host managers to determine a status of each host. In one embodiment the monitoring component includes a set of event processors or monitoring servers configured to issue commands to each host manager such as to get the status of a particular host and or instance. If a response is not received after a specified number of retries then the monitoring component can determine that there is a problem and can store information in the Admin data store or another such job queue to perform an action for the instance such as to verify the problem and re provision the instance if necessary. The sweeper can access this information and kick off a recovery workflow for the instance to attempt to automatically recover from the failure. The host manager can act as a proxy for the monitoring and other components of the control plane performing tasks for the instances on behalf of the control plane components. Occasionally a problem will occur with one of the instances such as the corresponding host instance or volume crashing rebooting restarting etc. which cannot be solved automatically. In one embodiment there is a logging component not shown that can log these and other customer visibility events. The logging component can include an API or other such interface such that if an instance is unavailable for a period of time a customer can call an appropriate events or similar API to get the information regarding the event. In some cases a request may be left pending when an instance fails. Since the control plane in this embodiment is separate from the data plane the control plane never receives the data request and thus cannot queue the request for subsequent submission although in some embodiments this information could be forwarded to the control plane . Thus the control plane in this embodiment provides information to the user regarding the failure so the user can handle the request as necessary.

As discussed once an instance is provisioned and a user is provided with a DNS address or other address or location the user can send requests directly to the data plane through the network using a Java Database Connectivity JDBC or other such client to directly interact with that instance. In one embodiment the data plane takes the form of or at least includes or is part of a computing cloud environment or a set of Web services and resources that provides data storage and access across a cloud or dynamic network of hardware and or software components. A DNS address is beneficial in such a dynamic cloud environment as instance or availability failures for example can be masked by programmatically remapping a DNS address to any appropriate replacement instance for a use. A request received from a user or application for example can be directed to a network address translation NAT router or other appropriate component which can direct the request to the actual instance or host corresponding to the DNS of the request.

In various embodiments the data plane may include various types of resources that can be utilized by multiple customers and or users for a variety of different purposes. In at least some embodiments all or a portion of a given resource or set of resources might be allocated to a particular customer or allocated for a particular task for at least a determined period of time. The sharing of these multi tenant resources from a provider environment is often referred to as resource sharing Web services or cloud computing among other such terms and depending upon the specific environment and or implementation. In this example the provider environment includes a plurality of resources of one or more types. These types can include for example application servers operable to process instructions provided by a user or database servers operable to process data stored in one or more data stores in response to a user request. As known for such purposes a customer can also reserve at least a portion of one or more resources which then can be available to that customer or end users associated with that customer. Methods for enabling a user to reserve various resources and resource instances are well known in the art such that detailed description of the entire process and explanation of all possible components will not be discussed in detail herein.

In at least some embodiments a user wanting to utilize a portion of the resources can submit a request that is received to an interface layer of the data plane . The interface layer can include application programming interfaces APIs or other exposed interfaces enabling a user to submit requests to the provider environment. The interface layer in this example can also include other components as well such as at least one Web server routing components network switches and the like. Requests passing through the interface layer can be directed to another layer such as a load balancing layer that can include one or more load balancers implemented in hardware and or software. The load balancer layer can perform various functions known for such purposes such as to determine the relative loads on resources and or utilize various load balancing algorithms in order to spread work over a plurality of resources at least of a certain type or class. Load balancing algorithms include round robin algorithms scheduling algorithms dynamic distribution algorithms and the like.

When a request to access a resource is received to the interface layer information for the request can be directed to a resource manager or other such system service or component configured to manage user accounts and information resource provisioning and usage and other such aspects. A resource manager receiving the request can perform tasks such as to authenticate an identity of the user submitting the request as well as to determine whether that user has an existing account with the resource provider or is associated with a customer having such an account where the account data may be stored in at least one data store in the provider environment. A user can provide any of various types of credentials in order to authenticate an identity of the user to the provider. These credentials can include for example a username and password pair biometric data a digital signature or other such information. The credentials can be validated against information stored for the account. If the user has or is associated with an account with the appropriate permissions status etc. the resource manager can determine whether there are adequate resources available to suit the user s request and if so can provision the resources or otherwise grant access to the corresponding portion of those resources for use by the user for an amount specified by the request. This amount can include for example capacity to process a single request or perform a single task a specified period of time or a recurring renewable period among other such values. If the user does not have a valid account with the provider the user account does not enable access to the type of resources specified in the request or another such reason is preventing the user from obtaining access to such resources a communication can be sent to the user to enable the user to create or modify an account or change the resources specified in the request among other such options.

Once the user is authenticated the account verified and the resources allocated the user can utilize the allocated resource s for the specified capacity amount of data transfer period of time or other such value. In at least some embodiments a user might provide a session token or other such credentials with subsequent requests in order to enable those requests to be processed on that user session. The user can receive a resource identifier specific address or other such information that can enable the client device to communicate with an allocated resource without having to communicate with the resource manager at least until such time as a relevant aspect of the user account changes the user is no longer granted access to the resource or another such aspect changes.

The resource manager or another such system or service in this example can also function as a virtual layer of hardware and software components that handles control functions in addition to management actions as may include provisioning scaling replication etc. The resource manager can utilize dedicated APIs in the interface layer where each API can be provided to receive requests for at least one specific action to be performed with respect to the data environment such as to provision scale clone or hibernate an instance. Upon receiving a request to one of the APIs a Web services portion of the interface layer can parse or otherwise analyze the request to determine the steps or actions needed to act on or process the call. For example a Web service call might be received that includes a request to create a data repository.

An interface layer in at least one embodiment includes a scalable set of customer facing servers that can provide the various APIs and return the appropriate responses based on the API specifications. The interface layer also can include at least one API service layer that in one embodiment consists of stateless replicated servers which process the externally facing customer APIs. The interface layer can be responsible for Web service front end features such as authenticating customers based on credentials authorizing the customer throttling customer requests to the API servers validating user input and marshalling or unmarshalling requests and responses. The API layer also can be responsible for reading and writing database configuration data to from the administration data store in response to the API calls. In many embodiments the Web services layer and or API service layer will be the only externally visible component or the only component that is visible to and accessible by customers of the control service. The servers of the Web services layer can be stateless and scaled horizontally as known in the art. API servers as well as the persistent data store can be spread across multiple data centers in a region for example such that the servers are resilient to single data center failures.

As mentioned there are elaborate constructs built around aspects of a multi tenant resource environment such as identities accounts resource ownership and resource access. In at least some situations the elaborate nature of the environment can require unnecessary complexity and or unnecessary steps when a customer of the provider environment wants to provide end users with access to resources allocated to the customer such as may be used to support a website or application provided by the customer. As mentioned this often involves the customer building a user management system that is able to recognize and validate user credentials determine access to resources for specific types of users and perform various other user management activities. The complexity often results in the customer providing a management system that is susceptible to attack or other unauthorized access which can result in the manipulation of code or data stored by those resources and or extraction of data such as passwords or financial data. Such access can be very damaging to the reputation and business of the customer. Further providing such a system is very time and resource intensive and comes with a significant cost to the customer. The customer also must update the system over time to support new technologies and protocols address new types of threats etc.

Accordingly systems and methods in accordance with various embodiments can provide an account management service or other such system or service that can be leveraged by a customer such that the customer does not need to build or operate a dedicated user management system. Such an account management service can be implemented at the load balancing level in at least some embodiments whether incorporated into or accessible by one or more load balancing components or a load balancing service. By implementing at the load balancing level unauthorized requests can be detected before those requests are received by the targeted resources preventing unauthorized access to data stored by those resources. Further such a location enables a provider of the resource environment to monitor traffic and determine various usage statistics which can be useful for tasks such as billing and resource allocation. Such a service can also leverage other services which can be useful for tasks such as session creation user account creation user authentication and the like. An accounts management service can enable a customer of the provider to build user roles access policies user groups user pools user permissions and or other such data that the accounts management service can utilize to manage users and access to resources under the customer account.

In some embodiments users will submit requests that are received over the at least one network to the interface layer and then directed to the load balancing layer . As mentioned the load balancing layer can perform tasks such as to determine a type of request or type of resource needed to process the request or allocated resources associated with the request and then determine one or more appropriate resources to receive information for the request using a load balancing algorithm or other such process. As part of the load balancing process the load balancer can also direct at least a portion of the requests to a controller component of the account management service such as when the load balancer identifies the request as being at least allegedly associated with a customer account that has subscribed to the accounts management service or otherwise being governed by one or more rules or policies for accessing the target resource s . The controller can check information stored in a request mappings data store or other such location to determine whether a policy exists for the request. For example the controller can determine a uniform resource locator URL or other link or address to which the request was sent and can attempt to locate a policy in the request mappings data store that applies to that URL. If no policy exists the controller can pass the request on to the appropriate resource s return an error message or page or perform another such action. If a policy exists the controller can attempt to determine if the policy is satisfied before determining whether to forward the request to the appropriate resource s or reject the request among other such options. For example a policy for a URL might indicate that a request has to be associated with an existing user account that has permission to access content associated with that URL. If the request is associated with such an account such as may be validated using one or more credentials associated with the request the request can be forwarded appropriately. If not the request can be denied or the request can be directed to a service that enables a user associated with the request to add or update an account to receive such permission. In some embodiments the controller can also check a session data store or other such location to determine whether a current session exists for the user associated with the request. If not the controller can direct information for the request to a session management component not shown or other such device or service operable to initiate a session for the user. Various other such functionality can be implemented as well within the scope of the various embodiments. An advantage to using a session data store is that as additional instances and or resources are implemented or instantiated those instances and or resources can be aware of all existing sessions by contacting the sessions data store using an appropriate API where permitted. Sessions also can be routed to new instances or resources as needed such that the sessions survive in the event of a resource failure or other such event.

In at least some embodiments information can be passed between the account management service and the resources or the applications running on those resources using a conventional protocol approach such as by passing information in HTTP request and response headers. Communicating using such mechanisms enables the account management service to communicate independent of the technology choice of those applications such as whether an application uses Java or PHP. The applications also do not need to perform authorization and or authentication as these tasks are handled by the account management service.

A customer of the provider environment can utilize an interface e.g. a programmable API of the account management service in order to perform certain configuration tasks for the account management service. For example a customer can establish one or more account pools through the service which can enable the service to perform various tasks relating to those pools such as user registration multi factor authentication password establishment and recovery and the like. Such an approach enables the user sign in experience to be integrated into the load balancer layer . The customer can also select one or more policy based controls for requiring login and or session management in order to access certain resources pages or applications supported by those resources etc. The customer can configure or enable various other functionality through the service as well. These can include for example billing protection against denial of service DoS attacks federation integration mobile integration interoperabilty with authenticated endpoints sign out across a resource cluster single sign in across applications automatic bot mitigation support for multiple sign in technologies and password alternatives business analytics and advertising among other such options.

As mentioned the accounts manager component can provide an API or other interface to the account data store . The accounts manager can support functionality such as user or request validation group determination role determination and permission determination and can provide one or more APIs for managing each type of data. The data in the accounting data store can be encrypted using one or more keys or credentials as may be managed by the account management service or a related key management service among other such options. The controller component can be responsible for tasks including security checks such as user authentication authorization and session management. As mentioned the controller can utilize data in a request mappings data store and or session data store in order to perform these tasks. In some embodiments the request mappings data store can contain metadata describing which permissions are required to access which resources. In some embodiments a mapping entry here in JSON might look like the following 

The account management service can handle various types or pools of users as well. For example a website hosted by a set of resources might have anonymous users with no login information available as well as registered users who can obtain different levels of access to the resources based at least in part upon whether the registered users have logged into the system or otherwise provided their respective credentials. The account management service can manage these and other types of users as discussed elsewhere herein which enables customer to provide sites and applications that utilize this functionality without requiring the customer to build and manage such a system which can potentially have security flaws or other issues as mentioned. Another advantage is that user management does not add direct value to the customer and removing the responsibility for such functionality from the user reduces cost and effort on the part of the customer. Further such functionality can provide additional benefits as well such as compliance benefits and elimination or significant reduction of a large class of risk to the business. Leveraging an account management service can also reduce the complexity of the code needed to provide the site or application etc. For example a significant portion of a conventional webpage is dedicated to security but with the security being externalized as a service the amount of security code needed on the page is significantly reduced. Further advances in security can be implemented by the service such that the customer can automatically get the benefit of the update without need to learn implement troubleshoot and manage the new technology. In at least some cases the customer might not even be aware of new security technology that has been implemented. A customer can instead cause user traffic to use the load balancing service as an entry point with the resources sitting behind the load balancing service and traffic can automatically have the security functionality applied and managed by the load balancer service in conjunction with the account management service before the traffic reaches the target resource s . The customer thus can have reduced management responsibility in a management console for the system for example and the architecture for utilizing the resources can be kept relatively simple and or clean.

As mentioned at least a portion of an account management service can also be integrated in a load balancer load balancer service or load balancing layer in at least some embodiments. For example illustrates another example configuration wherein the controller is contained within or integrated into the load balancing layer . Account management can then be performed in conjunction with load balancing such that requests that have not yet been authenticated or authorized or are not yet able to access the target resources do not need to be processed by the load balancing algorithm which can reduce cost and processing time. Such an approach can potentially provide for contention in the event of a DoS attack however such that controls should be put in place to make sure that legitimate traffic can be directed as needed at least to the resources that are not under attack. Accordingly in at least some embodiments incoming requests might still be processed using the load balancing algorithm before being processed by the account management service such that traffic without policies to be enforced or traffic that is already authenticated can be passed on to the target resources and not be blocked by the traffic being processed by the account management service.

It should be understood that the account management service can be implemented in other locations in such an environment as well. As discussed the service can be integrated with a load balancing service or called by the load balancing service. In some embodiments the account management service can be proximate to the resources themselves. The result however is still a configurable load balancer that is capable of performing session management and enforcing authentication and authorization. The load balancer can also enable customers to define and control users as well as the access to resources obtained by those users or this functionality can be provided by another user management service that is coupled to the load balancer.

If a corresponding policy is located the policy can be analyzed to determine any criteria that must be met before providing access or at least a certain type of access to the target resources. As an example this can include determining whether the user has an account that exists and whether the user has permission to access the target resource s in the way requested. In many cases the account management service will attempt to determine whether there is a current session associated with the request. The lack of a current session can indicate that the user has not yet been authenticated which would have triggered the creation and or maintenance of a user session. If a session does not exist a session can be created either before or after the user is authenticated. A determination also can be made as to whether the user has been authenticated such as through presentation of one or more appropriate credentials as well as whether the user is authorized to obtain the type of access associated with the request. The authorization can be determined at least in part by analyzing the criteria set forth in the matching processing policy and determining whether those criteria are met for the request. This can include the user being of a certain type being associated with a certain pool of users having a certain type of account etc. If needed authentication and or authorization can be performed via the account management service. As discussed this can involve verifying user credentials checking status in an account data store having a user log in etc. Once the user is authenticated and authorized the appropriate resources for the request can be determined such as by determining a type of resource for the request according to customer account information and then determining a specific resource of that resource type according to a selected load balancing algorithm. The request or at least information for the request then can be directed to the determined resource s . If the user is unable to be authenticated and or authorized the request might be denied or the user might be directed to other pages as discussed elsewhere herein among other such options.

In at least some embodiments a user who is not yet registered or authenticated can opt in to a user registration workflow that is able to collect information and create a new user account that can be hosted in the provider system via the account management service. The account data store can also store information for resources that do or do not require the user to be logged in have an active account have an active session etc. In some embodiments this can include path matching based at least in part on the subset of the subset of resources being served whereby the load balancer inserts information about the logged in user and the resources can be configured to reject requests without such information. Thus in at least some embodiments a load balancer can require a user to become logged in before access can be granted. Aspects such as session state management identity creation forgotten password management etc. can be managed for pools of users associated with a customer account. The account management service of the load balancer can also handle tasks such as billing integration to allow payment processing and subscription management among other such aspects. And as discussed this and other functionality can be provided via an API programmable hosted service through a load balancer interface.

An account management service as discussed herein can also implement various other functionality whether directly or in conjunction with one or more helper services. As an example such a service can provide for protection against or mitigation of attacks such as denial of service DoS attacks. A load balancer with such functionality can distinguish between legitimate and illegitimate traffic and therefore can enforce various rules for blocking or redirecting traffic. The ability to block traffic before that traffic reaches the targeted resources can prevent those resources from getting overloaded during attempted attacks. Since the load balancer is at least partially under the control of the resource provider who then can have at least some visibility into the received traffic the load balancer can do things that a generic hardware or software mitigation component cannot where those are typically under complete control of the customer. A load balancer can contact the provider and or provider system to request upstream mitigation of the attack traffic. Since the provider has visibility into the type of traffic triggering the alarm and or request the provider can reasonably believe that the traffic is malicious and therefore can push policies to black hole the traffic at a network border rather than at the load balancer which itself could also potentially become overwhelmed by this type of traffic. In at least some embodiments a controller component can utilize data in a request mappings data store to determine what a legitimate request should look like and reject bad requests. Additional policies relating to such aspects as request rate and geographic location can also be used to potentially identify malicious or suspicious requests. Development in machine learning to identify DoS attacks could also be applied without customers having to do the hard work of building the functionality into their applications.

As discussed the service can also provide general account maintenance functionality. This can include many aspects of end user account management such as registration signup credential maintenance password reset data collection statistics generation and the like all supported by the load balancing service. Having visibility into the user traffic enables monitoring of how users utilize and or behave within the resource environment which can be useful for tasks such as resource development and expansion as well as billing and enforcement of access limitations among others. The account management service can also be responsible for disabling accounts after a certain number of failed login attempts and handling password recovery without web applications having to deal with the mundane process of accounts management.

Various other functionality can be provided via the load balancer service as well. For example support for multi factor authentication and or federated identities can be provided through relatively simple configuration. In some embodiments the account management service can provide one or more APIs for sending email to users without the web application needing to know or having access to the user email addresses. Sending messages to groups or users with certain permissions can also be supported. The account management service can also connect to an active directory service for example and provide automatic single sign on support for corporate web applications hosted in the resource provider environment.

Example environments discussed herein for implementing aspects in accordance with various embodiments are primarily Web based as relate to Web services and cloud computing but it should be appreciated that although a Web based environment is used for purposes of explanation different environments may be used as appropriate to implement various embodiments. Client devices used to interact with various embodiments can include any appropriate device operable to send and receive requests messages or information over an appropriate network and convey information back to a user of the device. Examples of such client devices include personal computers smart phones handheld messaging devices laptop computers set top boxes personal data assistants electronic book readers and the like. The network can include any appropriate network including an intranet the Internet a cellular network a local area network or any other such network or combination thereof. Components used for such a system can depend at least in part upon the type of network and or environment selected. Protocols and components for communicating via such a network are well known and will not be discussed herein in detail. Communication over the network can be enabled by wired or wireless connections and combinations thereof.

It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks as discussed and suggested herein. As used herein the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device handling a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the Web server in the form of HTML XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between a client device and a resource can be handled by the Web server. It should be understood that the Web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein.

A data store can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect. The data store is operable through logic associated therewith to receive instructions from a server and obtain update or otherwise process data in response thereto. In one example a user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a Web page that the user is able to view via a browser on the user device. Information for a particular item of interest can be viewed in a dedicated page or window of the browser.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a non transitory computer readable medium storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depictions of various systems and services herein should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

Various aspects can be implemented as part of at least one service or Web service such as may be part of a service oriented architecture. Services such as Web services can communicate using any appropriate type of messaging such as by using messages in extensible markup language XML format and exchanged using an appropriate protocol such as SOAP derived from the Simple Object Access Protocol . Processes provided or executed by such services can be written in any appropriate language such as the Web Services Description Language WSDL . Using a language such as WSDL allows for functionality such as the automated generation of client side code in various SOAP frameworks.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP FTP UPnP NFS and CIFS. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a Web server the Web server can run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and other non transitory computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the a system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

