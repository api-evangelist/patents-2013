---

title: System for accessing data of cloud database using transparent technology
abstract: Disclosed is a system for accessing data of a cloud database via transparent technology, and the system includes at least one channel server and at least one cloud database end. When a connection notice is outputted from an application end, the user channel unit detects a first server address and a first database address in a HTTP data format, and connects to a corresponding channel server via the HTTP tunnel to send a database request, so that the channel server can convert the first database address in the HTTP data format into a TCP/IP data format and then connect to a corresponding database end. Therefore, the application end can access data from the database behind the firewall via the Internet without modifying any program code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09148404&OS=09148404&RS=09148404
owner: Syscom Computer Engineering Co.
number: 09148404
owner_city: Taipei
owner_country: TW
publication_date: 20130906
---
The present invention relates to the field of accessing data of a cloud database and more particularly to a system for accessing data of a cloud database via transparent technology wherein after data of a Transmission Control Protocol Internet Protocol TCP IP format are converted into data of a Hyper Text Transmission Protocol HTTP format the data are transmitted to a server through a channel and then the HTTP format is converted back to the TCP IP format before the data are transmitted to a cloud database end in order to break through the blocking of a firewall and transmit the data successfully.

Open Data Base Connectivity ODBC built on the client server architecture provides a standard Application Programming Interface API for transmitting a Structured Query Language SQL instruction to access data from a remote end database through a network layer. The ODBC creates the possibility of using an open database and the architecture of the ODBC is mainly divided into four units respectively application driver manager driver and data source. The application externally provides users a talking interface and internally executes a data preparation calls an ODBC program function transmits a SQL instruction and receives and displays results returned from the database. The driver manager and the driver are dynamic link library dll files and the driver manager assists the application to load the source driver and connect to the data source and the driver is mainly provided for executing a relative ODBC function and communicating with the corresponding data source. When the application calls an ODBC function such as SQLConnect or SQLDriverConnect the driver manager will load the relative driver and call the application so that the application can complete the connection by a corresponding driver without the need of considering the type of data source.

Obviously the ODBC creates the independent characteristic between the application and the database. However in the aforementioned client server architecture the application requires maintaining an uninterruptable smooth connection before Commit Rollback or Timeout completes. Now if the database is hidden behind a firewall for the purpose of network security the application will be unable to use the original driver directly to connect the database but it will use a VB6 or a PHP language to edit the program code of the driver and the function installed in the driver manager and further use the TCP IP architecture to build another communication channel before breaking through the firewall to complete the connection and thus causing difficulties and inconvenience to the application. In addition if the database is a cloud system then the level of complexity of editing the program code and the function will become higher and thus affecting the quality of accessing data of the database.

To overcome the aforementioned problem it is a main subject of the present invention to create an additional channel by using the present common HTTP tunneling to break through the firewall of the network so as to connect to a cloud database behind a firewall without modifying that the program code and function of the application.

In view of the problems of the prior art it is a primary objective of the present invention to provide a system for accessing data of a cloud database via transparent technology and the system connects to a cloud database behind a firewall by using a HTTP tunnel and allows users to access data without requiring the modification of any program code of the application so as to improve the operating convenience and the using satisfaction of the application.

To achieve the aforementioned objectives the present invention provides a system for accessing data from a cloud database via transparent technology and the system is applied in a client server architecture and comprises an application end and at least one cloud database end and provided for the application end to access data from the database behind a firewall via the Internet without requiring any modification of a program code characterized in that the application end pre executes a first database configuration file and the system for accessing data of a cloud database via transparent technology comprises a user channel unit and at least one channel server and the user channel unit pre executes a second database configuration file to obtain an address list and connect to the application end and the address list contains at least one first server address and at least one first database address and when the user channel unit receives a connection notice outputted from the application end the address list is inquired to obtain the first server address and the first database address in the HTTP data format according to the connection notice and a HTTP tunnel is provided for transmitting a database request containing the first database address to the channel server through the firewall connected to the channel server of the first server address so that the channel server can analyze the database request and convert the first database address in the HTTP data format to a TCP IP data format and then complete a connection between the application end and the database end according to the first database address in the TCP IP data format corresponding to the database end so as to complete the connection between the application end and the database end.

Wherein the application end supports an Open Data Base Connectivity ODBC driver capable of connecting a plurality of database ends simultaneously and the user channel unit and the channel server create the HTTP tunnel by using the Socket Over Http Tunneling SOHT technology. The application end pre executes the first database configuration file to designate a port for connecting the user channel unit so that when the user channel unit receives the connection notice the application end is connected to a network through the port so that users can access data with the database end by installing and executing the configuration file without requiring any modification of the complicated program code of the application end.

If there are more than one database end the system for accessing data of a cloud database via transparent technology further comprises a connection management server and the connection management server connects to the user channel unit through the firewall by the HTTP tunnel. The connection management server pre executes a third database configuration file to obtain the address list and record the first server address and the first database address. When the user channel unit receives the connection notice an acknowledge instruction is outputted so that when the connection management server detects the using status of each the database end to obtain the database end capable of providing the best service the connection management server captures the corresponding first server address and first database address from the address list to produce the second server address and the second database address to be fed back to the user channel unit so that the user channel unit can output the database request and the second database address to the channel server corresponding to the second server address through the HTTP Tunnel. The channel server analyzes the database request and converts the second database address in the HTTP data format into a TCP IP data format and then connects to the database end corresponding to the second database address so as to complete the connection between the application end and the database end.

In summation the present invention applies the conventional HTTP transparent technology to a database management system and uses the user channel unit and the channel server to create the HTTP Tunnel while converting the data format so that data in the HTTP format can break through the firewall easily to transmit the data to cloud database or read data from the cloud database. Regardless of the cloud database having or not having the firewall for the network security purpose the present invention allows users to access data of the database end directly after completing the setup of the configuration files without requiring any modification of the program code of the application end so that the invention can ensure the network security of the database as well as the convenience of users operation. In addition if the database end is not hidden behind the firewall the present invention still allows the application end to connect to the database end directly through the original TCP IP.

The technical content of the present invention will become apparent with the detailed description of preferred embodiments and the illustration of related drawings as follows.

With reference to for a schematic view and a flow chart of the first implementation mode of a preferred embodiment of the present invention respectively the system for accessing data of a cloud database via transparent technology is applied in a client server architecture and comprises an application end a user channel unit at least one channel server and at least one cloud database end and wherein a firewall is built between the user channel unit and the channel server . The application end supports an ODBC driver and connects to the user channel unit through TCP IP. The user channel unit and the channel server create a HTTP Tunnel between them by using the SOHT technology to break through the firewall for a connection with each other. The channel server connects to the database end through TCP IP. The system allows the application end to access data from the database behind the firewall via the Internet without requiring any modification of the program code according to the following procedure 

to designate a port 12345 to the user channel unit . In the meantime the user channel unit executes a second database configuration file 

to know the port of the application end and obtain an address list wherein the address list comprises a first server address such as 172.16.220.116 8085 and 127.0.0.1 8080 and a first database address such as 172.16.220.114 2455 and 172.16.220.56 33557.

Step S When the application end wants to connect to the database end a connection notice in a TCP IP data format is outputted to the user channel unit so that the user channel unit executes the following instruction java Dclouddb.properties c . . . clouddb.properties jar cloud client.jar before entering into an operating status.

Step S The user channel unit as shown in receives the connection notice and then connects to the application end through a fixed port via a network.

Step S The address list is inquired to obtain the corresponding first server address and the first database address in the HTTP data format according to the connection notice and then the HTTP Tunnel is used to connect to the channel server corresponding to the first server address through the firewall .

Step S The user channel unit transmits a database request to the channel server and the database request contains the first database address .

Step S The channel server receives and analyzes the database request to convert the database request in the HTTP data format into a TCP IP data format and then connects to the corresponding database end according to the first database address in the TCP IP data format.

Step S After the connection between the application end and the database end is completed the user channel unit converts the data transmitted from the application end to transmit the data to the database end via the channel server or to convert and transmit the data of the database transmitted from the channel server to the application end via the channel server .

When more than one database end are used and the issues of different database ends having different data loads network transmission rates and computing performance are taken into consideration the system as shown in further comprises a connection management server . The connection management server also uses the SOHT technology to create another a HTTP Tunnel with the user channel unit for breaking through the firewall in order to connect with each other so that the system can be operated as shown in the flow chart of .

Step S The application end pre executes the first database configuration file to designate the port for connecting the user channel unit and the user channel unit executes the second database configuration file to know the port of the application end and obtain the address list . In the meantime the connection management server executes a third database configuration file 

Step When the application end wants to connect to the database end the connection notice is outputted to the user channel unit so that the user channel unit executes the following instruction java Dclient.port 12345 jar cloud client.jar before entering into the operating status.

Step S The user channel unit as shown in uses a fixed port to connect the application end via a network and outputs an acknowledge instruction to the connection management server so that the connection management server enters into the following step S.

S The using status of each database end is detected to compute and obtain the database end capable of providing the best service and then the corresponding first server address and first database address are captured from the address list to produce a second server address and a second database address respectively and feeds link data to the user channel unit wherein the link data include a device name of the database end capable of providing the best service the second database address and the second server address and the second database address and the second server address are in the HTTP data format.

Step S The user channel unit uses the second server address to connect the corresponding channel server directly through the HTTP Tunnel according to the link data.

Step S The user channel unit transmits the database request to the channel server and the database request contains the second database address based on the receive result of the link information.

Step S The channel server receives and analyzes the database request to convert the requested data in the HTTP data format into a TCP IP data format and connects to the database end according to the second database address.

Step S After the connection between the application end and the database end is completed the user channel unit converts the data transmitted from the application end and transmits the data to the database end via the channel server or converts and transmits the data of the database from the channel server to the application end .

In this preferred embodiment the application end still can use the original TCP IP network chain to connect the corresponding database end even if the database end is not hidden behind the firewall .

