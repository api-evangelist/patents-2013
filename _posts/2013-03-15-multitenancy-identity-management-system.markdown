---

title: Multi-tenancy identity management system
abstract: A multi-tenant identity management (IDM) system enables IDM functions to be performed relative to various different customers' domains within a shared cloud computing environment and without replicating a separate IDM system for each separate domain. The IDM system can provide IDM functionality to service instances located within various different customers' domains while enforcing isolation between those domains. A cloud-wide identity store can contain identity information for multiple customers' domains, and a cloud-wide policy store can contain security policy information for multiple customers' domains. The multi-tenant IDM system can provide a delegation model in which a domain administrator can be appointed for each domain, and in which each domain administrator can delegate certain roles to other user identities belong to his domain. Service instance-specific administrators can be appointed by a domain administrator to administer to specific service instances within a domain.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09276942&OS=09276942&RS=09276942
owner: Oracle International Corporation
number: 09276942
owner_city: Redwood Shores
owner_country: US
publication_date: 20130315
---
The present application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 698 463 filed Sep. 7 2012 titled SHARED IDENTITY MANAGEMENT ARCHITECTURE the entire contents of which are incorporated herein by reference for all purposes U.S. Provisional Patent Application No. 61 698 413 filed Sep. 7 2012 titled TENANT AUTOMATION SYSTEM the entire contents of which are incorporated herein by reference for all purposes U.S. Provisional Patent Application No. 61 698 459 filed Sep. 7 2012 titled SERVICE DEVELOPMENT INFRASTRUCTURE and U.S. Provisional Patent Application No. 61 785 299 filed Mar. 14 2013 titled CLOUD INFRASTRUCTURE the entire contents of which are incorporated herein by reference for all purposes.

The disclosure below relates generally to computer security and more specifically to identity management within a cloud computing environment that is partitioned into various separate identity domains.

Cloud computing involves the use of computing resources e.g. hardware and software that are delivered as a service over a network typically the Internet . Cloud computing entrusts remote services with a user s data software and computation. Cloud computing can be used to offer software as as service Saas or a platform as a service PaaS for example. In a business model using SaaS users can be provided access to application software and databases. The cloud providers can manage the infrastructure and platforms on which the applications execute. SaaS providers generally price applications using a subscription fee. SaaS can allow a business the potential to reduce information technology operational costs by outsourcing hardware and software maintenance and support to the cloud provider. This outsourcing can enable the business to reallocate information technology operations costs away from hardware software spending and personnel expenses towards meeting other information technology goals. Furthermore with applications hosted centrally updates can be released without the need for users to install new software. However because users data are stored on the cloud provider s server some organizations can be concerned about potential unauthorized access to that data.

End users can access cloud based applications through a web browser or a light weight desktop or mobile application. Meanwhile the business software and users data can be stored on servers at a location that is remote from that business and from those users. Cloud computing at least theoretically allows enterprises to deploy their applications more rapidly with improved manageability and less maintenance. Cloud computing at least theoretically enables information technology managers to adjust resources more quickly to meet sometimes fluctuating and unpredictable business demands.

Identity management IDM is the task of controlling information about users of computer system. Such information can include information that authenticates the identities of such users. Such information can include information that describes which data those users are authorized to access. Such information can include information that describes which actions those users are authorized to perform relative to various system resources e.g. files directories applications communication ports memory segments etc. IDM can also include the management of descriptive information about each user and about how and by whom that descriptive information can be accessed and modified.

Potentially a cloud computing environment could include a separate IDM system or separate instance of an IDM system for each separate organization that used the cloud computing environment. However such a scheme could be seen as being duplicative of effort and as being wasteful of computing resources.

Certain embodiments of the invention involve an identity management IDM system that is implemented in a cloud computing environment and that is partitioned into multiple separate identity domains.

In an embodiment of the invention a set of constructs all align together to create an abstraction of or tenant sliced view of a single IDM system. This single IDM system can include multiple separate components or sub systems. The IDM system can be shared among multiple independent and separate tenants or IDM system customers so that the IDM system is more densely utilized. Thus there is no need for a separate IDM system to be instantiated for each separate customer. The single IDM system can be configured such that for each tenant of the IDM system a virtual view of the IDM system that is specific to that tenant can be presented to that tenant s users.

Embodiments of the invention can use the concept of virtualization. Separate views of the IDM system can be virtualized within the single IDM system in a manner that is conceptually similar to the manner in which multiple separate virtual machines can be virtualized on a single host computing device. This virtualization can be achieved by configuring the IDM system in a specific manner. The IDM system can involve multiple separate layers including upper layers and lower layers that are conceptually vertically stacked one on top of the other. The upper layers at least can be partitioned. In the IDM system various different services e.g. authentication and or authorization services can be associated with various different tenants of the IDM system. The IDM system can isolate each tenant so that each tenant is capable of interacting only with the IDM system slice or partition that is dedicated to that tenant. Thus the IDM system can enforce isolation between tenants.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However it will be apparent that the invention may be practiced without these specific details.

Certain embodiments of the present invention provide techniques for automating the provisioning managing and tracking of services provided by a cloud infrastructure system.

In certain embodiments a cloud infrastructure system may include a suite of applications middleware and database service offerings that are delivered to a customer in a self service subscription based elastically scalable reliable highly available and secure manner. An example of such a cloud infrastructure system is the Oracle Public Cloud provided by the present assignee.

A cloud infrastructure system may provide many capabilities including but not limited to provisioning managing and tracking a customer s subscription for services and resources in the cloud infrastructure system providing predictable operating expenses to customers utilizing the services in the cloud infrastructure system providing robust identity domain separation and protection of a customer s data in the cloud infrastructure system providing customers with a transparent architecture and control of the design of the cloud infrastructure system providing customers assured data protection and compliance with data privacy standards and regulations providing customers with an integrated development experience for building and deploying services in the cloud infrastructure system and providing customers with a seamless integration between business software middleware database and infrastructure services in the cloud infrastructure system.

In certain embodiments services provided by the cloud infrastructure system may include a host of services that are made available to users of the cloud infrastructure system on demand such as online data storage and backup solutions Web based e mail services hosted office suites and document collaboration services database processing managed technical support services and the like. Services provided by the cloud infrastructure system can dynamically scale to meet the needs of its users. A specific instantiation of a service provided by cloud infrastructure system is referred to herein as a service instance. In general any service made available to a user via a communication network such as the Internet from a cloud service provider s system is referred to as a cloud service. Typically in a public cloud environment servers and systems that make up the cloud service provider s system are different from the customer s own on premises servers and systems. For example a cloud service provider s system may host an application and a user may via a communication network such as the Internet on demand order and use the application.

A service in a computer network cloud infrastructure includes protected computer network access to storage a hosted database a hosted web server a software application or other service provided by a cloud vendor to a user or as otherwise known in the art. For example a service can include password protected access to remote storage on the cloud through the Internet. As another example a service can include a web service based hosted relational database and script language middleware engine for private use by a networked developer. As another example a service can include access to an email software application hosted on a cloud vendor s web site.

Cloud infrastructure system may provide the cloud services via different deployment models. For example services may be provided under a public cloud model where cloud infrastructure system is owned by an organization selling cloud services e.g. owned by Oracle and the services are made available to the general public or different industry enterprises. As another example services may be provided under a private cloud model where cloud infrastructure system is operated solely for a single organization and may provide services for one or more entities within the organization. The cloud services may also be provided under a community cloud model where cloud infrastructure system and the services provided by system are shared by several organizations in a related community. The cloud services may also be provided under a hybrid cloud model which is a combination of two or more different models.

As shown in cloud infrastructure system may comprise multiple components which working in conjunction enable provision of services provided by cloud infrastructure system . In the embodiment illustrated in cloud infrastructure system includes a SaaS platform a PaaS platform an IaaS platform infrastructure resources and cloud management functionality . These components may be implemented in hardware or software or combinations thereof.

SaaS platform is configured to provide cloud services that fall under the SaaS category. For example SaaS platform may provide capabilities to build and deliver a suite of on demand applications on an integrated development and deployment platform. SaaS platform may manage and control the underlying software and infrastructure for providing the SaaS services. By utilizing the services provided by SaaS platform customers can utilize applications executing on cloud infrastructure system . Customers can acquire the application services without the need for customers to purchase separate licenses and support.

Various different SaaS services may be provided. Examples include without limitation services that provide solutions for sales performance management enterprise integration and business flexibility for large organizations and the like. In one embodiment the SaaS services may include Customer Relationship Management CRM services e.g. Fusion CRM services provided by the Oracle cloud Human Capital Management HCM Talent Management services and the like. CRM services may include services directed to reporting and management of a sales activity cycle to a customer and others. HCM Talent services may include services directed to providing global workforce lifecycle management and talent management services to a customer.

Various different PaaS services may be provided by PaaS platform in a standardized shared and elastically scalable application development and deployment platform. Examples of PaaS services may include without limitation services that enable organizations such as Oracle to consolidate existing applications on a shared common architecture as well as the ability to build new applications that leverage the shared services provided by the platform. PaaS platform may manage and control the underlying software and infrastructure for providing the PaaS services. Customers can acquire the PaaS services provided by cloud infrastructure system without the need for customers to purchase separate licenses and support. Examples of PaaS services include without limitation Oracle Java Cloud Service JCS Oracle Database Cloud Service DBCS and others.

By utilizing the services provided by PaaS platform customers can utilize programming languages and tools supported by cloud infrastructure system and also control the deployed services. In some embodiments PaaS services provided by the cloud infrastructure system may include database cloud services middleware cloud services e.g. Oracle Fusion Middleware services and Java cloud services . In one embodiment database cloud services may support shared service deployment models that enable organizations to pool database resources and offer customers a database as a service in the form of a database cloud middleware cloud services provides a platform for customers to develop and deploy various business applications and Java cloud services provides a platform for customers to deploy Java applications in the cloud infrastructure system . The components in SaaS platform and PaaS platform illustrated in are meant for illustrative purposes only and are not intended to limit the scope of embodiments of the present invention. In alternate embodiments SaaS platform and PaaS platform may include additional components for providing additional services to the customers of cloud infrastructure system .

Various different IaaS services may be provided by IaaS platform . The IaaS services facilitate the management and control of the underlying computing resources such as storage networks and other fundamental computing resources for customers utilizing services provided by the SaaS platform and the PaaS platform.

In certain embodiments cloud infrastructure system includes infrastructure resources for providing the resources used to provide various services to customers of the cloud infrastructure system . In one embodiment infrastructure resources includes pre integrated and optimized combinations of hardware such as servers storage and networking resources to execute the services provided by the PaaS platform and the SaaS platform.

In certain embodiments cloud management functionality provides comprehensive management of cloud services e.g. SaaS PaaS IaaS services in the cloud infrastructure system . In one embodiment cloud management functionality includes capabilities for provisioning managing and tracking a customer s subscription received by the cloud infrastructure system and the like.

Various types of users may interact with cloud infrastructure system . These users may include for example end users that can interact with cloud infrastructure system using various client devices such as desktops mobile devices tablets and the like. The users may also include developers programmers who may interact with cloud infrastructure system using command line interfaces CLIs application programming interfaces APIs through various integrated development environments IDEs and via other applications. User may also include operations personnel . These may include personnel of the cloud service provider or personnel of other users.

Application services layer identifies various cloud services that may be offered by cloud infrastructure system . These services may be mapped to or associated with respective software components e.g. Oracle WebLogic server for providing Java services oracle database for providing database services and the like via a service integration and linkages layer .

In certain embodiments a number of internal services may be provided that are shared by different components or modules of cloud infrastructure system and by the services provided by cloud infrastructure system . These internal shared services may include without limitation a security and identity service an integration service an enterprise repository service an enterprise manager service a virus scanning and white list service a high availability backup and recovery service service for enabling cloud support in IDEs an email service a notification service a file transfer service and the like.

Runtime infrastructure layer represents the hardware layer on which the various other layers and components are built. In certain embodiments runtime infrastructure layer may comprise one Oracle s Exadata machines for providing storage processing and networking resources. An Exadata machine may be composed of various database servers storage Servers networking resources and other components for hosting cloud services related software layers. In certain embodiments the Exadata machines may be designed to work with Oracle Exalogic which is an engineered system providing an assemblage of storage compute network and software resources. The combination of Exadata and Exalogic provides a complete hardware and software engineered solution that delivers high performance highly available scalable secure and a managed platform for providing cloud services.

It should be appreciated that cloud infrastructure system depicted in may have other components than those depicted in . Further the embodiment shown in is only one example of a cloud infrastructure system that may incorporate an embodiment of the invention. In some other embodiments cloud infrastructure system may have more or fewer components than shown in may combine two or more components or may have a different configuration or arrangement of components.

Client computing devices and may be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems or any other computing device. For example client computing devices and may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating over a network e.g. network described below . Although exemplary system environment is shown with three client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with cloud infrastructure system .

A network may facilitate communications and exchange of data between clients and and cloud infrastructure system . Network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.1X suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

Cloud infrastructure system may comprise one or more computers and or servers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. The computing devices that make up cloud infrastructure system may run any of operating systems or a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers Java servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM and the like.

In various embodiments cloud infrastructure system may be adapted to automatically provision manage and track a customer s subscription to services offered by cloud infrastructure system . In one embodiment as depicted in the components in cloud infrastructure system include an Identity Management IDM module a services module a Tenant Automation System TAS module a Service Deployment Infrastructure SDI module an Enterprise Manager EM module one or more front end web interfaces such as a store user interface UI a cloud user interface UI and a support user interface UI an order management module sales personnel operator personnel and an order database . These modules may include or be provided using one or more computers and or servers which may be general purpose computers specialized server computers server farms server clusters or any other appropriate arrangement and or combination. In one embodiment one or more of these modules can be provided by cloud management functionality or IaaS platform in cloud infrastructure system . The various modules of the cloud infrastructure system depicted in are meant for illustrative purposes only and are not intended to limit the scope of embodiments of the present invention. Alternative embodiments may include more or fewer modules than those shown in .

In an exemplary operation at 1 a customer using a client device such as client device or may interact with cloud infrastructure system by browsing the various services provided by cloud infrastructure system and placing an order for a subscription for one or more services offered by cloud infrastructure system . In certain embodiments the customer may access store UI or cloud UI and place a subscription order via these user interfaces.

The order information received by cloud infrastructure system in response to the customer placing an order may include information identifying the customer and one or more services offered by the cloud infrastructure system that the customer intends to subscribe to. A single order may include orders for multiple services. For instance a customer may login to cloud UI and request a subscription for a CRM service and a Java cloud service in the same order.

Additionally the order may also include one or more service levels for the ordered services. As used herein and as will be discussed in greater detail below a service level for a service determines the amount of resources to be allocated for providing the requested service in the context of the subscription such as the amount of storage amount of computing resources data transfer facilities and the like. For example a basic service level may provide a minimum level of storage data transmission or number of users and higher service levels may include additional resources.

In addition in some instances the order information received by cloud infrastructure system may include information indicative of a customer level and the time period during which the service is desired. The customer level specifies the priority of the customer making the subscription request. In one example the priority may be determined based on the quality of service that the cloud infrastructure system guarantees or promises the customer as specified by a Service Level Agreement SLA agreed to between the customer and the provider of the cloud services. In one example the different customer levels include a basic level a silver level and a gold level. The time period for a service may specify the start date and time for the service and the time period for which the service is desired e.g. a service end date and time may be specified .

In one embodiment a customer may request a new subscription via store UI or request for a trial subscription via cloud UI . In certain embodiments store UI may represent the service provider s eCommerce store front e.g. www.oracle.com store for Oracle Cloud services . Cloud UI may represent a business interface for the service provider. Consumer can explore available services and sign up for interested services through cloud UI . Cloud UI captures user input necessary for ordering trial subscriptions provided by cloud infrastructure system . Cloud UI may also be used to view account features and configure the runtime environment located within cloud infrastructure system . In addition to placing an order for a new subscription store UI may also enable the customer to perform other subscription related tasks such as changing the service level of a subscription extending the term of the subscription increasing the service level of a subscription terminating an existing subscription and the like.

After an order has been placed per 1 at 2 the order information that is received via either store UI or cloud UI is stored in order database which can be one of several databases operated by cloud infrastructure system and utilized in conjunction with other system elements. While order database is shown logically as a single database in in actual implementation this may comprise one or more databases.

At 3 the order is forwarded to order management module . Order management module is configured to perform billing and accounting functions related to the order such as verifying the order and upon verification booking the order. In certain embodiments order management module may include a contract management module and an install base module. The contract management module may store contract information associated with the customer s subscription order such as the customer s service level agreement SLA with cloud infrastructure system . The install base module may include detailed descriptions of the services in the customer s subscription order. In addition to order information the install base module may track installation details related to the services product status and support service history related to the services. As a customer orders new services or upgrades existing ones the install base module may automatically add new order information.

At 4 information regarding the order is communicated to TAS module . In one embodiment TAS module utilizes the order information to orchestrate the provisioning of services and resources for the order placed by the customer. At 5 TAS component orchestrates the provisioning of resources to support the subscribed services using the services of SDI module . At 6 TAS module provides information related to the provisioned order received from SDI module to services module . In some embodiments at 7 SDI module may also use services provided by services module to allocate and configure the resources needed to fulfill the customer s subscription order.

At 8 services module sends a notification to the customers on client devices and regarding the status of the order.

In certain embodiments TAS module functions as an orchestration component that manages business processes associated with each order and applies business logic to determine whether an order should proceed to provisioning. In one embodiment upon receiving an order for a new subscription TAS module sends a request to SDI module to allocate resources and configure those resources needed to fulfill the subscription order. SDI module enables the allocation of resources for the services ordered by the customer. SDI module provides a level of abstraction between the cloud services provided by cloud infrastructure system and the physical implementation layer that is used to provision the resources for providing the requested services. TAS module may thus be isolated from implementation details such as whether or not services and resources are actually provisioned on the fly or pre provisioned and only allocated assigned upon request.

In certain embodiments a user may use store UI to directly interact with order management module to perform billing and accounting related functions such as verifying the order and upon verification booking the order. In some embodiments instead of a customer placing an order at 9 the order may instead be placed by sales personnel on behalf of the customer such as a customer s service representative or sales representative. Sales personnel may directly interact with order management module via a user interface not shown in provided by order management module for placing orders or for providing quotes for the customer. This for example may be done for large customers where the order may be placed by the customer s sales representative through order management module . The sales representative may set up the subscription on behalf of the customer.

EM module is configured to monitor activities related to managing and tracking a customer s subscription in cloud infrastructure system . EM module collects usage statistics for the services in the subscription order such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time. At 10 a host operator personnel who may be an employee of a provider of cloud infrastructure system may interact with EM module via an enterprise manager user interface not shown in to manage systems and resources on which services are provisioned within cloud infrastructure system .

Identity management IDM module is configured to provide identity services such as access management and authorization services in cloud infrastructure system . In one embodiment IDM module controls information about customers who wish to utilize the services provided by cloud infrastructure system . Such information can include information that authenticates the identities of such customers and information that describes which actions those customers are authorized to perform relative to various system resources e.g. files directories applications communication ports memory segments etc. IDM module can also include the management of descriptive information about each customer and about how and by whom that descriptive information can be accessed and modified.

In one embodiment information managed by the identity management module can be partitioned to create separate identity domains. Information belonging to a particular identity domain can be isolated from all other identity domains. Also an identity domain can be shared by multiple separate tenants. Each such tenant can be a customer subscribing to services in the cloud infrastructure system . In some embodiments a customer can have one or many identity domains and each identity domain may be associated with one or more subscriptions each subscription having one or many services. For example a single customer can represent a large entity and identity domains may be created for divisions departments within this large entity. EM module and IDM module may in turn interact with order management module at 11 and 12 respectively to manage and track the customer s subscriptions in cloud infrastructure system .

In one embodiment at 13 support services may also be provided to the customer via a support UI . In one embodiment support UI enables support personnel to interact with order management module via a support backend system to perform support services at 14 . Support personnel in the cloud infrastructure system as well as customers can submit bug reports and check the status of these reports via support UI .

Other interfaces not shown in may also be provided by cloud infrastructure system . For example an identity domain administrator may use a user interface to IDM module to configure domain and user identities. In addition customers may log into a separate interface for each service they wish to utilize. In certain embodiments a customer who wishes to subscribe to one or more services offered by cloud infrastructure system may also be assigned various roles and responsibilities. In one embodiment the different roles and responsibilities that may be assigned for a customer may include that of a buyer an account administrator a service administrator an identity domain administrator or a user who utilizes the services and resources offered by cloud infrastructure system . The different roles and responsibilities are described more fully in below.

At a customer s subscription order is processed. The processing may include validating the order in one example. Validating the order includes ensuring that the customer has paid for the subscription and ensuring that the customer does not already have subscriptions with the same name or that the customer is not attempting to create multiple subscriptions of the same type in the same identity domain for subscription types for which this is disallowed such as in the case of a CRM service . Processing may also include tracking the status of an order for each order that is being processed by cloud infrastructure system .

At a business process associated with the order is identified. In some instances multiple business processes may be identified for an order. Each business process identifies a series of steps for processing various aspects of the order. As an example a first business process may identify one or more steps related to provisioning physical resources for the order a second business process may identify one or more steps related to creating an identity domain along with customer identities for the order a third business process may identify one or more steps for related to performing back office functions such as creating a customer record for the user performing accounting functions related to the order and the like. In certain embodiments different business processes may also be identified for processing different services in an order. For example different business process may be identified to process a CRM service and a database service.

At the business process identified for the order in is executed. Executing the business process associated with the order may include orchestrating the series of steps associated with the business process identified in step . For example executing a business process related to provisioning physical resources for the order may include sending a request to SDI module to allocate resources and configure those resources needed to fulfill the subscription order.

At a notification is sent to the customer regarding the status of the provisioned order. Additional description related to performing steps and is provided in detail in .

In one embodiment order processing module receives an order from a customer from one or more input sources . For example order processing module may directly receive an order via cloud UI or store UI in one embodiment. Alternatively order processing module may receive an order from order management module or order database . Order processing module then processes the order. In certain embodiments processing the order includes generating a customer record which includes information about the order such as a service type a service level a customer level the type of resources the amount of the resources to be allocated to the service instance and a time period during which the service is desired. As part of the processing order processing module also determines whether the order is a valid order. This includes ensuring that the customer does not already have subscriptions with the same name or that the customer is not attempting to create multiple subscriptions of the same type in the same identity domain for subscription types where this is disallowed such as in the case of a fusion CRM service .

Order processing module may also perform additional processing on the order. Processing may include tracking the status of an order for each order that is being processed by cloud infrastructure system . In one embodiment order processing module may process each order to identify a number of states pertaining to the order. In one example the different states of an order may be an initialized state a provisioned state an active state an administration required state an error state and the like. An initialized state refers to the state of a new order a provisioned state refers to the state of an order once the services and resources for the order have been provisioned. An order is in an active state when the order has been processed by TAS module and a notification to that effect has been delivered to the customer. An order is in an administration required state when intervention by an administrator is needed to resolve the issue. The order is in an error state when the order cannot be processed. In addition to maintaining the order progress status order processing module also maintains detailed information about any failures encountered during process execution. In other embodiments and as will be discussed in detail below the additional processing performed by order processing module may also include changing the service level for a service in the subscription changing the services included in the subscription extending the time period of the subscription and canceling the subscription or specifying different service levels for different time periods in the subscription.

After an order has been processed by order processing module business logic is applied to determine whether the order should proceed to provisioning. In one embodiment as part of orchestrating the order business process identifier receives the processed order from order processing module and applies business logic to identify a particular business process to use for the order being processed. In one embodiment business process identifier may utilize information stored in a service catalog to determine the particular business process to be used for the order. In one embodiment and as discussed in multiple business processes may be identified for an order and each business process identifies a series of steps for processing various aspects of the order. In another embodiment and as discussed above different business processes may be defined for different types of services or combinations of services such as a CRM service or a database service. In one embodiment service catalog may store information mapping an order to a particular type of business process. Business process identifier may use this information to identify a specific business process for the order being processed.

Once a business process has been identified business process identifier communicates the particular business process to be executed to business process executor . Business process executor then executes steps of the identified business process by operating in conjunction with one or more modules in the cloud infrastructure system . In some embodiments business process executor acts as an orchestrator for performing the steps associated with a business process. For example the business process executor may interact with order processing module to execute steps in a business process that identifies workflows related to the order determines the overage of services in the order or identifies service components related to the order.

In one example business process executor interacts with SDI module to execute steps in a business process for allocating and provisioning resources for services requested in the subscription order. In this example for each step in the business process business process executor may send a request to SDI component to allocate resources and configure resources needed to fulfill the particular step. SDI component is responsible for the actual allocation of the resources. Once all the steps of the business processes of an order have been executed business process executor may send a notification to the customer of the processed order by utilizing the services of services component . The notification may include sending an email notification to the customer with details of the processed order. The email notification may also include deployment information related to the order to enable the customer to access the subscribed services.

In certain embodiments TAS module may provide one or more TAS Application Programming Interfaces APIs that enable TAS module to interact with other modules in cloud infrastructure system and for other modules to interact with TAS module . For example the TAS APIs may include a system provisioning API that interacts with SDI module via an asynchronous Simple Object Access Protocol SOAP based web services call to provision resources for the customer s subscription order. In one embodiment TAS module may also utilize the system provisioning API to accomplish system and service instance creation and deletion switch a service instance to an increased service level and associate service instances. An example of this is the association of a Java service instance to a fusion applications service instance to allow secure web service communications. The TAS APIs may also include a notification API that interacts with the services module to notify the customer of a processed order. In certain embodiments the TAS module also periodically propagates subscription information outages and notifications e.g. planned downtime to services component .

In certain embodiments TAS module periodically receives usage statistics for each of the provisioned services such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time from EM module . Overage framework utilizes the usage statistics to determine whether over use of a service has occurred and if so to determine how much to bill for the overage and provides this information to order management module .

In certain embodiments TAS module includes an order workflow identification module that is configured to identify one or more workflows associated with processing a customer s subscription order. In certain embodiments TAS module may include a subscription order generation framework for generating subscription orders for a customer when the customer places a subscription order for one or more services offered by the cloud infrastructure system . In one embodiment a subscription order includes one or more service components responsible for providing the services requested by a customer in the subscription order.

Additionally TAS module may also interact with one or more additional databases such as a Tenant Information System TIS database to enable the provisioning of resources for one or more services subscribed by the customer while taking into consideration historical information if any available for the customer. TIS database may include historical order information and historical usage information pertaining to orders subscribed by the customer.

TAS module may be deployed using different deployment models. In certain embodiments the deployment includes a central component that interfaces with one or more distributed components. The distributed components may for example be deployed as various data centers and accordingly may also be referred to as data center components. The central component includes capabilities to process orders and co ordinate services in cloud infrastructure system while the data center components provide capabilities for provisioning and operating the runtime system that provides the resources for the subscribed services.

In one embodiment the responsibilities of TAS central component include without limitation to provide a centralized component for receiving customer orders performing order related business operations such as creating a new subscription changing the service level for a service in the subscription changing the services included in the subscription and extending the time period of the subscription or canceling the subscription. The responsibilities of TAS central component may also include maintaining and serving subscription data needed by cloud infrastructure system and interfacing with order management module support UI cloud UI and store UI to handle all the back office interactions.

In one embodiment the responsibilities of TAS DCs and include without limitation performing runtime operations for orchestrating the provisioning the resources for one or more services subscribed by the customer. TAS DCs and also include capabilities to perform operations such as locking unlocking enabling or disabling a subscription order collecting metrics related to the order determining the status of the order and sending notification events related to the order.

In an exemplary operation of the distributed TAS system shown in TAS central component initially receives an order from a customer via cloud UI store UI via order management system or via order database . In one embodiment the customer represents a buyer who has financial information and the authority to order and or change a subscription. In one embodiment the order information includes information identifying the customer the type of services that the customer wishes to subscribe to and an account administrator who will be responsible for handling the request. In certain embodiments the account administrator may be nominated by the customer when the customer places an order for a subscription to one or more services offered by cloud infrastructure system . Based on the order information the TAS central component identifies the data region of the world such as Americas EMEA or Asia Pacific in which the order originates and the particular TAS DCs for e.g. or that will be deployed for provisioning the order. In one embodiment the particular TAS DC for e.g. from among DCs or that will be deployed for provisioning the order is determined based on the geographical data region in which the request originated.

TAS central component then sends the order request to the particular TAS DC in which to provision services for the order request. In one embodiment TAS DCs or identify a service administrator and an identity domain administrator responsible for processing the order request at the particular TAS DC. The service administrator and the identity administrator may be nominated by the account administrator identified in the subscription order. TAS DCs or communicate with SDI module to orchestrate the provisioning of physical resources for the order. SDI component in respective TAS DCs or allocates resources and configures those resources needed to fulfill the subscription order.

In certain embodiments TAS DCs or identify an identity domain associated with the subscription. SDI component may provide the identity domain information to IDM component shown in for identifying an existing identity domain or creating a new identity domain. Once the order is provisioned by the SDI module at respective TAS DCs or TAS central component may place information regarding the provisioned resources in a support system via support UI . Information may include for example displaying resource metrics related to the services and usage statistics of the services.

Once in operation at each data center EM module to periodically collects usage statistics for each of the provisioned services provisioned at that data center such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time. These statistics are provided to the TAS DC that is local to EM module i.e. at the same data center . In an embodiment the TAS DCs may use the usage statistics to determine whether overuse of a service has occurred and if so to determine how much to bill for the overage and provide the billing information to order management system .

In one embodiment the modules in SDI module may include one or more modules in SaaS platform and PaaS platform in cloud infrastructure system . In order to perform provisioning of resources for various services SDI module may interact with various other modules each customized to help with provisioning resources for a particular type of service. For example as illustrated in SDI module may interact with a Java service provisioning control module to provision Java cloud services. In one embodiment Java service provisioning control component may deploy a Java Cloud Service JCS assembly specified by SDI module that includes a set of tasks to be performed to provision Java cloud services. Infrastructure resources then determines the resources needed to provision the Java cloud services.

As other examples SDI module may interact with one or more modules such as a Virtual Assembly Builder VAB module an Application Express APEX deployer module a Virtual Machine VM module an IDM module and a database machine module . VAB module includes capabilities to configure and provision complete multi tier application environments. In one embodiment VAB module deploys a Middleware MW service assembly specified by SDI module to provision a MW service in cloud infrastructure system using the services provided by VM module . APEX deployer module includes capabilities to configure and provision database services. In one embodiment APEX deployer module deploys a database service assembly specified by SDI module to provision a database service in cloud infrastructure system using the resources provided by infrastructure resources . SDI module interacts with IDM module to provide identity services such as access management across multiple applications in cloud infrastructure system .

SDI WS module includes capabilities for receiving a step in the business associated with an order from business process executor of TAS component . In one embodiment SDI WS module parses each step of the business process and converts the step into an internal representation used by SDI module . In one embodiment each step of the business process associated with the order arrives through a web service processing layer for example via System Provisioning API discussed in in the form of a SOAP request to SDI WS module .

SDI request controller module is the internal request processing engine in SDI module and includes capabilities for performing asynchronous request processing concurrent request processing concurrent task processing fault tolerant and recovery and plug in support related to the order requests. In one embodiment SDI request controller module accepts each step of the business process associated with the order from SDI WS module and submits the step to SDI task manager module .

SDI task manager module translates each step specified in the business process into a series of tasks for provisioning the particular step. Once the set of tasks for a specific step have been provisioned SDI task manager module responds to business process executor in TAS module with operation results that includes an order payload with details of the resources provisioned to fulfill the particular step. SDI task manager module repeats this process until all the steps of the particular business process associated with the order are complete.

In certain embodiments SDI task manager module translates each step specified in the business process into a series of tasks by utilizing the services of SDI connector module . SDI connector module includes one or more connectors for handling the deployment of tasks specified by SDI task manager module to provision one or more services related to the order request. In certain embodiments one or more of the connectors may handle tasks that are specific to a particular service type while other connectors may handle tasks that are common across different service types. In one embodiment SDI connector module includes a set of connectors wrapper APIs that interface with one or more of the external modules shown in in cloud infrastructure system to provision the services and resources related to the order request. For example Application Express APEX connector interfaces with APEX deployer module to provision database services. Web Center Connector WCC interfaces with a web center module in cloud infrastructure system to provision web services. The web center module is a user engagement platform and includes capabilities for delivering connectivity between people and information in cloud infrastructure system .

In certain embodiments Middleware Applications MA connector interfaces with VAB module in cloud infrastructure system to provision middleware application services. NUVIAQ connector interfaces with VAB module to provision Java services. IDM connector interfaces with IDM module to provide identity and access management for users subscribing to services and resources in cloud infrastructure system . Virtual Assembly Builder VAB connector interfaces with VAB module in cloud infrastructure system to configure and provision complete multi tier application environments. Plug in connector interfaces with EM module to manage and monitor the components in cloud infrastructure system . HTTP server connector interfaces with one or more web servers in the PaaS platform to provide connection services to users in cloud infrastructure system .

SDI monitoring module in SDI module provides an inbound interface for receiving Java Management Extensions JMX requests. SDI monitoring module also provides tools for managing and monitoring applications system objects and devices in cloud infrastructure system . SDI data access module provides an inbound interface for receiving Java Database Connectivity JDBC requests. SDI data access module supports data access and provides object relational mapping java transaction API services data access objects and connection pooling in cloud infrastructure system . The SDI common library module provides configuration support for the modules in SDI module .

The embodiment of discussed above describes modules in the SDI module according to an embodiment of the present invention. depicts a simplified flowchart depicting processing that may be performed by the modules of the SDI module in the cloud infrastructure system in accordance with an embodiment of the present invention. The processing depicted in may be implemented in software e.g. code instructions program executed by one or more processors hardware or combinations thereof. The software may be stored in memory e.g. on a memory device on a non transitory computer readable storage medium . The particular series of processing steps depicted in is not intended to be limiting. Other sequences of steps may also be performed according to alternative embodiments. For example alternative embodiments of the present invention may perform the steps outlined above in a different order. Moreover the individual steps illustrated in may include multiple sub steps that may be performed in various sequences as appropriate to the individual step. Furthermore additional steps may be added or removed depending on the particular applications. One of ordinary skill in the art would recognize many variations modifications and alternatives. In one embodiment the processing depicted in may be performed by one or more modules in the SDI module discussed in detail in .

At a business process associated with a subscription order is received. In one embodiment SDI WS module in SDI module receives one or more steps in the business process associated with the subscription order from business process executor . At each step in the business process is translated into a series of tasks for provisioning resources for the subscription order. In one embodiment SDI task manager module in SDI module translates each step specified in the business process into a series of tasks by utilizing the services of SDI connector module . At the subscription order is provisioned based on the series of tasks. In one embodiment and as discussed in SDI connector module includes one or more connectors for handling the deployment of tasks specified by SDI task manager module to provision resources for the services in the subscription order.

As described above with respect to SDI task manager module translates each step specified in a business process into a series of tasks by utilizing the services of SDI connector module which may include one or more connectors for handling the deployment of tasks specified by SDI task manager module to provision one or more services related to the order request. One or more of the connectors may handle tasks that are specific to a particular service type while other connectors may handle tasks that are common across different service types. In one embodiment SDI connector module includes a set of connectors wrapper APIs that interface with one or more of the external modules shown in in cloud infrastructure system to provision the services and resources related to the order request. For example a NUVIAQ connector interfaces with VAB module to provision Java services.

In certain embodiments Nuviaq system may be configured to provide a runtime engine for orchestrating PaaS operations. Nuviaq system may provide a web service API to facilitate integration with other products and services. Nuviaq system also provides support for complex workflows in system provisioning application deployment and associated lifecycle operations and integrates with management and monitoring solutions.

In the embodiment depicted in Nuviaq system comprises a Nuviaq proxy a Nuviaq manager and a Nuviaq database . In certain embodiments Nuviaq manager provides an entry point into Nuviaq system providing secure access to PaaS operations via the web service API. Internally it tracks system state in the database and controls job execution on the workflow engine. In a public cloud Nuviaq manager may be accessed by the Tenant Provisioning system SDI and the Tenant Console to drive provisioning and deployment operations respectively.

In one embodiment Nuviaq manager executes jobs asynchronously via an internal workflow engine. A job may be a sequence of actions specific to a given PaaS workflow. Actions may be performed in order with failure in any step resulting in failure of the overall job. Many workflow actions delegate to external systems relevant to the workflow such as the EM command line interface cli . In one implementation Nuviaq manager application may be hosted in a 21 node WebLogic cluster with associated HTTP server e.g. Oracle HTTP Server or OHS instance running inside a firewall.

In certain embodiments Nuviaq proxy is the public access point to the Nuviaq API. In one embodiment only Public API may be exposed here. Requests received by proxy may be forwarded to Nuviaq manager . In one embodiment Nuviaq proxy runs outside the firewall whereas manager runs within the firewall. In one implementation Nuviaq proxy application runs on a WebLogic cluster running outside the firewall.

In certain embodiments Nuviaq database tracks various domain entities such as without limitation platform instance deployment plan application WebLogic domain jobs alerts and the like. Primary keys may be aligned with the Service Database where appropriate.

In one embodiment Platform Instance may contain all resources required for a WebLogic service for a given tenant.

Nuviaq system may rely on additional systems of cloud infrastructure system to carry out the workflows used the WebLogic cloud service. These dependencies may include dependencies on SDI IDM a virus scan system a service database CRM instances and the like. For example Nuviaq system may depend upon functions performed by an Assembly Deployer in SDI . In one embodiment the Assembly Deployer is a system to manage interactions with OVAB Oracle Virtual Assembly Builder and OVM Oracle Virtual Machine . Capabilities of the Assembly Deployer used by Nuviaq system may include without limitation functions for deploying an assembly un deploying an assembly describing assembly deployment scaling appliance and the like. In one implementation Nuviaq system accesses the Assembly Deployer via a web service API.

In certain embodiments security policies may require certain artifacts to be scanned for viruses before being deployed to an application. Cloud infrastructure system may provide a virus scan system for this purpose that provides scanning as a service for multiple components of the public cloud.

In certain embodiments a public cloud infrastructure may maintain a Service Database containing information about tenants e.g. customers and their service subscriptions. Nuviaq workflows may access to this data in order to properly configure a WebLogic service as a client to other services that the tenant also subscribes to.

Nuviaq system may depend on IDM for its security integration. In certain embodiments Java Service instances can be associated with a CRM instance. The association allows user applications deployed to their Java Service instance to access a CRM instance though Web Service calls.

Various entities may use services provided by Nuviaq system . These clients of Nuviaq system may include a Tenant Console which is an management server e.g. Oracle Management Server based user interface that customers may access to manage their applications on their platform instances several IDEs such as Oracle IDEs JDeveloper NetBeans and OEPE have been extended to offer access to application lifecycle management operations one or more Command Line Interfaces CLIs that are available to access lifecycle operations on the platform instances.

Provisioning use case for Nuviaq system A Provision Platform Instance use case is realized via the Create Platform Instance operation of the Nuviaq API. In the context of cloud infrastructure system a service instance with respect to the Nuviaq system corresponds to a Nuviaq platform instance. A platform instance is assigned a unique identifier is used on all subsequent operations related to this instance. A Platform Deployment descriptor provided to the Create Platform Instance action allows for properties to be set that modify the configuration of the platform instance to meet the subscription requirements of the tenant. These properties may include for example 

Install Update Application use case The Install Application operation deploys an application to a running WebLogic Server after validating that the application archive meets the security requirements of the Public Cloud. In one embodiment the Application Deployment descriptor provided to the Install Application action allows for properties to be set that modify the configuration of the application to meet the subscription requirements of the tenant. These properties may include for example 

Accordingly in certain embodiments TAS and SDI working in cooperation are responsible for provisioning resources for one or more services ordered by a customer from a set of services offered by cloud infrastructure system . For example in one embodiment for provisioning a database service the automated provisioning flow may be as follows for a paid subscription 

 3 When services are available TAS initiates provisioning by using the services of SDI . TAS may perform business process orchestration which will execute the relevant business process to complete the provisioning aspect of the order. In one embodiment TAS may use a BPEL Business Process Execution Language Process Manager to orchestrate the steps involved in the provisioning and handle the lifecycle operations. 4 In one embodiment to provision a database service SDI may call PLSQL APIs in the CLOUD UI to associate a schema for the requesting customer. 5 After successful association of a schema to the customer SDI signals TAS and TAS send a notification to the customer that the database service is now available for use by the customer. 6 The customer may log into cloud infrastructure system e.g. using an URAL such as cloud.oracle.com and activate the service.

In some embodiments a customer may also be allowed to subscribe to a service on a trial basis. For example such a trial order may be received via cloud UI e.g. using cloud.oracle.com .

In certain embodiments cloud infrastructure system enables underlying hardware and service instances to be shared between customers or tenants. For example the database service may be provisioned as shown in in one embodiment. depicts multiple Exadata compute nodes and each providing a database instance provisioned for the database service. For example compute node provides a database instance for a database service. Each Exadata compute node may have multiple database instances.

In certain embodiments each database instance can comprise multiple schemas and the schemas may be associated with different customers or tenants. For example in database instance provides two schemas and each with its own tables. Schema may be associated with a first customer or tenant subscribing to a database service and schema may be associated with a second customer or tenant subscribing to the database service. Each tenant gets a completely isolated schema. Each schema acts like a container that can manage database objects including tables views stored procedures triggers etc. for the associated tenant. Each schema may have one dedicated tablespace with each tablespace having one data file.

In this manner a single database instance can provide database services to multiple tenants. This not only enables sharing of underlying hardware resources but also enables sharing of service instance between tenants.

In certain embodiments such a multi tenancy system is facilitated by IDM which beneficially enables multiple separate customers each having their own separate identity domains to use hardware and software that is shared in the cloud. Consequently there is no need for each customer to have its own dedicated hardware or software resources and in some cases resources that are not being used by some customers at a particular moment can be used by other customers thereby preventing those resources from being wasted. For example as depicted in a database instance can service multiple customers each with their respective identity domains. Although each such database service instance can be a separate abstraction or view of a single physical multi tenant database system that is shared among the many separate identity domains each such database service instance can have a separate and potentially different schema than each other database service instance has. Thus the multi tenant database system can store mappings between customer specified database schemas and the identity domains to which those database schemas pertain. The multi tenant database system can cause the database service instance for a particular identity domain to use the schema that is mapped to that particular identity domain.

The multi tenancy can also be extended to other services such as the Java Service. For example multiple customers can have a JAVA service instance placed within their respective identity domains. Each such identity domain can have a JAVA virtual machine which can be viewed as being a virtual slice of hardware. In one embodiment a job monitoring service e.g. Hudson can be combined with a JAVA enterprise edition platform e.g. Oracle WebLogic in the cloud to enable each separate identity domain to have its own separate virtual slice of the JAVA enterprise edition platform. Such a job monitoring service can for example monitor the execution of repeated jobs such as building a software project or jobs run by an operating system s time based job scheduler. Such repeated jobs can include the continuous building and or testing of software projects. Additionally or alternatively such repeated jobs can include the monitoring of executions of operating system run jobs that are executed on machines that are remote from the machine on which the job monitoring service executes.

As is mentioned above a single IDM system can include multiple layers and multiple sub systems. At least some of these sub systems can be conceptually oriented relative to each other in a horizontal manner such that they are conceptually located within the same layer of the IDM system. However different components of the IDM system can be located among different layers thereof. In the conceptually bottom most layer the IDM system s identity data can be stored. Among other kinds of information the identity data can include user identities and definitions. The identity data can include identities of all entities known by the IDM system regardless of the specific partition or identity domain to which those entities are confined. Such entities can include humans who interact with the IDM system. Such entities also can include non human systems.

The identities stored within the identity data can be organized as a directory. Various products that interact with the IDM system can be configured and designed to have an awareness of the directory. Such products can include for example an identity manager and or an access manager that implements single sign on SSO functionality. In an embodiment although all of the identities for the IDM system can be stored in the conceptually bottom most layer of the IDM system these identities can be organized into partitions that are isolated from each other. In one sense the identity data can be imagined as the core of the IDM system. A multitude of various identity management services can rely on the isolation that is achieved through this partitioning. These identity management services can provide an abstraction of tenancy. In each particular layer of the IDM system the sub systems present within that particular layer can rely upon the abstraction of tenancy that is provided by the sub systems that are present within the layer immediately below except for the bottom most layer and the sub systems within that particular layer can provide an abstraction of tenancy to the sub systems that are present within the layer immediately above except for the top most layer .

Embodiments of the invention can partition the single IDM system into multiple separate identity domains. Data managed by the IDM system can be partitioned by identity domain. Data belonging to a particular identity domain can be isolated from all other identity domains. As is discussed above the IDM system can be shared by multiple separate tenants. Each such tenant can be a customer that has created an identity domain for his organization within the IDM system. Thus the identity domain may be considered the unit of isolation from a security point of view. An identity domain or tenancy can provide security isolation for its tenant. In one embodiment a single customer can create multiple separate identity domains or tenancies within the IDM system. For example a single customer might purchase from the IDM system provider one identity domain dedicated to testing purposes and another identity domain dedicated to production purposes.

In an embodiment of the invention upper layer sub systems that utilize the lower layer identity store can be designed with an awareness of the manner in which identity domains map to the identity store. These upper layer sub systems can receive identity domain handles from the identity store. These upper layer sub systems can use such identity domain handles to create mappings between identity domains and the identity store. In each layer of the IDM system the sub systems within that layer can be consumers of information from other layers of the IDM system. Each sub system can use its identity domain handle to manage the information pertaining to its partition of the identity store. A sub system within a particular layer can pass down its identity domain handle to the sub systems within the immediately lower layer to ensure that those sub systems will interact with the correct partition of the identity store.

Various different sub systems can each perform a part in creating a multi tenant IDM system. For example an SSO sub system can be designed to cause the appearance of multiple separate SSO deployments within the IDM system. Each such sub system can include a run time component and a repository in which its metadata is contained. Each such run time component can be designed to interact with separate identity domains in a multi tenant environment.

Applications similarly can be designed to interact with separate identity domains in a multi tenant environment. For example two different applications in such an environment can interact with each other and both such applications can be multi tenant aware. Under such circumstances when a user interacts with a first of the applications the first application can determine the identity domain from a set of identity domains to which the user belongs. Having made this determination the first application can then communicate the user s identity domain to the second application. The second application can then query the proper data partition within the second application s repository pertaining to the user s identity domain when obtaining data. Conceptually the identity domain can be imagined as correlating a slice of information across application instances that are multi tenant aware.

In a cloud computing environment some applications can be multi tenant aware while others might not be multi tenant aware. Applications that are not multi tenant aware are referred to herein as single tenant applications while applications that are multi tenant aware are referred to herein as multi tenant applications. In an embodiment an instance of a single tenant application that is dedicated to a particular identity domain can be used exclusively by entities that belong to that particular identity domain. For example a separate instance of an Oracle Fusion application can be instantiated and dedicated to each identity domain to which that application has been provisioned. A particular service instance can be dedicated to a particular identity domain such that each separate identity domain can have its own dedicated instance of that particular service. Each transaction occurring within the cloud computing environment can be conducted in the context of an identity domain regardless of whether the applications involved in the transaction are single tenant applications or multi tenant applications.

Each identity domain in shared IDM system can include a separate and potentially different set of service instances. The inclusion of a particular set of service instances within a particular identity domain can be the result of that particular identity domain s customer having purchased or leased the use of those service instances from the provider of shared IDM system . Similar to the manner in which a customer can deploy applications in that customer s own network a customer can purchase or lease the use of service instances within a cloud computing environment such service instances therefore can be provided through hardware software and or networks that is not owned or possessed by the customer himself. Service instances in identity domain A A can include a database service instance A a JAVA service instance A and a fusion customer relationship management CRM service instance A. Service instances in identity domain B B can include a database service instance B and a JAVA service instance B. Service instances in identity domain C C can include a database service instance C a fusion CRM service instance C and a social network service instance C. Although some service instances can actually be separate single tenant instances in each identity domain other service instances can be manifestations of the same single multi tenant service instance. For example database service instances A B and C all can be manifestations of the same single multi tenant database service instance.

If a particular customer desires a particular set of service instances to be associated with a particular identity domain then the particular customer can express that intent to the provider of shared IDM system at the time that the particular customer purchases or leases that particular set of service instances. The identities e.g. of users within a particular identity domain all can be centrally managed by one or more identity domain administrators for that particular identity domain. For example a particular identity domain might include identities for three different users. An identity administrator for the particular identity domain can specify that the first user can access a first subset of the particular identity domain s service instances and that the second user can access a second and different subset of the particular identity domain s service instances and that the third user can access a third and still different subset of the particular identity domain s service instances. Thus each of the users can access a different subset of the particular identity domain s service instances all as specified by an identity domain administrator for the particular identity domain.

In an embodiment all of the service instances within a particular identity domain can use the same definition of a user s identity. As in a typical enterprise system each user s identity within an identity domain can be created once. The applications and services included within that identity domain can then obtain information regarding the user identities created within that identity domain. The identity domain administrator can user various techniques for mapping user identities to applications and services. For example such mappings can be constructed through the use of roles groups rules etc. A role having associated permissions and authorizations can be created in the identity domain. Each role can be associated with a different set of applications and services that can be accessed by those users associated with that role. The identity domain administrator can then associate each role with a different set of user identities thereby granting certain sets of the identity domain s users access to certain sets of applications and services within the identity domain. Alternatively the identity domain administrator can directly grant access to a custom set of the identity domain s applications and services directly to certain user identities. In one embodiment of the invention roles themselves can be formatted and stored as identities within an identity store of shared IDM system . A user can be associated with a variety of different roles.

As is discussed above in one embodiment all of the identities created for shared IDM system can be stored within the same identity store but this identity store can be partitioned into different slices with each slice being associated with a different identity domain. Thus identities of tenant A users A can be found in a first slice identities of tenant B users B can be found in a second slice and identities of tenant C users C can be found in a third slice. In one embodiment of the invention each identity in the identity store of shared IDM system can indicate as an attribute the identity domain to which that identity belongs.

Each of the identity domains included in shared IDM system can include a corresponding instance of Oracle platform security services shown as Oracle platform security services A B and C respectively. Each of Oracle platform security services A B and C can be a collection of application programming interfaces APIs designed to enable access to identity information. Shared IDM and security infrastructure can include many different components such as identity administration module directory service and policy store and access management module . In an embodiment each such component within infrastructure implements the APIs of Oracle platform security services A B and C. These APIs can expose to service instances with each of the identity domains methods that those service instances can invoke in order to access and make use of components within infrastructure .

In an embodiment of the invention the first time that a particular customer purchases or leases service instances from the provider of shared IDM system at least one identity domain is either explicitly or implicitly created for that customer. Alternatively if at least one identity domain has already been created for and associated with the particular customer then a mechanism of shared IDM system can ask the customer whether he desires the newly purchased or leased service instances to be added to an identity domain that has already been created for and associated with the particular customer. If the customer answers affirmatively then shared IDM system can add the newly purchased or leased service instances to the set of existing service instances that are already associated with the existing identity domain. In this manner a particular customer s service instances all can become associated with the same identity domain if that is the particular customer s intention. Such service instances can include for example various SaaS and PaaS instances.

In an embodiment of the invention a customer can establish an account with a centralized store in order to enable that customer to purchase cloud based services through the centralized store. Upon purchasing a service through the centralized store using this account an identity domain specific account can be created for that customer within the cloud computing environment. This identity domain specific account can be associated with and isolated to the identity domain that is created for the customer upon the customer s first purchase of a cloud based service through the centralized store. Thus one account can be created to interact with the centralized store and another separate account can be created to manage and administer the identity domain that is created through shared IDM system .

In an embodiment at the time that an identity domain is created for a customer the customer can instruct shared IDM system to bind a specified name and or uniform resource locator URL to that identity domain so that the customer can distinguish that identity domain from potential other identity domains that have been created for the same customer. The customer and his users can use the bound URL to access the corresponding identity domain and its included service instances in the cloud computing environment.

Components of infrastructure do not belong to any single identity domain created for any customer Infrastructure can be imagined as belonging instead to the cloud computing environment generally. In one embodiment of the invention infrastructure nevertheless can be associated with an identity domain for the cloud computing environment as a whole. This overarching cloud identity domain which also can be called the operations identity domain can be distinguished from identity domains that are associated with customers. Users who belong to the cloud identity domain can be granted privileges to access service instances within and to administer any of the customers identity domains. Such users are referred to herein as operations users. Customer service representatives CSRs can have operations user identities created for them and associated with the cloud identity domain therefore the cloud identity domain also can be considered to be the CSR identity domain. A common security model can not only govern the isolation of an identity domain s users to their corresponding identity domains but also can facilitate the interactions needed to manage all identity domains centrally. Thus shared IDM system can prevent users associated with customers identity domains from performing operations relative to resources outside of their identity domains but also can allow operations users associated with the cloud domain to perform operations relative to resources across customers identity domains. The purposes of tenancies therefore can be at least twofold first to isolate tenancies from each other and second to manage other tenancies in the case of the cloud identity domain .

In block a second customer creates a second identity domain through the shared IDM system. In block the second customer purchases a second set of service instances through or in connection with the shared IDM system. In block the service instances in the second set of service instances are mapped to the second identity domain. For example the shared IDM system may persistently store such a mapping within a computer readable storage memory. Thus each of several customers can make use of the same shared IDM system in establishing separate and isolated identity domains so that there is no need for a separate IDM system to be instantiated per customer. In block a second set of user identities are created within the second identity domain through the shared IDM system. The user identities in the second set of user identities are mapped to the second identity domain.

In block the shared IDM system shares the user identities in the first set of user identities among the first set of service instances but not among the second set of user instances. In block the shared IDM system shares the user identities in the second set of user identities among the second set of service instances but not among the first set of user instances. Both the first and second sets of user identities may be stored in the same identity store of the same shared IDM system. In block a first identity domain administrator for the first identity domain manages the first set of user identities using the shared IDM system. In block a second identity domain administrator for the second identity domain manages the second set of user identities using the shared IDM system. Management of the user identities can include for example adding user identities deleting user identities modifying attributes of user identities adding or removing associations between user identities and roles and or groups creating roles and or groups granting or removing service instance access permissions to or from users roles and or groups etc. In an embodiment of the invention such management can be conducted through administrator interfaces provided by the shared IDM system. The administration of various different identity domains can be conducted through such administrator interfaces.

In an embodiment of the invention various policies can be specified within the shared IDM system. Each such policy can include a set of rules which must be satisfied if the policy as a whole is to be satisfied. A policy can specify that access to a service instance or system resource is only to be granted if the policy s rules are all satisfied. An implicit policy can also exist which requires that in order to a particular user to access a customer s identity domain s service instances that particular user s identity must belong to that same identity domain. However this implicit policy can permit operations users who can exist outside of any customer s identity domains to access the service instances of any customer s identity domains. In a multi tenant IDM system each policy can be crafted to reflect the intent that service instances associated with a particular identity domain are to be isolated within that particular identity domain.

For example a cloud computing environment may include a directory and an access management system such as an SSO system. The SSO system can protect a multitude of URLs. The SSO system can be configured to protect a specified set of URLs but no URLs that are not within the specified set meaning that those latter URLs are not protected . A single host machine within the cloud computing environment can be associated with multiple different URLs. Conceptually each host machine within the cloud computing environment can be visualized as having multiple gates standing between that host machine and users that desire to access that host machine. When a user attempts to access a URL that is associated with a particular host machine the SSO system can route that user to the appropriate host machine. A gate that protects the host machine can examine the fully qualified URL that is being used in the attempt to access the host machine. This gate can either redirect the user to an SSO server or look up and enforce a policy pertaining to the host machine and the URL. Such a policy can indicate that the user is to be authenticated that the user s attributes are to be discovered and that based on the user s attributes a decision is to be made as to whether the user is allowed to access the host machine using the URL or not. In an embodiment of the invention such policies can be enhanced to reflect the boundaries of identity domains defined by the shared IDM system.

Tenant administration delegation model can be a model that takes into account the existence of the architecture of identity domains and associations of those identity domains with service instances. This model can be used to specify the roles that various users associated with an identity domain have relative to that identity domain or elements therein. The model can specify the permissions e.g. relative to service instances users roles etc. that are granted to each role. Tenant administration delegation model can enable a customer who has purchased an identity domain to appoint a user to be an identity domain administrator for that identity domain. In one embodiment such a customer can use components of cloud security foundation layer to create a hierarchy of roles. Such a hierarchy can be created implicitly upon the initial creation of the identity domain and can pertain specifically to the identity domain whose creation caused the creation of the hierarchy. Thus each identity domain can be associated with a separate and potentially different hierarchy of roles. In an embodiment the role implicitly created at the top or root of the hierarchy is that of an identity domain administrator for the identity domain. Each identity domain can have one or more identity domain administrators. The identity domain administrator can have permissions and authorities sufficient to administer the identity domain as a whole including all service instances users and other roles that exist within that identity domain.

Beneath the identity domain administrator in the role hierarchy service administrators can be placed. Although the term service administrator is used herein to describe a category of roles that have permissions to administer service instances within an identity domain there is not necessarily any role called service administrator rather there can be a variety of specific roles that all fall into the service administrator category. For example each type of service instance can have a type of service administrator role to administer that service. Examples of service administrator roles include JAVA service administrator database service administrator fusion application administrator etc. An identity domain administrator can use components of cloud security foundation layer to appoint one or more users who are associated with the identity domain to be service administrators. Inasmuch as service administrator can be a category of roles rather than a role per se the user interface that the identity domain administrator uses to appoint other users to service administrator roles may list each specific type of service administrator role e.g. JAVA service administrator database service administrator fusion application administrator etc. to which the identity domain administrator can appoint a user. Each service administrator can have the permissions and authorities needed in order to administer and manage a particular service instance within the identity domain. Each service administrator can have the permissions and authorities needed in order to manage roles that are specifically related to and limited in scope to the particular service instance that he administers. However a particular service administrator does not necessarily have any authority to manage any other service instance or to administer the identity domain as a whole. Each service instance can have its own separate service administrator. Potentially the same user can be appointed to be a service administrator for multiple service instances in the same identity domain. An identity domain administrator can perform all of the functions that a service administrator can perform because the identity domain administrator is higher in the role hierarchy but not vice versa. In an embodiment the designer of each service for which a service instance may be created in an identity domain is given the responsibility of ensuring that the hierarchy of service designer defined roles that is associated with that service includes typically at its root the service specific service administrator role for that service as a whole.

Customer identity domain includes users who have been assigned various roles that are scoped within customer identity domain and do not extend to any other identity domain. Among these roles can be that of identity domain administrator mentioned above. Identity domain administrator can be nominated by customer . Identity domain administrator can delegate at least some of the permissions and authorities that he has as part of his role to other roles within customer identity domain . These other roles can include service and application administrator roles such as identity administrator JAVA service administrator database service administrator and fusion application administrator . Each of these service administrators can have the permissions and authorities that are needed for but limited to the administration and management of users and roles relative to specific service instances within customer identity domain .

Identity administrator can have the permissions to perform the tasks of role management and user management within customer identity domain . Identity administrator can delegate role management and user management as roles to other user identities within customer identity domain . With these permissions user identities and role identities pertaining to customer identity domain can be managed for example e.g. password resetting operations . Identity administrator can be the same user as identity domain administrator . JAVA service administrator can have the permissions to perform the task of JAVA administrator . JAVA service administrator can delegate JAVA administrator as a role to other user identities within customer identity domain . With these permissions JAVA virtual machines can be instantiated modified and deleted for example. Database service administrator can have the permissions to assign database service specific roles to other users within customer identity domain . These database service specific roles can include those of users developers and administrator . Each such role can have different permissions relative to a database service instance. For example users can be limited to permissions that enable users to query and otherwise use the data stored in the tables of a database developers can additionally have permissions that enable developers to modify a configuration of the database including system parameters for example and administrator can have permission to perform all actions relative to the database service instance including the management of other users relative to that service instance. Administrator can be the same user as database service administrator . Fusion application administrator can have the permissions to create and modify a CRM hierarchy for use by a fusion application instance. Using these permissions fusion application administrator can place into CRM hierarchy users who have user identities within customer identity domain . Fusion application administrator can have the permissions to define roles and corresponding permissions for each position in CRM hierarchy each such role being limited to the performance of operations relative to a fusion application instance. Other service administrator roles also can be defined and assigned.

In an embodiment as discussed above identity domain administrator nominated by customer typically upon creation of customer identity domain can delegate permissions and service instance roles to other users within customer identity domain . Additionally in an embodiment customer can directly nominate users within customer identity domain to become service administrators having those service instance roles. For example in an embodiment customer can directly nominate each of identity domain administrator identity administrator JAVA service administrator database service administrator and fusion application administrator . In an embodiment customer can nominate these other users to service instance roles as a part of the purchase of the service instances to which those roles pertain. For example customer can at the time of purchasing a service instance specify to an on line store from which the service instance is being purchased one or more e mail addresses of users whom customer is nominating to be service instance administrators for that service instance. Within the identity domain specified by customer user identities can be automatically created for users having these e mail addresses and these users can be assigned service administrator roles for the service instance s specified by customer .

Furthermore as is discussed above cloud based IDM system can include in addition to customer identity domains such as customer identity domain an overarching cloud identity domain such as cloud identity domain . Cloud identity domain can include operations users discussed above. Cloud identity domain does not belong to any customer and exists independent of any customer. Users in cloud identity domain can have permissions to administer roles users and service instances within customer identity domains such as customer identity domain as well as other customer identity domains not shown that may exist within cloud based IDM system . An operational role hierarchy can be defined within cloud identity domain . Operational role hierarchy can define for each of the operations users in cloud identity domain the permissions authorities and roles possessed by that operations user. Policies defined within cloud identity domain can place limitations on which customer identity domains certain operational roles can access and on the types of operations that certain operational roles can perform relative to services users and resources within those customer identity domains. For example a subset of operational user identities within cloud identity domain can be limited by role and or policy to the performance of identity management functions although these operational user identities may have the capability to perform such identity management functions relative to identities defined in any customer identity domain in the cloud based environment. In each identity domain a run time instance can enforce such policies.

In cloud based IDM system roles can be defined hierarchically. Privileges and permissions available to a lower level role in the hierarchy can be inherited by higher level roles in that hierarchy. The parent or ancestor role of another role in a role hierarchy can inherit the privileges and permissions that are available to the child or descendant role. Thus although identity administrator can inherit the roles and corresponding permission based capabilities of role management and user management roles and identity domain administrator can inherit the roles and corresponding permission based capabilities of identity administrator the inheritance does not flow in the opposite direction in the hierarchy. In an embodiment a role hierarchy is automatically created for each service instance at the time that the service instance is added to an identity domain the roles within that role hierarchy can later be assigned and or modified by users having permissions to do so. Each service instance s role hierarchy can differ in that it can define roles different from those defined in role hierarchies for other service instances.

In an embodiment pre defined roles potentially thousands for a service instance can be automatically created within an identity domain based on the type of service instance that is being added to the identity domain a user does not necessarily need to define each role in each role hierarchy manually. Each type of service can be associated prior to the addition of any instance of that service to any identity domain with a service type role hierarchy that can be pre defined by the authors of the service and automatically created when the service instance is added to an identity domain for example a database service can be associated with a pre defined database service role hierarchy and a JAVA service can be associated with a pre defined JAVA service role hierarchy. Thus each type of service can be associated with a separate and potentially different pre defined template of hierarchically related roles for that type of service. Some roles such as identity domain administrator can be pre defined within a cloud wide role model and potentially can have an immutable definition while other service instance specific roles can be created and manually defined by those having appropriate permissions to have custom permissions relative to specific service instances.

Permissions associated with roles in pre defined service type specific role hierarchies can be inherited by hierarchically higher roles that are defined within the cloud wide model. For example each service administrator role for a particular type of service e.g. database service can inherit all roles and associated permissions pre defined in the role hierarchy specific to that particular type of service. The identity domain administrator role can inherit all roles and associated permissions inherited by all service administrator roles in the identity domain. Thus although identity domain administrator is enabled by role inheritance to be able to perform any of the operations that any of service administrators can perform identity administrator is not necessarily able to perform operations that the other service administrators can perform identity administrator can be limited to performing general identity based operations within the identity domain not specific to any particular service instance. Being outside of the identity domain customer in one embodiment does not inherit any roles.

In an embodiment when customer uses the on line store to nominate a person to have a particular role within customer identity domain such as identity domain administrator or any of service administrators the on line store can responsively send an e mail message to the e mail address of that nominated person. Customer can provide the e mail address to the on line store as a part of the nomination process. The e mail message sent to the nominated person s e mail address can include a hyperlink that points to a web based form that is served by a web server within the cloud computing environment. The web based form can include fillable fields through which the message recipient can specify a user name a password and other information useful for creating a user identity for the nominee within customer identity domain . Upon the nominee s submission of the filled web based form to the web server the web server can cause the nominee s user identity to be created within customer identity domain and can cause the specified role to be assigned to that user identity. Nomination can be viewed as a process through which an entity outside of the identity domain assigns a role to a user identity within the identity domain while delegation can be viewed as a process through which a user identity within the identity domain assigns to another user identity within that user identity domain a role that the former user has authority by virtue of his own role in the identity domain to assign.

In an embodiment each component of the shared IDM system can include a tenant isolation construct for its artifacts to enforce isolation in between identity domains. Each such tenant isolation construct can follow tenant isolation data model . An access management product for example might need identity management services and corresponding policies. In order to allow these policies to be different customizable and distinct for each customer each customer can have its own slice of the shared IDM system s policy store. Thus in one embodiment of the invention policies within the shared IDM system s policy store can be partitioned by identity domain. Mechanisms for storing and managing policies can be tenant specific. Tenant isolation data model can be followed by each of the sub systems within tenant aware component extensions in order to enforce isolation in between identity domains. By following tenant isolation data model each shared IDM product can possess identity domain aware features.

For example multi tenant login UI and authentication scheme can follow tenant isolation data model by providing a UI field through which a user can identify the particular identity domain to which he is attempting to gain access. This feature allows users to login to specific identity domains within the cloud computing environment. Multi tenant login UI and authentication scheme can then choose the particular identity domain as that against which the user will be authenticated. The authentication scheme in particular can use the particular identity domain in order to query the correct partition when looking up the actual password associated with the user identity supplied during the login process. Although unqualified user identities can be required to be unique within an identity domain such user identities potentially can be duplicated across separate identity domains. In one embodiment of the invention fully qualified user identities can specify the identity domains to which those user identities belong and such fully qualified user identities are not duplicated across separate identity domains. Embodiments of the invention therefore provide mechanisms whereby authentication processes are multi tenant aware. Such mechanisms can determine a user s identity domain and can authenticate the user based on data that is specific to that identity domain.

In an embodiment cloud IDM console can be among the tenant aware component extensions that follow tenant isolation data model . Cloud IDM console can be used to change user passwords and to perform other user identity management functions for example. Cloud IDM console can include controls through which the identity domain in which console operations are to be performed can be determined. Thus when an identity domain administrator adds or removes user identities using cloud IDM console cloud IDM console can determine the identity domain to which the identity domain administrator belongs and can restrict the addition or removal of user identities to that identity domain alone.

Tenant and service provisioning automation APIs can be used to provision purchased service instances to the identity domain for which those service instances were purchased. IDM lifecycle operations tools can be used to upload to download from and synchronize data e.g. patch applications within an identity domain.

The access control sub system for each identity domain can be policy driven in that access to a protected service or resource is granted only if a policy defined within that identity domain and associated with that protected service or resource is satisfied. Each identity domain can have a run time instance that enforces the policies defined within that identity domain. In an embodiment all policies for all identity domains can be stored in a common cloud wide policy store but this policy store can be partitioned by identity domain.

As is discussed above in an embodiment of the invention a customer can cause an identity domain to be created in the cloud based environment and can purchase from an on line store one or more service instances to be made available within that identity domain. In an embodiment of the invention APIs for the multi tenant cloud based IDM system are defined in such a manner to ensure that service instance provisioning operations will be performed in a correct order. Typically the first operation that is to be performed relative to an identity domain is the creation of that identity domain in the cloud based IDM system. One API method can receive a name for an identity domain and determine whether any identity domain within the cloud based IDM system already has that name. If no identity domain having that name currently exists then the API method can create the identity domain in part by storing metadata defining that identity domain . Regardless of whether the identity domain existed prior to the invocation of the API method the API method can return to the entity that invoked the API method information pertaining to the named identity domain. The entity can use this information to invoke further methods of the API to perform operations relative to the named identity domain such as service instance addition.

TABLE 1 below indicates for various cloud based events discussed above with reference to the kinds of information that different components of and entities within the cloud based multi tenant IDM system can communicate to each other as part of those events according to an embodiment of the invention.

Addition of a service instance to an identity domain can involve the instantiation of one or more virtual machines in the cloud based environment. Virtual machines for the type of service can be instantiated as a part of adding a service instance to an identity domain. In one embodiment the instantiation of such virtual machines or service instance run time components can be accompanied by configuration operations that ensure that such virtual machines will be associated with or wired to the appropriate identity domain. Additionally the instantiation of such virtual machines can be accompanied by configuration operations that ensure that such virtual machines will be associated with or wired to appropriate policy based boundaries. In one embodiment of the invention an API method for creating service instances of specified types is implemented within the cloud based IDM system. Invocation of this service instance creation API method can cause the cloud based IDM system to create handles that can be used to establish associations between the service instance virtual machines and the appropriate identity domain. Such handles can include coordinating information such as a name of the appropriate identity domain a user name a password etc. A service instance virtual machine can use such a user name and password in order to connect to the cloud based IDM system and can specify during the connection process the name of the identity domain in whose context the service instance virtual machine will be executing. The service instance creation API method can ensure that that user name and password specified by the handle are not duplicated in handles created for any other service instance virtual machines so that the virtual machines for other identity domains service instances are not improperly enabled to connect relative to identity domains other than their own identity domains. The service instance creation API method therefore can return to the entity that invoked that method an informational vector that contains all of the data needed to instantiate a service instance.

Each service instance virtual machine can be provided access to the identities that are defined within the identity domain in whose context the service instance virtual machine executes. This access can be provided for example so that the service instance virtual machine can authenticate users and look up roles pertaining to the identity domain. is a block diagram that illustrates a multi tenant IDM system in which an application instance run time component can be provided access to identities that are defined within an identity domain according to an embodiment of the invention. In the illustrated example the application instance run time component is for an instance of a fusion CRM application. System can include fusion application service fusion middleware policy store identity store and database . Together fusion application service and fusion middleware make up a fusion application runtime component. Policy store and identity store can be implemented as Oracle Internet directories OIDs or other LDAP directories for example. Policy store which can store policies from various separate identity domains can include a policy store root node from which can hierarchically descend logical security store nodes from which can hierarchically descend policies and . Policies and can pertain to one identity domain domain A while policy can pertain to another identity domain domain B. Policies and can pertain to separate instances of JAVA services while policies and can pertain to separate instances of fusion application services. Identity store which can store identities from various separate identity domains can include an LDAP root node from which can hierarchically descend nodes for various identity domains from which can hierarchically descend identities pertaining to identity domain A and identities pertaining to identity domain B . Database can store data that is used by fusion application service and fusion middleware such as fusion on line transaction processing OLTP data and schemas potentially including fusion middleware schemas and other database schemas .

A fusion application can be an example of a single tenant application that exists within multi tenant IDM system . Thus a particular instance of fusion application service and fusion middleware can be specific to a particular identity domain. In this example they are specific to identity domain A. Identity store can be structured as an LDAP directory tree containing toward its leaf nodes various separate sub trees that pertain to separate identity domains in multi tenant IDM system . An identity store handle for the fusion application runtime component points only to a node of the LDAP identity hierarchy that is the root node of an LDAP sub tree containing identities pertaining to identity domain A . Thus the identity store handle for the fusion application runtime component points only to a slice of identity store that is dedicated to identity domain A. This pointer is shown as an arrow line in originating at the fusion application runtime component and terminating at LDAP sub tree . Such a pointer can be established as a result of invoking an API method when the fusion application service is added to identity domain A. A handle returned by the API method can contain a credential that specifies a particular user name and password that is recognized within multi tenant IDM system and which is associated specifically with identity domain A. This credential therefore can be bound to the appropriate slice or partition of identity store pertaining to identity domain A. The fusion application runtime component can use this particular user name and password to access the appropriate partition of identity store . An access control inside of OID which can be used to implement identity store can confine the visibility of the fusion application runtime component solely to the appropriate partition of identity store so that the fusion application runtime component cannot access identities that belong to identity domains other than identity domain A.

Each separate service instance in multi tenant IDM system can store its own separate set of policies pertaining to that service instance within the cloud wide policy store . Policy store can be structured as an LDAP tree containing sub trees for each identity domain and policy nodes for service instances within each identity domain s sub tree. A policy store handle for the fusion application runtime component points only to a node of the LDAP policy hierarchy that is the root node of an LDAP sub tree containing policies pertaining to the fusion application runtime instance that belongs to identity domain A. This pointer is shown in as an arrow line originating at the fusion application runtime component and terminating at LDAP policy entry . Such a pointer can be established as a result of invoking an API method when the fusion application service is added to identity domain A. The fusion application runtime component therefore becomes bound or wired to to the specific partition of policy store that pertains specifically to the policies that pertain to the fusion application service that belongs to identity domain A. Consequently when the fusion application runtime component queries policy store the query can be executed relative just to the specific partition of policy store to which the fusion application runtime component is bound.

More generally in an embodiment of the invention boundaries exist for each service instance runtime component. Credentials can be created that point only to partitions of identity store and policy store respectively that pertain to the appropriate identity domain and appropriate service instance respectively for a particular service instance runtime component. These credentials once created can be passed to a provisioning system so that the provisioning system can bind the service instance runtime component to the appropriate partitions of identity store and policy store which each can store data for various service instances in various identity domains in the cloud computing environment. Identity store can be implemented separately from policy store because identities are not service specific while policies can be service specific thus the security boundaries relevant to each type of data can differ in scope. Multiple service instances within a same identity domain can all be bound to the same LDAP sub tree of identity store but can each be bound to different LDAP policy entries of policy store .

In an embodiment one or more informational stores such as identity store can be stored in an LDAP directory such as an OID. Such an LDAP directory typically is hierarchically organized. In an embodiment a single LDAP directory can store information pertaining to multiple separate identity domains within a cloud based multi tenant IDM system. is a hierarchical diagram that illustrates an example of a structure of multi tenant LDAP directory for a cloud based IDM system according to an embodiment of the invention. LDAP root can be a parent to multiple nodes such as system groups node system identities node identity domains node and service templates node . System groups can be a parent to nodes that represent groups of identities that are cloud system wide rather than identity domain specific. System groups can be parent to app ID groups which can group together various application identities into identified groups. System identities can be a parent to nodes that represent individual identities that are cloud system wide rather than identity domain specific. System identities can be parent to app IDs which can identify individual applications whose identities are cloud system wide rather than identity domain specific. Identity domains can be parent to nodes for various separate identity domains such as customer A identity domain A customer B identity domain B and CSR or operations identity domain . As is discussed above each of these identity domain nodes can be parent to numerous other nodes pertaining to roles and identities within their respective identity domains. Furthermore although shows a single identity domain per customer e.g. A and B in alternative embodiments each customer can have multiple separate identity domains. Service templates can be parent to numerous nodes that are roots of role hierarchies for different service types. As is discussed above different service types can be mapped to pre defined role hierarchies that can be automatically added to an identity domain when a service of that type is added to that identity domain sparing a user from manually creating such roles for that service.

According to an embodiment of the invention a multi tenancy IDM system beneficially enables multiple separate customers each having their own separate identity domains to use hardware and software that is shared in the cloud. Consequently there is no need for each customer to have its own dedicated hardware or software resources and in some cases resources that are not being used by some customers at a particular moment can be used by other customers thereby preventing those resources from being wasted. For example multiple customers can have a JAVA service instance placed within their respective identity domains. Each such identity domain can have a JAVA virtual machine which can be viewed as being a virtual slice of hardware. For another example in one embodiment multiple customers can have a database service instance placed within their respective identity domains. Although each such database service instance can be a separate abstraction or view of a single physical multi tenant database system that is shared among the many separate identity domains each such database service instance can have a separate and potentially different schema than each other database service instance has. Thus the multi tenant database system can store mappings between customer specified database schemas and the identity domains to which those database schemas pertain. The multi tenant database system can cause the database service instance for a particular identity domain to use the schema that is mapped to that particular identity domain. In one embodiment a job monitoring service e.g. Hudson can be combined with a JAVA enterprise edition platform e.g. Oracle WebLogic in the cloud to enable each separate identity domain to have its own separate virtual slice of the JAVA enterprise edition platform. Such a job monitoring service can for example monitor the execution of repeated jobs such as building a software project or jobs run by an operating system s time based job scheduler. Such repeated jobs can include the continuous building and or testing of software projects. Additionally or alternatively such repeated jobs can include the monitoring of executions of operating system run jobs that are executed on machines that are remote from the machine on which the job monitoring service executes.

Architecture can include multiple Exadata compute nodes such as Exadata compute nodes A B. Exadata compute nodes A B can be hardware computing machines. Each such machine can include one or more hardware processing units which perform processor level fetch decode execute operations based on software specified machine language instructions . Each such machine can be a separate server computing device that is owned and operated by the provider of the cloud based service thus in an embodiment customers subscribing to and using the database functionalities provided by database software executing on Exadata compute nodes A B do not own Exadata compute nodes A B but merely make use of the software processes executing thereon. Exadata compute node A can be communicatively coupled by one or more packetized networks to Exadata compute node B. In one embodiment Exadata compute node B operates as a replica on Exadata compute node A for redundancy purposes if Exadata compute node A fails then customers can automatically resume operations relative to Exadata compute node B until Exadata compute node A can be restored.

Exadata compute nodes A B each can execute a separate database instance such as database instances A B. Each of database instances A B can be a separate collection of processes that execute from the same database software code set. Each of database instances A B can maintain multiple separate isolated and typically different database schemas. For example database instance A can maintain database schemas AA AN and database instance B can maintain database schemas BA BN. This maintenance of multiple database schemas per database instance according to an embodiment of the invention stands in contrast to the traditional one schema per database instance approach. Each of database schemas AA AN can be mapped to a separate identity domain. Each of database instances A B can maintain metadata that specifies mappings between its database schemas and the identity domains to which those database schemas belong. The isolation mechanisms provided by the shared IDM access controls discussed herein ensure that each identity domain s schema can only be accessed and used by users and services that are associated with that identity domain. Inasmuch as database instances A B can be shared among identity domains while database schemas AA AN and their replicas BA BN can be dedicated to individual identity domains and isolated from all other identity domains database schemas AA AN and their replicas BA BN can be referred to alternatively as database service instances. Thus according to an embodiment of the invention references herein to database service instances are references to schema database instance pairs rather than database instances alone.

Each database schema can specify multiple separate relational tables. For example within database instance A database schema AA can specify relational tables AAA AAN while database schema AN can specify relational tables ANA ANN. For another example within database instance B database schema BA can specify relational tables BAA BAN while database schema BN can specify relational tables BNA BNN. Inasmuch as Exadata compute node B can be a replica of Exadata compute node A database schemas BA BN with their relational tables BAA BNN can be replicas of database schemas AA AN with their relational tables AAA ANN. Changes made to a database schema or relational table on Exadata compute node A automatically can be propagated to and duplicated upon Exadata compute node B. Each database schema can also specify a separate set of stored procedures triggers etc.

Architecture also can include cloud storage . Cloud storage can be formed of multiple potentially separate but interconnected hardware storage devices such as hard disk drives. These storage devices potentially can be but are not necessarily separate and distinct from Exadata compute nodes A B. Data accessed and managed by Exadata compute nodes A B can be distributed among various storage devices such that portions of the data accessed and managed by an individual compute node can be dispersed among multiple separate storage devices and or such that at least some of the data accessed and managed by one compute node can be stored on at least some of the same storage devices as the data accessed and managed by the other compute node. Indeed in one embodiment because Exadata compute node B is a replica of Exadata compute node A each of these compute nodes can share the same copy of database data in such a scenario although computational resources such as executing database software processes can be replicated the data records accessed and maintained by those processes can be shared among the replicas. The hardware storage devices making up cloud storage can be owned and operated by the cloud service provider who as discussed above typically is separate and distinct from customers whose data records are stored upon those hardware storage devices.

Cloud storage can store tablespaces A N. In an embodiment each database schema has a separate dedicated tablespace in which the data conforming to that database schema is stored. For example tablespace A can be dedicated to the storage of data conforming to database schema AA and database schema BA as its replica tablespace B can be dedicated to the storage of data conforming to database schema AN and database schema BN as its replica . Because in one embodiment these tablespaces are only accessible through database instances A B the isolation mechanisms imposed on database instances A B by the shared IDM access controls discussed herein are sufficient to ensure that each of tablespaces A N will be isolated from each other of tablespaces A N. Consequently in an embodiment only the users and service instances belonging to the same identity domain as a particular database schema are permitted if also authorized by policies to access any of the data conforming to that particular database schema even though various tablespaces A N may be physically distributed and stored among separate hardware storage devices that are themselves not necessarily dedicated strictly to individual identity domains. In other words dedication of individual physical storage devices to separate identity domains is not necessary to ensure that tablespaces A N are respectively dedicated to the database schemas belonging to those identity domains.

Each of tablespaces A N can store a separate data file. For example tablespaces A N respectively can store data files A N respectively. Each particular data file of data files A N can physically contain the data records e.g. relational table rows that are logically contained within the relational tables defined by the database schema to which the tablespace storing that particular data file is dedicated. For example assuming that tablespace A is dedicated to database schema AA data file A can physically contain the data records that are logically contained in relational tables AAA AAN and that are logically contained in their replicas relational tables BAA BAN . For another example assuming that tablespace B is dedicated to database schema AN data file B can physically contain the data records that are logically contained in relational tables ANA ANN and that are logically contained in their replicas relational tables BNA BNN .

In an embodiment Nuviaq manager can serve as an entry point into system . As such an entry point Nuviaq manager can provide secure access to PaaS operations via a secure web service API. Nuviaq manager can track the state of system in Nuviaq database . Nuviaq manager can control job execution. Tenant provisioning system SDI can access Nuviaq manager to instruct Nuviaq manager to perform provisioning operations e.g. service instance provisioning operations in the cloud based computing environment. Tenant console can access Nuviaq manager to instruct Nuviaq manager to perform deployment operations e.g. service instance deployment operations in the cloud based computing environment. Nuviaq manager can execute jobs involving such operations asynchronously. Such jobs can involve a sequence of actions that are specific to a PaaS workflow. Nuviaq manager can perform the job s actions in order. Such actions can involve the delegation of tasks to other components such as a command line interface of an enterprise manager EM module. Nuviaq manager can be executed upon a cluster of Web Logic servers A N in conjunction with OHS .

In an embodiment Nuviaq proxy can be an access point to which other systems can interface via an API. Nuviaq proxy can receive requests from other systems through this API and forward those requests to Nuviaq manager . In one embodiment Nuviaq proxy can be situated outside of a firewall inside of which Nuviaq manager is situated. Nuviaq proxy can be executed upon a cluster of Web Logic servers A N in conjunction with OHS .

In an embodiment Nuviaq database can track data pertaining to platform instance as well as deployment plans applications Web Logic domains jobs and alerts. Primary keys stored within Nuviaq database can be aligned with keys stored within a cloud wide service database not shown that contains mappings between customers or tenants and their identity domains or tenancies and the service instances to which those customers have subscribed.

In an embodiment platform instance provides Web Logic service resources for a specific identity domain. Thus a separate platform instance can be instantiated for and dedicated to each separate identity domain in the cloud based environment. However each such platform instance can be centrally managed by Nuviaq manager such that no more than one instance of Nuviaq manager needs to be instantiated. In an embodiment Nuviaq manager is the component that creates each separate platform instance for each identity domain. Platform instance can be imagined as being an identity domain dedicated slice of a Web Logic server. Some workflows processed by Nuviaq can involve access to the service database discussed above in order to configure the Web Logic slice to act as a client to various other service instances to which customers have subscribed as indicated by mapping stored within the service database. Tenant console can provide to administrators appointed within an identity domain a user interface that enables those administrators to manage applications that are executing on platform instance that is contained within that identity domain. CLI also can be used to manage such applications. Each platform instance can be assigned an identifier that is unique within the cloud computing environment and this unique identifier can be used to reference that platform instance in operations that make use of that platform instance .

In an embodiment Nuviaq can operate in conjunction with components external to Nuviaq in order to perform Web Logic workflows. Among these external components tenant provisioning module SDI can include an assembly deployer subsystem. The assembly deployer subsystem can manage interactions between Nuviaq an Oracle Virtual Assembly Builder OVAB and an Oracle Virtual Machine OVM . Nuviaq can use the assembly deployer subsystem to deploy assemblies undeploy assemblies describe assembly deployments and to scale appliances. Nuviaq can access the assembly deployer subsystem via a web service API.

Also among the external components virus scan module can scan various artifacts for viruses and other harmful executable instructions before permitting those artifacts to be deployed to any applications in the cloud computing environment. Virus scan module can provide scanning as a service for multiple separate components in the cloud computing environment. In one embodiment virus scan module can provide its services to components within multiple separate identity domains so that no separate virus scan module needs to be instantiated per identity domain. IDM system details of which are discussed above can provide security to jobs performs by Nuviaq . CRM module can be associated with JAVA service instances that have been placed within various identity domains. Such an association between these JAVA service instances and CRM module can enable applications executed by such JAVA service instances to perform CRM functions of CRM module by making web service calls to CRM module .

Client computing devices may be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . Alternatively client computing devices and may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating over a network e.g. network described below . Although exemplary system environment is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

System environment may include a network . Network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

System environment also includes one or more server computers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM and the like.

System environment may also include one or more databases . Databases may reside in a variety of locations. By way of example one or more of databases may reside on a non transitory storage medium local to and or resident in server . Alternatively databases may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

Computer system may additionally include a computer readable storage media reader a communications subsystem e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

Computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. Communications system may permit data to be exchanged with network and or any other computer described above with respect to system environment .

Computer system may also comprise software elements shown as being currently located within working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . In an exemplary embodiment working memory may include executable code and associated data structures used for a multi tenant cloud based IDM system as described above. It should be appreciated that alternative embodiments of computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile non transitory removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by a computer.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. Embodiments of the present invention are not restricted to operation within certain specific data processing environments but are free to operate within a plurality of data processing environments. Additionally although embodiments of the present invention have been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.

Further while embodiments of the present invention have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. Embodiments of the present invention may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope.

