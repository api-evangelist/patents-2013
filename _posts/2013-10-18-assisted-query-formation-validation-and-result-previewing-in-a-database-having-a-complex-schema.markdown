---

title: Assisted query formation, validation, and result previewing in a database having a complex schema
abstract: Disclosed are a method, a device and/or a system of assisted query formation, validation, and result previewing in a database having a complex schema. In one aspect, a method of a query editor includes generating a data profile which includes a set of characteristics captured at various granularities of an initial result set generated from an initial query using a processor and a memory. The method determines what a user expects in the initial result set of the initial query and/or a subsequent result set of a subsequent query based on the data profile and/or a heuristically estimated data profile. The method includes enabling the user to evaluate a semantic accuracy of the subsequent query based on the likely expectation of the user as determined through the set of characteristics of the data profile. The set of characteristics may include metadata of the initial query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08996559&OS=08996559&RS=08996559
owner: Alation, Inc.
number: 08996559
owner_city: Cupertino
owner_country: US
publication_date: 20131018
---
This disclosure claims priority to and incorporates herein by reference the entire specification of U.S. Provisional Patent Application No. 61 802 716 filed on Mar. 17 2013 and titled DATA PROFILE DRIVEN QUERY BUILDER.

This disclosure claims priority to and incorporates herein by reference the entire specification of U.S. Provisional Patent Application No. 61 802 742 filed on Mar. 18 2013 and titled DEVELOPING A SOCIAL DATA CATALOG BY CROWD SOURCING.

This disclosure claims priority to and incorporates herein by reference the entire specification of U.S. Provisional Patent Application No. 61 802 743 filed on Mar. 18 2013 and titled CREATING A DATA CATALOG BY MINING QUERIES.

This disclosure claims priority to and incorporates herein by reference the entire specification of U.S. Provisional Patent Application No. 61 802 744 filed on Mar. 18 2013 and titled AUTO COMPLETION OF QUERIES WITH DATA OBJECT NAMES AND DATA PROFILES.

This disclosure relates generally to computing technology and more particularly to a method and system of assisted query formation validation and result previewing in a database having a complex schema.

A database may be created and maintained by a wide variety of users in an organization e.g. Target eBay Walmart etc. . Over time different engineers may use their own semantics when defining elements variables and or attributes of the database. This may create semantic complexity that may make it difficult for others to run queries against the database without extensive experimentation.

For example an analyst may seek to perform queries against the database based on a business requirement such as whether an item is likely to arrive at a particular distribution center in sufficient quantity for an expected holiday season based on forecasted supply and or demand. However the analyst may not know how to best execute his her queries without a detailed understanding of the database schema design and or table structure. In addition the database may be massive and queries to the database may take many minutes to execute. For this reason it may be cumbersome for the analyst to execute the query. As a result the productivity of engineers querying the database may be compromised.

Disclosed are a method a device and or a system of assisted query formation validation and result previewing in a database having a complex schema.

In one aspect a method of a query editor includes generating a data profile which includes a set of characteristics captured at various granularities of an initial result set generated from an initial query using a processor and a memory. The method determines what a user expects in the initial result set of the initial query and or a subsequent result set of a subsequent query based on the data profile and or a heuristically estimated data profile. The method includes enabling the user to evaluate a semantic accuracy of the subsequent query based on the likely expectation of the user as determined through the set of characteristics of the data profile.

The set of characteristics may include metadata of the initial query. For example the set of characteristics may include a number of attributes in the initial result set a data type of each of the attributes a frequency of usage per user a uniqueness constraint on the attributes a nullability of individual attributes and or a functional dependency between attributes. The method may determine a match ratio between the subsequent query and the initial query. At least some of the set of characteristics of the data profile may be presented to the user based on the match ratio through the query editor.

The set of characteristics may include individual row characteristics. The data profile may include a random sample of information presented in the initial result set. The user may be able to perform a cursory examination of the presented ones of the set of characteristics and or the random sample of information presented in the initial result set and or the subsequent result set e.g. based on the match ratio between the subsequent query and the initial query . The set of characteristics may include aggregate statistical characteristics including generic aggregate statistics and scenario aggregate statistics. The generic aggregate statistics may be calculated in a manner that is independent of a set of semantics of the attributes. The scenario aggregate statistics may be defined through a domain expert. The scenario aggregate statistics may be relevant in a particular scenario to enable the incorporation of a domain specific interpretation of semantics of each attribute and each set of data of the initial result set and or the subsequent result set.

The generic aggregate statistics may include number of rows of the initial result set and or the subsequent result set a count of distinct values in each attribute a distribution of attribute values including frequency per attribute value a pattern of attribute values for attribute values and or a set of functional dependencies among attribute value pairs. The generic aggregate value statistics may be applicable with no customization by the user. The scenario aggregate statistics may be programmed via user defined aggregate queries and may be associated with the initial result set and the subsequent result set.

The syntax of the user defined aggregate queries may be specific to a standard query processing engine and the signature of the scenario aggregate statistics may create the signature corresponds to a set of table valued functions. The method may present the set of characteristics of the data profile to the user through the query editor based on an auto complete algorithm to which the data profile and or the initial result set and or the subsequent result will be predicted when a partial input of the initial query and or the subsequent query is entered in the query editor.

The set of characteristics of the data profile may be presented to the user of the query editor through a profile visualizer module. The module may generate a visual representation of the data profile in a searchable format and or a hierarchical format and or a navigable format. The method may include computing the data profile through a result set profiler module which may map each attribute value of the attribute to the number of times particular value is observed in the attribute and may map patterns exhibited by an attribute value to a count of times pattern is observed in the attribute.

The pattern may be constructed based on a regular expression of string valued attributes. The method may permit the user to provide a user defined table value function using a visual interface through an application programming interface. The application program interface may consider a data source and or a table and or a table value aggregate query data as an input to be registered with the result set profiler. The user may be permitted to mark the subsequent query as completed after an iterative evaluation of the data profile generated from previous queries. The method may generate sample database having an identical schema which includes a potentially biased random sample of all the relations with a reduced set of data. The method may execute the subsequent query through the use of sample database to enable the user to reduce the time in debugging the subsequent query.

The method may apply a reservoir sampling algorithm to ensure a constant sample size is maintained. Each row in the subsequent result set of any subsequent query is selected with a same probability in a manner such that a tuple selected by many subsequent queries in a query log is likely to be selected in the potentially biased random sample with a higher probability. The method may generate an aggregate value based on the potentially biased random sample through a heuristical estimation algorithm. The method may monitor the behavior of the user in interacting with the set of characteristics of the data profile when the subsequent query is generated. Further the method may refine an presentation algorithm which may optimally determines the characteristics to present the user based in further query based on a monitored behavior of the user interacting with initial query and or the subsequent query in the query editor.

In another aspect a query editor application includes a result set profiler module to generate a data profile which includes a set of characteristics captured at various granularities of an initial result set generated from an initial query using a processor and a memory. The query editor application also includes a heuristical estimation module to determine what a user expects the initial result set of the initial query and or in a subsequent result set of a subsequent query based on the data profile and or a heuristically estimated data profile. Furthermore the query editor application includes a profile visualizer module to enable the user to evaluate a semantic accuracy of the subsequent query based on the likely expectation of the user as determined through the set of characteristics of the data profile.

In yet another aspect a non transitory medium readable through a processor and a memory which includes instructions embodied that are executable through the processor and the memory includes the instructions to determine what a user expects in one of an initial result set of an initial query and or a subsequent result set of a subsequent query based on a data profile and or a heuristically estimated data profile. The non transitory medium includes the instructions to enable the user to evaluate a semantic accuracy of the subsequent query based on the likely expectation of the user as determined through a set of characteristics of the data profile. The method further includes instructions to present some set of characteristics of the data profile to the user based on the match ratio through the query editor.

The methods and systems disclosed herein may be implemented in any means for achieving various aspects and may be executed in a form of a non transitory machine readable medium embodying a set of instructions that when executed by a machine cause the machine to perform any of the operations disclosed herein. Other features will be apparent from the accompanying drawings and from the detailed description that follows.

Other features of the present embodiments will be apparent from the accompanying drawings and from the detailed description that follows.

Disclosed are a method a device and or a system of assisted query formation validation and result previewing in a database having a complex schema.

According to one embodiment a query editor is software running on a data processing system such as a desktop computer a laptop computer and or a remote computational server. The processing system utilizes a processor to execute software instructions stored in memory according to one embodiment. The processor stores state information associated with these executed instructions within both the processor and the memory of the data processing system according to one embodiment. According to one embodiment the processor may be a central processing unit CPU a microprocessor and or any other hardware within a computer system that carries out the instructions of a program by performing the basic arithmetical logical and input output operations of the system. According to one embodiment a memory may be a random access memory RAM a read only memory ROM a flash memory and or any other physical devices used to store programs and or data for use in a digital electronic device.

User desires to construct a query that retrieves information from the original database that satisfies some informational need according to one embodiment. User interacts with the query editor to produce an initial query and zero and or more one of the subsequent query through a process of iterative refinement according to one embodiment. An initial query and any subsequent query are syntactic representations of retrieval operations to be performed upon information stored in the original database and or the sample database according to one embodiment. This syntactic representation may take the form of Structured Query Language and or any other information retrieval language required by original database and or the sample database according to one embodiment. The query editor submits the initial query and any subsequent query to the sample database on behalf of user to generate the initial result set and any subsequent result set according to one embodiment.

The sample database contains a biased random subset of the content within the original database according to one embodiment. The sample database and the original database exhibit the same structural schema tables and views with the same number of columns and identical column names and column definitions e.g. data types and constraints according to one embodiment. The sample database will serve as a proxy data source with the purpose of reducing query latency during iterative refinement of initial query into various subsequent queries according to one embodiment. The storage units e.g. tables in the sample database may store less data than those in the original database but maybe identical for performance reasons according to one embodiment.

The data profile captures all the interesting characteristics of an initial result set and or subsequent result set according to one embodiment. The data profile includes of metadata individual row characteristics aggregate statistical characteristics according to one embodiment. Aggregate statistical characteristics may comprise generic aggregate statistics and scenario aggregate statistics according to one embodiment. Metadata includes but is not limited to the number of attributes in the result set the data types of each attribute the uniqueness constraints on certain attributes and or attribute sets nullability of individual attributes and functional dependencies across attributes and or sets of attributes according to one embodiment. The data profile may be stored as a structured text file using the INI format extensible markup language XML JSON YAML and or other configuration file format and or within some data storage system such as a relational database e.g. MySql Oracle and or SQLite key value and or document stores e.g. Cassandra CouchDB and or MongoDB and or a persistent data structure such as a Java HashMap serialized to a file according to one embodiment.

Individual row characteristics are a random sample of an initial result set and or a subsequent result set and are used by the user to evaluate whether and or not there are obvious patterns and or anomalies according to one embodiment.

Generic aggregate statistics are used to validate the semantic accuracy of an initial query and or subsequent query according to one embodiment. Generic aggregate statistics may include initial result set and subsequent result set statistics unrelated to the semantics of the result set attributes according to one embodiment. These statistics include but are not limited to number of rows number of distinct values in each attribute frequency distributions of attribute values patterns of attribute values such as distribution by number of digits for integer values the joint distribution of digits to the right and left of the decimal point for floating point values and or a set of regular expressions for string values and functional relationships among attribute value pairs according to one embodiment. Generic aggregate statistics may have configuration parameters such as number of bins and bin widths for frequency distributions and or pattern lists but generally are predefined without any customization by the user according to one embodiment. Computation of generic aggregate statistics can be optimized and will often be computed with one and or a few scans of the data according to one embodiment.

Scenario aggregate statistics capture statistics related to the semantics of the result set attributes according to one embodiment. These statistics are defined by user during the refinement process to capture scenario specific expectations of desired query behavior according to one embodiment. Scenario aggregate statistics are defined using the syntax specific to query processing engines of original database and sample database and operate on an initial result set and or subsequent result set according to one embodiment.

The result set profiler module takes an initial result set and or subsequent result set and computes the data profile according to one embodiment. It scans each row the result set and maintains several key value mappings that map a pattern to the frequency of attribute values that match the pattern according to one embodiment. These mapping include but are not limited to item frequency the pattern is the value numeric representation patterns such as the number of digits for integers and the number of digits before and after the decimal point for floating point number string patterns defined by regular expressions and or scenario specific pattern sets such as expected functional relationships according to one embodiment.

The sampling module employs a reservoir sampling algorithm according to one embodiment. The reservoir sampling algorithm examines queries from query logs and fills the sample database with randomly select rows that satisfy the conditional clause e.g. WHERE for Structured Query Language according to one embodiment. If no such conditional clauses are found then the reservoir sampling algorithm will sample uniformly from all rows according to one embodiment. Reservoir sampling techniques and or other techniques for sampling a fixed number of items from a set of items will ensure that the size of the tables in the sample database will remain constant with new rows displacing old rows within the sample database according to one embodiment. This method may introduce duplicate rows into the sample database according to one embodiment. The reservoir sampling algorithm may augment each row with a frequency count instead storing duplicates rows directly according to one embodiment. For databases with star schema the sampling module may only sample the main fact table while retaining copies of the dimension tables especially if the dimension tables are relatively small according to one embodiment.

The estimation module contains a heuristical estimation algorithm according to one embodiment. The heuristical estimation algorithm estimates the results of aggregate value queries against the original database based upon the results of queries against the sample database according to one embodiment. The sampling bias introduced by the sampling module may be used by the heuristical estimation algorithm according to one embodiment. Assumptions of independence can help extrapolate the aggregate values from the sample database e.g. a smaller database according to one embodiment. Bootstrapped estimation techniques such as but not limited to case resampling Bayesian bootstrap and or parametric bootstrap could also be employed to obtain more accurate results according to one embodiment. The estimation module may also forgo applying the heuristical estimation algorithm and report to the user that the aggregate values from the sample database are based upon random samples and are likely to differ from aggregate values from the original database according to one embodiment.

In one embodiment a presentation algorithm that optimally determines which characteristics to present to the user may be refined based in a further query based on a monitored behavior of the user in interacting with at least one of the initial query and the subsequent query in the query editor.

The completion marker module records the decision of the user that either the initial query and or some subsequent query is ready to run against the original database given the current data profile according to one embodiment. The completion mark can be stored in the metadata of the data profile and or separately in some form of persistent storage according to one embodiment.

The sample database generator module constructs and or modifies a sample database according to one embodiment. The sample database is used by the auto complete algorithm module the result set profiler module the profile visualizer module the sample database generator module the completion marker module the sampling module and the estimation module according to one embodiment. The sample database generator module constructs and or modifies the sample database by either using the sampling module to acquire data from the original database and or by directly copying data from the original database in the case of small data storage units e.g. tables according to one embodiment.

The auto complete algorithm module provides change candidates through the user interface of the query editor to the user applicable to the initial query and or subsequent query using sample database information from the sample database generator module and data profile information from the result set profiler module according to one embodiment. The auto complete algorithm module provides change candidates sorted by relevance to complete the current portion e.g. attribute table or schema names query keywords predicates expressions of the initial query and or subsequent query according to one embodiment. The incomplete portion of the initial query and or subsequent query may include but not limited to prefixes of physical names of data objects or prefixes of logical names of data objects. Data objects include but are not limited to attributes tables schema predicates expressions attribute values. In one embodiment the auto complete module relies on a compressed index structure e.g. a compressed trie to work well within memory restrictions of modern browers to provide a highly responsive behavior. The auto complete module may also be implemented on the server side without concerns about memory restrictions.

The sampling module utilizes query logs to seed the sample database with representative data randomly sampled from original database according to one embodiment.

The estimation module retrieves parameters from the configuration to facilitate the estimation of generic aggregate statistics and scenario aggregate statistics of the original database based upon the initial result set and or subsequent result sets collected from the sample database according to one embodiment.

The run query activity initiates the query executor to send the initial query and or subsequent query to the original database . Results from this query are collected and presented to the user through the user interface of the query editor according to one embodiment.

The top half of shows the operational flow of a user iteratively refining a query without aggregation e.g. SUM COUNT AVERAGE using the query editor result set profiler module and the profile configurator according to one embodiment. User first configures the system through the profile configurator informing the system of expectations and limitations of the target query according to one embodiment. The user provides an initial query A to the query to the query editor . Query A may and or may not be complete as the auto complete algorithm module may have suggested changes according to one embodiment. Once the user is satisfied with the query A the query A is sent to the result set profiler according to one embodiment. The user examines the data profile for the query A after which the user will either finish because the query data profile indicates successful query and or the user will alter query A into query N and repeat the loop according to one embodiment. The bottom half of shows the operational flow of a user iteratively refining a query with aggregation e.g. SUM COUNT AVERAGE using the profile estimator query executor result set profiler module and the profile configurator according to one embodiment. User first configures the system through the profile configurator informing the system of expectations and limitations of the target query according to one embodiment. The user will start with a query A and send it to the query editor e.g. a profile estimator which responds with an estimated data profile according to one embodiment. The user will repeatedly construct a modified query N while the estimated data profile returned by the profile estimator is not satisfactory to the user loop according to one embodiment. At which point the user sends the query to the query executor which produces a data profile according to one embodiment. If this data profile is satisfactory the user is finished otherwise the process is repeated as indicated by loop according to one embodiment.

Individual row characteristics are presented to the user to validate the semantic correctness of the initial query and or any subsequent query and consist of a randomly chosen subset of the initial result set and or subsequent result set according to one embodiment.

Automatically populated information includes but is not limited to popular tables popular attributes co queried attributes in a table related tables joinable columns join predicates and relevant filters for each table in one embodiment.

A data catalog repository stores the social data catalog data objects and or information about the data object and returns information about the social data catalog and or data objects in one embodiment. The data catalog repository may also update the social data catalog data objects and or information about data objects in one embodiment. The background extraction module automatically profiles locates extracts and or associates documentation and or query logs of the user and or other users in one embodiment. The user interaction logger monitors and or records the activity of the user while interacting with the front end component in one embodiment.

The query logs crawler collects several types of logs including but not limited to application logs query editor logs and logs in one embodiment. These query logs are passed on to the query logs miner that updates the social data catalog table through the social data catalog API in one embodiment.

The query logs crawler constructs query logs by scanning application logs with the query extractor in one embodiment. The query extractor performs this scanning process using templates produced by the template search and detector by analyzing examples of application log fragments and query signatures e.g. SELECT . . . in one embodiment.

The server performs several learning operations including but not limited to expertise mining template mining query log mining auto generation of templates statistics computation search ranking model recommendation model query preference optimization similar data objects e.g. attributes tables in one embodiment.

The query language prefix index and the data catalog prefix index are built and updated by the server providing the data catalog API in one embodiment. The server stores query language keywords and a data catalog in one embodiment.

A query language keywords prefix index consists of a prefix index stored as a trie hash map and or other indexed data structures and a precedence graph between keywords in one embodiment. The query language keywords prefix index supports several operations including but not limited to lookup prefix previous keywords candidate keywords build keyword dictionary and build precedence graph in one embodiment.

The data catalog prefix index consists of an indexable data structure such as a trie and or hash map implementing a prefix index key to tuple in one embodiment. The data object name could be the physical name and or the logical name of the object. The data catalog prefix indexes supports several operations including but not limited to lookup prefix candidate build data set and update data object name properties in one embodiment.

A typical user use case is described in the interaction diagram of in one embodiment. A user initializes the session by sending initialization information to the social data catalog API which forwards this initialization information to the test query builder in one embodiment. The test query builder then builds prefix indexes such as query language keywords prefix index and or data catalog prefix index in one embodiment. The user initially sends a character to the test query builder a lookup action is performed on the prefix indexes and some numbers of candidates are returned to the test query builder that then presents the candidates to the user in a front end component in one embodiment. The user then repeatedly either types another character or choose a candidate from those presented by the front end component and the partial query maintained by the query builder is sent to the prefix indexes to generate the next round of candidates in one embodiment. Eventually the user sends a test query signal to the test query builder upon which it will issue a test version of the query to the original database and or the sample database in one embodiment.

In one embodiment a method of a query editor includes generating a data profile which includes a set of characteristics captured at various granularities of an initial result set generated from an initial query using a processor and a memory . The method determines what a user expects in the initial result set of the initial query and or a subsequent result set s of a subsequent query based on the data profile and or a heuristically estimated data profile. The method includes enabling the user to evaluate a semantic accuracy of the subsequent query based on the likely expectation of the user as determined through the set of characteristics of the data profile .

The set of characteristics may include metadata of the initial query . For example the set of characteristics may include a number of attributes in the initial result set a data type of each of the attributes a frequency of usage per user a uniqueness constraint on the attributes a nullability of individual attributes and or a functional dependency between attributes. The method may determine a match ratio between the subsequent query and the initial query . At least some of the set of characteristics of the data profile may be presented to the user based on the match ratio through the query editor .

The set of characteristics may include individual row characteristics . The data profile may include a random sample of information presented in the initial result set . The user may be able to perform a cursory examination of the presented ones of the set of characteristics and or the random sample of information presented in the initial result set and or the subsequent result set s e.g. based on the match ratio between the subsequent query and the initial query . The set of characteristics may include aggregate statistical characteristics including generic aggregate statistics and scenario aggregate statistics . The generic aggregate statistics may be calculated in a manner that is independent of a set of semantics of the attributes. The generic aggregate statistics may be defined through a domain expert. The generic aggregate statistics may be relevant in a particular scenario to enable the incorporation of a domain specific interpretation of semantics of each attribute and each set of data of the initial result set and or the subsequent result set s .

The generic aggregate statistics may include number of rows of the initial result set and or the subsequent result set s a count of distinct values in each attribute a distribution of attribute values including frequency per attribute value a pattern of attribute values for attribute values and or a set of functional dependencies among attribute value pairs. The generic aggregate value statistics may be applicable with no customization by the user . The generic aggregate statistics may be programmed via user defined aggregate queries and may be associated with the initial result set and the subsequent result set s .

The syntax of the user defined aggregate queries may be specific to a standard query processing engine and the signature of the generic aggregate statistics may create the signature corresponds to a set of table valued functions. The method may present the set of characteristics of the data profile to the user through the query editor based on an auto complete algorithm e.g. of the auto complete algorithm module to which the data profile and or the initial result set and or the subsequent result will be predicted when a partial input of the initial query and or the subsequent query is entered in the query editor .

The set of characteristics of the data profile may be presented to the user of the query editor through a profile visualizer module . The module may generate a visual representation of the data profile in a searchable format and or a hierarchical format and or a navigable format. The method may include computing the data profile through a result set profiler module which may map each attribute value of the attribute to the number of times particular value is observed in the attribute and may map patterns exhibited by an attribute value to a count of times pattern is observed in the attribute.

The pattern may be constructed based on a regular expression of string valued attributes. The method may permit the user to provide a user defined table value function using a visual interface through an application programming interface. The application program interface may consider a data source and or a table and or a table value aggregate query data as an input to be registered with the result set profiler. The user may be permitted to mark the subsequent query as completed after an iterative evaluation of the data profile generated from previous queries. The method may generate sample database e.g. a subset of the original database having an identical schema which includes a potentially biased random sample of all the relations with a reduced set of data. The method may execute the subsequent query through the use of sample database e.g. a subset of the original database to enable the user to reduce the time in debugging the subsequent query .

The method may apply a reservoir sampling algorithm to ensure a constant sample size is maintained. Each row in the subsequent result set s of any subsequent query is selected with a same probability in a manner such that a tuple selected by many subsequent queries in a query log is likely to be selected in the potentially biased random sample with a higher probability. The method may generate an aggregate value based on the potentially biased random sample through a heuristical estimation algorithm . The method may monitor the behavior of the user in interacting with the set of characteristics of the data profile when the subsequent query is generated. Further the method may refine an presentation algorithm which may optimally determines the characteristics to present the user based in further query based on a monitored behavior of the user interacting with initial query and or the subsequent query in the query editor .

In another embodiment a query editor application includes a result set profiler module to generate a data profile which includes a set of characteristics captured at various granularities of an initial result set generated from an initial query using a processor and a memory . The query editor application also includes a heuristical estimation module e.g. the estimation module to determine what a user expects the initial result set of the initial query and or in a subsequent result set s of a subsequent query based on the data profile and or a heuristically estimated data profile. Furthermore the query editor application includes a profile visualizer module to enable the user to evaluate a semantic accuracy of the subsequent query based on the likely expectation of the user as determined through the set of characteristics of the data profile .

In yet another embodiment a non transitory medium readable through a processor and a memory which includes instructions embodied that are executable through the processor and the memory includes the instructions to determine what a user expects in one of an initial result set of an initial query and or a subsequent result set s of a subsequent query based on a data profile and or a heuristically estimated data profile. The non transitory medium includes the instructions to enable the user to evaluate a semantic accuracy of the subsequent query based on the likely expectation of the user as determined through a set of characteristics of the data profile . The method further includes instructions to present some set of characteristics of the data profile to the user based on the match ratio through the query editor .

In one embodiment a method of a curated answers system includes automatically populating a profile markup page of a user with information describing an initial query of a database that the user has generated using a processor and a memory determining that another user of the database has submitted a similar query that is semantically proximate to the initial query of the database that the user has generated and presenting the profile markup page of the user to the other user . The method of the curated answers system may include enabling the other user to communicate with the user through a communication channel on the profile markup page .

A question of the other user may be published to the user on the profile markup page of the user and or other profile markup page of the other user . The question may be associated as being posted by the other user . The method of the curated answers system may include processing a response of the user to the question . The response of the user to the question may be published on the profile markup page of the user and or the other profile markup page of the other user . The response may be associated as being posted by the user.

A table indicating a set of profiles may be automatically generated and associated with different users that have queried the database with a semantically proximate query to the similar query based on overall the user s and another user s usage of the data objects in the query log. The table may be presented to the other user . The system may enable the other user to communicate with any of the different users associated with the set of profiles . A user group s e.g. that includes the other user and or the user may be generated based on a relevancy between the similar query and the initial query . Users of the database may be permitted to associate an electronic mailing address a phone number a biography a personal photograph a social media handle and or an educational background with their profile.

The profile markup page of the other user may be automatically populated with information describing the similar query of the database that the other user has generated. The profile markup page of the user may be automatically populated with information describing the initial query of the database that the user has generated. The other profile markup page of the other user may be automatically populated with information describing the similar query of the database . Both these operations e.g. populating profile markup pages may be performed through automatic observation and or monitoring of activity of the user and or the other user in interacting with the database .

A social data catalog table of information about how users are interacting with the database and or a sample database may be generated. The social data catalog table may be populated with a meta data a logical definition and or description of attributes information about usage page views between users a social data network and or a statistical data profile. Information from external data source and or social media profiles may be extracted to generate the social data catalog table of information . Information from a ranked list of knowledgeable users may be crowd sourced to generate a ranked order of priority of information presented in profile pages of the curated answers system .

The information about usage may include related tables and or join predicates as well as relevant filters associated with each table of the database and or the sample database . The social data network may include a list of users who are knowledgeable about a particular object related to the other query. The information may be a metadata such as a schema name a table in a schema a name of an attribute a data type of an attribute a primary key associated with an attribute a constraint of an attribute a functional dependency between attributes an index a foreign key a field name a column name a table name and or a query description.

A data catalog studio module that includes a data catalog repository a data source registrar a background extraction component e.g. background extraction module a front end component and or a user interaction logger may be generated. The data catalog repository may store the social data catalog api e.g. having the social data catalog table a data object and or information about the data object. The data catalog repository may return information about the data object. The data catalog repository may also update stored information and return a ranked list of relevant data object. Similarly the data catalog repository may search and return a list of data object of a given type. The data source register may register and extract from the data source declared metadata from a schema.

The front end component may enable the user and or the other user to register a data source upload documentation on the data source upload the query log search relevant objects and or browse the schema in the data source . The background extraction component e.g. background extraction module may automatically profile locate extract and or associate a documentation of the user and or the other user in the data source . The background extraction component e.g. background extraction module may also automatically profile locate extract and or associate a query log of the user and or the other user in the data source . The system may monitor and or log interactions between the front end component and or various users accessing the front end component that add delete reorder modify and or sort information presented in profile pages of users of the curated answers system . In addition the system may auto generating queries about individual data objects comprising a schema a table an attribute and an attribute value to enable users to automatically communicate with expert users on at least one of these individual data objects and enabling communication with the expert users through a single click methodology in each data page of the data catalog repository. Further the system may auto generating a question for a user to post based on observed content comprising at least one of a current details of a page a title of a page a description of a page and a further clarification requested by the user prior to a question posting.

In other embodiment a method of a curated answers system includes automatically populating a profile markup page of a user with information describing an initial query of a database that the user has generated using a processor and a memory determining that another user of the database has submitted a similar query that is semantically proximate to the initial query of the database that the user has generated presenting the profile markup page of the user to the other user enabling the other user to communicate with the user through a communication channel on the profile markup page publishing a question of the other user to the user on the profile markup page of the user and or other profile markup page of the other user associating the question as being posted by the other user processing a response of the user to the question publishing the response of the user to the question on the profile markup page of the user and or the other profile markup page of the other user and associating the response as being posted by the user.

In yet other embodiment a curated answers system includes a data catalog module to automatically populate a profile markup page of a user with information describing an initial query of a database that the user has generated using a processor and a memory a social catalog module to determine that another user of the database has submitted a similar query that is semantically proximate to the initial query of the database that the user has generated and a front end component to present the profile markup page of the user to the other user .

In one embodiment a method includes automatically generating an editable markup page and or a page name based on an initial query of a database using a processor and a memory associating the generated markup page with a user of the database and appending information to the editable markup page based on a similar query of the database by another user . The method may include permitting other user of the database to access modify append and or delete entries from the editable markup page .

Each edit may be tracked by the other user in a log file. The log file may be presented on the markup page such that visitors to the editable markup page have visible to them a change history of the editable markup page by various users of the database . A set of rules may be created in which any user can flag an edit made by any user of the database as being marked for deletion. other user may be permitted to vote on whether the edit made should be deleted. The editable markup page may be restored to a state prior to the edit being made based on a successful vote of the other user of the database .

A profile markup page of the user may be automatically populated with information describing the initial query of a database that the user has generated. It may be determined that other user of the database has submitted a similar query that is semantically proximate to the initial query of the database that the user has generated. The profile markup page of the user may be presented to the other user . Information may be automatically appended about the similar query that is semantically proximate to the initial query of the database on the editable markup page .

The other user may be enabled to communicate with the user through a communication channel on the profile markup page. A question of the other user to the user may be published on the profile markup page of the user and or other profile markup page of the other user . The question may be associated as being posted by the other user . A response of the user to the question may be processed and published on the profile markup page of the user the other profile markup page of the other user and or on the editable markup page . The response may be associated as being posted by the user.

Users of the database may be permitted to associate an electronic mailing address a phone number a biography a personal photograph a social media handle and or an educational background with their profile associated the editable markup page . The other profile markup page of the other user may be automatically populated with information describing the similar query of the database that the other user has generated. The automatic population of the profile markup page and or the editable mark up page may be performed through automatic observation and or monitoring of activity of the user and or the other user in interacting with the database . A social data catalog table may be generated that populates the editable markup page .

Relationships between different data objects including popular tables popular attributes co queried attributes in a table related tables joinable columns joinable predicates and or relevant filter for each table using the social data catalog table may be associated. Relationships between data objects and or users includes a list of knowledgeable people who may be contacted about particular objects using the social data catalog table may also be associated. Queries may be parsed into constituent fragments. Results of parsed queries may be aggregated normalized and or stored. Information may be mined using the results of the parsed queries to populate the social data catalog.

The social data catalog associated with the editable markup page may be populated with information from crawled query logs analyzed application logs and or a query editing tool. The crawling query logs may ingest queries from files where users store queries. Application logs may be analyzed for queries. Query editing tools may be added to the social data catalog to develop and or append developed queries to the editable markup page . A social data catalog module may implement a materialized computation and or an on demand or computation as an alternative to an Application Programming Interface API function. The materialized computation may involve periodically mining query logs to update a query reference table with new queries that have not been previously processed as well as materializing and or indexing derived information of different data objects.

On demand computation may involve indexing the query reference table using various objects that each row references. The social data catalog table may be populated with a meta data a logical definition and or description of attributes information about usage page views between users a social data network and or a statistical data profile. Information may be extracted from external data sources and or social media profiles to generate the social data catalog table of information. Information may be crowdsourced from a ranked list of knowledgeable users to generate a ranked order of priority of information presented in profile pages of the curated answers system.

The information about usage may include related tables and or join predicates as well as relevant filters associated with each table of the original database and or the sample database . The social data network may include a list of users who are knowledgeable about a particular object related to the other query. The information may be a metadata that includes a schema name a table in a schema a name of an attribute a data type of an attribute a primary key associated with an attribute a constraint of an attribute a functional dependency between attributes an index a foreign key a field name a column name a table name and or a query description.

A data catalog studio may be associated with the editable markup page . A data catalog repository a data source registrar a background extraction component a frontend component and or a user interaction logger may be generated in the data catalog studio. The data catalog repository may store the social data catalog may store a data object and or information about the data object and may return information about the data object. The data catalog repository may also update stored information and return a ranked list of relevant data object. In addition the data catalog repository may search and return a list of data object of a given type. A data source may be registered.

The data source may extract declared metadata from a schema using the data source registrar. The user and or the other user may be enabled to register a data source upload documentation on the data source upload the query log search relevant objects and or browse the schema in the data source using the front end component. A documentation and or a query log of the user and or the other user may be automatically profiled located extracted and or associated in the data source using the background extraction component. Interactions between the front end component and or various users accessing the front end component may be monitored or logged to add delete reorder modify and or sort information presented in profile pages of users of a curated answers system.

In other embodiment a method includes automatically generating an editable markup page and or a page name based on an initial query of a database using a processor and a memory associating the generated markup page with a user of the database appending information to the editable markup page based on a similar query of the database by another user permitting other user of the database to access modify append or delete the editable markup page .

In yet other embodiment a collaborative database knowledge repository e.g. the collaborative database management system includes a social database catalog module having a social data catalog table to populate an editable markup page of the collaborative database knowledge repository e.g. the collaborative database management system . The social data catalog table associates relationships between different data objects includes popular tables popular attributes co queried attributes in a table related tables joinable columns joinable predicates and or relevant filter for each table using the social data catalog table.

The collaborative database knowledge repository e.g. the collaborative database management system also includes a data catalog studio to associate with the editable markup page and to generate in the data catalog studio a data catalog repository a data source registrar a background extraction component a frontend component and or a user interaction logger.

Although the present embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the various embodiments. For example the various devices and modules described herein may be enabled and operated using hardware circuitry e.g. CMOS based logic circuitry firmware software and or any combination of hardware firmware and software e.g. embodied in a non transitory machine readable medium . For example the various electrical structure and methods may be embodied using transistors logic gates and electrical circuits e.g. application specific integrated ASIC circuitry and or Digital Signal Processor DSP circuitry .

In addition it will be appreciated that the various operations processes and methods disclosed herein may be embodied in a non transitory machine readable medium and or a machine accessible medium compatible with a data processing system e.g. data processing system . Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

A number of embodiments have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the claimed invention. In addition the logic flows depicted in the figures do not require the particular order shown and or sequential order to achieve desirable results. In addition other steps may be provided and or steps may be eliminated from the described flows and other components may be added to and or removed from the described systems. Accordingly other embodiments are within the scope of the following claims.

It may be appreciated that the various systems methods and apparatus disclosed herein may be embodied in a machine readable medium and or a machine accessible medium compatible with a data processing system e.g. a computer system and or may be performed in any order.

The structures and modules in the figures may be shown as distinct and communicating with only a few specific structures and not others. The structures may be merged with each other may perform overlapping functions and may communicate with other structures not shown to be connected in the figures. Accordingly the specification and or drawings may be regarded in an illustrative rather than a restrictive sense.

