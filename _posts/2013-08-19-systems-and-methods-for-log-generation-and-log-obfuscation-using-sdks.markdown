---

title: Systems and methods for log generation and log obfuscation using SDKs
abstract: This disclosure generally relates to application development platforms, and more particularly to systems and methods for log generation and log obfuscation using software development kits (SDKs). In one embodiment, an application logging configuration method is disclosed, comprising: obtaining, for an application, a developer-specific log generation schema specifying at least a developer-specific set of variables to be logged and associated code line numbers; obtaining a developer-independent log generation schema specifying at least a developer-independent set of variables to be logged and associated code line numbers; extracting the specifications of the developer-specific and developer-independent sets of variables to be logged and associated code line numbers; generating an application logging schema specifying at least a combination of the developer-specific and developer-independent sets of variables to be logged and associated code line numbers; and storing the application logging schema.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411708&OS=09411708&RS=09411708
owner: WIPRO LIMITED
number: 09411708
owner_city: Bangalore
owner_country: IN
publication_date: 20130819
---
This U.S. Patent Application claims priority under 35 U.S.C. 119 to India Application No. 1659 CHE 2013 filed Apr. 12 2013 and entitled Systems and Methods for Log Generation and Log Obfuscation using SDKs. The aforementioned application is incorporated herein by reference in its entirety.

This disclosure generally relates to application development platforms and more particularly to systems and methods for log generation and log obfuscation using software development kits SDKs .

Software application developers use application development platforms e.g. Software Development Kits SDKs to write software applications. An SDK is a collection of software used for developing applications for a specific end use for example a specific device or an operating system. Examples of SDKs include without limitation the Java SDK the Mac OS X SDK and the iPhone SDK. SDKs may also include an integrated development environment IDE which provides a programming window for writing source code a debugger for fixing program errors and a visual editor. IDEs may also include a compiler which is used to create applications from source code files.

Once the applications are written they are continuously maintained for example to remove bugs and plug security loopholes. Therefore application developers often configure the applications to generate logs during execution as the generated logs help them to better understand the application execution behavior and debugging. Further it is important to keep the generated logs secure. However application developers tend to have different security requirements and preferences.

In one embodiment an application logging configuration method is disclosed comprising obtaining for an application a developer specific log generation schema specifying at least a developer specific set of variables to be logged and associated code line numbers obtaining a developer independent log generation schema specifying at least a developer independent set of variables to be logged and associated code line numbers extracting the specifications of the developer specific and developer independent sets of variables to be logged and associated code line numbers generating an application logging schema specifying at least a combination of the developer specific and developer independent sets of variables to be logged and associated code line numbers and storing the application logging schema.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the disclosure as claimed.

Exemplary embodiments are described with reference to the accompanying drawings. Wherever convenient the same reference numbers are used throughout the drawings to refer to the same or like parts. While examples and features of disclosed principles are described herein modifications adaptations and other implementations are possible without departing from the spirit and scope of the disclosed embodiments. It is intended that the following detailed description be considered as exemplary only with the true scope and spirit being indicated by the following claims.

An application logging configuration system is disclosed. The application logging configuration system includes a processor and a memory device operatively connected to the processor. The memory device storing processor executable instructions for obtaining for an application a developer specific log generation schema specifying at least a developer specific set of variables to be logged and associated code line numbers. Further memory device storing processor executable instructions for obtaining a developer independent log generation schema specifying at least a developer independent set of variables to be logged and associated code line numbers. Also the memory device storing processor executable instructions for extracting the specifications of the developer specific and developer independent sets of variables to be logged and associated code line numbers generating an application logging schema specifying at least a combination of the developer specific and developer independent sets of variables to be logged and associated code line numbers and storing the application logging schema.

The system further may include without limitation a back plane web service provider and a log files database . Each SDK server may use an independent log files database. The back plane web service provider provides a web application service for the users.

The SDK server may include a processor and a memory device operatively connected to the processor. The memory device may store processor executable instructions to implement the application logging configuration. The generated logs may be sent to log files database . Application logging configuration is explained in further detail in conjunction with below.

Each application developer may specify individual logging requirements using a developer specific log generation schema specifying at least a developer specific set of variables to be logged and associated code line numbers. Further stakeholder may also specify their requirements using a developer independent log generation schema specifying at least a developer independent set of variables to be logged and associated code line numbers. The application developers and the stakeholder may specify their requirements using a schema which dictates the log generation storage and retrieval. The schema may also specify the keys primary secondary and others as needed as well as the database which stores the log structure enabling query support for debugging and triage.

The log configuration module may obtain the per line based schema specified by the each application developer indicated by the variable i in . The schema may be comprised of a Log Yes No Boolean variable for each data type indicated by the variable j in which indicates whether or not variables of that particular data type are to be logged. If the Boolean value yes for example for the data type string then all string variables may have to be logged. The entire schema may be a list of Boolean values one for each data type. The schema obtained from an application developer may be unique and personalized as per the log generation requirement of the application developer.

Also one application developer may specify multiple schemas e.g. one for each specific line number indicated by the variable k in . The ability to provide a line number specific log generation along with a log generation directive on a per data type basis may provide complete flexibility for log generation.

Moreover a stakeholder e.g. a beneficiary or implementer of the service and or system may specify a baseline policy log generation requirement using the developer independent log generation schema applicable across all the application developers. The format of the stakeholder schema may be the same as with the schema for each one of the application developers i.e. it provides a Boolean value Yes or No for each one of the data types.

After obtaining the log generation schema the log configuration module may extract the specifications of the developer specific and developer independent sets of variables to be logged and associated code line numbers. In an embodiment one of the developer specific set of variables to be logged and associated code line numbers and the developer independent set of variables to be logged and associated code line numbers may be a null set. Thus in such embodiments only developer specific set of variables or developer independent set of variables e.g. as specified by the stakeholder may be logged.

Next the log configuration module may generate an application logging schema specifying a combination of the developer specific and developer independent sets of variables to be logged and associated code line numbers. In one embodiment the log configuration module may perform OR operations to determine which line numbers of the code written by the application developers and match the stakeholder s requirement according to the data type and variable defined in the schema. An example of pseudo code for the combining logic is provided below 

At step the log configuration module may identify the lines for log generation for each schema obtained from the application developer . Next at step the log configuration module may identify the log data types to be logged. If the Boolean value yes for example for the data type String then all String variables are to be logged. Then the log configuration module may obtain the stakeholder schema from the stakeholder at step . The stakeholder s schema may define baseline data log generation requirements applicable across all of the application developers.

Thereafter at step the log configuration module may use the OR operation to combine the schemas of the application developer and the stakeholder . At step this may generate the application logging schema for the application developer which is then stored at step . In an embodiment the application logging schema may be stored in the database .

Further if there are 10 application developers then there may be 10 application logging schemas. The nth application logging schema per data type may be an OR relationship between the nth application developer s schema and the stakeholder s schema. Furthermore the nth application logging schema may comprise one or more application logging schemas per line number. The log configuration module may execute similar steps for the schemas received from the application developers and .

The log obfuscation module may be implemented by the processor and the memory device in the SDK server . The memory device may be operatively connected to the processor and stores processor executable instructions to implement the log obfuscation module .

The log obfuscation module may obtain a developer specific log obfuscation schema from application developers specifying a developer specific set of variables to be obfuscated and associated code line numbers. Further the module may obtain a developer independent log obfuscation schema from stakeholders specifying a developer independent set of variables to be obfuscated and associated code line numbers. Then the module may extract the specifications of the developer specific and developer independent sets of variables to be obfuscated and associated code line numbers. In an embodiment the developer specific set of variables to be obfuscated and associated code line numbers and the developer independent set of variables to be obfuscated and associated code line numbers may be a null set.

Next the module may generate a log obfuscation schema specifying a combination of the developer specific and developer independent sets of variables to be obfuscated and associated code line numbers. The generation of log obfuscation schema is described in detail in conjunction with below.

In one embodiment the module may adopt a combining logic with the schema obtained from the application developers the stakeholder to identify the variables that need to be obfuscated. The module may perform OR operations between the per line schema obtained from the application developers with the per line schema provided by the stakeholder to generate a log obfuscation schema. An example of pseudo code for the combining logic is provided below 

Finally the module may store the log obfuscation schema. In an embodiment it may be stored in the database . Further the application log schema and log obfuscation schema may be stored as a single schema.

In an embodiment the log obfuscation schema may also specify an obfuscation method associated with a variable to be obfuscated. The obfuscation method associated with the variable to be obfuscated may include without limitation one of replacing a variable name with a numeric code replacing Personally Identifiable Information PII with a token or replacing a data attachment with metadata. The obfuscation method may also include encryption using an application specific key.

The application developers and may specify their schemas for the various lines of code which may be then obtained by the log obfuscation module . At step the log obfuscation module may identify the lines for log obfuscation for each schema received from the application developer . Next at step the log obfuscation module may identify the log data types to be obfuscated. If the Boolean value yes for example for the data type String then all String variables are to be obfuscated. At step the stakeholder may provide the stakeholder schema to the log obfuscation module . The stakeholder schema may define baseline data log generation requirements applicable across all the application developers. Thereafter at step the log obfuscation module may use the OR operation to combine the schemas of the respective application developers and the stakeholder . This may generate a specific log obfuscation format for each application developer.

At step the log obfuscation schema for the application developer may be generated. The log obfuscation schema may also include the selected log obfuscation method. The generated log obfuscation schema may be then stored at step . In an embodiment the application logging schema may be stored in the database .

Further if there are 10 application developers then there may be 10 log obfuscation schemas. The nth log obfuscation schema per data type may be an OR relationship between the nth application developer s schema and the stakeholder s schema. Furthermore the nth log obfuscation schema may comprise one or more log obfuscation schema per line number. The log obfuscation module may execute similar steps for the schemas received from the application developers and .

An application logging system is disclosed. In an exemplary embodiment the application logging system may be implemented by the processor and the memory device in the SDK server . The memory device may be operatively connected to the processor and stores processor executable instructions to implement the application logging system. The SDK server may receive an Application Programming Interface API call for a service hosted by the back plane web service provider . The SDK server may capture the API calls and then forward the same to the back plane web service provider . In another embodiment the SDK server may be co located at an enterprise level software gateway tunneling all API calls from within the enterprise from to the Internet.

In an exemplary embodiment an application developer may send an API call e.g. as a HTTP POST request to the application server. An example API call is provided below 

Although the API call may be ultimately intended to be provided to the back plane web service provider the API call may be directed to the SDK server instead. For example in the API call above www.webservice1.com may point to the SDK server rather than the back plane web service provider . In alternative embodiments the API call may be addressed to the back plane web service provider itself but the SDK server may be configured to intercept the API call before the API call is read by a web service application executing on the back plane web service provider .

After receiving the API call the application logging system may parse the API call to extract at least one of an API call name and one or more API call parameters. Then it may generate a log entry using the at least one of the API call name and the one or more API call parameters. The log entry may be generated in accordance with the application logging schema generated by the log configuration module specifying a developer specific set of variables to be logged and associated code line numbers and a developer independent set of variables to be logged and associated code line numbers. In an embodiment the developer specific set of variables to be logged and associated code line numbers and the developer independent set of variables to be logged and associated code line numbers may be a null set. Finally the generated log entry may be stored in the database .

After generating the log entry the application logging system may obfuscate at least a portion of the log entry in accordance with a log obfuscation schema generated by the log obfuscation module specifying at least a developer specific set of variables to be obfuscated and associated code line numbers and a developer independent set of variables to be obfuscated and associated code line numbers. The application log schema and log obfuscation schema may be stored as a single schema. In an embodiment one of the developer specific set of variables to be obfuscated and associated code line numbers and the developer independent set of variables to be obfuscated and associated code line numbers may be a null set.

Further the log obfuscation schema may also specify an obfuscation method associated with a variable to be obfuscated. The obfuscation method associated with the variable to be obfuscated may include one of replacing a variable name with a numeric code replacing personally identifiable information with a token or replacing a data attachment with metadata. Further the obfuscation method may include encryption using an application specific key.

The memory device of the SDK server may further store instructions for generating at least one of a new API call name known as lexical rerouting or Dynamic Link Library DLL rerouting or a new API call address known as Internet Protocol IP address rerouting using the extracted at least one of the API call name or the one or more API call parameters. Thereafter a new API call may be generated for the service using the generated new API call name or the new API call address. Finally providing the generated new API call for the service.

In case of IP rerouting the new API call address may be generated by providing the API call name as input to a lookup table however the API call name for the generated new API call may be the same as the API call name. Therefore an API named may be called but it may direct the API reference to a new IP address to call a different service. Only the listed and designated API calls may get rerouted other traffic remaining untouched. This is explained in further detail in conjunction with below.

In case of lexical rerouting a new API call name may be generated by extracting a string subset of the API call name however an API call address for the generated new API call may be the same as an API call address for the received API call for the service. Therefore an API named may be renamed however the new API call may be forwarded to the original intended web server s IP address with the same set of API parameters. Again only the listed and designated API calls may get rerouted all other traffic may be untouched. This is explained in further detail in conjunction with below.

In some embodiments both IP and lexical rerouting may be performed simultaneously whereas in alternative embodiments only one or the other may be performed.

Then the log configuration module and log obfuscation module may be implemented by processing each application developers log generation specification and log obfuscation specification. Next each application developer s log generation specification and log obfuscation specification may be overridden by the stakeholder s common log generation specification and common log obfuscation specification input respectively to obtain logging rules file . The logging rules file may be provided to an LREU .

Further an API sandbox may be provided that may receive API calls from application developers users makes a copy of both the called API names and API parameters and passes the API call to the original web services. In some embodiments the API sandbox may be co located at an enterprise software gateway. The API sandbox may be configured to receive all API calls from all applications or only some API calls having specific API call names or API calls only from a subset of applications e.g. API calls originating from applications developed by specific application developers applications of a specific type e.g. games business software etc. applications of a specific usage level etc. or others such as subsets of API calls. The integration of the SDK server with the web service provider and the passing of the API call to the original web service provider may be implemented via IP rerouting.

The local copy created by the API sandbox may be provided via a T Tap output to the LREU . The T Tap and API sandbox may ensure that the data and local API copy being operated on e.g. by the LREU dashboard UI etc. are not accessible to modules on the other side of the API sandbox and other modules or data outside the API sandbox do not become involved in processes executed within the API sandbox . The LREU may obtain data upon which to operate from a data expiry unit . For example the data expiry unit may store the API call names and API call parameters e.g. input variables source IP address destination IP address user ID etc. up to a time period beyond which the storage may be freed and new data may be stored on a First In First Out FIFO basis. The data expiry unit may be implemented as a relational database file e.g. CSV text file etc. object stored in memory etc. The LREU may obtain logging and obfuscation rules for processing the API call from a logging obfuscation rules file object or database etc. see . The results of the logging obfuscation rules processing of the API calls may be reported or displayed via a graphical user interface dashboard output .

Additional illustrative embodiments are listed below. In some embodiments an application logging system may be disclosed comprising a processor and a memory device operatively connected to the processor and storing processor executable instructions for receiving an application programming interface API call for a service parsing the API call to extract at least one of an API call name or one or more API call parameters generating a log entry using the at least one of the API call name or the one or more API call parameters in accordance with an application logging schema specifying at least a developer specific set of variables to be logged and associated code line numbers and a developer independent for the purposes of illustration but not to be limiting provided by the stakeholder logging policy set of variables to be logged and associated code line numbers and storing the generated log entry. Generating the log entry may further comprise obfuscating at least a portion of the log entry in accordance with a log obfuscation schema specifying at least a developer specific set of variables to be obfuscated and associated code line numbers and a developer independent for the purposes of illustration but not to be limiting provided by the stakeholder security policy set of variables to be obfuscated and associated code line numbers. The application log schema and log obfuscation schema may be stored as a single schema. The service may be a web application service. One of the developer specific set of variables to be logged and associated code line numbers and the developer independent set of variables to be logged and associated code line numbers may be a null set. One of the developer specific set of variables to be obfuscated and associated code line numbers and the developer independent set of variables to be obfuscated and associated code line numbers may be a null set. The log obfuscation schema may specify an obfuscation method associated with a variable to be obfuscated. The obfuscation method associated with the variable to be obfuscated may include one of replacing a variable name with a numeric code replacing personally identifiable information with a token or replacing a data attachment with metadata. The obfuscation method may include encryption using an application specific key. The memory device may further store instructions for generating at least one of a new API call name or a new API call address using the extracted at least one of the API call name or the one or more API call parameters generating a new API call for the service using the generated at least one of the new API call name or the new API call address and providing the generated new API call for the service. The new API call name may be generated by extracting a string subset of the API call name. An API call address for the generated new API call may be the same as an API call address for the received API call for the service. Alternatively the new API call address may be generated by providing the API call name as input to a lookup table. An API call name for the generated new API call may be the same as the API call name.

In some embodiments an application logging method may be disclosed comprising receiving an application programming interface API call for a service parsing the API call to extract at least one of an API call name or one or more API call parameters generating a log entry using the at least one of the API call name or the one or more API call parameters in accordance with an application logging schema specifying at least a developer specific set of variables to be logged and associated code line numbers and a developer independent for the purposes of illustration but not to be limiting provided by the stakeholder logging policy set of variables to be logged and associated code line numbers and storing the generated log entry. Generating the log entry may further comprise obfuscating at least a portion of the log entry in accordance with a log obfuscation schema specifying at least a developer specific set of variables to be obfuscated and associated code line numbers and a developer independent for the purposes of illustration but not to be limiting provided by the stakeholder security policy set of variables to be obfuscated and associated code line numbers. The application log schema and log obfuscation schema may be stored as a single schema. The service may be a web application service. One of the developer specific set of variables to be logged and associated code line numbers and the developer independent set of variables to be logged and associated code line numbers may be a null set. One of the developer specific set of variables to be obfuscated and associated code line numbers and the developer independent set of variables to be obfuscated and associated code line numbers may be a null set. The log obfuscation schema may specify an obfuscation method associated with a variable to be obfuscated. The obfuscation method associated with the variable to be obfuscated may include one of replacing a variable name with a numeric code replacing personally identifiable information with a token or replacing a data attachment with metadata. The obfuscation method may include encryption using an application specific key. The method may further comprise generating at least one of a new API call name or a new API call address using the extracted at least one of the API call name or the one or more API call parameters generating a new API call for the service using the generated at least one of the new API call name or the new API call address and providing the generated new API call for the service. The new API call name may be generated by extracting a string subset of the API call name. An API call address for the generated new API call may be the same as an API call address for the received API call for the service. Alternatively the new API call address may be generated by providing the API call name as input to a lookup table. An API call name for the generated new API call may be the same as the API call name.

In some embodiments a non transitory computer readable medium storing computer executable application logging instructions may be disclosed the instructions comprising instructions for receiving an application programming interface API call for a service parsing the API call to extract at least one of an API call name or one or more API call parameters generating a log entry using the at least one of the API call name or the one or more API call parameters in accordance with an application logging schema specifying at least a developer specific set of variables to be logged and associated code line numbers and a developer independent for the purposes of illustration but not to be limiting provided by the stakeholder logging policy set of variables to be logged and associated code line numbers and storing the generated log entry. Generating the log entry may further comprise obfuscating at least a portion of the log entry in accordance with a log obfuscation schema specifying at least a developer specific set of variables to be obfuscated and associated code line numbers and a developer independent for the purposes of illustration but not to be limiting provided by the stakeholder security policy set of variables to be obfuscated and associated code line numbers. The application log schema and log obfuscation schema may be stored as a single schema. The service may be a web application service. One of the developer specific set of variables to be logged and associated code line numbers and the developer independent set of variables to be logged and associated code line numbers may be a null set. One of the developer specific set of variables to be obfuscated and associated code line numbers and the developer independent set of variables to be obfuscated and associated code line numbers may be a null set. The log obfuscation schema may specify an obfuscation method associated with a variable to be obfuscated. The obfuscation method associated with the variable to be obfuscated may include one of replacing a variable name with a numeric code replacing personally identifiable information with a token or replacing a data attachment with metadata. The obfuscation method may include encryption using an application specific key. The medium may further store instructions for generating at least one of a new API call name or a new API call address using the extracted at least one of the API call name or the one or more API call parameters generating a new API call for the service using the generated at least one of the new API call name or the new API call address and providing the generated new API call for the service. The new API call name may be generated by extracting a string subset of the API call name. An API call address for the generated new API call may be the same as an API call address for the received API call for the service. Alternatively the new API call address may be generated by providing the API call name as input to a lookup table. An API call name for the generated new API call may be the same as the API call name.

The proposed method and system for log generation and log obfuscation can be further extended as follows for the storage expiration module 

Processor may be disposed in communication with one or more input output I O devices via I O interface . The I O interface may employ communication protocols methods such as without limitation audio analog digital monoaural RCA stereo IEEE 1394 serial bus universal serial bus USB infrared PS 2 BNC coaxial component composite digital visual interface DVI high definition multimedia interface HDMI RF antennas S Video VGA IEEE 802.n b g n x Bluetooth cellular e.g. code division multiple access CDMA high speed packet access HSPA global system for mobile communications GSM long term evolution LTE WiMax or the like etc.

Using the I O interface the computer system may communicate with one or more I O devices. For example the input device may be an antenna keyboard mouse joystick infrared remote control camera card reader fax machine dongle biometric reader microphone touch screen touchpad trackball sensor e.g. accelerometer light sensor GPS gyroscope proximity sensor or the like stylus scanner storage device transceiver video device source visors etc. Output device may be a printer fax machine video display e.g. cathode ray tube CRT liquid crystal display LCD light emitting diode LED plasma or the like audio speaker etc. In some embodiments a transceiver may be disposed in connection with the processor . The transceiver may facilitate various types of wireless transmission or reception. For example the transceiver may include an antenna operatively connected to a transceiver chip e.g. Texas Instruments WiLink WL1283 Broadcom BCM4750IUB8 Infineon Technologies X Gold 618 PMB9800 or the like providing IEEE 802.11a b g n Bluetooth FM global positioning system GPS 2G 3G HSDPA HSUPA communications etc.

In some embodiments the processor may be disposed in communication with a communication network via a network interface . The network interface may communicate with the communication network . The network interface may employ connection protocols including without limitation direct connect Ethernet e.g. twisted pair 10 100 1000 Base T transmission control protocol internet protocol TCP IP token ring IEEE 802.11a b g n x etc. The communication network may include without limitation a direct interconnection local area network LAN wide area network WAN wireless network e.g. using Wireless Application Protocol the Internet etc. Using the network interface and the communication network the computer system may communicate with devices and . These devices may include without limitation personal computer s server s fax machines printers scanners various mobile devices such as cellular telephones smartphones e.g. Apple iPhone Blackberry Android based phones etc. tablet computers eBook readers Amazon Kindle Nook etc. laptop computers notebooks gaming consoles Microsoft Xbox Nintendo DS Sony PlayStation etc. or the like. In some embodiments the computer system may itself embody one or more of these devices.

In some embodiments the processor may be disposed in communication with one or more memory devices e.g. RAM ROM etc. via a storage interface . The storage interface may connect to memory devices including without limitation memory drives removable disc drives etc. employing connection protocols such as serial advanced technology attachment SATA integrated drive electronics IDE IEEE 1394 universal serial bus USB fiber channel small computer systems interface SCSI etc. The memory drives may further include a drum magnetic disc drive magneto optical drive optical drive redundant array of independent discs RAID solid state memory devices solid state drives etc.

The memory devices may store a collection of program or database components including without limitation an operating system user interface application web browser mail server mail client user application data e.g. any data variables or data records discussed in this disclosure etc. The operating system may facilitate resource management and operation of the computer system . Examples of operating systems include without limitation Apple Macintosh OS X Unix Unix like system distributions e.g. Berkeley Software Distribution BSD FreeBSD NetBSD OpenBSD etc. Linux distributions e.g. Red Hat Ubuntu Kubuntu etc. IBM OS 2 Microsoft Windows XP Vista 7 8 etc. Apple iOS Google Android Blackberry OS or the like. User interface may facilitate display execution interaction manipulation or operation of program components through textual or graphical facilities. For example user interfaces may provide computer interaction interface elements on a display system operatively connected to the computer system such as cursors icons check boxes menus scrollers windows widgets etc. Graphical user interfaces GUIs may be employed including without limitation Apple Macintosh operating systems Aqua IBM OS 2 Microsoft Windows e.g. Aero Metro etc. Unix X Windows web interface libraries e.g. ActiveX Java Javascript AJAX HTML Adobe Flash etc. or the like.

In some embodiments the computer system may implement a web browser stored program component. The web browser may be a hypertext viewing application such as Microsoft Internet Explorer Google Chrome Mozilla Firefox Apple Safari etc. Secure web browsing may be provided using HTTPS secure hypertext transport protocol secure sockets layer SSL Transport Layer Security TLS etc. Web browsers may utilize facilities such as AJAX DHTML Adobe Flash JavaScript Java application programming interfaces APIs etc. In some embodiments the computer system may implement a mail server stored program component. The mail server may be an Internet mail server such as Microsoft Exchange or the like. The mail server may utilize facilities such as ASP ActiveX ANSI C C Microsoft .NET CGI scripts Java JavaScript PERL PHP Python WebObjects etc. The mail server may utilize communication protocols such as internet message access protocol IMAP messaging application programming interface MAPI Microsoft Exchange post office protocol POP simple mail transfer protocol SMTP or the like. In some embodiments the computer system may implement a mail client stored program component. The mail client may be a mail viewing application such as Apple Mail Microsoft Entourage Microsoft Outlook Mozilla Thunderbird etc.

In some embodiments computer system may store user application data such as the data variables records etc. as described in this disclosure. Such databases may be implemented as fault tolerant relational scalable secure databases such as Oracle or Sybase. Alternatively such databases may be implemented using standardized data structures such as an array hash linked list struct structured text file e.g. XML table or as object oriented databases e.g. using ObjectStore Poet Zope etc. . Such databases may be consolidated or distributed sometimes among the various computer systems discussed above in this disclosure. It is to be understood that the structure and operation of the any computer or database component may be combined consolidated or distributed in any working combination.

The specification has described systems and methods for log generation and log obfuscation using software development kits SDKs . The illustrated steps are set out to explain the exemplary embodiments shown and it should be anticipated that ongoing technological development will change the manner in which particular functions are performed. These examples are presented herein for purposes of illustration and not limitation. Further the boundaries of the functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternative boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed. Alternatives including equivalents extensions variations deviations etc. of those described herein will be apparent to persons skilled in the relevant art s based on the teachings contained herein. Such alternatives fall within the scope and spirit of the disclosed embodiments.

Furthermore one or more computer readable storage media may be utilized in implementing embodiments consistent with the present disclosure. A computer readable storage medium refers to any type of physical memory on which information or data readable by a processor may be stored. Thus a computer readable storage medium may store instructions for execution by one or more processors including instructions for causing the processor s to perform steps or stages consistent with the embodiments described herein. The term computer readable medium should be understood to include tangible items and exclude carrier waves and transient signals i.e. be non transitory. Examples include random access memory RAM read only memory ROM volatile memory nonvolatile memory hard drives CD ROMs DVDs flash drives disks and any other known physical storage media.

It is intended that the disclosure and examples be considered as exemplary only with a true scope and spirit of disclosed embodiments being indicated by the following claims.

