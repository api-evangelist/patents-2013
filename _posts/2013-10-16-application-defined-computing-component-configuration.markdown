---

title: Application defined computing component configuration
abstract: One embodiment includes a configurable computing system. The configurable computing system includes a broker module that receives information for one or more applications, obtains one or more attributes for an electronic device, and determines runtime configurations for one or more components for the electronic device. A controller communicates with applications for configuring the one or more components based on the runtime configurations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09465622&OS=09465622&RS=09465622
owner: Samsung Electronics Co., Ltd.
number: 09465622
owner_city: Suwon-si
owner_country: KR
publication_date: 20131016
---
This application claims the priority benefit of U.S. Provisional Patent Application Ser. No. 61 715 037 filed Oct. 17 2012 incorporated herein by reference in its entirety.

One or more embodiments relate generally to optimizing computing components of electronic devices and in particular to optimizing computing components of electronic devices based on priorities for multiple criteria.

Computing systems ranging from smartphones to enterprise servers face a contradicting design requirement between quantity and application specific quality. In order to lower costs manufacturers are forced to artificially generalize users and their application requirements while designing or fabricating hardware components and devices.

In one embodiment a configurable computing system includes a broker module that receives information for one or more applications obtains one or more attributes for an electronic device and determines configurations for one or more components for the electronic device. A controller communicates with applications for configuring the one or more components based on the configurations.

Another embodiment provides a non transitory computer readable medium having instructions which when executed on a computer perform a method comprising receiving information for one or more applications obtaining one or more attributes for an electronic device determining configurations for one or more components for the electronic device and configuring the one or more components based on the determined configurations.

One embodiment provides an electronic device including a broker module that uses a processor for receiving information for one or more applications obtaining one or more desired attributes for the electronic device and determining one or more configurations for a set of computing components for the electronic device. A controller communicates with applications for configuring the set of computing components based on the one or more determined configurations.

These and other aspects and advantages of the embodiments will become apparent from the following detailed description which when taken in conjunction with the drawings illustrate by way of example the principles of the embodiments.

The following description is made for the purpose of illustrating the general principles of the embodiments and is not meant to limit the inventive concepts claimed herein. Further particular features described herein can be used in combination with other described features in each of the various possible combinations and permutations. Unless otherwise specifically defined herein all terms are to be given their broadest possible interpretation including meanings implied from the specification as well as meanings understood by those skilled in the art and or as defined in dictionaries treatises etc.

One or more embodiments relate generally to application defined computing ADC and application defined memory ADM . One embodiment provides a configurable computing system including a broker module that receives information for one or more applications obtains one or more attributes for an electronic device and either statically or dynamically determines configurations for one or more components for the electronic device. In one embodiment a controller communicates with applications for configuring the one or more components based on the configurations. In one embodiment the configurable computing system may be deployed in a datacenter for use for example with servers. In other embodiments the configurable computing system may be deployed for use in electronic devices such as televisions computers tablets cellular telephones cameras a personal digital assistant PDA wearable computing devices wearable communication devices etc. In one or more embodiments the electronic components such as processor s memory device s display etc. may be customized for a specific electronic device using an embodiment of the configurable computing system. In one or more embodiments the configurable computing system may be reprogrammed statically or dynamically based on application usage demands types etc.

In one embodiment the electronic devices comprise one or more mobile electronic devices capable of data communication over a communication link such as a wireless communication link. Examples of such mobile device include a mobile phone device a mobile tablet device wearable devices etc.

Any suitable circuitry device system or combination of these e.g. a wireless communications infrastructure including communications towers and telecommunications servers operative to create a communications network may be used to create communications network . Communications network may be capable of providing communications using any suitable communications protocol. In some embodiments communications network may support for example traditional telephone lines cable television Wi Fi e.g. a 802.11 protocol Bluetooth high frequency systems e.g. 900 MHz 2.4 GHz and 5.6 GHz communication systems infrared other relatively localized wireless communication protocol or any combination thereof. In some embodiments communications network may support protocols used by wireless and cellular phones and personal email devices e.g. a Blackberry . Such protocols can include for example GSM GSM plus EDGE CDMA quadband and other cellular protocols. In another example a long range communications protocol can include Wi Fi and protocols for placing or receiving calls using VOIP or LAN. Transmitting device and receiving device when located within communications network may communicate over a bidirectional communication path such as path . Both transmitting device and receiving device may be capable of initiating a communications operation and receiving an initiated communications operation.

Transmitting device and receiving device may include any suitable device for sending and receiving communications operations. For example transmitting device and receiving device may include a media player a cellular telephone or a landline telephone a personal e mail or messaging device with audio and or video capabilities pocket sized personal computers PDAs a desktop computer a laptop computer a datacenter computer a server a wearable electronic device and any other device capable of communicating wirelessly with or without the aid of a wireless enabling accessory system or via wired pathways e.g. using traditional telephone wires . The communications operations may include any suitable form of communications including for example voice communications e.g. telephone calls data communications e.g. e mails text messages media messages or combinations of these e.g. video conferences .

In one embodiment the system may be employed by an electronic device that may communicate with a cloud or server device . In one embodiment the electronic device comprises a display and one or more applications that may execute on the electronic device such as application N N being a positive integer.

In one embodiment display may be a separate device from the electronic device or integrated with the electronic device .

In one embodiment both transmitting device and receiving device may include some or all of the features of the electronic device . In one embodiment the electronic device may comprise a microphone audio output input mechanism communications circuitry control circuitry a camera a global positioning system GPS receiver module and any other suitable components.

In one embodiment all of the applications employed by display input mechanism the audio output and communications circuitry may be interconnected and managed by control circuitry .

In one embodiment the audio output may include any suitable audio component for providing audio to a user of the electronics device . For example the audio output may include one or more speakers e.g. mono or stereo speakers built into an electronics device . In some embodiments the audio output may include an audio component that is remotely coupled to an electronics device . For example the audio output may include a headset headphones or earbuds that may be coupled to communications device with a wire e.g. coupled to an electronics device N with a jack or wirelessly e.g. Bluetooth headphones or a Bluetooth headset .

In one embodiment display may include any suitable screen or projection system for providing a display visible to the user. For example display may include a screen e.g. an LCD screen that is incorporated in an electronics device . As another example display may include a movable display or a projecting system for providing a display of content on a surface remote from an electronics device e.g. a video projector . Display may be operative to display content e.g. information regarding communications operations or information regarding available media selections under the direction of control circuitry .

In one embodiment input mechanism may be any suitable mechanism or user interface for providing user inputs or instructions to an electronics device . Input mechanism may take a variety of forms such as a button keypad dial a click wheel or a touch screen. The input mechanism may include a multi touch screen. The input mechanism may include a user interface that may emulate a rotary phone or a multi button keypad which may be implemented on a touch screen or the combination of a click wheel or other user input device and a screen.

In one embodiment communications circuitry may be any suitable communications circuitry operative to connect to a communications network e.g. communications network and to transmit communications operations and media from an electronics device to other devices within the communications network. Communications circuitry may be operative to interface with the communications network using any suitable communications protocol such as for example Wi Fi e.g. a 802.11 protocol Bluetooth high frequency systems e.g. 900 MHz 2.4 GHz and 5.6 GHz communication systems infrared GSM GSM plus EDGE CDMA quadband and other cellular protocols VOIP or any other suitable protocol.

In some embodiments communications circuitry may be operative to create a communications network using any suitable communications protocol. For example communications circuitry may create a short range communications network using a short range communications protocol to connect to other communications devices. For example communications circuitry may be operative to create a local communications network using the Bluetooth protocol to couple an electronics device with a Bluetooth headset.

In one embodiment control circuitry may be operative to control the operations and performance of an electronics device . Control circuitry may include for example a processor a bus e.g. for sending instructions to the other components of an electronics device memory storage or any other suitable component for controlling the operations of an electronics device . In some embodiments the processor module may drive the display and process inputs received from the user interface. The memory and storage may include for example DRAM cache Flash memory ROM and or other RAM. In some embodiments the memory may be specifically dedicated to storing firmware e.g. for device applications such as an operating system user interface functions and processor functions . In some embodiments the memory may be operative to store information related to other devices with which an electronics device performs communications operations e.g. saving contact information related to communications operations or storing information related to different media types and media items selected by the user .

In one embodiment the control circuitry may be operative to perform the operations of one or more applications N implemented on an electronics device . Any suitable number or type of applications may be implemented. Although the following discussion will enumerate different applications it will be understood that some or all of the applications may be combined into one or more applications. For example an electronics device may include a voice recognition application a dialog application a map application a media application e.g. QuickTime MobileMusic.app or MobileVideo.app etc. In some embodiments an electronics device may include one or several applications operative to perform communications operations. For example an electronics device may include a messaging application a mail application a chat application a telephone application a voicemail application an instant messaging application e.g. for chatting a videoconferencing application a fax application or any other suitable application for performing any suitable communications operation.

In some embodiments an electronics device may include a microphone . For example an electronics device may include the microphone to allow the user to transmit audio e.g. voice audio during a communications operation or as a means of establishing a communications operation or as an alternate to using a physical user interface. The microphone may be incorporated in an electronics device or may be remotely coupled to an electronics device . For example a microphone may be incorporated in wired headphones or a microphone may be incorporated in a wireless headset.

In one embodiment an electronics device may include any other component suitable for performing a communications operation. For example an electronics device may include a power supply ports or interfaces for coupling to a host device a secondary input mechanism e.g. an ON OFF switch or any other suitable component.

In one embodiment a user may direct an electronics device to perform a communications operation using any suitable approach. As one example a user may receive a communications request from another device e.g. an incoming telephone call an email or text message an instant message and may initiate a communications operation by accepting the communications request. As another example the user may initiate a communications operation by identifying another communications device and transmitting a request to initiate a communications operation e.g. dialing a telephone number sending an email typing a text message or selecting a chat screen name and sending a chat request .

In one embodiment an electronic device may comprise a mobile device that may utilize mobile device hardware functionality including a GPS receiver module a camera module a compass module and an accelerometer and gyroscope module. The GPS receiver module may be used to identify a current location of the mobile device i.e. user . The compass module is used to identify direction of the mobile device. The accelerometer and gyroscope module is used to identify tilt of the mobile device.

In one embodiment the system provides the electronic devices the ability to provide application defined computing ADC and application defined memory ADM for optimizing performance energy saving quality of service etc. by customizing electronic component configurations. In one embodiment ADM may include a programmable memory controller that uses domain specific instruction set architectures ISAs and implementation of the programmable memory controller may meet the performance requirements of a high speed DDRx interface.

One or more embodiments provide for optimizing all the components based on user s priorities on performance energy endurance and fault tolerance. In one or more embodiment the broker module and the hardware controller gateway module allow self customizing components such as memory devices processor s display etc. that are optimized to their own users. By using electronic device components that are statically or dynamically configurable electronic devices may be manufactured at a reduced cost as compared to having to configure each electronic device based on user requirements preferences applications etc.

One or more embodiments optimize application specific quality of service by using information regarding software applications and for hardware components that may self configure for holistically configuring an electronic device based on several runtime factors including but not limited to application access patterns user preferences and hardware profiles. The one or more embodiments apply an application brokered computing framework and use application defined computing concepts to create an application defined memory.

Memory capacity is a metric that determines the number of ways memory address mapping. Memory capacity grows exponentially while the number of possible memory address mappings increases linearly. Memory address mapping affects both performance and energy consumption of an application. DRAM devices have a wider range of address mappings possible with larger capacity . As DRAM capacity grows chances of selecting a non optimal configuration and the accompanied penalty becomes problematic. Generic computing components do not provide application specific quality of service.

SLH represents characteristics and access patterns from applications that may be used by the broker module to optimize the application specific quality of service by determining selecting computing component configurations. In one example embodiment memory intensity of an application is an SLH that determines the memory bandwidth requirements. In one embodiment speculative hints received by the broker module from SLH are optional and need not be accurate. In this embodiment while SLH received using profiling helps in ADC it is not a pre requisite to have hints or profiling to take advantage of ADC. The broker module may override those hints that it learns that are not useful or ignore the hints that it determines could not be acted upon in a timely manner. In one embodiment by making SLH as an optional entry in ADC traditional applications may take advantage of ADC without any change in application code.

In one embodiment dynamic profiling of the runtime environment that may also predict the phase of the application is used. While computationally expensive dynamic profiling provides most up to date information about an application in run time. In one embodiment static profiling may be used. In this embodiment the broker module may also receive its SLH information by statically profiling an application. In one embodiment existing profilers may be leveraged to obtain this information. In one example embodiment the static profile for mobile applications in for example an android operating system may be present in along with the manifest file for each application. When developers upload new applications into a cloud computing environment e.g. cloud such as Samsung Apps the static SLH may be derived and stored along with the applications.

In one embodiment developers may use a standardized application programming interface API to communicate their SLH information directly to the broker module . In one embodiment even though additional efforts are required more aggressive application specific quality of service may be attained by using an API. In one example embodiment developers from large scale companies with data centers may leverage such a feature i.e. using an API in order to save energy and increase performance.

In one embodiment SLR describes the expectations of the user or administrator of a system along with additional facts about the system itself. In one embodiment the term system is defined as the environment where the application is executed. In one embodiment the system may be included in part of or a complete electronic device e.g. a smartphone a server in a datacenter a wearable device etc. . In one embodiment the user administrator as referred to herein may be the person that is the end user of an electronic device or an administrator for a server in a datacenter. In one embodiment SLR may be set by the manufacturer of a consumer electronics device that may then be altered manually by user or by software that learns about the user automatically.

In one embodiment the user administrator of the system may have requirements or quality expectations on several attributes of the system including energy performance endurance scale capacity and fault tolerance. In one example embodiment the user administrator of an electronic device may have priority for energy and performance compared to other attributes such as endurance scale capacity and fault tolerance. These expectations on the infrastructure are referred to as SLR . In addition to the user administrator s expectations on the system SLR may also include information about the system itself. In one embodiment SLR may have information if the execution environment is a mobile device or server the type of processor memory channel etc. which are essential for the broker module .

In one embodiment the second layer in the ADC architecture comprises the broker module layer including hardware and software components. In one embodiment the broker module uses SLH and SLR as inputs in choosing determining a run time configuration that optimizes application specific quality of service. In one embodiment the SLH and SLR play different roles in the broker module layer. In one embodiment the quality that is being achieved is determined by the SLR which has the user administrator s levels of priority for performance energy scalability endurance and fault tolerance. In one embodiment the SLH is system agnostic and contains information about the application characteristics. Software s runtime performance is dependent on its hardware or infrastructure . Therefore in one embodiment SLH is synthesized with SLR by the broker module into a system dependent SLH .

In one embodiment the broker module may work on the configuration of a system at system boot time or at the beginning of each application run based on user administrator s preference. In one embodiment the SLH is dynamically relied on by an application and the broker module also dynamically or statically changes its configurations. In one example embodiment while changing configurations the broker module takes into consideration both time to change and cost to change between configurations and decides if it s beneficial to select a change in configuration.

In one embodiment the broker module controls configurations for multiple system components such as memory devices of the memory module application processor s AP of the processor module the display and graphics processor unit GPU that are registered brokered for application specific quality interconnect etc. In one embodiment since each component may have multiple settings that are configured at runtime the broker module may use only a predetermined set of configurations to reduce the computational cost and time to change between system configurations.

In one embodiment the broker module determines and changes between configurations of the electronic components with minimal computational cost. Since each component such as processor memory and display is different in one embodiment the broker module may use different approaches for brokering between SLH SLR and other possible configurations for hardware components. In one example embodiment the broker module may be implemented in software such as MATLAB software based on a set of fuzzy logic rules and membership functions. In one embodiment fuzzy logic is used in choosing an optimal memory scheduler for each application. In one embodiment the broker module uses fuzzy membership functions for truth values as MOST LIKELY MORE LIKELY LESS LIKELY etc. for each possible scheduler. In one embodiment the optimal selected scheduler has the largest crisp value as the result. In some embodiments the broker module predicts 100 correct results for test set data with extreme scenarios . In one embodiment the broker module predicts the ratings for each memory scheduling algorithm with equal weighting for performance and power 50 50 . In some embodiment fuzzy logic is not used as the rules used are very crisp and binary.

In one embodiment the broker module communicates the new selected configuration to the respective components parts of the system. In one embodiment the third layer i.e. controller layer in the ADC architecture comprises the hardware controller gateway module that coordinates and communicates with each of the target devices such as memory of the memory module processors of the processor module display interconnect etc. . In some embodiments the hardware controller gateway module may also gather feedback that is useful for the broker module .

In some embodiment the hardware controller gateway module is either an interface to an existing device controller or a separate additional controller that allows the electronic device to be controlled by the broker module . In one embodiment the hardware controller gateway module allows the broker module to program the device controllers to a desired configuration.

As shown in the architecture is organized hierarchically. In one embodiment example the architecture comprises one to four memory channels e.g. Channel Channel etc. one to four ranks per channel e.g. rank with chips rank with chips etc. and up to 16 banks per rank. The highest parallelism in DRAM hierarchy is achieved at the channel level where the memory is divided into multiple parts each of which is controlled by a memory controller e.g. MC MC . In one example embodiment the architecture comprises an SDRAM chip including multiple independent memory banks such that memory requests to different banks may be serviced in parallel. In one embodiment example a DRAM bank is accessed using a global bank ID comprising channel rank and bank fields. In one embodiment example each DRAM bank is organized as a two dimensional array of DRAM cells including of multiple rows and columns with a row buffer and a column buffer . A memory location inside the DRAM bank is thus accessed using row and column IDs.

In one example embodiment because of physical limitations only one row in a bank may be accessed at any given time. The row is stored in sense amplifiers known as the row buffer prior to a column access. In one embodiment each row is dedicated to a single bank . In some embodiments tens of cache lines are stored in a row buffer an example row buffer size is 1 2 KB . In one embodiment to load a row from the memory array to the row buffer known as opening a row an activate command must first be issued. In one embodiment then read write commands may be issued to access data. Therefore in some embodiments DRAM access latency depends on whether the requested row is already in the row buffer or not. Based on contents of the row buffer and state of the target bank a DRAM request falls into one of the following categories Row buffer hit Row buffer closed or Row buffer conflict.

In one embodiment for a row buffer hit the requested data is currently in the row buffer . Therefore a single read write command is required to start DRAM data transfer. In one embodiment the lowest possible bank access latency called tCAS is enforced by the DRAM subsystem to apply a column access strobe to the DRAM device. In one embodiment for a row buffer closed category no row is loaded from the DRAM to the row buffer . In one embodiment in this case an activate command is required to open the row followed by a column access command. The access latency for both row and column access is tRCD tCAS.

In one embodiment for a row buffer conflict category the row buffer is loaded by a row different from the required row for accessing. In one embodiment in this case the row buffer first needs to be written back to the memory array by a pre charge command then the required row needs to be opened and accessed using an activate and a column access command. Therefore the highest bank access latency formed is tRP tRCD tCAS. In one embodiment for all three categories above transferring a burst of data from to the DRAM system over a data bus follows the column access strobe CAS . The data transfer latency depends on the burst length BL and the clock frequency of the data bus. DRAM cells may suffer from a short retention problem. In particular stored data charge in a DRAM cell decays over time even if it doesn t undergo a read operation. In order to preserve data charge in a DRAM cell it must be rewritten using refresh operations at a certain rate which is specified as refresh interval for DRAM devices. A refresh operation issued to a DRAM bank blocks all other DRAM commands while refresh is undergoing therefore it becomes expensive in terms of power consumption and system.

Different DRAM products targeting at different objectives have been introduced due to significant impact of DRAM timing constraints and organization on both power and performance of computer systems. These products are basically optimized in terms of power and performance for generic application domains. For example DDRx is used for desktop and server class machines GDDRx is specialized for graphic boards and embedded systems and LPDDRx is optimized for low power applications in mobile and embedded systems. Even though these DRAM devices use relatively optimized structures with different requirements they still enforce specific timing constrains that limit system efficiency. Existing domain specific DRAM products such as GDDRx LPDDRx and DDRx are equipped with fixed configurations. Due to the limited knowledge of each application at hardware level these products still suffer from artificial generalization within each domain. Therefore they are not able to efficiently provide application specific quality of service that follows different goals with different characteristics.

One or more embodiments using the ADM brokering model improve memory system power performance energy and inherently change the application specific quality by employing efficient address mapping and command scheduling processes. In one embodiment address mapping configuration transforms the linear physical address space to hierarchical DRAM coordinates. In one embodiment scheduling processes reorder memory requests presented to DRAM banks. In one embodiment address mapping and scheduling maximize the row buffer hit rate and leverage bank level parallelism for optimizing the performance and power efficiency of DRAM devices in the electronic device .

In one embodiment scheduling policies directly manage the DRAM device bandwidth. In one embodiment the management of the DRAM device s is critical to power and performance thereby profoundly affecting the quality of memory service from the user s point of view. In one embodiment the ADM brokering model considers two different aspects of memory bandwidth from the applications viewpoint namely bandwidth utilization and bandwidth allocation. As shown in the ADM brokering model is shown with an abstract classification model for user applications based on memory demands. Based on this model user defined quality of service for running applications falls into two categories single application priority SAP and multiple application priority MAP .

In one embodiment for the SAP category a user is more interested in either running a single application or prioritizing that application over other applications in a multi programmed environment. Hence efficiently utilizing the memory bandwidth becomes an important optimization metric. For example in a smartphone that runs a gaming application most of its time. In one embodiment example the SAP target may be the specific gaming application therefore system optimization may mainly focus on that gaming application to address power and performance problems. As shown bandwidth utilization is defined based on two different metrics Memory Demand Intensity MDI and Data Transfer Frequency DTF .

In one embodiment MDI is a characteristic of an application that is measured based on memory accesses per unit time generated by the application when running. In one embodiment MDI is measured and reported as the number of memory accesses per instruction MAPI . In one embodiment DTF determines the ability that a particular DRAM configuration is able to serve a particular application. In one embodiment DTF comprises a metric based on DRAM spatial locality and bank level parallelism . In one embodiment spatial locality defines the application s ability to visit similar DRAM locations consecutively with low overhead. In one embodiment bank level parallelism defines the application s ability to have an outstanding of concurrent memory accesses to different locations with DRAM.

In one embodiment DTF unlike MDI depends on both application behavior and hardware characteristics. In one example embodiment DTF is significantly influenced by internal DRAM resource management. In this example embodiment if a DRAM address mapping function assigns DRAM resources to memory requests such that it achieves relatively high bank level parallelism and spatial locality DRAM timing constraints that are enforced by the memory subsystem of memory module may be minimized. In one embodiment decreasing the timing constraints results in serving memory requests more frequently therefore DTF increases. Both locality and bank level parallelism low high depend on the number of DRAM global banks row buffer size and address mapping function. In one embodiment the bandwidth utilization is proportional to DTF locality and bank level parallelism as well as MDI . In one embodiment the ADM brokering model determines the required thresholds for MDI and DTF to classify different applications.

The bandwidth utilization not only depends on application behavior but is also limited by hardware constraints. Different hardware configurations have demand for different costs e.g. delay throughput energy power retention time and fault tolerance. This is represented as a two dimensional space based on bandwidth e.g. bandwidth allocation sensitivity bandwidth utilization and cost in . In one or more embodiments for each application different sets of the configurations are available that have different costs. In one embodiment the ADM brokering model may select the best set of configurations to optimize the memory system for a single application.

In one embodiment the ADM brokering model determines whether user priority is MAP or SAP . In one embodiment for the MAP category the ADM brokering model determines the MDI threshold as either low or high and may determine or select a configuration based on the MDI determination. In one embodiment for the SAP category the ADM brokering model determines the MDI threshold as either low or high . In one embodiment for the case where the determination is for the low MDI the ADM brokering model determines the DTF as either low or high and may determine or select a configuration based on the DTF determination. In one embodiment for the case where the MDI determination is for the high threshold the ADM brokering model determines the DTF as either low or high and may determine or select a configuration based on the DTF determination.

In one embodiment for the MAP category the user is interested in improving the quality of running multiple applications in terms of deferent metrics e.g. total execution time longest execution time energy power and fairness. Therefore in one embodiment managing the shared memory bandwidth among interesting applications becomes a key component in improving overall system performance from the applications point of view. In one example embodiment on a desktop computer a user may only be interested in running a specific word processing application and a music player. In this example embodiment the quality of serving the memory requests from these applications may be defined proportional to the intensity of their demands i.e. an optional definition of fairness in memory systems. In one embodiment other than bandwidth allocation policies system configuration also affects the quality of service that appears in terms of cost in the ADM brokering model implementation. In one embodiment memory intensity of the set of interesting applications determines the sensitivity of the bandwidth allocation policy. In this embodiment as the intensity increases the bandwidth allocation sensitivity increases.

In one embodiment the PMC is a fully programmable controller that receives read write requests from the last level cache of the processor module and manages DRAM data and command processing to optimize application defined objectives. In one embodiment the PMC internally comprises a request processor a transaction processor and command logic . In one or more embodiments the PMC delivers competitive performance with fixed function controllers by virtue of employing domain specific instruction set architecture ISA for memory request transaction processing. In one embodiment at 22 nm technology the PMC operates at 2 GHz dissipating only 152 mW peak power.

In one embodiment the request processor is primarily responsible for memory address mapping. In one embodiment upon arrival at the memory controller each request is enqueued at a FIFO request queue interfaced to the request processor . In one embodiment the request processor dequeues the next request at the head of the request queue generates a set of DRAM coordinates channel rank bank row and column IDs for the requested address and creates a new memory transaction with the generated coordinates to be enqueued in a transaction queue.

In one embodiment the transaction processor is primarily responsible for command scheduling. In one embodiment the transaction processor operates on the memory transactions in the transaction queue and emits a sequence of DRAM commands that achieves performance energy and quality of service goals. In one embodiment the transaction processor has an ISA that offers several important capabilities. In one embodiment a subset of the instructions called transaction management instructions allows the firmware to classify memory requests based on the state of the memory subsystem e.g. requests that need a pre charge the request type e.g. a write request and application specific criteria e.g. thread IDs to derive a high performance efficient command schedule. In one embodiment a second subset of the instructions called command management instructions allows the firmware to emit either the next required command for a given transaction e.g. an activate command to a particular row or a new command for various DRAM management purposes e.g. power management or refresh scheduling . In one embodiment commands that are emitted by the transaction processor are placed in a FIFO command queue which in turns are processed by the command logic .

In one embodiment the purpose of the command logic is to inspect the generated command stream checking and if necessary stalling the command at the head of the command queue to ensure all DRAM timing constraints are met. In one embodiment the command logic provides configurable tables specifying the DDRx timing constraints thereby making it possible to interface the PMC to different memory subsystems e.g. DDRx LPDDRx and GDDRx. Since the command logic enforces all timing constraints and guarantees the timing correctness of the scheduled command stream in one embodiment by using the command logic it becomes possible to separate timing correctness from performance optimization. This separation allows delivering comparable throughput to fixed function controllers.

In one example embodiment ADM is applied using the ADM brokering model implemented with the broker module and the PMC implemented with the hardware controller gateway module and system level simulations are analyzed. The simulations show server and mobile platforms across a variety of benchmarks from commercial multimedia server and biology fields. In the one or more example embodiments the optimization objectives are mainly defined as system performance energy efficiency and fairness. Table I shows server and power setup for the simulations used for one or more embodiments.

In one example embodiment a simulation model acts as the broker module SLH and SLR are manually fed into the simulation model and system performance and energy efficiency are modeled in detail using a cycle accurate trace based simulator based on Utah simulated memory module USIMM . In one example embodiment the simulator takes multiple workloads as input to simulate the processor functions using an out of order multi core processor model with a reorder buffer ROB per each core. In one example embodiment to model DRAM performance and power DRAM timing constraints of interest and current values from commercial products were obtained. In one example embodiment USIMM reports execution time and energy delay product for each simulation. In one example embodiment some of the publically available workloads are run on servers in a cloud based data center.

In one or more example embodiments different system configurations for server and mobile devices are analyzed and results are shown in . In one example embodiment the server setup is equipped with a quad core SPARC like processor operating at 3.2 GHz that is connected to a four channel of DDR3 1600 DRAM. In one example embodiment the mobile setup is equipped with a dual core Exynos5 like processor operating at 1.6 GHz that is connected to a two channel LP DDR2 1066 DRAM see Table I.1I for details .

In one or more example embodiments seventeen applications from four benchmark suites are evaluated using the ADM architecture for brokering configurations of components for optimization. The applications of the example embodiments represent a diversified selection of both cloud and mobile computing requirements in today and expected for the future. In one example embodiment seven applications face fluid ferret freq stream swapt and canneal are selected from Princeton Application Repository for Shared Memory Computers PARSEC focusing on emerging multi threaded workload. In one example embodiment two applications tigr and mummer are selected from BioBench that focus on data mining over gene based big data. In one example embodiment Two applications lesline and libq are used from the Standard Performance Evaluation Corporation SPEC namely from SPECCPU2006 that are used for representing CPU intensive server and desktop applications. In one example embodiment five commercial workloads comm1 to comm5 from a USIMM package are used for evaluation.

In one embodiment four state of the art memory schedulers are selected for evaluation and are compared to first come first served FCFS scheduling policy that is used as a baseline scheduler. In one or more example embodiments the four schedulers are Fine Grain Compute Phase Prediction CPP Write Drain Optimized first ready FR FCFS FR FCFS Gain Estimation Optimized Thread Clustering TCS and Thread Fair FR FCFS TF FCFS .

In one example embodiment Fine Grain CPP assumes that applications run in different phases i.e. computation intensive and memory intensive and dynamically detects the application phases at runtime. In one or more embodiments among different applications or threads the Fine Grain CPP scheduler prioritizes memory requests from a computation intensive thread over others. The Fine Grain CPP scheduler requires high computation power at the memory controller for making decisions.

In one example embodiment the FR FCFS scheduler relies on optimizing row buffer hit rate based on conventional FR FCFS. In one example embodiment instead of strictly prioritizing read requests over write requests the FR FCFS scheduler switches between read and write requests to reach higher row buffer hit rate.

In one example embodiment the Gain Estimation Optimized TCS scheduler is designed based on a Thread Clustering Memory TCM scheduler which prioritizes computation intensive threads over other threads at coarse grain. In one example embodiment a program counter gain history table is employed to estimate the program due to satisfying memory requests. In one example embodiment the Gain Estimation Optimized TCS scheduler prioritizes threads with higher program counter gain. In one example embodiment the Gain Estimation Optimized TCS scheduler requires relatively large local storage for thread booking.

In one example embodiment the TF FCFS scheduler based on FR FCFS uses a round robin policy in case there is no row buffer hit and thus a new row that needs to be activated. In one or more embodiments the full address mapping design space is evaluated. Different global bank IDs from the memory physical addresses are considered to maximize row buffer locality as well as bank level parallelism.

In one or more embodiments Applications are profiled based on mobile and server setups e.g. electronic devices and then the ADM brokering module selects an appropriate memory scheduler and address mapping scheme according to the user defined service quality. In one example embodiment to create SLH all benchmarks are executed with Windriver Simics and its g cache module to produce the traces. In one example embodiment the memory traces are analyzed based on the ADM brokering model to extract four metrics. Three metrics are used to determine the scheduling policy given an address mapping MAPI row buffer hit rate and global bank imbalance factor. One metric is used to determine the address mapping best global bank ID. In one example embodiment all of the applications are classified based on their relative numbers on each metric. The classification correlates to the configuration of the system and the server configuration classification is summarized in Table II.

In one example embodiment based on the server setup the classification threshold is selected based on application behaviors. In one example embodiment MAPI is classified into two segments and the threshold for MAPI number of memory access per hundred instructions is 1. In one example embodiment the threshold for row buffer hit rate is 20 which is profiled as the average number of row buffer hits given an instruction window equal to the size of the ROB of the whole processor. In one example embodiment the threshold for the global bank imbalance is set at 12 which is profiled as the maximum difference between the numbers of accesses to different banks given an instruction window of ROB. The above profiling also provides the base for creating multi programmed application executions.

In one or more embodiments the ADM brokering model is able to consider SLH from application profiling and choose the best memory scheduling algorithm and address mapping policy. In one example server embodiment the address mapping is fixed and the embodiment demonstrates that the broker module selects the best memory scheduling algorithm out of the four candidates. Performance improvement and energy saving are achieved based on the broker module . In one or more example embodiments results indicate that TF FCFS scheduling performs better than the other schedulers for those applications with high memory intensity and relatively low data transfer frequency. TCS however shows better performance for the applications with low memory intensity and low data transfer frequency. For the applications with low memory intensity and relatively high data transfer frequency FR FCFS is the best option. CPP instead performs very well in terms of performance and energy for the rest of applications.

In one or more example embodiments it is demonstrated that different address mapping schemes significantly affect system performance and energy efficiency of memory systems. Different applications have their respective favorite address mapping configurations. In one example embodiment the ADM brokering model brokers with the system and selects the best address mapping scheme. In this example embodiment the scheduler is fixed for the applications and all possible address mapping schemes are exhaustively tried i.e. a sweep of the absolute position of the global bank ID from left to right on address bits . Execution time and energy delay product of all the applications are collected.

In one or more embodiments it is noted that the best address mapping also changes with different systems. When a system configuration changes the number of global bank ID bits the number of row and column bits varies. Even with the same application the original address mapping might not take advantage of bank level parallelism and spatial locality as shown in graph . For instance in application stream the best address mapping position is 13 in the server setup and changes to 19 in the mobile setup.

In one or more example embodiments because the ADM brokering model employed in a system may take advantage of system configuration information in SLR the memory system performance and EDP may also be optimized in the mobile setup. In one embodiment by combining the effect of scheduling algorithm and address mapping the execution time is reduced 33.1 on average while the EDP is reduced 53.6 on average compared to the average point in the respective design space of each application.

In one or more example embodiments the ADM brokering model may optimize performance and energy delay product simultaneously for various applications on both server and mobile setups. In one embodiment ADM brokering model may adapt to optimization goals as well.

In one example embodiment the broker module selects the best scheduling algorithm for fairness based on the average MAPI. In one embodiment the simulation results are shown in graph with MAPI labeled on the bottom of the graph. As can be seen from graph for application mixes with large MAPI more than 1.5 in this case scheduler FR FCFS performs best for fairness though CPP works best for performance and EDP. In one example embodiment for application mixes with small MAPI less than 1 in this case there are plenty of memory resources which means the scheduler choice does not affect the fairness result. In one example embodiment for the mixes with medium MAPI TCS is the fairest scheduler. In one or more embodiments the ADM brokering model improves the fairness by 25.4 on average of sixteen application mixes that were created.

In one or more embodiments based on the application characteristics the implementation of the ADM brokering model with electronic devices significantly improves the system performance energy efficiency and fairness by selecting the most suitable scheduling policy and address mapping configuration. In one or more embodiments ADC implemented in the electronic device configures generic hardware sub components based on application specific quality. The devices and components used in consumer electronics will continue to be made in large quantity as generic components making one or more embodiments implementing ADC and ADM for future platforms mobile and wearable systems affordable. Using the one or more embodiments however instead of investing on more powerful components that have more energy budget manufacturers may use the one or more embodiments to make these generic components smarter and more responsive to application requirements.

In one or more embodiments ADC may make software interaction with hardware drive the next evolution commodity devices that may become smarter and add value to the products and applications that use them. One or more embodiments using ADM show significant improvements in application runtime and DRAM energy consumption. One or more embodiments using the PMC may be used in SoC. In one or more embodiments apart from mobile and device solutions ADC implementations may significantly impact enterprise solutions or future businesses. Some examples are areas that may use power saving enterprise server modules and memory based storage architectures.

The information transferred via communications interface may be in the form of signals such as electronic electromagnetic optical or other signals capable of being received by communications interface via a communication link that carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link an radio frequency RF link and or other communication channels.

In one implementation of an embodiment in a mobile wireless device such as a mobile phone the system further includes an image capture device such as one or more cameras a GPS module a compass module and an acceleration and gyroscope module . The system may further include application modules as MMS module SMS module email module social network interface SNI module audio video AV player web browser image capture module etc.

The system further includes a broker module and hardware controller gateway module as described herein according to an embodiment. In one implementation of said image processing modules and along an operating system may be implemented as executable code residing in a memory of the system . In another embodiment such modules are in firmware etc.

As is known to those skilled in the art the aforementioned example architectures described above according to said architectures can be implemented in many ways such as program instructions for execution by a processor as software modules microcode as computer program product on computer readable media as analog logic circuits as application specific integrated circuits as firmware as consumer electronic devices AV devices wireless wired transmitters wireless wired receivers networks multi media devices etc. Further embodiments of said Architecture can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements.

Embodiments have been described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to one or more embodiments. Each block of such illustrations diagrams or combinations thereof can be implemented by computer program instructions. The computer program instructions when provided to a processor produce a machine such that the instructions which execute via the processor create means for implementing the functions operations specified in the flowchart and or block diagram. Each block in the flowchart block diagrams may represent a hardware and or software module or logic implementing one or more embodiments. In alternative implementations the functions noted in the blocks may occur out of the order noted in the figures concurrently etc.

The terms computer program medium computer usable medium computer readable medium and computer program product are used to generally refer to media such as main memory secondary memory removable storage drive a hard disk installed in hard disk drive. These computer program products are means for providing software to the computer system. The computer readable medium allows the computer system to read data instructions messages or message packets and other computer readable information from the computer readable medium. The computer readable medium for example may include non volatile memory such as a floppy disk ROM flash memory disk drive memory a CD ROM and other permanent storage. It is useful for example for transporting information such as data and computer instructions between computer systems. Computer program instructions may be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

Computer program instructions representing the block diagram and or flowcharts herein may be loaded onto a computer programmable data processing apparatus or processing devices to cause a series of operations performed thereon to produce a computer implemented process. Computer programs i.e. computer control logic are stored in main memory and or secondary memory. Computer programs may also be received via a communications interface. Such computer programs when executed enable the computer system to perform the features of one or more embodiments as discussed herein. In particular the computer programs when executed enable the processor and or multi core processor to perform the features of the computer system. Such computer programs represent controllers of the computer system. A computer program product comprises a tangible storage medium readable by a computer system and storing instructions for execution by the computer system for performing a method of one or more embodiments.

Though the embodiments have been described with reference to certain versions thereof however other versions are possible. Therefore the spirit and scope of the appended claims should not be limited to the description of the preferred versions contained herein.

