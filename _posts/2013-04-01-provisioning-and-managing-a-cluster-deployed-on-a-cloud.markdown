---

title: Provisioning and managing a cluster deployed on a cloud
abstract: A system is provided to provision and manage cloud-based clustered application deployment. In one example embodiment, a clustered computing application is detected as being launched on a cluster of nodes. Each node in the cluster is a virtual instance of a machine within a virtualization service. Status of the nodes in the cluster are monitored to detect availability of a server within the virtualization service A notification message addressed to the server is issued in response to detecting the availability of the server. The notification message includes information for connecting to the cluster.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09270521&OS=09270521&RS=09270521
owner: ADOBE SYSTEMS INCORPORATED
number: 09270521
owner_city: San Jose
owner_country: US
publication_date: 20130401
---
This application is a continuation of and claims the benefit of priority under 35 U.S.C. 120 to U.S. application Ser. No. 12 830 080 filed Jul. 2 2010 now U.S. Pat. No. 8 412 810 issued Apr. 2 2013 the entire contents of which are incorporated herein by reference.

This disclosure relates generally to the technical fields of software and or hardware technology and in one example embodiment to system and method to provision and manage a clustered computing application deployed on a cloud.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

The phrase cloud computing refers to an architectural paradigm in which computation is moved from local servers to a remote service that provides computation as a commodity or utility. A cloud is typically a large collection of shared commodity computation resources that can be interchangeably provisioned in response to clients computation requests. Cloud computing is frequently used in software as a service SaaS application architectures and may be viewed as an implementation choice for application deployment that leverages shared resources and improved cost structure of the cloud. A cloud computing approach may be used to implement a variety of computational paradigms such as virtual machines jobs remote procedure calls traditional servers etc.

A computing application that is deployed on more than one machine node is termed a clustered computing application or merely a clustered application or a cluster . For example a clustered application may comprise a load balancer a database and an application server where the load balancer is deployed on one node the database server is deployed on another node while the application server is deployed on a further node. Historically clustered applications have been deployed using hardware that is statically allocated to a cluster thereby defining both the cost of running a cluster and the peak load that it could support. In the event of increased load new hardware would be purchased and brought online and the cost of running the cluster would increase. In the event of decreased load there is no corresponding way to decommission hardware and realize cost savings. Furthermore the period of time that would elapse between the urgent need for more capacity and its availability would typically be measured in days or weeks.

In the following detailed description numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally considered to be a self consistent sequence of operations or similar signal processing leading to a desired result in this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

Method and system are described to provision and manage cloud based clustered application deployment. In one example embodiment a cloud based clustered application deployment uses a three tier topology that includes a load balancing tier an application tier and a database tier. Each tier comprises a set of nodes where each node is implemented using a virtual instance of a machine running within a public virtualization space such as e.g. the virtualization space provided by Amazon Elastic Compute Cloud EC2 service.

The nodes in one tier of a clustered application are homogenous in that they each use the same machine image stored in the public storage space. Thus the same machine image is used for launching each of the nodes in the application tier while a different machine image is used to launch a node in the toad balancing tier and still another machine image is used to launch one or more nodes in the database tier. The machine images which are read only boot images that are used for launching cluster nodes are provided by a control server also referred to as a controller . The controller is configured to enforce sequential start sequence of a cluster using an asynchronous messaging system that provides notifications to cluster nodes as the individual nodes of the cluster become available. This messaging system is also used when the size of the cluster is increased or decreased providing change notifications to nodes that subscribe to these notifications.

A clustered application that comprises a set of nodes grouped into several logical tiers may distribute the load of the application across the nodes in order to support loads that are higher than single standalone instances can handle. A set of techniques for optimizing a clustered computing application in response to varying load may be referred to as elastic scalability. Elastic scalability may be supported in two modes manual and rule based in the manual mode the size of a cluster can be increased or decreased in response to commands from an administrator initiated e.g. through the cluster dashboard user interface shown in . In the rule based mode the size of a cluster can be increased or decreased automatically in response to a set of logical rules that are evaluated periodically by the controller. These rules may be based on load measurements application performance metrics usage patterns and user specified data and business logic. In general the manual mode may be provided to allow an administrator to override rule based cluster sizing functions when needed however the rule based mode allows the cluster to operate more efficiently and autonomously in response to load conditions which may result in a lower operational cost for the cluster and a quicker response to changes in load.

A system that provisions and manages a computing application hosted on one or more virtual nodes may be referred to as a hosted service system. A hosted service system may be configured to provide automated administration of a computing application replacing the administration tasks that would otherwise be performed by the customer when running in an on premise production deployment. The technology within an example hosted service system may hide the behavior of the underlying virtualization service and provide instances of a computing application that are substantially indistinguishable e.g. in terms of reliability security and performance from local on premise deployments of the computing application. An example computing applications that a hosted service system may provision and manage are Adobe LiveCycle Enterprise Suite ES and Adobe ConnectPro offered by Adobe Systems Incorporated. While embodiments of the hosted service system are described with reference to Amazon EC2 service other virtualization services may be utilized.

In operation a user can access a provider s web site and request to launch a computing application that can be deployed remotely on a plurality of virtual nodes on a cloud such that the user no longer is required to deploy the computing application locally within their own data center on their own hardware. A request may be triggered by a user e.g. by activating a visual control such as a Start button presented on a web page. When a hosted service system receives a request to launch a computing application a call is made to the application programming interface API associated with the virtualization service to trigger the loading of machine images associated with respective tiers of the requested computing application. In one embodiment where a clustered application comprises a load balancing tier an application tier and a database tier the load balancing tier and the database tier initially may each comprise one virtual node while the application tier may initially comprise a plurality of virtual nodes. A request to launch a clustered computing application may be triggered explicitly by a user or automatically. The associated node is loaded with the contents of the machine image. In one embodiment nodes of a load balancing tier are launched using a load balancer machine image nodes of an application tier are launched using an application server machine image and nodes of a database tier are launched using a database server machine image.

An example architecture within which method and system to provision and manage a clustered computing application hosted by a plurality of virtual nodes may be implemented is described with reference to an architecture diagram illustrated in . The architecture may include a client computer system and a hosted service system . In one example embodiment the hosted service system is to provision and manage an enterprise SaaS product utilizing a cloud based computing service as a virtualization infrastructure. Cloud based computing services are shown in as a virtualization service and a network storage service . In one embodiment a hosted service system utilizes Amazon EC2 as a virtualization service and Amazon Simple Storage Service Amazon S3 as a network storage service. The client computer system and the hosted service system may be in communication with each other via a communications network that may be a public network e.g. the Internet .

The virtualization service may load a clustered application onto a cloud. The clustered application may be accessed by the client via a browser application . As mentioned above a user in control of the client computer system may send a request to the hosted service system to load the computing application. The request may be initiated via a user interface provided by the hosted service system to the client computer system via the browser application .

The user interface in one embodiment provides both an end user s and a system administrator s view of the clustered application and also permits issuing control operations to the clustered application and permits viewing the resulting changes in the state of the clustered application . For example where the clustered application is LiveCycle an end user may manipulate various electronic forms. The user interface may also serve as a source of information for the hosted service system including documentation downloads and support. The user interface in one embodiment uses Adobe Flex software offered by Adobe Systems incorporated as the user interface technology for the implementation of the user interface. The user interface in one embodiment uses an XML Extensible Markup Language based representational state transfer REST style secure communications protocol to synchronize its operations with a control server . A request to access the user interface may be authenticated using one of a variety of authentication techniques.

The request from the client computer system to load the clustered application is received at the control server which responds to the request by activating an access interface provided by the virtualization service . The control server in one example embodiment provides coordination between the components of the architecture provides administration and monitoring of the virtualization service and also may be configured to audit system usage and resource allocation with respect to the clustered application . The control server includes a database to store information pertaining to various aspects of system usage. The control server in one embodiment runs within a standard Hypertext Transfer Protocol Secure HTTPS compliant web server and may be deployed as a publically accessible web application that is available outside a firewall. The control server in one embodiment is implemented using Ruby on Rails technology 

The virtualization service accesses the storage of the network storage system to obtain machine images in order to load the associated clustered application . The machine images can be uploaded to the network storage system by the control server utilizing an access interface provided with the network storage system . As mentioned above the machine images obtained b the virtualization service include a machine image for one or more virtual nodes running one or more load balancers a machine image for one or more virtual nodes running one or more application nodes and a machine image for one or more virtual nodes running one or more database nodes. The communications from the clustered application to the control server may include enforcing sequential start sequence of the clustered application and providing notifications to cluster nodes of the clustered application as the individual nodes of clustered application become available as well as providing notifications to cluster nodes of the clustered application when the size of the cluster is increased or decreased.

The hosted service system further includes a secure networking client to provide a bidirectional encrypted compressed connection between a machine in the end user s secure network environment e.g. the client computer system and a virtual node running within the virtualization infrastructure t e clustered application . The networking client manages various aspects of transmission control protocol TCP traffic forwarding encryption and network discovery such that the user can access the clustered application as if it was running locally on the user s machine. In this mode the user s network security envelope is extended to surround the clustered application using comparable levels of encryption and protection against network security threats.

A diagrammatic representation of a tree tiered clustered computing application is shown in . As shown in a cluster comprises a load balancing tier comprising a toad balancer node t application tier comprising two application server nodes and and a database tier comprising a primary database node and a database failover replica node .

The agent is provided to permit communications between the virtual instance and the network storage system the client computer system and the control server . The agent includes an operating system OS adapter to facilitate communication between the agent and the operating system and an application interface to facilitate communications between the computing application and the agent . A network storage interface is configured to facilitate communications between the network storage system and the agent . A network component is configured to facilitate communications between the client computer system and the agent . A web server is configured to facilitate communications between the control server and the agent . Another component of the agent is a cluster listener . The cluster listener that subscribes to cluster change messages the cluster listener upon receiving of a cluster change message makes changes to the state of the computing application based on the change to the cluster.

The control server in one example embodiment is a web server that provides a web application architecture in which objects are modeled within a relational database and actions performed on those objects are methods within a set of controllers. As mentioned above the control server is configured to enforce the start sequence of the cluster and to provide change notifications to the nodes in the cluster using asynchronous messaging system. The control server keeps track of the state of the nodes in the cluster and the links between the nodes and also supports elastic scalability of the cluster by managing automatic changes in the size of the cluster. Some components of the control server are described with reference to .

The cluster status monitor may be configured to monitor status of the nodes in the cluster to detect availability various nodes e.g. the database server within the virtualization service. The configuration module may be configured to configure a node e.g. to configure a load balancer that delivers messages to one or more nodes executing instances of the application server. The publishing module may be configured to issue notification messages addressed to nodes in the cluster. The notification messages may include information that may be used by a node for connecting to the database server provided in the cluster and information for discovering other nodes in the cluster.

The cluster manager may be configured to detect a request to change the size of the cluster and to perform the change in response to the request. The cluster manager cooperates with the rules engine . The rules engine may be configured to periodically access various measurements associated with the cluster evaluate one or more rules based on the measurements and produce a cluster size change recommendation or request. The cluster manager may be configured to process the cluster size change request. The modules illustrated in may be implemented as software hardware or a combination of both. Various operations performed by the system according to an example embodiment are discussed with reference to .

As shown in the method commences with operation where the cluster launch detector of detects a request to launch a clustered computing application. As a clustered computing application executes on a cluster of nodes a clustered computing application may be referred to as merely a cluster. In order to launch a clustered computing application that utilizes as three tier topology as shown in all nodes of each tier need to be started within the virtualization service in a manner that permits the nodes of the cluster to cooperate with each other. An example start sequence for a cluster may be described with reference to operations .

In one example embodiment in response to a request to launch a clustered computing application all cluster nodes in the application tier and the database tier are provisioned and started within a virtualization service. A load balancer is provisioned but not configured until all nodes of the application tier and the database have been started. The control server of monitors the status of the cluster nodes awaiting the availability of the primary database node. Prior to the availability of the primary database node any application node reaching the running state will pause during its start sequence to await notification that the primary database node is available. At operation the cluster status monitor of commences monitoring the status of the nodes in the cluster to detect availability of the database server e.g. primary database within the virtualization service.

After the primary database becomes available the publishing module of generates asynchronous notification messages addressed to application nodes and to the database failover replica. These messages are stored within a public storage service such as e.g. Amazon S3 service . These messages persist within the public storage service until they are retrieved by each addressee node in the cluster. Any node within the cluster that is already running detects and retrieves its notification message. Nodes that have not yet reached the running state retrieve their notification message during their boot sequence. A notification message generated by the publishing module includes connection information for the primary database and discovery information for the other nodes if necessary. Thus at operation in response to detecting availability of the database server a notification message addressed to the application server is issued.

Each application node will then configure itself to join the cluster and connect to the primary database using the contents of the notification message. The database failover replica will also configure itself for replication of the primary database instance. As is shown in in response to detecting that all nodes in the application tier and the database tier have started the configuration module of configures the load balancer that then becomes available for delivering messages to the application server. While the operations listed in refer to one application server the application tier of the cluster may include two or more application servers each application server running on a separate instance of a virtual machine.

After the load balancer has been configured such that it can deliver massages to the application server node the cluster launch detector detects at operation that the clustered computing application has been launched on a cluster of nodes wherein each node in the cluster is a virtual instance of a machine within a virtualization service. Upon completion of this sequence the cluster is available and ready for use in all respects. The load balancer is assigned a dynamically generated Internet protocol IP address and hostname when it is provisioned which is used to access the cluster. The generated hostname may be replaced with a vanity hostname and a corresponding domain name system DNS entry for each customer in a commercial offering.

At operation the cluster manager of detects a request to change a size of the cluster e.g. a request to stop anode in the cluster or start another application server node to start another database server node or to start another load balancer. The request to stop a node or to start a new node may be issued in response to an operation of a user or as a result of execution of one or more rules by the rules engine of . At operation the cluster manager performs the change in response to the request.

For example when the request to change a size of the cluster is a request to change the size of the application tier either adding or removing application nodes the control server may operate as described below. Additional cluster nodes in the application tier are started or stopped as requested. Asynchronous notification messages addressed to all application nodes and database nodes are issued. In one embodiment when adding nodes to the cluster notification messages contain the same information that a cluster node would receive during the cluster start sequence. When removing nodes from the cluster notification messages contain information about the removed nodes. Once the cluster size change has completed and all affected nodes have started or stopped respectively then the load balancer is reconfigured with the changes. Upon completion of this sequence the cluster size has been changed and the newly configured cluster is ready for use in respects.

In one example embodiment cluster type specifications that describe the contents and sizing of the cluster tiers may be created using XML. This approach provides an extensible mechanism to define new cluster topologies for using clustered applications. An example of a cluster definition for the default three tier web conferencing application is shown below in Table 1.

The cluster definition such as the definition shown in Table 1 above is used by the control server of and also by the user interface of to specify and coordinate cluster functions. In the control server the cluster definition is used when starting a cluster and also during elastic scaling functions. In the user interface the cluster definition is used to describe cluster options and selectable or optional cluster behavior.

As mentioned above a cloud based deployment of a clustered application may be configured to permit elastic scalability where a node from any of the tiers may be added to or removed from the cluster. Rule based elastic scalability may be implemented using the rules engine of that is configured to evaluate a set of logical rules that have been specified for a given cluster. Rule expressions can be composed of any combination of arithmetic operators and data available within the controller. Some examples of available data include 

Rules may be specified individually for any cluster within the system e.g. using a language grammar derived from Ruby on Rails using XML rule specification format or any other rule format. Rules may also be specified collectively for any set of clusters belonging to a single user. The set of rules for a given cluster may be evaluated in priority order where priority is defined as a value e.g. in 1 100 with 1 as the highest priority and 100 as the lowest and each rule is assigned a priority value. Each rule may also specify that further rule evaluation for the duster is to continue or halt depending on the evaluation output of the rule.

In one example embodiment a background thread within the controller is responsible for periodically evaluating the set of rules and autonomously modifying the state of each cluster accordingly. The background thread may execute with a configurable frequency e.g. the rules may be evaluated every 30 seconds and the results of the evaluation of each rule and any cluster commands that were performed are stored in an event log in the system database. A set of default rules for basic cluster management may be provided by default for any cluster. An editor to compose and register custom rules for a cluster may be made available via the cluster dashboard view.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UT cursor control device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a computer readable or machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device utilizing any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing or encoding data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media. Such medium may also include without limitation hard disks floppy disks flash memory cards digital video disks random access memory RAMO read only memory ROMs and the like.

Thus method and system to provision and manage a clustered computing application deployed on a cloud have been described. While some example approaches described herein may be used with ADOBE products the techniques described herein may be utilized beneficially with various other products.

The embodiments described herein may be implemented in an operating environment comprising software installed on a computer in hardware or in a combination of software and hardware. Although embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

