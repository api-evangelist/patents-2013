---

title: Adopting an existing automation script to a new framework
abstract: Arrangements described herein relate to adopting an existing automation script to a new framework. A first version of an automation script configured to execute in a first framework, and expected unit test results for the automation script, are received. A second version of the automation script is created from the first version of the automation script. The second version of the automation script is configured to execute in at least a second framework. The first version of the automation script is executed in the first framework to run a first version of a unit test and the second version of the automation script is executed in the second framework to run a second version of the unit test. Results generated by execution of the first and second versions of the automation script are analyzed to validate the second version of the automation script.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378122&OS=09378122&RS=09378122
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09378122
owner_city: Armonk
owner_country: US
publication_date: 20130910
---
Arrangements disclosed herein relate to frameworks and more particularly to the use of automation scripts.

Software Engineers currently depend upon a large amount of automation scripts written in a particular framework. Examples of such frameworks include the IBM Workload Deployer cloud framework Rational Build Forge and Tivoli Service Automation Manager. Still numerous other frameworks commonly are used. Software Engineers constantly develop automation in these frameworks to support old and new systems while attempting to transition to new virtualized delivery and deployment models such as the IBM SmartCloud Continuous Delivery. The IBM SmartCloud Continuous Delivery model uses and promotes an execution environment that is based not only on proprietary technology but also open source toolkits and frameworks that are used to drive automation in a cloud network.

A method of includes receiving a first version of an automation script configured to execute in a first framework and expected unit test results for the automation script and automatically creating using a processor a second version of the automation script from the first version of the automation script. The second version of the automation script is configured to execute in at least a second framework. The method also includes executing the first version of the automation script in the first framework to run a first version of a unit test and executing the second version of the automation script in the second framework to run a second version of the unit test. The method further includes comparing at least a first output generated by the first version of the automation script running the first version of the unit test and at least a second output generated by the second version of the automation script running the second version of the unit test to at least one expected unit test result to determine whether the first output and the second output correlate with the expected unit test result. Responsive at least to the first output and the second output correlating with the expected unit test result a determination can be made that the second version of the automation script is valid.

A system includes a processor programmed to initiate executable operations. The executable operations include receiving a first version of an automation script configured to execute in a first framework and expected unit test results for the automation script and automatically creating a second version of the automation script from the first version of the automation script. The second version of the automation script is configured to execute in at least a second framework. The executable operations also include executing the first version of the automation script in the first framework to run a first version of a unit test and executing the second version of the automation script in the second framework to run a second version of the unit test. The executable operations further include comparing at least a first output generated by the first version of the automation script running the first version of the unit test and at least a second output generated by the second version of the automation script running the second version of the unit test to at least one expected unit test result to determine whether the first output and the second output correlate with the expected unit test result. Responsive at least to the first output and the second output correlating with the expected unit test result a determination can be made that the second version of the automation script is valid.

A computer program product includes a computer readable storage medium having program code stored thereon. The program code is executable by a processor to perform a method. The method includes receiving by the processor a first version of an automation script configured to execute in a first framework and expected unit test results for the automation script and automatically creating by the processor a second version of the automation script from the first version of the automation script. The second version of the automation script is configured to execute in at least a second framework. The method also includes executing by the processor the first version of the automation script in the first framework to run a first version of a unit test and executing the second version of the automation script in the second framework to run a second version of the unit test. The method further includes comparing by the processor at least a first output generated by the first version of the automation script running the first version of the unit test and at least a second output generated by the second version of the automation script running the second version of the unit test to at least one expected unit test result to determine whether the first output and the second output correlate with the expected unit test result. Responsive at least to the first output and the second output correlating with the expected unit test result a determination can be made by the processor that the second version of the automation script is valid.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied e.g. stored thereon. Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium a computer readable storage medium or a combination thereof

As defined herein the term computer readable storage medium means a storage medium that contains or stores program code for use by or in connection with an instruction execution system apparatus or device. As defined herein a computer readable storage medium is not a transitory propagating signal per se. A computer readable storage medium may be for example but is not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk drive HDD a solid state drive SSD a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM a digital versatile disc DVD an optical storage device a magnetic storage device or any suitable combination of the foregoing.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer other programmable data processing apparatus or other devices create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

For purposes of simplicity and clarity of illustration elements shown in the figures have not necessarily been drawn to scale. For example the dimensions of some of the elements may be exaggerated relative to other elements for clarity. Further where considered appropriate reference numbers are repeated among the figures to indicate corresponding analogous or like features.

Arrangements described herein relate to adopting an existing automation script to a new framework. Specifically an automation script which is configured to execute in a particular framework can be received. In addition a unit test designed to exercise the automation script as well as expected test results also can be received. The automation script can be processed to generate another version configured to execute in at least one other framework. In addition to generating a new version of the automation script a new version of the unit test configured to exercise the new version of the automation script on the other framework s also can be generated. The original version of the automation script and the new version both can be executed in parallel on respective virtual machines to run the respective versions of the unit test. If the outputs generated by the respective versions of the automation script correlate to one another as well as to the expected unit test results and the system states of the respective virtual machines correlate when or after the unit tests execute the new versions of the automation script and unit test can be determined to be valid and output to be made available for deployment.

Advantageously generating new versions of automation scripts and unit tests from existing automation scripts and unit tests saves much time spent on system administration. Rather than writing new automation scripts and unit tests for new frameworks existing automation scripts and unit tests can be quickly converted into new versions that properly execute in the other frameworks. Moreover the new versions of the automation scripts and unit tests can be configured to be platform independent allowing them not only to be deployed for use in new frameworks but also for use in the framework for which they were originally developed. Thus for a particular automation process a single automation script and unit test can be used to automate such process in any of a variety of platforms that may exist in a cloud network.

As defined herein the term automation script means software that includes a launch point and source code written in a scripting language configured to automate one or more tasks within a system. For example automation script can be used to automate installation of an application or service on a system implement object rules field validations workflow or escalation actions workflow condition logic and security condition logic etc.

As defined herein the term launch point means a script configuration. The launch point identifies a target application or context and variables that are passed between the application and the source code. In this regard the launch point defines the execution context for the source code contained in an automation script.

As defined herein the term unit test means an automated test configured to be run by automation script in order to validate the automation script.

As defined herein the term output means at least one result caused by an automation script to be generated or occur. Such result can be for example a configuration of an application or system a file or other data that is generated or any other result that an automated script may cause to be generated or occur.

As defined herein the term framework means a reusable software platform to develop applications products and or solutions. A framework can include support programs compilers code libraries tool sets and or application programming interfaces that enable development of a project or solution.

Initially the validation module can validate the script to determine whether the script properly functions. In illustration the validation module can pass the script and unit test to a system such as a virtual machine . The virtual machine can provide the framework in which the script is configured to execute. For example if the script is a Unix shell artifact the virtual machine can host a Unix operating system. The virtual machine can execute on the same processing system on which the validation module executes or on another processing system communicatively linked to the processing system on which the validation module executes. At the behest of the validation module the virtual machine can execute the script to run the unit test and generate at least one output. The validation module can compare the output to the expected results to determine whether the output correlates with the expected results . If so the script can be considered to be valid. In this regard the validation module can interface with the virtual machine in a manner than enables the validation module to access the output generated by the script .

If the script is valid the validation module can pass a copy of the script to the conversion module which can process the script to create a new version of the automation script hereafter new script . In illustration the conversion module can compare application programming interfaces APIs of the framework in which the script is configured to execute to APIs of the new framework in which the new script is to be configured to execute in order to identify changes that need to be made to the source code and or launch point of the script to make the script compatible with the new framework while retaining its original functionality. These changes can be made to the script i.e. the copy of the script passed to the conversion module to generate the new script .

The conversion module can configure the new script to execute in one or more frameworks with at least one of these frameworks being different than the framework in which the script is configured to execute. In one example the new script can be configured as Ruby script. Ruby is a platform independent framework that may operate with any of a number of other frameworks. Moreover the new script can be encapsulated as a Chef Recipe. Chef is an open source systems integration framework built specifically for automating processes performed in a cloud network. A Chef Recipe is a Ruby based automation script configured to execute in the Chef framework. The present arrangements are not limited to this example however and the new script can be configured as any other suitable type of automation script. In one aspect the validation module or the conversion module can prompt a user to specify the type of automation script to be generated and the conversion module can generate the new script accordingly.

Further the validation module also can pass a copy of the unit test to the conversion module and the conversion module can process the unit test to create a new version of the unit test hereinafter new unit test . The conversion module can configure the new unit test to be run by the new script when the new script is executed in order to validate the new script . Continuing with the previous example the new unit test can be configured as a Cucumber unit test. A Cucumber unit test is a Ruby based unit test that supports validation using a Ruby unit test framework.

The validation module can receive the new script and new unit test and perform an initial validation on the new script to confirm the new script is executable. For example the validation module can pass the new script to a system such as a virtual machine to test the new script to verify that it will indeed execute. If the new script passes such validation the validation module also can pass the new unit test to the virtual machine . The virtual machine can execute on the same processing system on which the validation module executes or on another processing system communicatively linked to the processing system on which the validation module executes. In one arrangement the virtual machine and the virtual machine both can execute on the same processing system though this need not be the case.

The validation module can interface with the virtual machines to initiate execution of the script to run the unit test on the virtual machine and initiate execution of the new script to run the unit test on the virtual machine . Moreover the validation module can initiate such executions so that the script and the new script execute in parallel line by line. As the script and new script generate respective outputs the validation module can compare the outputs to the expected results to determine whether the outputs correlate with the expected results . Further the validation module can compare the outputs generated by the new script to outputs generated by the script to determine whether these outputs correlate. If the outputs generated by the new script do not correlate with the expected results and or the outputs generated by the script the new script and or new unit test can be identified as being invalid. Otherwise the validation module can determine that the new script and new unit test have passed a portion of the validation process based on proper outputs being generated.

In one aspect as the scripts execute in parallel line by line the validation module can monitor each sequential output generated by each of the scripts identify which outputs generated by the script correspond to outputs generated by the new script . Such outputs can be identified as an output pair. Each output in an output pair can be compared to the expected results . When at least one of the outputs in an output pair do not correlate with the expected results or the outputs in the output pair do not correlate with one another the validation module can identify code in the respective scripts that generate the subject outputs in the output pair. Moreover the validation module can identify portions of the respective unit tests being operated upon by the identified code. Such identification can facilitate debugging of the scripts and or the unit tests . For example a user can revise the identified code in the new script revise the new unit test revise the process used by the conversion module to generate the new script and or revise the process used by the conversion module to generate the new unit test .

In addition to validating the outputs generated by the scripts the validation module also can compare the states of respective the virtual machines during or after execution of the respective scripts . For example at the behest of the validation module snapshots of the states can be captured and passed to the validation module to determine whether the states contain the same changes made by the respective scripts . One example of a tool that can be used to capture the snapshots is VMware vCenter Operations Management Suite. Examples of information indicated in the system states that can be compared include but are not limited to new directories that have been created the state of new software that has been installed operating system changes etc. If the states do not correlate the new script and or the new unit test can be identified as being invalid. Otherwise the validation module can determine that the new script and new unit test have passed a portion of the validation process based on a proper system state being identified.

If the new script and new unit test pass the both the portion of the validation process that examines the outputs generated by the new script and the portion of the validation process that examines the system state then the new script and new unit test can be considered valid and output to be made available for deployment. By way of example a Unix shell artifact can be converted to a Chef Recipe and a corresponding unit test can be converted to a Cucumber unit test. Because a Chef Recipe and a Cucumber unit test are platform independent they can be used to not only automate processes performed in a Unix operating system but also automate processes performed in other platforms. This greatly increases administration efficiency in cloud networks that incorporate various different software platforms.

At step the first version of the automation script can be executed in the first framework to run the first version of the unit test and the second version of the automation script can be executed in the second framework to run the second version of the unit test. At step at least a first output generated by the first version of the automation script running the first version of the unit test and at least a second output generated by the second version of the automation script running the second version of the unit test can be compared to at least one expected unit test result to determine whether the first output and the second output correlate with the expected unit test result. At step a first state of a first system hosting the first framework can be captured post execution of the first version of the automation script and a second state of a second system hosting the second framework can be captured post execution of the second version of the automation script. At step the second state of the second system can be compared to the first state of the first system to determine whether the second state correlates with the first state.

At step responsive to the first output and the second output correlating with the expected unit test result and the second state correlating to the first state a determination can be made that the second version of the automation script is valid. The second version of the automated script and the second version of the unit test can be output for deployment.

The memory elements can include one or more physical memory devices such as for example local memory and one or more bulk storage devices . Local memory refers to RAM or other non persistent memory device s generally used during actual execution of the program code. The bulk storage device s can be implemented as a hard disk drive HDD solid state drive SSD or other persistent data storage device. The processing system also can include one or more cache memories not shown that provide temporary storage of at least some program code in order to reduce the number of times program code must be retrieved from the bulk storage device during execution.

Input output I O devices such as a display a pointing device and a keyboard optionally can be coupled to the processing system . The I O devices can be coupled to the processing system either directly or through intervening I O controllers. For example the display can be coupled to the processing system via a graphics processing unit GPU which may be a component of the processor or a discrete device. One or more network adapters also can be coupled to processing system to enable processing system to become coupled to other systems computer systems remote printers and or remote storage devices through intervening private or public networks. Modems cable modems transceivers and Ethernet cards are examples of different types of network adapters that can be used with processing system .

As pictured in the memory elements can store the components of the system of namely the validation module and the conversion module . Being implemented in the form of executable program code these components of the system can be executed by the processing system and as such can be considered part of the processing system . Moreover the validation module and the conversion module are functional data structures that impart functionality when employed as part of the processing system of .

The memory elements also can store the script the unit test and the expected results of the system of . These also are functional data structures that impart functionality when employed as part of the processing system of .

Further the memory elements can store one or both of the virtual machines of the system of . These also are functional data structures that impart functionality when employed as part of the processing system of . As noted the virtual machines may be hosted on other processing systems to which the processing system is communicatively linked via the network adapter .

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms includes including comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment disclosed within this specification. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

The term plurality as used herein is defined as two or more than two. The term another as used herein is defined as at least a second or more. The term coupled as used herein is defined as connected whether directly without any intervening elements or indirectly with one or more intervening elements unless otherwise indicated. Two elements also can be coupled mechanically electrically or communicatively linked through a communication channel pathway network or system. The term and or as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will also be understood that although the terms first second etc. may be used herein to describe various elements these elements should not be limited by these terms as these terms are only used to distinguish one element from another unless stated otherwise or the context indicates otherwise.

The term if may be construed to mean when or upon or in response to determining or in response to detecting depending on the context. Similarly the phrase if it is determined or if a stated condition or event is detected may be construed to mean upon determining or in response to determining or upon detecting the stated condition or event or in response to detecting the stated condition or event depending on the context.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the embodiments disclosed within this specification have been presented for purposes of illustration and description but are not intended to be exhaustive or limited to the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the embodiments of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the inventive arrangements for various embodiments with various modifications as are suited to the particular use contemplated.

