---

title: Optimized HTML5 electronic programming guide application
abstract: An electronic programming guide (EPG) data manager module is provided. The EPG data module provides an event driven infrastructure to provide EPG data to a hypertext markup language 5 (HTML5) applications. The HTML5 EPG application presents an EPG data window in a user interface on a display device. The EPG data is provided to the EPG application in scriptable data objects generated to be rendered by the HTML5 EPG application based upon the EPG data window to be presented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09386341&OS=09386341&RS=09386341
owner: Espial Group Inc.
number: 09386341
owner_city: Ottawa
owner_country: CA
publication_date: 20130509
---
The present disclosure relates to electronic programming guides EPG and in particular to management of EPG data and navigation in a hypertext markup language 5 HTML5 based EPG application.

Set top boxes Smart TVs tablets or smartphones can provide an electronic programming guide EPG to enable a user to navigate programming schedules and other broadcast media programming with continuously updated time related EPG information for current and upcoming programs. The EPGs are presented in an interactive user interface allowing the user to navigate programs based upon channel or source and time to select specific programs for viewing or recording. The EPGs requires data which is typically provided by a service provider and can span a defined time period typically but not limited to 7 to 14 days and is provided in a compressed data format.

In order to present the EPG the EPG data is retrieved via a network or pushed to the device the files are then decompressed and the user interface is generated to present the EPG. Hypertext Markup Language 5 HTML5 as developed by the World Wide Web Consortium W3C and JavaScript JS as defined in the ECMA 262 specification and ISO IEC 16262 EPG implementations provide flexibility in user interface design however they can be memory and processor intensive when working with large datasets such as provided in EPG data. The EPG data handling to generate the EPG results in a number of performance problems and can utilize a large amount of memory resources. There are currently a number of approaches to creating an EPG application in HTML. A first approach is to use a native visual plug in that manages the EPG data and the rendering of the data in the user interface which provides optimal performance but provides limited ability to customize the display of the EPG data and does not leverage the flexibility of HTML5. A second approach manages the EPG data and display entirely in HTML JS implementation which makes navigation of the EPG data slow and memory intensive since the EPG data needs to be cached in JS and all the logic of the EPG navigation needs to be done via JS and HTML5. For example a byte of compressed EPG data may result in a 100 fold increase in data size when loaded into JS and formatted in HTML. Creating an HTML5 EPG application is very complex since the HTML5 EPG application needs to handle all the aspects of the EPG application including navigation rendering data management which can be taxing on the limited processing and memory resources in device such as set top boxes Smart TVs tablets and smartphones.

Accordingly systems and methods that enable improved EPG data management in the presentation of an EPG in an HTML5 application remains highly desirable.

It will be noted that throughout the appended drawings like features are identified by like reference numerals.

In accordance with an aspect of the present disclosure there is provided a system for presenting an electronic program guide EPG user interface UI on a display device the system comprising an EPG application defined in an Hypertext Markup Language 5 HTML5 based platform the HTML5 EPG application presenting programming information defined within an EPG data window in the UI on the display device and an EPG data manager module for providing EPG data received from one or more EPG data files to the HTML5 EPG application the EPG data provided by scriptable data objects for the EPG data window the scriptable data objects provided to the EPG application to render the EPG data window in the user interface on the display device.

In accordance with another aspect of the present disclosure there is provided a method of generating an electronic program guide EPG by a processor in a user interface presented on a display device the method comprising determining an EPG data window to be presented in the HTML5 EPG application in the user interface presented on the display device generating at least one scriptable data object from EPG data based upon the determined EPG data window and providing the generated scriptable data object to the HTML5 EPG application to instruct rendering of the EPG data in the user interface presented on the display device.

In accordance with yet another aspect of the disclosure there is provided A non transitory computer readable memory containing instructions for generating an electronic program guide EPG by a processor in a user interface presented on a display device the instructions comprising determining an EPG data window to be presented in the HTML5 EPG application in the user interface presented on the display device generating at least one scriptable data object from EPG data based upon the determined EPG data window and providing the generated scriptable data object to the HTML5 EPG application to instruct rendering of the EPG data in the user interface presented on the display device.

Embodiments are described below by way of example only with reference to . In order to provide a more efficient electronic programming guide EPG in an HTML5 implementation an EPG data manager is provided to interface with an EPG application executed in an HTML5 browser based platform which may also use an interpreted language such as JS to provide the HTML5 EPG application or functions of the EPG application. An intermediary event handler may be provided to efficiently manage the EPG data for instructing rendering functions of an HTML5 EPG application. The EPG data manager enables an HTML5 EPG application that is memory efficient provides good performance and is easy to customize by offloading EPG data management decompression and navigation from the presentation of the EPG. The event handler interfaces between the EPG data manager and the EPG application to service EPG events from the EPG data manager and instruct the EPG application to render the EPG. The event handler can be provided using a scripting language such as JS providing functions that allow the HTML5 EPG application to configure the display window of the EPG data. The event handler notifies the HTML5 EPG application when the EPG data should be rendered based upon the scriptable data objects received from the EPG data manager. The format of the data passed via the event handler will notify the HTML5 EPG application which channels and programs in the EPG display window has been ADDED REMOVED or UPDATED to allow the HTML5 EPG application to update its display with minimal effort. Each scriptable data object also contains information to aid the EPG application in rendering the scriptable data object. The additional information can come in the form of CSS selectors for each scriptable data object or may be provided as coordinates if other aspects of HTML5 integrated presentation technologies are utilized to display EPG such as for example but not limited to SVG Canvas WebGL and other alternatives. The EPG application can apply the CSS selector values to the HTML display element representing the scriptable data object to quickly render the EPG data. The CSS selector values are determined based on attributes of the EPG service and program. This approach allows the management of the EPG data and navigation in native code for optimal performance and memory utilization while allowing the rendering of the EPG application to be done completely in HTML5 for complete UI flexibility customization.

The EPG is generated by an HTML5 platform based EPG application executed by a processor of the display device or digital media receiver . The HTML5 EPG application renders the user interface and inserts the EPG data for formatting and display using HTML5 to provide flexibility in appearance and presentation. HTML5 applications typically utilize cascading style sheets CSS for describing the presentation semantics of the user interface to receive and process EPG data and determine user feedback and transitions. In addition JS may be utilized for implementing portions of the EPG user interface and data interaction through control of CSS properties as well as other HTML5 integrated presentation technologies such as SVG Canvas WebGL and other alternatives . HTML5 provides flexibility in allowing user interface to be readily implemented however the EPG user interface can limit the flexibility when tied to underlying data processing functions required for the EPG presentation due to the increased memory requirement when processing EPG data within the HTML 5 EPG application.

The EPG data manager module may be presented as a plug in to the HTML5 Browser and the HTML5 EPG application . The event handler provides a defined interface to facilitate transfer of EPG data between the EPG data manager module and the EPG application and initiate visual updates by the EPG application in response to EPG events such as navigation inputs or changes in EPG data or timeframes. The EPG data manager module handles all complex functionality of the EPG application such as navigation caching and view window management. The EPG data manager can be provided as a module within the HTML5 JS browser or as a native code application that is a compiled intermediate level language product such as C and C to compile directly to the hardware instruction set. In response to a navigation input or changes in the EPG data set such as a time transition or programming changes the EPG data manager module determines the data for the view window that is displayed in the EPG application . The EPG data manager module determines the EPG data required to update the data window to reflect the navigation or EPG data changes to modify the subset of EPG data displayed in the UI. The EPG data manager module retrieves the required EPG data segment s if not already cached and decompresses the data and provides the data objects via the event handler to the EPG application to update the EPG data window. The event handler instructs the EPG application to render the EPG components when the view window has been updated. The event driven infrastructure notifies the HTML5 EPG application when portions of the EPG user interface display needs to be updated and limits the processing requirements on the EPG application . Calls from the EPG data manager module providing a scriptable data object to the event handler enables updates of EPG data to be provided to the EPG application and pushed to the user interface. Functions may be performed such as providing an EPG data update to notify the user interface that the EPG display needs to be updated with the given EPG data a time slot update to notify the user interface that the EPG visible time slots needs to be updated or a focus selection update to notify a change in the user selected program to be displayed within the user interface.

Referring to the EPG data manager may have data for most of the EPG data window for example file segments have been decompressed whereas a portion of the window is not available and would require file segment to be retrieved and or decompressed. In addition the EPG data manager may maintain a buffer window around the EPG data window to speed navigation or predictively decompress EPG data based upon previous actions.

Although the implementation is described relative a grid format EPG the implementation may be utilized in other implementations such as carousel navigation.

In some embodiments any suitable computer readable media can be used for storing instructions for performing the methods described herein. For example in some embodiments computer readable media can be transitory or non transitory. For example non transitory computer readable media can include media such as magnetic media such as hard disks etc. optical media such as compact discs digital video discs Blu ray discs etc. semiconductor media such as flash memory electrically programmable read only memory EPROM electrically erasable programmable read only memory EEPROM etc. any suitable media that is not fleeting or devoid of any semblance of permanence during transmission and or any suitable tangible media. As another example transitory computer readable media can include signals on networks in wires conductors optical fibers circuits and any suitable media that is fleeting and devoid of any semblance of permanence during transmission and or any suitable intangible media.

Although the description discloses example methods system and apparatus including among other components software executed on hardware it should be noted that such methods and apparatus are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in any combination of hardware software and or firmware. Accordingly while the following describes example methods and apparatus persons having ordinary skill in the art will readily appreciate that the examples provided are not the only way to implement such methods and apparatus.

