---

title: Privacy verification tool
abstract: Systems and methods for protecting the privacy of users by controlling access to the users' data. In particular, some embodiments provide for a higher-level declarative language for expressing privacy policies which can be verified using a computer-aided verification tool. The verification tool uses the expressed privacy policies along with language-level assumptions and assertions in the verification process. For example, high-level models of the privacy policies can be reduced to a simpler verification representation (e.g., a Boolean representation) based on a set of assertions. This verification representation can then be submitted to a constraint solver (e.g., Satisfiability Modulo Theories solver) for verification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009780&OS=09009780&RS=09009780
owner: Facebook, Inc.
number: 09009780
owner_city: Menlo Park
owner_country: US
publication_date: 20130315
---
Various embodiments of the present invention generally relate to storing and controlling access to information within information storage and retrieval systems. More specifically various embodiments of the present invention relate to systems and methods for privacy verification.

Companies can use network based storage systems to store a tremendous amount of end user data. Examples of end user data include but are not limited to addresses credit card information photographs e mails healthcare records financial records electronic documents messages associations with other end users and other types of information. In many cases each user of the storage system establishes a user account and is identified with a unique user identifier ID . Each end user account may be protected with a password for security purposes.

An end user may log into an account with the system by submitting the correct combination of user ID and password associated with the account. In some cases portions of an end user s data may be shared with other end users. In other cases there can be restrictions placed by the end user and or legal requirements on the dissemination and use of the data. As a result unauthorized dissemination and or use of the end user s data can result in dissatisfied customers and potential legal liability. Traditional tools have not allowed for easy verification of the privacy policies set within the storage systems. As such there are a number of challenges and inefficiencies found in traditional tools for granting access to end user data.

Systems and methods are described for providing a privacy verification tool. In some embodiments a storage and privacy service SPS program expressing one or more access control rules can be retrieved from a storage location. Then using a processor a verification representation of the SPS program can be generated based on one or more assertions. The verification representation can include evaluating and abstracting the SPS program based on the one or more assertions generating an intermediate representation by evaluating the SPS program by substituting constants functions and let bound expressions and or generating a Boolean and or integer representation. The verification representation can be submitted to a constraint solver to generate a set of access control outputs. A determination can then be made as to whether the set of access control outputs returned from the constraint solver satisfy a desired set of privacy constraints. In some embodiments if the set of access control outputs do not satisfy the desired set of privacy constraints one or more suggestions to fix the SPS program may be generated and presented to a user.

In some embodiments a system can include a database a verification module a search module an assertion module a suggestion module and or a graphical user interface module. The database can have stored thereon a program written in a declarative language which can be used to enforce a set of privacy policies. The verification module can retrieve the program from the database and generate a verification representation of the program e.g. by reducing the program to a Boolean satisfiability problem . The search module can search over the verification representation to determine if the program satisfies the set of privacy polices. The assertion engine can be used generate one or more assertions e.g. automatically or through input selections provided by a user . The suggestion module can be configured to generate one or more suggestions for updating the program when a determination is made that the program does not satisfy the set of privacy policies. The graphical user interface module can generate one or more graphical user interfaces that aid in the creation and testing of the program.

Embodiments of the present invention also include computer readable storage media containing sets of instructions to cause one or more processors to perform the methods variations of the methods and other operations described herein.

While multiple embodiments are disclosed still other embodiments of the present invention will become apparent to those skilled in the art from the following detailed description which shows and describes illustrative embodiments of the invention. As will be realized the invention is capable of modifications in various aspects all without departing from the scope of the present invention. Accordingly the drawings and detailed description are to be regarded as illustrative in nature and not restrictive.

The drawings have not necessarily been drawn to scale. For example the dimensions of some of the elements in the figures may be expanded or reduced to help improve the understanding of the embodiments of the present invention. Similarly some components and or operations may be separated into different blocks or combined into a single block for the purposes of discussion of some of the embodiments of the present invention. Moreover while the invention is amenable to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and are described in detail below. The intention however is not to limit the invention to the particular embodiments described. On the contrary the invention is intended to cover all modifications equivalents and alternatives falling within the scope of the invention as defined by the appended claims.

Various embodiments of the present invention generally relate to protecting the privacy of users by verifying access controls to the users data. In particular some embodiments provide for a higher level declarative language for expressing privacy policies which can be verified using a computer aided verification tool. The verification tool uses the expressed privacy policies along with language level assumptions and assertions in the verification process. For example high level models of the privacy policies can be reduced to a simpler verification representation e.g. a Boolean representation based on a set of assertions. This verification representation can then be submitted to a constraint solver e.g. Satisfiability Modulo Theories solver for verification.

In addition the techniques introduced here can be embodied as special purpose hardware e.g. circuitry as programmable circuitry appropriately programmed with software and or firmware or as a combination of special purpose and programmable circuitry. Hence embodiments may include a machine readable medium having stored thereon instructions which may be used to program a computer or other electronic devices to perform a process. The machine readable medium may include but is not limited to floppy diskettes optical disks compact disc read only memories CD ROMs magneto optical disks read only memories ROMs random access memories RAMs erasable programmable read only memories EPROMs electrically erasable programmable read only memories EEPROMs magnetic or optical cards flash memory or other type of media machine readable medium suitable for storing electronic instructions.

Brief definitions of terms abbreviations and phrases used throughout this application are given below.

The terms connected or coupled and related terms are used in an operational sense and are not necessarily limited to a direct physical connection or coupling. Thus for example two devices may be coupled directly or via one or more intermediary channels or devices. As another example devices may be coupled in such a way that information can be passed there between while not sharing any physical connection with one another. Based on the disclosure provided herein one of ordinary skill in the art will appreciate a variety of ways in which connection or coupling exists in accordance with the aforementioned definition.

The phrases in some embodiments according to various embodiments in the embodiments shown in other embodiments and the like generally mean the particular feature structure or characteristic following the phrase is included in at least one embodiment of the present invention and may be included in more than one embodiment of the present invention. In addition such phrases do not necessarily refer to the same embodiments or to different embodiments.

If the specification states a component or feature may can could or might be included or have a characteristic that particular component or feature is not required to be included or have the characteristic.

The term module refers broadly to software hardware or firmware or any combination thereof components. Modules are typically functional components that can generate useful data or other output using specified input s . A module may or may not be self contained. An application program also called an application may include one or more modules or a module can include one or more application programs.

Various embodiments of the present may use access management system to manage the access the users have to the information and data stored on databases and . In some embodiments access management system may use a software language e.g. the SPS language described in more detail below to provide storage agnostic means to access data from databases and . Access management system may implement and provide server side or client side code that enables clients to access data stored in databases and . To ensure that the software is performing as desired i.e. in compliance with a set of privacy policies verification tool can be utilized.

In some embodiments access controls are implemented at the storage layer of networked based environment which may be referred to as the Storage and Privacy Service SPS . More specifically in some implementations for each object e.g. each piece of information or each user stored in networked based environment its access control as specified by its owner user can be represented as a set of e.g. one or more access or privacy rules. In this context the terms access rule and privacy rule refer to the same concept and are used interchangeably.

The access rules of each piece of information are stored in connection with that piece of information. In some implementations the access rules of all the information stored in networked based environment are stored in a data structure that may be represented as a graph having a number of nodes and edges. When a user requests a specific piece of information stored in networked based environment the access control of the piece of information is verified and validated with respect to the requester user by dynamically e.g. in real time filtering the graph. In some implementations a language with a predefined syntax can be used to express the access or privacy rules and the filtering of the graph.

User device can be any computing device capable of receiving user input as well as transmitting and or receiving data via the network . In one embodiment user device is a conventional computer system such as a desktop or laptop computer . In another embodiment user device may be mobile device having computer functionality such as a personal digital assistant PDA mobile telephone smart phone or similar device. User device is configured to communicate with access management system and or the financial account provider via the network . In one embodiment user device executes an application allowing a user of user device to interact with the access management system . For example user device can execute a browser application to enable interaction between the user device and access management system via the network . In another embodiment user device interacts with access management system through an application programming interface API that runs on the native operating system of the user device such as IOS or ANDROID .

User devices can be configured to communicate via the network which may comprise any combination of local area and or wide area networks using both wired and wireless communication systems. In one embodiment network uses standard communications technologies and or protocols. Thus network may include links using technologies such as Ethernet 802.11 worldwide interoperability for microwave access WiMAX 3G 4G CDMA digital subscriber line DSL etc. Similarly the networking protocols used on network may include multiprotocol label switching MPLS transmission control protocol Internet protocol TCP IP User Datagram Protocol UDP hypertext transport protocol HTTP simple mail transfer protocol SMTP and file transfer protocol FTP . Data exchanged over network may be represented using technologies and or formats including hypertext markup language HTML or extensible markup language XML . In addition all or some links can be encrypted using conventional encryption technologies such as secure sockets layer SSL transport layer security TLS and Internet Protocol security IPsec .

In some embodiments a language with a predefined syntax can be used to express objects e.g. users information connections between specific objects access control e.g. access or privacy rules associated with the information and filtering of the graph representing the privacy rules. In some implementations the language can be a declarative language that describes users and objects connections and privacy rules e.g. essentially Thrift for a graph . Different object types may be declared in this language along with all connection types and the privacy rules associated with the objects. For clarification purposes embodiments of this language may be referred to as the SPS language.

The syntax of the SPS language may be customized for specific system requirements or specifications. However the syntax may be modified when appropriate to be suitable for other types of systems. The terms may or may not be case sensitive e.g. depending on the actual implementations . For example if the terms are not case sensitive then Int and int are considered the same term. On the other hand if the terms are case sensitive then Int and int are considered two different terms.

The SPS language supports many features. For example automatic data fetching may be achieved by specifying properties edges and fbtypes defined below . Privacy checking when data are fetched and returned from storage may be achieved by specifying appropriate fields. Undefined values may be used to signal error conditions such as data fetch failure and evaluating such undefined values may help determine whether the failure is with the entire request or just a part of the request. With some implementations the system treats a data retrieval failure as of indeterminate state to the extent that un retrievable data such as due to a temporary network or equipment glitch or due to scheduled maintenance is not strictly necessary to make an access request determination then such failure will not deny access so long as there exists a set of definitely retrieved data that clearly authorizes the granting of access.

The primitive or native types are Int integer String character string and Bool Boolean true or false .

A parameterized type Set represents a set of values. A Set cannot contain any other Set however a Set may contain Nodes or Interfaces which themselves contain Sets . A parameterized type OrderedSet represents a set of values in a pre determined order. A Map represents a relationship between primitive or native types.

 Enums are similar to their counterparts in other languages with the exception that each value s Int integer value representation must be defined. Enums are typed and cannot be used in places where an integer or another enum value is expected.

All values can be Unknown . Unknown is introduced in the cases of data fetch failures or attempting to access attributes of null values. Such Unknown values are propagated up the expression tree and ultimately results in a rule to be forcefully denied if it is a deny or skipped if it is an allow .

A Set contains an Incomplete flag. A Set is marked incomplete e.g. using the Incomplete flag if it may contain more values but does not because of data fetch failures. An Incomplete flag modifies the results of set operations causing them to become Unknown .

The property fields returned from the distributed graph database implemented by the Facebook system known as TAO may have three possible states INT TEXT and ARRAY . When loaded they are coerced into language types by the following rules 

 ARRAY Object The JSON input is treated as a set of property fields for an object constructed recursively with the sub objects following the same rules. If the input is not a JSON object return Unknown .

For the array conversions if the input is not an array the result is Unknown . If the input is an array the items in the array should be convertible based on the INT TEXT Int String conversions. In the event that the conversion is not possible the item is excluded and the set is marked incomplete .

An Interface is declared with a name and optionally the names of the parent Interfaces that it implements.

Properties and edges are optionally declared in Interfaces . Instead an Interface declares attributes that may map to a property edge expression or alias in the Nodes that implement the Interface . An Interface can also declare permission names without defining their bodies however these permissions must be defined in the implementing class. Interfaces may implement other Interfaces .

Each Node defined maps to a particular object type in the underlying storage. In this context the terms node or Node and object refer to the same concept and may be used interchangeably. In the case of the Facebook system each Node maps to a concrete object stored in TAO or an object created at the runtime.

A Node has properties which have names and types. The types can be native types e.g. Int String Bool or other nodes.

When the keyword extend is present the body of the declaration is added to the declarations for this Node . This lets different products add additional permissions or edges that are product specific without having it all be put into one node declaration block.

The type indicates the type of the field. When a field contains an ID e.g. fbid its type should be set to the type of the object.

The optional option default specifies a field s value if it is missing from the data. If a field is missing a value and the default is not specified the value of the field becomes Unknown . Default values can be a constant literal null or the empty set.

The optional option decode specifies a named decoding function provided by the runtime which decodes the field s raw data and fills it with processed data. This may be useful for example for specifying fields of IDs stored as comma separated lists. It is mainly used for legacy reasons. The comma separated list does not support multiple IDs in a field. Instead associations should be used for such cases.

Generally the type of an Edge is a Set of nodes. If the type is a node type instead of a set then one arbitrary object from the association becomes the value of this edge. If there is no association the value of the edge becomes null.

Each Edge is stored as a 3 tuple object1 id edge type object2 id . The name of the edge type and the name of the type of node the edge leads to are specified.

There can be multiple edges to the same type with different names. These edges are stored as different edge types in the underlying storage e.g. TAO in the Facebook system . A separate file e.g. called sources.fbobj in the Facebook system specifies the IDs for object types and edge types in the underlying storage so the system knows how to load these objects.

Named expressions are attributes computed from other attributes. A Named Expression can be used in the same way as other types of attributes.

Inside a Named Expression block the following bindings may be used viewer context an object representing the current viewer context viewer the IUser object representing generally shorthand for viewer context.user 

that if the permission takes an argument then this is the target object when invoked to do an edge traversal permission check.

Permissions are functions that return Boolean Bool values. A Permission may be defined to take an optional argument which is set to the target object when computing permission on an edge traversal.

that if the permission takes an argument then this is the target object when invoked to do an edge traversal permission check.

 Source is a top level block. Sources blocks specify the data source for nodes and edges. Every Node and Edge must have a corresponding source item entry.

The first form of source item specifies the source for nodes and the second form specifies the source for edges. The possible values are 

 empty the edge always returns no element not backed by an external data source assoc the contents of the edge are the result of the TAO assoc association query with this assoc type 

 fbtype Facebook type the node is mapped to this fbtype and object data are retrieved through a TAO object query and external the node or assoc is not fetched using standard TAO methods but rather uses runtime dependent methods.

 Constant is a top level block. Constantsblocks create a namespace for a set of constants and enumerations.

Constant values can be assigned a static value. This includes string and integer literals references to other constants and enum enumeration values and set literals. Constants are static in nature with values independent of the executing content such as the specific viewer or owner.

 External is a top level block. External block declares functions that are implemented by the runtime.

Comparison between objects is done by comparing their IDs. If these objects have no IDs i.e. special objects generated by the runtime then the behavior is undefined.

If any of the arguments are Unknown or in the case of sets Incomplete the comparison returns Unknown .

 in test if the left hand side lhs value is in the right hand side rhs Set using equality as defined previously if the value is not found and the set is Incomplete returns Unknown 

 without returns a Set that includes the values in the lhs Set but not in the rhs Set if the rhs Set is Incomplete an empty Set with the Incomplete flag set is returned.

For the expression var in expr if pred filter the contents of the Set returned by expr using pred and return the Set of values for which the predicate evaluates to true.

If the input is incomplete e.g. marked by the Incomplete flag the output is also marked incomplete. If the predicate returns Unknown for an element that element is not added to the result Set and the result is marked incomplete.

Variables cannot be assigned to. There is a set of variables that is bound in expression contexts. Use the scoping form to refer to constants and enum values.

Accessing properties generally results in a data fetch for that object. Accessing edges generally results in an assoc get request to TAO.

In particular embodiments information stored in a distributed system may be repressed using a graph have any number of nodes and edges. In the case of a social networking system e.g. the Facebook system such graph may be referred to as a social graph. illustrates an example graph having a few nodes and edges with each edge connecting two specific nodes .

In some embodiments each node represents an object e.g. a user a piece of information an access rule a web page a file a message etc. . If there is a direct interaction or relationship between two objects e.g. two users two pieces of information a user and a piece of information then an edge connects the two corresponding nodes respectively representing the two objects. There may be different types of objects and thus different types of nodes in graph . Similarly there may be different types of interactions or relationships and thus different types of edges in graph .

In addition for each edge there may also be associated data indicating how strong the interaction is between the two objects represented by the two corresponding nodes linked by that edge . In some implementations given two nodes an affinity may be determined between these two nodes whether or not there is an edge directly connecting these two nodes . In some implementations the affinity between two nodes may be determined based on past interactions among the objects represented by some or all of nodes in the graph.

In various embodiments each piece of information stored in the system may be similarly represented as a node in the graph. As an example suppose that in nodes A B and C represents three different users User A User B and User C respectively and node D represents a status update posted by User A. In this case User A is the owner of the status update and thus edge A links nodes A and D because there is an interaction between User A and the status update e.g. User A has posted the status update . In addition further suppose that User A has specified access or privacy rules for the status update he has posted. Specifically the status update can be shared with User B but not with User C. These access rules may also be reflected or stored in graph . For example edge B links nodes B and D indicating that the status update can be shared with User B e.g. User B can view the status update . On the other hand there are no edge linking nodes C and D because User C is not authorized to view the status update. In this example edges A and B are two different types of edges indicating two different types of relationships between the nodes linked by them. Edge A indicates that node A representing User A has posted and is the owner of node D representing the status update. Edge B indicates that node B representing User B is authorized to access node D representing the status update.

In particular embodiments different types of nodes and edges in the graph may be defined according to the language described above i.e. the SPS language . As an example for the type of node representing a user it may be defined as 

Each node e.g. nodes in representing a specific user may be represented as an instance of the User object defined above. Different instances of the User object may have their variables e.g. property or edge variables set to different values according to the specific users they represent.

In one or more embodiments there is a type of node in the graph that represents an object that specifies access rules for other types of nodes e.g. users pieces of information . Each privacy setting may be an instance of this type of node. The privacy setting for another node e.g. representing a user may reference an appropriate node of such type which is evaluated in the same context e.g. the same viewer at runtime. As an example the following is a simplified version of the type of node named PrivacySetting representing the object that specifies access rules for other type nodes.

In particular embodiments the users and objects e.g. represented as nodes in graph as well as the connections between specific users or objects e.g. represented as edges in graph in a system e.g. the Facebook system may be expressed using the SPS language e.g. by defining appropriate types of Nodes Edges etc. and instancing these objects . In addition all the access or privacy rules in the system may be expressed using the same SPS language e.g. by declaring appropriate Properties Expressions etc. . The access or privacy rules thus expressed using the SPS language may be collectively referred to as the schema for the information access control in the system. The definitions for different types of objects expressed using the SPS language may be stored in a file or several files e.g. the schema file . As an example the following is an abbreviated version of a schema file which illustrates the format of the schema.

In some embodiments a compiler compiles the schema i.e. the access or piracy rules expressed in the SPS language and turns the schema into an abstract syntax tree AST . In particular embodiments the compiler for the schema is implemented using the Haskell programming language. The compiler type checks the schema. In various embodiments the SPS language can be a strictly typed language. Strictly typed languages prevent certain types of mistakes in the source code in comparison to loosely typed languages e.g. PHP . This is somewhat important to tasks like privacy checking where mistakes are less tolerable. When compiling source code written in the SPS language the compiler type checks the source code against the schema in order to catch possible errors in the source code that do not agree with what has been defined in the schema. In some implementations the compiler takes the schema code which may be expressed in a high level domain specific language and maps it into a simpler form that is more suitable for evaluation. In fact any tool that makes such a transformation function as the compiler.

In particular embodiments the AST of the SPS language may be similar to that of a generic programming language. As an example the AST may be a Boolean tree of set operations the evaluation of which requires data fetches from the backing storage e.g. where the information is stored . The AST may have a predefined syntax.

In some implementations the AST is expressed as PHP code. The PHP code may reference various PHP libraries and implement functions that compute privacy checks. As an example a compiler takes the files with the access rules e.g. the schema and outputs PHP code. The PHP code is saved into the WWW repository. This PHP code references various PHP libraries and computes privacy checks.

Alternatively in some implementations the AST may be expressed as C code e.g. with Nodes Edges etc. defined as various C classes . For example a compiler takes the files with the access rules and outputs C code. The C code is then complied to a .so file using a C compiler e.g. gcc which may then be deployed to appropriate servers in the system. A .so file is a shared object file which is a dynamically loadable code library format commonly used by many computer programs. The C code may reference various runtime C or C libraries. At runtime the .so file is loaded into a server shell or PHP extension that includes basic runtime functionalities such as fetching data from storage reporting status etc. In some cases there is a server shell that receives client requests on a Thrift interface and sends them to the .so file with the rules. One of the things that the access rules do is fetch data from data storage or data cache server e.g. TAO . The .so code calls back into the server shell so that the .so code is not dependent on a particular version of TAO.

Alternatively in some implementations the AST is expressed in a human friendly language that is easily readable and understandable.

In one or more embodiments in a distributed system copies the code expressing the schema as well as the graph may be stored on multiple servers located at different geographical locations.

In at least one embodiment the runtime can be a server shell that among others loads the code expressing the schema with the access rule logic. For example if the schema has been compiled into a .so file in the case of using C code to express AST the .so file is loaded into the server shell. A server takes requests sent from clients over the web tier and fetches data from storage e.g. TAO as necessary. The server does privacy checks and returns the requested objects e.g. a piece of information only if a request passes the check according to appropriate privacy rules. Thus the requested object is sent to a client only if the request passes the privacy check according to the privacy rules associated with the object.

Suppose that a user User A desires to access a piece of information Information Piece B. In particular embodiments User A may send a request or query for Information Piece B to a server using a client associated with User A. In some implementations a query may be expressed in a high level declarative form to minimize the amount of data that are sent between the storage for storing the information and web for interfacing with clients tiers. In some implementations the query may include a single statement. The query identifies the user requesting the object. As an example the following code generates a serialized query which is eventually sent to the data storage tier and executes all of the components of the query enabling global query planning and minimizing the amount of non display data sent to the web tier. The user sending the request is identified as me e.g. using the ID of User A in the query.

As another example the following is a simplified function prototype for requesting a piece of information on behalf of a user. Here viewer id is used to populate the viewer variable in the SPS language and object id is used to identify the requested object.

As a third example an interface may be defined to request multiple objects per request. For example a request may ask for all photographs posted by User A .

In some embodiments the code complied from AST is evaluated at runtime. This code may be referred to as an intermediate language or bytecode . When a server conducts the privacy check for a piece of information requested by a user the bytecode is evaluated to determine whether the user is authorized to access the requested piece of information. The server loads the bytecode for the type of object requested and evaluates it.

In particular embodiments evaluation of the bytecode involves fetching data and doing set operations e.g. in intersect . It is not always necessary to evaluate all nodes of the bytecode i.e. the Boolean tree to get a definitive result. For example any one term of a logical OR expression being true is sufficient to make the entire expression true. This may lead to algorithms that can improve the efficiency of the tree evaluation process based on the cost of fetching data in a distributed system. In particular embodiments a three state system is used to handle the Boolean tree and its evaluation at runtime when data fetching errors are countered which may occur from time to time especially in a distributed system.

In some implementations during data fetching when a fetch error is countered the error is propagated through the bytecode as the tree is evaluated. This may help give a definitive answer in many cases even when not all data fetches are definitive. More specifically in particular embodiments when each function is specified there is a detailed specification of how the function should behave when an undefined value is taken as input. Thus when an error is encountered and an undefined value is used as an input to the function the function is able to handle such undefined value and the error caused it appropriately thus recovering from the error.

As an example an evaluation rule may state TRUE if a in b or not c in d . To evaluate this rule first sets band dare loaded from storage. A possible error case that may occur in this load step is that some but not all of a set e.g. set b is loaded. When this happens the representation of set b includes the objects that have been able to be loaded and a marker that the load was incomplete e.g. using the Incomplete flag . In this case an existence check e.g. a in b using the in binary set operation can return a definitive true but not a definitive false. Specifically if a is found in the incomplete set b it may be inferred that a is definitely in the complete set b. However if a is not found in the incomplete set b amay still be in the complete set b e.g. one of those objects in set bfailed to be loaded . Thus to ask a in b when set b is potentially incomplete the possible returns are true or incomplete . Moreover in this example if set b is incomplete the evaluation may still receive a true return. But if set d is incomplete the evaluation can never get a true return. In particular embodiments the set operations are defined such that they correctly honor this notion of incompleteness and correctly propagate it to dependent operators.

In particular embodiments careful specification of how functions and operators should behave allows for speculative execution of sub expressions for the purpose of optimizing overall latency. In some implementations speculative execution may be used in CPUs to load data from memory for those branches that it is not yet known whether the branches have to be evaluated. Similarly speculative execution may be used to load data from remote storage before knowing the data are needed. For example in the case of a b if a evaluates to FALSE then the evaluation of b is not needed. But if a evaluates to TRUE b needs to be evaluated. Hence one strategy is to evaluate both a and bat the same time and if one side finishes with FALSE the evaluation of the other operand can be immediately cancelled. This is in contrast to evaluating a and then b in which case a and b are evaluated in sequence instead of in parallel. Consequently this system also provides for automatic parallelization .

Memory can be any device storage media mechanism or populated data structure used for storing information. In accordance with some embodiments of the present invention memory can encompass any type of but is not limited to volatile memory nonvolatile memory and dynamic memory. For example memory can be random access memory memory storage devices optical memory devices magnetic media floppy disks magnetic tapes hard drives SIMMs SDRAM DIMMs RDRAM DDR RAM SODIMMS erasable programmable read only memories EPROMs electrically erasable programmable read only memories EEPROMs compact disks DVDs and or the like. In accordance with some embodiments memory may include one or more disk drives flash drives one or more databases one or more tables one or more files local cache memories processor cache memories relational databases flat databases and or the like. In addition those of ordinary skill in the art will appreciate many additional devices and techniques for storing information which can be used as memory .

Memory may be used to store instructions for running one or more applications or modules on processor s . For example memory could be used in one or more embodiments to house all or some of the instructions needed to execute the functionality of verification module assertion module search module suggestion module and or graphical user interface module .

In accordance with various embodiments verification module can be configured to receive a program to be tested. Verification module can then generate a verification representation of the program. Generating the verification representation can include reducing the program to a Boolean satisfiability problem and or to one or more intermediate representations. The intermediate representations of the program can include a Boolean and or integer representation. In some cases the verification representation can be simplified based on one or more assertions retrieved from assertion module . Since data access decisions usually result in either allowing the access or denying the access Boolean representations can be useful.

Assertion module can generate one or more assertions e.g. randomly systematically categorically or based on user inputs and selections which can be used to evaluate and abstract the program. Search module can then search over the verification representation to determine if the program satisfies the set of privacy policies subject to the one or more assertions. If the program does not satisfy the set of privacy policies suggestion module can generate one or more suggestions for updating the program or guide an evaluator through portions of the program where the error likely occurs.

GUI module can be used to generate one or more graphical user interface screens. These screens can be used to display information e.g. privacy policies or suggested fixes to users. In some embodiments the graphical user interface screens can be used by the users to create or update the SPS program associated with various data. Still yet some graphical user interface screens can allow the user to place the program in the access management system for managing access decisions once the program has been verified.

Generation operation generates a verification representation of the SPS program. The verification representation may be generated for example by evaluating and abstracting the SPS program based on the one or more assertions received during assertion receiving operation . The verification representation may be a Boolean and integer representation in some embodiments. Submission operation submits the verification representation to a constraint solver e.g. SMT solver for evaluation.

Generation operation generates a logical representation of the symbolically evaluated SPS program. In some embodiments the logical representation can be an abstracted integer and or Boolean representation. The logical representation generated by generation operation can then be submitted using submission operation to a constraint solver. Using the outputs from the constraint solver determination operation determines if the privacy policies are satisfied. If determination operation determines that the privacy policies are satisfied then determination operation branches to compliance notification operation where an evaluator is notified of the compliance of the SPS program with the privacy policies.

If determination operation determines that the privacy policies are not satisfied then determination operation branches to non compliance notification operation where the evaluator is notified of the non compliance of the SPS program with the privacy policies. In addition suggestion operation may provide one or more suggested fixes to the SPS program to improve compliance with the privacy policies.

Determination operation then determines if any more assertions or combination of assertions remain to be tested. If determination operation determines that additional assertions need to be tested then determination operation branches to picking operation where the next assertions are selected. If determination operation determines that no additional assertions need to be tested then determination operation branches to report generation operation where a report summarizing the compliance with a set of privacy policies can be generated.

As mentioned above embodiments of the present invention can be utilized within a social networking system. Typically a social networking system includes one or more computing devices storing user profiles associated with users and or other objects as well as connections between users and other users and or objects. In use users join the social networking system and then add connections to other users or objects of the social networking system to which they desire to be connected. The users may be individuals or entities such as businesses organizations universities or manufacturers. The social networking system allows its users to interact with each other as well as with other objects maintained by the social networking system. In some embodiments the social networking system allows users to interact with third party websites and financial account providers.

Based on stored data about users objects and connections between users and or objects the social networking system can generate and maintain a social graph comprising a plurality of nodes interconnected by a plurality of edges. Each node in the social graph represents an object or user that can act on another node and or that can be acted on by another node. An edge between two nodes in the social graph represents a particular kind of connection between the two nodes which may result from an action that was performed by one of the nodes on the other node. For example when a user identifies an additional user as a friend an edge in the social graph is generated connecting a node representing the first user and an additional node representing the additional user. The generated edge has a connection type indicating that the users are friends. As various nodes interact with each other the social networking system can modify edges connecting the various nodes to reflect the interactions.

API request server allows other systems user devices or tools to access information from social networking system by calling APIs. The information provided by the social network may include user profile information or the connection information of users as determined by their individual privacy settings. For example a system user device or tools interested in accessing data connections within a social networking system may send an API request to social networking system via a network. The API request is received at social networking system by API request server . API request server processes the request by submitting the access request to access management system where access is determined and any data communicated back to the requesting system user device or tools via a network.

Web server links social networking system via a network to one or more client devices the web server serves web pages as well as other web related content such as Java Flash XML and so forth. The web server may communicate with the message server that provides the functionality of receiving and routing messages between social networking system and client devices. The messages processed by message server can be instant messages queued messages e.g. email text and SMS short message service messages or any other suitable messaging technique. In some embodiments a message sent by a user to another can be viewed by other users of social networking system for example by the connections of the user receiving the message. An example of a type of message that can be viewed by other users of the social networking system besides the recipient of the message is a wall post. In some embodiments a user can send a private message to another user that can only be retrieved by the other user.

Each user of the social networking system is associated with a user profile which is stored in user profile store . A user profile includes declarative information about the user that was explicitly shared by the user and may also include profile information inferred by social networking system . In one embodiment a user profile includes multiple data fields each data field describing one or more attributes of the corresponding user of social networking system . The user profile information stored in user profile store describes the users of social networking system including biographic demographic and other types of descriptive information such as work experience educational history gender hobbies or preferences location and the like. A user profile may also store other information provided by the user for example images or videos. In certain embodiments images of users may be tagged with identification information of users of social networking system displayed in an image. A user profile in user profile store may also maintain references to actions by the corresponding user performed on content items in content store and stored in the edge store .

A user profile may be associated with one or more financial accounts allowing the user profile to include data retrieved from or derived from a financial account. A user may specify one or more privacy settings which are stored in the user profile that limit information from a financial account that social networking system is permitted to access. For example a privacy setting limits social networking system to accessing the transaction history of the financial account and not the current account balance. As another example a privacy setting limits social networking system to a subset of the transaction history of the financial account allowing social networking system to access transactions within a specified time range transactions involving less than a threshold transaction amount transactions associated with specified vendor identifiers transactions associated with vendor identifiers other than specified vendor identifiers or any suitable criteria limiting information from a financial account identified by a user that is accessible by social networking system . In one embodiment information from the financial account is stored in user profile store . In other embodiments it may be stored in financial account store .

Action logger receives communications about user actions on and or off social networking system populating action log with information about user actions. Such actions may include for example adding a connection to another user sending a message to another user uploading an image reading a message from another user viewing content associated with another user attending an event posted by another user among others. In some embodiments action logger receives subject to one or more privacy settings transaction information from a financial account associated with a user and identifies user actions from the transaction information. For example action logger retrieves vendor identifiers from the financial account s transaction history and identifies an object such as a page in social networking system associated with the vendor identifier. This allows action logger to identify a user s purchases of products or services that are associated with a page or another object in content store . In addition a number of actions described in connection with other objects are directed at particular users so these actions are associated with those users as well. These actions are stored in action log .

Action log may be used by social networking system to track user actions on social networking system as well as external websites that communicate information to social networking system . Users may interact with various objects on social networking system including commenting on posts sharing links and checking in to physical locations via a mobile device accessing content items in a sequence or other interactions Information describing these actions is stored in action log . Additional examples of interactions with objects on social networking system included in action log include commenting on a photo album communications between users becoming a fan of a musician adding an event to a calendar joining a group becoming a fan of a brand page creating an event authorizing an application using an application and engaging in a transaction. Additionally action log records a user s interactions with advertisements on social networking system as well as other applications operating on social networking system . In some embodiments data from action log is used to infer interests or preferences of the user augmenting the interests included in the user profile and allowing a more complete understanding of user preferences.

Action log may also store user actions taken on external websites and or determined from a financial account associated with the user. For example an e commerce website that primarily sells sporting equipment at bargain prices may recognize a user of social networking system through social plug ins that enable the e commerce website to identify the user of social networking system . Because users of social networking system are uniquely identifiable e commerce websites such as this sporting equipment retailer may use the information about these users as they visit their websites. Action log records data about these users including webpage viewing histories advertisements that were engaged purchases made and other patterns from shopping and buying. Actions identified by action logger from the transaction history of a financial account associated with the user allow action log to record further information about additional types of user actions.

In some embodiments social networking system further stores data describing one or more connections between different users in the connection store . The data describing one or more connections can include a list of connections a date each connection i.e. friendship was made etc. The connections may be further defined by users allowing users to specify their relationships with other users. For example the connections allow users to generate relationships with other users that parallel the users real life relationships such as friends co workers partners and so forth. In one embodiment the connection specifies a connection type based on the type of relationship. Examples of the type of relationship include family friend colleague etc. Users may select from predefined types of connections or define their own connection types as needed. Some or all of this information may also be stored as edge objects in edge store .

Content store stores content items associated with a user profile such as images videos or audio files. Content items from content store may be displayed when a user profile is viewed or when other content associated with the user profile is viewed. For example displayed content items may show images or video associated with a user profile or show text describing a user s status. Additionally other content items may facilitate user engagement by encouraging a user to expand his connections to other users to invite new users to the system or to increase interaction with the social network system by displaying content related to users objects activities or functionalities of social networking system . Examples of social networking content items include suggested connections or suggestions to perform other actions media provided to or maintained by social networking system e.g. pictures or videos status messages or links posted by users to the social networking system events groups pages e.g. representing an organization or commercial entity and any other content provided by or accessible via the social networking system.

Content store also includes one or more pages associated with entities having user profiles in user profile store . An entity is a non individual user of social networking system such as a business a vendor an organization or a university. A page includes content associated with an entity and instructions for presenting the content to a social networking system user. For example a page identifies content associated with the entity s user profile as well as information describing how to present the content to users viewing the brand page. Vendors may be associated with pages in content store allowing social networking system users to more easily interact with the vendor via social networking system . A vendor identifier is associated with a vendor s page allowing social networking system to identify the vendor and or to retrieve additional information about the vendor from user profile store action log or from any other suitable source using the vendor identifier. In some embodiments the content store may also store one or more targeting criteria associated with stored objects and identifying one or more characteristics of a user to which the object is eligible to be presented.

In one embodiment edge store stores the information describing connections between users and other objects on social networking system in edge objects. Some edges may be defined by users allowing users to specify their relationships with other users. For example users may generate edges with other users that parallel the users real life relationships such as friends co workers partners and so forth. Other edges are generated when users interact with objects in social networking system such as expressing interest in a page on the social networking system sharing a link with other users of the social networking system and commenting on posts made by other users of the social networking system. Edge store stores edge objects that include information about the edge such as affinity scores for objects interests and other users. Affinity scores may be computed by social networking system over time to approximate a user s affinity for an object interest and other users in social networking system based on the actions performed by the user. Multiple interactions between a user and a specific object may be stored in one edge object in edge store in one embodiment. In some embodiments connections between users may be stored in user profile store or user profile store may access edge store to determine connections between users.

Embodiments of the present invention include various steps and operations which have been described above. A variety of these steps and operations may be performed by hardware components or may be embodied in machine executable instructions which may be used to cause a general purpose or special purpose processor programmed with the instructions to perform the steps. Alternatively the steps may be performed by a combination of hardware software and or firmware. As such is an example of a computer system with which embodiments of the present invention may be utilized. According to the present example the computer system includes a bus at least one processor at least one communication port a main memory a removable storage media a read only memory and a mass storage .

Processor s can be any known processor such as but not limited to ARM or x86 type processors such as an Intel Itanium or Itanium 2 processor s AMD Opteron or Athlon MP processor s or Motorola lines of processors. Communication port s can be any of an RS 232 port for use with a modem based dialup connection a 10 100 Ethernet port or a Gigabit port using copper or fiber. Communication port s may be chosen depending on a network such as a Local Area Network LAN Wide Area Network WAN or any network to which the computer system connects. The communication port may also encompass wireless communications components such as an IEEE 802.11 3G 4G or other wireless transceiver.

Main memory can be Random Access Memory RAM or any other dynamic storage device s commonly known in the art. Read only memory can be any static storage device s such as Programmable Read Only Memory PROM chips for storing static information such as instructions for processor .

Mass storage can be used to store information and instructions. For example hard disks such as the Adaptec family of SCSI drives an optical disc an array of disks such as RAID such as the Adaptec family of RAID drives or any other mass storage devices may be used.

Bus communicatively couples processor s with the other memory storage and communication blocks. Bus can be a PCI PCI X or SCSI based system bus depending on the storage devices used.

Removable storage media can be any kind of external hard drives floppy drives IOMEGA Zip Drives Compact Disc Read Only Memory CD ROM Compact Disc Re Writable CD RW and or Digital Video Disk Read Only Memory DVD ROM .

The components described above are meant to exemplify some types of possibilities. In no way should the aforementioned examples limit the scope of the invention as they are only exemplary embodiments.

In conclusion the present invention provides novel systems methods and arrangements for a privacy verification tool. While detailed descriptions of one or more embodiments of the invention have been given above various alternatives modifications and equivalents will be apparent to those skilled in the art without varying from the spirit of the invention. For example while the embodiments described above refer to particular features the scope of this invention also includes embodiments having different combinations of features and embodiments that do not include all of the described features. Accordingly the scope of the present invention is intended to embrace all such alternatives modifications and variations that fall within the scope of the claims together with all equivalents thereof. Therefore the above description should not be taken as limiting the scope of the invention which is defined by the appended claims.

