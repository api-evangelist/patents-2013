---

title: Scalable, schemaless document query model
abstract: Query models for document sets (such as XML documents or records in a relational database) typically involve a schema defining the structure of the documents. However, rigidly defined schemas often raise difficulties with document validation with even inconsequential structural variations. Additionally, queries developed against schema-constrained documents are often sensitive to structural details and variations that are not inconsequential to the query, resulting in inaccurate results and development complications, and that may break upon schema changes. Instead, query models for hierarchically structured documents that enable “twig” queries specifying only the structural details of document nodes that are relevant to the query (e.g., students in a student database having a sibling named “Lee” and a teacher named “Smith,” irrespective of unrelated structural details of the document). Such “twig” query models may enable a more natural query development, and continued accuracy of queries in the event of unrelated schema variations and changes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09230040&OS=09230040&RS=09230040
owner: Microsoft Technology Licensing, LLC
number: 09230040
owner_city: Redmond
owner_country: US
publication_date: 20130314
---
Within the field of computing many scenarios involve the storage of a document set comprising one or more documents such as records in one or more relational tables of a relational database or a set of extensible markup language XML or JavaScript Object Notation JSON documents wherein respective documents comprise a set of fields having field names and one or more field values. In many such scenarios the documents are stored in a structured manner such as according to a relational schema of a database or a logical schema specified by an XML schema. Often the schema is enforced to ensure that the documents of the document set comply with the schema.

In such scenarios a query may be provided by an application or a user as a request to identify the documents of the document set satisfying the criteria of the query. For document sets that are constrained by a defined structure the query may specify a selection of documents according to various details of the structure e.g. for database records in a relational database the query may specify a request for the selection of records from a particular table having fields with values matching a particular query criterion and may identify the fields according to the names identified in the relational schema . For document sets that are not constrained by a defined structure the query may specify more general queries such as generalized text matching against the textual contents of the documents.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Constraining a document set according to a schema may have some advantages but may also present some disadvantages. As a first example schema constrained documents sets are sensitive to inconsistencies among documents including inconsistencies that may be inconsequential and it may be undesirable either to reject documents that do not satisfy the schema or to alter the document to match the schema in ways that distort the contents of the document. As a second example complexities and nuances in the schema may complicate the development of queries which may return inaccurate results and or involve a trial and error process to achieve desired results. As a third example significant difficulties may arise if the schema changes e.g. documents that validated against a first schema may not validate against the second schema resulting in a complicated and possibly inaccurate data migration and queries correctly specified according to the first schema may return inaccurate results after migrating the documents to the second schema.

On the other hand storing schemaless documents in an unconstrained manner may result in an inadequately sophisticated query model. For example the documents of the document set may present some organizational similarities representing structure or relationships such as a hierarchical data set specified in a hierarchical language such as XML or JSON. However the query model may lack the capacity to query the document set in this manner. Instead the user may have to use more primitive querying logic to identify the matching the query such as text scraping and regular expressions that may be sensitive to inconsequential variations in the contents of the documents.

Presented herein are techniques for enabling a querying of documents according to a structure of the documents but not constrained to a defined schema. In accordance with these techniques respective documents may be interpreted according to a hierarchical or tree structure comprising a root node and a set of nodes respectively comprising a node name a node path from the root node and optionally a node value. A document service may receive evaluate and optionally index the documents according to the hierarchical structures. Upon receiving a query specifying one or more query node identifiers the document service may identify the documents having at least one matching node having a node path that matches each query node identifier. This query model involving twig queries does not specify a set of constraints to be rigidly applied in view of a schema but rather involves queries that more generally describe some properties of nodes in matching documents that are to be provided as query results.

For example a document set for a school may comprise a set of documents for respective students where each document specifies the student s name family members interests and the classes and grades comprising the student s academic record. A query may request the identification of documents wherein the student has a sibling named Lee and has previously been enrolled with a teacher having a last name of Smith. Even if the internal organization of the documents representing respective students may be specified in various ways any document having a node value of Lee in a sibling node portion of the document and a node value of Smith in a teacher node portion of the document is presumed to match the query and is returned as a query result. By interpreting the query as a set of descriptors of matching nodes instead of a rigid set of criteria formulated according to a schema the query model enables the development of queries that specify relevant details of the structure of the documents in a more natural and relaxed manner. Additionally the evaluation of such queries in a manner that is less susceptible to inconsequential variations in the schema and even if the schema changes in ways that are unrelated to the semantics of the query. This query evaluation also enables query operators generally based on the structure of the documents such as a cut operator involving the application of a remainder of the query to a subset of nodes descending from a matching node. These and other features of the query model may enable the development of queries specifying relevant structural details of matching documents in the absence of an overly rigid schema in accordance with the techniques presented herein.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Within the field of computing many scenarios involve a document set comprising at least one document where respective documents comprise data that may be structured in some manner. As a first example the documents may comprise the records within the tables of a database. As a second example the records may comprise objects in an object oriented computing environment. As a third example the records may comprise elements structured according to a hierarchical format such as a variant of the Extensible Markup Language XML or JavaScript Object Notation JSON hierarchical formats. In such scenarios a query is often provided by a user or an application as a request to identify documents matching one or more query criteria. The query may be specified according to a query model such as a variant of the Structured Query Language SQL or the XPath query format that is adapted for XML structured documents. A query processor may be applied to parse the query identify the documents satisfying the query criteria and return a set of query results. It may be appreciated that in such scenarios the query model may significantly affect the usability performance unambiguity accuracy and robustness of the application of queries to the document set.

The hierarchically structured data presented in the exemplary scenario of may be stored and evaluated in many ways. As a first example the document set may be organized with particular focus on its hierarchical structure which may facilitate the application of queries later submitted for application to the document set e.g. the values of respective fields of the respective documents may be indexed such that queries specifying a value for a field may be rapidly fulfilled even if the document set is large. In such scenarios the organization of the documents is referred to as a schema and respective documents of the document set are often anticipated to be structured according to the schema in order to enable schema based queries to locate selected documents . To this end the device may index the documents according to the schema e.g. by identifying which documents have a particular value for the respective fields specified by the schema. Alternatively each document of the document set may be organized without respect to its hierarchical structure e.g. each document may simply be regarded as a container of text and a query may be submitted that requests documents containing text that matches the query criteria e.g. a regular expression applied to find specified patterns in a body of text . A less rigorous indexing of the schemaless documents may be utilized to facilitate some basic text based queries e.g. tokenizing the text based on whitespace into keywords and indexing each document according to the keywords contained therein . In view of these details it may be appreciated that the manner in which the documents are regarded may affect the types of queries applicable to the document set and the results of such queries.

The shredding process is typically assisted by the relational database schema e.g. a parser for the relational database may split the document into the attributes specified by the table definitions and create records in the tables according to the parsing. Additionally a hierarchical schema definition such as an XML schema definition may be provided to define the structure of the documents in order to facilitate the parsing process. For example a hierarchical schema definition for the document set in the exemplary scenario of may specify that each record has one firstname field type string one lastname field type string one family field comprising a list of records respectively comprising three strings named relation firstname and lastname etc. The parser may use the hierarchical schema definition to parse the document into a set of expected values and may then use the relational database schema to insert the expected values into the records of the tables of the relational database .

The relational database may also include a relational query specified in a query language e.g. a variant of the Structured Query Language SQL specifying a set of query criteria for identifying a desired set of records and extracting relevant information therefrom. For example the relational query in the exemplary scenario of specifies requests the first name and last name of each student enrolled in a class having a teacher with the last name of Irish. The logic specified by the relational query to achieve this result involves 1 identifying the records of the Teachers table having the last name of Irish 2 identifying the records of the Classes table having a value for the Teacher attribute that is equal to the value of the ID attribute of the identified Teachers records 3 identifying the records of the Enrollment table having a value for the Class attribute that is equal to the value of the ID attribute of the identified Classes records 4 identifying the records of the Students table having a value for the ID attribute that is equal to the value of the Student attribute of the identified Enrollment records and 5 extracting the values from the FIRSTNAME and LASTNAME attributes of the identified records of the Students table . By constraining the query process to a highly specific set of logical operations exactingly specified by the relational query the relational database may enable a very fast execution of the relational query .

While the shredding of the document set according to the relational database illustrated in the exemplary scenario of may present some advantages such as highly organized and regular data and relational queries that may be applied quickly several disadvantages may also arise from this process due to the tight dependence on the relational database schema and the hierarchical schema definition that control the shredding process. As a first example any discrepancies in the parsing process between the documents the hierarchical schema definition and the relational database schema may present problems for the parsing process. For example upon encountering an absence of mandatory fields in the document the presence of additional fields in the document that are not specified by either schema or differences between the names or data types of fields in the document and those defined by either schema may result in an inaccurate parsing e.g. storing numeric data in a string format or storing a list of entries as a single string the parsing may result in a loss of data e.g. values that are not added to the relational database or a validation error indicating to a user an inability to parse some data from the document for insertion into the relational database . Such significant problems may arise even for minor and inconsequential errors and may cascade into errors in other portions of the document set . For example in the exemplary document set in the exemplary scenario of an error may arise while parsing the second document due to the identification of the teacher names by firstname and lastname rather than fname and lname . As a result of this minor variation the Teacher records may be omitted from the parsing and as a result of a missing Teacher field the Classes fields for this student may be omitted due to violating the logical mandatory constraint that every class record specifies the name of the teacher resulting in the creation of a student record for Mark Fisher that includes no classes. Alternatively the parsing process may identify the firstname and lastname fields of the teacher record as unexpected fields that violate the hierarchical schema definition and may refuse to import the document citing a schema validation error.

As a second exemplary disadvantage due to the tight binding between the query model and the relational database schema relational queries have to be designed as a painstaking exactingly specified set of logical operations. As a first result the simple operation represented by the relational query in the exemplary scenario of identify the names of students enrolled in a class with a teacher having the last name Irish are specified as a lengthy complicated relational query rigorously defining the sequence of logical operations sprawling across all of the tables of the relational database to achieve the desired result. Developing such a relational query may be a daunting process and the resulting relational query may be difficult to understand through casual review. Additionally small logical errors in the relational query may result in incorrect results e.g. the relational query in this exemplary scenario fails to correlate the identified records of the Classes table with identified records in the Enrollment table resulting in either an error message or an incorrect presentation of results. As a third example any changes to the relational database schema may break the relational query even if such changes are not perceived as pertinent to the task involved in the relational query . For example changing the data type of the ID attribute of the Classes table from an integer to a string even if the current integers are represented as equivalent string values may result in a data mismatch while comparing these string values to the integer values of the Class attribute in the Enrollment table e.g. the string 001 may be interpreted as different from the integer 001 . Thus even this comparatively trivial change may break the relational query causing it to present incorrect results or error messages. Relational queries therefore appear to be fragile and breakable even through inconsequential changes to apparently unrelated portions of the relational database . Such relational databases are often difficult to administrate since even small changes may have significant and unforeseen consequences.

It may be appreciated that the significant problems arising in the exemplary scenario of arise from the tight adherence of the parsing and querying processes to the precise definitions of the relational database schema . As an alternative the document set may be stored in an unstructured schemaless manner where each document is regarded as simply containing text that may be queried through text parsing tools. For example in order to identify the documents representing students having a last name of Lee or a relative with a last name of Lee a text search may be applied to examine the text of each document for the pattern lastname tee . However a text search process of this type may disregard the semantics represented by the hierarchical structure of each document and may therefore return incorrect results. For example this text search also results in the identification of the document for Mark Fisher who does not have a relative with the last name of Lee but who has a teacher with the last name of Lee. A text search incorrectly identifies the second document as a match for the query due to the inability of the text query to account for the hierarchical structure of the documents . More precise text processing tools may be utilized such as regular expressions but these tools may exhibit similar types of fragility as relational queries . For example changes in the order in which fields are specified may present no semantic difference but may break a regular expression that identifies documents having fields specified in a particular order.

In view of the significant disadvantages resulting from both highly schema bound query processing and schemaless query processing the techniques presented herein provide an alternative query model that recognizes and evaluates the general structure of hierarchically structured documents but that is not unduly constrained by the structure. That is a query may specify structural features of a document that are relevant to the query but may omit unrelated structural details. Such queries may be easier to develop and to understand may tolerate significant variance and changes to other portions of the schema of the documents and may enable a flexible specification of even the relevant structural portions of the query. In particular these queries may be formulated to describe a few properties of a portion of a hierarchically structured document i.e. describing a selection of a twig of the tree structure of the document. Additionally twig queries may be applied to the native content of the documents rather than shredding the documents into isolated abstractions such as tables thereby avoiding parsing techniques that may introduce complexity and discrepancies. Finally in order to expedite the fulfillment of queries the documents of a document set may be indexed according to the hierarchical structure and in a manner that is flexible and queryable through the query model.

The document presented herein has a distinct and definite hierarchical structure that may be targeted a query that does not specify every precise details of the hierarchical structure of desired nodes but rather only specifies the hierarchical structural details that are relevant to the query. For example a query may request a selection of nodes having the node value Green that are subordinate to a parent node having a node name of family. For the intent of the query it may not matter whether the selected nodes are directly subordinate to the parent node are contained in a structure of the parent node such as a list or are several levels deeper in the hierarchical structure of the document . It may not matter whether the node name of the selected nodes is firstname or lastname or even whether such fields are consistent across documents e.g. a first document specifying a firsntame node name and a second document specifying an fname node name for the corresponding nodes or where the parent node is located in the hierarchical structure . By limiting the twig query to only the relevant semantic and structural criteria this query model may enable the query to be accurately applied to a document set with significant variance in hierarchical structure .

The exemplary scenario of also presents a series of exemplary queries and query results to demonstrate the capabilities of this query model. These exemplary queries simply identify a query node path and a query node identifier i.e. the query name of nodes matching the query such that any documents containing one or more matching node with such a query node path may be selected to satisfy the query. Notably the query path often does not specify the precise details of the node path of the matching node but only the relevant details of the node path and or the query node identifier indicating the .

For example a first query specifies a node path indicating requesting the extraction of the node values of matching nodes matching the query node identifier of lastname and that are subordinate to a parent node having a node name of family i.e. the set of last names of the family members of the students . When applied to the document set in the exemplary scenario of the first query may result in a query result comprising the matching node values Cooper Fisher Green and Lee. Notably the first query does not specify where the family nodes reside in the hierarchical structure of the documents or a specific hierarchical relationship of the lastname nodes and the family nodes other than that the former nodes descend from the latter nodes . The flexibility of these parameters is denoted by the character inserted between the nodes indicating that any intervening hierarchical structure is acceptable for the first query .

A second query requests an identification of every document having at least one node having the node value Green that is subordinate to a node having the node name family . When applied to the document set in the exemplary scenario of the second query results in the identification of the third document as a matching document of the second query and more specifically may return the contents of the matching document in response to the second query .

A third query requests the identification of matching containing at least one matching node having the node value Green that descends directly or indirectly from a parent node having the node name family. From the identified documents the third query requests the extraction of node values for the firstname and lastname nodes descending from the root node of the document . Accordingly the query result for the third query when applied to the document set in the exemplary scenario of comprises the first and last name of the student in the third document . Notably the third query specifies the extraction of the matching nodes firstname and lastname that descend directly from the root node since this detail of the hierarchical structure is relevant to the third query e.g. in order to differentiate the undesired firstname and lastname nodes in the document that descend from the family node or elsewhere in the document .

The following queries in the exemplary scenario of illustrate additional features enabled by the flexible query model provided herein. A fourth query first identifies matching documents containing a first matching node matching the query node identifier Cooper i.e. the third document in the exemplary document set of and then requests the identification of a second matching node within such documents having the node name teacher and the extraction of the entire subset of nodes descending from the second matching node specified using the operator to cut the document at the specified node . The query result accordingly presents the subset of nodes descending from the teacher node of the matching document i.e. the names of all of the teachers of the student represented by the matching document . Notably the cut operator does not have a recognized equivalent in relational query languages where the operation might be described as select the entire set of nodes related to a specified node and the nodes recursively related to those nodes. 

A fifth query specifies an alternative selection among query node identifiers such as the identification of all documents including a matching node having the node value David that descend from a node having either the node name brother or having the node sibling and the extraction of the node values for the lastname nodes descending directly from the root nodes of the matching documents . Accordingly when the fifth query is applied to the document set in the exemplary scenario of the query result includes both the last name Fisher from the second document containing a first node having a node name brother and an indirectly descending node having a node value of David and the last name Green from the third document containing a first node siblings and an indirectly descending node having a node value of David . This alternative specification of node details in the twig query model enables a flexible description of matching nodes and promotes the tolerance of such queries to cope with variable hierarchical structures among the documents of the document set .

A sixth query specifies the identification of matching documents having a first node having a query node identifier of teacher and a directly or indirectly descending node having a query node identifier of Irish and from such matching documents the sixth query requests an extraction of the node values of the firstname and lastname nodes descending directly from the root node . The sixth query produces a query result having the first name Amanda and the last name Green. It may be appreciated that the sixth query specifies the same intent as the relational query in the exemplary scenario of both queries request the first and last names of students having a teacher with the name Irish. However the sixth query is considerably easier to read as it describes only the relevant details of the twigs of the matching documents and does not rigorously specify the unrelated details of the hierarchical structure of the matching documents . Moreover the sixth query is capable of returning an accurate query result despite significant variance in unrelated aspects of the hierarchical structure of the documents of the document set in contrast with the fragility of the relational query in the event of even inconsequential changes to apparently unrelated portions of the relational database . In this manner the twig query model presented herein enables the specification and evaluation of queries that are easier to develop and understand and that remain accurate despite variance in unrelated portions within and among the documents of the document set and that are tolerant of changes to the hierarchical structure of the documents that do not affect the semantics of the query.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to apply the techniques presented herein. Such computer readable media may include e.g. computer readable storage media involving a tangible device such as a memory semiconductor e.g. a semiconductor utilizing static random access memory SRAM dynamic random access memory DRAM and or synchronous dynamic random access memory SDRAM technologies a platter of a hard disk drive a flash memory device or a magnetic or optical disc such as a CD R DVD R or floppy disc encoding a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein. Such computer readable media may also include as a class of technologies that are distinct from computer readable storage media various types of communications media such as a signal that may be propagated through various physical phenomena e.g. an electromagnetic signal a sound wave signal or an optical signal and in various wired scenarios e.g. via an Ethernet or fiber optic cable and or wireless scenarios e.g. a wireless local area network WLAN such as WiFi a personal area network PAN such as Bluetooth or a cellular or radio network and which encodes a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein.

An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method of applying queries to the documents of a document set such as the exemplary method of . In another such embodiment the processor executable instructions may be configured to implement a system for applying queries to the documents of a document set such as the exemplary system of . Some embodiments of this computer readable medium may comprise a computer readable storage medium e.g. a hard disk drive an optical disc or a flash memory device that is configured to store processor executable instructions configured in this manner. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary system of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be utilized.

As a first variation of this first aspect the techniques presented herein may be utilized with many types of devices such as servers server farms workstations laptops tablets mobile phones game consoles and network appliances. Such devices may also provide a variety of computing components such as wired or wireless communications devices human input devices such as keyboards mice touchpads touch sensitive displays microphones and gesture based input components automated input devices such as still or motion cameras global positioning service GPS devices and other sensors output devices such as displays and speakers and communication devices such as wired and or wireless network components.

As a second variation of this first aspect the documents of the document set may be specified in many ways e.g. as human readable or human unreadable data and having a hierarchical structure organized according to the sequence of the elements of the document or according to pointers within the document . As one example the document set may comprise a JSON document store configured to store access and index documents structured in a variant of the Extensible Markup Language XML format or in a variant of the JavaScript Object Notation JSON hierarchical data format.

As a third example the queries may be specified in various human readable or human unreadable query languages and may present many types of syntax including many sets of symbols representing various operations. Moreover the query language may include a variable set of operators that apply various operations to the traversal identification selection extraction and formatting of the nodes of the documents . These and other variations may be suitable for implementations of the techniques presented herein.

A second aspect that may vary among embodiments of the techniques presented herein relates to the types of criteria that may be specified in queries for application to a document set .

As a first variation of this second aspect a query may specify various types of criteria in the query node path for selecting matching nodes . As a first such example the query node identifier may identify the node name of a matching node the node value of a node the data type of the node value of a matching node or any combination of such properties e.g. either the node name or the node value . As a third such example the query node path may specify a query node identifier set that presents at least two alternative query node identifiers and matching nodes may be identified that match any of the alternative query node identifiers. For example the fifth query in the exemplary scenario of specifies that nodes matching either the first alternative query node identifier brother or the second alternative query node identifier sibling are to be regarded as matching nodes . Alternatively or additionally an identifier set may be specified as a logical exclusive or i.e. matching one of two or more alternative query node identifiers but not more than one or a logical and i.e. matching all of two or more query node identifiers . For example several queries in the exemplary scenario of specify a selection of matching nodes having both a specific node name and a specific node value e.g. lastname Cooper . As a second such example a query node identifier may specify one or more query node value ranges wherein matching nodes are identified that comprise a node value within the query node value range e.g. a string value having a first character alphabetically falling between the letters A and D . A query may also feature a Boolean logic specifying a logical framework for identifying matching nodes e.g. nodes satisfying either the query node identifier mother or stepmother but not mother in law .

As a second variation of this second aspect the query may specify various properties of the query node path . As a first such example the query node path may specify particular hierarchical relationships for one or more matching nodes such as a matching node that descends directly from the root node of the document . Alternatively the query node path may explicitly or tacitly omit the details of hierarchical relationships concerning a matching node . For example a query node path specified as lastname may indicate through the inclusion and position of the operator the selection of matching nodes that match the lastname query node identifier but that exist anywhere in the hierarchical structure of the document . As a third such example the query node path may specify at least two matching nodes and a hierarchical relationship therebetween. For example a query node path may include a first query identifier of a first matching node having a query node path and a second query node identifier of a second matching node having a second node path that is relative to the first node path e.g. superior to the first matching node subordinate to the first matching node a peer to the first matching node etc. The query may be processed by identifying matching document that have a first matching node matching the first query node identifier and a second matching node that matches the second query node identifier as well as a node path satisfying the relationship with the node path of the first matching node .

As a third variation of this second aspect the query may specify one or more wildcard operators that provide various levels of flexibility in the query criteria. As a first such example an optional operator may specify that a query criterion is optional i.e. that matching nodes may or may not fulfill the specified query criterion . For example the query node identifier sibling may include both matching nodes that match the identifier sibling and matching nodes that match the identifier siblings. As a second such example a Kleene star operator e.g. the operator may specify a selection of all nodes of a particular type e.g. the query node path may indicate all of the nodes of the document .

As a fourth variation of this second aspect the query may identify a query node subset of a document and one or more query criteria to be applied only to the query node subset. While evaluating a document a query processor may select a node subset comprising the nodes of the document that are within the query node subset and may apply a remainder of the query to only the node subset. As a second such example the cut operator presented in the fourth query indicates that for a matching node that matches a query node identifier the tree of nodes is to be cut and limited to the child nodes descending directly or indirectly from the matching node . The cutting of nodes may then be returned further queried etc. As one such example to any of the documents in the exemplary scenario of an operator may specify a cut applied to the classes node and may provide a set of query criteria for evaluating only the nodes that are subordinate to the classes node . The cut may also be specified as an exclusive cut that excludes the matching node or an inclusive cut that includes that matching node in the cut of the document . These and many other query criteria may be included in query models according to the techniques presented herein.

A third aspect that may vary among embodiments of these techniques relates to the effect of a query to be applied to the matching nodes and matching documents .

As a first variation of this third aspect a query may specify that various portions of a matching document are to be returned as a query result. As a first example the query may request to identify the matching documents to return the full contents of matching documents or to return the node names node values and or query node paths if one or more of the matching nodes within each matching document . As a second example the query may request to return other nodes that are related to each matching node such as at least one child node that descends from the matching node e.g. returning a cut of a document from a matching node and optionally including or excluding the matching node .

As a second variation of this third aspect a query may indicate that a set of query results are to be paginated. This variation may be advantageous e.g. if the query result set is large and if the application or user submitting the query is only interested in a subset of the query results. For example the device may partition the query results into two or more query result ranges and may initially return the query results within a first query result range e.g. the first ten matching documents and or matching nodes . The query results within additional query result ranges may be returned upon receiving a request to return a second query result range.

As a third variation of this third aspect a query may indicate that particular operations are to be applied to matching documents and or matching nodes . For example a query may include a script that is to be applied to matching nodes where the script comprises further query criteria to be applied to the matching nodes a modification of the document containing the matching nodes or another document of the document set and or an adjustment of the query results generated from the matching nodes . Accordingly a device may upon identifying a matching node and or matching document to which the query requests the application of a script apply the script to the matching node s and or matching document s . These and other effects may be applied to the matching nodes and or matching documents of an evaluated query in accordance with the techniques presented herein.

A fourth aspect that may vary among embodiments of these techniques involves an indexing of the documents of a document set . In some scenarios indexing may be omitted and a query may be evaluated through an ad hoc examination of each document . However other scenarios may generate and utilize a document index to expedite the evaluation of queries . In particular it is noted that whether or not the documents of the document set conform to a hierarchical schema definition hierarchically structured indexing may still be applicable and advantageous.

As a first variation of this fourth aspect a device may generate an index of the nodes comprising each document of the document set . For example instead of the hierarchical structure that represents semantic relationships among the nodes of the document the document index may comprise a lookup indicating whether and where respective nodes arise within the document e.g. for the second document in the document set of the exemplary scenario of the lastname node name is found in each node of the family collection and in the teacher subnode of each item in the classes collection . As one such example upon receiving a document to be included in the document set the device may index the document in a document index according to for respective nodes of the document the node path the node name and or the node value and the device may evaluate a query by for respective query node identifiers examine the document index for each document to identify the matching nodes in the document that match the query node identifier . Additionally upon receiving an updated document of the document set the device may re index the nodes of the updated document .

As a second variation of this third aspect a device may utilize a reverse index that indicates for respective query node paths which documents of the document set contain a matching node . As one such example upon receiving a document to be included in the document set the device may index the respective nodes e.g. according to node names node values and or node paths and may evaluate a query by for respective query node identifiers examine the document index to identify the matching documents having at least one matching node .

As a third variation of this third aspect a device may endeavor to consolidate the documents of a document set in order to address variations in the hierarchical organization of the documents . For example while generating a document index or a reverse index the device may endeavor to identify two or more matching nodes that match a query node path through different node paths ad may consolidate the matching nodes during the indexing. This consolidation may be determined e.g. by identifying similarities among the different node paths . For example in the document set in the exemplary scenario of the first document presents a family record including a node with a sibling node name while the third document presents a node representing a sibling but organized into a siblings collection. The device may while indexing these documents identify that these node paths are similar and may conclude that the records identify the same type of information for each document . Accordingly the node names and node values of these records may be consolidated in the index and indexed according to a sibling query node path despite having different node paths . This consolidation may facilitate the semantically accurate evaluation of queries despite inconsequential variance in the hierarchical organization of the documents .

As a further variation of this third aspect the consolidation may be directed by various determinations. As a first such example the consolidation of nodes may be performed by identifying a similarity degree of the different node paths of the matching nodes and consolidating the matching nodes in the document index only if the similarity degree of the different node paths exceeds a similarity degree threshold. For example a user of the device may specify and adjust the similarity degree threshold in order to control the aggressiveness of the consolidation in consolidating differently represented nodes . As a second such example the device may receive instructions from a user that may facilitate the consolidation e.g. the user may specify some basic details or hints about the document set such as the fact that each students may have one or more siblings as family members and the consolidation may involve seeking nodes resembling the query node identifier sibling or a synonym such as brother or sister for consolidation. User hinting as to equivalent properties and relationships that may be found among differently organized nodes may therefore facilitate an accurate consolidation of the nodes in the indexing.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB Firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

