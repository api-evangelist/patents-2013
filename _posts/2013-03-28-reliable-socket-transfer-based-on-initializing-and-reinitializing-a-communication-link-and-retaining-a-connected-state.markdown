---

title: Reliable socket transfer based on initializing and re-initializing a communication link and retaining a connected state
abstract: Various embodiments initialize a communication link associated with data transfer to a connected state between participants in the communication link. In some cases, the communication link is paired with a first Input/Output (I/O) completion port effective to enable the data transfer. Some embodiments disassociate the communication link with the first I/O completion port and re-initialize the communication link while retaining the connected state. Alternately or additionally, the communication link is paired with at least a second I/O completion port. In some cases, the second I/O completion port utilizes an I/O model that differs from an I/O model associated with the first I/O completion port. Alternately or additionally, the communication link can be reconfigured to follow a IO model that does not utilize an IO completion port at all.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021157&OS=09021157&RS=09021157
owner: Microsoft Technology Licensing, LLC
number: 09021157
owner_city: Redmond
owner_country: US
publication_date: 20130328
---
Technology today enables computing devices to connect with one another and transfer data back and forth. For example an application on a first computing device can communicate with an application on a second computing device using varying forms of communication links such as a Berkley socket connection. At times these data transfers can be asynchronous in nature which in turn can cause less efficient processing on the computing device. To address this some computing devices employ Input Output IO completion ports that can be directly coupled to one or more communication links and further manage data transfer associated with the communication link s . While an IO completion port can be used to process communications faster and load a central processing unit CPU more effectively the direct coupling between the IO completion port and the communication link s can sometimes further couple the communication link s and IO completion port to a same IO model thus making the communication link s less transferable to other applications.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter.

Various embodiments initialize a communication link associated with data transfer to a connected state between participants associated with the communication link. In some cases the communication link is paired with a first Input Output IO completion port effective to enable the data transfer. At a later point in time some embodiments disassociate the communication link with the first IO completion port and re initialize the communication link while retaining the connected state. Alternately or additionally the communication link is paired with at least a second IO completion port. In some cases the second IO completion port utilizes an IO model that differs from an IO model associated with the first IO completion port. Alternately or additionally the communication link can be reconfigured to follow a IO model that does not utilize an IO completion port at all.

Various embodiments initialize a communication link associated with data transfer to a connected state between participants associated with the communication link. In some cases the communication link is paired with a first Input Output IO completion port effective to enable the data transfer. For example communication links having asynchronous data transfer can utilize an IO completion port as a more efficient way of handling the asynchronous nature of incoming and or outgoing data. At times it may be desirable to reuse the connection link with a different IO completion port and or IO model while still retaining the connection with the associated participants. Some embodiments disassociate the communication link with the first IO completion port and re initialize the communication link to an initial state that retains the connected state with the associated participants. In some cases the re initialized communication link can be transferred for use by a new application and or participant. Alternately or additionally the communication link can be paired with at least a second IO completion port. In some cases the second IO completion port utilizes an IO model that differs from an IO model associated with the first IO completion port. Alternately or additionally after being re initialized the communication link can be reconfigured to utilize a different IO model and not utilize an IO completion port at all.

In the discussion that follows a section entitled Example Operating Environment is provided and describes one environment in which one or more embodiments can be employed. Following this a section entitled Reliable Socket Transfer describes transferring connected communication links in accordance with one or more embodiments. Last a section entitled Example Device describes an example device that can be utilized to implement one or more embodiments

Having provided an overview of various embodiments that are to be described below consider now an example implementation in accordance with one or more embodiments.

Among other things computing device includes processor core s . Processor core s represents functionality that can execute machine level processor instructions such as branch jump add subtract move data and so forth. Alternately or additionally processor core s is configured to execute processor instructions in parallel with the other processor cores associated with computing device . Thus computing device can range from a single processor computing device to a multi core multi processor computing device.

Computing device also includes one or more computer readable storage media . The computer readable storage media can include by way of example and not limitation all forms of volatile and non volatile memory and or storage media that are typically associated with a computing device. Such media can include ROM RAM flash memory hard disk removable media and the like. Among other things computer readable storage media includes one or more application s socket preprocessing module s and one or more input output module s .

Application s represent one or more applications comprising instructions that can be executed by processor core s . Application s can include high level application s with functionality to interact with a user of computing device can include processor core instructions associated with a software thread and or can include instructions associated with low level application s that interact with low level and or rudimentary aspects of computing device such as driver software interrupt service routines and so forth. Alternately or additionally application s can include functionality associated with an operating system. Thus computing device can include a wide range of application s .

Socket preprocessing module s represents functionality associated with network communication protocols and or data transfer. Among other things socket preprocessing module s can expose networking and or communication access to application s such as through the use of Application Programming Interfaces APIs . One such example would include Microsoft s Windows Internet WININET software module. Any suitable type of network communication protocol can be utilized and or exposed such as HyperText Transfer Protocol HTTP File Transfer Protocol FTP and so forth. In some cases socket preprocessing module s exposes these protocols using high level interfaces that abstract handshaking employed by the protocols to connect participants and or transfer data. Alternately or additionally socket preprocessing module s can include functionality to configure a communications link according to one or more IO models such as configuring a communication link as having asynchronous data transfer as being a blocking communication link as being a non blocking communication link as having overlapped I O functionality and so forth. Socket preprocessing module s can also be configured to create return and manage handles associated with communication links such as handles to sockets files etc. Thus among other things socket preprocessing module s includes functionality related to configuring and or managing communication links and associated protocols.

Input Output IO manager module s represents functionality that among other things bridges a connection between functionality requested by and or directed to socket preprocessing module s and interfaces into hardware that can assist in executing IO functionality requested by and or directed to socket processing module s and or computing device in general . Among other things IO manager module s abstracts methods for issuing and or completing IO associated with asynchronous operation. For example if socket preprocessing module s requests to transfer data external to computing device IO manager module s can receive the request for data transfer and interface with associated device drivers that are utilized to transfer the data externally. As another example if a data transfer requests to store data into a file located on an associated hard drive IO manager module s can manage access into and out of modules and or software that facilitate this request. Alternately or additionally IO manager module s can oversee and or manage hardware shared by multiple applications ports etc. For instance in some cases an IO completion port can be associated with multiple applications that share common hardware for data transfer. Among other things IO manager module s can manage the creation of the IO completion port as well as what application s may be associated with the IO completion port.

In one embodiment this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to the user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one embodiment a class of target device is created and experiences are tailored to the generic class of devices. A class of device may be defined by physical features or usage or other common characteristics of the devices. For example as previously described computing device may be configured in a variety of different ways such as for mobile computer and television uses. Each of these configurations has a generally corresponding screen size and thus computing device may be configured as one of these device classes in this example system . For instance the computing device may assume the mobile class of device which includes mobile telephones music players game devices and so on. The computing device may also assume a computer class of device that includes personal computers laptop computers netbooks and so on. The television configuration includes configurations of device that involve display in a casual environment e.g. televisions set top boxes game consoles and so on. Thus the techniques described herein may be supported by these various configurations of the computing device and are not limited to the specific examples described in the following sections.

In some embodiments server s include cloud functionality. Here cloud is illustrated as including a platform for web services . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud and thus may act as a cloud operating system. For example the platform may abstract resources to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the web services that are implemented via the platform . A variety of other examples are also contemplated such as load balancing of servers in a server farm protection against malicious parties e.g. spam viruses and other malware and so on. Thus the cloud is included as a part of the strategy that pertains to software and hardware resources that are made available to the computing device via the Internet or other networks.

Alternately or additionally computing device includes socket preprocessing module s and IO manager module s as described above and below. Here computing device is illustrated as using functionality provided by cloud through connectivity associated with sockets preprocessing module s and or I O manager module s .

Generally any of the functions described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module functionality and logic as used herein generally represent software firmware hardware or a combination thereof. In the case of a software implementation the module functionality or logic represents program code that performs specified tasks when executed on or by a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices. The features of the gesture techniques described below are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

Having described example operating environments in which various embodiments can be utilized consider now a discussion of reliable socket transfer in accordance with one or more embodiments.

Most applications utilize some form of data transfer. In some cases the data transfer remains local to a computing device and or a memory device. In other cases the data transfer expands beyond a computing device to external computing devices and or memory locations. Varying types of communication links can aid in this data transfer whether internal to a computing device or external. As one example a Berkeley socket utilizes a standardized library of function calls implemented by each endpoint involved in a communication link. When a first endpoint desires to communicate with a second endpoint the first endpoint can call into API s provided by the standardized library. Assuming each endpoint implements an interface and or protocol that each endpoint understands the communication link can then be established.

Different applications may desire different configurations of an associated communication link. For example a first application may design around data transfer through a first socket configured to block execution of the application while waiting for data to be returned in response to a request. A second application might design around data transfer through a second socket that sends a request for data but does not block execution of the application while waiting for a response. Instead the second socket may be configured to periodically poll for returning data but do additional processing in between polls. Thus different applications may desire sockets and or communication links configured with different Input Output I O models based upon what is trying to be achieved.

Some computing devices have a capability to run several applications simultaneously. Further some or all of the applications can be configured to establish and or use a communication link to transfer data. While a computing device can be configured to run several applications using communication link s simultaneously the computing device may have less hardware than requesting applications to perform data transfer. In these situations the computing device may have additional IO management and or capabilities to help make the data transfer and or hardware resource management more efficient. For example some computing devices may implement IO manager functionality such as through operating system components one or more applications and or an IO subsystem that works in conjunction with an IO completion port as one method of managing data transfer over shared hardware between multiple applications as further described below.

In addition to facilitating data transfer some communication links can have extra properties. For instance some participants and or endpoints may request authentication of an associated communication link prior to allowing data transfer over the communication link. However the authentication procedures typically add additional protocols and or handshaking that applications using the communication link are either unaware of or a designer of the application does not want to couple into the application in an effort to keep the application more generic. To aid these applications some embodiments add communication link authentication procedures to operating system code and or generic libraries that are indirectly called by the applications. These communication links can then be initialized connected and or authenticated using the operating system code and or generic libraries and subsequently passed to a recipient application for further use.

Various embodiments initialize a communication link associated with data transfer to a connected state between participants in the communication link. In some cases the communication link is paired with a first IO completion port effective to enable the data transfer. Some embodiments disassociate the communication link with the first IO completion port and re initialize the communication link to an initial state that retains the connected state between the participants. In some cases the re initialized communication link can be transferred for use by a new application. For instance consider which illustrates an example environment depicting a socket communication link being paired with an IO completion port.

Included in environment are application socket preprocessing module and IO manager module of . As discussed above application represents any suitable type of application such as an operating system component a user application a library component and so forth. For simplicity s sake the term application here is used to represent a logical grouping of executable code configured to perform certain functionality. In some cases this grouping of executable code can imply a stand alone application that can run independently. Alternately or additionally this grouping of code can imply callable library and or operating system functions. Thus application is meant to imply a broad range of functionality in varying forms of accessibility. Also included an environment are socket layer which illustrates a plurality of the sockets contained within environment and IO completion ports which additionally illustrate a plurality of IO completion ports. In this example application communicates with socket preprocessing module as a way to initialize and or access a communication link. For example in some embodiments application calls APIs associated with socket processing module as described above. Here socket preprocessing module establishes socket contained within socket layer . The grey shading of socket is used to convey that socket is initialized connected to an endpoint and or associated participant and paired with individual IO completion port of IO completion ports . In similar fashion IO completion port contains grey shading to convey its pairing with socket . It is further noted that in this example individual IO completion port which is also included in IO completion ports is not connected and or paired with socket subsequently indicated by the lack of grey shading.

A socket can be tied to an IO completion port in any suitable fashion. For example in some embodiments a socket can be represented by a socket handle. The socket handle among other things can be used as a way to manage the socket and enable programmatic access to the socket. In some cases socket handles have associated functions that can be called to enable data transfer through the associated socket. Alternately or additionally a socket handle can be used as an identifier and or pointer to the associated socket. To tie an IO completion port to a socket some embodiments pass the socket handle to the IO completion port. In turn the IO completion port can maintain a list of socket handles that represent each socket for which the IO completion port is responsible and or the socket handle can maintain a pointer to the IO completion port. Alternately or additionally the socket handle and the IO completion port can be passed together to IO manager module . By tying a socket to an IO completion port the IO completion port assumes some responsibility of monitoring data transfer for the socket and offloading tasks for the socket as appropriate. For instance in some embodiments an IO completion port can receive notification of incoming data and enable retrieval of the data in any suitable manner such as offloading retrieval of the data to a waiting task notifying an associated application of the incoming data.

In some embodiments associating a socket and or socket handle to an IO completion port configures the socket to utilize a particular IO model. For instance in this IO model when a socket handle is associated with a completion port the operating system marks an associated file object of the socket handle in such a manner that any future IO sent using the handle is associated with the completion port. However it is to be appreciated that the socket can be associated with other IO models that do not use IO completion ports. For example some IO models instead use APIs associated with a Berkley socket for event notification. Using an IO completion port can at times be beneficial. For example by having a socket bound to an associated IO completion port data transfer can be made more efficient. For instance using an IO completion port model can allow a caller of the socket to get callbacks a system thread pool when data is available on the socket. However this can also make the socket socket handle more specific and less universal to other applications. For example consider a case similar to that described above where a communication link is routed through a proxy that requests authentication. One way to achieve authentication properly can include having an application have knowledge of the authentication procedure. However as discussed above this can undesirably couple the application to the proxy and or the communication link.

In some embodiments the authentication procedure can be decoupled from the application. As described above and further described below a communication link can be initialized and or connected between participants. This can include performing authentication procedures and or associating the communication link with a first IO completion port that is associated with a first IO model. Upon completing the initialization and or authentication procedures some embodiments can reset and or reinitialize the communication link to an initial state while retaining a connected state between the associated participants. Some embodiments then transfer the reset and or reinitialized communication link to a second application and or second IO completion port. Alternately or additionally the reset and or reinitialized communication link can be reset to a state that enables the communication link to be associated with at least a second I O model.

Consider which illustrates another embodiment of previously described example environment of . As previously discussed a communication link has been established via socket and associated IO completion port . In some cases the initializing and or establishing can include performing any suitable type of authentication procedure associated with the link. Such type of authentication procedures can be managed in any suitable manner. In some embodiments these procedures can be managed via socket processing module . Alternately or additionally the initializing and or establishing can be performed based at least in part on using a first IO model. Here after the communication link has been established a decision has been made to disassociate socket with IO completion port while maintaining the connection between at least some participants. Disassociating socket with IO completion port can be achieved in any suitable manner. In some cases a socket handle associated with socket can be removed from a list managed by IO completion port . Alternately or additionally any settings for the communication link that are associated with the first IO model used by IO completion port can be reset and or initialize to a default state.

To further illustrate consider the above example of an application potentially being coupled to authentication procedures. Instead of coupling the authentication procedures within an application some embodiments configure an application to request an established communication link that has already been through authentication procedures and or processes. Among other things this can decouple the application from including any knowledge related to authenticating the communication link. Here socket preprocessing module communicates to IO manager module a desire to reset and or reinitialize socket while maintaining its connected state. In response to the communication s IO manager module resets and or reinitializes socket to a generalized state such as removing any IO completion port associations resetting flags that drive notifications and so forth. Thus the generalized state may reset any suitable parameters associated with the first IO model. Alternately or additionally re initializing a communication link can dissolve any pairing and or association with an existing IO port such as the association between socket and IO completion port . Here socket is shaded with a grey hash pattern to indicate a connected state while IO completion port is no longer shaded to indicate it is no longer associated with socket . Thus illustrates that socket is connected but no longer associated with IO completion port .

Continuing on illustrates another embodiment of previously described example environment of . In environment includes a second application noted here as application to distinguish from application of . As in previous discussions application represents any suitable type of application such as an operating system component a user driven application a library component and so forth. In this example application requests a connected and authenticated socket from socket preprocessing module . In turn socket preprocessing module transfers and or reassigns socket to application for use. As part of this reassignment socket can sometimes be paired with a new IO completion port. For instance application may be configured to use a second IO model that differs from the first IO model employed to connect and or authenticate socket . Further the second IO model may be associated with a different IO completion port such as IO completion port . Since socket has been reinitialized to a more neutral but connected state application can configure socket according the second IO model. As part of this process socket can be paired with IO completion port both of which are shaded grey to indicate their association. Since socket has already been connected and or initialized application simply uses the existing connection of already authenticated socket . Thus socket was originally initialized utilizing a first IO model and first IO completion port disassociated with the first IO completion port and or first IO model and transferred for use by an application utilizing a second IO model and or paired with a second IO completion port.

To further illustrate consider which illustrates a flow diagram that describes steps in a method in accordance with one or more embodiments. The method can be performed by any suitable hardware software firmware or combination thereof. In at least some embodiments aspects of the method can be implemented by one or more suitably configured software modules executing on one or more computing device such as socket preprocessing module and or IO manager module of

Step initializes a communication link associated with data transfer to a connected state between participants associated with the communication link. Any suitable type of communication link can be utilized such as a socket a file and so forth. In some embodiments the communication link can be associated with and or characterized by a handle. As further discussed above some sockets have an associated socket handle that enables programmatic access to the socket. Applications desiring access to the socket can do so by referencing the associated socket handle. Further initializing the communication link can include any suitable type of functionality such initializing options and or parameters of the communication link that are associated with an IO model associating the communication link with an IO completion port performing authentication procedures setting compression option s encryption option s security descriptor s impersonation option s network interface affinity and so forth. Alternately or additionally initializing the communication link to a connected state can place the communication link into position where it is ready to send or receive data transfer.

Step re initializes the communication link to a general state and retains the connected state between at least some participants associated with the communication link. In some cases options and or parameters associated with the communication link can be reset and or initialized to a benign state examples of which are provided above. For example in some embodiments re initializing a socket communication link disassociates the socket with an IO completion port and or resets parameters associated with configuring the socket to use a particular IO model. Some embodiments only reset options and or parameters that do not affect the communication link s connected state.

Step transfers the communication link in the connected state to at least one other participant for use. For example as described above an application can receive an established and or authenticated communication link. In some embodiments the communication link is then reconfigured to follow a different IO model than that used to establish the communication link. For instance the communication link can be associated with a new IO completion port and or have settings configured to follow a new IO model. Alternately or additionally the communication link can be configured to be associated with the same IO completion port and or IO model which was used to establish its associated connection.

Having considered a discussion of reliable socket transfer consider now a discussion of an example device that can be utilized to implement the embodiments described above.

Device also includes communication interfaces that can be implemented as any one or more of a serial and or parallel interface a wireless interface any type of network interface a modem and as any other type of communication interface. The communication interfaces provide a connection and or communication links between device and a communication network by which other electronic computing and communication devices communicate data with device .

Device includes one or more processors e.g. any of microprocessors controllers and the like which process various computer executable or readable instructions to control the operation of device and to implement the embodiments described above. Alternatively or in addition device can be implemented with any one or combination of hardware firmware or fixed logic circuitry that is implemented in connection with processing and control circuits which are generally identified at . Although not shown device can include a system bus or data transfer system that couples the various components within the device. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures.

Device also includes computer readable media such as one or more memory components examples of which include random access memory RAM non volatile memory e.g. any one or more of a read only memory ROM flash memory EPROM EEPROM etc. and a disk storage device. A disk storage device may be implemented as any type of magnetic or optical storage device such as a hard disk drive a recordable and or rewriteable compact disc CD any type of a digital versatile disc DVD and the like. Device can also include a mass storage media device .

Computer readable media provides data storage mechanisms to store the device data as well as various device applications and any other types of information and or data related to operational aspects of device . For example an operating system can be maintained as a computer application with the computer readable media and executed on processors . The device applications can include a device manager e.g. a control application software application signal processing and control module code that is native to a particular device a hardware abstraction layer for a particular device etc. as well as other applications that can include web browsers image processing applications communication applications such as instant messaging applications word processing applications and a variety of other different applications. The device applications also include any system components or modules to implement embodiments of the techniques described herein. In this example the device applications include socket preprocessing module and IO manager module that are shown as software modules and or computer applications. Socket preprocessing module is representative of software that is used to enable access to data transfer communication mechanisms. Among other things socket preprocessing module can abstract protocols related to initializing and or managing communication links as described above. IO manager module is representative of software that manages IO such as IO requests related to socket preprocessing module and further abstracts and or generalizes methods of managing asynchronous IO. Alternatively or in addition socket preprocessing module and or IO manager module can be implemented as hardware software firmware or any combination thereof.

Device also includes an audio and or video input output system that provides audio data to an audio system and or provides video data to a display system . The audio system and or the display system can include any devices that process display and or otherwise render audio video and image data. Video signals and audio signals can be communicated from device to an audio device and or to a display device via an RF radio frequency link S video link composite video link component video link DVI digital video interface analog audio connection or other similar communication link. In an embodiment the audio system and or the display system are implemented as external components to device . Alternatively the audio system and or the display system are implemented as integrated components of example device .

Various embodiments initialize a communication link associated with data transfer to a connected state between participants in the communication link. In some cases the communication link is paired with a first Input Output IO completion port effective to enable the data transfer. Some embodiments disassociate the communication link with the first IO completion port and re initialize the communication link while retaining the connected state. Alternately or additionally the communication link is paired with at least a second IO completion port. In some cases the second I O completion port utilizes an IO model that differs from an IO model associated with the first IO completion port. Alternately or additionally the communication link can be reconfigured to follow a IO model that does not utilize an IO completion port at all.

Although the embodiments have been described in language specific to structural features and or methodological acts it is to be understood that the embodiments defined in the appended claims are not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claimed embodiments.

