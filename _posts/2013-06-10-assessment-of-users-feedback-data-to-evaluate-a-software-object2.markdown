---

title: Assessment of users feedback data to evaluate a software object
abstract: In one embodiment, feedback data of a software object is received through a sequence of cascaded GUIs. The cascaded GUIs include an interaction portion to receive the feedback data from users at a plurality of feedback levels. Further, user role weightings of the users, account weightings of enterprises associated with the users and a time weighting corresponding to a life-cycle phase of the software object are retrieved. Furthermore, average rating of the software object corresponding to each feedback level is determined as a function of the user role weightings, the account weightings, the time weighting, the feedback data corresponding to a feedback level and a number of users submitted the feedback data. The determined average ratings and rating distribution corresponding to each feedback level are graphically displayed on the interaction portion associated with a next feedback level.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613367&OS=09613367&RS=09613367
owner: SAP SE
number: 09613367
owner_city: Walldorf
owner_country: DE
publication_date: 20130610
---
Embodiments generally relate to computer systems and more particularly to methods and systems to provide a systematic way of assessing users feedback data to evaluate a software object.

Today software developers or software providers strive continually to improve and refine their software products to remain competitive. On the other hand with a significant number of software products available in market it may be difficult for customers to choose a suitable software product. Therefore for the software developers as well as for the customers investing in software it is instrumental to know how users feel about the software product so that future directions in development and investment can be effective and easier.

Conventional methods of assessing feedback data of software products have significant disadvantages. For example it is not clear which aspects of software are evaluated so that often only the most obvious aspect e.g. user interface UI gets rated while the software has many more qualities than the UI. Another fundamental shortcoming is the lack of correlation between the feedback data and level of global usage of the software. Further the software developers could be able to submit a large number of high ratings or feedback data with excessive or untrue praise for their own software product. Hence potential users or customers may find it difficult to determine whether or not reviewer ratings are meaningful significant or even genuine.

Thereby the customers may find it difficult to determine the quality of the software product before viewing or using the software product if the feedback data does not detail exactly which aspect of a software object has been evaluated by whom the evaluation was performed in which life cycle phase of the software object an evaluation took place and so on. Further the users may be required to manually research each potential review comment read web forums and the like corresponding to the software product and use their own judgment. Therefore there is no systematic approach to valuate user feedback data on the software product and evaluate the software product based on the user feedback data.

Embodiments of techniques to assess users feedback data to evaluate a software object are described herein. According to various embodiments the software object can be but not limited to a software product a software fractional unit a software feature a business process a user interface UI page. Also the software object can be a semantic software entity. The software product is a collection of software that can be acquired by customers as a unit to execute a business application e.g. SAP NetWeaver . The software functional unit specifies a set of functionality that explicitly can be brought into operation within a system landscape e.g. SAP Net Weaver Administrator . The software feature is a notable property of a device or software application e.g. Configuration Management . The business process is a sequence of activities that produce a specific service or product for one or more customers e.g. Security Management .

In one embodiment the users feedback data of the software product is captured through a sequence of cascaded GUIs at a plurality of feedback levels. Further the software object is evaluated at each feedback level based on the feedback data corresponding to a feedback level and other parameters associated with the feedback data describing sensitivity of the feedback data. The parameters may include a role of users submitting the feedback data an account type of enterprises associated with the users a life cycle phase of the software object and a number of users who submitted the feedback data. Furthermore the determined average ratings corresponding to each feedback level is displayed graphically on an interaction portion associated with a next feedback level on user s display device. Since the determined average rating of the software object is based on the feedback data and also on the parameters software developers as well as customers can rely on the presented weighted average rating and can easily draw conclusions about aspects of the software object. Further the software developers can learn from the determined average rating while developing future software objects and also the customers can easily choose suitable software objects.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In one embodiment the block diagram includes a computing system having a memory and a processor to execute instructions stored in the memory to evaluate the software object based on the users feedback data and one or more parameters. The parameters include users role accounts of enterprises associated with the users a status or a life cycle phase of the software object and a number of users submitting the feedback data. In one exemplary embodiment each of the parameters is measured through corresponding weightings. Further user role weightings of the users account weightings of enterprises associated with the users and a time weighting corresponding to the life cycle phase of the software object may be retrieved from the memory . The method obtaining the parameters is described in greater detail in .

In one embodiment the software object is evaluated by determining an average rating of the software object corresponding to each feedback level by the processor . The average rating of the software object is determined as a function of the user role weightings the account weightings the time weighting the feedback data corresponding to a feedback level and the number of users who submitted the feedback data. Further the determined average ratings corresponding to each feedback level is displayed graphically on the interaction portion associated with a next feedback level on the user s display device e.g. display devices A to N which is described with examples in . Therefore by determining the average rating of the software object as mentioned can substantially change the way in which the software object is developed in future as it can provide statistically robust and detailed data on what is popular or unpopular about the software object. Similarly it can influence customers in making decisions related to purchasing the software object as the presented average rating will empower the customers to view how other users or even peer customers feel about the software object.

At a first feedback level a first GUI enables the user to input the feedback data of the software object through rating e.g. the software object. For example a user can rate the software object by assigning a number of stars to the software object e.g. 5 stars being excellent and 1 star being poor experience of the software object or selecting a number which is considered to reflect the perceived quality of a software object in a rating scale. An exemplary GUI to input the feedback data of the software object through rating the software object is shown in which is described in greater detail in .

At a second feedback level a second GUI enables the user to input the feedback data of the software object through a plurality of questionnaire associated with the software object e.g. . For example the GUI provides an option for the user to answer questions associated with different parameters of the software object such as but not limited to usability performance availability and functional completeness of the software object. Further the second GM includes a portion to display evaluation results of the software object based on the feedback data associated with the first feedback level. In other words an average rating and or a rating distribution of the software object and associated objects based on ratings provided at the first GUI is displayed e.g. on the GUI . An exemplary GUI to input the feedback data of the software object through the questionnaire and to display the average rating and the rating distribution of the software object and associated objects corresponding to the first feedback level is shown in which is described in greater detail in .

At a third feedback level a third GUI enables the user to input the feedback data of the software object through suggesting development features for the software object e.g. . For example the GUI provides an option for the user to comment or suggest an improvement feature or a new feature for the software object. Further the third GUI includes a portion to display evaluation results of the software object based on the feedback data associated with the second feedback level. In other words a graphical representation of current questionnaire statistics based on answers provided for the questionnaire in the second GUI is displayed e.g. . An exemplary GUI to input the feedback data of the software object through suggesting the development features and to display the average rating and or the rating distribution of the software object corresponding to the second feedback level is shown in which is described in greater detail in .

For example is an exemplary graphical user interface GUI of a software product A for inputting the feedback data at the first feedback level according to an embodiment. The GUI renders an option for a user to input the feedback data of the software object through rating e.g. the software object at the first feedback level. Accordingly the user can select the software object for which the user desires to provide the feedback data. For example a drop down menu enables the user to select the software object e.g. the software object can be but not limited to a software product a functional unit a software feature a business process a user interface UI page . In the example the software feature is selected. Further corresponding software feature i.e. Configuration Management is selected through another drop down menu . Furthermore the user can select a number of stars e.g. corresponding to his her experience in using the software feature e.g. 5 stars being excellent and 1 stars being poor experience .

At step user role weightings of the users account weightings of enterprises associated with the users and a time weighting corresponding to a life cycle phase of the software object are retrieved. In one embodiment the user role weightings depend on roles or type of users submitting the feedback data. For example the type of users can be but not limited to an end user accessing the software object during standard operations a software tester accessing the software object during testing phase of the software object an administrator accessing the software object at a backend and a manager accessing the software object during usability evaluation phase of the software object. Therefore the sensitivity of the feedback data content depends on the type of users e.g. role dependence in one exemplary embodiment the role of the user is retrieved from authorization profiles. However when there is no authorization profile of the user is present the GUI of the software object can provide an option for the users to declare user s role.

In one embodiment the account weightings of enterprises associated with the users depend on a priority type of an account associated with a software object provider. The priority type of the account can be a top priority account a medium priority account and a low priority account and the type of the account depends on annual revenue reception from the enterprise for instance. For example if the user belongs to the enterprise having the top priority account with the software object provider the account weighting of enterprise is higher in comparison with the user belonging to the enterprise having the low priority account with the software object provider.

In one embodiment the time weighting corresponding to the software object defines weighting based on the life cycle phase of the software object. The life cycle phase of the software object can be but not limited to a testing phase a usability evaluation phase a phase after upgrade and a phase during standard operations. For example the feedback data received at the phase during standard operations is given higher weighting than the feedback data received during other phases. Therefore the users providing the feedback data on the software object will be time sensitive. For example the feedback data received when there are modifications to the software object can be given more weighting and also the reception of the feedback data can be turned off when the software object have run long enough to reach equilibrium. Hence weighting factors such as the user role weightings the account weightings of enterprises and the time weighting are retrieved to reflect the realities and requirements of the feedback data.

At step average rating of the software object corresponding to each feedback level is determined as a function of the user role weightings the account weightings the time weighting the feedback data corresponding to a feedback level and a number of users submitted the feedback data in one embodiment the average rating of the software object is determined using Equation 1 .

S Feedback data of a user who belongs to user role j and enterprise k and provided the feedback data in a time period of criticality l.

For instance the value of he average rating of the software object can be 1 S 5 The feedback data of the user can be 1 S 5. Further the user role weighting the account weighting and the time weighting can be 0 W W W 1.

In the example the average rating of the software object corresponding to the first feedback level is determined based on the feedback data received through the GUI and using Equation 1 .

At step the determined average ratings and rating distribution corresponding to each feedback level is displayed graphically on the interaction portion associated with a next feedback level. The rating distribution of the software object projects rating as submitted by the users. For example is an exemplary GUI displaying determined average rating and rating distribution of a software object corresponding to the first feedback level according to an embodiment. The GUI displays an interactive portion to display summary rating of the software feature Configuration Management . Further the average rating of Configuration Management viewed contextually in ids embodiment as software feature business process or UI page as determined in step is displayed graphically using different types of charts such as but not limited to a bar chart a pie chart a column chart a line chart and a scatter chart. In one exemplary embodiment a rating distribution of the software feature Configuration Management is displayed graphically on the interactive portion . The rating distribution projects ratings as provided by number of users of the software object e.g. users provided 5 star rating users provided 4 star rating and so on . Therefore the GUI provides statistically robust and contextually comprehensive data about the software object to the users corresponding to the first feedback level e.g. star rating of the software object of . Similarly the average rating and the rating distribution of the software object corresponding to a second feedback level and a third feedback level is determined and displayed which is described with an example in . Further the GUI provides an option for the users to input the feedback data corresponding to the second feedback level which is described in greater detail in .

At process block the GUI displays an average rating and a rating distribution of the software object and associated objects based on the feedback data received through the first GUI as described in with respect to step of . Further the GUI provides a first link to input further feedback data. For example in a first link is provided to input the second feedback level through answering the questionnaire.

At process block a check is made to determine whether the user desire to provide further feedback data. For example the check is made to determine whether the user has clicked the first link of to provide input to the second feedback level through answering the questionnaire. In one exemplary embodiment when the user does not desire to provide any further feedback data the user can choose to exit the process by selecting cancel of option.

At process block the GUI enables the user to input the feedback data of the software object at the second feedback level through a plurality of questionnaire associated with the software object. For example is an exemplary GUI displaying an option to choose a type of software object to provide feedback data corresponding to the second feedback level according to an embodiment. The GUI provides an option for the user to choose the type or context or granularity of the software object e.g. the software object can be but not limited to a software product a software functional unit a software feature a business process and a UI page for which the user desires to answer the questionnaire. In the example the user chooses to provide answers to the questionnaire for the software object product A by selecting software product e.g. . Accordingly a set of questionnaire associated with the product A is displayed as shown in . The questionnaire displayed in an exemplary GUI of is associated with different parameters such as but not limited to usability performance availability and functional completeness of the product A . Further the user can provide the second level of feedback data by answering the questionnaire e.g. rating by selecting poor moderate good very good and excellent as shown in . Further the GUI provides a link to view the average rating and or the rating distribution of the software object corresponding to the second feedback level which is described in process block .

At process block the GUI displays the average rating and or the rating distribution of the software object based on the feedback data of the second feedback level. The overall average rating of the software object corresponding to the feedback data of the second feedback level is determined using Equation 1 as described in step of . Further the GUI provides a second link to input further feedback data. For example is an exemplary GUI displaying the rating distribution of the software object based on the questionnaire statistics e.g. . Further the GUI displays an option to input feedback data at the third feedback level according to an embodiment. For example the GUI provides the second link to input the feedback data of the software object at the third feedback level through suggesting development features .

At process block a check is made to determine whether the user desire to provide further feedback data. For example the check is made to determine whether the user has clicked the link of to provide input to the third feedback level through suggesting the development features. In one exemplary embodiment when the user does not desire to provide any further feedback data the user can choose to exit the process by selecting cancel of option.

At process block the GUI enables the user to input the feedback data of the software object at the third feedback level through suggesting development features associated with the software object. For example a space to suggest the development feature is provided on the GUI. Therefore a software provider can consolidate the received suggestion and implement in future developments to improve the software products.

Sonic embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components may be implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. A computer readable storage medium may be a non transitory computer readable storage medium. Examples of a non transitory computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open Data Base Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can he practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the embodiments are described herein for illustrative purposes various equivalent modifications are possible within the scope of the embodiments as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

