---

title: LDAP-based multi-tenant in-cloud identity management system
abstract: A multi-tenant identity management (IDM) system enables IDM functions to be performed relative to various different customers' domains within a shared cloud computing environment and without replicating a separate IDM system for each separate domain. The IDM system can provide IDM functionality to service instances located within various different customers' domains while enforcing isolation between those domains. A cloud-wide identity store implemented as a single LDAP directory can contain identity information for multiple customers' domains. This single LDAP directory can store identities for entities for all tenants, in separate partitions or subtrees of the LDAP directory, each such partition or subtree being dedicated to a separate identity domain for a tenant. Components of the cloud computing environment ensure that LDAP entries within a particular subtree are accessible only to service instances that have been deployed to the identity domain that corresponds to that particular subtree.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069979&OS=09069979&RS=09069979
owner: Oracle International Corporation
number: 09069979
owner_city: Redwood Shores
owner_country: US
publication_date: 20130905
---
The present Application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 801 048 filed Mar. 15 2013 titled LDAP BASED MULTI TENANT IN CLOUD IDENTITY MANAGEMENT SYSTEM the entire contents of which are incorporated herein by reference for all purposes. The present Application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 698 463 filed Sep. 7 2012 titled SHARED IDENTITY MANAGEMENT ARCHITECTURE the entire contents of which are incorporated herein by reference for all purposes U.S. Provisional Patent Application No. 61 698 413 filed Sep. 7 2012 titled TENANT AUTOMATION SYSTEM the entire contents of which are incorporated herein by reference for all purposes U.S. Provisional Patent Application No. 61 698 459 filed Sep. 7 2012 titled SERVICE DEPLOYMENT INFRASTRUCTURE U.S. Provisional Patent Application No. 61 785 299 filed Mar. 14 2013 titled CLOUD INFRASTRUCTURE the entire contents of which are incorporated herein by reference for all purposes and The present application claims priority as a continuation in part to U.S. patent application Ser. No. 13 838 813 filed Mar. 15 2013 titled MULTI TENANCY IDENTITY MANAGEMENT SYSTEM the entire contents of which are incorporated herein by reference for all purposes.

The disclosure below relates generally to computer security and more specifically to identity management within a cloud computing environment that is partitioned into various separate identity domains.

Cloud computing involves the use of computing resources e.g. hardware and software that are delivered as a service over a network typically the Internet . Cloud computing entrusts remote services with a user s data software and computation. Cloud computing can be used to offer software as service SaaS or a platform as a service PaaS for example. In a business model using SaaS users can be provided access to application software and databases. The cloud providers can manage the infrastructure and platforms on which the applications execute. SaaS providers generally price applications using a subscription fee. SaaS can allow a business the potential to reduce information technology operational costs by outsourcing hardware and software maintenance and support to the cloud provider. This outsourcing can enable the business to reallocate information technology operations costs away from hardware software spending and personnel expenses towards meeting other information technology goals. Furthermore with applications hosted centrally updates can be released without the need for users to install new software. However because users data are stored on the cloud provider s server some organizations can be concerned about potential unauthorized access to that data.

End users can access cloud based applications through a web browser or a light weight desktop or mobile application. Meanwhile the business software and users data can be stored on servers at a location that is remote from that business and from those users. Cloud computing at least theoretically allows enterprises to deploy their applications more rapidly with improved manageability and less maintenance. Cloud computing at least theoretically enables information technology managers to adjust resources more quickly to meet sometimes fluctuating and unpredictable business demands.

Identity management IDM is the task of controlling information about users of computer system. Such information can include information that authenticates the identities of such users. Such information can include information that describes which data those users are authorized to access. Such information can include information that describes which actions those users are authorized to perform relative to various system resources e.g. files directories applications communication ports memory segments etc. IDM can also include the management of descriptive information about each user and about how and by whom that descriptive information can be accessed and modified.

Potentially a cloud computing environment could include a separate IDM system or separate instance of an IDM system for each separate organization that used the cloud computing environment. However such a scheme could be seen as being duplicative of effort and as being wasteful of computing resources.

Certain embodiments of the invention involve an identity management IDM system that is implemented in a cloud computing environment and that is partitioned into multiple separate identity domains.

In an embodiment of the invention a set of constructs all align together to create an abstraction of or tenant sliced view of a single IDM system. This single IDM system can include multiple separate components or sub systems. The IDM system can be shared among multiple independent and separate tenants or IDM system customers so that the IDM system is more densely utilized. Thus there is no need for a separate IDM system to be instantiated for each separate customer. The single IDM system can be configured such that for each tenant of the IDM system a virtual view of the IDM system that is specific to that tenant can be presented to that tenant s users. A single LDAP directory can store identities for entities for all tenants in separate partitions or subtrees of the LDAP directory each such partition or subtree being dedicated to a separate identity domain for a tenant. Components of the cloud computing environment ensure that LDAP entries within a particular subtree are accessible only to service instances that have been deployed to the identity domain that corresponds to that particular subtree.

Embodiments of the invention can use the concept of virtualization. Separate views of the IDM system can be virtualized within the single IDM system in a manner that is conceptually similar to the manner in which multiple separate virtual machines can be virtualized on a single host computing device. This virtualization can be achieved by configuring the IDM system in a specific manner. The IDM system can involve multiple separate layers including upper layers and lower layers that are conceptually vertically stacked one on top of the other. The upper layers at least can be partitioned. In the IDM system various different services e.g. authentication and or authorization services can be associated with various different tenants of the IDM system. The IDM system can isolate each tenant so that each tenant is capable of interacting only with the IDM system slice or partition that is dedicated to that tenant. Thus the IDM system can enforce isolation between tenants.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However it will be apparent that the invention may be practiced without these specific details. Appendix attached hereto and incorporated by reference herein provides additional details pertaining to embodiments of the invention.

According to an embodiment different customers can establish different identity domains within the IDM system. For example as shown in a customer GE can establish a GE identity domain while a customer 3M can establish a 3M identity domain while a customer Ford can establish a Ford identity domain . Each of these identity domains can have a separate log in web page that is specific to that identity domain. Such a log in web page can be presented to a user when that user attempt to log in to the corresponding identity domain. The log in web page can include a field for an e mail address and a password.

After a user successfully logs into a particular identity domain the IDM system can provide that user with a credential that is associated with the particular identity domain and no other identity domain and that can be presented to authorization units that protect resources within the IDM system. According to an embodiment an authorization unit that protects a resource belonging to a particular identity domain will only permit the user to access that resource if the authorization unit determines that the credential is associated with the particular identity domain. Such protected resources can include customer data. For example in GE identity domain can include GE data while 3M identity domain can include 3M data while a Ford identity domain can include Ford data .

As is discussed above various customers can establish separate identity domains within the IDM system. Typically these customers pay some subscription fee in order to establish such identity domains. However in an embodiment IDM system can also recognize business partners of these customers who are not necessarily customers themselves and who do not necessarily have identity domains within the IDM system. In an embodiment each identity domain can be associated with one or more partners who might or might not also have identity domains in the IDM system. For example as shown in GE identity domain can be associated with an ACME partner and a Ford partner . A partner whether or not a customer of the IDM system can have a partner identifier that uniquely identifies that partner within the IDM system and allows that same partner to be associated with multiple different identity domains. Continuing the previous example 3M identity domain can be associated with Ford partner also associated with GE identity domain and another partner . A partner identifier can be associated with or can be the same as an identity domain identifier if the partner to whom that partner identifier pertains is also a customer i.e. has established an identity domain . Continuing the previous example Ford identity domain potentially having an identifier that is linked to the partner identifier of Ford partner can be associated with an XYZ partner identifier and another partner identifier .

In an embodiment each identity domain of a customer who subscribes to PaaS or SaaS hosted in the cloud computing environment is associated with a unique identity domain identifier. Such an identity domain identifier can be unique within the cloud computing environment. The identity domain identifier can be generated using an algorithm that generates unique identifiers. In an embodiment an identity domain identifier is associated with each item of data and metadata that belong to the identity domain identified by that identity domain identifier. In an embodiment access control policies that are used to protect resources that belong to an identity domain are also associated with the identity domain identifier for that identity domain.

The identity domain identifier can be used in order to make each identity domain a virtual private environment for the customer who established that identity domain. The identity domain identifier can be used directly or indirectly to isolate by identity domain objects that are contained in repositories maintained within the cloud computing environment even if such repositories are shared among multiple identity domains. Such isolation can be achieved for example through striping or partitions established within shared physical storage devices that make up the repositories each stripe or partition can be associated with the identity domain identifier of the identity domain to which the objects contained in that stripe or partition belong. Different isolation mechanisms can be used relative to different types of such repositories. For example if the repository is an LDAP directory then LDAP entries containing data for objects can be prefixed with identity domain identifiers for the identity domains to which those objects belong. In a policy repository policies pertaining to those objects can be prefixed with such identity domain identifiers as well. For another example if the repository contains relational database management system RDBMS schemas then an identity domain identifier can be used as an artifact for virtual private database VPD partitioning.

As is discussed above in connection with identity store can be implemented as an LDAP directory. Entries within the LDAP directory can be specific to identity domains. Attributes useful for enabling Single Sign On SSO functionality between separate service instances within an identity domain can be specified in the LDAP entries. Such attributes can include a user name a logon ID and other identifiers that can be constrained to be unique within identity store .

In an embodiment a user name that is not fully qualified is not required to be unique within the entire cloud computing environment but can be required to be unique within a particular identity domain. Thus the e mail address bill.smith ford.com can exist as a not fully qualified user name in multiple identity domains but in an embodiment cannot exist multiple times within the same identity domain. In identity store is shown as containing multiple fully qualified user identities containing the same e mail address bill.smith ford.com GE.bill.smith ford.com is a fully qualified user identity recognized within GE identity domain while 3M.bill.smith ford.com is a fully qualified user identity recognized within 3M identity domain while FORD.bill.smith ford.com is a fully qualified user identity recognized within Ford identity domain . Thus a fully qualified user identity can take the form of .. In one embodiment users e mail addresses are stored within the uid attributes of LDAP entries in identity store .

In an embodiment an LDAP schema can specify attributes and object classes. Attributes that the LDAP schema can specify can include for example a a globally unique ID GUID for an identity domain b a name of an identity domain c a service instance identifier d a name of a service instance and e a service instance type e.g. JAVA service instance database service instance fusion application instance etc. . Object classes that the LDAP schema can specify can include for example a an object class that can be used to identify system identifiers b an object class that can be used to identity system identifier groups c an object class that can be used to identify a CSR administrator and d an object class that can be used to define a cloud service type e.g. JAVA service database service etc. .

In an embodiment an LDAP schema can specify various different groups of properties for various different types of entities. Entities for which the LDAP schema can specify properties can include for example a an identity domain entry b a user entry c a group entry d a system identifier e an identity domain administrator and f a service instance administrator.

The LDAP schema can specify for an identity domain entry properties including a an identity domain name b a globally unique identity domain identifier and c an identity domain state. The identity domain name can be a text value that represents a name of the identity domain as chosen by a customer who established the identity domain. The identity domain name can be prefixed onto a user s e mail address in order to generate the fully qualified user identifier for that user. The globally unique identity domain identifier can be an automatically generated GUID. This GUID can represent a data stripe for the identity domain within a database. Alternatively this GUID can be used to partition other forms of shared repositories so as to isolate one identity domain s data from every other identity domain s data within that shared repository thereby organizing identity domains data into e.g. separate IDM policy domains separate LDAP subtrees separate file system folders etc. The identity domain state can maintain a state of an identity domain such as for example whether the identity domain is currently within a trial period.

The LDAP schema can specify for a user entry properties including a a common name b a non qualified user name c a directory unique identifier for the user d a GUID for the user and e an identity domain identifier of the identity domain to which the user belongs. The common name can be specified by the customer who established the identity domain and is a standard LDAP attribute. The non qualified user name can be the user name that the user enters into a user name field when logging into an identity domain from a web page specific to that identity domain. For example this user name can be the user s e mail address. The directory unique identifier uniquely identifies the user entry in the directory. For example as is discussed above the directory unique identifier can take the form .. The GUID can be an automatically generated identifier that is placed in all LDAP entries that refer to the user having the user entry s directory unique identifier. As will be seen in the discussion below the directory unique identifier for a user entry can be used as a unique identifier within many different components of a multiple identity domain system including Oracle Access Manager OAM and Oracle Identity Manager OIM .

The LDAP schema can specify for a group entry properties including a a common name b a directory unique identifier for the group c a GUID for the group and d an identity domain identifier of the identity domain to which the user belongs. The common name can be specified by the customer who established the identity domain and is a standard LDAP attribute. The directory unique identifier uniquely identifies the group entry in the directory. The directory unique identifier can take the form .. The GUID can be an automatically generated identifier that is placed in all LDAP entries that refer to the group having the group entry s directory unique identifier.

In an embodiment the LDAP schema can specify system identifiers that represent special types of users. An object class specifically for system users can identify these special types of users. The attributes for these special types of users can be the same as for those discussed above in connection with user entries.

In an embodiment the LDAP schema can specify system accounts for identity domain administrators and service instance administrators. These can be special accounts for administering and managing identity domains and service instances. An identity domain administrator entry can be a member of an identity domain administrator group. The identity domain administrator s identity can take the form .. A service can have one or more instances within an identity domain. Each of these service instances can have a separate service instance administrator.

The LDAP directory can be structured as a tree including multiple subtrees devoted to specific purposes. shows an example of a subtree structure into which an LDAP directory can be organized according to an embodiment of the invention. The tree can include users containers and groups containers. These containers can be out of the box containers in Oracle Internet Directory. Hierarchically beneath these containers in the tree application identity user containers and application identity group containers can be created. These latter containers can be created as a part of the fusion application provisioning process.

A system identifier subtree can contain all of the system identifiers. Such system identifiers can be used to manage systems in the cloud computing environment. System identifiers can be identified by an object class that is dedicated to such system identifiers. This object class makes it easier to identify system user identities and makes it possible to apply different policies to system user identities than those applied to other kinds of user identities. The system user identity s object class can be a subclass of the more general user s object class. In an embodiment the system user identity s object class does not contain any attributes beyond those contained in its parent object class.

The identity domain subtree can include system identifier containers that can contain identities of users that can be used as proxy users for an authentication provider. Such proxy users can in the case of fusion applications have privileges to multi language support attributes.

The identity domain subtree can include users containers that can contain objects that are instances of the user object class. Password policies relative to this subtree can be set to never expire. Oracle Access Manager policies can be applied to user identities in this subtree. Identity domain administrators in the identity domain administrator group for the identity domain have permissions to manage such user identities. Customer support representative in a customer support representative group also have permissions to manage such user identities.

The identity domain subtree can include groups containers for specific enterprise roles. The groups containers can contain objects that are instances of the group object class. Identity domain administrators in the identity domain administrator group for the identity domain have permissions to manage such group identities. Customer support representative in a customer support representative group also have permissions to manage such group identities.

The identity domain subtree can include application identity user containers that contain application identity user aliases. The identity domain subtree can include application identity group containers that contain application identity group aliases.

In an embodiment the LDAP directory tree can include service nodes that define various service types supported in a PaaS environment. Such service types can include for example a JAVA service an Apex service and a web center service.

In an embodiment the LDAP directory s entries can be accessed using Oracle Identity Governanct Framework IGF APIs and or user role U R APIs. These APIs can include multi tenant specific methods. Some methods can be used to access user entries. To access a identity domain unique name an idxuserrole.User.getTenantuniquename method can be invoked. To access a identity domain unique identifier an idxuserrole.User.getTenantuid method can be invoked. Some methods can be used to access group entries. To access a identity domain unique name an idxuserrole.Role.getTenantuniquename method can be invoked. To access a identity domain unique identifier an idxuserrole.Role.getTenantuid method can be invoked. To access a identity domain globally unique identifier an idxuserrole.Role.getTenantguid method can be invoked. In an embodiment applications can use certain constants defined as LDAP attributes such as a user profile identity domain name a user profile identity domain GUID a user profile identity domain unique identifier a role profile identity domain name a role profile identity domain GUID and a role profile identity domain unique identifier.

According to an embodiment of the invention each service type e.g. JAVA service fusion application service etc. within the cloud computing environment is secured by the shared IDM system. Identity store can store user identities that are known within the cloud computing environment. Identity store can encapsulate the group memberships of these users. In an embodiment Oracle Platform Security Services OPSS can provide security functionality for service instances. Such security functionality can include for example authorization credential and key management auditing etc. Each service instance of any type can have its own composite OPSS security store on a per instance basis. The security store can provide isolation to a service instance for all of that instance s security artifacts. Such artifacts can include those used to enforce authorization. Such artifacts can include those used to obtain and consume credentials to connect back end systems. Such artifacts can include those used to obtain and consume keys and certificates to establish secure socket layers SSL connections and to encrypt data. Such artifacts can include those used to manage the auditing of functionality exposed through the service instance. This auditing can be used to answer questions regarding who did what and when relative to a particular service instance.

Within the cloud computing environment and the shared IDM a security store can be persisted in an Oracle Internet Directory OID that is separate and different from the instance of identity store . A single OID can host security stores for multiple service instances in the cloud computing environment. In an embodiment access to the security store can be controlled by a bind identity that mid tier components of service instances can use to connect to the security store. The bind identity can be scoped by directory access control lists ACLs to that the bind identity has visibility only to the security store of the service instance to which that bind identity pertains. The bind identity can be maintained within its corresponding service instance as OPSS bootstrap information that is managed by OPSS.

Identity provisioning can take place within the cloud computing environment. Embodiments of the invention can use Service Provisioning Markup Language SPML . In one embodiment a fusion application instance might pass an identity domain GUID of 1 to the IDM system when making SPML calls. Under these circumstances a shared IDM OID instance that processes the SPML request can derive the correct identity domain GUID and can process the request appropriately. In an alternative embodiment separate identity domains can host separate fusion application instances. Under such circumstances each fusion application instance can pass to the shared IDM OID instance a correct identity domain GUID e.g. the identity domain GUID of the identity domain to which that fusion application instance belongs . Each fusion application instance can receive an appropriate identity domain GUID in a callback payload.

In one embodiment each separate fusion application instance can use the same application identity credential to communicate with the shared IDM system. However in an alternative embodiment each deployed fusion application instance can have its own separate application identity credential that it can use when communicating with the shared IDM system. The shared IDM system can use such a fusion application instance deployment specific application identity credential to derive the identity domain GUID of a fusion application instance that is communicating with the shared IDM system. shows an example of an interaction between a single tenant single identity domain fusion application instance and components of a shared IDM system including Oracle Identity Manager OIM according to an embodiment of the invention.

A fusion application instance can use IGF for read operations and SPML for write operations. In one embodiment if a fusion application instance passes an identity domain GUID of 1 to the shared IDM system then an IGF layer can derive a correct identity domain GUID. According to one embodiment both single identity domain clients and multi identity domain clients are expected by the shared IDM system to pass a correct identity domain GUID. In an alternative embodiment the shared IDM system expects a single identity domain client to pass as a parameter an identity domain GUID value of 1 . Under such circumstances an IGF layer can use configuration settings which can be set up during Oracle Virtual Machine OVM re hydration to obtain an appropriate identity domain GUID e.g. the identity domain GUID of the identity domain to which that fusion application instance belongs .

In one embodiment when an OIM module in a shared IDM system processes an SPML request to create a user identity that OIM module can provide a fusion application instance with two pieces of user identification information a a user login name and b a user GUID. An SPML attribute for the user login name can be called username. In one embodiment the value of the username attribute can be stored in the directory unique identity attribute of a user entry in the LDAP directory. The value can be stored in the format . where can be a value entered by the user in a login screen. This value can also be stored in a uid attribute in the LDAP directory. In an alternative embodiment the username SPML attribute can be returned simply as without any identity domain name prefix. An SPML attribute for the user GUID can be called user ID . The value of the user ID attribute can be the GUID of the user entity in the LDAP directory. This value can be passed to an OIM module as a psoID attribute in subsequent SPML calls from a fusion application instance to identify a user entity to be modified.

Components of the shared IDM system and applications executing within the shared IDM system can obtain access to information about an authenticated user. In one embodiment a user identity can be made available within an authenticated subject principal. The authenticated subject principal name can be set by an Oracle Access Manager OAM asserter for all SSO authentication that is controlled by the OAM. The asserter can set this authenticated subject principal name to be the value in a directory unique identifier attribute of a user entry for the authenticated user in the LDAP directory. As is discussed above this value can be encoded in the format .. In one embodiment non SSO authentication such as that involving web service calls also can follow the foregoing approach.

In an alternative embodiment the user identity can be made available as a tuple of two attributes a uid and an identity domain GUID. The authenticated subject principal name can be set to the uid value. The uid value can be a user login name that is unique within an identity domain. The identity domain GUID value can be made available in an identifier context that is associated with the authenticated subject. The OPSS infrastructure can ensure that both uid and the identity domain GUID in the identifier context are made available to containers via identity propagation. Single identity domain clients can use the authenticated subject principal to get access to the authenticated user identity. These clients can obtain the uid value without any identity domain related prefixing. Thus in an embodiment single identity domain clients do not need to parse or reconstruct the uid because the uid represents the unique value within the identity domain. In one embodiment multi identity domain clients can use both the uid in the authenticated subject principal and the identity domain GUID in the identifier context to identify an authenticated user.

In one embodiment of the invention an enterprise identifier can be added to each AppleCore table. Seed data can be delivered as a part of an installation with an enterprise identifier of 1 . When a new identity domain for a customer is provisioned in the IDM system all of the rows associated with an enterprise identifier of 1 can be copied to rows associated with an enterprise identity that is specific to that customer. AppleCore can make use of a mapping table that contains mappings between user identifiers and enterprise identifiers customers. Such mappings alternatively can be represented within an LDAP directory. When a user logs in such mapping information can be used to establish the enterprise identifier for an AppleCore session. Each database connection used by applications can obtain the enterprise identifier context using FND GLOBAL. A virtual private database VPD policy can be applied to each AppleCore table. Each such policy can contain a where clause that effectively restricts access to entities having an enterprise identifier that is equal to FND GLOBAL.enterprise ID. Rows inserted into each such table can include enterprise identifiers that are set to FND GLOBAL.enterprise ID.

In one embodiment of the invention the enterprise identifier of an underlying AppleCore session can remain as the existing end user identifier when an application identifier context switch is executed. The VPD policies that are associated with a user s identity domain consequently can remain in scope. As a result while the elevated data privileges and functional privileges can reflect those of the application identifier the data privileges in scope can apply within the scope of the user s enterprise or identity domain VPD stripe.

According to an embodiment of the invention multi tenancy i.e. multiple identity domains can be enabled in Oracle Access Manager OAM . To enable multiple identity domains in OAM the OAM login process can be extended to accept an identity domain name as one of the attributes used to log in.

According to an embodiment of the invention multi tenancy i.e. multiple identity domains can be enabled in Oracle Identity Manager OIM . To enable multiple identity domains in OIM identity domain related attributes contained within provisioning interfaces such as SPML requests and callbacks can be supported. Rules can be specified for constructing the directory unique identity attribute of a user entry in the LDAP directory so that this attribute has a unique value in that LDAP directory. In one embodiment an e mail address can be configured to be the unique attribute for a user in OIM. In an alternative embodiment the directory unique identity attribute of a user entry in the LDAP directory can be used as the unique attribute for a user in OIM. In OIM system properties such as OIM.EmailUniqueCheck and MTEntitySeparator can be configured to reflect this user of the directory unique identity attribute of the user entry. As a part of configuring a user role provisioning subsystem identity domain attributes such as the identity domain GUID and the identity domain name can be stored in a database for the OIM. These attributes can be configured to be user defined fields in the shared IDM system. OIM can provision the user identities contained in the LDAP directory. In a multiple identity domain environment the relative distinguished name RDN attribute of each user entry can be the directory unique identity attribute for that user entry. The RDN construction rules used by OIM can be altered to cause the RDN attribute of each user entry to assume the value of the directory unique identity attribute. In an embodiment each entry in the LDAP directory can be reconciled with the OIM database. Inasmuch as the login attribute can be the directory unique identity attribute for the user entry a corresponding mapping can be reflected in an LDAPSync configuration in a multiple identity domain environment. Multi tenancy enablement in OIM can involve configuration of LDAP container rules. Such LDAP container rules for existing identity domains can be configured at least in part by configuring a fusion middleware metadata services repository file dc LDAPContainerRules.xml. For example given two identity domains having GUID values of 49431843829924000 and 49431843829925000 the LDAP container rules can be configured as shown in TABLE 1 

In an embodiment of the invention the process of provisioning a new identity domain within the shared IDM system can involve a the creation of an identity domain subtree for the identity domain in the LDAP directory and b the creation of other equivalent artifacts in OAM and OIM components. OPSS policies can be affected by such provisioning. OPSS policies can reflect an application role to enterprise role association. A customer s enterprise roles that originate externally to the shared IDM system can be cloned in the LDAP directory e.g. OID of the shared IDM system. As part of this cloning associated application role mappings can be established by performing the following operations 1 find the original system jazn data.xml file for each of the applications 2 modify the enterprise roles in the extracted system jazn data.xml file to have the new identity domain s identity domain name prefix to reflect the new identity domain specific roles and 3 treat the modified file as a new system jazn data.xml file and perform a migrateSecurityStore operation again with the destination of the operation set to be the Oracle Identity Directory OID .

In an embodiment of the invention users associated with a particular identity domain among potentially multiple separate identity domains can use services that have been deployed to that particular identity domain but not services that have been deployed to any other identity domain. In such an embodiment the LDAP directory e.g. OID can function as an identity store for all of the identities in all of the multiple identity domains created within the cloud computing environment. There is no need to create separate LDAP directories in separate identity domains to serve as isolated identity stores for those identity domains a single LDAP directory can serve all identity domains. In the LDAP directory separate directory subtrees can be devoted to separate identity stores such that for example all identities for a first identity domain can be stored within a first directory subtree and all identities for a second identity domain can be stored within a second directory subtree. Both such subtree directories can have a common root.

Access to each subtree directory within the LDAP can be restricted to certain cloud computing system components. Some such components such as cloud administrative components can access all of the subtree directories while other such components can access only certain specified subtree directories. For example some components such as services that have been deployed within a particular identity domain can be restricted to access only the subtree directory that is dedicated to that particular identity domain. In an embodiment of the invention this isolation between identity domains and their respective subtree directories can be enforced by mechanisms already available within LDAP directory systems. At the time that a service is deployed to a particular identity domain the service deployment component of the cloud computing environment can generate a security credential specifically for that service. The security credential can be generated such that the credential when inspected by the LDAP directory system will cause the LDAP directory system to grant the service access only to the subtree directory that is associated with the particular identity domain into which the service has been deployed.

In an embodiment of the invention the kinds of entities for which identities can be stored in the LDAP directory can be categorized into different types. One such type of entity is the user type. Identities of users who are associated with a particular identity domain can be stored in the LDAP directory subtree that is devoted to that particular identity domain. Another type of entity is the service instance type. Identities of service instances so called because separate instances of the same service such as a database service can be deployed to separate identity domains that have been deployed to a particular identity domain can be stored in the LDAP directory subtree that is devoted to that particular identity domain. In an embodiment of the invention only service instance entities and not user entities have access to the LDAP server of the cloud computing environment. In such an embodiment user entities are not exposed to the LDAP server and are prevented from directly interacting with the LDAP server. In such an embodiment user entities have no LDAP access privileges cannot directly access any information that is stored in the LDAP directory. In such an embodiment only service instance entities have LDAP access privileges.

In an embodiment of the invention entities that are of the service instance type when provisioned to a particular identity domain by the provisioning mechanisms of the cloud computing environment can be provisioned with bind credentials that are associated specifically with that particular identity domain and no other. Each bind credential can specify some limited scope of access and different bind credentials can specify different scopes of access. These bind credentials can be generated and provided to the service instance type entities in response to and at the time of the deployment of those entities in the cloud computing environment. The bind credentials are used by components internal to the cloud computing environment and are not revealed to external entities. In an embodiment no human user ever receives a bind credential.

Entities existing in a network can have identities that are recognized by the LDAP server. Such entities can include service instances. In an embodiment although users are prevented from directly accessing information in the LDAP directory in such an embodiment the service instances can access that information on behalf of those users. The information that the service instances access from the LDAP directory can be about the users themselves. In an embodiment only entities that are within the cloud computing environment s network have access to the cloud computing environment s LDAP system components external to the network have no such access. In an embodiment the LDAP server is configured to deny access to all entities that do not have a bind credential of the kind described above. Entities external to the network cannot obtain such bind credentials and therefore cannot obtain access to the LDAP directory. In an embodiment this configuration is accomplished through access control policies to which the LDAP server adheres. Such access control policies are in one embodiment also stored in the LDAP directory.

As will be discussed further below user names and passwords can sometimes be imported from the proprietary single domain enterprise of a client or tenant of the cloud computing environment for continued use in the client s identity domain created for that client in the cloud computing environment. The fact that these user names and passwords still exist in the client s own proprietary system can be viewed as something of a potential security vulnerability. However even if the user names and passwords are somehow compromised within the client s proprietary single domain enterprise the fact that a potential system invader lacks a bind credential because such credentials are as discussed above not supplied directly to users but only to services that act on the behalf of those users will protect the contents of the LDAP directory from such a potential invader. In an embodiment service identifiers are separate from user identifiers in the LDAP directory and the discovery of a user identifier will not reveal any service identifier.

In an embodiment of the invention entities also can be classified based on whether those entities are a dedicated to a specific identity domain or b infrastructure components that are not dedicated to any specific identity domain. Infrastructure components can include a system provisioning component that is responsible for provisioning service instances to specific identity domains. Infrastructure components also can include an access management component which can provide single sign on SSO functionality for user entities relative to service instance entities. Infrastructure components can include identity management IDM components that manage identities that are stored in the LDAP directory. These infrastructure components can interact directly with the LDAP system for the purpose of authenticating and authorizing entities that interact with those infrastructure components.

As is discussed above in an embodiment entities that are dedicated to a particular identity domain are limited to accessing identities that are associated with that particular identity domain and no other. In an embodiment of the invention this access limitation is achieved through the enforcement of access control policies that also can be contained within the LDAP directory. LDAP servers typically permit or deny access to information stored in an LDAP directory based on access control policies. Embodiments of the invention make use of this fact in order to cause the cloud computing environment s LDAP server to permit or deny access to certain identity domain associated LDAP directory subtrees based on identity domain specific access control policies. Such identity domain specific access control policies were not previously known or used in an LDAP system.

In an embodiment of the invention each entity having an identity stored within the LDAP directory has a globally across the entire LDAP directory and all of its subtrees unique identity stored in the LDAP directory. This globally unique identity can be generated through the use of a canonically formatted prefix for example that is affixed to an identity that otherwise might not be globally unique even if unique within a particular identity domain. In an embodiment before users can interact with any services that are provided within the cloud based environment those users are required to log in to the environment. The log in procedure involves an authentication process. The log in name or identity that a user supplies to the authenticator might not be globally unique throughout the LDAP directory even if it is unique within a particular identity domain. Therefore in an embodiment at the time that the user logs in to the environment the authenticator requests in addition to the user s log in name the name of the identity domain to which the user desires access. In an alternative embodiment the authenticator does not request the name of the identity domain from the user himself. Instead each separate identity domain can be associated with a separate log in web page that is associated with a separate URL. The name of the identity domain can be contained within the code of the web page that a user needs to access to log into that identity domain. Thus when the user directs his browser to access a particular URL for that domain specific web page the authenticator can determine the identity domain to which the user seeks access from the code of the web page itself.

In an embodiment of the invention regardless of whether the user expressly supplies the name of the identity domain an identifier of that identity domain is affixed to the user supplied log in name in order to generate the globally unique identity for that user. This globally unique identifier can be called a multi tenant unique identifier. In an embodiment a particular user is always associated with the same multi tenant unique identifier once his user account has been created and that same multi tenant unique identifier is used by the cloud environment s authentication system to authenticate the user every time that the user seeks access to a service within the environment. Because the multi tenant unique identifier specifies the identity domain to which a user belongs the LDAP server is able to determine which of the LDAP directory s subtrees are applicable to the user. The multi tenant unique identifier is propagated between systems in the cloud environment so the user cannot be confused with another user having the same name but not the same identity domain as another user. The fact that the multi tenant unique identifier is being used by the cloud environment can be completely transparent to end users who can supply their domain unqualified log in names to the authentication subsystem. In an embodiment of the invention an entity s multi tenant unique identifier is generated for that entity in response to and at the time that a new record for that entity is created and added to the LDAP directory. The multi tenant unique identifier can be propagated between subsystems of the cloud computing environment within message payloads. It is therefore unnecessary to rely upon the name of the LDAP directory subtree in which an entity s identity is located in order to determine the multi tenant unique identifier for that entity.

In an embodiment of the invention the multi tenant unique identifier is one of several separate fields in the LDAP directory entry for the entity. The LDAP directory schema can be extended to include the multi tenant unique identifier as an attribute. The multi tenant unique identifier is separate in the LDAP directory entry from the user s log in name so that the user s log in name which might have been imported directly from a single domain single customer system can continue to be used without disruption or visible modification after the user s identity has been migrated from the single domain system to the multi domain cloud computing environment. Thus in an embodiment the same log in names that had been used within a particular cloud computing environment client s or tenant s separate proprietary usually non cloud based enterprise can continue to be used within an identity domain created in the cloud computing environment and dedicated to that particular client. Indeed during a migration process these log in names can be directly uploaded from the client s proprietary enterprise into the cloud computing environment at which time multi tenant unique identifiers can be generated automatically for those log in names and stored within LDAP directory entries for the client s users.

Within typical LDAP directories a distinguished name might be viewed as being a sort of globally unique identity. However within typical LDAP directories the distinguished name is typically a concatenation of multiple separate LDAP attribute values rather than the value of a single explicit LDAP attribute that is dedicated for the purpose of being a globally unique identity. If a client tenant of the cloud computing system needs to construct a globally unique identifier on his own for some reason the client can be provided with the canonical rules that the system itself follows in constructing that globally unique identifier. For example such rules can involve pre pending a name of the client s identity domain to the user s log in name delimited by a period. By following such rules the multi tenant unique identifier can be programmatically reconstructed with relative ease. The same qualities are not necessarily possessed by LDAP distinguished names.

It is possible that some applications or services executing within the cloud computing environment might not be configured to handle user identities that are prefixed with identity domain names. Under such circumstances prior to the passing of the multi tenant unique identifier to such an application or service the identity domain name prefix can be stripped easily from the multi tenant unique identifier so that the application or service receives only the user s unqualified log in name. The fact that the multi tenant unique identifier is constructed according to a well defined canonical format makes this potentially needed adjustment relatively simple to perform in an automated manner.

Some other applications or services executing within the cloud computing environment might be capable of recognizing identity domain names and behaving in variant ways depending on those identity domain names. Under such circumstances the identity domain name can be parsed and extracted from the multi tenant unique identifier for use by the application or service. The application or service can then determine which of the several identity domains it is to work with. Again the fact that the multi tenant unique identifier is constructed according to a well defined canonical format makes this potentially beneficial extraction relatively simple to perform in an automated manner.

Cloud infrastructure components are among the services that can make use of identity domain names. These components can be multi tenant or multi identity domain capable. These components can receive requests pertaining to different users. In order to determine the identity domains to which the requests pertain these components can simply and automatically parse the users multi tenant unique identifiers based on the canonical format to which those identifiers universally conform. Multi tenant capable cloud infrastructure components can use data repositories that are striped per identity domain. Under such circumstances these components can use the identity domain name parsed from the multi tenant unique identifier as a handle to the stripe that is dedicated to the appropriate identity domain. The handle can be used to access the stripe.

In an embodiment of the invention a provisioning service executing within the cloud computing environment performs all of the deployment of all service instances within the environment s various identity domains. The provisioning service has an application programming interface API for creating a service instance for a specified client or tenant of the cloud computing environment. The provisioning service can create or request from some other component bind credentials with which to configure the service instance that is to be deployed. In an embodiment the provisioning service uses the API to request from another component a bind credential for a specified service instance and a specified identity domain. Each bind credential can include a name and a password. The name can be automatically generated based on a standard convention and can include both a name of the specified service instance and a name of the specified identity domain. The password can be randomly generated.

Concurrent with the generation of the bind credential a new corresponding access policy can be automatically generated and added to the LDAP directory. The access policy specifies that the service instance having the name specified in the bind credential is only permitted to access the LDAP directory subtree that corresponds to the identity domain to which the service instance is being deployed. In an embodiment the access policy further specifies that the service instance having that name is not permitted to modify identities in the LDAP directory in an embodiment only the identity management IDM subsystem of the cloud computing environment is permitted to modify such identities. The IDM subsystem itself is a service with which users of the cloud computing environment can interact. In an embodiment the access policy further specifies that the service instance having the name specified in the bind credential is permitted only to read certain specified attributes of LDAP directory entries. The foregoing operations can be performed via the API discussed above. In an embodiment of the invention no entities or components are given the ability to modify existing bind credentials.

As shown in cloud computing environment contains an LDAP server and an LDAP directory . Significantly LDAP directory is a single unified LDAP directory that contains LDAP entries for multiple separate identity domains a separate identity domain for each of clients tenants A N. For each such identity domain LDAP directory which has a tree structure contains a corresponding subtree dedicated specifically to that identity domain. For example subtree A may be dedicated to the identity domain for client tenant A while subtree B may be dedicated to the identity domain for client tenant B and so on while subtree N may be dedicated to the identity domain for client tenant N.

Each of subtrees A N can contain LDAP entries for user identities service instance identities and access policies that pertain only to the identity domain to which that subtree corresponds. For example subtree A contains user identities A service instance identities A and access policies A while subtree B contains user identities B service instance identities B and access policies B and so on while subtree N contains user identities N service instance identities N and access policies N.

In block a request for the web page corresponding to the unique URL is received. In block the web page corresponding to the unique URL is sent in response to the request. In block a domain unqualified user name and a password are received via a user name field and a password field of the web page. In block a multi tenant unique identifier is constructed by pre pending the name of the identity domain specified in the web page to the domain unqualified user name. In block the multi tenant unique identifier is authenticated against security information stored in the LDAP directory based on the supplied password.

In block a new access policy which specifies that the service instance having the domain qualified name indicated in the bind credential can only access information pertaining to the specified identity domain that is LDAP entries contained in the subtree of the LDAP directory that corresponds to the identity domain to which the service instance is being deployed is created. In block the access policy is stored in the subtree of the LDAP directory that corresponds to the specified identity domain. In block the service instance is deployed in the specified identity domain. In block the bind credential is supplied to the service instance.

Client computing devices may be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . Alternatively client computing devices and may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating over a network e.g. network described below . Although exemplary system environment is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

System environment may include a network . Network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

System environment also includes one or more server computers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM and the like.

System environment may also include one or more databases . Databases may reside in a variety of locations. By way of example one or more of databases may reside on a non transitory storage medium local to and or resident in server . Alternatively databases may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

Computer system may additionally include a computer readable storage media reader a communications subsystem e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

Computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. Communications system may permit data to be exchanged with network and or any other computer described above with respect to system environment .

Computer system may also comprise software elements shown as being currently located within working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . In an exemplary embodiment working memory may include executable code and associated data structures used for a multi tenant cloud based IDM system as described above. It should be appreciated that alternative embodiments of computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile non transitory removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by a computer.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. Embodiments of the present invention are not restricted to operation within certain specific data processing environments but are free to operate within a plurality of data processing environments. Additionally although embodiments of the present invention have been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.

Further while embodiments of the present invention have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. Embodiments of the present invention may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope.

