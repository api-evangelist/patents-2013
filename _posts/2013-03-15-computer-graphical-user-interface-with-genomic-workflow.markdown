---

title: Computer graphical user interface with genomic workflow
abstract: Methods and computer apparatuses are disclosed for processing genomic data in at least partially automated workflows of modules. A method comprises: specifying a source from which nucleic acid sequence(s) are to be obtained; selecting module(s) for processing data, including at least one module for processing the one or more nucleic acid sequences; presenting, in a graphical user interface, graphical components representing the source and the module(s) as nodes within a workspace; receiving, via the graphical user interface, inputs arranging the source and the module(s) as a workflow comprising a series of nodes, the series indicating, for each particular module, that output from one of the source or another particular module is to be input into the particular module; generating an output for the workflow based upon the nucleic acid sequence(s) by processing each module in an order indicated by the series.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501202&OS=09501202&RS=09501202
owner: Palantir Technologies, Inc.
number: 09501202
owner_city: Palo Alto
owner_country: US
publication_date: 20130315
---
The present invention relates to data processing techniques for genomic data such as data describing nucleic acid sequences.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

A wide variety of genomic data exists including without limitation data structures such as DNA sequences and protein sequences annotations to those structures and publications. Genomic data may be found in a wide variety of sources. For example sequence data is one type of genomic data. Common sources of sequence data include web based databases such as GenBank provided by the United States National Institute of Health the European Nucleotide Archive ENA and the Protein Data Bank operated by the Research Collaboratory for Structural Bioinformatics. These sources allow users to access sequence data in a number of formats such as flat text files or FASTA formatted files. Generally the sequence data comprises a header with a sequence identifier and other metadata and a body comprising a sequence. The sequence data may be accessed in a variety of manners including in pages on a website in files downloadable via HTTP and or FTP protocols or using a REST based application programming interface.

Another type of genomic data is annotations. Annotations may include for example research findings that are related to specific sites of a sequence such as an observation that a site is a binding site for a certain protein or a variation of a certain disease. The UC Santa Cruz UCSC Genome Browser is a popular web based interface with which to access various sources of annotation data. Each sequence identifier may be associated with one or more annotation records and each record may be associated with one or more specific sites in a sequence.

There are also a wide variety of tools for processing genomic data. For example one common category of tools aligns sequences together and compares those sequences. Some such tools are described in Computer Graphical User Interface Supporting Aligning Genomic Sequences U.S. patent application Ser. No. 13 835 688 filed Mar. 15 2013 the contents of which are hereby incorporated by reference for all purposes as if set forth in their entirety. Another example tool is BLAST a web based tool for identifying similarities between an unknown protein and known proteins. A number of example algorithms for processing genomic data are described in Biological Sequence Analysis Probabilistic Models of Proteins and Nucleic Acids by Richard Durbin Cambridge University Press 1998 the entire contents of which are hereby incorporated by reference for all purposes as if set forth in their entirety herein. These and other tools generally identify genomic data to process based on input such as input specifying sequences or input based upon which sequences may be mined or derived. The tools then perform one or more various processing algorithms with respect to the genomic data such as statistical analyses comparisons search operations filtering operations manipulations and so forth. The tools then generate a report of any result s of the processing.

The analysis of genomic data has become an increasingly important task. Unfortunately such analyses are often complex relying on large quantities of disparate data sources and disconnected tools. For example a researcher may be interested in determining how variations in a certain genomic sequence affect a certain disease. The researcher may begin the analysis by retrieving a sequence from a databank. The researcher may then code the sequence as a protein using a first tool compute variations of the protein using a second tool and run a large scale similarity search across yet a different databank to find species that have similar proteins. The researcher may then access yet other tools and databanks to search for sequences in these species that code for the protein and finally execute a motif finding algorithm to identify other proteins that bind to the protein. As a consequence of the complexity of this task the researcher s work may be disorganized and difficult to reproduce or extend to other sequences.

While this application will often refer to genomic data many of the techniques described herein are in fact applicable to any type of data. Other uses of the techniques described herein may include without limitation data analyses in the field of natural language processing social sciences financial data historical and comparative linguistics and marketing research.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

Methods and computer apparatuses are disclosed for processing genomic data in at least partially automated workflows of modules. According to an embodiment a method comprises receiving first input specifying a source from which one or more nucleic acid sequences are to be obtained. The method further comprises receiving one or more second inputs selecting one or more modules for processing data including at least one module for processing the one or more nucleic acid sequences. The method further comprises presenting in a graphical user interface graphical components representing the source and the one or more modules as nodes within a workspace. The method further comprises receiving via the graphical user interface one or more third inputs arranging the source and the one or more modules as a workflow comprising a series of nodes. The series indicates for each particular module of the selected modules that output from one of the source or another particular module is to be input into the particular module. The method further comprises generating an output for the workflow based upon the one or more nucleic acid sequences by processing each module of the one or more modules in an order indicated by the series. The method is performed by one or more computing devices.

In an embodiment each module of the one or more modules generates output that conforms to an ontology defining data structures that represent genomic data. The data structures include at least sequences protein objects alignment objects annotations and publications.

In an embodiment the method further comprises generating a data node from the output. The data node comprises items of genomic data. The data node is linked to a last module in the series. The method further comprises receiving via the graphical user interface fourth input that adds or removes an item of genomic data from the data node. The method further comprises receiving via the graphical user interface fifth input selecting a particular module to process the data node. The method further comprises adding the particular module to the end of the series. The method further comprises generating second output for the workflow based upon the one or more nucleic acid sequences by processing each module in the series including the particular module in the order indicated by the series.

In an embodiment the one or more modules include a plurality of modules wherein generating the output for the workflow comprises using output from the source as input to a first module and using output from the first module as input to a second module. In an embodiment the at least one module is configured to process the one or more nucleic acid sequences by communicating with at least one of an external web server or an external database server.

In an embodiment the method further comprises saving workflow data describing the series. The method further comprises causing the workflow data to be shared with multiple users. The method further comprises subsequently reconstructing the series in a second graphical user interface based on the workflow data. The method further comprises receiving fourth input via the second graphical user interface modifying the series to include one or more additional modules. The method further comprises generating second output based upon the one or more nucleic acid sequences by processing each module in the series including the one or more additional modules in an order indicated by the series.

In an embodiment the one or more modules include a first module that generates first output based upon the source and a second module that merges the first output with second output from a third module that is not in the series wherein the source first module second module and third module are all nodes within a workflow. In an embodiment the method further comprises presenting controls for selecting the one or more modules wherein the controls include at least a first control for selecting a first module that searches for publications in an online database based on genomic data a second control for selecting a second module that outputs a sequence alignment for multiple sequences and a third control for selecting a third module that identifies protein families for a nucleic acid sequence.

In an embodiment receiving the one or more third inputs comprises presenting visual feedback while a first node is selected that indicates that genomic data output from the first node can be linked as input to a second node. In an embodiment the one or more modules include at least two modules and processing each module of the one or more modules in an order indicated by the series comprises automatically processing each module without human intervention between beginning processing of a first module in the series and generating the output by concluding processing of a last module in the series.

In other aspects the invention encompasses a computer apparatus and a computer readable medium configured to carry out the foregoing steps.

In an embodiment the processing and study of genomic data is greatly simplified using a construct herein described as a workflow. Rather than manually performing each step of a research or data processing task or rather than writing a proprietary script to perform these steps a researcher may utilize the techniques described herein to generate a re usable and easily modifiable workflow that chains these disparate steps together in an interconnected construct and performs some or all of the steps of a task in an automated fashion with minimal or no user intervention.

As used herein a workflow is a set of linked nodes that represent sets of data and actions that are to be performed on those sets of data. In general the linked nodes form one or more ordered series of nodes. Certain nodes in a series represents an action while other nodes represent data that has been output from an action represented by a previous node in the series and or input to an action represented by a next node in the series. For example the first node of a workflow may represent a mining operation that pulls data from a source the second node of the workflow may represent the data output by that source the third node of the workflow may represent an action to be performed on that data the fourth node may represent a data set that results from that action and so forth.

A workflow may comprise any arbitrary number of nodes. However the utility of the workflow model is generally best realized in a series of nodes that comprises two or more action nodes. Furthermore a workflow may feature branches. Some of these branches may merge. For example multiple actions may produce a single data set or multiple data sets may be input into a single action. Other branches split. For example a data set may be input into two separate actions or an action may produce multiple similar or dissimilar data sets.

One example implementation of workflows is described in Document Based Workflows U.S. 2010 0070464 published Mar. 18 2010. Document based workflows describes workflows in which a single node type referred to as a document can function as an action node and or a data node within the meanings presented herein. Therefore many of the techniques described therein are applicable to the workflows described herein. The contents of Document based workflows are hereby incorporated by reference for all purposes as if set forth in their entirety herein.

Workflow nodes that represent data are referred to herein as data nodes. Data nodes may include data sets imported from a data source such as a sequence database or publications library search results manually inputted data from a user and or output data from an action node. The data sets represented by a data node are one or more similarly typed items. For example a data set may be an array of items. Items may include any type of data structure. For example in the context of genomic data example items include without limitation sequences publications annotations gene data structures protein data structures motif data structures disease data structures patient data structures and so forth. A data node may directly comprise the data set it represents or a data node may indirectly comprise the data set by referencing location s where the data set is found. A data node may further comprise metadata describing the data set such as a data type to which the items in the data set conform summary data research notes and or a reference to the original source of the data set such as database record s and or action node s .

In an embodiment a workflow interface may allow a user to interact with any data node in a workflow for observational purposes. Hence a user may create data nodes in certain positions of a workflow where the user wishes to observe data being processed by the workflow. For example the workflow interface may represent the data node as a group of named items with an interactive control corresponding to each item. A user may select the control for an item to access various interfaces for viewing sequences metadata analyses and other information corresponding to the selected item. Data nodes may further facilitate other interactions as described in other sections.

Action nodes are nodes that represent actions to be performed on a data set. An action node may represent any type of action supported by a workflow application. Examples of actions that could be represented by action nodes that pertain to genomic data are described in subsequent sections.

In an embodiment each action node comprises a reference to a specific module that is responsible for performing the node s action and optionally one or more configuration parameters for that module. A module is a reusable execution unit that performs an action. For example the module may comprise actual instructions for performing an action based on a specified set of data. Or the module may comprise instructions for submitting the specified set of data to an external tool such as an external run time library or web server and then retrieving any result. In an embodiment a workflow application supports an extensible application programming interface whereby users may define a variety of different types of modules each performing different actions.

An action node may comprise metadata that links the node to one or more input nodes. The term input node refers to any data node or other action node that generates data upon which a particular action node performs an action. Certain action nodes are not necessarily linked to any input node. These action nodes may nonetheless have an implied or user configurable data set upon which actions are performed. For example an action node may perform a query operation on a database in which case the database constitutes an implied data set upon which the query operation is performed. An action node may also comprise metadata that links the node to one or more output nodes. The term output node refers to any other node including both data nodes and action nodes to which data generated by an action performed at a particular node is directed. Some action nodes are not necessarily linked to any output nodes. Such may be the case for action nodes that perform a terminal action such as saving results or for action nodes that have not yet been executed.

For simplicity various example workflows are described in terms of their action nodes. However these workflows may also have intervening data nodes that represent data with which a user may interact.

One obstacle to interoperability between various genomic data tools is the wide variety of formats that the different tools use to structure their results. In an embodiment workflows simplify this obstacle by converting the outputs of various tools into defined data types. For example workflows may utilize a set of data types defined by a certain schema or ontology. The schema or ontology may define universal structures to represent common units of genomic data such as sequences proteins annotations publications and so forth.

Rather than working with ambiguously formatted flat text files the inputs and outputs of each workflow node conform to standardized predictable data types. This is because action modules are required to accept input that conforms to a specified data type and to generate output that conforms to a specified data type. In an embodiment particular action modules comprise or are associated with metadata that specifies one or more input or output data types that the action module can handle. A workflow application only allows a user to link a particular action node to other action nodes whose action module handles input or output that conform to these one or more specified input or output data types or data nodes that comprise data of these one or more specified input or output data types.

To simplify the challenge of utilizing typed data in a workflow a workflow application may provide various data conversion components. A module may feed output from an external tool to an appropriate conversion component along with information that assists the conversion component in understanding the data such as the identity of the tool from which the data was retrieved. The conversion component parses the data and generates converted data structures based thereon. Similarly the workflow application may provide conversion components that convert the converted data into common input formats expected by various tools. Yet other modules may perform such conversions using their own customized code.

Block comprises receiving first input specifying a source from which one or more nucleic acid sequences are to be obtained. The first input defines in essence a data node of a workflow. A data node represents a data set which in this case is the one or more nucleic acids obtained from the source. Example sources include without limitation one or more files in a local file system a web page a web based search one or more database records an existing workflow clipboard contents a library of previously saved sequences or an action node. Input specifying a source may be received via any suitable user interface technique. An example interface for specifying sources is described in other sections. Input specifying a source may instead be received via textual input such as in an XML file for a previously saved workflow or via command line input.

The data node defined by the first input is not necessarily the only data node in the workflow or even the only data node defined in block . For example block may further comprise receiving other input s specifying source s for other nucleic acid sequences or other types of genomic data.

Block comprises receiving one or more second inputs selecting one or more modules for processing data. The one or more second inputs may select for example one or more action modules such as described herein. Hence each second input defines an action node for the workflow. The one or more second inputs may further specify one or more configuration parameters for the one or more modules if needed. The action nodes defined by the one or more second inputs are not necessarily all of the action nodes within a workflow and block may further comprise receiving other input s defining other action node s .

Like the first input each second input may be received via any suitable user interface technique including those described in other sections or via textual input. In an embodiment the modules are selected from a set of pre defined modules. In an embodiment the pre defined modules may include both modules provided by a provider of a workflow application and user created modules. In an embodiment a second input selects a module that is not pre defined but rather created by the second input. For example a user may provide code or other instructions for a non reusable module while defining the workflow.

Block comprises presenting in a graphical user interface graphical components representing the source and the selected modules. The presentation may comprise for example separate icons or other graphical representations for the source and for each module. The complexity of the graphical components may vary from embodiment to embodiment. For example some embodiments may represent a source using a simple icon while other embodiments may represent a source by listing within the graphical component corresponding to the source identifiers for some or all of the data items that belong to the source. Examples of suitable graphical components are described herein.

In an embodiment a workflow application may perform block . The workflow application identifies the source and module s specified by the first and second inputs. The workflow application then generates a visual presentation of the source and module s within an application workspace. The application workspace represents a workflow to which the source and the selected module s are deemed to belong.

In an embodiment blocks occur concurrently. For example a user may provide the first input and the workflow application may immediately respond by displaying a graphical component for the source. The user may subsequently provide each second input and the workflow application creates a new graphical component in response to each second input.

Block comprises receiving one or more third inputs arranging the source and the one or more modules in a series. For example the one or more third inputs may comprise a fourth input that establishes the source as a first node in a series and additional inputs that link the one or more modules in a succession following the source. Like the first input each third input may be received via any suitable user interface technique including those described in other sections or via textual input. In an embodiment the one or more third inputs are received via the graphical user interface. For example a third input may comprise dragging a cursor from an output connector associated with a graphical representation of the source to an input connector associated with a graphical representation of a module.

The series indicates that for each particular module of the selected modules output from one of the source or another particular module is to be input into the particular module. The series may in fact comprise more nodes than just the source and the one or more modules. For example the source and module s may have been arranged to follow an existing series of nodes and or other nodes may be arranged to follow the source and the module s . Moreover the workflow may in fact comprise multiple series of nodes. For example a workflow may comprise two series that are entirely detached from each other or the workflow may comprise a series that branches into or off of a node in another series.

In an embodiment the one or more third inputs are received via an interface that enforces constraints upon the types of nodes that can be linked. For example if any input attempts to arrange a module after a source or another module that outputs a data type not supported by the module the interface will refuse to arrange the module in the manner indicated by the input.

Block comprises updating the graphical user interface to depict the series arranged by the one or more third inputs. For example the source and module s may be re ordered within the graphical user interface in accordance to the series. Or the source and module s may be connected to each other by lines or other suitable connectors in an order indicated by the series. In an embodiment in response to each third input the graphical user interface updates to depict a new arrangement rather than waiting for receipt of all of the one or more third inputs.

In an embodiment blocks and may be performed concurrently with blocks . For example the user may add a source and a first module to a workspace and then link the source to the first module. The user may then add a second module to the workspace and then link the second module to the original module. The graphical user interface may continually update as the user provides these inputs.

Block comprises processing each module of the selected modules in an order indicated by the series. The processing of modules within a workflow is described in subsequent sections.

Block comprises generating an output based upon this processing. Since the one or more nucleic acid sequences were used as input to at least one module the output is based at least upon the one or more nucleic acid sequences. Of course the output may be further based on other data inputs if so defined in the workflow. The output is generated by the processing of the last or second to last module in the series. Thus block in essence comprises block .

Block comprises optionally storing the output. For example the output may be saved in a local database or file system. Or the output may be uploaded to a web based database. Or the output may be sent to another user. Block may or may not be performed as part of processing the last module in a series. For example the last node in a workflow may be an action node that performs the storage operation. Or the last node in the workflow may be a data node with the output from block . In the latter case block may be performed outside of the processing of the workflow. For example the user may manually import the data set represented by the last node of the workflow to a database. Or the user may copy and paste the data set into a report that is then stored to a file.

In an embodiment processing a workflow comprises processing a series of nodes. A first action node in the series of nodes corresponds to a first module. Processing the workflow comprises executing the first module based on data input from a data node that represents a source. An output is generated based on the execution of the first module. In an embodiment the processing further comprises executing a second module represented by a second action node in the series. Based on the output from the first module a second output is generated based on the execution of the second module. In an embodiment the processing further comprises iteratively executing each module represented by each subsequent action node in the series using output from an immediately previous action node as input until all action nodes in the series have been processed.

In an embodiment processing a workflow comprises processing a data node. The processing of a data node comprises populating the data node with a data set output from a previous action node. The processing of a data node may or may not further comprise receiving interactive user manipulations of the data set as described below. The data set is passed as input to any subsequent action node.

In an embodiment processing a workflow comprises processing multiple series of nodes. Any given series or node may be dependent upon output from any other given series or node in the workflow. However once a node or series upon which another node or series depends has been processed the other node or series may be executed without regard to the timing of any other node or series. For example multiple independent series may be executed in parallel with respect to each other or at any other time relative to each other.

In an embodiment executing processing a module comprises executing instructions defined for the module. The instructions are optionally executed based upon one or more configuration parameters defined in a second input. In an embodiment the instructions send a request to an external component such as a web based server or external application. The request comprises or references the data input into the module during the processing which may or may not have been reformatted in accordance to the module s instructions. In response the module receives data from the external component. The module may optionally reformat or otherwise process the returned data before returning it as output.

In an embodiment some or all workflows are processed automatically in a non interactive fashion. Once such a workflow has been defined processing of the workflow requires no additional user input between the time that the first node is processed and the time that a last module is processed.

While some workflows described herein are designed to produce output without human intervention other workflows are designed to assist a user in identification processes and determinations rather than simply produce an output. For such workflows at various stages of designing and using the workflow the user may provide various inputs to interact with and or manipulate the flow of data. A user may for example execute a portion of the workflow. Based on output from execution of that portion the user may decide to execute other portions of the workflow and or redefine the workflow to include additional nodes or series of nodes.

In an embodiment a user may manipulate the data within any data node. Hence a data node may represent a position in the workflow at which a user may wish to make an informed decision with respect to how the workflow is to proceed. By contrast for data processing with which the user does not intend to intervene the workflow does not require a data node. Thus multiple action nodes may follow each other without intervening data nodes thereby indicating that the processing of data at those positions is entirely automated. However since data nodes may also serve observational purposes the existence of a data node does not necessitate that the user must manipulate data within the data node.

For example a user may edit a data node by adding or removing items thereby allowing the user to interactively filter the data set for any subsequent workflow actions for which the data node provides input. The user may execute a first portion of a workflow to generate the data node. The user may then edit the data node before proceeding with or even creating the second portion of the workflow. Similarly the user may create new data nodes by moving or copying items from another data node. These new data nodes may then be linked to action nodes within the workflow.

In an embodiment a user may save a workflow for subsequent re use. For example a workflow data structure such as an XML file or other data object may describe a workflow. A user may save the workflow data structure to a file system or database. The user may subsequently access the workflow data structure in order to execute the workflow again. For instance the user may load the workflow data structure in a workflow application. The workflow application may present graphical representations of the workflow described by the workflow data structure. The user may then execute the workflow as it was constituted at the time the workflow was saved or the user may modify the workflow to process potentially different data sources in different manners.

In an embodiment certain saved workflows may be utilized as templates from which the user may rapidly create new workflows. In an embodiment a workflow may be shared with other users. For example a user may email a workflow or a link to a workflow to another user. If the other user has access to the same data sources and same modules for instance by means of a centralized resource server the other user may run and or tweak the workflow. If the other user does not have access to the same data sources and same modules various techniques for finding substitute sources and modules may apply. Or to prevent resource dependency problems a shared workflow may embed modules and data sources to which another user is not likely to have access.

In an embodiment a user may configure a saved non interactive workflow to run in response to triggers or on a periodic basis. For example a data source may change periodically or in response to certain events. A user may create and save an automated workflow to for instance generate updated report data whenever the data source is changed or reimport data into a database based on the changes. In an embodiment a process may monitor the output of a automated workflow and provide an update notification to a user whenever the output changes. For example a user may configure a workflow to run every morning. The workflow may typically pull the same results. The user may request to receive an automated email whenever the workflow output changes. The user may then investigate the new data.

System comprises a workflow system . Workflow system comprises one or more computing devices that implement a series of components that provide various functionalities with respect to workflows. For example workflow system may comprise a client computing device and server computing device. As another example workflow system may comprise a single computing device. Components may be any combination of hardware at the one or more computing devices and software executed by that hardware. In an embodiment components are collectively referred to herein as a workflow application. 

Workflow creation component provides workflow interface component to a user . Workflow creation component creates workflows in response to various user input to workflow interface component . The various user inputs may for example instruct workflow creation component to add data nodes and action nodes to a workflow manipulate those nodes and create links between certain nodes. Workflow creation component updates the workflow interface component to depict representations of the nodes and or links in a workflow as the user input is received.

Workflow creation component creates action nodes that represent action modules for processing workflow data. Action modules are execution units that input and or output data as described in other sections. Workflow creation component learns of the availability of these action modules as well as configuration options for and constraints upon the modules by accessing module metadata . For example when a workflow application is first invoked the workflow application may scan a folder or other metadata for modules and then make any found modules available for use in the action nodes of a workflow. Workflow creation component then generates interface controls in workflow interface component that allow user to create a new action node and associate that action node with one of the modules .

Workflow creation component may create a data node based on input from user specifying a data set. Workflow creation component may further create data nodes based on output from processing an action node such as from an immediately preceding action node in the current flow or from an action node at the end of a different workflow.

Workflow creation component further creates data nodes based on data selected by a user from one or both of a converted data repository and data sources . Workflow creation component retrieves data sets from converted data repository and or data sources . As the data sets are retrieved data sources are converted by data conversion component thereby yielding uniform typed data structures. Data sets from converted data repository on the other hand are already organized as uniform typed data structures. Workflow creation component presents these data sets to user in workflow interface component and in response receives input that selects specific data items from the data sets that should belong in the data nodes.

Once a workflow has been created workflow creation component stores a workflow data structure representing the workflow in workflow storage . Workflow storage may be for example a temporary location in memory directory in a local file system or database.

Workflow interface component further includes controls by which user may instruct workflow processing component to process at least a portion of a currently loaded workflow or a workflow in workflow storage . For example workflow interface component may present a run workflow and or run node button that causes the workflow processing component to process at least a portion of the workflow currently displayed in workflow interface component . Workflow processing component may also or instead run workflows specified by other input such as command line input or input from a task scheduler.

Workflow processing component executes workflows described by workflow data structures in workflow storage using workflow processing techniques such as described in other sections. In the course of processing a workflow workflow processing component invokes action modules referenced by action nodes within the workflow. Workflow processing component may pass a typed data set output by a previous node if one exists to an invoked action module . Most action modules will process one or more instructions with respect to the input data set and then return an output comprised of typed data to workflow processor . In an embodiment workflow processing component may create and or update data nodes in the currently processed workflow to include the data sets output by action modules . In an embodiment when workflow processing component is running in an interactive mode workflow processing component may further update the workflow interface component to display representations of added or updated data nodes. In an embodiment workflow processing component may be configured to store print or display the final output from a workflow to a variety of locations other than workflow interface component .

In an embodiment one or more action modules comprise self contained instructions for processing a data set. For example code for relatively common and or simple operations such as merging or filtering a data set may be included directly within a module . In an embodiment an action module processes a data set using only self contained instructions without calling any external tools . In an embodiment a module interacts with one or more external tools for processing a data set. The one or more external tools may implement various algorithms for processing genomic data. Action modules send some or all of the input data set or processed data based thereon to external tools for processing. Action modules then receive an output in return. Action modules may optionally process an output before returning the output as typed data to workflow processing component . In an embodiment users may supply their own action modules via an API which the workflows system may also use.

The external tools may include for example local runtime libraries such as redistributable libraries of Java or Python code that can be invoked directly through procedure calls in an action module . The external tools may also include client side libraries that run within the workflow interface component at the user s computing device. For example a module may be implemented using client side JavaScript tools. Such tools may or may not prompt a user for input that will affect the outcome of the module . The external tools may also include local application servers and web based application servers with which an action module may communicate over one or more networks via any suitable protocol including HTTP FTP REST based protocols JSON and so forth. In an embodiment all action modules are coded objects that extend a common class. The common class implements logic for communicating with each of these four types of external tools . In an embodiment external tools may include other tools not depicted. In an embodiment some external tools may furthermore communicate with other external tools to produce an output. In an embodiment some external tools may generate outputs based on requesting data from data sources .

Data sources may include any source of data accessible to system including local files in any of a variety of formats and queryable local databases . Data sources may further include web based repositories that are accessible by various web based interfaces including SOAP or REST based interfaces. In an embodiment to speed up operation of system web based repositories are cached locally as local files and or local databases . For example workflow system may periodically download database dumps from web based repository . Data sources may further include web pages . For example action modules and or data conversion component may feature screen scraping elements for extracting publications or other data from the web pages of certain web sites.

In an embodiment data output from external tools and data sources must be converted to converted data prior to being processed by workflow system . Workflow system may provide a data conversion component to reformat data from external tools and data sources into typed data structures defined by an ontology . The ontology may be for any type of data. In an embodiment an ontology for genomic data comprises the following core data types sequences DNA sequences mRNA sequences RNA sequences protein sequences protein objects paper objects alignment objects and gene objects.

Converted data is then stored at least temporarily for processing of the workflow and or permanently for subsequent access by users in other workflows and projects. In an embodiment data conversion component may further convert data back into a form expected by external tools and data sources for use as input to external tools or for storage in data sources . In an embodiment action modules may also or instead be responsible for directly converting some of the data sets sent to or received from a corresponding tool . In an embodiment some action modules may rely directly upon converted data stored permanently in a database as opposed to data from data sources .

System is but one example of a system in which the techniques described herein may be practiced. Other systems may comprise additional or fewer elements in potentially varying arrangements. For example one system omits any number of external tool types or data source 280 types. Another system omits converted data and data conversion component . Yet another system omits a graphical workflow interface component . Many other variations are also possible.

Interface may comprise various graphical representations of items such as nodes data items modules files and so forth. To simplify the disclosure this application sometimes describes graphical interface features in terms of represented items themselves as opposed to the graphical representations of those items. The skilled person will understand that as is common when describing graphical interfaces literal descriptions of a graphical interface comprising non graphical interface components should be interpreted as descriptions of the graphical interface comprising graphical representations of those components. For example the description may describe a step of selecting a node from a workspace when in fact the skilled person will understand that what is being selected is a representation of a node in the workspace.

Interface comprises a workspace area in which is depicted a workflow . The various components of workflow are described with respect to subsequent figures. Workspace further comprises zoom controls for enlarging or shrinking the visible area of workspace . In an embodiment the viewable area of workspace is movable through various combinations of cursor inputs and or selections of scrolling controls.

Interface further comprises a header area . Header area includes controls for general workflow operations. Save control facilitates input for saving workflow . Load control facilitates input for loading a previously stored workflow into workspace . Run control facilitates input for processing the entire workflow . Or if a particular one or more nodes of a workflow are currently selected run control facilitates input for processing a portion of the workflow corresponding to the particular one or more nodes. Controls facilitate input for generating different types of presentations based on output from workflow . Control facilitates input for importing selected output from workflow including data sets stored in intermediate data nodes into a data repository.

Interface further comprises a sidebar area which is generally reserved for controls that facilitate the creation of new nodes in workflow . Sidebar area comprises four panes . The currently depicted pane search pane depicts a database search control . Database search control allows a user to perform a term based search on various databases of genomic data. The user may drag search results in part or as a whole to workspace to create new data node s . Sidebar further includes an import pane an action pane and a library pane .

Interface further comprises a summary view area . Summary view area generally presents a context sensitive detail view of information about a currently selected object in workspace . For example as depicted summary view area presents a publication view of a particular publication item that is selected in a data node of workflow . Depending on the data type and or node type of the currently selected item in workspace summary view area may present differently organized views of different fields of information. Some views may contain a single field of information while other views may contain many fields of information. In an embodiment the information presented in summary view area is user defineable. Summary view area may be scrollable depending on which view is presented.

The user may select a particular data item such as item by clicking on it or using any other suitable selection technique. In response summary view area may be updated with a view of information that is associated with the selected item . The information in view may change in response to a user clicking on panes . Each of panes brings into view a different set of information about protein including summary information per pane references per pane sequence data per pane and PDB data per pane .

A user may also select an entire data node by clicking on it or using any other suitable selection technique. Clicking on a data node may cause summary view area to show a different view of different information than the information depicted in . For example the view for node may comprise summary information for an entire data set such as a statistical analysis or histogram showing how similar protein items are to each other.

By contrast when an action node is selected the summary view area may comprise metadata describing the module corresponding to the action node information about the last execution of the module and or fields for entering values for configurable parameters of the module.

As depicted in workspace comprises a representation of the data node which has been created in response to a user clicking on control . Thus as illustrated in the content representation area of node node comprises the imported data item . The representation of node further comprises a remove control that causes the removal of node from workspace and a node title which by default refers to the technique by which node came into existence i.e. the fact that it was Imported .

Controls and may have been generated for example by scanning one or more plugin directories in which the workflow application expects to find modules. Control groups and may have been generated based on module metadata categorizing each of the module plug ins. Control group corresponds to a Sequence category of modules. Selecting one of its controls creates an action node that executes an action implemented by respectively an MSA module a BLAST module a Transcription module a Translation module or a ScanProsite module. Control group corresponds to a Basic category of modules and includes a merge control and filter control . Selecting one of controls creates an action node that executes an action implemented by respectively a Merge module or a Filer module. Control group corresponds to a Query category of modules. Selecting one of its controls creates an action node that executes an action implemented by respectively a PubMed module or a UniProtKB module. Since users may easily create their own modules and since the workflow application automatically creates controls for any modules that a user creates control groups and are controls and and are but a small sample of the control groups and controls that may appear in sidebar .

In an embodiment a user may link any node to any other node by dragging its output connector to the input connector of the other node or by dragging its input connector to the output connector of the other node. The node whose output connector was connected to the input connector of the other node provides input to the other node and is thus considered to have been ordered before the other node in the series.

As depicted in the output connector of node is being dragged to the input connector of node . Connector has changed colors and cursor has been shaped as a connector to indicate that the user is currently dragging connector . Connector labels and also appear while the user is dragging connector providing information about the selected connector and other connectors as appropriate. In an embodiment a connector can only be linked to another connector if the two connectors are associated with a same data type. To assist a user in recognizing which connectors are associated with the same data types user interface may furthermore change the appearance of any connector that is compatible with the connector that is currently selected. Two connectors are compatible if they are of opposite connection types input versus output support at least one common data type are not in the same node and are not both in data nodes. Hence since input connector is compatible with output connector input connector has been shaded a solid color with no border in contrast to input node which is transparent and has a border. Connector likewise has a border indicating that it cannot receive connector . However node is currently shaded because it represents output that is currently not being provided to another node. A variety of other techniques for changing appearances of compatible nodes may also or instead be utilized.

The library pane is selected in sidebar . Consequently sidebar includes three controls for adding items from a library. In an embodiment a library is a local storage repository where users may save data items of interest to the user. Hence sidebar may include many more controls depending on which items have been added by a user. In an embodiment library items are shared with groups of users. Each control corresponds to a different library item. Selection of one of controls results in the addition of the corresponding library item to the currently selected data node or in the creation of a new data node if no compatible data node is selected. For example data node was created when the user clicked on control .

Action node corresponds to a filter module. For example action node may have been added to workspace in response to a user clicking on control . By default the filter module is configured to filter data node to include only the first item but the user may reconfigure the filtering behavior associated with action node by selecting node and changing parameter values that are shown in summary view area in response to the selection.

Action node corresponds to a merge module. For example action node may have been added to workspace in response to a user clicking on control . Action node includes multiple input connectors and to allow node to receive multiple inputs. The merge module is configured to create one data set out of the multiple inputs. For example as depicted node will merge the output of node with the data in node .

After adding action node the user ran the workflow to generate output for action node . This output comprising a group of publications was saved in data node as at least data items . A user may see other data items that are in node using scroll control .

In screenshot the user has dropped the selected items at the location of data node . Accordingly node was created and a representation of the node including data items and was added to the workspace . Meanwhile data items and are removed from data node as a result of the operation rendering items visible in node . In some embodiments however splitting items from a node does not necessarily remove items from the original node but rather clones the items in a new node.

Node can now be added to workflow . For example it may be connected back to node effectively requesting that node split its input into two separate data nodes. Or node may be used as a first node within another independent series of nodes within workflow .

Interface is but one example of an interface for practicing techniques described herein. Other interfaces may comprise fewer or additional elements in potentially varying arrangements.

Examples of action nodes that may be useful for processing genomic data are described below. There may in fact be many more types of modules than those listed here. Workflows for other types of data may include some of these action nodes but may also or instead include other action nodes that reflect algorithms for processing the other types of data.

In an embodiment standard modules include a merge module for merging data sets from multiple nodes and a filter module for filtering a data set based on configurable criteria.

In an embodiment one type of action node corresponds to a Translate DNA to Protein module. The module accepts input in the form of a sequence. The module uses a locally implemented algorithm to translate the DNA sequence. The module generates output in the form of a protein data structure. Example configurable parameters for the module may include without limitation a frame parameter and a complement parameter.

In an embodiment another type of action node corresponds to a multiple sequence alignment module. The module accepts input in the form of a multiple sequence data set in for example a multi FASTA formatted file. The module generates output in the form of alignment data such as in an MSA alignment file. A summary area of a workflow might present the alignment data in a detailed view area using techniques such as described in the previously referenced application Computer Graphical User Interface Supporting Aligning Genomic Sequences. 

In an embodiment another type of action node corresponds to a Protein family Pfam Scan module. The module accesses a web based application server that runs a Hidden Markov Module over a protein sequence and computes the most likely protein famil ies based on motifs in the protein sequence. The module accepts input in the form of a protein data structure. The module generates output in the form of protein family data structure s .

In an embodiment another type of action node corresponds to a Glimmer module. The module accesses a web based application server to locate genes using an interpolated Markov model. Configurable parameters for the module include without limitation a genetic code type topology type a number of input sequences and an output data type which may be an annotation or a sequence.

In an embodiment another type of action node corresponds to a BLAST module. The module accesses a web based application server that searches for genes in a sequence query using various libraries of genomic data. The module returns information about matching results.

In an embodiment another type of action node corresponds to a FASTA sequence reader module which converts FASTA file structure into a protein or DNA sequence using a local application.

In an embodiment another type of action node corresponds to a UniProt module. The module queries an online UniProt database to retrieve information about inputted protein sequences or objects. Configurable parameters for the module include without limitation an organism parameter a Gene Ontology GO parameter a reviewed parameter and a pro site parameter.

In an embodiment another type of action node corresponds to a PubMed module. The module queries the online PubMed database for all publications that match input data. Configurable parameters for the module include without limitation an id parameter and a reviewed parameter.

In an embodiment various workflow node types supported by the systems described herein may include without limitation nodes that represent one or more of the following sourcing functions that retrieve data from one or more sources using various querying and or scraping techniques aggregation functions such as cumulative and average results of data filtering functions that choose subsets from sets of biological objects based on various matching criteria and or thresholds sequence partitioning functions that select a section from a sequence or alignment and use that section as a new data object comparison functions that compare two or more biological objects or sets of objects based on specified metric s and determine whether the differences are statistically significant comparison functions that compare patient cohorts conversion and modification functions sequence alignment generation functions sequence alignment analysis functions prediction functions that predict sites of a sequence of potential interest for annotations or other features annotation functions for automatically creating annotations annotation lookup functions Natural Language Processing functions for publications lookup functions to identify diseases associated with certain genomic objects and storage functions that save various annotations or other outputs to various storage locations and make the outputs available to other users.

In an embodiment other example modules to which various workflow node types may link include without limitation modules that implement the following types of analyses allele tests genotypes frequencies tests Hardy Weinberg equilibrium tests missing genotype rates inbreeding tests identity by state and identity by descent statistics for individuals and pairs of individuals non Mendelian transmission in family data complete linkage hierarchical clustering multidimensional scaling analysis to visualise substructures significance tests for whether two individuals belong to the same population constrain cluster solutions by phenotype cluster size and or external matching criteria subsequent association analyses that are conditional on cluster solutions standard allelic tests Fisher s exact tests Cochran Armitage trend tests Mantel Haenszel and Breslow Day tests for stratified samples dominant recessive and general model tests model comparison tests e.g. general versus multiplicative family based association tests such as transmission disequilibrium tests or sibship tests quantitative traits associations and interactions association tests that are conditional on one or more single nucleotide polymorphisms SNPs asymptotic and empirical p values flexible clustered permutation schemes analysis of genotype probability data and fractional allele counts post imputation conditional haplotype tests case control and transmission disequilibrium test association on the probabilistic haplotype phase proxy association methods to study single SNP associations in their local haplotypic context imputation heuristics to test untyped SNPs given a reference panel joint SNP and copy number variation CNV tests for common copy number variants filtering and summary procedures for segmental rare CNV data case control comparison tests for global CNV properties permutation based association procedure for identifying specific loci gene based tests of association screen for epistasis gene environment interaction with continuous and dichotomous environments and or fixed and random effects models.

The following examples illustrate how a user may utilize a workflow to simplify various objectives related to genomic data. The examples are given for illustrative purposes only and not by way of limitation as to the type of objectives to which workflows may be applied. There are of course many other types of workflows not described below including without limitation workflows for epigenetics effects of copy number variations evolutionary biology and non coding RNA analysis.

One use for the workflows described herein is to address gene annotation problems. For example Lactobacillus acidophilus strains which are typically of interest in probiotics and potential vaccine vectors sometimes have a surface layer protein for adhesion to cells. A researcher may sequence a new strain of . When the researcher aligns the new strain to the reference sequences the researcher discovers that the new strain lacks the SlpA gene but has an unknown insertion. The researcher decides that the new strain may be interesting and wants to know whether the new strain is a gene the likely function of the protein that the new strain encodes the biological context of the new strain and how the strain compares to proteins that are already known.

An example workflow to assist in accomplishing these objectives may be as follows. A first set of one or more action nodes loads the appropriate DNA sequence and metadata including the source sequencing method date and quality. A second set of one or more action nodes runs a GLIMMER tool to predict gene s based on the loaded data. A third set of one or more action nodes runs a multi sequence alignment and comparison to compare the sequence to a corresponding region of the reference sequence thereby producing a genome object with annotated genes. A fourth set of one or more action nodes translates the genome object into a protein sequence. A fifth set of one or more action nodes predicts pfams and GO terms. A sixth set of one or more action nodes runs BLAST on the protein sequence to answer the questions of what pfams and GO terms are most common among the top hits how do these terms intersect with those from the predicted protein and how closely related are the bacteria of the top hits to A seventh set of one or more action nodes searches for known pathways that the top hits are involved in using Metacyc and E.C. numbers. An eighth set of one or more action nodes pulls PubMed data for the top BLAST hits. A ninth set of one or more action nodes find genes and features upstream and downstream of the insertion and determines what the functions of these sites are. A tenth set of one or more action nodes runs a feature annotation module to compare the gene to the PubMed annotations of the BLAST hits to identify unique features of the gene. An eleventh set of one or more action nodes adds appropriate annotations concerning the unique feature as annotations to the gene and links the annotations back to the genome.

In an embodiment various actions may require human intervention to identify important data points before proceeding to the next node. In an embodiment the workflow is entirely automated without human intervention. In an embodiment such a workflow may be saved for reuse. The next time the researcher discovers a new strain the researcher may perform the same workflow with respect to the new strain simply by modifying the original workflow input.

Another use for the workflows described herein is to address sequence structure function disease problems with respect to a gene. For example a researcher may put together a workflow that answers questions such as what are the implications of the polymorphisms in a gene for how and when the gene is expressed what are the implications of the polymorphisms in the protein it encodes for interaction with its co factor and how do these implications relate to the gene s role in disease.

An example workflow to assist in accomplishing these objectives may be as follows. A first set of one or more action nodes performs a multi sequence alignment of the gene s variants. A second set of one or more action nodes uses tracked viewing of microarray expression data under various experimental conditions to identify patterns of altered activity. The identification process may involve multiple hypothesis controlled t tests and or other algorithms to statistically identify mutations that are correlated with expression changes under one or more conditions. A third set of one or more action nodes adds a track of annotated features such as regulatory sequences to compare with the experimental expression data. A fourth set of one or more action nodes performs a multi sequence alignment of the protein s variants. A fifth set of one or more action nodes performs a tracked viewing of activity levels such as binding affinity. A sixth set of one or more action nodes examines individual assays in a table view module to determine the ranking of the variants by binding affinity. A seventh set of one or more action nodes uses a structure viewer module to assess how binding affinity might be affected by amino acid mutations including predicting important interactions H bonds pi pi interactions steric interactions . An eighth set of one or more action nodes searches PubChem for additional relevant assays. A ninth set of one or more action nodes looks up the pathways that the protein is in. A tenth set of one or more action nodes searches PubMed for items associated with both the gene and a disease. An eleventh set of one or more action nodes imports the other components of the biological pathway hypothesized to link gene and disease from Uniprot and or other databases and draws the biological pathway.

Another use for the workflows described herein is to address protein design problems. For example a researcher may intend to design a set of candidate proteins to perform a specific chemical function such as tyrosine decarboxylase. The researcher will have these proteins made and then try them out in a bacterium that lacks this activity.

An example workflow to assist in accomplishing these objectives may be as follows. A first set of one or more action nodes searches Uniprot for proteins with pfam PF00282 Pyridoxal dependent decarboxylase . A second set of one or more action nodes searches Pfam for PF00282 and unions the results with the Uniprot results. A third set of one or more action nodes runs BLAST on this set of protein sequences against itself to generate all possible pairwise BLAST comparisons. A fourth set of one or more action nodes clusters the results based on the BLAST scores. A fifth set of one or more action nodes looks at the annotations from each cluster and determines if there is more than one cluster annotated with tyrosine decarboxylase activity. A sixth set of one or more action nodes aligns the sequences from each cluster annotated with Y decarb activity. The alignment accomplishes two objectives. First the alignment allows for a comparison of the conserved regions within and between alignments. Second the alignment groups subsets of aligned sequences visually or algorithmically based on similarity. A seventh set of one or more action nodes creates a set of candidate proteins that is representative of the alignments in that the candidate proteins have a consensus sequence in the conserved regions. An eighth set of one or more action nodes looks at the bacteria that produce the BLAST hit proteins and determines which bacteria is most similar to the researcher s test bacterium based on phylogenetic information. This may entail calling the Y decarb from a bacterium candidate1 adding candidate1 to the list of candidate proteins and filling in the non conserved regions of the other candidates with the sequence from candidate1. A ninth set of one or more action nodes searches PubMed or other databases for comparisons of the niche and metabolism of the two species. A tenth set of one or more action nodes searches PubMed or other databases to find what more is known about candidate1 in the other bacterium. An eleventh set of one or more action nodes analyzes the annotated features from candidate1 to hypothesize whether any regions will be disrupted in the other candidates. A twelfth set of one or more action nodes analyzes the structure of candidate1 and alignment of each other candidate to candidate1 to determine where the sequence changes might impact structure. This may involve threading the candidate sequences into the structure of candidate1 or threading both into the most similar existing PDB structure and finding differences. A thirteenth set of one or more action nodes exports the sequences of the candidate proteins to a database for future reference.

Another use for the workflows described herein is for Genome Wide Association Studies. For example a researcher may be curious as to which SNPs if any in a set of genomes are associated with the incidence of a disease. The researcher has a set of individuals in varying disease states as measured by a biomarker concentration. All of the individuals are genotyped using a SNP chip with 1 million SNPs. Quality control has already been performed.

An example workflow to assist in accomplishing the Genome Wide Association Studies is as follows. A first set of one or more action nodes uses Plink Eigenstrat and or R modules to compute summary statistics including allele frequencies and SNP frequencies. A second set of one or more action nodes uses these same modules to adjust the statistics to control for population stratification i.e. bias due to ancestry relatedness within the case or control group using identity by state IBS or multidimensional scaling. A third set of one or more action nodes uses these modules to run a variety of association tests in order to determine how the genotype is linked to disease. The tests include Fisher s exact test Chi square correlation and regression. More specifically the following analyses may be performed Basic Allelic how is each allele associated Genotypic Tests how is each pair of alleles associated Additive Model does having two of an allele versus none have twice the effect as having one versus none Dominant Model at least one of the minor allele versus none Recessive Model two minor alleles versus one or none . A fourth set of one or more action nodes uses a Manhattan plot module potentially with a ggplot2 R package to generate a plot of the p values of all the SNPs along the genomic axis. A fifth set of one or more action nodes extracts SNPs with a p value after multiple hypothesis correction below a threshold e.g. p 10 8 . A sixth set of one or more action nodes generates multiple sequence alignments of each SNP s region. The multiple sequence alignments are organized by case control. A seventh set of one or more action nodes searches dbSNP or other databases for the SNPs to determine if they have they been associated with anything else. An eighth set of one or more action nodes searches for other annotations in these regions in order to form functional hypotheses.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

