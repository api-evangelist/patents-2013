---

title: System and method for an object instance acquirer
abstract: A method, computer program product, and computer system for receiving, at a computing device, an input including an indication of a type of an object for which an instance is required. Code that is declared in a software development application is scanned for the instance. An output is generated including one or more suggestions how to acquire the instance based upon, at least in part, the code that is declared in the software development application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09218165&OS=09218165&RS=09218165
owner: International Business Machines Corporation
number: 09218165
owner_city: Armonk
owner_country: US
publication_date: 20130221
---
When a software developer is writing code e.g. in an object orientated product it may be difficult to find such things as how to acquire an instance of a particular object. An example reason for this difficulty may include the fact that there may be many patterns through which an instance of an object may be acquired.

Current options available to a developer to find how to acquire an instance of a particular object may be limited. For example the developer may be required to already have extensive knowledge of a product or an Application Programming Interface API in question. Additionally alternatively the developer may be required to laboriously look through the documentation of the product or the API if such documentation exists.

In one implementation a method performed by one or more computing devices comprises receiving at a computing device an input including an indication of a type of an object for which an instance is required. Code that is declared in a software development application is scanned for the instance. An output is generated including one or more suggestions how to acquire the instance based upon at least in part the code that is declared in the software development application.

One or more of the following features may be included. The code that is declared in the software development application may include at least one of code that is part of a current project in the software development application code that is imported as binaries and code made aware to the software development application through a remote service. Scanning the code may include scanning for at least one instance of one or more objects in an editor of the software development application. Scanning the code may include scanning code for at least one of constructors and methods that return instances of the object. Scanning the code may include scanning one or more parameters of at least one of the constructors and methods. Generating the output including one or more suggestions how to acquire the instance may include ordering the one or more suggestions according to complexity. Generating the output including one or more suggestions how to acquire the instance may include forming a tree of instance acquisition methods.

In another implementation a computing system includes a processor and a memory configured to perform operations comprising receiving an input including an indication of a type of an object for which an instance is required. Code that is declared in a software development application is scanned for the instance. An output is generated including one or more suggestions how to acquire the instance based upon at least in part the code that is declared in the software development application.

One or more of the following features may be included. The code that is declared in the software development application may include at least one of code that is part of a current project in the software development application code that is imported as binaries and code made aware to the software development application through a remote service. Scanning the code may include scanning for at least one instance of one or more objects in an editor of the software development application. Scanning the code may include scanning code for at least one of constructors and methods that return instances of the object. Scanning the code may include scanning one or more parameters of at least one of the constructors and methods. Generating the output including one or more suggestions how to acquire the instance may include ordering the one or more suggestions according to complexity. Generating the output including one or more suggestions how to acquire the instance may include forming a tree of instance acquisition methods.

In another implementation a computer program product resides on a computer readable storage medium that has a plurality of instructions stored on it. When executed by a processor the instructions cause the processor to perform operations comprising receiving an input including an indication of a type of an object for which an instance is required. Code that is declared in a software development application is scanned for the instance. An output is generated including one or more suggestions how to acquire the instance based upon at least in part the code that is declared in the software development application.

One or more of the following features may be included. The code that is declared in the software development application may include at least one of code that is part of a current project in the software development application code that is imported as binaries and code made aware to the software development application through a remote service. Scanning the code may include scanning for at least one instance of one or more objects in an editor of the software development application. Scanning the code may include scanning code for at least one of constructors and methods that return instances of the object. Scanning the code may include scanning one or more parameters of at least one of the constructors and methods. Generating the output including one or more suggestions how to acquire the instance may include ordering the one or more suggestions according to complexity. Generating the output including one or more suggestions how to acquire the instance may include forming a tree of instance acquisition methods.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will become apparent from the description the drawings and the claims.

As will be appreciated by one skilled in the art the present disclosure may be embodied as a method system or computer program product. Accordingly the present disclosure may take the form of an entirely hardware implementation an entirely software implementation including firmware resident software micro code etc. or an implementation combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present disclosure may take the form of a computer program product on a computer usable storage medium having computer usable program code embodied in the medium.

Any suitable computer usable or computer readable medium may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. The computer usable or computer readable storage medium including a storage device associated with a computing device or client electronic device may be for example but is not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable medium may include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a media such as those supporting the internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be a suitable medium upon which the program is stored scanned compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with the instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. The computer readable program code may be transmitted using any appropriate medium including but not limited to the internet wireline optical fiber cable RF etc. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Computer program code for carrying out operations of the present disclosure may be written in an object oriented programming language such as Java Smalltalk C or the like. Java and all Java based trademarks and logos are trademarks or registered trademarks of Oracle and or its affiliates. However the computer program code for carrying out operations of the present disclosure may also be written in conventional procedural programming languages such as the C programming language PASCAL or similar programming languages as well as in scripting languages such as Javascript or PERL. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the internet using an Internet Service Provider .

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of apparatus systems methods and computer program products according to various implementations of the present disclosure. It will be understood that each block in the flowchart and or block diagrams and combinations of blocks in the flowchart and or block diagrams may represent a module segment or portion of code which comprises one or more executable computer program instructions for implementing the specified logical function s act s . These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the computer program instructions which may execute via the processor of the computer or other programmable data processing apparatus create the ability to implement one or more of the functions acts specified in the flowchart and or block diagram block or blocks or combinations thereof. It should be noted that in some alternative implementations the functions noted in the block s may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks or combinations thereof.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed not necessarily in a particular order on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts not necessarily in a particular order specified in the flowchart and or block diagram block or blocks or combinations thereof.

Referring to there is shown acquirer process that may reside on and may be executed by a computer e.g. computer which may be connected to a network e.g. network e.g. the internet or a local area network . Examples of computer and or one or more of the client electronic devices noted below may include but are not limited to a personal computer s a laptop computer s mobile computing device s a server computer a series of server computers a mainframe computer s or a computing cloud s . Computer may execute an operating system for example but not limited to Microsoft Windows Mac OS X Red Hat Linux or a custom operating system. Microsoft and Windows are registered trademarks of Microsoft Corporation in the United States other countries or both Mac and OS X registered trademarks of Apple Inc. in the United States other countries or both Red Hat is a registered trademark of Red Hat Corporation in the United States other countries or both and Linux is a registered trademark of Linus Torvalds in the United States other countries or both .

As will be discussed below in greater detail acquirer process may receive at a computing device an input including and indication of a type of an object for which an instance is required. Code that is declared in a software development application may be scanned for the instance. An output may be generated including one or more suggestions how to acquire the instance based upon at least in part the code that is declared in the software development application.

The instruction sets and subroutines of acquirer process which may be stored on storage device coupled to computer may be executed by one or more processors not shown and one or more memory architectures not shown included within computer . Storage device may include but is not limited to a hard disk drive a flash drive a tape drive an optical drive a RAID array a random access memory RAM and a read only memory ROM .

Network may be connected to one or more secondary networks e.g. network examples of which may include but are not limited to a local area network a wide area network or an intranet for example.

Computer may include a data store such as a database e.g. relational database object oriented database etc. and may be located within any suitable memory location such as storage device coupled to computer . Any data described throughout may be stored in the data store. In some implementations computer may utilize a database management system such as but not limited to My Structured Query Language MySQL in order to provide multi user access to one or more databases such as the above noted relational database. The data store may also be a custom database such as for example a flat file database or an XML database. Any other form s of a data storage structure and or organization may also be used. Acquirer process may be a component of the data store a stand alone application that interfaces with the above noted data store and or an applet application that is accessed via client applications . The above noted data store may be in whole or in part distributed in a cloud computing topology. In this way computer and storage device may refer to multiple devices which may also be distributed throughout the network.

Computer may execute an integrated development environment IDE application e.g. IDE application examples of which may include but are not limited to e.g. a compiler application an interpreter application a source code editor application a debugger application a build automation tool application or other application that may in whole or in part provide facilities to software developers for software development. Acquirer process and or IDE application may be accessed via client applications . Acquirer process may be a stand alone application or may be an applet application script that may interact with and or be executed within IDE application and or one or more of client applications . IDE application may be a stand alone application or may be an applet application script that may interact with and or be executed within acquirer process and or one or more of client applications . One or more of client applications may be a stand alone application or may be an applet application script that may interact with and or be executed within acquirer process and or IDE application . Examples of client applications may include but are not limited to e.g. a compiler application an interpreter application a source code editor application a debugger application a build automation tool application or other application that may in whole or in part provide facilities to software developers for software development a standard and or mobile web browser an email client application a textual and or a graphical user interface a customized web browser a plugin or a custom application. The instruction sets and subroutines of client applications which may be stored on storage devices coupled to client electronic devices may be executed by one or more processors not shown and one or more memory architectures not shown incorporated into client electronic devices .

Storage devices may include but are not limited to hard disk drives flash drives tape drives optical drives RAID arrays random access memories RAM and read only memories ROM . Examples of client electronic devices and or computer may include but are not limited to a personal computer e.g. client electronic device a laptop computer e.g. client electronic device a smart phone e.g. client electronic device a notebook computer e.g. client electronic device a tablet not shown a server not shown a data enabled cellular telephone not shown a television not shown a smart television not shown a media e.g. video photo etc. capturing device not shown and a dedicated network device not shown . Client electronic devices may each execute an operating system examples of which may include but are not limited to Android Apple iOS Mac OS X Red Hat Linux or a custom operating system.

One or more of client applications may be configured to effectuate some or all of the functionality of acquirer process and vice versa . Accordingly acquirer process may be a purely server side application a purely client side application or a hybrid server side client side application that is cooperatively executed by one or more of client applications and or acquirer process .

One or more of client applications may be configured to effectuate some or all of the functionality of IDE application and vice versa . Accordingly IDE application may be a purely server side application a purely client side application or a hybrid server side client side application that is cooperatively executed by one or more of client applications and or IDE application . As one or more of client applications acquirer process and IDE application taken singly or in any combination may effectuate some or all of the same functionality any description of effectuating such functionality via one or more of client applications acquirer process IDE application or combination thereof and any described interaction s between one or more of client applications acquirer process IDE application or combination thereof to effectuate such functionality should be taken as an example only and not to limit the scope of the disclosure.

Users may access computer and acquirer process e.g. using one or more of client electronic devices directly through network or through secondary network . Further computer may be connected to network through secondary network as illustrated with phantom link line . Acquirer process may include one or more user interfaces such as browsers and textual or graphical user interfaces through which users may access acquirer process .

The various client electronic devices may be directly or indirectly coupled to network or network . For example client electronic device is shown directly coupled to network via a hardwired network connection. Further client electronic device is shown directly coupled to network via a hardwired network connection. Client electronic device is shown wirelessly coupled to network via wireless communication channel established between client electronic device and wireless access point i.e. WAP which is shown directly coupled to network . WAP may be for example an IEEE 802.11a 802.11b 802.11g Wi Fi and or Bluetooth device that is capable of establishing wireless communication channel between client electronic device and WAP . Client electronic device is shown wirelessly coupled to network via wireless communication channel established between client electronic device and cellular network bridge which is shown directly coupled to network .

Some or all of the IEEE 802.11x specifications may use Ethernet protocol and carrier sense multiple access with collision avoidance i.e. CSMA CA for path sharing. The various 802.11x specifications may use phase shift keying i.e. PSK modulation or complementary code keying i.e. CCK modulation for example. Bluetooth is a telecommunications industry specification that allows e.g. mobile phones computers smart phones and other electronic devices to be interconnected using a short range wireless connection.

Referring also to there is shown a diagrammatic view of client electronic device . While client electronic device is shown in this figure this is for illustrative purposes only and is not intended to be a limitation of this disclosure as other configuration are possible. For example any computing device capable of executing in whole or in part acquirer process may be substituted for client electronic device within examples of which may include but are not limited to computer and or client electronic devices .

Client electronic device may include a processor and or microprocessor e.g. microprocessor configured to e.g. process data and execute the above noted code instruction sets and subroutines. Microprocessor may be coupled via a storage adaptor not shown to the above noted storage device. An I O controller e.g. I O controller may be configured to couple microprocessor with various devices such as keyboard pointing selecting device e.g. mouse custom device e.g. device USB ports not shown and printer ports not shown . A display adaptor e.g. display adaptor may be configured to couple display e.g. CRT or LCD monitor s with microprocessor while network controller adaptor e.g. an Ethernet adaptor may be configured to couple microprocessor to the above noted network e.g. the Internet or a local area network .

As discussed above and referring also to acquirer process may receive at a computing device an input including an indication of a type of an object for which an instance is required. Code that is declared in a software development application may be scanned by acquirer process for the instance. An output may be generated by acquirer process including one or more suggestions how to acquire the instance based upon at least in part the code that is declared in the software development application.

Assume for example purposes only that a user e.g. user is a software developer that is writing code e.g. in a software development application e.g. Integrated Development Environment IDE application . Further assume that user needs to find e.g. how to acquire an instance of a particular object. This may prove difficult since e.g. there may be many patterns through which an instance of an object may be acquired such as but not limited to using a constructor method using a static factory method using a non static class method using a public static field or using a local or remote service. For example given an instance s of the object String from e.g. a JavaSE library associated with IDE application user may want to convert the string into an instance of the object StringBuffer. To do so user may need to know that the way to do so may be through the constructor e.g. 

As another example given an instance s of the object String from e.g. the JavaSE library user may want to convert the string into an instance of the object Boolean. To do so user may need to know that the way to do so may be through the static factory method e.g. 

As another example suppose user wants an instance of the object Boolean that represents true . To do so user may need to know that the way to do so may be through the public static final constant e.g. 

As another example given an instance arrayList of the object ArrayList in e.g. the JavaSE library user may want to convert arrayList into an array Object . To do so user may need to know that the way to do so may be through using an instance method on ArrayList e.g. 

As another example suppose a hypothetical API provides an AddressLookupService that given an instance person of the object Person may provide user with an instance of the object Address which may encapsulate the address at which the person lives. That is if addressLookupService is an instance of AddressLookupService then 

Suppose further that the same API provides a second API called e.g. CurrentLocationService that may provide user an instance of the object Address that may encapsulate where the person is at the current time. That is if currentLocationService is an instance of CurrentLocationService then 

In the example user may want to acquire both of these addresses but may not be aware about the existence of these services and or the functionality that they may offer. Further suppose that the API for these services may be currently imported into IDE application used by user . Further suppose that instances of these services may be acquired using the methods getAddressLookupService and getCurrentLocationService on a object called e.g. ServiceLocator. User may spend a lot of time manually searching to work out that the following code may be required e.g. 

At least in the above examples the ability of IDE application e.g. via acquirer process to generate and provide suggestions of these example solutions may allow user to develop software more easily and more efficiently.

In some implementations acquirer process may receive at a computing device e.g. client electronic device an input including an indication of a type of an object for which an instance is required. For example and referring at least to a user interface e.g. user interface associated with acquirer process IDE application client application or combination thereof is shown on a display e.g. display of client electronic device . Assume in the example that a window e.g. window of user interface includes at least a portion of an IDE for developing software. Acquire process may receive an input from e.g. user . For example window may include an option for user to select an action. For instance window may include a menu option e.g. menu option that when selected by user e.g. via curser may provide an action e.g. Suggest Techniques to Acquire Object Instance . Other techniques to provide the above noted action may also be used without departing from the scope of the disclosure. For example acquirer process may include a keyboard shortcut to provide the above noted action. In the example and referring at least to once the action Suggest Techniques to Acquire Object Instance is selected another window e.g. window may be displayed. Window may be e.g. a pop up window or may be a part of window . Acquirer process may receive the above noted input by e.g. user entering in object type entry portion of window the type of the object for which an instance is required for instance java.lang.String . In some implementations object type entry portion may be readily available to user without any of the above noted menu options or keyboard shortcuts. It will be appreciated that acquirer process may receive the input using any technique without departing from the scope of the disclosure. Additionally alternatively acquirer process need not receive the input directly from user and may receive the input indirectly e.g. via an intermediate portion of acquirer process IDE application client application or combination thereof .

In some implementations code that is declared in a software development application e.g. IDE application may be scanned by acquirer process for the instance. For example acquirer process may provide the functionality in IDE application to suggest techniques of acquiring an instance of an object that user may require from the instances of one or more objects that user currently has access to e.g. using the code that the developer currently has declared e.g. via IDE application . In some implementations code declared in the IDE may include all code of which IDE application is aware. For example in some implementations the code that is declared in the software development application e.g. IDE application may include at least one of code that is part of a current project in the software development application code that is imported as binaries and code made aware to the software development application through a remote service e.g. an internet search remote server or remote repository of common jars that acquirer process may be aware of and may import into IDE application for the indexes to be built .

In some implementations scanning the code may include scanning for at least one instance of one or more objects in an editor of the software development application. For instance scanning the code may include scanning for at least one instance of one or more objects in the context of an editor of the software development application. For example acquirer process may scan for instances of objects to which user may currently have access in the current context of IDE application . For instance the current context may include the objects and methods that may be currently selected in an editor of IDE application . In some implementations the accessible instance s may be the local and instance variables from the current context as well as instances that may be acquired for example through methods on the currently selected instance. In some implementations acquirer process may acquire these items using e.g. one or more APIs that may exist in IDE application . For example consider the following 

In the example the currently selected context is myMethod in the class MyClass. Further in the example acquirer process may detect that instances m and s are already available. In addition acquirer process may have access to the current instance of MyClass which may be accessed through e.g. the Java keyword this . Therefore acquirer process may have access to m s and this .

In some implementations acquirer process may use these instances that available in the current context as starting points to acquire the instance for which the developer may be looking. In the example acquirer process may use s 

The class and method in the current context may be accessed by acquirer process using e.g. the APIs of IDE application .

In some implementations scanning the code may include scanning code for at least one of constructors and methods that return instances of the object e.g. the required object . For example acquirer process may scan at least a portion of the code currently imported into IDE application for e.g. constructors such as in the above example A and methods such as in the above example B that may return instances of the required object. In some implementations acquirer process may scan e.g. public static constants such as in the above example C . In some implementations acquirer process may start the search by reviewing the constructor and methods on the required object itself since e.g. this may be one of the simpler ways to access instances of the object. Acquirer process may also scan all other objects that may be declared in IDE application .

In some implementations scanning the code may include scanning one or more parameters of at least one of the constructors and methods. For instance scanning the code may include scanning one or more parameters of at least one of the constructors and methods that were identified previously. In some implementations acquirer process may attempt to find constructors and methods whose parameters can be supplied by instances that e.g. the developer may already have in their context or else whose parameters may be acquired indirectly from the instances that the developer may already have in their context or else can be trivially acquired in the programming language in question. For example acquirer process may scan the parameters of the above noted constructors and methods and may search for parameter types that may match the instances of objects to which user e.g. via IDE application may already have access as discussed above . In some implementations such as an example with non static methods such as in the above example E the instance that the method is defined on may also be a parameter in this context since e.g. it may be required to execute the method. In some implementations IDE application may include this information stored in e.g. indexes and may be made available through an API of IDE application . This may enable access to the information without requiring acquirer process to review each file that may be declared in IDE application . In some object oriented languages such as Java primitive types may be acquired using e.g. int i 0 boolean b false and objects that may be acquired from object literals acquired using e.g. String s myString Class c MyClass.class . These types may depend on the programming language in use. In some implementations acquirer process may discount the simpler parameter types e.g. if they may be acquired trivially.

In some implementations an output may be generated by acquirer process including one or more suggestions how to acquire the instance based upon at least in part the code that is declared in the software development application. For example and referring at least to user interface may include a window that displays the suggestions generated by acquirer process using the above noted techniques. In some implementations any suggestions discovered by acquirer process may be generated in an output. In some implementations a threshold number of suggestion may be discovered by acquirer process before being generated in an output. For instance if acquirer process has discovered a suitable number of suggestions e.g. 10 then acquirer process may generate an output of those suggestions which may be displayed to user via display . In some implementations the output generated by acquirer process may be sent to user or other users e.g. via email or other known transmission method.

In some implementations generating the output including one or more suggestions how to acquire the instance may include ordering the one or more suggestions according to complexity. For example the one or more suggestions may be ordered from the simplest methods to the most complex methods of acquiring the instance. For instance assume for example purposes only that user s context includes a class with a method that declares a String e.g. 

In the example further assume that user selects the Suggest Techniques to Acquire Object Instance function enabled via acquirer process and chooses Boolean as the required object type. In some of the above described examples acquirer process may acquire the Boolean using e.g. public static final constants. In some of the above described examples acquirer process may acquire the Boolean using e.g. primitive types and classes that may be acquired more easily and may be listed among the first suggestions. Though it may be likely that user e.g. via acquirer process may prefer to use some suggestions over others it will be appreciated that user may use any of the generated suggestions to acquire the Boolean.

In some implementations user may e.g. via window select one or more of the suggestions and acquirer process may insert the code for the selected suggestion required to convert from the instances of objects in the current context and the required object at the current code point e.g. where the cursor is currently located in the code for IDE application . For example suppose in the example the first suggested acquisition method such as in the above example B is chosen by the developer e.g. user . Then the code may become e.g. 

In some implementations if the threshold number of suggestion are not discovered by acquirer process or if user requests more suggestions via user interface acquirer process may again review the parameters of the above noted constructors and methods that may be used to acquire the instance of the required object. For those that may not be available in the current context of user e.g. via IDE application acquirer process may iterate the above noted scanning e.g. scanning for instances of objects in an editor of the software development application scanning code for at least one of constructors and methods that return instances of the object and scanning one or more parameters of at least one of the constructors and methods looking for ways that these parameters may be acquired from the instances of objects that may be available in the current context of user . Using this example technique the object acquisition in the above example D may be discovered. For example suppose there are currently no local or instance variables in the current context of user in IDE application e.g. 

Further suppose user selects the above noted Suggest Ways to Acquire Object Instance function enabled by acquirer process and chooses e.g. via a drop down menu or enters Address as the required object type input received by acquirer process . In the example following the above noted techniques of acquire process acquirer process may first identify that addressLookupService.getHomeAddress and currentLocationService.getCurrentAddress may both return an instance of Address. Acquirer process may further recognize that user via IDE application may not have access to an instance of addressLookupService and or currentLocationService in the current context of IDE application . In the second iteration IDE application e.g. via acquirer process may identify that the required instances addressLookupService and currentLocationService may be returned from the static methods ServiceLocator.getAddressLookupService and ServiceLocator.getCurrentLocationService respectively. IDE application e.g. via acquirer process may identify that these methods have no parameters and thus no further iterations need be required. In the example acquirer application may generate the following example recommendations 

In some implementations generating the output including one or more suggestions how to acquire the instance may include forming a tree of instance acquisition methods. For example acquirer process may rely on the code having been indexed by IDE application as noted above. Indexed may broadly be referred to as having IDE application build a graph of some or all of the ways that the objects and their constructors and methods may be related to each other. In some implementations acquirer process may rely on the graph to form the tree. For example and referring at least to user interface may include a window that displays a tree of suggestions generated by acquirer process using the above noted techniques. The search for objects that may in turn be acquired from each other may form a tree of instance acquisition methods in which it may be the paths that allow the acquisition of the instance of the required object e.g. node with the instances of objects that user e.g. via IDE application may already have e.g. node . Each branch e.g. branch in the path may include the technique s of how the instance of the required object may be acquired e.g. a chain method call by acquirer process . Acquirer process may continue the iterative process deeper into instance acquisition tree until e.g. user via acquirer process identifies an instance acquisition path in instance acquisition tree with which user is happy. In some implementations tree may include the one or more suggestions ordered from the simplest methods to the most complex methods of acquiring the instance. For example acquirer process may order the matches with shortest e.g. most direct and simplest branch path s from node to node first. For instance the first results shown may be the simplest method to acquire the required instance from the instances that are available to user e.g. via IDE application . As noted above user may select one or more of the suggestions and acquirer process may insert the code selected at the current code point.

While one or more of the above examples may be written in Java it will be appreciated that similar examples may apply to any object oriented programming language such as but not limited to C C JavaScript etc. As such the description of using any specific object oriented programming language should be taken as an example only and not to otherwise limit the scope of the disclosure.

The terminology used herein is for the purpose of describing particular implementations only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps not necessarily in a particular order operations elements and or components but do not preclude the presence or addition of one or more other features integers steps not necessarily in a particular order operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications variations and any combinations thereof will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The implementation s were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure for various implementation s with various modifications and or any combinations of implementation s as are suited to the particular use contemplated.

Having thus described the disclosure of the present application in detail and by reference to implementation s thereof it will be apparent that modifications variations and any combinations of implementation s including any modifications variations and combinations thereof are possible without departing from the scope of the disclosure defined in the appended claims.

