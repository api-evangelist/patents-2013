---

title: Enabling real-time testing of on-demand infrastructure
abstract: Provided are techniques for demonstrating the efficiency and effectiveness of a customer's information technology (IT) system and applications operating in a shared IT, or electronic business on-demand, environment. A test suite mimics hypothetical settings in an on-demand services environment () and then determines how the settings affect the allocation of resources in the on-demand services environment (). The calculated allocation of resources is then compared to one or more service level agreements (SLAs) in order to determine compliance with a particular SLA.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09020794&OS=09020794&RS=09020794
owner: International Business Machines Corporation
number: 09020794
owner_city: Armonk
owner_country: US
publication_date: 20130409
---
The present application is a continuation and claims the benefit of the filing date of an application entitled Enabling Real Time Testing of On Demand Infrastructure to Predict Service Level Agreement Compliance Ser. No. 10 815 233 filed Mar. 31 2004 now U.S. Pat. No. 8 417 499 assigned to the assignee of the present application and herein incorporated by reference.

The present invention relates generally to electronic business on demand EBOD and more specifically to techniques for providing a real time infrastructure scenario testing within an EBOD environment.

For decades International Business Machines Corp. IBM of Armonk N.Y. has been at the forefront of new paradigms in business computing. Currently IBM is developing a new computing utility service initiative or e business on demand EBOD . Briefly EBOD is a form of information technology IT based upon power by the hour in which a client pays only for the level of computing services actually used. Customers of IBOD transfer their IT environment to a utility management infrastructure UMI and pay only for the actual computing services received. Like electricity water and gas IT is treated as another utility. Thus by eliminating the responsibility of building and maintaining IT operations providing necessary education and training to administrators and having to comply with applicable regulations the customer can focus on their core business while enjoying variable pricing automated processes and the invaluable resilience and responsiveness of a shared infrastructure provided by IBM.

Customers transitioning from a dedicated IT environment to an EBOD environment may be concerned about the efficiency of the new paradigm and their loss of control of actual IT operations. Although current vendors of shared IT infrastructure may allow customers to analyze the responsiveness or their IT system there are no real time service testing tools that support the new emerging utility like middleware such as The IBM EBOD infrastructure.

Existing products include typical system testing suites WinRunner published by Mercury Interactive Inc. of Sunnyvale Calif. and the forthcoming Blue Typhoon graphical user interface GUI by IBM. Typical system testing suites simply employ computer commands such as top sar wait vmastat netstat and ping to determine utilization of resources such as CPU memory disks and network but do not provide a way to test hypothetical loads.

WinRunner captures actual IT events and then based upon the captured events. emulates users performing the work of maneuvering through a series of GUIs either client or web based. The number of users can be adjusted but WinRunner only test hits on application specific functionalities requiring some type of user interface. In other words WinRunner tests user interfaces rather than simulating the stress on a particular application and the use of specific shared capabilities like processing network functionality and data storage.

Blue Typhoon GUI is a Java swing applet application that enables customers to modify computing capacity and allocate and or de allocate computing resources. Although this approach provides customers with a passive view of resources Blue Typhoon does not provide a way to retrieve share system application data in an active manner with real life real time testing.

Provided is an apparatus and method for modelling the efficiency and effectiveness of a customer s information technology IT system and applications operating in a shared IT environment. The claimed subject matter enables a Universal Management Infrastructure UMI provider to demonstrate whether or not an actual customer s request will match or exceed limits of the customer s service level agreement SLA . Desired IT settings are able to be simulated in the UMI environment by means of a test suite. The test suite enables the customers to generate a production level load and stress on to virtual computer thus gaining insight into their particular e business on demand EBOD environment. This capability enables the customer to identify possible system flaws in advance so that necessary adjustments can be made to maximize the efficiency of their subscribed services. In other words the claimed subject matter enables the customer to configure and perform real time testing of their EBOD environment.

The IBM UMI environment consists of resources such as processing network and data storage that can handle a large number of users and transactions in the system. A particular client typically only needs a small fraction of this capacity and contracts for a desired level of service. Using helpdesk software such as Tivoli Service Desk TSD provided by IBM as an example the claimed subject matter is able to simulate accesses to detect system response detect whether or not endpoint machines are optimizing resources such as network storage capacity and transmit a load representative of that which an typical end user help desk agent would perform on a daily basis. In this manner a customer can analyze and understand the behavior of the virtual computer and more importantly the behavior of their company s critical applications within the UMI.

The present invention enables the customer to compare a hypothetical load against a SLA so that adjustments can be made if necessary to manage or optimize the SLA. In addition prior to the formation of a SLA a potential customer can be assured that a proposed SLA is optimized and meets their needs.

This summary is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the invention will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description.

Although described with particular reference to a UMI environment the claimed subject matter can be implemented in any information technology IT system in which load and or stress testing is desirable. Those with skill in the computing arts will recognize that the disclosed embodiments have relevance to a wide variety of computing environments in addition to those described below. In addition the methods of the disclosed invention can be implemented in software hardware or a combination of software and hardware. The hardware portion can be implemented using specialized logic the software portion can be stored in a memory and executed by a suitable instruction execution system such as a microprocessor personal computer PC or mainframe.

Turning now to the figures is a block diagram of an exemplary Universal Management Infrastructure UMI architecture incorporating the claimed subject matter. An enterprise services a number of customers such as a customer  a customer  a customer  a customer  and a customer  . Enterprise also has relations with a number of suppliers a supplier  a supplier  and a supplier  . For the sake of this example the particular type of business engaged in by enterprise is not specified because UMI architecture as well as the claimed subject matter can be applied to practically any type of business that employs an information technology IT infrastructure. In fact UMI architecture can even apply to a hypothetical business that does not have customers and or suppliers.

In this example suppliers provide parts and services to enterprise and customers purchase products or offerings . Enterprise includes a business process  a business process  and a business process  to enable enterprise to convert parts and services into offerings . Examples of types of business processes include but are not limited to a manufacturing supply system an accounting system a billing system a customer management system and a payroll system. The specific number of customers suppliers and business processes are used for the sake of an example only the claimed subject matter applies equally well to small medium and large enterprises with any particular number of such relationships.

Enterprise incorporates a virtualized infrastructure or an On Demand services ODS Framework which in this example is an e business on demand EBOD environment designed by international Business Machines Corp. IBM of Armonk N.Y. The IBM EBOD environment is designed for business customers and can deliver accounting human resource and customer relationship management applications over the Internet for a usage based charge or can be used to provide computing resources e.g. processors storage memory to a company as needed to support their operation.

Also included in is a business systems block which represent any or all particular business process that may be required to provide access to one or more of the various ODS services offered by enterprise . Business systems is coupled to ODS framework via an order enable block which can represent software hardware or human operators for communicating information from business systems to ODS framework .

ODS framework includes an integration hub for coordinating the interactions among business system ODS services and ODS framework . Integration hub includes a workflow component and an integration middleware component . Workflow component manages communication and requests from business systems and integration middleware component communication and requests from ODS block . While workflow component communicates primarily with integration middleware component integration middle ware component is responsible for handling communication and requests from both workflow component and ODS services block to and from a UMI base services to ODS component .

UMI base services include a portal which is a communications interface between UMI base services the rest of ODS framework and any entity such as software from another vendor that is external to ODS framework and requires a direct communication link to UMI base services . Those with skill in the computing arts will realize there are a number of methods of implementing portal including but not limited to APIs and secure sockets. Additional components of UMI base services include a help desk component a service level agreement SLA component a provisioning component a reporting component a Monitoring and Management component a billing component a metering component and a test center component .

Help desk component may be either an automated system such as a typical telephone response system or a fully or partially human staffed system in which help desk component serves to automate communication and data retrieval tasks for employees that work at a corresponding help desk department of enterprise .

Service level agreement SLA management component monitors and controls the interactions between OSD framework and the client enterprise. Interactions include access to system resources by customers and or suppliers . A SLA is typically a contractual agreement between the provider of ODS framework and the enterprise concerning the amount of resources of ODS framework to which the enterprise is entitled and the cost of those resources. In other words SLA management component determines whether or not enterprise usage and UMI services are meeting exceeding or otherwise complying with their specific SLA and then takes appropriate actions based upon that information. Data concerning SLAs is stored in a data store .

Provisioning engine provides for the automation of tasks and the distribution of resources related to the resources within ODS framework . Specifically provisioning engine enables the allocation of resources such as servers data storage network resources and firewalls to meet enterprise demand as required by an SLA. In addition provisioning engine facilitates the distribution of software within the ODS framework .

Reporting component is responsible for the production of reports on any or all of enterprise business processes and and ODS framework . Reports may include but are not limited to production reports billing reports inventory reports customer reports performance reports and SLA compliance reports. Pre defined report templates and generated reports are stored in data store .

Monitoring and Management M M component is responsible for the collection of information on and provides the interface for the management of OSD framework and the other UMI base services . Collected information is stored in data store and is made available either directly or through data store to help desk reporting component and a billing component explained below.

Billing component produces invoicing and billing information for the enterprise for its use of ODS framework based primarily on information from SLA management component and a metering component described below.

Metering component keeps track of enterprise use of ODS framework as well as any necessary internal information relative to the operation of ODS framework . Information collected by metering component is stored in data store and available for use by help desk component reporting component M M component and billing component .

Finally test center component controls such activities as customer profiling test data generation and test storage and scheduling for ODS framework . Test center component is explained in more detail below in conjunction with .

Requests that arrive to integration hub following authentication by CAA and login by CLA are then routed to appropriate UMI components . For example metering component both records a particular user s access by way of CLA and records the particular users usage of ODS framework . As explained above workflow component regulates integration middleware with respect to the management of transactions within ODS framework . Workflow component enables automation of operational processes among UMI components . Workflow component also coordinates processes that are partly manual steps and partly automated steps. For manual steps workflow component performs tasks such as but not limited to tracking progress enforcing time limits and sending alerts based on preset business rules.

An initial ODS request from a particular user such as a customer or a supplier typically needs to be authenticated by ODS framework . This is accomplished by integration hub which extracts an ODS identification ID from a digital certificate in the initial request and transmits ODS ID to CAA . Typically the ODS ID which can be but is not limited to a password is established when ODS is setup for a particular client. CAA then employs the digital certificate for authentication and authorization. Basically CAA performs authentication and authorization based upon an ODS ID SPI mapping retrieved in response to a request to data store .

If the particular user is authenticated then CAA transmits an ODS authorization back to integration hub . Once integration hub has received this authorization integration hub is able to send and receive requests and responses from UMI components on behalf of the authenticated user. For the sake of simplicity only billing component illustrates requests and responses broken out into separate paths representing requests and responses . Finally the authentication and authorization activity is logged to CLA .

Resource profiler component compiles resource profile data which is stored in data store . Resource profile data represents a particular client s resources allotments in the ODS framework as well as any other available resources. Examples of allocated resources might include but are not limited to processing cycles number of required servers network bandwidth and data storage requirements. Each of the allocated resources have parameters associated with them such as a base resource allotment a maximum resource allotment a resource cost and rules for dynamically reallocating the resources based upon the client s workload demand. An example of an available resource is the types of available processors. For example a user might have contracted to use an Intel architecture but have a need to know how their applications function in a more robust server environment.

Workload profiler component generates workload profile data also stored in data store . Workload profile data represents a particular client s typical workload with respect to the client s allocated resources as described in the customer s resource profile data or workload with respect to allocations that use resources. For example business process  of enterprise may typically generate one hundred 100 calls per day to billing component of ODS framework with each request averaging one kilobyte and each response averaging two kilobytes. In addition one transactions may require an average of one hundred 100 processing cycles to generate a response from an average request and generate a one megabyte chunk of data storage . This information is stored in workload profile data as a typical workload for business process  . Each business process has data in workload profile data corresponding to its typical transactions and each transaction s utilization of such parameters as processing cycles bandwidth and data storage.

In addition to workload profile data based upon a particular customer s actual usage workflow profile data includes data corresponding to a hypothetical client perhaps based upon a collective or predicted average. In this manner a potential customer can generate and examine scenarios corresponding to a potential workload thus either assuring themselves that ODS framework can handle the business or predicting a particular level of SLA that might be appropriate for the potential client. Workload profile data can also be stored in configuration files so that various hypothetical scenarios are saved for future reference and can be modified if necessary.

Simulation engine employs workload profile data to generate hypothetical workloads based upon projected changes in a client s workload entered by the client or administrator via the manipulation of parameters in a GUI not shown . For example based upon a figure for an average number of transactions to billing component simulation engine can estimate resources of ODS framework that would be required to increase an average workflow of one hundred transactions per day to two hundred transactions per day. Simulations can be generated with varying degrees of granularity. For example a client may know that business process  is going to experience a surge in demand on a certain date. In this case workflow profile data includes information indicating that business process  typically executes one hundred 100 transactions against billing component fifty transactions on reporting component two hundred transactions on metering component and so on. Simulation engine then generates hypothetical workloads corresponding to each particular applicable component . Various combinations of parameters can be saved by a client so that a particular simulation represented by a specific set of parameters can be rerun or tweaked simply by modifying the stored set of parameters. This feature prevents the unnecessary reentry of parameters.

In addition to a creating an estimation of ODS framework response to a particular hypothetical demand simulation engine can actually use simulated data to make a physical test on ODS framework . For example using the example above of one transactions that requires one hundred 100 processing cycles and one megabyte chunk of data storage simulation data generator generates appropriately sized dummy programs network data packets and blocks of simulated data so that simulation engine is a able to actually consume processing cycles transmit network traffic and allocates blocks of data storage in amounts that equal the hypothetical load. In this manner the hypothetical workload is simulated using the actual available resources and infrastructure. An exemplary data acquisition process is described below in conjunction with .

Simulation engine can create hypothetical schedules for predicted or hypothetical workloads so that the effect of timing issues can be factored into the simulation. For example the client may know that web traffic and corresponding product orders from customers typically peak between 5 00 pm and 6 00 pm and that report processing can be delayed until after the 5 00 rush. In this case different types of processing can be segregated from each other and the effect of various segregation schemes can be evaluated.

In an alternative embodiment simulation engine can make predictions on hypothetical scenarios of a first client based upon a match between the hypothetical scenario and actual resource profile data and workload profile data corresponding to a second client whose actual data closely matches the hypothetical scenario.

Profile comparator compares the hypothetical workloads produced by simulation engine then to resource profile data . In this manner test center determines whether or not enough resources exist and whether or not the existing resources are available to service the hypothetical workload. It should be noted that this determination is accomplished without impact on the actual resources of ODS framework other than perhaps hits on data store and the processing cycles required to perform the simulation itself.

Compliance monitor takes the results of both simulation engine and profile comparator and determines whether or not projected or hypothetical workloads either will attempt to utilize unavailable resources or violate the terms of a client s SLA which is stored in a SLA data portion of data store . The ability to create multiple hypothetical workloads and evaluates them with simulation engine enables the client to determine an appropriate SLA for projected business and whether a current SLA is cost efficient.

Once processing of simulation engine profile comparator and compliance monitor is complete then ODS framework signals the client with the results.

Control then proceeds to a Retrieve Workload Profile step in which process retrieves workload profile data corresponding to the client s whose resource profile data was retrieved in step . As explained above in conjunction with workload profile data represents the particular client s typical workload with respect to the client s allocated resources as described in the customer s resource profile data . In addition various parameters may have corresponding importance and or prioritization attributes that affect a particular simulation.

Once a particular client s resource profile data and workload profile data have been retrieved control proceeds to a Modify Workload Profile step in which the client can modify parameters in the retrieved workflow profile data in order to express hypothetical scenarios or projected workflow such as sudden spikes in demand for website access. In other words by modifying workflow profile data the client can test anticipated changes in the client s actual workflow. Changes to workflow profile data are accomplished via a GUI not shown the creation and operation of which should be understood by those with skill in the programming arts. Further alternative scenarios and their corresponding workload profile data can be stored in configuration files loaded into process during step and modified if necessary in step .

Once the client has modified the desired parameters in step the control proceeds to a Simulate Operation step in which process simulates the projected workflow as performed on the resources defined in the client s resource profile data . Simulation operation step is explained in more detail below in conjunction with . Next control proceeds to a Compare Operation to SLA step in which first SLA data is retrieved from data store and then the results of the simulation operation performed in step is compared to the clients SLA data .

Control then proceeds to a SLA Sufficient step in which process determines whether or not the projected workflow as calculated in step exceeds the client s limits with respect to resources as defined in the client s SLA. If the projected workflow does not exceed to client s SLA then the client is notified of that first and control proceeds to an End Simulation step in which processing is complete. If in step the projected workflow exceeds the client s limits as defined by the SLA then control proceeds to a Generate New SLA step in which SLA data is modified so that SLA data conforms with the results of the simulation. In addition process may interact with billing component in order to calculate a cost associated with the needed level of service predicted by the simulation.

The modified SLA data is then presented to the client so that the client can determine whether or not to modify their SLA so that ODS framework can handle the expected workload within the agreement. Multiple possible conforming SLAs along with their respective cost may be proposed to the client based upon a particular simulation. For example the simulation may raise the possibility that a client s business may be better served by switching from an Intel architecture agreement to a server based agreement. In the alternative process instead of predicting a needed level SLA predicts a maximum work load a particular SLA can tolerate before the client is in violation of the agreement.

If there is sufficient historical data then control proceeds to a Retrieve Data step in which the historical data is retrieved from data store . If not then control proceeds to a Generate Data step in which process creates relevant test data for the next step of the process. Relevant test data may be actually simulated data such as dummy client files and transactions or simply blocks of random data of an appropriate size. Of course if there is some historical data but not enough to provide a meaningful simulation control would proceed from step to step and only the data that is needed would be generated.

Once data has been acquired either retrieved data in step generated data in step or some combination of the two then control proceeds to an Actual Resources step in which process determines whether or not to calculate the simulated data s load on ODS framework or actually generate the load on the resources of framework . This decision can be based on either an administrator s or user s preference. For example an administrator may determine that simulations are permitted to utilize actual resources only during off hours and that during other times only calculated simulations can be run.

If in step process determines that actual resources are to be utilized in the simulation then control proceeds to an Execute Simulation step in which the retrieved and or generated data is actually used to transmit packets generate processing cycles occupy a portion of data store and so on. During step relevant information is collected to determine the load s impact on the resources of ODS framework . If in step process determines that actual resources are not to be used then control proceeds to a Calculate Simulation step in which the relevant information on the load s impact of ODS framework is extrapolated based upon the retrieved and or generated data. Finally from both steps and control proceeds to an End Simulation Operation step in which process is Complete.

While the invention has been shown and described with reference to particular embodiments thereof it will be understood by those skilled in the art that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention including but not limited to additional less or modified elements and or additional less or modified steps performed in the same or a different order.

