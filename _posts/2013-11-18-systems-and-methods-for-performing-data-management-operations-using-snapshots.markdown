---

title: Systems and methods for performing data management operations using snapshots
abstract: A system stores a snapshot and an associated data structure or index to storage media to create a secondary copy of a volume of data. In some cases, the associated index includes application specific data about a file system or other application that created the data to identify the location of the data. The associated index may include three entries, and may be used to facilitate the recovery of data via the snapshot. The snapshot may be used by ancillary applications to perform various functions, such as content indexing, data classification, deduplication, e-discovery, and other functions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268602&OS=09268602&RS=09268602
owner: Commvault Systems, Inc.
number: 09268602
owner_city: Tinton Falls
owner_country: US
publication_date: 20131118
---
This application is a divisional of U.S. patent application Ser. No. 12 979 101 entitled SYSTEMS AND METHODS FOR PERFORMING DATA MANAGEMENT OPERATIONS USING SNAPSHOTS filed Dec. 27 2010 which claims priority to and the benefit of U.S. Patent Application No. 61 291 803 entitled SYSTEMS AND METHODS FOR PERFORMING DATA MANAGEMENT OPERATIONS USING SNAPSHOTS filed on Dec. 31 2009 and is related to U.S. patent application Ser. No. 12 558 947 filed on Sep. 14 2009 entitled USING A SNAPSHOT AS A DATA SOURCE and U.S. patent application Ser. No. 12 978 984 filed on Dec. 27 2010 entitled SYSTEMS AND METHODS FOR ANALYZING SNAPSHOTS each of which is incorporated by reference in its entirety.

Current storage management systems employ a number of different methods to perform storage operations on electronic data. For example data can be stored in primary storage as a primary copy or in secondary storage as various types of secondary copies including as a backup copy a snapshot copy a hierarchical storage management copy HSM as an archive copy and as other types of copies.

A primary copy of data is generally a production copy or other live version of the data which is used by a software application and is generally in the native format of that application. Primary copy data may be maintained in a local memory or other high speed storage device that allows for relatively fast data access if necessary. Such primary copy data is typically intended for short term retention e.g. several hours or days before some or all of the data is stored as one or more secondary copies for example to prevent loss of data in the event a problem occurred with the data stored in primary storage.

Secondary copies include point in time data and are typically for intended for long term retention e.g. weeks months or years depending on retention criteria for example as specified in a storage policy as further described herein before some or all of the data is moved to other storage or discarded. Secondary copies may be indexed so users can browse and restore the data at another point in time. After certain primary copy data is backed up a pointer or other location indicia such as a stub may be placed in the primary copy to indicate the current location of that data.

One form of secondary copy is a snapshot copy. From an end user viewpoint a snapshot may be seen as an instant image of the primary copy data at a given point in time. A snapshot generally captures the directory structure of a primary copy volume at a particular moment in time and also preserves file attributes and contents. In some embodiments a snapshot may exist as a virtual file system parallel to the actual file system. Users typically gain a read only access to the record of files and directories of the snapshot. By electing to restore primary copy data from a snapshot taken at a given point in time users may also return the current file system to the prior state of the file system that existed when the snapshot was taken.

A snapshot may be created instantly using a minimum of file space but may still function as a conventional file system backup when stored at or near the file system. A snapshot may not actually create another physical copy of all the data but may simply create pointers that are able to map files and directories to specific disk blocks. The snapshot may be a copy of a set of files and or directories as they were at a particular point in the past. That is the snapshot is an image or representation of a volume of data at a point in time. A snapshot may be as a secondary copy of a primary volume of data such as data in a file system an Exchange server a SQL database an Oracle database and so on. The snapshot may be an image of files folders directories and other data objects within a volume or an image of the blocks of the volume.

Data storage systems utilize snapshots for a variety of reasons. One typical use of snapshots is to copy a volume of data without disabling access to the volume for a long period. After performing the snapshot the data storage system can then copy the data set by leveraging the snapshot of the data set. Thus the data storage system performs a full backup of a primary volume when a primary volume is active and generating real time data. Although performing a snapshot i.e. taking an image of the data set is a fast process the snapshot is typically not an effective or reliable backup copy of a data set because it does not actually contain the content of the data set. Restoring data from snapshots can be especially cumbersome because a restoration process cannot restore the data set using snapshots alone. Recovery of individual files or folders can be especially cumbersome because typical systems often recover an entire snapshot in order to restore an individual file or folder imaged by the snapshot.

However the speed of performing or taking a snapshot can often be a great benefit to data storage systems that are required to store large amounts of data. Thus utilizing snapshots in ways other than those described above may provide significant utility to data storage systems because snapshots are fast are space efficient and facilitate performing off host data storage operations among other advantages.

The need exists for a system that overcomes the above problems as well as one that provides additional benefits. Overall the examples herein of some prior or related systems and their associated limitations are intended to be illustrative and not exclusive. Other limitations of existing or prior systems will become apparent to those of skill in the art upon reading the following Detailed Description.

The headings provided herein are for convenience only and do not necessarily affect the scope or meaning of the claimed invention.

Described in detail herein is a system and method that employs snapshots as data sources such as backup copies of data. Instead of treating a snapshot only as a picture of a disk the system employs snapshots as a data source that can be backed up or otherwise copied to tape or magnetic disk. The system can then seamlessly restore individual files from tape or disk using snapshots. The system creates a data structure such as an index that describes what is on a disk as often defined by a file system for that disk . The index may provide a list of files on the disk and location information indicating where each file is located with respect to the snapshot.

In some examples the system creates a secondary copy of data by storing a snapshot with an index associated with and or related to the snapshot. The snapshot identifies the data stored in the secondary copy and the index provides application specific context information that facilitates retrieving data identified by the snapshot. In these examples the system may store a combination of a snapshot and associated index to storage media such as to tape or disk and use the stored combination as a data source such as a backup copy of a primary volume of data.

The system may create the index in a number of ways as long as the index can be used in combination with a snapshot to facilitate data storage and or recovery via the snapshot. For example an index agent may receive a snapshot of a data set receive application context information associated with the snapshot store the snapshot and store the application context information in an index that identifies individual files from the data set imaged by the snapshot.

In some examples the system provides for the recovery or restoration of data from a snapshot based data source. The recovery may be transparent to a user that is the user does not know what mechanism is used during a restore process and or seamless with respect to other types of data sources. For example the system may restore a data set by restoring a full backup of the data set using a snapshot based secondary copy of the data set and incremental backups using other secondary copies.

In some cases the system restores individual files using snapshots and associated indices. For example the system may receive a request to restore a specific file or portion of a file identify a snapshot containing an image of a volume containing the file look to an index associated with the snapshot to identify the file and retrieve the file or a copy of the file from information in the associated index. Thus the system facilitates granular recovery of data objects within a data set without requiring a data recovery system to restore entire snapshots or secondary copies.

The system also facilitates techniques for enabling ancillary applications to perform functions using the snapshot data. Ancillary applications such as indexing and search applications electronic discovery applications information management applications tagging applications as well as other applications may require secondary copies to be in a specific format. In some examples the techniques described herein provide an interface to snapshot data that is the same or at least substantially similar as an interface used to access secondary copies of data created using other techniques such as backup or copy techniques. Accordingly ancillary applications can perform functions on snapshot data using the same techniques used to perform functions on other secondary copies of data.

Various examples of the invention will now be described. The following description provides specific details for a thorough understanding and enabling description of these examples. One skilled in the relevant art will understand however that the invention may be practiced without many of these details. Likewise one skilled in the relevant art will also understand that the invention may include many other obvious features not described in detail herein. Additionally some well known structures or functions may not be shown or described in detail below so as to avoid unnecessarily obscuring the relevant description.

The terminology used below is to be interpreted in its broadest reasonable manner even though it is being used in conjunction with a detailed description of certain specific examples of the invention. Indeed certain terms may even be emphasized below however any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.

While aspects of the invention such as certain functions are described as being performed exclusively on a single device the invention can also be practiced in distributed environments where functions or modules are shared among disparate processing devices which are linked through a communications network such as a Local Area Network LAN Wide Area Network WAN and or the Internet. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Aspects of the invention may be stored or distributed on tangible computer readable media including magnetically or optically readable computer discs hard wired or preprogrammed chips e.g. EEPROM semiconductor chips nanotechnology memory biological memory or other data storage media. Alternatively computer implemented instructions data structures screen displays and other data under aspects of the invention may be distributed over the Internet or over other networks including wireless networks on a propagated signal on a propagation medium e.g. an electromagnetic wave s a sound wave etc. over a period of time or they may be provided on any analog or digital network packet switched circuit switched or other scheme .

Aspects of the invention will now be described in detail with respect to . and illustrate various components of a data storage system that may employ aspects of the invention. illustrates an example data storage system. illustrates in more detail certain components of the example data storage system of . illustrates components of a data stream that may be utilized by a data storage system in performing data storage operations. illustrates in more detail certain components of the example data storage system of . illustrates certain components of a client in a data storage system according to some examples.

The system may generally include combinations of hardware and software components associated with performing storage operations on electronic data. Storage operations include copying backing up creating storing retrieving and or migrating primary storage data e.g. data stores and or and secondary storage data which may include for example snapshot copies backup copies hierarchical storage management HSM copies archive copies and other types of copies of electronic data stored on storage devices . The system may provide one or more integrated management consoles for users or system processes to interface with in order to perform certain storage operations on electronic data as further described herein. Such integrated management consoles may be displayed at a central control facility or several similar consoles distributed throughout multiple network locations to provide global or geographically specific network data storage information.

In one example storage operations may be performed according to various storage preferences for example as expressed by a user preference a storage policy a schedule policy and or a retention policy. A storage policy is generally a data structure or other information source that includes a set of preferences and other storage criteria associated with performing a storage operation. The preferences and storage criteria may include but are not limited to a storage location relationships between system components network pathways to utilize in a storage operation data characteristics compression or encryption requirements preferred system components to utilize in a storage operation a single instancing or variable instancing policy to apply to the data and or other criteria relating to a storage operation. For example a storage policy may indicate that certain data is to be stored in the storage device retained for a specified period of time before being aged to another tier of secondary storage copied to the storage device using a specified number of data streams etc.

A schedule policy may specify a frequency with which to perform storage operations and a window of time within which to perform them. For example a schedule policy may specify that a storage operation is to be performed every Saturday morning from 2 00 a.m. to 4 00 a.m. A retention policy may specify how long data is to be retained at specific tiers of storage or what criteria must be met before data may be pruned or moved from one tier of storage to another tier of storage. In some cases the storage policy includes information generally specified by the schedule policy and or the retention policy. Put another way the storage policy includes the schedule policy and or the retention policy. Storage policies schedule policies and or retention policies may be stored in a database of the storage manager to archive media as metadata for use in restore operations or other storage operations or to other locations or components of the system .

The system may comprise a storage operation cell that is one of multiple storage operation cells arranged in a hierarchy or other organization. Storage operation cells may be related to backup cells and provide some or all of the functionality of backup cells as described in the assignee s U.S. patent application Ser. No. 09 354 058 now U.S. Pat. No. 7 395 282 which is incorporated herein by reference in its entirety. However storage operation cells may also perform additional types of storage operations and other types of storage management functions that are not generally offered by backup cells.

Storage operation cells may contain not only physical devices but also may represent logical concepts organizations and hierarchies. For example a first storage operation cell may be configured to perform a first type of storage operations such as HSM operations which may include backup or other types of data migration and may include a variety of physical components including a storage manager or management agent a secondary storage computing device a client and other components as described herein. A second storage operation cell may contain the same or similar physical components however it may be configured to perform a second type of storage operations such as storage resource management SRM operations and may include monitoring a primary data copy or performing other known SRM operations.

Thus as can be seen from the above although the first and second storage operation cells are logically distinct entities configured to perform different management functions i.e. HSM and SRM respectively each storage operation cell may contain the same or similar physical devices. Alternatively different storage operation cells may contain some of the same physical devices and not others. For example a storage operation cell configured to perform SRM tasks may contain a secondary storage computing device client or other network device connected to a primary storage volume while a storage operation cell configured to perform HSM tasks may instead include a secondary storage computing device client or other network device connected to a secondary storage volume and not contain the elements or components associated with and including the primary storage volume. The term connected as used herein does not necessarily require a physical connection rather it could refer to two devices that are operably coupled to each other communicably coupled to each other in communication with each other or more generally refer to the capability of two devices to communicate with each other. These two storage operation cells however may each include a different storage manager that coordinates storage operations via the same secondary storage computing devices and storage devices . This overlapping configuration allows storage resources to be accessed by more than one storage manager such that multiple paths exist to each storage device facilitating failover load balancing and promoting robust data access via alternative routes.

Alternatively or additionally the same storage manager may control two or more storage operation cells whether or not each storage operation cell has its own dedicated storage manager . Moreover in certain embodiments the extent or type of overlap may be user defined through a control console or may be automatically configured to optimize data storage and or retrieval.

The clients typically include application software for performing various operations. Clients typically also include an operating system on which the application software runs. A file system can be provided to facilitate and control file access by the operating system and application software. File systems can facilitate access to local and remote storage devices for file or data access and storage. Clients can also include local storage such as a media module media drive with fixed or removable media.

In some examples the clients include storage mechanisms for allowing computer programs or other instructions or data to be loaded into memory for execution. Such storage mechanisms might include for example a fixed or removable storage unit and an interface. Examples of such storage units and interfaces can include a program cartridge and cartridge interface a removable memory for example a flash memory or other removable memory module and memory slot a PCMCIA slot and card and other fixed or removable storage units and interfaces that allow software and data to be transferred from the storage unit to memory.

Data agent may be a software module or part of a software module that is generally responsible for performing storage operations on the data of the client stored in data store or other memory location. Each client may have at least one data agent and the system can support multiple clients . Data agent may be distributed between client and storage manager and any other intermediate components or it may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent .

As used herein the term module might describe a given unit of functionality that can be performed in accordance with one or more embodiments of the present invention. As used herein a module might be implemented utilizing any form of hardware software firmware or a combination thereof. For example one or more processors controllers ASICs PLAs logical components software routines or other mechanisms might be implemented to make up a module. In implementation the various modules described herein might be implemented as discrete modules or the functions and features described can be shared in part or in total among one or more modules. In other words as would be apparent to one of ordinary skill in the art after reading this description the various features and functionality described herein may be implemented in any given application and can be implemented in one or more separate or shared modules in various combinations and permutations. Even though various features or elements of functionality may be individually described or claimed as separate modules one of ordinary skill in the art will understand that these features and functionality can be shared among one or more common software and hardware elements and such description shall not require or imply that separate hardware or software components are used to implement such features or functionality.

The overall system may employ multiple data agents each of which may perform storage operations on data associated with a different application. For example different individual data agents may be designed to handle Microsoft Exchange data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data Microsoft SQL Server data Microsoft Sharepoint Server data and other types of data known in the art. Other embodiments may employ one or more generic data agents that can handle and process multiple data types rather than using the specialized data agents described above.

If a client has two or more types of data one data agent may be required for each data type to perform storage operations on the data of the client . For example to back up migrate and restore all the data on a Microsoft Exchange server the client may use one Microsoft Exchange Mailbox data agent to back up the Exchange mailboxes one Microsoft Exchange Database data agent to back up the Exchange databases one Microsoft Exchange Public Folder data agent to back up the Exchange Public Folders and one Microsoft Windows File System data agent to back up the file system of the client . These data agents would be treated as four separate data agents by the system even though they reside on the same client .

Alternatively the overall system may use one or more generic data agents each of which may be capable of handling two or more data types. For example one generic data agent may be used to back up migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data etc.

Data agents may be responsible for arranging or packing data to be copied or migrated into a certain format such as an archive file. Nonetheless it will be understood that this represents only one example and any suitable packing or containerization technique or transfer methodology may be used if desired. Such an archive file may include metadata a list of files or data objects copied the file and data objects themselves. Moreover any data moved by the data agents may be tracked within the system by updating indexes associated with appropriate storage managers or secondary storage computing devices . As used herein a file or a data object refers to any collection or grouping of bytes of data that can be viewed as one or more logical units.

Generally speaking storage manager may be a software module or other application that coordinates and controls storage operations performed by the system . Storage manager may communicate with some or all elements of the system including clients data agents secondary storage computing devices and storage devices to initiate and manage storage operations e.g. backups migrations data recovery operations etc. .

Storage manager may include a jobs agent that monitors the status of some or all storage operations previously performed currently being performed or scheduled to be performed by the system . One or more storage operations are alternatively referred to herein as a job or jobs. Jobs agent may be communicatively coupled to an interface agent e.g. a software module or application . Interface agent may include information processing and display software such as a graphical user interface GUI an application programming interface API or other interactive interface through which users and system processes can retrieve information about the status of storage operations. For example in an arrangement of multiple storage operations cell through interface agent users may optionally issue instructions to various storage operation cells regarding performance of the storage operations as described and contemplated herein. For example a user may modify a schedule concerning the number of pending snapshot copies or other types of copies scheduled as needed to suit particular needs or requirements. As another example a user may employ the GUI to view the status of pending storage operations in some or all of the storage operation cells in a given network or to monitor the status of certain components in a particular storage operation cell e.g. the amount of storage capacity left in a particular storage device .

Storage manager may also include a management agent that is typically implemented as a software module or application program. In general management agent provides an interface that allows various management agents in other storage operation cells to communicate with one another. For example assume a certain network configuration includes multiple storage operation cells hierarchically arranged or otherwise logically related in a WAN or LAN configuration. With this arrangement each storage operation cell may be connected to the other through each respective interface agent . This allows each storage operation cell to send and receive certain pertinent information from other storage operation cells including status information routing information information regarding capacity and utilization etc. These communications paths may also be used to convey information and instructions regarding storage operations.

For example a management agent in a first storage operation cell may communicate with a management agent in a second storage operation cell regarding the status of storage operations in the second storage operation cell. Another illustrative example includes the case where a management agent in a first storage operation cell communicates with a management agent in a second storage operation cell to control storage manager and other components of the second storage operation cell via management agent contained in storage manager .

Another illustrative example is the case where management agent in a first storage operation cell communicates directly with and controls the components in a second storage operation cell and bypasses the storage manager in the second storage operation cell. If desired storage operation cells can also be organized hierarchically such that hierarchically superior cells control or pass information to hierarchically subordinate cells or vice versa.

Storage manager may also maintain an index a database or other data structure . The data stored in database may be used to indicate logical associations between components of the system user preferences management tasks media containerization and data storage information or other useful data. For example the storage manager may use data from database to track logical associations between secondary storage computing device and storage devices or movement of data as containerized from primary to secondary storage .

Generally speaking the secondary storage computing device which may also be referred to as a media agent may be implemented as a software module that conveys data as directed by storage manager between a client and one or more storage devices such as a tape library a magnetic media storage device an optical media storage device or any other suitable storage device. In one embodiment secondary storage computing device may be communicatively coupled to and control a storage device . A secondary storage computing device may be considered to be associated with a particular storage device if that secondary storage computing device is capable of routing and storing data to that particular storage device .

In operation a secondary storage computing device associated with a particular storage device may instruct the storage device to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or restore data to or from that media. Secondary storage computing device may communicate with a storage device via a suitable communications path such as a SCSI or Fibre Channel communications link. In some embodiments the storage device may be communicatively coupled to the storage manager via a SAN.

Each secondary storage computing device may maintain an index a database or other data structure that may store index data generated during storage operations for secondary storage SS as described herein including creating a metabase MB . For example performing storage operations on Microsoft Exchange data may generate index data. Such index data provides a secondary storage computing device or other external device with a fast and efficient mechanism for locating data stored or backed up. Thus a secondary storage computing device index or a database of a storage manager may store data associating a client with a particular secondary storage computing device or storage device for example as specified in a storage policy while a database or other data structure in secondary storage computing device may indicate where specifically the data of the client is stored in storage device what specific files were stored and other information associated with storage of the data of the client . In some embodiments such index data may be stored along with the data backed up in a storage device with an additional copy of the index data written to index cache in a secondary storage device. Thus the data is readily available for use in storage operations and other activities without having to be first retrieved from the storage device .

Generally speaking information stored in cache is typically recent information that reflects certain particulars about operations that have recently occurred. After a certain period of time this information is sent to secondary storage and tracked. This information may need to be retrieved and uploaded back into a cache or other memory in a secondary computing device before data can be retrieved from storage device . In some embodiments the cached information may include information regarding format or containerization of archives or other files stored on storage device .

One or more of the secondary storage computing devices may also maintain one or more single instance databases . Single instancing alternatively called data deduplication generally refers to storing in secondary storage only a single instance of each data object or data block in a set of data e.g. primary data . More details as to single instancing may be found in one or more of the following commonly assigned U.S. patent applications 1 U.S. patent application Ser. No. 11 269 512 entitled SYSTEM AND METHOD TO SUPPORT SINGLE INSTANCE STORAGE OPERATIONS 2 U.S. patent application Ser. No. 12 145 347 entitled APPLICATION AWARE AND REMOTE SINGLE INSTANCE DATA MANAGEMENT or 3 U.S. patent application Ser. No. 12 145 342 entitled APPLICATION AWARE AND REMOTE SINGLE INSTANCE DATA MANAGEMENT 4 U.S. patent application Ser. No. 11 963 623 entitled SYSTEM AND METHOD FOR STORING REDUNDANT INFORMATION 5 U.S. patent application Ser. No. 11 950 376 entitled SYSTEMS AND METHODS FOR CREATING COPIES OF DATA SUCH AS ARCHIVE COPIES 6 U.S. patent application Ser. No. 12 565 576 entitled SYSTEMS AND METHODS FOR MANAGING SINGLE INSTANCING DATA or 7 U.S. patent application Ser. No. 12 647 906 entitled BLOCK LEVEL SINGLE INSTANCING each of which is incorporated by reference herein in its entirety.

In some examples the secondary storage computing devices maintain one or more variable instance databases. Variable instancing generally refers to storing in secondary storage one or more instances but fewer than the total number of instances of each data block or data object in a set of data e.g. primary data . More details as to variable instancing may be found in the commonly assigned U.S. patent application Ser. No. 12 649 454 entitled STORING A VARIABLE NUMBER OF INSTANCES OF DATA OBJECTS .

In some embodiments certain components may reside and execute on the same computer. For example in some embodiments a client such as a data agent or a storage manager coordinates and directs local archiving migration and retrieval application functions as further described in the previously referenced U.S. patent application Ser. No. 09 610 738. This client can function independently or together with other similar clients .

As shown in each secondary storage computing device has its own associated metabase . Each client may also have its own associated metabase . However in some embodiments each tier of storage such as primary storage secondary storage tertiary storage etc. may have multiple metabases or a centralized metabase as described herein. For example rather than a separate metabase or index associated with each client in the metabases on this storage tier may be centralized. Similarly second and other tiers of storage may have either centralized or distributed metabases. Moreover mixed architecture systems may be used if desired that may include a first tier centralized metabase system coupled to a second tier storage system having distributed metabases and vice versa etc.

Moreover in operation a storage manager or other management module may keep track of certain information that allows the storage manager to select designate or otherwise identify metabases to be searched in response to certain queries as further described herein. Movement of data between primary and secondary storage may also involve movement of associated metadata and other tracking information as further described herein.

In some examples primary data may be organized into one or more sub clients. A sub client is a portion of the data of one or more clients and can contain either all of the data of the clients or a designated subset thereof. As depicted in the data store includes two sub clients. For example an administrator or other user with the appropriate permissions the term administrator is used herein for brevity may find it preferable to separate email data from financial data using two different sub clients having different storage preferences retention criteria etc.

Referring to a block diagram illustrating an example of components of a server used in data storage operations is shown. A server such as storage manager may communicate with clients to determine data to be copied to storage media. As described above the storage manager may contain a jobs agent a management agent a database a stream agent an interface agent and or other agents . Jobs agent may manage and control the scheduling of jobs such as copying data files from clients to storage devices . Management agent may control the overall functionality and processes of the data storage system or may communicate with global managers. Database or another data structure may store storage policies schedule policies retention policies or other information such as historical storage statistics storage trend statistics and so on. Interface agent may interact with a user interface enabling the system to present information to administrators and receive feedback or other input from the administrators or with other components of the system such as via APIs . The other agents may perform additional functions.

Referring to a block diagram illustrating components of a data stream that may be utilized by a data storage system is shown. The stream may originate from a client continue as indicated by reference character to a media agent and then as indicated by reference character to a secondary storage device . For example in storage operations the system may store receive and or prepare data to be stored copied or backed up at a server or client . The system may then transfer the data to be stored to media agent which may then refer to storage policies schedule policies and retention policies and other policies to choose a secondary storage device . The media agent may include a snapshot agent and an index agent although these agents may also be separate components . The secondary storage device receives the data from the media agent and stores the data as a secondary copy. Secondary storage devices may be magnetic tapes optical disks USB and other similar media disk and tape drives and so on. Of course the data storage system may employ other configurations of stream components not shown in .

The system may store one or more snapshots with an associated index in order to create a snapshot based data source such as a secondary copy of a primary volume of data. Data may be stored in various types of volumes including primary copies or production copies as well as various secondary copies such as snapshots backup copies archival copies and so on.

The system creates snapshots of blocks or chunks of data in a data store and an associated index that keeps track of the files imaged by the snapshot e.g. which blocks are associated with which files and what applications are associated with the files . Thus a snapshot becomes a way of storing data that includes application specific data. The snapshots and associated index can then be used as auxiliary copies synthetic full copies partial or full restores and other secondary copies. Using snapshots as a data source allow a data storage system to be very flexible. Also the system can manage the snapshots such as by backing them up and deleting any original versions from the system.

The system creates snapshots using a variety of mechanisms. In some examples the system employs hardware based snapshot mechanisms when creating snapshots. Examples of suitable hardware based snapshot mechanisms include EMC s Symmetrix and Clarion Hitachi Data Storage HDS Network Appliance s Snapshot and so on.

In some examples the system employs software based snapshot mechanisms. For example the system may leverage continuous data replication CDR or discrete data replication DDR when creating snapshots of a volume of data. CDR generates recovery points for a volume which can be used as a point in time snapshot of a volume. Thus leveraging the recovery points as snapshots enables the system to generate point in time copies snapshots of a volume of data while maintaining a live copy of the volume. Of course other mechanisms are possible.

Further if the data storage system employs hardware having particular capabilities such as the ability to take mirror copies or multiple snapshots that functionality may be utilized by the snapshot and associated index. Further snapshots may be manipulated with application programming interfaces APIs provided by hardware and software providers.

Referring to a block diagram illustrating a system for creating a snapshot based secondary copy of data is shown. A media agent includes a snapshot agent and an index agent . The snapshot agent creates a snapshot of a primary data store or volume and the index agent creates an index associated with the snapshot . The media agent stores the snapshot and index as a secondary copy which may be a backup copy archive copy and so on. The secondary copy or snapshot based secondary copy is stored on storage media such as magnetic tape optical disk magnetic disk and so on. In some cases the snapshot and index are logically linked within the secondary copy or across resources in a data storage enterprise. The storage media may be located remotely from the media agent or may be relocated to a geographically remote location after creation and storage of the secondary copy is complete.

The system may employ a number of different mechanisms when moving snapshots to secondary storage such as magnetic tape. In some examples the system performs block level or chunk based migration or transfer of snapshots from primary storage to secondary storage.

Briefly block level migration or block based data migration involves transferring or migrating disk blocks from a primary data store e.g. a disk partition or volume to secondary media. Using block level migration a data storage system transfers blocks on a disk that have not been recently accessed to secondary storage freeing up space on the disk. Chunked file migration or chunk based data migration involves splitting a data object into two or more portions of the data object creating an index that tracks the portions and storing the data object to secondary storage via the two or more portions. Among other things the chunk based migration provides for fast and efficient storage of a data object. Additionally chunk based migration facilitates fast and efficient recall of a data object such as a snapshot of a large database or virtual machine file. For example if a user modifies a migrated file chunk based migration enables a data restore component to only retrieve from and migrate back to secondary storage the chunk containing the modified portion of the file and not the entire file. Further details regarding block level and or chunk based data migration may be found in U.S. patent application Ser. No. 12 553 199 entitled TRANSFERRING OR MIGRATING PORTIONS OF DATA OBJECTS SUCH AS BLOCK LEVEL DATA MIGRATION OR CHUNK BASED DATA MIGRATION which is hereby incorporated by reference in its entirety.

The snapshot agent creates takes produces and or generates a snapshot or multiple snapshots of a data source such as a primary volume of data or a secondary copy of a primary volume. As discussed herein the snapshot is a representation of a set of data objects at a given point in time. The snapshot may be a complete image of a data set or may be an incremental image of a data set. Further details with respect to the snapshot process and the types of snapshots may be found in U.S. patent application Ser. No. 10 990 353 filed on Nov. 15 2004 entitled SYSTEM AND METHOD FOR PERFORMING AN IMAGE LEVEL SNAPSHOT AND FOR RESTORING PARTIAL VOLUME DATA.

Information regarding a snapshot is stored in a data structure. For example a data structure may be generally organized like the following data structure 

In the above data structure the Snapshot Identifiers may include information used to uniquely identify the snapshot. The Snapshot Engine Identifiers may include information used to identify the engine that performed the snapshot. Source Identifiers and Destination Identifiers may include information about the source of the data of which a snapshot was made and where the snapshot is stored respectively. Creation Time may be a timestamp indicating when the snapshot was made. The Snapshot Group Identifiers may identify a group to which the snapshot belongs. The Snapshot Type may include information identifying a type of the snapshot. The Storage Operation Identifiers may include information identifying a storage operation and or storage operation elements associated with the snapshot. Flags may include one or more flags or bits set to indicate various types of information regarding the snapshot and Snapshot Pruning Information may include information about whether or not the snapshot can be pruned.

The index agent creates generates and or builds a data structure such as an index to be associated with one or more snapshots. As described more fully below the index may be a two tier index may be a three tier index or may have other index configurations depending on the needs of the system. The two tier index may include a first entry that contains information identifying a data object such as a file or folder and a second entry that identifies where the file or folder is located. As an alternative the second entry may indicate where an archive file the file stripped of its native format is located.

The three tier index includes the first and second entries as well as a third entry that contains the application specific data discussed herein. For example the third entry or tier may contain information identifying an original mount point for an associated snapshot.

The three tier index may track specific files on a snapshot that are of interest. The three tier index describes what is on the disk or tape and not just the second tier index description of a file. The third tier may include an entry including information that identifies where to find data when needed within the snapshot based on an indication of what files were on the disk when the snapshot was taken and where they were located.

For example the index agent creates the index relative to a file system associated with the disk so as to explain all the files on that disk and their locations. The index tracks an original mount point so recovery systems can find network accessible data as and when the data moves among network resources. For example an original file named system.txt may have an original mount point at E mount snap1 user1 system.txt but the snapshot imaging the file may subsequently be remounted at a mount point at F user1 system.txt. The index via the third tier may track such information such as information associated with movement of the files.

Thus the file system identifies or presents the files of interest to the index agent to create the new index. The index maps contextual information associated with a snapshot of a volume. The index data identifies an application with files of interest. Alternatively or additionally the system may employ content indexing functions to discover content and provide that as a separate content index. Further details may be found in U.S. patent application Ser. No. 12 058 487 filed on Mar. 28 2008 entitled METHOD AND SYSTEM FOR OFFLINE INDEXING OF CONTENT AND CLASSIFYING STORED DATA.

In some examples the system creates an archive file when creating an archive copy or other secondary copies of a data set such as a data set originating in a file system. The creation of an archive file enables the system when storing or restoring data to have both a logical view and a physical view of stored data. The logical view represented by the archive file enables the system to store data having a format that is neutral or independent with respect to data type. The physical view represented by an index of locations on stored physical media enables the system to locate the data stored on the physical media as chunks tape extents or blocks of the archive file.

The three tier index may include two entries associated with a location of the file such as information identifying a snapshot that imaged the file as well as information identifying a location on secondary storage that contains the file. An additional entry provides application specific data for the file such as metadata. Thus in some cases the system creates a backup copy of a primary volume that includes a snapshot of the primary volume and a three tier index that contains information associated with an identification of the file information identifying a location of an archive file associated with the file and information providing application context information about the file such as an original mount point for the snapshot .

Referring to a table illustrating a three tier index associated with a snapshot is shown. The index includes a file identification entry that contains a name of a file a location entry that contains location information associated with a primary copy of the file a secondary copy of the file an archive format copy of the file and so on and a context or application specific entry that provides information about a file system that created the file such as an original mount point for the snapshot when the file was imaged by the snapshot. Of course the index may include other or different information than what is shown in the Figure . For example the location entry may identify or provide identification information for the storage media mount point tape drive and so on associated with creating updating and or storing a copy of the data such as a secondary copy. In some cases it may also provide media specific information such as offsets on a magnetic tape. The location entry may refer to a storage manager or other data storage resource when identifying a location of a copy such as a location on a tape.

As one example the index includes information associated with a data object named Invention.txt. This information includes a location of the archive file for the data object at archive1 and information identifying a mount point for the snapshot that imaged the data object at C snap1 user1. The index may contain information about some files imaged by a snapshot such as certain files of interest or may contain information about all the files imaged by the snapshot. The system may build the index as follows.

Referring to a flow diagram illustrating a routine for building an index is shown. In step an index agent receives a snapshot of a data set. For example the snapshot agent within or outside of the media agent creates the snapshot of a primary volume of data and sends the snapshot to the index agent.

In step the index agent receives or obtains context information associated with the snapshot. The index agent may query some or all of the data storage resources such as a storage manager or jobs agent to retrieve data associated with systems and applications that created the snapshot. For example the index agent may query the Volume Snapshot Service VSS provider used to create the snapshot. The index agent may retrieve information for each of the individual files imaged by the snapshot for the entire snapshot or both. The application context information may include information about resources utilized by the snapshot agent such as mount points information from or about the file system and or applications that created the snapshot and so on.

In addition the index agent calls the snapshot APIs to identify information associated with the snapshot. Examples of information received from the snapshot APIs include unique snapshot identifiers which may be received from the snapshot hardware or generated by the index agent source host information identifying the computing resource that originated the underlying data from which the snapshot was created volume information client identifiers path identifiers creation time control host identifiers source information server identifiers job identifiers and so on. For example the system via an agent stored on a Microsoft Exchange server may interact with an external RAID array on the Exchange server via APIs in order to retrieve information associated with snapshots performed on the Exchange server.

In step the media agent stores the snapshot to storage media. For example the media agent transfers the snapshot to storage media using one or more of the data paths described with respect to . The media agent may store the snapshot to storage media based on a storage policy and may select storage media based on the needs of the system and on the future use of the stored snapshot. For example the system may store the snapshot to magnetic tape for archival purposes.

In step the system stores the received application context information in an index that identifies individual files from the data set imaged by the snapshot and in step stores the index to the storage media. That is the system builds an index such as the three tier index described herein to track information within the snapshot such that an original location of the data imaged by the snapshot can be determined from the index.

As an example the system via an index agent receives a snapshot taken of a primary volume such as snap1. The system queries a VSS provider and determines the snapshot occurred at the mount point D users and was performed by a mechanism known to the system as hardsnapB. The system then stores the snapshot and the associated information to a magnetic tape named tape4 at location offset100 230 The system then updates an index such as an index at a media agent that stored the snapshot to include information associated the name of the tape with the name of the snapshot stored on the tape. Thus an example index entry may be as follows 

The system may store the entry at the media agent or at other storage resources such as a global manager. In addition the system stores the entry along with the snapshot on the tape to facilitate restoration of the data via the snapshot effectively creating a copy of data i.e. a data source using a snapshot of the data.

In addition to creating the index the system may add data to an existing archive table file or other tables to recognize that a particular data copy is a snapshot. For example a flag may be set in the archive table file to indicate to the system that a copy is a snapshot based copy. This may facilitate discovery of the copy for example.

In some examples the three tier or multiple entry index may be stored in different locations across a data storage system. For example information associated with the location of a snapshot on secondary storage such as tape offset information and the application specific information may be stored in a cache of a media agent that transfers the snapshot to the secondary storage while the snapshot metadata may be stored by a data management component. Of course the various indices may be stored in other locations in order to meet the needs of the system.

As described herein the recovery of data such as individual files may be performed by restoring data from snapshot based secondary copies such as backup copies. Referring to a flow diagram illustrating a routine for restoring a data object using a snapshot based secondary copy is shown. In step a data recovery system receives an indication selection or request for a data object to be restored. For example the system may present to a user a user interface showing files available for restoration and receive the request via display elements within the user interface. For example the system may present the files shown in table of .

In step the system identifies the snapshot that imaged the selected file. For example the system may include a table map or other data structure of file names and associated snapshots and use the map to identify a snapshot that imaged the file e.g. table of . In step the system retrieves or accesses the storage media that contains the identified snapshot and an index associated with the snapshot. For example if the user wishes to retrieve the file invention.txt the system may retrieve the snapshot that images the file invention.txt in order to identify a location for the file.

In step the system retrieves information from the associated index. For example the system retrieves the information associated with the selected file such as information for an archive file associated with the selected file information associated with the file system that created the selected file and so on.

In step the system locates and restores the selected file. For example using the retrieved information from the associated index the system locates the archive file and application specific information for the selected file and restores the file.

As an example a user wishes to restore email.txt from a data archive. A data recovery system receives input from the user to restore the file step . The system via table of identifies that the snapshot mechanism snap1 at mount point D snap1 user2 performed a snapshot of the file step . The system identifies the location of the snapshot on storage media at archive 3 step . In this example the information archive 3 identifies the specific storage medium as well as the location on the medium. The system then retrieves the snapshot and uses the retrieved snapshot and known information about the snapshot to locate the file for the user.

Thus by utilizing a snapshot based data source as the vehicle for data recovery the system is able to take advantage of the speed of restoration associated with snapshots with the granularity associated with other backup methods such as restoring individual files. The descriptive information in the index enables the system to quickly and efficiently identify the specific location of files imaged by the snapshot. That is the combination of an image of a volume of a data via a snapshot and knowledge of the mechanisms and resources used to create the file system via an associated index enables the system to restore data quickly and efficiently.

As described herein in some cases it may be advantageous to mix or use multiple different data storage operations when creating a secondary copy of a primary volume of data. For example a data storage system will create a full backup of a volume of data at a first point in time and then incrementally backup the volume in subsequent points in time only copying changes or modifications made to the volume of data after the full backup was created. Often the full backup is more time intensive and system sensitive than incremental backups because more data is being stored and system resources used during the full backup. Thus a snapshot may be used to create the full backup and other operations such as continuous data replication of changes copy on write snapshots and so on may be used for the subsequent incremental backups.

Referring to a flow diagram illustrating a routine for generating a secondary copy of a volume of data is shown. In step the system creates a full backup of a primary volume using a snapshot based copy mechanism. For example the system performs a snapshot of the primary volume at a first time stores the snapshot to storage media builds an index associated with the snapshot as described herein and stores the index to the storage media with the snapshot or otherwise logically links it with that snapshot.

In step the system creates an incremental copy at a second subsequent time. The system may employ continuous data protection CDP or other copy mechanisms and may transfer data directly to tape or other storage media. CDP is advantageous because it virtually ensures an error free transfer of data to the tape or to another often remote data store. In step the system reviews the volume for any changes to the volume. The system may also review a change journal or other similar data structure. When changes are identified routine proceeds back to step and performs an additional backup. Thus a secondary copy of a volume of data is created and constantly updated using backup processes well suited for the various tasks involved.

In order to restore data from such a secondary copy the system may treat the different data sources in a similar fashion thereby providing seamless and efficient data recovery to a user. For example should the user wish to restore the entire volume the system employs the fast snapshot based recovery of the original data along with the safe protected recovery of any subsequent changes to the data set. In addition the system may provide for the restoration of individual files in a fast and effective manner because the snapshot based full backup is able to restore individual files without performing a full restore. Of course in some cases it may be advantageous to create incremental copies as a snapshot based data source. Additionally the system may create a partial secondary copy as a snapshot based data source and the rest of the secondary copy using other data storage operations.

In some examples the system restores data from different types of secondary copies having different formats such as snapshots and archive copies of data. The system may create and leverage an index that normalizes or translates the different data formats during data recovery. The index may include information that identifies the original location of data information that identifies the current location of the data and or information that identifies the type of media containing the data. Thus during a restore process the system may review this index in order to determine a relative path to requested data. In some cases the system may provide a user with some or all versions under management by the system. The system may facilitate searches across the index such as those described in U.S. patent application Ser. No. 11 931 034 filed on Oct. 31 2007 entitled METHOD AND SYSTEM FOR SEARCHING STORED DATA which is incorporated by reference in its entirety.

For example a request for file1.doc causes the system to review an index associating file1.doc with an original mount point D snapshot1 for a snapshot that imaged a volume containing file1.doc and a current location of the snapshot X tape1 snapshot1 file1.doc now stored in a non native format. The system can then convert the retrieved copy of the requested file to a native format identify a path to the original mount point and provide the requested file.

The system may be employed by current data storage systems that have snapshot capabilities. For example the index agent and or the snapshot agent may be introduced into a data storage system that performs snapshots but does not utilize them as data sources enabling the data storage system to perform the data storage operations described herein.

Snapshots of primary data are typically linked to a storage device storing the primary data. In some conventional techniques copying the snapshot to another storage device may sever links between the copy of the snapshot and the primary storage device. As a result it may be difficult to recover data from the snapshot copy or analyze the snapshot copy. However the techniques described herein provide for copying snapshots to a secondary storage device while maintaining the ability to recover data from the snapshot copy. Data can be recovered from the snapshot copy on a full application basis or an individual granular data object level for example individual files or folders email messages email folders database objects etc. .

The techniques described herein also enable additional uses of snapshot data. Ancillary applications such as indexing and search applications electronic discovery applications information management applications tagging applications as well as other applications can perform functions on snapshot data using the same or at least generally similar techniques used to perform functions on other secondary copies of data. As previously noted the techniques described herein may facilitate additional uses of snapshot data by among other things providing an interface to snapshot data that is the same or at least generally similar as an interface used to access secondary copies of data created using other techniques such as backup or copy techniques.

In some examples this may be done by creating a logical view of snapshot data that is identical or at least generally similar to logical views of other secondary copies of data such as backup copies of data. For example upon creating a snapshot a record of the snapshot and its metadata may be stored in a data structure that stores records pertaining to copies of data created by other storage operations such as backup or copy operations. In some examples the snapshot is modeled as if it were another type of secondary copy such as a backup copy.

In addition to the data agent the client includes a snapshot component an application and data . The application may be any application executing on the client such as a database server application for example Microsoft SQL server Microsoft Active Directory Server Oracle etc. an email server application for example Microsoft Exchange Server Apache etc. or other types of servers for example application servers such as Microsoft SharePoint servers or web servers virtual machine servers such as Microsoft Virtual Server file servers etc. . The application has associated data which includes a database and logs shown as logs one through n. The application may write data to the database using transactional techniques. That is the application may write changes to the logs before committing the changes to the database .

The snapshot component creates snapshots of the data of the client . The snapshot component includes software components and may also include hardware and or firmware components. The snapshot component may be provided in its entirety by a single entity for example a single vendor or the snapshot component may include sub components that are provided by different entities such as multiple vendors .

In some examples the snapshot component includes a Microsoft Volume Shadow Copy Service VSS sub component and a software based VSS provider sub component that is provided by the assignee of the present application CommVault Systems Inc. In these examples the data agent interacts with the Microsoft VSS sub component to create snapshots. The Microsoft VSS sub component notifies the application to prepare the data for creating a snapshot. The application prepares the data in an appropriate manner such as completing open transactions flushing caches etc. . The Microsoft VSS sub component initiates a commit phase and notifies the application that the application should be quiesced and to freeze writes to the data . The Microsoft VSS sub component may also flush a file system buffer and freeze the file system to ensure that file system metadata is written and that the data is written in a consistent order. The Microsoft VSS sub component notifies the VSS provider sub component to create the snapshot and the VSS provider sub component creates the snapshot. The Microsoft VSS sub component then thaws the file system and notifies the application that the application can unquiesce and complete any writes to the data .

In other examples in addition to or as an alternative to the software based VSS provider sub component the snapshot component includes other software based VSS provider sub components such as a Microsoft system software provider a Microsoft Data Protection Manager provider sub component or a NetApp SnapManager provider sub component. These other software based VSS provider sub components may create snapshots in manners similar to the manner described in the preceding paragraph or may use other techniques to create snapshots.

In other examples in addition to the Microsoft VSS sub component the snapshot component includes one or more hardware based VSS provider sub components such as those provided by vendors such as Hewlett Packard EMC NetApp IBM and other vendors. These hardware based VSS provider sub components may create snapshots in manners similar to the manner described in the paragraph above or may use other techniques to create snapshots. Those of skill in the art will understand that the snapshot component may include various software based and or hardware based sub components and interact with other components in various ways in order to create snapshots of the data .

The snapshot component may create snapshots using various techniques such as copy on write redirect on write split mirror copy on write with background copy log structure file architecture techniques continuous data protection techniques and or other techniques. The snapshot component may store the created snapshots on a particular volume of the client .

The secondary storage computing device includes a copy component that copies snapshots from the client to another storage device such as storage device . The secondary storage computing device also stores certain snapshot information and or snapshot metadata in various data structures as described herein. The secondary storage computing device may store snapshot information and or snapshot metadata in secondary storage computing device index .

The secondary storage computing device also includes an interface component . The interface component provides access to the copied snapshot data. The interface component can be used to access data objects created in other types of secondary copies such as backup copies archive copies and other types of copies. The interface component can also be used to display to a user available snapshots or point in time copies of the data that can be used for recovery or other purposes. The secondary storage computing device also includes a snapshot component . The snapshot component may function similarly to the snapshot component .

The secondary storage computing device also includes applications that perform various functions using copied snapshot data. The applications include an indexing component a search component an e discovery component and an information management component . As described in more detail below the applications access copied snapshot data stored on storage device and data structures stored in secondary storage computing device index in order to perform various functions.

As part of copying a snapshot certain data objects referenced by the snapshot may also be copied to the storage device . For example the first time a snapshot is copied over all of the data objects or blocks of data referenced by the snapshot may also be copied to the storage device . However subsequent copying of snapshot may copy over only data objects or blocks of data that have charged or been modified since the first full copy operation.

At step the snapshot data is modeled as a copy of the data . For example the secondary storage computing device may store snapshot information and or snapshot metadata in secondary storage computing device index . This information stored in secondary storage computing device index may be utilized by the interface component to provide the interface to the snapshot data. At step the applications access the snapshot data using the interface. At step the applications analyze the snapshot data.

For example the applications may access the copied snapshot data extract information for example textual information binary objects etc. from the copied snapshot data and populate one or more indices with the extracted information. For example the applications may index content of individual data objects and add information regarding the content to an index. To do so the applications may use techniques such as those described in commonly assigned U.S. patent application Ser. No. 11 694 869 entitled METHOD AND SYSTEM FOR OFFLINE INDEXING OF CONTENT AND CLASSIFYING STORED DATA the entirety of which is incorporated herein.

As another example the applications may analyze and classify the copied snapshot data. To do so the applications may use techniques such as those described in commonly assigned U.S. patent application Ser. No. 11 564 119 entitled SYSTEMS AND METHODS FOR CLASSIFYING AND TRANSFERRING INFORMATION IN A STORAGE NETWORK the entirety of which is incorporated by reference herein. Additionally or alternatively users may provide tags attributes classifications and or characterizations that are associated with copied snapshot data.

As another example the applications may single or variable instance or deduplicate the copied snapshot data. To do so the applications may use techniques described in one or more of previously referenced U.S. patent application Ser. Nos. 11 269 512 12 145 347 12 145 342 11 963 623 11 950 376 61 100 686 and 61 164 803.

In some examples the applications may use techniques described in previously referenced U.S. patent application Ser. No. 12 978 984 entitled SYSTEMS AND METHODS FOR ANALYZING SNAPSHOTS as part of the process of analyzing the copied snapshot data.

At step the applications store the analysis of the snapshot data such as in the secondary storage computing device index and or in other indices. For example the indexing component may store the results of the indexing of the snapshot data in a searchable index so that the data may be searched by users or other applications using search component . As another example the e discovery component may analyze the snapshot data to identify data that is subject to a legal discovery request or other hold. Once such data is identified the e discovery component may copy the data to another location such as another storage device . As another example the applications may generate a report or display of the analyzed data. After step the process concludes.

In some examples the client does not include a data agent . Instead the client includes a software component that creates snapshots. The software component quiesces the application takes a full snapshot of the data monitors changes to the data and causes changed data to be copied to the storage device . The software component may then create additional snapshots after the data is copied to the storage device . The software component may use copy on write techniques or other techniques.

Snapshots created by different snapshot providers may have different formats. Moreover snapshots created using different techniques may also differ in format. One advantage of the techniques described herein is that snapshots created by various snapshot providers using various techniques can be analyzed by the applications . This is due at least in part to modeling the snapshot data as if it were another type of secondary copy and providing a common interface to the snapshot data. This allows the applications to use standard techniques for example standard API functions or other functions to access the snapshot data without requiring new or different interfaces to the snapshot data. Accordingly the techniques described herein facilitate a common interface to disparate types of snapshot data.

Another advantage of the techniques described herein is that they provide for minimal disruption of production application data. This is due at least in part to the fact that snapshot creation usually requires a minimal amount of time to occur therefore minimizing application downtime. It is also due at least in part to the fact that analysis of snapshots typically does not occur on production computing devices therefore offloading possibly computationally expensive tasks to non production computing devices. Another advantage of the techniques described herein is that they provide the ability to perform value added operations on snapshot copies of data even without the original application environment or host being available.

Remote backup alternatively referred to as Discrete Data Replication DDR enables the maintenance of application and file system data of a computing device on another storage device. Remote backup synchronizes application and file system data of the computing device on the other storage device. is a block diagram of a client that may be used to perform remote backup according to some examples. The client includes a user mode component that operates in user mode and a kernel mode file system filter component and a change journal that operate in kernel mode the logical distinction between user mode and kernel mode is shown as line .

In some examples the data of the client is synchronized using the following process. The first time the data is synchronized the user mode component engages with the application and causes the application to be quiesced. The user mode component then performs or causes to be performed a full copy of the application data to a storage device. The user mode component may stage the copy in an intermediate location on the computing device before transferring it to the storage device.

After the full copy the kernel mode file system filter detects changes to the application data and records changes in the change journal . At a scheduled time the user mode component again engages with the application and causes the application to be quiesced. Using the records of changed data recorded in the change journal the user mode component then copies over data that has changed since the full copy to the storage device and updates the full copy. In some examples each time that an update concludes the user mode component creates another snapshot of the application data . The snapshots could be created by software based and or hardware based components.

Remote backup therefore enables the protection of application data in a consistent state and also the restoration of the application data to multiple points in time. In some examples application data can also be compressed and encrypted during the backup for efficiency and data security. The integrity of the application data may also be verified during or after the transfer to the storage device.

In general virtualization refers to the simultaneous hosting of one or more operating systems on a physical computer. Such virtual operating systems and their associated virtual resources are called virtual machines. Virtual machines operate or execute on virtual machine hosts. One example of a virtual machine host is an ESX Server by VMware Inc. of Palo Alto Calif. Other examples include Microsoft Virtual Server and Microsoft Windows Server Hyper V both by Microsoft Corporation of Redmond Wash. and Sun xVM by Sun Microsystems Inc. of Santa Clara Calif. More details as to virtualization may be found in the commonly assigned U.S. patent application Ser. No. 12 553 294 entitled SYSTEMS AND METHODS FOR MANAGEMENT OF VIRTUALIZATION DATA the entirety of which is incorporated by reference herein.

Data protection operations such as snapshots can be performed upon virtual machine data. is a flow diagram of a process for creating snapshots of virtual machines. The process begins at step where the system discovers one or more virtual machines being hosted by a primary virtual machine host. At step the system creates snapshots of the virtual machines. The system can employ hardware based snapshot mechanisms and or software based snapshot mechanisms to create the snapshots of the virtual machines. For example the system can utilize a hardware based snapshot mechanism to create a mirrored point in time copy of the virtual machines.

In some examples the system creates the snapshot of the virtual machines utilizing a virtual machine storage manager. A virtual machine storage manager is a computing system that does not host virtual machines but that performs data protection operations on virtual machine data. In such examples the virtual machine storage manager contacts the primary virtual machine host obtains information about the virtual machines that the primary virtual machine host is hosting and utilizes such information to create the snapshots of the virtual machines.

At step the system exposes the snapshots to a secondary virtual machine host that is distinct from the primary virtual machine host. For example the virtual machines may be VMware virtual machines that are hosted by a first ESX Server and after the system has created the snapshots the system exposes the snapshots to a second ESX server that is distinct from the first ESX server. Exposing the snapshots to the secondary virtual machine host can include providing read as well as write access to the snapshots. At step the system registers the virtual machines on the secondary virtual machine host. At step the system verifies that the snapshots were properly created. The system can verify the snapshots by powering on the virtual machines on the secondary virtual machine host. If the virtual machines are able to be powered on once registered to the secondary virtual machine host such powering on indicates that the snapshots were properly created. After such verification the system can power off the virtual machines on the secondary virtual machine host. At step the system analyzes the snapshots of the virtual machines as described herein. After step the process concludes.

One advantage of the process is that the system can perform it to discover multiple virtual machines e.g. tens or even hundreds of virtual machines and create snapshots of the discovered virtual machines. Such snapshot creation can occur in a short period of time e.g. on the order of seconds . The system can then verify that the snapshots were properly created by powering on the virtual machines on a secondary virtual machine host. Such verification can be done with no or reduced impact upon the primary virtual machine host. Another advantage is that the virtual machine data can be analyzed using the snapshots of the virtual machines. Other advantages will be apparent to those of skill in the art.

From the foregoing it will be appreciated that specific examples of data storage systems have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the system. For example although files may have been described herein other types of content such as user settings application data emails and other data objects for example blocks of data can be imaged by snapshots. Accordingly the system is not limited except as by the appended claims.

Terms and phrases used in this document and variations thereof unless otherwise expressly stated should be construed as open ended as opposed to limiting. As examples of the foregoing the term including should be read as meaning including without limitation or the like the term example is used to provide exemplary instances of the item in discussion not an exhaustive or limiting list thereof the terms a or an should be read as meaning at least one one or more or the like and adjectives such as conventional traditional normal standard known and terms of similar meaning should not be construed as limiting the item described to a given time period or to an item available as of a given time but instead should be read to encompass conventional traditional normal or standard technologies that may be available or known now or at any time in the future. Likewise where this document refers to technologies that would be apparent or known to one of ordinary skill in the art such technologies encompass those apparent or known to the skilled artisan now or at any time in the future.

The presence of broadening words and phrases such as one or more at least but not limited to or other like phrases in some instances shall not be read to mean that the narrower case is intended or required in instances where such broadening phrases may be absent. The use of the term module does not imply that the components or functionality described or claimed as part of the module are all configured in a common package. Indeed any or all of the various components of a module whether control logic or other components can be combined in a single package or separately maintained and can further be distributed in multiple groupings or packages or across multiple locations.

The description of a synchronization process or synchronization processes is not intended to require that multiple synchronizations occur simultaneously or that multiple computing systems being synchronized each receive the same data. Although in some examples the data can be broadcast to all participating computing systems simultaneously or close to simultaneously in other examples the data can be sent to different computing systems or groups of computing systems at different times. Likewise in some examples the same data or the same subset of the data can be sent to all computing systems. However in other examples subsets of the data can be tailored for a given computing system or group of computing systems.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. The word coupled as generally used herein refers to two or more elements that may be either directly connected or connected by way of one or more intermediate elements. Additionally the words herein above below and words of similar import when used in this application shall refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items that word covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above detailed description of embodiments of the system is not intended to be exhaustive or to limit the system to the precise form disclosed above. While specific embodiments of and examples for the system are described above for illustrative purposes various equivalent modifications are possible within the scope of the system as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative embodiments may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed in parallel or may be performed at different times.

The teachings of the system provided herein can be applied to other systems not necessarily the system described above. The elements and acts of the various embodiments described above can be combined to provide further embodiments.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention.

These and other changes can be made to the system in light of the above Detailed Description. While the above description details certain embodiments of the system and describes the best mode contemplated no matter how detailed the above appears in text the system can be practiced in many ways. Details of the system may vary considerably in implementation details while still being encompassed by the system disclosed herein. As noted above particular terminology used when describing certain features or aspects of the system should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the system with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the system to the specific embodiments disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the system encompasses not only the disclosed embodiments but also all equivalent ways of practicing or implementing the system under the claims.

While certain aspects of the invention are presented below in certain claim forms the inventors contemplate the various aspects of the invention in any number of claim forms. For example while only one aspect of the invention is recited as embodied in a computer readable medium other aspects may likewise be embodied in a computer readable medium. As another example while only one aspect of the invention is recited as a means plus function claim under 35 U.S.C. 112 sixth paragraph other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 6 will begin with the words means for. Accordingly the inventors reserve the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the invention.

