---

title: Methods for restricting resources used by a program based on entitlements
abstract: In response to a request for launching a program, a list of one or more application frameworks to be accessed by the program during execution of the program is determined. Zero or more entitlements representing one or more resources entitled by the program during the execution are determined. A set of one or more rules based on the entitlements of the program is obtained from at least one of the application frameworks. The set of one or more rules specifies one or more constraints of resources associated with the at least one application framework. A security profile is dynamically compiled for the program based on the set of one or more rules associated with the at least one application framework. The compiled security profile is used to restrict the program from accessing at least one resource of the at least one application frameworks during the execution of the program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09280644&OS=09280644&RS=09280644
owner: Apple Inc.
number: 09280644
owner_city: Cupertino
owner_country: US
publication_date: 20130619
---
This application is a continuation of co pending U.S. application Ser. No. 13 007 472 filed on Jan. 14 2011.

Embodiments of the invention relate generally to the field of secure computing and more particularly to restricting resources used by a program based on its entitlements.

Security concerns for all types of processor based electronic devices and particularly for computing devices have become significant. While some concerns may relate to detrimental actions which may be undertaken by defective code implemented by such devices the greater concerns relate to the ramifications of various types of attacks made upon such devices through malicious code including code conventionally known in the field by a number of names such as viruses worms Trojan horses spyware malware and others. Such malicious code can have effects ranging from relatively benign such as displaying messages on a screen or taking control of limited functions of a device to highly destructive such as taking complete control of a device running processes transmitting and or deleting files etc. Virtually any type of imaginable action on a processor based device has been the subject of attacks by malicious code.

Many of these attacks are directed at computing devices such as workstations servers desktop computers notebook and handheld computers and other similar devices. Many of these computing devices can run one or more application programs which a user may operate to perform a set of desired functions. However such attacks are not limited to such computing devices. A broader group of various types of devices such as cell phones personal digital assistants PDAs music and video players network routers switches or bridges and other devices utilizing a microprocessor microcontroller or a digital signal processor to execute coded instructions have been the subjects of attacks by malicious code.

A number of methodologies have been used in an attempt to reduce or eliminate both attacks and influence of malicious or defective code. Generally these methodologies include detection prevention and mitigation. Specifically these methodologies range from attempts to scan identify isolate and possibly delete malicious code before it is introduced to the system or before it does harm such as is the objective of anti virus software and the like to restricting or containing the actions which may be taken by processes affected by malicious or defective code. However such restrictions typically are configured statically based on a set of rules set forth in a security profile. Such statically configured rules do not always represent the dynamic conditions of an operating environment at runtime.

According to one aspect of the invention in response to a request for launching a program a list of one or more application frameworks to be accessed by the program during execution of the program is determined. Zero or more entitlements representing one or more resources entitled by the program during the execution are determined. A set of one or more rules based on the entitlements of the program is obtained from at least one of the application frameworks. The set of one or more rules specifies one or more constraints of resources associated with the at least one application framework. A security profile is dynamically compiled for the program based on the set of one or more rules associated with the at least one application framework. The compiled security profile is used to restrict the program from accessing at least one resource of the at least one application frameworks during the execution of the program.

According to another aspect of the invention in response to a request for launching a program a list of resources to be accessed by the program during execution of the program is determined. A predetermined function of a library that provides access of the resources is invoked including passing as a parameter one or more resource entitlements of the program to obtain a set of rules for accessing resources associated with the library based on the resource entitlements. A security profile is dynamically generated for the program based on the set of rules where the security profile is used to restrict the program from accessing other resources of the library that the program is not entitled during execution of the program.

Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiments one or more entitlements are defined for each program or application that is to be deployed in a data processing system. The entitlements represent certain functions or resources that the program is entitled to access. The entitlements may be specified by a developer during development of the program or alternatively entitlements can be specified by an authorization entity such as authorization server or provisioning server which provisions or distributes the program. Such entitlements may be specified as an attribute or metadata attached to or embedded within the program and optionally signed by the authorization entity using a digital certificate.

Entitlements can then be used to generate a set of rules specifying certain actions or resources that a program can or cannot do or access during execution of the program. The set of rules are then dynamically compiled into a security profile for the program. During the execution of the program the security profile is used to enforce the set of rules to restrict the program from performing any action or accessing any resource that the program is not entitled. This in effect forces or contains the program to operate in a restricted operating environment also referred to as a sandbox or sandboxed environment. Restricting execution of a program within a restricted operating environment can reduce the changes of the program interfering or causing damages to other components or resources of an electronic device. For example a program may be developed by a third party and downloaded from a network. The program may include a malfunctioning component or routine e.g. programming bugs which may accidentally access to certain critical memory space that normally exclusively utilized by an operating system microprocessor bus or other components of the electronic device. Such actions may cause the electronic device to crash. Alternatively a program may be a malicious program that is developed to intentionally cause damages to an operating environment and or electronic device. For example a program with virus may be specifically developed to take control of the electronic device and or steal confidential information of a user that operates the electronic device. By restricting the execution of a program within a restricted operating environment such damages can be greatly reduced. With embodiments described through this application it is easier for a developer or an administrator to specify and or configure a proper restricted operating environment for a particular program. As a result a developer does not need to know how to program or set up a set of rules for the purpose of generating a security profile e.g. programming or scripting languages . Rather the developer may only need to specify zero or more entitlements for a program using certain user recognizable terms. Note that a program and an application are interchangeable terms throughout this application.

System further includes application launch module or launch service module to launch application in response to a command. Application launch module may include a dynamic linker that dynamically links one or more of application frameworks when application is launched. According to one embodiment when application is being launched application launch module is configured to determine one or more of application frameworks that application is to invoke during the execution of application . Typically when an application was compiled and linked during development certain information concerning the application frameworks or libraries that the application will invoke is packaged or embedded within the application e.g. as part of metadata or an attribute or as part of an accessory or a list file distributed with an executable image of the application. Since a dynamic linker is the one responsible for dynamically linking the necessary libraries or application frameworks during the execution it can determine such libraries or application frameworks to be invoked ahead of the execution.

In one embodiment once the list of one or more application frameworks associated with application has been determined application launch module invokes access control system to determine a set of zero or more entitlements of application . The entitlements may be packaged with application as part of entitlements which may be implemented as part of metadata or an attribute of application . Entitlements may be specified in plain texts or other user recognizable forms by a developer or an authorization entity e.g. an authorization provisioning or distribution facility of application . Once the entitlements of application have been determined access control system communicates with e.g. via an application programming interface or API each of application frameworks that application is to invoke during the execution to obtain a set of one or more rules based on the entitlements of application . The one or more rules may be generated or emitted based on a list of restrictions in view of entitlements of application . The one or more rules represent a set of activities or resources that application can or cannot do or access when accessing the respective ones of application frameworks during the execution.

Based on the set of one or more rules according to one embodiment profile compiler is configured to dynamically compile security profile . Security profile is then stored or loaded in a secured storage location such as a kernel of an operating system OS that provides an operating environment of system . The security profile can then be utilized by access control module to enforce the set of one or more rules during execution of application for example restricting application to operating in a restricted operating environment e.g. sandbox .

Restricting execution of a program within a restricted operating environment can reduce the changes of the program interfering or causing damages to other components or resources of an electronic device. For example a program may be developed by a third party and downloaded from a network. The program may include a malfunctioning component or routine e.g. programming bugs which may accidentally access to certain critical memory space that normally exclusively utilized by an operating system microprocessor bus or other components of the electronic device. Such actions may cause the electronic device to crash. Alternatively a program may be a malicious program that is developed to intentionally cause damages to an operating environment and or electronic device. For example a program with virus may be specifically developed to take control of the electronic device and or steal confidential information of a user that operates the electronic device. By restricting the execution of a program within a restricted operating environment such damages can be greatly reduced. With embodiments described through this application it is easier for a developer and or an administrator to specify or configure a proper operating environment for a particular program.

According to one embodiment when application is being launched application launch module is configured to determine one or more of application frameworks that application is to invoke during execution of application . The entitlements may be determined based on information generated by a compiler that compiles the source code of application such as a listing file or other installation files. In one embodiment once the list of one or more application frameworks associated with application has been determined application launch module invokes a helper module to determine a set of zero or more entitlements of application . Helper module may be implemented as part of a sandbox administration module that manages restricted operating environments e.g. sandboxes for a variety of programs installed within system . The entitlements may be packaged with application as part of entitlements which may be implemented as part of metadata or an attribute of application . Entitlements may be specified in plain texts or other user recognizable forms by a developer or an authorization entity e.g. an authorization provisioning or distribution facility of application . For example entitlements may be specified using user recognizable terms such as for example network inbound network outbound unmediated file read write microphone access camera access etc.

In one embodiment helper module is configured to scan and extract entitlements from application . In one embodiment entitlements may be signed by an authority entity that distributed or provisioned application using a chain of digital certificates e.g. x.509 compatible digital certificates . Entitlements may be authenticated by helper module using a root certificate of the certificate chain where the root of certificate may be stored in a secure storage location such as a secure read only memory ROM of system not shown .

In one embodiment helper module communicates with trusted source via secure API to retrieve a set of zero or more entitlements which may be obtained from entitlements of application by trusted source . Trusted source may be a trusted system component such as a secure kernel module running within a kernel of an operating system within system . Alternatively trusted source may be remotely located trusted source such as an authorization entity that has provisioned or distributed application and maintained the entitlements of application .

Once the entitlements of application have been determined according to one embodiment helper module communicates with each of application frameworks that application is to invoke during the execution to obtain a set of one or more rules based on the entitlements of application . The one or more rules may be generated or emitted based on a list of restrictions in view of entitlements of application . The one or more rules represent a set of activities or resources that application can or cannot do or access when accessing the respective application frameworks during the execution. In a particular embodiment helper module invokes bootstrap agent of each of application frameworks to retrieve a set of one or more rules based on list of restrictions in view of the entitlements of application .

In one embodiment helper module scans e.g. walks through the list of application frameworks required by application by invoking e.g. executing the respective bootstrap agents to obtain a set of rules for each application framework and to combine the sets of rules from all application frameworks associated with application to generate a final set of rules. When calling a bootstrap agent helper module passes a list of zero or more entitlements as one or more parameters and based on the zero or more entitlements the respective bootstrap agent emits a set of one or more rules that governs the access of resources associated with the application framework. As a result although application is compiled and or linked with a particular application framework or library only the functions or resources of the application framework or library that are entitled by application can be accessed. Other functions or resources that are not entitled by application would not be accessed by application during the execution.

Note that an application framework or library may contain or be associated with more functions or resources than necessary for a given application. By limiting the access of an application to the functions or resources of an application framework the chances of compromising integrity of the application framework can be reduced. Also note that bootstrap agent can be optional. According to one embodiment application framework may statically maintain the list of restrictions . Helper module may retrieve the list of restrictions interpret or invoke an interpreter to interpret the restrictions in view of the entitlements of application and generate a set of one or more rules for application .

Based on the set of one or more rules according to one embodiment helper module is configured to compile or invoke a profile compiler to compile a security profile for application . A security profile can include one or more policies where a policy is a logical expression of a permissive or restrictive action that a sandboxed process may or may not take. For example one policy may expressly allow a mail application to access an email database. In such an example all other actions may be implicitly denied. In some situations a default policy is available in a security profile such that if none of the expressed permissive policies are applicable then the default policy typically denial of the operation is applied.

Referring back to once the security profile has been compiled helper module returns the security profile back to application launch module which in turn hands the security profile to the kernel of the operating system. The security profile is then stored or loaded in a secured storage location as part of security profiles . Alternatively the security profile generated by helper module can be directly transmitted to the kernel to be stored as part of security profiles . The security profiles can then be utilized by access control module to enforce the set of one or more rules during the execution when application accesses application frameworks via system API which restricts application in a restricted operating environment e.g. sandbox . An application executed within a restricted environment or sandbox is referred to as a sandboxed process.

A sandboxed process refers to a process that has been restricted within a restricted operating environment e.g. sandbox that limits the process to a set of predefined resources. Each sandboxed process may be associated with a set of dedicated system resources such as for example a dedicated memory space a dedicated storage area or a virtual machine etc. One of the purposes of sandboxing an application is to isolate the application from accessing other unnecessary or unrelated system resources of another application or a system component such that any damage caused by the application would not spill over to other areas of system .

To provide security an application may be contained by restricting its functionality to a subset of operations and only allowing operations that are necessary for the proper operation i.e. operation according to its intended functionality. One method to implement a limited set of policies for each application is to contain or sandbox the application. Sandboxing of an application or process can be achieved using operating system level protection to provide containment and to enforce security policies such as policies that restrict the ability of the application to take actions beyond those functions needed for it to provide its intended functionalities.

When an application has been sandboxed during execution the application is executed as a sandboxed process or thread within the system that is contained within a sandbox also referred to as an application container in which it cannot access certain system resources or another territory e.g. sandbox of another application subject to a security profile associated with the sandboxed application which is referred to as a sandboxed process or a sandboxed application.

A sandboxed process is the application or other program for which security containment will be implemented. In many cases a sandboxed process is a user application but it could be another program implemented on the computing device such as a daemon or a service. To increase security and provide an efficient mechanism portions of the security system are implemented or executed in a kernel space. In addition a monitor process module not shown is executed in a separate memory space from the sandboxed processes to further insulate them from each other. In particular a sandboxed process is restricted from accessing memory outside of its process space and is further prohibited from spawning a non sandboxed process. For example a security profile of a sandboxed process may include a rule or policy that denies the sandboxed process from using certain system calls which may be a mechanism that allows processes to alter each other s address spaces.

In some embodiments a policy may prevent a program from performing certain actions based on the state of an external accessory connected to the computing device e.g. if an accessory of a specific type or identity is connected is disconnected or is connected and is in or is not in a specific mode. For example an application may only be allowed to communicate over an externally accessible data bus if an accessory that meets certain criteria is connected to the data bus and is in a receptive mode. Further detailed information concerning sandboxing techniques can be found in co pending U.S. patent application Ser. No. 11 462 680 filed Aug. 4 2006 which has been assigned to a common assignee of the present application and is incorporated by reference herein in its entirety.

As shown in the computer system which is a form of a data processing system includes a bus or interconnect which is coupled to one or more microprocessors and a ROM a volatile RAM and a non volatile memory . The microprocessor is coupled to cache memory . The bus interconnects these various components together and also interconnects these components and to a display controller and display device as well as to input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art.

Typically the input output devices are coupled to the system through input output controllers . The volatile RAM is typically implemented as dynamic RAM DRAM which requires power continuously in order to refresh or maintain the data in the memory. The non volatile memory is typically a magnetic hard drive a magnetic optical drive an optical drive or a DVD RAM or other type of memory system which maintains data even after power is removed from the system. Typically the non volatile memory will also be a random access memory although this is not required.

While shows that the non volatile memory is a local device coupled directly to the rest of the components in the data processing system the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art. In one embodiment the I O controller includes a USB Universal Serial Bus adapter for controlling USB peripherals. Alternatively I O controller may include an IEEE 1394 adapter also known as FireWire adapter for controlling FireWire devices.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

