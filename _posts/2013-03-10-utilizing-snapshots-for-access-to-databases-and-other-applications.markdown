---

title: Utilizing snapshots for access to databases and other applications
abstract: A method and system for utilizing snapshots to provide copies of a database or other application or large data structure to computing devices receives a request for access to a copy of a database, and performs a snapshot of a storage volume containing the requested database. The system then clones the snapshot and mounts the snapshot to a computing device, thus enabling the computing device to access a copy of the database. In some examples, the system automatically updates copies of a database on a scheduled basis (e.g., daily or weekly basis) to refresh a database regularly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092500&OS=09092500&RS=09092500
owner: Commvault Systems, Inc.
number: 09092500
owner_city: Tinton Falls
owner_country: US
publication_date: 20130310
---
This application is related to assignee s U.S. patent application Ser. No. 12 553 294 filed on Sep. 3 2009 entitled SYSTEMS AND METHODS FOR MANAGEMENT OF VIRTUALIZATION DATA now U.S. Patent Publication number 2010 0070725 which is incorporated by reference in its entirety. This application is also related to commonly assigned U.S. Patent Application No. 61 618 506 filed concurrently on Mar. 30 2012 entitled Information Management of Mobile Device Data which is also incorporated by reference herein in its entirety.

The present application is a continuation in part of U.S. patent application Ser. No. 13 076 765 and claims priority to and the benefit of U.S. Provisional Application No. 61 618 186 filed Mar. 30 2012 which are hereby incorporated herein by reference in their entirety.

The development of software is generally done as a series of software builds also known as development builds dev builds or just builds. A build may refer to a process of converting source code files into standalone software artifacts capable of being run by a computer or the result of such a process. Thus during the creation of software developers may create many different builds such as weekly or even daily builds before reaching a final product.

As can be appreciated a single computing machine is often unable to manage and store many builds during the development of software and arrays and other external storage devices may be utilized. However although the arrays may provide enough storage for a development environment conventional systems require the copying and moving around of build data to developers requesting the data. Such moving and copying often manual processes may not be feasible for many software development environments such as software development environments that include many software developers creating and modifying many builds over a network.

Also application developers testers and others often debug test validate or perform quality assurance of a new application using a copy of a production database. To do so a tester may obtain a backup copy of a production database that an existing production application is actively using. The tester then validates that his new application performs as expected and interacts with the test copy of the database in the manner that is expected e.g. using test scripts. To ensure that the testers have reasonably current data database administrators may be asked to refresh a test copy of a database on a regular basis e.g. daily or weekly which means overwriting an existing test copy using a more recent copy of the production database. Also there may be other times outside of the debugging testing and quality assurance context when a database administrator needs to provide a temporary copy of a production database at an end user s computing device via a database refresh operation.

Current methods to refresh or otherwise copy a database can consume substantial processing storage and network resources. For example in order to refresh a test database a database administrator may oversee backing up a production database from a production server to a backup server compressing the backup copy copying the backup copy to a test server decompressing the backup copy and or restoring a test copy at a test server. A conventional process like this may require substantial manual intervention by the database administrator. Moreover since commercial databases can reach terabytes of data a conventional refresh process can result in substantial delays and or service interruptions at the production server backup server and or test server. A conventional refresh process may also consume substantial network and data storage capacity because it transfers a full copy of the production database over a network and restores it at a new location.

There is a need for a system that overcomes the above problems as well as providing additional benefits.

A method and system for utilizing snapshots to provide software builds to developer computing devices is described the provided software builds may include source code trees binaries or both source code trees and binaries. In some examples the system in response to receiving a request for a software build performs a snapshot of a storage volume containing the requested build and mounts the snapshot to the developer computing device enabling the developer computing device to access the software build.

In some examples the system in response to receiving a request for a software build establishes a virtual machine performs a snapshot of a storage volume containing the requested build mounts the snapshot to the established virtual machine and provides the virtual machine to the requesting computing device.

Thus the system in some examples enables software developers in a software build environment to access builds stored within the environment without requiring the build environment to copy and or transfer the build to computing devices associated with the software developers among other benefits. Furthermore the system in some examples provides software developers with virtual build environments including any requested builds and or computing resources associated with the build in order to provide the developers with the build data and resources needed to perform certain tasks during the development of software. Such a system may facilitate a faster more accurate development of software among other things.

Additionally a method and system for utilizing snapshots to provide copies of a database or other application or large data structure to computing devices are described. In some examples the system in response to receiving a request for access to a copy of a database performs a snapshot of a storage volume containing the requested database clones the snapshot and mounts the snapshot to a computing device thus enabling the computing device to access a copy of the database. In some examples the system automatically updates copies of a database on a scheduled basis e.g. daily or weekly basis to refresh a database regularly.

Thus the system in some examples enables testing and validation teams or others in a computing environment to readily access copies of a production database within the environment without copying and transferring a full copy of the production database to other computing devices among other benefits. Such a system may facilitate a faster and more accurate development of database applications and save data storage and networking resources among other things.

The system will now be described with respect to various embodiments. The following description provides specific details for a thorough understanding of and enabling description for these embodiments of the system. However one skilled in the art will understand that the system may be practiced without these details. In other instances well known structures and functions have not been shown or described in detail to avoid unnecessarily obscuring the description of the embodiments of the system.

The terminology used in the description presented below is intended to be interpreted in its broadest reasonable manner even though it is being used in conjunction with a detailed description of certain specific embodiments of the system. Certain terms may even be emphasized below however any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.

Aspects of the system can be embodied in a special purpose computer or data processor that is specifically programmed configured or constructed to perform one or more of the computer executable instructions explained in detail herein. Aspects of the system can also be practiced in distributed computing environments where tasks or modules are performed by remote processing devices which are linked through a communications network such as a Local Area Network LAN Wide Area Network WAN Storage Area Network SAN Fibre Channel or the Internet. Network communications may be performed in accordance with Internet Small Computer System Interface SCSI Internet Small Computer System Interface iSCSI Fibre Channel and or other protocols or standards. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Aspects of the system may be stored or distributed on computer readable media including magnetically or optically readable computer discs hard wired or preprogrammed chips e.g. EEPROM semiconductor chips nanotechnology memory or other data storage media. Indeed computer implemented instructions data structures screen displays and other data under aspects of the system may be distributed over the Internet or over other networks including wireless networks . Alternatively they may be distributed on a propagated signal on a propagation medium e.g. an electromagnetic wave s a sound wave etc. over a period of time or they may be provided on any analog or digital network packet switched circuit switched or other scheme . Those skilled in the relevant art will recognize that portions of the system reside on a server computer while corresponding portions reside on a client computer and thus while certain hardware platforms are described herein aspects of the system are equally applicable to nodes on a network.

In some cases a snapshot refers to the state of a system as of a specific point in time. For example a snapshot component may create a read only copy of a data set within a volume at a point in time allowing applications to continue writing data to the volume. Generally snapshot components are efficient and do not unduly tax a volume. In some examples once the initial snapshot is taken of a volume subsequent incremental snapshots copy changed data only and use a system of pointers to reference the initial snapshot. Such a technique may consume less disk capacity versus continually taking a snapshot of an entire volume. Read write snapshots are sometimes called branching snapshots because they implicitly create diverging versions of their data. In addition to backups and data recovery read write snapshots may be used in virtualization sandboxing virtual hosting and other regimes because of their usefulness in managing changes to large sets of files among other things.

The arrays may include hardware snapshot components associated with the type of array. For example an IBM XIV array includes a snapshot component configured to take snapshots of data sets stored in the array volume. The first computing environment may include other snapshot components that are not array specific such as software based snapshot components used in data storage systems such as the CommVault Simpana system available from CommVault Systems Inc.

The first computing environment also includes a development and database manager which may include a virtual layer capable of establishing a virtual machine environment accessible by one or more of the development machines . The development and database manager may provide various management functions associated with the development of software within the first computing environment including storage functions indexing functions control functions coordination functions build management and so on. The development and database manager may provide some or all resources and data by utilizing a cloud based computing system or other computing resources not shown . For example the development and database manager may establish a virtual machine to be accessed by the development machines within the cloud based computing system .

The development and database manager may function in part as a build tool for software development within the first computing environment . The process of building computer software is usually managed by a build tool which is a program that coordinates and controls other programs. Examples of such a program include make ant maven SCons Phing and so on The build tool which may also be stored on development machines often compile and or link various files in the correct order. For example if the source code in a particular file has not changed then it may not need to be recompiled.

The development and database manager may also provide various functionalities related to the management of databases as described further herein. Further details regarding the development and database manager will be provided with respect to .

As non exhaustive examples the production application may be any of the following applications or applications with similar functionality a database application e commerce or web application mail server application e.g. Exchange messaging application SAP application Oracle application financial application payment processing application automated billing application security application enterprise content management application customer relationship management application enterprise resource planning application enterprise performance management application business intelligence application human resource application manufacturing application social networking application messaging application product lifecycle management application supply chain management application supplier relationship management application or enterprise forms automation application.

The array may be any type of array as described above in connection with . The array may also have a snapshot component such as hardware snapshot components and or the environment may include other snapshot components as described above. The snapshot component or other snapshot components may perform snapshots on data stored within the array volumes such as stored production databases.

The second computing environment also includes one or more standby computing devices associated with members of application development database administration quality assurance testing and or acceptance teams generically testing users who may need access to a copy of the production database. The one or more standby computing devices can be associated with or assigned to perform specific functions. For example standby computing devices and can be assigned to perform application development and database administration and standby computing device can be assigned to perform quality assurance and testing on the copy of the production database. The one or more standby computing devices each have one or more installed applications which may be any of the application types listed above or a different type of application. As part of its function each application may be configured to interact with a database e.g. to read or write data and metadata to or from a database. Each application may be a newly developed application that a testing user is debugging testing or validating.

The production application server standby computing devices and array all communicate over a network as introduced above. In some examples the array communicates with standby computing devices via Fibre Channel SCSI and or iSCSI protocols.

The second computing environment also includes a development and database manager introduced above. In addition to its development management functions described above the development and database manager may refresh or otherwise create copies of databases from a production database or other source database within the second computing environment in order to support application testing validation quality assurance and acceptance goals or for other purposes. As part of its functions the development and database manager may perform storage functions indexing functions control functions coordination functions and branching or version management functions. The development and database manager may also interface with database management systems DBMS e.g. an Oracle or Microsoft DBMS . Further details regarding the development and database manager will now be discussed with respect to .

In the software development environment the user interface component provides an interface to the development machines that presents developers with builds available to be accessed. For examples the user interface component may present a list of builds available to a developer at his her development machine and receive input indicating a selection of a desired build. In the testing environment the user interface component provides an interface to the standby computing devices that presents test users with production databases that are available to be accessed. For example the user interface component may present a list of production databases available to a test user at his her standby computing device and receive input indicating a selection of a desired production database that the user would like to receive access to. The interface component may also provide an indication of different versions of the production database that are available from other points in time e.g. if snapshots have been taken of the production database at previous points in time . The interface component may also provide an interface for a user to specify a schedule for refreshing a database.

In some examples the snapshot management component facilitates the performance of snapshots on volumes that store build data or production databases. For example the snapshot management component in response to the system receiving a request for access to a certain build or certain production database may cause a snapshot component at an external array storing the requested build or production database to take a snapshot of the volume storing the requested build or production database. The snapshot management component may also cause or facilitate the mounting of the taken snapshot to the requesting development machine to a requesting standby computing device or to a virtual machine which may be established by the virtual machine management component . In general mounting may be an association of hardware or software with a file system and may include the process of incorporating hardware and or software of one physical or virtual device into a file system of another physical or virtual device.

In some examples the database management component interacts with applications and database management systems to ensure that production applications other applications such as applications under test database management systems and databases are properly managed as copies of production databases are created and made available to standby computing devices . For example the database management component may interact with applications or database management systems to quiesce reads from and writes to a database to set permissions for a database to attach a database with a database management system or application to capture and play back logs or journals or otherwise bring a database into a consistent state and or to otherwise make a particular database available to an application or user.

In some examples the reservation management component monitors and manages the provisioning of snapshot based access of development machines to builds stored in arrays and the provisioning of snapshot based access of standby computing devices to databases stored in an array . For example the reservation management component may reserve a certain number of development machines for a certain build and may delete snapshots once a development machine is finished with a provided build after a specified period of time or after a specified period of inactivity and or may perform other functions described herein.

As another example the reservation management component may reserve a certain standby computing device for testing a certain application and may delete the snapshots associated with that standby computing device when the device is finished using a provided snapshot. The reservation management component may also delete the snapshots associated with that standby computing device after a specified period of time or after a specified period of inactivity and or may perform other functions described herein. The reservation management component may maintain and implement schedules for refreshing particular databases such as test databases.

In some examples in collaboration with the virtual machine management component the reservation management component may cause a virtual machine to be established and provided to a development machine in response to a request from the development machine for a certain build. is a block diagram illustrating a virtualization layer in which aspects of the system may be implemented. Although not described separately herein the reservation management component may also collaborate with the virtual machine management component in order to cause a virtual machine to be established and provided to a standby computing device in response to a request from the standby computing device for access to a certain production database.

In general virtualization refers to the simultaneous hosting of one or more operating systems on a physical computer. Such virtual operating systems and their associated virtual resources are called virtual machines. Virtualization software sits between the virtual machines and the hardware of the physical computer. One example of virtualization software is ESX Server by VMware Inc. of Palo Alto Calif. Other examples include Microsoft Virtual Server and Microsoft Windows Server Hyper V both by Microsoft Corporation of Redmond Wash. and Sun xVM by Sun Microsystems Inc. of Santa Clara Calif. Virtualization software provides to each virtual operating system virtual resources such as a virtual processor virtual memory a virtual network device and a virtual disk. Each virtual machine has one or more virtual disks. Virtualization software typically stores the data of virtual disks in files on the file system of the physical computer called virtual machine disk files in the case of VMware virtual servers or virtual hard disk image files in the case of Microsoft virtual servers . For example VMware s ESX Server provides the Virtual Machine File System VMFS for the storage of virtual machine disk files. A virtual machine reads data from and writes data to its virtual disk much the same way that an actual physical machine reads data from and writes data to an actual disk.

Referring to the virtual layer may operate on or be hosted by a computing device such as the development and database manager . The virtual layer may also include or be connected to a virtual data store such as primary data store disk or secondary data store disk connected to the virtual layer via a storage area network. The virtual layer also includes a virtual machine storage manager operating on or being hosted by another computing device which may be another server and a secondary storage data store connected to the computing device. The computing devices may be connected to each other via a network which may be a LAN a WAN the public Internet some other type of network and so on.

The virtual layer hosts one or more virtual machines . The virtual machine includes an operating system and one or more applications executing on the operating system or loaded on the operating system. The operating system may be any type of operating system such as Microsoft Windows 95 98 NT 2000 XP 2003 2008 2010 Linux operating systems Sun Solaris operating systems UNIX operating systems Apple OSx and so on that can be hosted by the virtual layer . The applications may be any applications e.g. database applications file server applications mail server applications web server applications transaction processing applications snapshot applications media streaming applications build applications and so on that may run on the operating system . The virtual machine may also be connected to the various networks described herein.

The operating system may be connected to the virtual storage disks via the SAN which may be any type of SAN such as a Fibre Channel SAN an iSCSI SAN or any other type of SAN. A primary storage data store may store the virtual disks of the virtual machine hosted by the virtual layer . A virtual disk may correspond to one or more files e.g. one or more .vmdk or .vhd files on the primary storage data store. The primary storage data store may store a primary copy of the data of the virtual machine . Additionally or alternatively the virtual disks may be stored by other storage devices in a data storage system such as in the cloud based computing system .

A primary copy of data generally includes a production copy or other live version of the data that is used by a software application and is generally in the native format of that application. Primary copy data may be maintained in a local memory or other high speed storage device e.g. on the virtual disks located in the primary storage data store that allows for relatively fast data access if necessary. Such primary copy data may be intended for short term retention e.g. several hours or days before some or all of the data is stored as one or more secondary copies for example to prevent loss of data in the event a problem occurs with the data stored in primary storage.

In contrast secondary copies include point in time data and are typically intended for long term retention e.g. weeks months or years depending on retention criteria for example as specified in a storage or retention policy before some or all of the data is moved to other storage or discarded. Secondary copies may be indexed so users can browse and restore the data at another point in time. After certain primary copy data is backed up a pointer or other location indicia such as a stub may be placed in the primary copy to indicate the current location of that data.

The virtual machine storage manager includes a virtual machine storage operation component which includes a Virtual Logical Unit Number VLUN driver for accessing virtual disks and a virtual machine mount component for mounting virtual machines. The virtual machine storage manager also includes a data agent. The data agent includes an integration component that provides functionality for the virtual machine storage operation component. The data agent also includes a virtual disk analyzer component that examines the virtual disk and configuration files corresponding to the virtual disks and extracts metadata from the virtual disk and configuration files. For example the integration component may include a set of scripts that the data agent causes to be run prior to during and or following a copy of virtual machine data. As another example the integration component may be a component that encapsulates or wraps the virtual machine mount component and provides an Application Programming Interface API with functions for accessing the virtual machine mount component. The virtual machine storage manager also includes a data store that maintains data used by the virtual machine storage manager such as data used during storage operations and configuration data.

Virtual disks may have various configurations. As previously described a virtual disk corresponds to one or more virtual disk files e.g. one or more .vmdk or .vhd files on a primary storage data store. A virtual layer may support several types of virtual disks . For example a virtual disk may be either 1 a growable virtual disk contained in a single virtual disk file that can grow in size e.g. a monolithic sparse virtual disk that starts at 2 GB and grows larger 2 a growable virtual disk split into multiple virtual disk files e.g. a split sparse virtual disk comprising multiple 2 GB virtual disk files the aggregation of which can grow in size by adding new virtual disk files 3 a preallocated virtual disk contained in a single virtual disk file e.g. a monolithic flat virtual disk the size of which does not change or 4 a preallocated virtual disk split into multiple virtual disk files e.g. a split flat virtual disk comprising multiple 2 GB virtual disk files the number of which and the size of each of which does not change . Where a virtual disk is split into multiple virtual disk files each individual virtual disk file is called an extent. A virtual layer may also support types of virtual disks other than these types. Those of ordinary skill in the art will understand that a virtual disk can be structured in a wide variety of configurations and that virtual disks are not limited to the configurations described herein.

A virtual layer may support snapshotting or taking a snapshot of a virtual machine. The virtual layer can snapshot a virtual machine in a linear fashion in which there is only one branch of snapshots from the original state of the virtual machine and each snapshot in the branch linearly progresses from prior snapshots or in a process tree in which there are multiple branches of snapshots from the original state of the virtual machine and two snapshots may or may not be in the same branch from the original state of the virtual machine . When a snapshot is taken of a virtual machine the virtual machine stops writing to its virtual disks e.g. stops writing to the one or more .vmdk files . The virtual machine writes future writes to a delta disk file e.g. a delta.vmdk file using for example a copy on write COW semantic. As the virtual machine layer can snapshot a virtual machine repeatedly there can be multiple delta disk files. The virtual disk and delta disk files can be analogized to links in a chain. Using this analogy the original disk file is a first link in the chain. A first child delta disk file is a second link in the chain and a second child delta disk file is a third link in the chain and so forth.

Also as previously described a virtual machine generally has associated configuration files that a virtual layer uses to store configuration data about the virtual machine. These configuration files may include a .vmx file which stores data about the parent child relationships created between virtual disk files and delta disk files when a snapshot of a virtual machine is taken. These configuration files may also include a disk descriptor file e.g. a .vmdk file . In some examples instead of using a disk descriptor file the disk descriptor is embedded into a virtual disk file e.g. embedded in a .vmdk file .

The disk descriptor file generally stores data about the virtual disk files that make up a virtual disk . This data includes information about the type of the virtual disk. For example the virtual disk may be a monolithic flat virtual disk a monolithic sparse virtual disk a split flat virtual disk a split sparse virtual disk or another type of a virtual disk. This data also includes an identifier of the parent of the virtual disk file if it has one if the virtual machine has been snapshotted its original virtual disk file will have a child virtual disk file a disk database describing geometry values for the virtual disk e.g. cylinders heads and sectors and information describing the extents that make up the virtual disk. Each extent may be described by a line in the disk descriptor file having the following format type of access size type file name of extent . Following is an example of a line in the disk descriptor file describing an extent 0053 RW 16777216 VMFS test flat.vmdk. This line describes an extent for which read write access is allowed of size 16777216 sectors of type VMFS e.g. for use on a primary storage data store and the filename of the virtual disk file test flat.vmdk. 

A virtual layer provides an abstraction layer such that the one or more virtual disks files and any delta disk files of the virtual disks appear as one or more actual disks e.g. one or more hard disk drives to a virtual machine. Because the virtual layer abstracts the virtual disk so that it appears as an actual disk to an operating system executing on the virtual machine the operating system can generally use its standard file system for storing data on a virtual disk . The various structures used by the file system and the operating system e.g. the partition table s the volume manager database s and the file allocation table s are stored in the one or more virtual disk files that make up a virtual disk.

For example a virtual layer may store a single virtual disk file e.g. a single .vmdk file that is a preallocated virtual disk a monolithic flat virtual disk for each virtual disk used by a virtual machine operating on the virtual layer . The single virtual disk file may be named flat.vmdk. There would also be a disk descriptor file for the single virtual disk file that would typically be named .vmdk. A snapshot taken of the virtual machine would result in an additional delta disk file being created that is a single virtual disk file e.g. a single .vmdk file which is a growable virtual disk a monolithic sparse virtual disk . The delta disk file would typically be named delta.vmdk where is a number indicating the sequence of the snapshot. There would also be a disk descriptor file for the single virtual disk file that would typically be named .vmdk again where is a number indicating the sequence of the snapshot.

Further details regarding the establishment of a virtual machine may be found in commonly assigned U.S. patent application Ser. No. 12 553 294 filed on Sep. 3 2009 entitled SYSTEMS AND METHODS FOR MANAGEMENT OF VIRTUALIZATION DATA which is incorporated by reference in its entirety.

Thus the system may include devices and or components configured and or programmed to perform snapshots on build data stored in array volumes. Further the system may include devices and or components configured and or programmed to mount the snapshots to requesting development machines mount the snapshots to established virtual computing provided to requesting development machines or perform other functions that facilitate access to build data via the snapshots.

Also the system may include devices and or components configured and or programmed to perform snapshots on databases stored in array volumes. Further the system may include devices and or components configured and or programmed to mount the snapshots to requesting standby computing devices mount the snapshots to establish virtual computing provided to requesting standby computing machines or perform other functions that facilitate access to databases via the snapshots.

As discussed herein the system enables development machines to access software builds by utilizing snapshot mechanisms to provide copies of the software builds. is a flow diagram illustrating a routine for providing a development build to a computing device.

In step the system presents a display showing available builds within a software development environment. For example a user interface component may present a user interface that presents a list of builds data volumes associated with software development to a development machine . The user interface may be a webpage or other page provided within a network that enables developers to review and access various different builds during the development of software.

In step the system receives an indication that a build has been selected at a computing device. For example the user interface presented at a development machine receives an indication that a developer wishes to access a certain build during the development of software such as a selection of a build volume presented within the user interface.

In step the system performs a snapshot on an external array having a volume storing the selected build. For example a snapshot management component in communication with the user interface component causes a snapshot mechanism at the external array to perform a snapshot of a volume containing the selected build. In some cases the system may automatically perform the snapshot in response to the selection. In some cases the system may only perform the snapshot once a build is requested.

In step the system mounts the snapshot or a clone of the snapshot to the requesting computing device e.g. via an iSCSI initiator. For example the snapshot management component may cause the snapshot to be mounted to the development machine . In step the system provides access to the requested build. For example the system may provide a drive or other transparent access to a requested build mounted to a development machine.

During access a developer via his her mounted development machine may make changes to the build such as modifications corrections and so on for example using tools such as Visual Studio. Since the mounted snapshot may eventually be deleted the developer may also copy their changed source code or binaries to more persistent storage such to a source code or binary repository. Once access is complete and the development machine no longer needs access to the build or after a specified period of time or after a specified period of inactivity by the development machine the system may delete the snapshot perhaps after providing a warning to the developer take a snapshot of the snapshot automatically take another snapshot when changes are made to the build and so on. That is the system in response to changes made to a build may take a snapshot of the build before checking the build back into the development environment. The system may then delete the original snapshot.

Thus in some examples the system provides an automatic way to mount any software build stored in any external storage device to any development machine creating data for the software build. That is the system enables a developer to view available builds select a build access the build and utilize the build without copying and transferring the data of the build across the development environment among other benefits.

In addition the system in some examples may also provide a complete build environment to developers when needed. For example a certain development machine associated with a developer may not have the tools resources to compile or otherwise work with a build provided to the developer. In such examples the system may enable the developer to receive the necessary resources along with a desired build. is a flow diagram illustrating a routine for providing a virtual machine associated with a development build to a computing device.

In step the system presents a display showing available builds within a software development environment. For example a user interface component may present a user interface that presents a list of builds data volumes associated with software development to a development machine . The user interface may be a webpage or other page provided within a network that enables developers to review and access various different builds during the development of software.

In step the system receives an indication that a build has been selected at a computing device. For example the user interface component presented at a development machine receives an indication that a developer wishes to access a certain build during the development of software such as a selection of a build volume presented within the user interface.

In step the system establishes a virtual machine associated with the selected build. For example the system may determine that a development machine requesting a selected build does not include resources necessary to compile the build. The system may therefore establish a virtual machine that includes preinstalled software and other resources associated with the build. That is the system may create a new virtual build machine that contains all the tools and resources to manipulate the data within the selected build.

In step the system performs a snapshot on an external array having a volume storing the selected build. For example a snapshot management component in communication with the user interface component causes a snapshot mechanism at the external array to perform a snapshot of a volume containing the selected build. In some cases the system may automatically perform the snapshot in response to the selection. In some cases the system may only perform the snapshot once a build is requested.

In step the system mounts the snapshot or a clone of the snapshot to the established virtual machine e.g. via an iSCSI initiator. For example the snapshot management component may cause the snapshot to be mounted to a virtual machine established by the virtual machine component .

In step the system provides the virtual machine to the computing device. For example the virtual machine component provides a virtual machine and all the necessary build data to a development machine

Thus the system may in response to a request for build data establish a virtual machine mount a snapshot of a volume containing build data to the established virtual machine and provide the virtual machine to a software developer.

Since the provided virtual machine may eventually be deleted the developer may also copy his changed source code or binaries to more persistent storage such to a source code or binary repository.

As discussed herein the system enables standby computing devices to access copies of production databases by utilizing snapshot mechanisms to provide access to the databases. is a flow diagram illustrating a routine for providing a computing device with access to a database.

In step the system presents a display showing available databases within a testing environment . For example a user interface component may present a user interface that presents a list of production databases and or data volumes associated with production databases to a standby computing device . The user interface may be a webpage or other page provided within a network that enables testing users to review and access various different databases during the testing of applications or for other purposes .

In step the system receives an indication that a particular production database has been selected for a particular computing device such as a particular standby computing device which will be referred to as the destination device. For example the user interface presented at step may receive an indication that a testing user wishes to access a certain database at their standby computing device e.g. by the user selecting a certain database or volume presented within the user interface. The system may also receive an indication that an updated copy of the particular production database should be automatically provided to the destination device on an indicated schedule e.g. a destination database should be refreshed by overwriting it with a more recent copy of the selected database daily weekly or on some other predetermined schedule .

In step the system may quiesce one or more production applications that are using the selected production database at a production application server . For example the system may interface directly with the application itself and or a database management system e.g. SQL server to temporarily halt any reads or writes to the selected production database.

In step the system performs a snapshot on the array having a volume that stores the selected database and then clones the snapshot. For example a snapshot management component in communication with the user interface component causes a snapshot mechanism at the external array to perform a snapshot of a volume containing the selected database and to clone the resultant snapshot.

In step the system mounts the cloned snapshot to the destination device e.g. using an iSCSI initiator or via Fibre Channel protocols. For example the snapshot management component may cause the cloned snapshot to be mounted to a destination standby computing device using an iSCSI initiator. In step the system provides the destination device with access to the requested database. For example the system may provide a drive letter on the computing device that provides transparent access to a volume containing a copy of the requested database and or sets the privileges for the copy of the requested database.

Prior to steps and the system may determine if any applications are already running on the destination device and whether any applications at the destination device are already using an existing copy of the same production database. For example in the event that the routine is being used to refresh a test copy of a database used by one or more applications under test the system may determine whether the destination device already has an existing copy of the same production database mounted via an earlier snapshot. If it determines that there is an existing copy prior to steps and the system may first kill any sessions between applications and the existing test database shut down those applications under test and or delete a mounted snapshot that has the existing test database.

In step the system brings up an application and or DBMS at the destination device and provides the application and DBMS with access to the mounted copy of the database e.g. by attaching the new mounted copy with the application and or a DBMS. In some examples the system may interface with a database management system to set the permissions on the newly mounted copy of the database so that an application or a testing user may read from write to and otherwise access the copy of the database on the mounted drive e.g. by setting the user s permissions to owner or similar .

In step the system captures and plays back logs or journals from the production application server and takes other steps to bring data and metadata in the mounted copy of the database into a consistent state. For example the database management component may query a production application at the production application server and or engage a database management system at the production application server to identify any data and metadata changes that occurred just before during or just after the snapshot was performed at block . The database management component may then use this information to adjust the data and metadata in the copy of the database mounted at the destination computing device in order to bring the copy of the database into a consistent state. In some examples step is performed prior to step .

After blocks and a testing user or an application may access data and metadata in the mounted copy of the database and or make changes to the mounted copy of the database such as via commit operations and so on. For example a testing user may run scripts for the application that change the data in the mounted copy of the database. Since the mounted snapshot may eventually be deleted the testing user may also copy their changed database to more persistent storage such as the file system of the production server e.g. if they want their changes to persist.

Once access is complete and the destination computing device no longer needs access to the database or after a specified period of time or after a specified period of inactivity by the standby computing device the system may delete the snapshot e.g. after appropriate warning to a user take a snapshot of the snapshot automatically take another snapshot when changes are made to the database and so on. In some examples the mounted snapshot or a snapshot of the mounted snapshot can be mounted back at a production application server to permit the production application server to access the changed version of the database. The system may then delete the original snapshot.

At step the system resumes the production application that was quiesced at block so it can resume normal operation.

If a schedule was specified at step the system may automatically repeat steps in accordance with the schedule indicated at step . For example the system may repeat these steps to ensure that a testing database at a destination location is regularly refreshed i.e. overwritten or replaced with more recent data from a production database with minimal disruption at the production server and at the destination device.

Thus in some examples the system provides an automatic way to mount any database stored in any external storage device to any standby computing device. That is the system enables a testing user to view available databases select a database access the database and utilize the database without transferring the entirety of the contents of the database across the development environment and restoring the entirety of its contents among other benefits. The user may also receive updated copies of the selected database automatically via scheduled refresh operations.

In addition to development and testing environments the system may be utilized in other computing environments. For example the system may provide access to data using snapshots in document storage environments multimedia libraries document management systems e.g. SharePoint and other environments in which data may be staged and or accessed by users without affecting other users. As another example the system may provide duplicate virtual machines by taking a snapshot of a virtual machine at a source location and booting up the snapshot at a destination location.

In some examples the system may perform various load balancing on arrays and other external storage devices that take snapshots of data and provide the data to users within a network. For example the system may balance the load across various connectors in an array when multiple snapshots are being performed at the array. Thus such load balancing techniques may facilitate the system to provide access to builds or databases within a development or testing environment without bottlenecks on storage devices among other benefits.

Additionally the system may employ a reservation policy that limits the time of access of a build for a developer. That is the system may automatically delete snapshots after a certain time period of inactivity associated with a developer s access of a requested build perhaps after warning the developer of the impending deletion . The reservation policy may limit the time of access in accordance with other policies for example the reservation policy may delete a snapshot once it reaches a predetermined size. Similarly the system may employ a reservation policy that limits the time of access of a database for a test user. That is the system may automatically delete snapshots after a certain time period of inactivity associated with a test user s access of a requested database perhaps after warning the user of the impending deletion . The reservation policy may limit the time of access in accordance with other policies for example the reservation policy may delete a snapshot once it reaches a predetermined size.

Therefore the system in some examples enables developers to access builds and associated computing resources in a software development environment by utilizing the snapshot capabilities of external arrays and other data storage components. The snapshot mechanisms facilitate quick and easy access to data associated with builds providing developers with access to an entire development environment at their development machine. Further the system may establish virtual development machines to developers providing developers with a wide variety of resources and data within a development environment.

Therefore the system in some examples enables test users to access databases in a test environment by utilizing the snapshot capabilities of external arrays and other data storage components. The snapshot mechanisms facilitate quick and easy access to data associated with databases and quick and automated ways to refresh databases.

Aspects of the system may be performed in an information management system which is described in the various patent applications that are incorporated by reference herein.

From the foregoing it will be appreciated that specific embodiments of the system have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the system. Accordingly the system is not limited except as by the appended claims.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. The word coupled as generally used herein refers to two or more elements that may be either directly connected or connected by way of one or more intermediate elements. Additionally the words herein above below and words of similar import when used in this application shall refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items that word covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above detailed description of embodiments of the system is not intended to be exhaustive or to limit the system to the precise form disclosed above. While specific embodiments of and examples for the system are described above for illustrative purposes various equivalent modifications are possible within the scope of the system as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative embodiments may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed in parallel or may be performed at different times.

The teachings of the system provided herein can be applied to other systems not necessarily the system described above. The elements and acts of the various embodiments described above can be combined to provide further embodiments.

These and other changes can be made to the system in light of the above Detailed Description. While the above description details certain embodiments of the system and describes the best mode contemplated no matter how detailed the above appears in text the system can be practiced in many ways. Details of the system may vary considerably in implementation details while still being encompassed by the system disclosed herein. As noted above particular terminology used when describing certain features or aspects of the system should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the system with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the system to the specific embodiments disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the system encompasses not only the disclosed embodiments but also all equivalent ways of practicing or implementing the system under the claims.

While certain aspects of the system are presented below in certain claim forms the inventors contemplate the various aspects of the system in any number of claim forms. For example while only one aspect of the system is recited as embodied in a computer readable medium other aspects may likewise be embodied in a computer readable medium. Accordingly the inventors reserve the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the system.

