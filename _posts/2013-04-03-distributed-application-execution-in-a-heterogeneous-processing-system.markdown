---

title: Distributed application execution in a heterogeneous processing system
abstract: A method for distributing execution of a computer program to a plurality of hardware architectures of different types including: analyzing the computer program to identify a plurality of execution boundaries; selecting one or more execution boundaries from the plurality of execution boundaries; linking the computer program to the selected one or more execution boundaries; executing the computer program with linked execution boundaries; saving a hardware agnostic state of the execution of the computer program, when the execution encounters a boundary from the selected one or more execution boundaries; and transmitting the hardware agnostic state to a remote hardware architecture to be executed on the remote hardware architecture, responsive to the hardware agnostic state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09158584&OS=09158584&RS=09158584
owner: RAYTHEON CYBER PRODUCTS, LLC
number: 09158584
owner_city: Herndon
owner_country: US
publication_date: 20130403
---
This invention disclosure is related to a government contract. The U.S. Government has certain rights to this invention.

The present invention relates to execution of computer programs and more specifically to a method for distributing application program execution in a heterogeneous processing system.

Due to computationally intensive applications the need for high performance computing processing systems that interact with other computing processing environments for example audio video systems control systems networked applications image processing and the like is ever increasing.

In general a heterogeneous computing systems refers to a system that uses several different types of computational devices modules. A computational device could be a general purpose processor a special purpose processor for example a digital signal processor or graphics processing unit a co processor or a custom application specific integrated circuit ASIC or field programmable gate array FPGA all of which include processors with different instruction set architectures. Conventionally programming heterogeneous machines is complicated and time consuming since developing applications that make best use of characteristics of different processors increases the programmer s burden. Conventional methods that require hardware specific code to be included throughout the application code increases the complexity and decreases the portability of software on heterogeneous architectures.

Modern computing systems have many different types of processors in terms of both power and architecture. In most cases those processors are not used to their full potential. One of the issues that limits this under utilization is that there is no easy way to send portions of an application to be processed on a remote processor while allowing access to the local system resources.

Historically this problem has been solved by packaging isolated sections of data that require processing and shipping off that data for remote processing. However this conventional method only works for applications that contain data and processing that are capable of being isolated and do not need to interact with other system resources. An exemplary framework that does this is Hadoop which utilizes the Hadoop Distributed File System HDFS to distribute data to its compute nodes and then schedules processing with a JobTracker.

In some embodiments the present invention is a method for distributing execution of a computer program to a plurality of hardware architectures of different types. The method includes analyzing the computer program to identify a plurality of execution boundaries selecting one or more execution boundaries from the plurality of execution boundaries linking the computer program to the selected one or more execution boundaries executing the computer program with linked execution boundaries saving a hardware agnostic state of the execution of the computer program when the execution encounters a boundary from the selected one or more execution boundaries and transmitting the hardware agnostic state to a remote hardware architecture to be executed on the remote hardware architecture responsive to the hardware agnostic state.

In some embodiments the present invention is a method for distributing execution of a computer program to a plurality of hardware architectures of different types. The method includes analyzing the computer program to identify an execution boundaries linking the computer program to the execution boundary executing the computer program with the linked execution boundary in an originating hardware architecture saving a hardware agnostic state of the execution of the computer program when the execution encounters said execution boundary and transmitting the hardware agnostic state to a remote hardware architecture to be executed on the remote hardware architecture responsive to the hardware agnostic state wherein the remote hardware architecture is selected randomly from a list of remote hardware architectures.

The present invention is directed to a method for distributing application program execution in a heterogeneous processing system. The invention seamlessly passes a hardware agnostic execution state between a variety of different types of computational devices modules with their own processors. In other words the state being passed and the state passing mechanism is not tied to any particular architecture and thus new hardware processor types can easily be added and removed from a heterogeneous computing system employing the present invention. The hardware agnostic state is transferred to a target hardware without making the executing application aware of what portions of the application is executing by which remote hardware.

With the present invention portions of the application can be executed remotely but share system resources file system I O and user interface and interact with other program components as if they were running locally. This allows the excess hardware in a computing system to be more effectively and more frequently utilized. Fully utilizing the hardware of a heterogeneous system has benefits in both power and security. Certain types of processing is more power efficient when it takes place on specific hardware and matching the types of processing to their optimal hardware can have a large impact on the overall power efficiency of the system. From a security standpoint an attacker needs to know the underlying architecture of a system to crack an attack payload. If the architecture is rapidly and randomly changing it will be difficult for the attackers to successfully match their payload to the changing architecture.

In some embodiments a common interface layer such as an application programming interface API is identified in the application to allow the transfer of the state to occur without requiring modification of the application. The present invention allows the state to be transferred and system resources e.g. remote processing hardware to be shared among different architectures.

Once the execution boundary is understood identified a method of capturing execution state is identified. This method captures all necessary execution information to allow processing to be transferred and restarted on another system regardless of the underlying architecture of that system.

The method of transfer between processors can be anything that provides a real time transfer capability both to and from the remote hardware because the originator hardware may be waiting to resume processing until it hears back from the remote hardware. In this case other applications may be running on the originator hardware at this time so computing resources are not wasted.

The applications or sub applications that will be running on the remote hardware are also identified and transferred to their corresponding hardware. That is identifying which applications are running where before they are sent to and started on their respective hardware. This can be done in advance of the execution or on the fly allowing the execution assignments to be done at random. The result is an application set executing on a distributed set of hardware but from the applications perspective running on a single system.

Referring back to one or more execution boundaries is are selected from the plurality of execution boundaries in block . In some embodiments the execution boundary is selected based on the design goal of the system. For example if all execution is destined for the same place then an execution boundary where there is an execution bottleneck is chosen. Conversely if execution is to be widely distributed then an execution boundary that is more spread out is chosen. The boundary could also be selected based on type of application running for example a network application would require a boundary that provides flexibility with the networking interfaces it provides. Also a graphical application would require direct access to GPU interfaces. Another example may be data backup applications that need access to storage interfaces.

In block the computer program is linked to the selected one or more execution boundaries. In some embodiments the linking is accomplished by placing a program in the identified execution boundary which intercepts all communication. This interceptor program or a sniffer program needs to knows e.g. based on process ID which data exchanges to intercept in the selected execution boundary so the specific program must be identified usually done by process ID but there can be other methods . The identification could also be done by user calling frequency or a predetermined pattern every third call is rerouted. The computer program is then executed with linked execution boundaries in block .

In block a hardware agnostic state of the execution of the computer program is saved when the execution encounters a boundary from the selected one or more execution boundaries. In some embodiments the interceptor captures the data and control exchanges over the identified boundary and forms a state of the application at the time. The information being exchanged is then organized and packaged in an architecture hardware agnostic fashion for transmission to a remote hardware processing unit. This state information and any data needs to be operated on by the remote hardware processing unit.

On the remote hardware architectures execution of the transferred state begins and once the task is completed the results are returned to the originating hardware. That is the results are returned to the originating hardware by a reverse process of the transfer. Accordingly the state will be in the form of the identified interface and is then translated back into the local calling conventions.

Referring back to in block the hardware agnostic state is transmitted to a remote hardware architecture to be executed on the remote hardware architecture responsive to the hardware agnostic state. The destination hardware and the method of transportation are identified before the agnostic state is transmitted to the remote hardware architecture. In some embodiments part of the interceptor program role is to send out the state after it is captured so it is configured with a destination and method of transport. The method of transport is usually fixed i.e. a network transport between nodes but it is possible that something like a direct bus transfer or serial connection is made. The destination could be conditional on the type of the call made or all calls could go to the same destination. In some embodiments the destination may be randomized for example for security purposes so that an attacker wouldn t know where the underlying architecture is and how to access it. That is the remote hardware architecture is selected randomly from a list of remote hardware architectures.

In some embodiments the invention groups the selected one or more boundaries for different types of hardware architectures and link the application to the grouping. This way each portion of the executing application can be optimally assigned and transferred to a corresponding remote hardware with minimum execution and or transmission cost. For example in some cases a single interface does not allow an application to perform its task remotely. In these cases a grouping of interfaces would be needed. An example of this is an application whose range of functions is defined by what data the user enters for example a terminal shell and therefore need to be capable of remotely executing a large number of unrelated actions. This grouping of multiple boundaries allows interception on more than a single execution boundary by multiple interceptors.

It will be recognized by those skilled in the art that various modifications may be made to the illustrated and other embodiments of the invention described above without departing from the broad inventive step thereof. It will be understood therefore that the invention is not limited to the particular embodiments or arrangements disclosed but is rather intended to cover any changes adaptations or modifications which are within the scope and spirit of the invention as defined by the appended claims.

