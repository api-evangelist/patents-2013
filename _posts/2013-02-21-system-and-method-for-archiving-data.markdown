---

title: System and method for archiving data
abstract: Systems, methods, apparatus and software can utilize a markup language to import and export data that is archived using a backup and restore system. An export utility extracts data produced or processed by an application program, converts it into a markup language format, and provides it to a backup and restore system. An import utility extracts data in a markup language format, converts it to another format, and provides the data for use by the application program. In one example, the application program is a database management system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782013&OS=08782013&RS=08782013
owner: Symantec Operating Corporation
number: 08782013
owner_city: Mountain View
owner_country: US
publication_date: 20130221
---
The present patent application is a continuation of U.S. patent application Ser. No. 10 266 449 filed on Oct. 8 2002 entitled System and Method for Archiving Data and is incorporated by reference herein in its entirety and for all purposes as if completely and fully set forth herein.

The present invention relates to the field of data protection and more particularly to a system and method for saving and restoring data using markup languages.

The ever increasing reliance on information and the computing systems that produce process distribute and maintain such information in its myriad forms continues to put great demands on techniques for data protection. Simple systems providing periodic backups of a computer system s data have given way to more complex and sophisticated data protection schemes that take into consideration a variety of factors including the wide variety of computing devices and platforms encountered numerous different types of data that must be protected the speed with which data protection operations must be executed and the flexibility demanded by today s users.

Information protection within computing system is controlled and coordinated by software operating on backup and restore master server . The software operating on the backup and restore master server is the brains for all data protection activities and provides for example scheduling and tracking of client computer system backups and restorations management of data storage media and convenient centralized management of all backup and restoration activities. In the example illustrated in backup and restore master server can also have one or more storage devices e.g. tape drive attached directly to the server or through network for backing up and restoring data from multiple clients. In support of such a data protection system each of the clients e.g. server workstation and workstation of backup and restore master server typically includes backup and restore client software or agents. Such agents typically receive instructions from backup and restore master server and handle the extraction and placement of data for the particular client computer system. Together backup and restore master server and the backup and restore agent operating on a client computer system can backup and restore files directories raw partitions and databases on client systems. Such data protection software can also be used to archive and restore logical database data.

While the system described in performs data protection duties well protecting and archiving large amounts of data from specific applications e.g. database management systems can pose additional challenges. Typical database backup and database extraction operations include physical backups logical exports and ASCII file dumps. These operations are not particularly suited for long term archiving because they either use proprietary file formats or are not self describing. Online and offline physical database backups are generated using proprietary tools associated with the database management system. For example physical database backups of databases created by Oracle Corporation s database management systems can utilize Oracle s Recovery Manager RMAN tool to provide quick restore and point in time recovery to protect from media failures. However such techniques use the proprietary vendor file format and must be recovered using the database management system after the data has been restored. Logical exports of relational data using database vendor proprietary tools supplement physical database backups and provide protection from user failure by allowing for the restoration of individual tables. However logical exports also produce proprietary formats that can only be read by vendor tools. ASCII dump files e.g. comma delimited tabular data are in a non proprietary format but are not self describing using a standard method. Vendor tools are available to load data from an ASCII dump file by creating a control file that instructs the specific tool how to load the data but the format of the control file is not standard across vendor tools.

In addition the time to produce each type of backup or logical extraction varies considerably with the method. Although one of the most efficient methods for backup and restore is physical database backup followed by proprietary export and corresponding import such techniques suffer the above mentioned deficiencies. The time to produce an ASCII dump file and any associated control information is generally longer than physical backups.

Finally the amount of space required for each type of backup or logical extraction also varies with the method. The relative size of the backup or logical extraction depends on the percentage of unused blocks in the database and in the case of a proprietary export how much meta data is included and whether or not indexes are included.

Accordingly it is desirable to provide systems and methods for data protection that provide the added flexibility and archival advantages lacking in current systems.

It has been discovered that systems methods apparatus and software can utilize a markup language to import and export data that is archived using a backup and restore system. An export utility extracts data produced or processed by an application program converts it into a markup language format and provides it to a backup and restore system. An import utility extracts data in a markup language format converts it to another format and provides the data for use by the application program. In one example the application program is a database management system.

Accordingly in one aspect of the present invention a system includes a backup and restore module and a markup language module. The backup and restore module is configured to at least one of generate a first data stream to be backed up and transmit the first data stream to a backup and restore server for further direction to a storage device and receive a second data stream from a backup and restore server. The markup language module is configured to at least one of translate data from an application into a markup language version of the data from the application and pass the markup language version of the data from the application to the backup and receive markup language data from the backup and restore module and translate the markup language data from the backup and restore module into data for the application.

Another aspect of the present invention provides a method. A request to archive data associated with an application program is received. The data associated with the application program is extracted from at least one data file. The data associated with the application program is translated into a markup language version of the data associated with the application program. The markup language version of the data associated with the application program is transmitted to at least one of a backup and restore module and an archive file.

Still another aspect of the present invention provides another method. A request to import markup language data associated with an application program is received. The markup language data associated with the application program is received from at least one of a file and a backup and restore module. The markup language data associated with the application program is translated into an application program readable version of the markup language data. The application program readable version of the markup language data is loaded into an application program data file.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail. Consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. As will also be apparent to one of skill in the art the operations disclosed herein may be implemented in a number of ways and such changes and modifications may be made without departing from this invention and its broader aspects. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

The following sets forth a detailed description of at least the best contemplated mode for carrying out the one or more devices and or processes described herein. The description is intended to be illustrative and should not be taken to be limiting.

Integrating markup language support in the distributed data backup and restoration system of provides added flexibility and a variety of additional features. In general a markup language can be thought of as a set of codes designed to accompany data typically in the form of a text file and to instruct a computer system how to format present index and or link the accompanying data. Markup languages can include so called metalanguages a language for describing other languages which allow the design of customized markup languages for supporting a variety of different types of documents. While the systems and techniques described below will focus on the use of a particular markup language the eXtensible Markup Language XML it should be understood that a variety of different markup languages can be used to implement the systems and methods described in this application.

The eXtensible Markup Language XML is quickly becoming a standard way to identify and describe data from many different types of sources and deliver it in standard format across an enterprise and between businesses in e commerce applications. The XML specification is developed and maintained by the World Wide Web Consortium W3C . Like the HyperText Markup Language HTML XML is a subset of the Structured Generalized Markup Language SGML as specified by the International Organization for Standardization ISO 8879 1986 . Unlike HTML which tags elements in web pages for presentation by a browser XML tags elements as data. Tags can be defined by using them in an XML document or they may be formally defined in a Document Type Definition DTD or schema. The XML format is a computer system application and database independent format. It is self identifying in that it contains the keys to understanding the format of the data as well as the data itself. XML is also highly granular in that it can be used to describe any subset of data in a database.

Because XML includes data i.e. metadata describing the underlying data it is used with XML can be used to satisfy requirements for long term data archiving. Because XML is not the proprietary technology of one software vendor it provides added flexibility to migrate data and to gain access to data long after proprietary tools and the companies that provide them are no longer available.

In general backup and restore agent provides an interface between applications or facilities needing data storage management for backup or archive purposes and the underlying services which provide these functions. An application programming interface API is provided that supports both data movement and data management. The functions provided include support for both the backup restoration and the archive retrieval of tailored sets of data objects including files directories and byte streams for many different applications and users operating concurrently. Facilities to support archive and backup object searches and the ability to handle a large volume of large data objects a wide spectrum of systems and system configurations and a high level of integrity including guaranteeing consistency and atomicity of multiple operations is provided.

Backup and restore agent also interfaces with markup language agent which performs much of the markup language related data processing for computing system . Markup language agent can interface with a variety of different application programs operating on client computer system . Markup language agent includes two utilities export utility and import utility to perform data conversion of data exported to and imported from an application. As shown markup language agent interfaces with a database management system DBMS . In turn database management system produces processes modifies and or manipulates the data stored in database .

As illustrated in backup and restore agent and markup language agent are shown as separate software modules. These modules and indeed any of the software modules described herein can be combined into single software modules implemented on separate computer systems executed as separate threads on a single computer system etc. Additionally the other components of backup and restore system e.g. backup and restore master server and media server are merely exemplary and can be implemented in a variety of different ways as is well known in the art. For example the software implementing backup and restore master server functionality and the software implementing media server functionality can be combined so that both functions are performed on a single server. Other examples of software operating on backup and restore master server and media server as well as software such as backup and restore agent can be found in the VERITAS NetBackup family of products provided by VERITAS Software Corporation.

The markup language export feature can be used for long term archival when the likelihood of needing the data in the short term is low and provides the option to bring back the data at some future time when the current set of operating systems DBMSs applications etc. may not be available. In the case of an XML implementation imported or exported data includes both the desired data itself and metadata describing the organization of the data. The metadata that is included in an XML document generated by export utility typically includes table names column names and column data types. Data value constraints e.g. a not null column constraint can also be included. Other types of metadata can optionally be included such as other types of constraints indexes and storage parameters e.g. extent size and default tablespace.

With a description of the data to be extracted as provided by script parameter file query processor takes the necessary steps to have the appropriate application provide it with the desired data. Continuing with the database management system example query processor builds the appropriate database query e.g. one or more structured query language SQL statements to run against database . For example query processor will use the information from script parameter file to construct commands used by database management system to extract the desired data. Query processor may also perform additional functions such as validating a user s access to the data validating the export request and reporting any error associated with the request. The query commands are passed to DBMS processed by DBMS and the extracted data returned to query processor .

Query processor typically interfaces with database management system or any other application from which data is to be extracted via an application programming interface API that is part of DBMS or provided by for use with DBMS . In some cases the API itself executes the commands prepared by query processor . Alternately DBMS can include features allowing it to interface directly with other programs. In addition to the target data to be extracted query processor may also receive metadata describing for example the organization of the data types of and or constraints on the target data. Such metadata may have to be translated into a format appropriate for the markup language in use. For example the format of a date data type as used by DBMS might be different from the format used by the markup language. Consequently query processor can provide translation of this metadata in preparation for its use by markup language generator . Thus the output of query processor includes both metadata describing the table or tables of data extracted from database and the table data itself.

Information is typically passed from query processor to markup language generator on a buffer by buffer basis. The size of the buffer can be set as one of the parameters initially passed to export utility . In the case of an XML implementation markup language generator builds for each table of data received an XML schema document and one or more XML instance documents. The XML schema document includes the aforementioned metadata while the instance document includes the actual data. A table that contains LOB data Large Objects will typically result in more than one XML instance document. Each piece of LOB data will be stored in a separate XML instance document and the primary instance document for the table references each LOB document using a Uniform Resource Identifier URI reference. If a table does not contain LOB data only one XML instance document is typically created. In addition a master XML schema document can be built that contains include references to each of the individual XML schemas.

With the extracted data now translated into the desired markup language format the data is passed to backup and restore software operating on backup and restore master server . Once the data leaves markup language generator it is treated by the backup and restore system just as any other data stream that is being backed up. Thus the data might pass from markup language generator to backup and restore agent shown in before it is received by backup and restore software . Additionally backup and restore software can include its own application programming interface that is specific to software and facilitates processing of data to be archived. Alternately backup and restore software can interface directly with the software operating on client computer system to receive the markup language data stream. Once received by backup and restore software the markup language data stream is saved e.g. to tape drive in a desired manner as specified by backup and restore master server . Alternately or in addition to saving via backup and restore master server the markup language version of the extracted data can be saved to markup language files . Although illustrated as being saved to storage that is a part of client computer system the markup language version of the extracted data can in general be saved to any part of the computing system via for example network .

Export Utility is typically implemented as a separate program and uses an appropriate DBMS interface to extract table definitions and table data from database . For example if DBMS is one of the database management systems provided by Oracle Corporation export utility might interface with DBMS using the Oracle Call Interface OCI which provides a C language call interface to Oracle databases. In one embodiment of export utility the following are examples of parameters used by export utility and thus parameters that might be included in parameter file or passed directly to export utility via a command line user interface 

These parameters their descriptions and their default values are merely illustrative of the types of parameters that might be used by export utility to perform data extraction and conversion into a markup language format. Other possible parameters scripts or commands will be well known to those having ordinary skill in the art.

A markup language export operation can be scheduled by invoking export utility via a script or command that is part of a backup policy and implemented by scheduler or some other portion of backup and restore software and or backup and restore agent . In this way the user can schedule markup language archiving. Moreover such scripts can also allow for additional pre and post processing of the data to be extracted. In the case of data in database for example SQL post processing can be used to delete database rows that have been archived by export utility . In other examples SQL scripts are invoked either before or after an export or import. These scripts can be used to drop and recreate constraints and indexes before and after an import and to create tables before an import. A variety of other possible pre and post processing operations will be well known to those having ordinary skill in the art.

The input parameters for archive identification sent to import utility are passed to backup and restore software . In the example illustrated the parameters are passed to software via application programming interface . Backup and restore software locates and reads in the case where the markup language is XML the set of XML schema and instance documents from the appropriate storage device e.g. a tape in tape drive . The stream of XML data is passed to markup language parser . Markup language parser organizes data and metadata extracted from the archive and transfers that information to markup language data loader one buffer at a time. Alternately import utility can restore the files directly to a file system directory. In yet another example the input parameters for archive identification sent to import utility instruct the utility to load markup language files from a file system directory e.g. markup language files .

Markup language data loader inserts received data into database . To accomplish this task markup language data loader either interfaces directly with DBMS or utilizes an application programming interface such as the aforementioned OCI. In one embodiment import utility assumes that the table to be inserted already exists logically within database . Thus import utility does not create any database objects. In another embodiment import utility can include functionality to create or cause the creation of database objects. Additional access control can also be used to determine for example whether or not a user is authorized to import a particular table.

An additional feature of import utility is the ability to import only metadata. This information can be used for example to track or catalog which information is archived in a markup language format. The metadata can also be used to compare data formats and or constraints with similar information in the database objects to which data may ultimately be imported. Any differences can be identified and the user alerted so that desired format constraint changes can be made. Additionally either import utility or another piece of software not shown can include data mining functionality thereby allowing the markup language files to be searched statistics to be compiled on the data and particular pieces of data to be extracted.

In one embodiment import utility selects the archive to be restored based upon a combination of parameters including the name of the archive date ranges that specify when the archive was created the username that was used to create the archive the database schema owners contained in the archive specific database objects contained in the archive and keywords associated with the archive. Once an archive has been identified markup language parser requests for restore only the table data that was specified in the parameter file. It then parses the archive data that is returned from the backup and restore software a buffer at a time. Each archive is a backup image that includes multiple backup objects typically a minimum of three backup objects per image corresponding to a master schema a table schema and a table instance document. If a table contains LOB data the LOB data will be included in the table instance document backup object rather than being stored as separate backup objects in the backup image. For each table markup language parser first determines the data types of all of the columns being loaded and based on the data types sizes etc. it parses the table instance document that can contain embedded LOB data. If the archive is being restored to a system directory the parser creates multiple XML instance documents depending on the presence of LOB data.

Markup language data loader inserts the parsed data into database and its behavior is controlled by the user via the parameter file. The user can control whether the data should be inserted into the table if data already exists in the table. In one example the default behavior is not to insert any data if the table contains any rows. The user also has control over how many rows are inserted at a time and how often DBMS commits the set of row inserts that have occurred so far. If the table already contains data in the database these parameters can be used to control inserting a subset of the rows from the archive for example if there are unique constraint violations on some of the data the user can force all rows that don t have a constraint violation to be inserted by setting COMMIT y and ROW BUFFER 1 .

In one embodiment of import utility the following are examples of parameters used by import utility and thus parameters that might be included in parameter file or passed directly to import utility via a command line user interface 

In general both export utility and import utility are designed to operate with designated data types associated with the application producing data to be archived. For example where DBMS generates data for database that conforms with data types defined by DBMS export utility and import utility include functionality to support such data types and perform markup language import export while maintaining the data types. Additionally some applications may allow user specified as opposed to vendor specified data types. Such data types can also be supported by export utility and import utility given sufficient information about the user defined data types. In a similar manner data constraints specifying valid data values are supported by export utility and import utility . For example a NOT NULL column constraint from a database can be represented in the XML Schema generated by export utility using the XML entity attribute nillable. If a database column is NOT NULL nillable would be set to false otherwise it would be set to true. In a similar fashion other constraints can be supported.

In many implementations it is desirable that data archived using the tools described above be readily accessible by a variety of different software tools. To that end it will typically be preferable to use standards based markup languages e.g. XML 1.0 as approved by the World Wide Web Consortium W3C . Such support may also require adherence to other standards. For example it may be desirable or necessary to encode the exported documents using a Unicode character set e.g. UTF 8 and UTF 16 as described in the Unicode Standard as promulgated by the Unicode Consortium.

Those having ordinary skill in the art will readily recognize that the techniques and methods discussed below can be implemented in software using a variety of computer languages including for example traditional computer languages such as assembly language Pascal and C object oriented languages such as C and Java and scripting languages such as Perl and Tcl Tk. Additionally software and can be provided to the computer system via a variety of computer readable media including electronic media e.g. flash memory magnetic storage media e.g. hard disk a floppy disk etc. optical storage media e.g. CD ROM and communications media conveying signals encoding the instructions e.g. via a network coupled to network interface .

Computer system also includes devices such as keyboard mouse SCSI interface network interface graphics display hard disk and CD ROM all of which are coupled to processor by communications bus . It will be apparent to those having ordinary skill in the art that computer system can also include numerous elements not shown in the figure such as additional storage devices communications devices input devices and output devices as illustrated by the ellipsis shown. An example of such an additional computer system device is a fibre channel interface.

Although the systems methods apparatus and software of the present invention have been described using database management system and database examples it will be understood by those having ordinary skill in the art that extension can be made to virtually any data producing process application and the resulting data. Thus the present application should not be thought of as being limited to use in the context of databases and database management systems.

Although the present invention has been described with respect to a specific preferred embodiment thereof various changes and modifications may be suggested to one skilled in the art and it is intended that the present invention encompass such changes and modifications fall within the scope of the appended claims.

