---

title: Defining and mapping application interface semantics
abstract: An example implementation includes a system having one or more processors, a definition module, a data store, and a workflow module. The definition module is executable by the one or more processors to determine a first semantic element for a first operation included in a first application interface representing a first service and a second semantic element for a second operation included in a second application interface representing a second service, such as an enterprise service bus. The definition module may further determine a mapping of the first semantic element with the second sematic element. The data store is configured to store the mapping of the first semantic element with the second sematic element by the definition module. The workflow module is executable by the one or more processors to integrate the first application interface with the second service based on the mapping.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09552400&OS=09552400&RS=09552400
owner: Staples, Inc.
number: 09552400
owner_city: Framingham
owner_country: US
publication_date: 20130531
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 654 788 entitled Application Integration filed on Jun. 1 2012 the entire contents of which is incorporated herein by reference.

Integrating applications with an enterprise system can often be a complex process due to differing characteristics and requirements between the enterprise system and the applications being integrated. A significant amount work and time are generally required to document and understand these differences so the integration can be performed reliably and successfully which can cause the integration to exceed budgets and deadlines. Additionally since the application and enterprise environment are dynamic and often undergo changes maintaining and scaling the integration of the applications can be unsustainable. Furthermore current approaches for integrating applications with enterprise systems are often limited in providing for collaboration on shared documents synchronizing common information across related documents identifying changes and notifying stakeholders and providing an effective review and approval cycle.

According to one innovative aspect of the subject matter in this disclosure a system includes one or more processors a definition module a data store and a workflow module. The definition module is executable by the one or more processors to determine a first semantic element for a first operation included in a first application interface representing a first service and a second semantic element for a second operation included in a second application interface representing a second service. The definition module is further executable to determine a mapping of the first semantic element with the second sematic element. The data store is configured to store the mapping of the first semantic element with the second sematic element by the definition module. The workflow module is executable by the one or more processors to integrate the first application interface with the second service based on the mapping. The workflow module is coupled to the data store to access the mapping.

In general another innovative aspect of the subject matter described in this disclosure may be embodied in methods that include determining using one or more computing devices a first semantic element for a first operation included in a first application interface representing a first service determining using the one or more computing devices a second semantic element for a second operation included in a second application interface representing a second service mapping using the one or more computing devices the first semantic element with the second sematic element and integrating using the one or more computing devices the first application interface with the second service based on the mapping.

Other embodiments of one or more of these aspects include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

These and other embodiments may each optionally include one or more of the following features. For instance the system may further include that the definition module is further configured to receive a first interface control document associated with the first service to receive a second interface control document associated with a canonical information model of an enterprise service bus and to store the first interface control document and the second interface control document in the data store that the data store is a centralized repository that the second service includes the enterprise service bus that the first interface control document describes a functionality of the first operation and includes the first semantic element that the second interface control document describes a functionality of the second operation and includes the second semantic element that the second operation is an operation supported by the enterprise service bus that the centralized repository is configured to connect the first semantic element with the second semantic element based on the mapping that the workflow module is further configured to obtain approval of one or more of the first interface control document the second interface control document and the mapping that to integrate the first application interface with the enterprise service bus is further based on the approval a visualization module executable by the one or more processors to generate visualization data that graphically illustrates the mapping of the first semantic element with the second semantic element and to provide the visualization data for display to a user that the definition module is further configured to determine a third semantic element for a third operation included in a third application interface representing a third service determine a mapping of the third semantic element with the second sematic element and integrate the third application interface with the second service based on the mapping of the third semantic element with the second sematic element that the second service includes an enterprise service bus and to integrate the third application interface with the second service integrates the third application interface with the enterprise service bus a visualization module executable by the one or more processors to generate visualization data that graphically illustrates the mapping between the first semantic element and the third semantic element via the second semantic element and to provide the visualization data for display to a user that the definition module is further configured to validate the mapping of the first semantic element with the second sematic element that to validate the mapping of the first sematic element with the second semantic element includes verifying one or more of whether the first semantic element and the second semantic element are compatible whether a required semantic element of the first application interface or the second application interface has been mapped and whether a semantic element that has been incorporated by reference is valid and that the definition module is further configured validate the mapping by determining the mapping to include an error and notifying a stakeholder about the error via an electronic message.

For instance the operations may further include receiving using the one or more computing devices a first interface control document associated with the first service the first interface control document describing a functionality of the first operation and including the first semantic element receiving using the one or more computing devices a second interface control document associated with a canonical information model of an enterprise service bus the second service including the enterprise service bus the second operation being an operation supported by the enterprise service bus and the second interface control document describing a functionality of the second operation and including the second semantic element storing using the one or more computing devices the first interface control document and the second interface control document in a centralized repository that the mapping of the first semantic element with the second semantic element includes connecting the first semantic element with the second semantic element in the centralized repository obtaining using the one or more computing devices approval of one or more of the first interface control document the second interface control document and the mapping that the integrating the first application interface with the enterprise service bus is further based on the approval generating using the one or more computing devices visualization data that graphically illustrates the mapping of the first semantic element with the second semantic element providing using the one or more computing devices the visualization data for display to a user determining using the one or more computing devices a third semantic element for a third operation included in a third application interface representing a third service mapping using the one or more computing devices the third semantic element to the second sematic element integrating using the one or more computing devices the third application interface with the second service based on the mapping of the third semantic element with the second sematic element that the second service includes an enterprise service bus and the integrating of the third application interface with the second service integrates the third application interface with the enterprise service bus generating using the one or more computing devices visualization data that graphically illustrates the mapping between the first semantic element and the third semantic element via the second semantic element providing using the one or more computing devices the visualization data for display to a user validating using the one or more computing devices the mapping of the first semantic element with the second sematic element that the validating of the mapping of the first sematic element with the second semantic element includes verifying one or more of whether the first semantic element and the second semantic element are compatible whether a required semantic element of the first application interface or the second application interface has been mapped and whether a semantic element that has been incorporated by reference is valid and that the validating of the mapping further includes determining the mapping to include an error and notifying a stakeholder about the error via an electronic message.

For instance the features may further include that the second service includes one of an enterprise service bus an extract transform load framework and a gateway that the first semantic element includes a field associated with an input message of the first operation and the second semantic element includes a field associated with one of an output message and an error message of the second operation that the first semantic element includes a field associated with an output message of the first operation and the second semantic element includes a field associated with one of an input message and an error message of the second operation and that the first service is a consumer service and the third service is a provider service and the first operation may request that the second operation call the third operation to provide a resource.

It should be understood that the language used in the present disclosure has been principally selected for readability and instructional purposes and not to limit the scope of the subject matter disclosed herein.

The present disclosure describes innovative and novel technology for defining and mapping application interface semantics integrating application interfaces with an enterprise service bus ESB using the interface definitions and mappings and for visualizing and managing the application integrations. The system depicted in may in some embodiments include an integration repository and workflow system which enables centralized storage of metadata for functional and nonfunctional properties of application interfaces. In various embodiments the integration repository and workflow system is capable of supporting point to point integrations ESB enterprise application integrations ETL extract transform load integrations gateway appliance integrations etc.

In some embodiments the functional and nonfunctional properties of an application interface service are stored as a dataset referred to herein as an interface control document ICD . The terms ICD and application interface may be referred to interchangeably herein in some instances. The ICD can in some non limiting examples include data describing an application interface s function content structure semantics security performance service level agreements etc. In some embodiments the ICD can be created modified by an author user via an associated user interface displayed on a client device . For example a user can provide input describing the purpose and scope of the application interface the operations supported by the application interface the protocols to be used for connectivity to the ESB etc.

The following is a non limiting example of the type of information and or general format that the ICD could include 

With reference to the above table the following table includes additional non limiting examples of the representative fields noted in sections 4.1.8.1 4.1.8.2 and 4.1.8.3.

Via mappings the system can allow users to create and maintain transformation rules for data that flows between application interfaces via the ESB . As depicted in and discussed in further detail below multiple mappings may be used to conveniently integrate various entities of the system via the ESB . In addition to its plain and ordinary meaning a mapping includes one or more rules that map the elements of one ICD to another ICD. In some embodiments a mapping may link the message semantics defined by the ICD of an application interface to a canonical information model of the ESB or vice versa.

For example for a given operation included in an ICD of a consumer service a mapping may include rule s that map an output message semantic of that operation to a corresponding input message semantic of the ESB ICD. Continuing this example a second mapping may map the input message semantic of the ESB ICD to a corresponding input message semantic and operation of an ICD a provider service thereby linking the operations of the consumer service and the provider service.

By way of further example and not limitation a mapping may include references to a target service ICD and a source service ICD and one or more transformation rules that map operation field s included in the source ICD to corresponding operation field s included in the target ICD including for example corresponding input output and error message semantics. A transformation rule may indicate the fields e.g. semantic elements being mapped. Additionally the transformation rule may include electronic pointers e.g. XPaths to the fields being mapped formatting requirements of the fields being mapped comments for the fields being mapped version information for the mapping and fields swimlane information for the mapping the status of the mapping the change record reviewers approvers contributors creation date date of last update document location dependencies references open issues etc.

A source ICD included in a mapping may reflect the application interface service of a first entity e.g. consumer provider subscriber publisher ESB etc. and the target ICD may reflect the application service interface of a compatible second entity e.g. consumer provider subscriber publisher ESB etc. . In addition to its plain and ordinary meaning a service includes a computer based service provided to customers over a network. While the services described herein relate to enterprise level services it should be understood that this disclosure is applicable to other types of services including specialized services consumer services local services a combination of the foregoing etc.

In some cases an ICD of a consumer provider subscriber publisher etc. may define an element not included in the canonical information model of the ESB . If such gaps exist the technology can automatically enhance the canonical information model to support the new information. The technology also supports branching e.g. versioning dividing by swimlane etc. of both ICDs and mappings as discussed further elsewhere herein.

The integration data store may include a centralized graph based data store which provides query and browse capabilities and enables users to ask and answer questions about the web of related systems that are enabled by the centralized data store and the overall architecture of the system see . In some embodiments integration data store stores the ICDs and mappings in an interconnected graph based format that is dynamically scalable and can easily be queried by any dimension including for example by integrations ICDs mappings semantics etc. One benefit of storing the ICDs and mappings in this way is that the effect of any changes to an ICD or mapping on other related ICDs and or mappings may immediately be analyzed and determined even down to the lowest level e.g. semantic level . For example if a specific semantic element of an ICD is changed an impact analysis can be run to determine the impact on other mappings ICDs and applications that directly or indirectly rely on that field.

The ICDs and mappings as described herein provide a number of benefits including for example clarifying fundamental requirements of an application interface prior to its integration with the ESB speeding the testing cycle for integrating the application interface shortening quality assurance testing cycles reducing quality problems in the integration and quality assurance testing cycles and generating a standard library of ICDs that can be reused and or modified for reuse in future integrations.

An example system for integrating application interfaces with an ESB is depicted in . As depicted the system may include an enterprise system servers . . . also referred to herein individually and collectively as and client devices . . . also referred to herein individually and collectively as which are accessible by users . . . also referred to herein individually and collectively as as illustrated by lines . . . . These entities may be communicatively coupled via a network . For instance the enterprise system may be coupled to the network as illustrated by signal line the servers . . . may be coupled to the network as illustrated by signal lines . . . and the client devices . . . may be coupled to the network as illustrated by signal lines . . . . The servers . . . may also be directly coupled to the enterprise system as illustrated by signal lines . . . . While only one network is depicted as coupling the entities of the system e.g. enterprise system the servers . . . and the client devices . . . in practice any number of networks or network combinations can connect these entities.

The network may include one or more wired or wireless networks having any number of network configurations including for example a star configuration token ring configuration or other known configurations. The network may include any interconnected data path across which multiple devices may communicate including for example a local area network LAN a wide area network WAN e.g. the Internet a wireless wide area network WWAN a virtual private network VPN various telecommunications networks direct data connections etc. In some embodiments the network may include device to device communication networks e.g. Bluetooth peer to peer P2P networks etc. for sending and receiving data between devices. The network may transmit data using a variety of different communication protocols including for example user datagram protocols UDP transmission control protocols TCP hypertext transfer protocol HTTP hypertext transfer protocol secure HTTPS file transfer protocol FTP various cellular protocols various email protocols etc. Computing devices e.g. etc. may couple to and communicate via the network using wireless and or wired connections.

The enterprise system may include one or more computing devices and data storage devices and may provide various enterprise services to other entities coupled to the network including for example the servers . . . and client devices . . . although the enterprise system may have different configurations and include different components. As depicted the enterprise system includes an enterprise server an integration server a registration server an enterprise data store and an integration data store which are coupled for electronic communication with one another e.g. via direct data connections computer network s e.g. the network a combination thereof etc. . Additionally each component of the enterprise system may be coupled to the network e.g. as illustrated by the signal line for cooperation and communication with one another and the other entities of the system .

The enterprise server the integration server and or the registration server may each include one or more physical and or virtual computing devices such as a hardware server a virtual server a server array and or any other computing device or group of computing devices having data processing storing and communication capabilities. In some embodiments some or all aspects of the enterprise system may be virtualized e.g. using a virtual machine implemented via software and or implemented via a cloud based architecture with computing and storage systems that are dynamically scalable and distributed across the network . Although only one enterprise server integration server and registration server are shown multiple servers and may be included. Moreover it should be understood that the enterprise system may be made up of any combination of computing devices or a single computing device.

The enterprise server may host the ESB which as discussed further elsewhere herein facilitates interaction between various applications that have been integrated with the ESB . For instance a consumer service can connect to a provider service that is integrated with via the ESB to retrieve information about various products and services offered by the provider service e.g. see description of below . The enterprise data store and the integration data store are information sources for storing data and providing access to stored data. In some embodiments the enterprise data store and the integration data store may be included in one or more of the enterprise server the integration server and the registration server . In other embodiments the enterprise data store and or the integration data store may be included in a server or storage system distinct from but accessible by the enterprise server the integration server and or the registration server . It should be understood that further configurations are also contemplated in within the scope of the present disclosure.

The registration server may include a registry module which includes software instructions executable by one or more processors of the registration server to provide a service registry for the services integrated with the ESB . Registration information may be access stored and maintained by the registry module in a data store such as the enterprise data store . In some embodiments the registry module may determine information about the services registered with the ESB including status of the integration ownership information for the services information from mappings and ICDs associated with the service service requirements etc. and provide that information to other entities including services providers consumers etc. seeking to utilize resources offered by the service. The registry module may access the above noted information from the integration data store and or the enterprise data store .

The integration server may include an integration engine for integrating application interfaces with the ESB . In particular by way of example and not limitation the integration engine may provide for the definition of ICDs for application interfaces and the mapping of ICD semantics with the ESB manage approval for integrating application interfaces with the ESB generate and provide visualizations of the ICDs and mappings etc. as discussed elsewhere herein. Additional structure and functionality of the integration server and integration engine are discussed in further detail below with reference to at least .

The enterprise data store and or the integration data store may include a database management system DBMS executable by a processor to manage a collection of records files and objects including the media objects. In some embodiments the integration data store may store the integration related data including ICD data mapping data workflow data review data approval data etc. In some embodiments the integration data store may include an RDF data store for storing data in resource description format RDF and or web ontology language OWL . For example the ICDs and mappings may be stored in the RDF data store as RDF and or OWL documents. In some embodiments the properties included in an ICD may be represented in the form of subject predicate object expressions and easily linked to other ICDs with which it is connected and or dependent upon. Use of this RDF data store is advantageous as it allows the ICDs and mappings to be stored in a graph based format that is easily understandable and efficiently searchable to yield the parameters and dependencies of a given integration and is dynamically scalable to support large number of applications e.g. 1 000 1 000 000 or more that may be integrated with the ESB . In these embodiments the data stored in the RDF data store may be manipulated inserted selected updated deleted etc. using programmatic operations e.g. SPARQL Protocol and RDF Query Language SPARQL .

In some embodiments the enterprise data store and or the integration data store may also include a structured query language SQL DBMS for storing data in multi dimensional tables having rows and columns and manipulate i.e. insert query update and or delete rows of data using programmatic operations e.g. SQL . The enterprise data store may store data for operating and managing the ESB such as registry data security data authentication data configuration data server data e.g. logs performance data transaction data etc.

The client devices . . . are computing devices having data processing and data communication capabilities. Example client devices may include but are not limited to a desktop laptop server appliance set top box mobile phone tablet other wireless handheld computing device server workstation etc. While illustrates a system including two or more client devices the present disclosure applies to any system architecture having any number of client devices . Additional structure and functionality of an example client device is discussed below with reference to at least .

The integration server depicted in is provided by way of example and it should be understood that the integration server may take other forms and include additional or fewer components without departing from the scope of the present disclosure. For example while not shown in some embodiments the integration server may include additional and or alternative components such as input and output devices e.g. a computer display a keyboard and mouse etc. .

The processor includes an arithmetic logic unit a microprocessor a general purpose controller or some other processor array to perform computations and provide electronic display signals to a display device not shown . The processor may be coupled to the bus for communication with the other components of the integration server . The processor may process data signals and may have various computing architectures including a complex instruction set computer CISC architecture a reduced instruction set computer RISC architecture or an architecture implementing a combination of instruction sets. Although only a single block for the processor is shown in the processor may include one or more and or processing cores. The processor may be capable of supporting the display of images and the capture and transmission of images perform complex tasks including various types of feature extraction and sampling etc. It should be understood that the integration server may include various operating systems sensors displays additional processors and other physical configurations.

The memory stores instructions and or data including for example the integration engine which may be executed by the processor . The instructions and or data may comprise code for performing any and or all of the techniques described herein. The memory includes a non transitory computer usable e.g. readable writeable etc. medium capable of containing storing communicating propagating or transporting instructions data computer programs software code routines etc. for processing by or in connection with the processor . In some embodiments the memory may include volatile memory non volatile memory or both. For example the memory may include a dynamic random access memory DRAM device a static random access memory SRAM device flash memory a hard disk drive a floppy disk drive an optical storage device e.g. DVD CD Blu ray etc. a flash memory device etc. It should be understood that the memory may be a single device or may include multiple types of devices and configurations. The memory may be coupled to the bus for communication with the processor and the other components of integration server .

The communication unit may include one or more interface devices I F for wired and wireless connectivity with the network and the other components of the system . For instance the communication unit may include but is not limited to CAT type interfaces wireless transceivers for sending and receiving signals using Wi Fi Bluetooth cellular communications etc. physical interfaces e.g. USB various combinations thereof etc. As depicted in the communication unit may be coupled to the network via the signal line coupled to the servers . . . via signal lines . . . and coupled to the enterprise and integration data stores and via the bus the network or some other data path. In some embodiments the communication unit can link the processor to the network which may in turn be coupled to other processing systems. The communication unit can provide other connections to the network and to other entities of the system using various standard communication protocols including for example those discussed elsewhere herein.

As depicted in the integration server may include an integration engine for providing the system integration functionality described herein. The integration engine may include among other modules a definition module a visualization module and a workflow module . In various embodiments integration engine and its sub components and may be sets of instructions stored in the memory and executable by the processor for communication with the other components of the integration server may be implemented via one or more application specific integrated circuits ASICs coupled to the bus for cooperation and communication with the other components of the integration server sets of instructions stored in one or more discrete memory devices e.g. a PROM FPROM ROM that are coupled to the bus for cooperation and communication with the other components of the integration server a combination thereof etc.

In some embodiments the integration engine the definition module the visualization module and or the workflow module are sets of instructions executable by the processor to provide their functionality and or are stored in the memory of the integration server and are accessible and executable by the processor to provide their functionality. In these embodiments the integration engine the definition module the visualization module and or the workflow module may be adapted for cooperation and communication with the processor and other components of the integration server .

In some embodiments the definition module the visualization module and or the workflow module are coupled to the integration data store and or the enterprise data store to manipulate e.g. store update retrieve delete etc. data storable therein. The integration engine the definition module the visualization module and or the workflow module may also be coupled may also be coupled to one another to send and receive data.

The definition module includes software code logic and or routines for working with e.g. composing modifying validating comparing etc. ICDs and mappings. The definition module may be coupled to the integration data store to manipulate e.g. retrieve update store delete etc. ICDs and mappings validation data and other data stored by the integration data store . In various embodiments the definition module may receive ICD or mapping definition data from another information source such as client application operating on a client device and then format and or store the ICD or mapping definition data in the integration data store as an ICD or mapping. In some embodiments the definition data ICD mapping etc. may be received responsive to a user inputting the ICD or mapping elements information into a form presented by the client application to the user. For instance a user may input ICD or mapping related information or may import ICD or mapping related information from another information source such as a local or remote file repository and then send that information to the definition module via the network for processing and or storage in the integration data store . Non limiting examples of the various ways ICDs and mappings may be processed by definition module in cooperation with the other elements of the system such as the client application are discussed in further detail below with reference to at least .

In some embodiments the definition module can validate the ICDs and mappings that have been or are being defined by the user. For instance the client application may send the ICD and or mapping information being input by a user that is composing and or editing the ICD or mapping to the definition module which may analyze the information for errors irregularities impacts etc. and then inform the user of the issues by generating and sending a notification to the user e.g. via the client application or another messaging system e.g. email . In another instance the definition module may automatically analyze ICD and mapping for issues at regular intervals or in response to receiving a trigger event such as the receipt of a visualization review or approval request from a stakeholder of the ICD or mapping.

In some embodiments during the validation process the definition module may validate an entire chain of ICDs and mappings associated with one or more integrations or portions thereof including any ICDs or mappings that are incorporated by reference to identify any issues that may have been replicated throughout the chain. In some embodiments any issues identified may be illustrated e.g. using coloring or highlighting in the impact visualization views depicted by the user interfaces shown in . In other embodiments the definition module may analyze mapping information as it is being defined by a user via the mapper see and can send validation information to the mapper so the user receives real time feedback of any ICD fields that may have been incorrectly or incompletely mapped.

In some embodiments the definition module may cooperate with the visualization module and or workflow module to validate one or more ICDs or mappings. In other embodiments the visualization module or the workflow module may include the validation functionality of the definition module and may validate any ICDs or mappings itself.

In some cases a user may wish to visualize the effects a mapping is having on the integration and may switch from a mapping view to a visualization view e.g. see that shows the impacts of the elements that have been mapped which elements have not yet been mapped which elements have been incorporated by reference whether any issues exist that need to be resolved e.g. errors incompatibilities etc. .

The visualization module includes software code logic and or routines for generating visualization data that graphically illustrates the relationships and or shows the impacts of changes between the various ICDs and mappings associated with an integration and for providing the visualization data for presentation to the user. The visualization data may illustrate an overview of the chain of ICDs and mappings associated with an integration may illustrate a detailed view of the same may illustrate how changes may affect certain aspects of the integration e.g. mapped fields functionality etc. may illustrate a detailed view of how certain items are interrelated such as certain operations sematic elements etc. For instance if an integration requires a consumer service be mapped to a provider service via the ESB the visualization data may illustrate the mapping of the consumer service to the ESB as well as the mapping of the ESB to the provider service so the user may visualize the details of the integration. In another example for an existing integration the visualization data may show how a proposed revision e.g. to an ICD mapping etc. may affect other aspects of the integration such as dependent semantic elements mappings of those elements etc.

The visualization module may generate visualization data that provides any desired level of granularity. For example as shown in the visualization data may show how the specific fields of each operation are mapped to one another the specific transformation rules used to map the fields the formatting required which fields are incorporated by reference and where they are incorporated from the electronic locations e.g. XPaths of the various fields impacts of proposed changes to the fields and or mappings thereof etc.

The visualization module may send the visualization data via the network to the client application for presentation to the user. In some embodiments the interface module may receive the visualization data and render it for display to the user and the user may provide input to adjust the level of granularity that is being shown dictate which elements show be expanded or hidden and or otherwise customize the viewport to show only the information that is pertinent to the user. In some embodiments the visualization module may be coupled to the integration data store to store the visualization data it generates. In other embodiments the visualization data may generate and provide the visualization data directly to the client application for presentation.

In some embodiments the visualization module may cooperate with the definition module to perform a validation and or impact analysis for changes being proposed for existing ICDs and or mappings or included in new versions and or swimlanes of an ICD and or mapping. This validation and or impact analysis may be narrowed to a specific ICD and or mapping or may extend to any ICD and or mapping that map associated in some way via an integration incorporation by reference etc. . Using the validation and or impact analysis data the visualization module may visually annotate e.g. highlight any elements that may be affected by the changes. In other embodiments the visualization module may perform the validation and or impact analysis itself or cooperation with another element included in the integration engine and or the client application which is dedicated to perform this functionality.

The workflow module includes software code logic and or routines for integrating application interfaces with the ESB based on the ICDs and mappings associated with those interfaces. In some embodiments the workflow module is configured to manage the workflow for drafting publishing reviewing and obtaining approval for ICDs and mappings such that the application interfaces can be integrated versioned etc. The workflow module may be coupled to the other components of the enterprise system such as the integration data store the definition module and or the visualization module to send and receive data such as data related to ICDs mappings and workflows etc. In some instances the workflow module can in cooperation with the definition module enable the management of the lifecycle of the ICDs and mappings.

In some embodiments the workflow module is configured to facilitate the review of and obtain approval for new revised and or swimlaned ICDs and mappings associated with the integration of an application interface. For instance the workflow module may provide ICDs and mappings that are pending review or approval to the relevant stakeholders and in response may receive data indicating whether they have be successfully reviewed or approved. The workflow module may store this review data and or approval data in the integration data store so it can track the status of the ICDs and mappings as well as the overall progress of the integration and ultimately determine based on the review and or approval data whether to integrate and or update the integration of the application interfaces with the ESB . In addition the workflow module may be coupled to the enterprise data store to access and or manipulate data associated with the ESB such as ESB integration requirements and specifications as well as information associated with the registry module for registering the application interfaces services that have been approved for integration with the ESB etc. Additional structure and functionality of the workflow module is discussed below with reference to at least .

By way of further illustration as depicted in the ESB ICD is mapped via the mapping to the ICD which represents a consumer service and mapped via the mapping to ICD which represents a provider service. The mappings and map various elements e.g. semantics of various operations of the ICDs and to one another so the consumer and provider services can interact via the ESB . For instance the mapping may map one or more fields of a first operation included in the ICD to corresponding field s of a second operation included in the ICD and the mapping may map the field s of the second operation included in the ICD to corresponding field s of a third operation included in ICD . By way of further example the mappings and may include rules for translating the fields of the respective ICDs and so they can be properly interpreted and the first and third operations can interact.

The ICDs may also be connected via references. For instance in ICD is connected via the reference to the ICD which reflects a dependency between the ICDs and such as an incorporation by ICD of elements from ICD . By way of further example the ICD may include a reference to one or more semantics of the ICD such as fields of one or more operations included in ICD . Stated another way instead of having to redefine the semantics for a given operation the ICD may use the operation semantics from another ICD such as ICD by referencing them. For simplicity an ICD that references information from another ICD is referred to herein as the referencer ICD and the ICD that is being referenced is referred to herein as the referencee ICD. In some instances the referencer ICD may include an identifier for the referencee ICD as well as the referenced elements e.g. by importing copying them from the referencee ICD an electronic pointer to the location of the referenced elements in the referencee ICD etc.

In some instances the graph may include ICDs that have been versioned or swimlaned. For example as depicted in ICD may include multiple versions such as version 1.0 labeled and version 2.0 labeled . In this example ICD may represent a development version of an application interface while ICD may represent a production version of the application interface and once ICD has been reviewed and approved it may be released to production and replace ICD as the production version e.g. by updating an ESB control table stored in the enterprise data store . While not depicted an ICD may also be branched into multiple development lanes referred to herein as swimlanes so different development groups may simultaneously develop the same version of an ICD without interfering with one another s changes. Eventually the different ICD swimlanes may be merged back together to form a single ICD. The graph may be embodied by the integration data store which may act as a centralized repository and be configured to store the ICDs and their connections to one another mappings references versions swimlanes etc. .

While is shown as including a particular number of ICDs interfaces it should be understood that this embodiment is provided by way of example and that any number of application interfaces whether they consumer ESB provider interfaces or otherwise may be supported by the enterprise system .

By way of further example the semantic element s of the first application interface may be determined from a first ICD associated with the first service and the semantic element s of the second application interface may be determined from a second ICD associated with the ESB . For example a user may input the properties of each application interface into a webpage transmitted by the definition module to the client device for display by a client application and the definition module may receive the input for each interface from the client application and store the input as an ICD in the integration data store . In some embodiments the first ICD may describe the functionality of the one or more operations supported by the first service and may include the semantic element s for those operations. Similarly the second ICD may describe the functionality of the one or more operations supported by the canonical model of the ESB and may include the semantic element s for those operations.

Proceeding to block the method maps the first semantic element s of the first application interface service with the second sematic element s of the canonical model of the ESB . In some embodiments the mapping of the first semantic element s with the second semantic element s may include connecting the first semantic element s with the second semantic element s in the centralized repository such as the integration data store . For example the definition module may perform the mapping by receiving a mapping document that maps the first semantic element s to the second semantic element s to which they correspond and associating the first semantic element s with the second semantic element s in the integration data store . An example of a mapping may include a first semantic element having a field associated with an input message of the first operation mapped with a second semantic element that includes a field associated with one of an output message and an error message of the second operation. Another example may include a first semantic element having a field associated with an output message of the first operation mapped with a second semantic element that includes a field associated with one of an input message and an error message of the second operation.

In block the method validates the mapping of the first semantic element with the second sematic element. In some embodiments the validation of the mapping may include verifying whether the semantic element s can be mapped whether any all required semantic element s of either interface are mapped whether any conflicts with references dependencies associated with the semantic element s being mapped exist etc. By way of further example the validation may include verifying that the first operation and the second operation are compatible for instance by verifying the compatibility of their fields data types data lengths data formats requiredness restrictions functionality invocation types protocols message types message structures or any other property discussed above with reference to ICD properties. In other examples the validation may verify whether a required semantic element of the first application interface or the second application interface has been mapped and whether a semantic element incorporated by reference by another application interface is valid.

The method may in block integrate the application interface with the ESB based on the mapping of the first semantic element s with the second semantic element s . The integration of the application interface may in some instances be based on the validation of the mapping and or semantic element s in block . In some instances the application interface is integrated with the ESB at least in part by enabling use in a production environment of the associated ICDs and mapping for sending data between the mapped operations. The method is then complete.

In block the method obtains approval to integrate the application interface with the ESB . In some embodiments the approval may be based on obtaining approval for one or more of a first ICD which defines the characteristics requirements and functionality of the first application interface a second ICD which defines the characteristics requirements and functionality of the second application interface and the mapping which maps properties from the first ICD with the properties from the second ICD such as the semantics of the corresponding operations supported by each interface. In block the method then can perform the integration of the application interface with the ESB and is then complete.

It should be understood that in various embodiments any number of application interfaces may be integrated with the ESB and ultimately connected to one another for interaction using the methods and or as discussed in further detail with reference to at least . For example in a subsequent iteration of methods and or a third service may be integrated with the ESB by determining third semantic element s for an operation included in a third ICD for a third application interface representing a third service see block mapping the third semantic element s with the second sematic element s of the canonical model of the ESB see block validating the mapping of the third semantic element s with the second sematic element s see block and integrating the third application interface with the ESB based on the mapping of the third semantic element s with the second sematic element s see block . In some instances the first service may be a consumer service and the third service may be a provider service and the first operation may request that second operation call the third operation to provide the first operation with a certain resource calculation information etc. Visualization data that graphically illustrates the mapping between the first semantic element s and the third semantic element s via the second semantic element s may also be generated and provided e.g. by the visualization module for display to a user see block .

Next the method sets a publish date in block for the ICD drafts the ICD in block and publishes the ICD in block . In some instances a component of the integration engine such as the workflow module or the definition module may set the publish date for the ICD by receiving it from a client device and storing it in the integration data store . For example the publish date and the information for the ICD may in some cases be entered it into the client application and transmitted to definition module for processing and storage. Responsive to receiving the ICD information the definition module may generate e.g. draft create modify version swimlane etc. an ICD based on the information and save it in the integration data store .

Once the ICD has been drafted in block the method may submit the ICD for publication. For example the workflow module and or definition module may analyze the ICD to determine whether all required elements of the ICD have been properly defined and or generate and request publication approval from one or more stakeholders e.g. an ICD author contributor . If the ICD is determined to contain deficiencies e.g. errors insufficient information publication approval request has been denied etc. publication of the ICD may be rejected and the method may return to block for further drafting revision etc. If publication of the ICD is approved e.g. by receiving an approval response from the client device of a stakeholder the ICD is submitted to block for review. In some embodiments the ICD may be submitted for review by notifying a stakeholder e.g. reviewer of its review status and requesting it be reviewed. For example a stakeholder may be notified upon logging into a workflow interface or via an electronic message e.g. email .

If during the review the method determines the ICD to be deficient e.g. contain errors insufficient and or inaccurate information etc. the ICD may be rejected during review and the method may return to block for further drafting revision etc. In some embodiments an approver reviewer reviews the ICD by accessing the ICD via an associated review interface displayed on his her client device . Alternatively if during the review the ICD is determined to be in order reviewed in block the method may update the publication of the ICD to indicate such e.g. by saving an indication of such in the integration data store and the ICD may be submitted to block for approval. If during the approval the method determines the ICD to be deficient in some respect e.g. contain errors insufficient and or inaccurate information approval process not followed etc. the may return to block and the ICD approval process may being again. For example if the ICD is rejected in blocks or the workflow module may generate and send notification to one or more stakeholder s e.g. the author reviewers contributors etc. notifying them of the reasons for the rejection and requesting the ICD be updated. If approval is received in block the method determines the ICD to be approved. In some implementations the review and approval performed in blocks and include reviewing and approving the performance and service criteria associated with integrating the application with the ESB . For example the ICD for the application may include requirements for levels of availability serviceability performance operation etc. and the review and approval of the ICD may represent the negotiation and approval of a service level agreement SLA for the application represented by the ICD.

In some embodiments the workflow module may track the progress of the ICD throughout the ICD approval process e.g. blocks and by storing record of the progress in the integration data store which may be used for processing by the other stages of the approval process to determine whether to proceed with the integration. For example the workflow module may then flag the ICD as drafted ready for publication reviewed etc. and the method may proceed to subsequent blocks for further processing. The workflow module may also notify stakeholders of the positive changes in status such as when the ICD has been successfully published reviewed approved etc.

Upon the ICD being published in block the method proceeds to draft a mapping for the ICD in block . In some embodiments the mapping is input by a user via a client mapping module such as the mapper and transmitted to the integration engine e.g. definition module for processing and storage. For example an author may input the mapping values using the mapper operable on the client device of the user. In some embodiments the mapper may extend the functionality of the spreadsheet application and provide the user with real time feedback e.g. highlighting conflicts auto populating cells with information from the ICDs being mapped etc. for the mapping values such as the properties of the ICD being input. In some embodiments the drafting in block is performed in cooperation with the method discussed further below with reference to at least .

The method continues by publishing the mapping. In some embodiments the mapping is published in a manner substantially similar to how the ICD is published in block . For example if publication of the mapping is approved e.g. by receiving an approval response from the client device of a stakeholder the mapping is submitted to block for review and if the publication of the mapping is rejected the method returns to block for further drafting revision. In some embodiments the mapping is reviewed in a manner substantially similar to how the ICD is reviewed in block . For example if in block the method determines during the review the mapping to be in order the method may update the publication of the mapping to indicate such e.g. by saving an indication of such in the integration data store and the mapping may be submitted to block for approval. Alternatively if during the review the method determines the mapping to be deficient e.g. contain errors insufficient and or inaccurate information etc. the mapping may be rejected during review and the method may return to block for further drafting revision etc.

In some embodiments an approver reviewer reviews the mapping by accessing the mapping via the mapper see on his her client device . Alternatively if during the review the mapping is determined to be in order the method may update the publication of the mapping to indicate such e.g. by saving an indication of such in the integration data store and the mapping may be submitted to block for approval. If during the approval the method determines the mapping to be deficient in some respect e.g. contain errors insufficient and or inaccurate information approval process not followed etc. the method may return to block and the mapping approval process may being again. For example if the mapping is rejected in blocks or the workflow module may generate and send notification to one or more stakeholder s e.g. the author reviewers contributors etc. notifying them of the reasons for the rejection and requesting the mapping be updated. If approval is received in block the method determines the mapping to be approved and proceeds to block for integration approval e.g. see .

The method then searches in block for an existing ICD that includes a compatible ICD property to which the first ICD property e.g. field may be mapped. For example the integration engine e.g. the definition module and or workflow module may query the integration data store for ICDs stored therein that include the field. The ICD s identified in may be associated with the canonical model of the ESB . In some cases the definition module and or workflow module may determine the ICD in block based on mapping information it received from a client device specifying which ICD and property the first ICD property should be mapped to. The mapping information may be received real time or have been previously received and stored in and retrieved from a data store such as the integration data store by the integration engine .

If the method determines in block that such an ICD does not exist the method continues by mapping in block the ICD property to the canonical model of the ESB based on the mapping value and ICD property. In some embodiments the operation in block could include operations for defining a new ICD as discussed elsewhere herein for the canonical model ESB that includes the missing fields needed by the mapping.

Alternatively if the method determines an ICD to exist in block the method proceeds to block and determines whether the ICD can be used e.g. whether the version of ICD is valid for use . If not the method proceeds to block and maps the ICD property to the canonical model of the ESB based on the mapping value and ICD property as discussed above. If in block the method determines that the ICD version can be used the method proceeds to map the ICD property to a corresponding property in the ICD found in block e.g. using information from the mapping . In some embodiments the method may identify more than one ICD in blocks and for use with the mapping. For example the method may generate a send a list summary of the available ICDs to a user as suggestions e.g. by automatically pre populating a corresponding table provided by presentation by the mapper and the user may select the appropriate ICD from the list.

In some embodiments when mapping the ICD property in block and or the method determines whether the element being mapped exists in the canonical information model of the ESB . If not the method adds the element to the model. This is advantageous as any gaps in the canonical model can automatically be filled thus reducing bottlenecks in the mapping process. Once the ICD property has been mapped the method returns to the initial approval method denoted by block and any remaining ICD properties being mapped are then processed by the method .

In some embodiments the method performs an approval loop for the ICD by setting a publishing date and drafting publishing reviewing and obtaining approval for the ICD and the approval obtained in block may be fed as input into the integration approval method as discussed below. In some embodiments the drafting publishing reviewing and obtaining approval may be performed by the method in a manner substantially similar to the drafting publishing reviewing and publishing process discussed above with reference to .

In block the method determines whether an existing ICD should be cloned and if so provides in block a list of available ICDs for selection by the user receives in block an ICD selection and copies in block the selected ICD. In some embodiments the interface module receives input requesting to clone an existing ICD and retrieves and provides a list of existing ICDs to the user for selection. The interface module may then receive an ICD selection and may send that selection in a clone request to the definition module . Responsive to receiving the clone request the definition module may clone the ICD and provide the cloned ICD to the interface module for display and or further editing and or validation by the user. In some embodiments to clone the ICD the definition module may duplicate the ICD in the integration data store using a unique identifier and any other information for the cloned ICD provided by the user in the clone request including for example a unique name description and or other metadata etc.

The method then proceeds to block where it determines whether to import an ICD. If so the method receives a document in block defining the ICD or portions thereof. For example the method may import the operations semantics and or other elements of an ICD that may have already been defined using the operations of the method . In some embodiments the interface module accesses a document on a local file system of the user s client device and uploads it to the definition module as the ICD or for inclusion with or to supplement an existing ICD. In other embodiments the interface module cooperates with other elements of the system to facilitate the provision of remotely stored ICD documents to the definition module for further editing and or storage. Upon receiving the document the method may format in block the document into a compatible format e.g. from an XML format into an OWL format .

Next in block the method proceeds to determine whether to compose the ICD and if so determines in block whether one or more elements should be referenced copied and or imported from other previously defined ICDs. For instance a user may search for and or specify using the interface module an ICD and the definition module may retrieve corresponding ICD information and provide it for presentation to the user in response so the user may import copy and or reference various elements from that ICD. In block the method may receive revisions from the user for the elements referenced copied and or imported in block . This reuse of elements is advantageous as it can reduce the amount of time necessary to create the ICD particularly when two or more ICDs may be closely or loosely related e.g. belong to a set of related applications . If in block the method determines that no elements are to be referenced imported copied etc. the method proceeds to compose the elements of the ICD. In some embodiments the interface module may present a ICD definition interface e.g. a web UI not shown with user interface fields for inputting defining the ICD elements information and upon receiving the information the interface module may send it to the definition module for processing and or storage in the integration data store .

The method proceeds in block to determine whether the ICD should be validated and if so the method validates in blocks and the ICD including for example its format whether all required elements have been defined whether any references or dependencies associated with the ICD are valid etc. In some embodiments the definition module is configured to perform the validation operations in block and . As discussed elsewhere herein the validation may in some cases be performed for the user during the ICD drafting process to check his her work may be performed in preparation for submitting the ICD for approval and or review etc.

Next in bock the method proceeds to determine whether the ICD should be branched. This branching functionality gives users powerful tools for developing ICDs including the ability to duplicate an existing production ICD in a development environment where additional operations may be added or existing operations may be improved revised. For example in block the method may determine whether a new version of an existing ICD should be created. If so the method copies in block the ICD to a new version e.g. by storing a new version with a unique identifier in the integration data store . This new version may then be further manipulated using the other operations of the method . In some embodiments more than one swimlane instance of an ICD may be produced so different development groups may work on different instances of the ICD simultaneously. For instance the method may determine in block whether a new swimlane should be created for an ICD. If so the method determines a tag for the swimlane in block . In some embodiments a user inputs a unique identifier as the tag via the interface module which it provides to the definition module and the definition module uses it to form a new swimlane for the ICD. In other embodiments the definition module automatically generates a new tag and or provides a set of suggested tag names for selection by the user. In block the method may create a new swimlane for the ICD by making a copy of the ICD. For example the definition module may store another instance of the ICD and tag and or index that instance in block using the tag determined in block . However other implementations are contemplated where a new swimlane may be created by updating and or adding a tag of that swimlane. For example a swimlane may be initially tagged as a development swimlane and then promoted to a production swimlane in response to receiving input from a user selecting to promote the swimlane to production status from development status. The method may then tag the swimlane by replacing its development tag with a production tag. By way of further example the method may process a swimlane serially by tagging the same swimlane with different tags over time e.g. to reflect its evolution and or in parallel by creating and tagging swimlanes belonging to the same ICD branch with different tags to provide for parallel development.

Moving on in block the method determines whether two or more ICDs should be merged and if so the method determines which ICDs should be merged in block determines whether there are any conflicts between those ICDs in block and then resolves those conflicts in block so the ICDs can be merged in block . In some embodiments the user may input which ICDs are to be merged via the interface module which sends the input to the definition module of the integration engine and the definition module retrieves the ICDs from the integration data store and compares their respective elements to one another to determine which elements remained the same and which have been revised e.g. based on when they were revised number of times they were revised which users revised them etc. . The definition module may then merge the ICDs into a single ICD. In some cases the elements of the ICDs being merged may conflict and the definition module resolve those conflicts so the ICDs may be merged. For example the definition module may detect that a first ICD and a second ICD both contain revisions to an operation e.g. a field was added or modified that are different e.g. by comparing the XML representations of the ICDs and may in cooperation with the user interface present the comparison data to the user which includes the conflict and prompts the user to select which revision should govern and be included in the merged ICD.

In block the method proceeds to determine whether to facilitate visualization of the ICD and if so the method determines the mapped and unmapped elements of the ICD in block determines any dependencies and or references of the ICD in block determines any outstanding issues that need to be resolved in the ICD in block and then generates and provides in block visualization data that describes the configuration state of the ICD including any issues. The determinations made in blocks and may be based on data retrieved from the integration data store including for example mapping data associated with the ICD indicating which elements have been mapped and which are not ICD data indicating which elements are required and must be mapped before the ICD can be approved determining which elements have been incorporated into or referenced from other ICDs etc. In some embodiments the visualization module may retrieve the data and perform the operations in blocks and and generate and provide the visualization data in block to the interface module for rendering and display to the user. Example user interfaces for visualizing the ICDs and how they are mapped via the ESB to one another are discussed in further elsewhere herein including for example with reference to .

Next the method determines whether the ICD should be modified in block and if so the method determines in block whether to include and or revise element s referenced from one or more other ICDs. If one or more elements are to be included or revised the method proceeds to revise and or include these elements in block . For example a user may select to modify a first ICD to incorporate directly or by reference semantics for an operation defined by a second ICD and may provide input identifying those semantics. In response the interface module may send that input to the definition module and the definition module and modify the working instance of the ICD e.g. as cached in memory stored in the integration data store etc. to include those semantics. In some instances the operations in blocks and may be performed in conjunction with other operations including for example the importation and composition operations e.g. and or discussed above. If the method determines in block not to include and or revise the referenced elements the method proceeds to block to include and or revise one or more ICD elements. For example the user may input revisions to the ICD via an interface displayed by the interface module and the interface module may provide the revisions to the definition module for processing and or storage in the integration data store as discussed elsewhere herein.

In block the method determines whether to compare one or more ICDs and if so determines in block which ICDs should be compared and then generates an illustrative comparison of the ICDs in block . In some embodiments the visualization module and or definition module generates and provides the illustrative comparison to a user for review. For example a user may select which ICDs to compare via a user interface rendered for display by the interface module . The interface module may communicate to the definition module and or the visualization module which ICDs should be compared and the definition module and or the visualization module may compare the ICDs e.g. by performing a diff function on their XML representations and provide the diff data to the interface module for presentation to the user in a manner that visually illustrates the differences between them.

Next in block the method may search for one or more ICDs. For example a user may wish to locate an existing ICD which he or she may want to copy clone edit reference etc. and may utilize the search functionality of the integration engine to find it. In some embodiments to search for one or more ICDs a user may enter one or more search terms into interface rendered by the interface module and the interface module may send those search terms to the definition module and the definition module may query the integration data store for one or more ICDs that match the search terms. In some embodiments the user may enter a unique identifier for the ICD a name for the ICD or any other information included in the ICD that may be used to find it. Next in block the method may proceeds to store the ICD. In some embodiments the method may store the ICD after it has been manipulated using one or more of the operations of the method . The ICD may be stored incrementally upon user command or may be stored after it has been fully created edited and or revised e.g. by the definition module . In some embodiments the ICD may initially be stored locally on the client device of the user and then later transmitted to the integration engine for storage in the integration data store or may be stored in the integration data store as it is being manipulated. Other embodiments are also contemplated and possible. The method is then complete.

In block the method determines whether an existing mapping should be cloned and if so provides a list of available mappings for selection by the user in block receives a mapping selection in block and copies the selected mapping in block . In some embodiments the mapper receives input from the client application requesting to clone an existing mapping and retrieves and provides a list of existing mappings to the user for selection. The mapper may then receive a mapping selection in block and may send that selection as a close request to the definition module . Responsive to receiving the clone request the definition module may clone the mapping and provide the cloned mapping to the mapper for display and or further editing and or validation by the user. In some embodiments to clone the mapping the definition module may duplicate the mapping in the data store using a unique identifier and any other information for the cloned mapping provided by the user in the clone request including for example a unique name description and or other metadata etc.

The method then proceeds to block where it determines whether to import a mapping. If so the method receives a document in block defining the mapping or portions thereof and formats the document as a mapping in block . In some embodiments the mapper accesses a document from a local file system of the user s client device and imports and optionally formats the document as a mapping. In some instances the imported mapping may be further manipulated using the other operations of the method . The mapper may store the mapping locally and or may send the mapping to the definition module for further processing formatting and or storage by the definition module as discussed elsewhere herein.

Next in block the method proceeds to determine whether to compose the mapping and if so proceeds in block the method of which is discussed in further detail below with reference to .

Returning to the method proceeds to block where it determines whether the mapping should be modified and if so the method provides in block one or more available mappings receives in block a user selection of a mapping provides in block the selected mapping to the user and receives one or more revisions to the mapping and revises the mapping based thereon e.g. stores the revisions to the mapping in the integration data store for approval and use by the ESB . In some instances block may be processed in conjunction with other operations including for example the importation and composition operations e.g. associated with blocks etc. discussed above. For example the user may input revisions to the mappings using the functionality of the mapper and the mapper may receive and provide the revisions to the definition module for processing and or storage in the integration data store as discussed elsewhere herein.

In block the method proceeds to determine whether to facilitate visualization of the mapping and if so the method determines the mapped and unmapped elements of the ICDs associated with the mapping in block determines any dependencies and or references associated with the mapping in block determines any outstanding issues that need to be resolved in the ICD in block and then generates and provides in block visualization data that describes the configuration state of the mapping including any issues. The determinations made in blocks and may be based on data retrieved from the integration data store including for example mapping data indicating which ICD elements have been mapped and which have not ICD data indicating which ICD elements are required and must be mapped data indicating whether any mapped ICD elements have be incorporated into or referenced by other mappings or vice versa etc. In some embodiments the visualization module may retrieve the data and perform the operations in blocks and generate and provide the visualization data in block to the mapper and or interface module for rendering and display to the user. In some instances the operations in blocks and or may be performed in conjunction with the ICD visualization operations e.g. in blocks and or the ICD validation operations e.g. in blocks and or and or the mapping validation operations e.g. in blocks and or to provide the user a complete visualization of how the mappings and ICDs are connected and whether any conflicts exist and or need to be resolved.

The method proceeds in block to determine whether the mapping should be validated and if so the method validates in blocks and the mapping including for example its format whether all required ICD elements have been mapped whether any of the mapped elements conflict or are improperly mapped whether any references or dependencies associated with the mapped elements are valid etc. In some embodiments the definition module may perform or cooperate with other modules to perform the validation operations in block and . Further the definition module may cooperate with the mapper to receive the mapping information provided by the user for validation and provide validation data indicating whether any errors and or conflicts exist in the mapping. As discussed elsewhere herein the mapping validation may in some cases be performed for the user during the mapping drafting process to check his her work may be performed in preparation for submitting the mapping for approval and or review etc.

In block the method determines whether to compare one or more mappings and if so determines in block which mappings should be compared and then generates and provides an illustrative comparison of the mappings in block . In some embodiments the visualization module and or the definition module generates and provides the illustrative comparison to a user for review. For example a user may select which mappings to compare via a user interface rendered for display by the interface module . The interface module may communicate which mappings should be compared to the definition module and or the visualization module and the definition module and or the visualization module may compare the mappings e.g. by performing a diff function on their XML representations and provide the diff data to the interface module for presentation to the user in a manner that visually illustrates the differences between them.

Next in block the method may search for one or more mappings. For example a user may wish to locate an existing mapping which he or she may want to copy clone edit reference etc. and may utilize the search functionality of the integration engine to find it. In some embodiments to search for one or more mappings a user may enter one or more search terms into interface rendered by the mapper or interface module and that component may send those search terms to the definition module and the definition module may query the integration data store for one or more mappings that match the search terms. In some embodiments the user may enter a unique identifier for the mapping a name for the mapping or any other information included in the mapping that may be used to find it. Next in block the method may proceed to store the mapping. In some embodiments the method may store the mapping after it has been manipulated using one or more of the operations of the method . As with the ICD the mapping may be stored incrementally upon user command or may be stored after it has been fully created edited and or revised. In some embodiments the mapping may initially be stored locally on the client device of the user and then later transmitted to the integration engine for storage in the integration data store or may be stored in the integration data store as it is being manipulated. Other embodiments are also contemplated and possible. The method is then complete.

The method also proceeds to determine a list of target ICDs in block and provides that list for presentation to the user in block number . In response to providing the list of target ICDs for presentation to the user the method receives a selection of a target ICD from the list presented determines one or more semantics of the target ICD in block . Then the method provides the one or more target ICD semantics for presentation to the user in block .

Responsive to providing the one or more source ICD semantics and the one or more target ICD semantics in blocks and respectively the method receives in block a mapping of or more of the target ICD semantics with one or more of source ICD semantics. Thus based on the source and target semantic s determined in blocks and respectively a mapping of one or more target ICD semantic s with one or more source ICD semantic s may be determined by the method .

In some embodiments when inputting mapping information a user may select a source ICD semantic s to link to a target ICD semantic s and in doing so may specify how the source semantic s should be transformed and or what action should be performed e.g. via a transformation rule in order for the source semantic s to be compatible with the target ICD semantic s . As a further example the mapper may receive the source and target ICD semantics from the definition module and provide them for presentation in a user interface and the user may input via the mapper which source and target ICD semantics should be linked and indicate the rules for them to be linked including any actions and or formatting that may need to be performed in order for information to flow between the operations relying on those semantics. The input provided by the user may be sent by the mapper back to the definition module for further processing and or storage in the integration data store in association with the ICDs being mapped by it.

Next the method verifies in block whether all conditions for mapping the ICDs have been met such as whether all required fields of the ICDs being mapped by the mapping have been mapped. For example the ICDs being mapped by the mapping may include elements that are required to be mapped or that require certain conditions be met before a mapping can be approved. These elements may be flagged as such by the ICDs such as with a required or conditional flag etc. which may be used to determine whether the conditions for mapping the ICDs have been satisfied.

In block the method determines whether any ICD dependencies impact the mapping. For example if an ICD includes a reference to another ICD and that other ICD has been changed while the mapping is being composed or after it has been composed the method may determine whether any of those changes affect the mapping. For instance if a required element is added to an ICD upon which a mapped ICD depends then the method can identify that change. Next in block the method notifies any stakeholders of any issues identified during the validation process such as any errors outstanding requirements or impacts determined in blocks and respectively. The stakeholder s may include any user s associated with the mapping process including for example the user composing the mapping a reviewer an approver etc.

In some embodiments the operations in blocks and or may be performed real time e.g. by at least the definition module when a mapping is being composed for example using the operations of the method . This is advantageous as the user composing the mapping may be immediately informed of the incompatibility and may revise the mapping to resolve the error. In other embodiments the operations of the method may be performed e.g. by at least the definition module at a later stage such as during visualization review approval or power mapping as discussed above with reference to at least .

The processor may execute software instructions by performing various input output logical and or mathematical operations. The processor have various computing architectures to process data signals including for example a complex instruction set computer CISC architecture a reduced instruction set computer RISC architecture and or an architecture implementing a combination of instruction sets. The processor may be physical and or virtual and may include a single core or plurality of processing units and or cores.

The memory may store and provide access to data to the other components of the client device . In some embodiments the memory may store instructions and or data that may be executed by the processor . For example as depicted the memory may store the client application . The memory is also capable of storing other instructions and data including for example an operating system hardware drivers other software applications data etc. The memory may be coupled to the bus for communication with the processor and the other components of the client device .

The communication unit may include one or more interface devices I F for wired and or wireless connectivity with the network and or other devices. In some embodiments the communication unit may include transceivers for sending and receiving wireless signals such as Wi Fi cellular Bluetooth NFC and other communication signals. For instance the communication unit may connect to and send receive data via a mobile network of the network a public IP network of the network a private IP network of the network etc. In some embodiments the communication unit may include ports for wired connectivity with other devices. For example the communication unit may include a CAT 5 interface USB interface etc.

The display device may display electronic images and data output by the client device for presentation to a user . The display device may include any conventional display device monitor or screen including for example an organic light emitting diode OLED display a liquid crystal display LCD etc. In some embodiments the display device may be a touch screen display capable of receiving input from one or more fingers of a user . For example the display device may be a capacitive touch screen display capable of detecting and interpreting multiple points of contact with the display surface. In some embodiments the client device may include a graphics adapter not shown for rendering and outputting the images and data for presentation on display device . The graphics adapter not shown may be a separate processing device including a separate processor and memory not shown or may be integrated with the processor and memory .

The input device may include any device for inputting information into the client device . In some embodiments the input device may include one or more peripheral devices. For example the input device may include a keyboard e.g. a QWERTY keyboard a pointing device e.g. a mouse or touchpad microphone an image video capture device e.g. camera etc. In some embodiments the input device may include a touch screen display capable of receiving input from the one or more fingers of the user . For instance the functionality of the input device and the display device may be integrated and a user of the client device may interact with the client device by contacting a surface of the display device using one or more fingers. In this example the user could interact with an emulated i.e. virtual or soft keyboard displayed on the touch screen display device by using fingers to contacting the display in the keyboard regions.

The client device may include a client application for generating and displaying user interfaces receiving user input and sending data to and receiving data from the other entities of the system such as the enterprise system and its constituent components. In some embodiments the client application may receive input signals from a user generate data and instructions based on the input signals and send the data and instructions to the enterprise system .

In some embodiments the client application generates user interfaces such as those depicted in based at least in part on information input by a user retrieved from the memory and or received from the enterprise system via the network . In some embodiments the client application may include a web browser for executing client code received from the other of the system . For example the client application may receive at least in part interface instructions from the enterprise system in the form of a mark up language e.g. HTML XML etc. style sheets e.g. CSS XSL etc. graphics and or scripts e.g. JavaScript ActionScript etc. and the client application may interpret the interface instructions and render an interactive Web User Interface WUI for display on a client device based thereon. In other examples the client application may include and or retrieve from the memory some or all of the interface instructions. In some embodiments the client device may include multiple client applications for performing different integration related activities. For instance the client device may include an application for working with ICDs and approval workflows and another application for working with mappings. In other embodiments a single client application may be used for all integration related activity.

In the example depicted in the client application may include an interface module and a mapper although other configurations are also possible such as where the client application the interface module and or the mapper are stand alone components integrated or divided into additional components etc. The components and or may be communicatively coupled by the bus and or the processor to one another and or the other components and of the client device . In some embodiments one or more of the components and or are sets of instructions executable by the processor to provide their functionality. In some embodiments one or more of the components and or are software instructions stored in the memory of the client device and are accessible and executable by the processor to provide their functionality. In any of the foregoing embodiments these components and or may be adapted for cooperation and communication with the processor and other components such as local components of the client device or remote components of the enterprise system .

The interface module is software code logic and or routines for enabling a user to work with ICDs manage workflows and perform impact analysis between services. The interface module may cooperate with the integration engine to provide this functionality. In some embodiments the interface module can enable the user to draft publish review and approve ICDs in cooperation with the integration engine . For example the interface module can function as a workflow tool interface for managing the lifecycle of the ICDs.

In some embodiments the interface module can receive ICD and mapping related information from the definition module and provide it for presentation to the user for manipulation and the user may work with the information presented using for example various of the operations discussed above with reference to for example. In some embodiments the interface module may cooperate with the visualization module to enable a user to visualize how two or more services are integrated. For example as depicted in the user interface module may receive and render visualization data from the visualization module so a user may visualize how various operations a consumer service and a provider service are linked via the ESB down to the semantic level as discussed further herein with reference to those figures.

The interface module can also provide users with interfaces for versioning and branching ICDs performing end to end impact analysis for changes being made to ICDs searching ICDs e.g. keyword searching visualizing integrations end to end performing power mapping sessions filtering data based on business objects e.g. canonical objects application project review approver workflow status protocols service operations etc. rendering an ICD in a print friendly mechanism that can be used to print to PDF providing a comparison between revisions graphically browsing services and applications including the ability to browse the ontology and data with boxes and arrows representation and to skip levels within an ontology e.g. browsing directly from an application to its services swim lane tagging documents without increasing the version to help track the documents in different stages of the development life cycle SDLC e.g. tagging and ICD or mapping as in development QA performance testing etc. supporting the consumption of the canonical interface of the ESB e.g. replicate the canonical semantics . In some embodiments the interface engine integrates with a corporate governance product enterprise management application such as the registry module to provide additional functionality to the user to manage the services applications that have been or are being integrated with the ESB .

The mapper is software code logic and or routines for working with mappings. The mapper may cooperate with the integration engine to provide this functionality. In some embodiments the mapper can enable the user to clone import compose modify compare and or validate mappings in cooperation with the integration engine . In some embodiments the mapper may receive ICD and mapping related information from the definition module and provide it for presentation to the user for manipulation and the user may work with the information presented using the functionality of the mapper .

In some embodiments the mapper may receive user input specifying data transformation rules for all the disparate systems included in the integration associated with the mapping provide a user selection mechanism to choose fields to map together and provide the ability to perform request mapping response mapping and error mapping. Additionally or alternatively the mapper may provide interfaces for the user to validate whether required fields of the ICDs have been mapped to ensure data quality validate whether the conditions of conditional fields of the ICDs have been met by the mapping perform inconsistency checks when an ICD is changed after a mapping has been created notify stakeholders via email of issues annotate mapping documents with visual markings to flag inconsistencies manage a mapping workflow process determine default reviewers approvers based on customizable rules search mappings and ICDs provide document revision and version control provide mapping field revision control render a mapping in print friendly mechanism that can be used to print to PDF provide a comparison between mappings and mapping revisions and support the consumption of the canonical interface directly e.g. replicate the canonical semantics etc.

In some embodiments the interface module and the mapper are coupled via the network to retrieve data such as ICD mapping visualization workflow data etc. from the integration engine and or the integration data store to store update retrieve delete etc. data stored thereby. The mapper and interface module may also be coupled may also be coupled to one another the memory and or other components of the system to send and receive data.

It should be understood that the example client device depicted in is provided by way of illustration and that numerous different client device configurations are contemplated such as ones having a graphics processor a high resolution touchscreen a physical keyboard forward and rear facing cameras sensors such as accelerometers and or gyroscopes a GPS receiver a Bluetooth module memory storing applicable firmware and various physical connection interfaces e.g. USB HDMI headset jack etc. etc. Additionally an operating system for managing the hardware and resources of the client device application programming interfaces APIs for providing applications access to the hardware and resources various applications etc. may be stored and operable on the client device .

In the example depicted in the tab region may include a home tab and an impact view tab. Selecting the home tab may display an entry point for the user to access recently viewed documents e.g. mappings ICDs workflows etc. message other users view and respond to notifications etc. Selecting the impact view may display a visualization of how ICDs are mapped. The user may have initialized the impact view tab by selecting a corresponding element in the home tab the menu or browse options or another element. In response to the selection the visualization module may generate and provide visualization data to the interface module for rendering and display to the user via the impact view tab.

As depicted the impact view tab displays an example visualization of the ICD operations mapped by mappings. In particular the example visualization shows how the operations of various provider and consumer services are linked via the ESB . For instance as shown in block the ACME Service may provide a provider service that includes operation called CalcShipment for calculating shipment capacity. Similarly as shown in block Calculate Shipment Capacity X may be a provider service that includes an operation called CapacityRequest for processing shipment capacity requests. Calculate Shipment Capacity Y as shown in block may be a consumer service that includes an operation also called CapacityRequest for calculating shipment capacity based on the information received via the ESB from ACME Service and Calculate Shipment Capacity X.

By way of further illustration the output of the CapacityRequest operation in block may be mapped via the mapping element as an input to an ESB operation in block called CalcShipmentCapacity and correspondingly the ESB operation in block may be mapped via the mappings and to transform and relay the output of the CapacityRequest operation in block as input to the CalcShipment and CalcRequest Operations in blocks and respectively.

Once the CalcShipment and CalcRequest operations have processed the input they received from the ESB Block they may provide corresponding output in response. For example the outputs of CalcShipment and CalcRequest operations in blocks and are mapped via the mappings and to the ESB operation CalcShipmentCapacity in block and correspondingly the output of the ESB operation which is based on the outputs received from blocks and is mapped via the mapping as input to the CapacityRequest operation in block .

The user interface provides the user with the ability to drill deeper down into the visualization data that is being presented so the user can investigate on a per field level the fields that have been mapped for a given integration. For instance is a graphic representation of an example user interface for visualizing semantic mappings associated with the integration. In some embodiments the user may trigger the display of the information contained in user interface by selecting an item from the visualization data in user interface . For instance by selecting the block in user interface the user interface module may render more detailed visualization of the operation that corresponds with that block. In some embodiments the user interface module may render the visualization based on visualization data received from the visualization module .

In particular the example visualization data depicted in may provide the user with detailed information about the services associated with the CapacityRequest operation represented by block . As with user interface the user interface may include a menu region and a tab region . As depicted the selected impact view tab may include a summary region that displays the immediate operations that CapacityRequest of block is mapped to the mappings that link them and options and for sorting and filtering the fields that are associated with the services depicted in blocks and i.e. ACME Service Calculate Shipment Capacity and Calculate Shipment Capacity X . The options and may be used by the user to limit and sort the fields displayed in the field display region . For the fields that meet the filtering criteria the tabs allow the user to switch the field display region to alternatively show which one have been mapped and which ones have not yet been mapped are unmapped .

As depicted the field display region includes rows . . . also referred to herein individually and collectively as showing the fields e.g. semantic elements of the above noted services that have been fully mapped and meet the filtering criteria. In particular the first third and fifth columns of rows . . . show the names of the fields that have been mapped and their corresponding paths and the second and fourth columns show the rules for transforming the fields so they are compatible with one another during an interaction between the services.

The mapping region displays the services depicted in blocks and as well as the mappings transformation rules that connect those services. Each of the items in the mapping region includes a switch element for collapsing expanding the elements within the service region and field region. This is advantageous as it allows the user to expand the column of items e.g. fields rules he she is working with and collapse the columns of items that are unneeded. In some embodiments columns may also be collapsed or expanded by selecting e.g. clicking touching the corresponding element e.g. in summary region .

In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. However it should be understood that the technology described herein can be practiced without these specific details. Further various systems devices and structures are shown in block diagram form in order to avoid obscuring the description. For instance various embodiments are described as having particular hardware software and user interfaces. However the present disclosure applies to any type of computing device that can receive data and commands and to any peripheral devices providing services.

To ease description some elements of the system may be referred to using the labels first second third etc. These labels are intended to help to distinguish the elements but do not necessarily imply any particular order or ranking unless indicated otherwise. Additionally reference in the specification to one embodiment an embodiment or some embodiments means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment or in some embodiments in various places in the specification are not necessarily all referring to the same embodiment s .

In some instances various embodiments may be presented herein in terms of algorithms and symbolic representations of operations on data bits within a computer memory. An algorithm is here and generally conceived to be a self consistent set of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this disclosure discussions utilizing terms including processing computing calculating determining displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Various embodiments described herein may relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium including but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards flash memories including USB keys with non volatile memory or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The technology described herein can take the form of an entirely hardware embodiment an entirely software embodiment or embodiments containing both hardware and software elements. For instance the technology may be implemented in software which includes but is not limited to firmware resident software microcode etc. Furthermore the technology can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any non transitory storage apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

A data processing system suitable for storing and or executing program code may include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories that provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems storage devices remote printers etc. through intervening private and or public networks. Wireless e.g. Wi Fi transceivers Ethernet adapters and modems are just a few examples of network adapters. The private and public networks may have any number of configurations and or topologies. Data may be transmitted between these devices via the networks using a variety of different communication protocols including for example various Internet layer transport layer or application layer protocols. For example data may be transmitted via the networks using transmission control protocol Internet protocol TCP IP user datagram protocol UDP transmission control protocol TCP hypertext transfer protocol HTTP secure hypertext transfer protocol HTTPS dynamic adaptive streaming over HTTP DASH real time streaming protocol RTSP real time transport protocol RTP and the real time transport control protocol RTCP voice over Internet protocol VoIP file transfer protocol FTP WebSocket WS wireless access protocol WAP various messaging protocols SMS MMS XMS IMAP SMTP POP WebDAV etc. or other known protocols.

Finally the structure algorithms and or interfaces presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method blocks. The required structure for a variety of these systems will appear from the description above. In addition the specification is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the specification as described herein.

The foregoing description has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the specification to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the disclosure be limited not by this detailed description but rather by the claims of this application. As will be understood by those familiar with the art the specification may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the modules routines features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the specification or its features may have different names divisions and or formats.

Furthermore the modules routines features attributes methodologies and other aspects of the disclosure can be implemented as software hardware firmware or any combination of the foregoing. Also wherever a component an example of which is a module of the specification is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future. Additionally the disclosure is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Accordingly the disclosure is intended to be illustrative but not limiting of the scope of the subject matter set forth in the following claims.

