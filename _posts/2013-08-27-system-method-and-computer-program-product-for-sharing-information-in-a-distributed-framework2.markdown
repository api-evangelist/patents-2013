---

title: System, method and computer program product for sharing information in a distributed framework
abstract: A system, method and computer program product are provided for sharing information in a distributed system. After information is received, it is stored on a bulletin board. In use, the information is shared, in real-time, among a plurality of heterogeneous processes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09575817&OS=09575817&RS=09575817
owner: Stragent, LLC
number: 09575817
owner_city: Longview
owner_country: US
publication_date: 20130827
---
This application is a continuation of U.S. patent application Ser. No. 13 531 319 filed Jun. 22 2012 now U.S. Pat. No. 8 566 843 which is a continuation of U.S. patent application Ser. No. 12 182 570 filed Jul. 30 2008 now U.S. Pat. No. 8 209 705 which is a continuation of U.S. patent application Ser. No. 10 737 690 filed Dec. 15 2003 now U.S. Pat. No. 7 802 263 which in turn claims priority under 35 U.S.C. 119 based on U.S. Provisional Application No. 60 434 018 filed Dec. 17 2002 all of which are incorporated herein by reference.

The present invention relates to the field of distributed control and monitoring systems that may include certain temporal behavior.

Such technology may optionally apply to electronic vehicle communication and control systems real time monitoring systems industrial automation and control systems as well as any other desired system.

A system method and computer program product are provided for sharing information in a distributed system. After information is received it is stored on a bulletin board. In use the information is shared in real time among a plurality of heterogeneous processes.

In one embodiment both past and present instances of the information may be stored on the bulletin board. As an option the information may be replicated among a plurality of the bulletin boards. Optionally first information may be processed utilizing a first bulletin board and stored utilizing a second bulletin board. Still yet the bulletin boards may be hierarchical.

In another embodiment the processes may access multiple sections of the bulletin board. Further the bulletin board may send notifications to the processes based on a state of the information on the bulletin board.

Optionally the information may include variables. For example the information may include input variables output variables etc. Moreover the processes may include local processes remote processes etc. Still yet the processes may include event triggered processes and or time triggered processes. In use each of the processes may process the information in a manner that is isolated from temporal characteristics associated with the network.

In still another embodiment the information may be extracted from a message received by a bulletin board manager. Moreover the information may be converted from a signal received by a bulletin board manager. Even still the information may be shared in a single task may be shared according to a schedule and or may be shared with an operating system. Optionally dynamic preemptive scheduling may be provided. Also the information may be shared across the communication network with only a portion of a message header that is needed for a specific communication link while other communication links may use a different message header.

As a further option resources in the network may be protected. Specifically the resources in the network may be protected utilizing a schedule that allows information sharing utilizing the bulletin board. In another embodiment the resources in the network may be protected utilizing semaphores.

In even still another embodiment the information may be shared according to an internal clock an external clock etc. During operation objects may be generated based on a change of state of the information stored in the bulletin board. Such objects may include but are not limited to flags events signals interrupts etc. Still yet the information may be stored in response to interrupts associated with the processes.

In use the bulletin board may update the processes with information at a first rate that differs from a second rate with which the processes send the information to the bulletin board. Optionally the bulletin board may be accessed with guaranteed access times jitter and bandwidth.

In addition the bulletin board may be updated irregularly and triggered by internal or external objects including but not limited to flags events signals interrupts etc. Event triggers may be provided independent of a link connection between nodes where the processes are carried out. Moreover failure redundancy may be provided through multiple independent links across diverse physical connections.

As yet another option the information may have a user configured constraint associated therewith. Such constraint may include a memory constraint a real time constraint etc. As a further option the constraint may be configured utilizing a tool.

These complex functions such as braking engine control etc. are then grouped into the backbone system functions for the car such as body control power train and chassis. The backbone also includes the vehicle s high level functions such as diagnostics telematics and entertainment systems.

Therefore the system is typically hierarchically organized and includes a variety of gateways which relay messages up and down through the system layers. Each layer may contain multiple electronic control units ECU that are connected through wired serial multiplexing bus systems such as Controller Area Network CAN or ISO11898 Flexray LIN J1850 J1708 MOST IEEE1394 and other similar serial multiplexing buses or through wireless multiplexing systems such as IEEE802.11 IEEE802.15 Bluetooth Zigbee or similar other wireless links.

Typically functions provided by an ECU are bound to hard real time temporal behavior. In the context of the present description real time may include any response time that may be measured in milli or microseconds and or is less than 1 second.

The ECU may receive a set of real time input variables from local sensors which are connected via discrete signal lines or from networked sensors which are connected through a multiplexing bus system . The ECU may also share variables with other ECUs that are either connected on the same physical multiplexing bus or that it can reach through a gateway .

Then the ECU processes the input variables and generates a set of output variables that are either shared with other ECUs as described above or which are output to local actuators which are connected via discrete signal lines or to networked actuators which are connected through a multiplexing bus . ECUs typically share information with devices that are connected on the same physical multiplexing system. This method of information sharing is called horizontal information sharing in a hierarchical system. Gateways link multiple physical multiplexing systems together. In the context of the present description such information may include data a signal and or anything else capable of being stored and shared.

The highest level in the hierarchical system is the system level. The system level gateway may be connected to ECUs on the system level multiplexing bus to subsequent gateways that also link to subsequent communication buses and to external components that may contain diagnostics devices development tools other add on devices or other instances of distributed embedded communication and computing systems . In addition the system gateway may also be connected to an external gateway that may link the system to a remote device through wireless or wired wide area networks such as the Internet using standard protocols such as UDP IP TCP IP RTP HTTP SOAP JAVA etc. or nonstandard proprietary protocols.

Subsequent to the system level may be several layers of groups and subgroups that are link to the higher levels via gateways .

During the design time of the system not all ECUs may exist. Therefore the development tool may provide a plug in component or virtual ECU GW that directly links into the wired multiplexing bus or wireless network and also allows for separate control functions via a tool link .

The block diagram in depicts the detailed elements within a generic ECU that is one embodiment of ECU . The ECU typically contains a micro processor volatile memory such as RAM S RAM or similar non volatile memory such as EEPROM FLASH etc. a real time clock for internal timing of processes a watchdog to maintain the health of the system one or more communication bus controllers with associated drivers digital I O with line drivers and analog I O with associated analog signal conditioning .

In an alternate embodiment the ECU may also contain a wireless communication controller and a RF Front end as outlined in . The software can either be stored in local non volatile memory or partially downloaded via the communication link and stored in the volatile memory. The software is then executed in the microprocessor .

The block diagram depicts the detailed elements within a generic gateway that is one embodiment of Gateway in .

One embodiment includes the middleware that has direct access to the real time operating system the device drivers and the hardware abstraction layer . The middleware isolates the application from input output functions and allows multiple applications to share common variables locally. In addition the middleware lets applications share variables with remote applications processes. In the context of the present description a process may refer to any hardware and or software operation etc.

In one embodiment the middleware can directly interface with the input output mechanisms of the hardware without utilizing an operating system or hardware abstraction layer .

Another embodiment of the middleware utilizes a preemptive multitasking operating system with explicit control of resources. In an alternate embodiment the middleware can be built with a static multitasking scheme with implicit resource management or be part of a single task system.

Referring now to the middleware contains the bulletin board manager a local signal communication interface a remote message communication interface and an application programming interface . The application interface provides methods and data interfaces to a plurality of applications. In one embodiment the application interface is an object library that can be linked to an application at design time.

The bulletin board manager contains an upgrade and configuration manager an event manager a data access manager and a data integrity watchdog . The upgrade and configuration manager is necessary to configure the data structure of the bulletin board and to make executable code available to individual processing nodes. In the context of the present description the bulletin board may refer to any database that enables users to send and or read electronic messages files and or other data that are of general interest and or addressed to no particular person process.

The access manager provides access control mechanisms for the code update and configuration mode. It also may control access rights for individual applications at execution time in the run mode.

The event manager captures input output events as variables and generates new events flags or signals based on operations on state variables in the bulletin board. Such operations may include test of maximum values the occurrence of logically combined events the result of an integrity check or events and signals that are created based on any other logical or arithmetic computation on the state variables that are stored in the bulletin board. The actual processing of data and manipulation of data may be done in the application that uses the middleware . The data integrity watchdog analyses the stored state variables for its integrity and generates events or flags if any problem occurs.

The local signal communication interface interfaces with the local discrete input output hardware to update the bulletin board with new variables and to update the input output interfaces with the state variables from the bulletin board. It also converts state variables to input output signals and input output signals to state variables that can be stored in the bulletin board. The conversion process may contain scaling of signals as well as offset compensation. Typically this processing helps to convert I O signals that are measured in Volt to a physical entity and vice versa. The communication with the local discrete input output system can be triggered by events or signals can be sampled time triggered based on a cyclic global or local time base.

The remote message communication interface interfaces to serial multiplexing interfaces buses that are connected to the specific processing node ECU or Gateway . It extracts variables from a plurality of messaging protocols and stores them in the database. It also replicates local bulletin board state variables to the associated processing nodes by composing the appropriate messages for each communication link. The message transfer can be initiated triggered by a bus event by a local event or by a time triggered mechanism that uses a cyclic local or global time base.

The bulletin board may contain but is not limited to events real time variables diagnostics data configuration parameters and firmware to upgrade individual components of the executable code or the entire software of a processing node. Each type of information may include one or more sections so that individual processes are not blocked if they access separate sections of data.

The memory of the bulletin board is subdivided into areas that nodes on each external network can read from and write into and other areas that an external network may only read from. The data contained in the bulletin board may be stored in volatile or non volatile memory. Each data entry may consist of one value or an array of values that also may represent a time series.

In one embodiment each application process local signal communication process remote message communication process and the bulletin manager can individually access the bulletin board using operating system functions for resource management that may include semaphores events signals call back routines flags etc. in an alternate embodiment of the system the bulletin board manager controls all interaction with the bulletin board and all applications have to pass data to the bulletin board manager. This approach simplifies the interaction with the bulletin board but adds delay time and jitter to the state variables.

At design time various hierarchies of memory management can be applied. In practice it is more efficient to allow each sub network and subsystem to place system variable data into local bulletin boards. This is because many system variables are primarily used only within their subsystem or sub network. By placing local information in a shared memory local bulletin board it can be used by multiple processes on this processor node. A group bulletin board allows devices on a sub network to share information with a minimum of network traffic. A system bulletin board allows access to system wide variables and information.

Using this model each communicated message may be processed at each layer to remove and use the associated header information for that level. Once all layers are processed the remaining packet data unit PDU represents the datum or core information carried by the overall message. In one embodiment each communication controller has an associated communication interface and an associated remote message conversion mechanism. For instance communication bus controller has an associated communication interface and an associated remote message conversion .

This arrangement allows the remote message process to directly access information at the data link layer and interface it with the bulletin board. A network layer is not necessary. The remote message communication process has a multi network access interface essentially a processing capability that can interpret and apply the header information for a variety of networks and the bulletin board read write memory access. Now the individual processing nodes do not need to know about the existence of multiple networks. Each variable can be accessed from all connected physical networks in their proprietary format. Thus the normalization of the information has only to be handled at the gateway through replication of stored data to multiple attached networks.

Continuing with the communication procedure is described. In the given example an external event on communication controller triggers the operating system to notify the remote message communication process that data is available. The notification may be a flag a call back routine an event or any other operating signal. The associated remote message conversion method extracts the data e.g. real time variables from the message PDU and stores the data in the bulletin board . It may also store the associated event as variable in the bulletin board and signal the bulletin board event manager that new data is available.

The bulletin event manager then notifies the application process with the appropriate mechanism. In addition the event manager may trigger the sampling of local signals using the local signal communication process described in . Finally the bulletin event manager may trigger the bulletin board manager to perform integrity checks or generate additional events based on the change of the state variables.

One embodiment provides a new mechanism for creating an information interconnection between two or more heterogeneous communication networks. In the context of the present description heterogeneous networks may refer to any different communication networks with at least one aspect that is different.

The approach uses a common or shared storage system that is connected to all of the system networks through network interfaces. A critically important feature of the bulletin board approach is that the complexity of the bulletin board grows linearly with the number of networks as opposed to as N N 1 for the gateway approach and in one to many situations the number of message transformations is half that of the standard networking approach.

In an alternate embodiment of the remote message communication process any remote process can access data via a single network interface. This approach requires a network layer in each processing node and therefore adds overhead to communications. To communicate between two heterogeneous networks this process may then be repeated in reverse by adding back the header information for the various layers of the second network and eventually putting the message onto the second network s physical link. The remote message communication manager then can be simplified to only one message assembly and disassembly mechanism.

In an alternate embodiment the message is directly copied form the input register of the communication controller. Then the process extracts variables from the message. Additional signal adaptation may be necessary. The sub process stores the variables in the bulletin board. If the process only updates one section of the bulletin board it waits for the next message notification . If variables in multiple sections need to be updated the process repeats .

If the resource is available the process gets the resource. If the resource is not available it may try it again after a waiting period until the resource is available. After a certain time has elapsed beyond a configurable threshold the temporal behavior of the state variable can t be captured any longer and the middle ware may send an error notification to the associated process.

After reserving the resource the bulletin board store mechanism timestamps the state variable for future temporal reference . Then the bulletin board store procedure copies the variables or parameters from its private memory to the shared bulletin board memory . Then it releases the bulletin board resource.

In an alternate embodiment the bulletin board store procedure has exclusive access to the bulletin board and does not need operations and because the resource access is realized through implicit resource management. This can be achieved with either static task scheduling or by allowing only the bulletin board store procedure to access the bulletin board .

If the resource is available the process gets the resource. If the resource is not available it may try it again after a waiting period until the resource is available. After a certain time has elapsed beyond a configurable threshold the temporal behavior of the state variable can t be captured any longer and the middle ware may send an error notification to the associated process .

After reserving the resource the bulletin board retrieve mechanism copies the variables or parameters from the shared bulletin board memory to its private memory . Then it releases the bulletin board resource. In an alternate embodiment the bulletin board retrieve procedure has exclusive access to the bulletin board and does not need operations and . Because the resource access is realized through implicit resource management this can be achieved with either static task scheduling or by allowing only the bulletin board retrieve procedure to access the bulletin board .

Referring to the application process utilizes the bulletin board retrieve mechanism to access all parameters events and real time variables from the bulletin board. Thus the application process is decoupled from the temporal behavior of the input output variables and can be triggered by a plurality of events .

The application process may retrieve one or multiple sets of variables stored in a plurality of memory sections. Then the application process processes the variables with its method. Because the method is not tied to the location of the input output variables the application process can be moved or replicated to a plurality of processing nodes ECUs or Gateways . After processing the input variables and generating a set of output variables the application process uses the bulletin board store method to update one or a plurality of memory sections in the bulletin board. If the application process is a cyclic procedure it waits until the next activation occurs .

Continuing with the update local I O from bulletin board process utilizes the bulletin board retrieve mechanism to access real time variables from the bulletin board and convert them to output signals that can be written to the output port . The I O update process may retrieve one or multiple sets of variables stored in a plurality of memory sections. If the I O update process is a cyclic procedure it waits until the next activation occurs .

Finally it writes the messages to the communication port . In an alternate embodiment it handles the messages to the associated interface procedure of the operating system. Then it repeats the procedure until all variables are updated on all communication ports. If the data replication process is a cyclic procedure it waits until the next activation occurs .

Referring now to the store message from remote processing node gateway or ECU process describes how replicated data is stored in the bulletin board. This process can be triggered by a plurality of notification mechanisms such as internal or remote events alarm signals internal and external timers and flags set in the bulletin board. The communication bus may also issue these notifications. The process then reads a message from the communication port selects a subset of variables to be replicated and stores the variables in the bulletin board with procedure . In an alternate embodiment this procedure may also be used to store a packet data unit PDU in the bulletin board for later replication on the same or a different communication link.

This store and forward networking mechanism can be implemented without the need for complex networking protocols and is therefore well suited for limited processing power and memory environments. It also works in soft real time environments when no strict temporal behavior is required. The data store operation may be repeated for a plurality of bulletin board sections. If the data replication process is a cyclic procedure it waits until the next activation occurs .

Continuing now with the store and forward updating mechanism replicates messages from remote processing nodes to other processing nodes from stored packet data units in the bulletin board. This process can be triggered by a plurality of notification mechanisms such as internal or remote events alarm signals internal and external timers and flags set in the bulletin board. The communication bus may also issue these notifications.

The process then selects a message to be forwarded and the appropriate communication link and retrieves the PDU with the bulletin board retrieve mechanism . It then adds the appropriate messages header for the communication link and may add routing information . Finally the update process writes the messages to the communication port . If the updating process is a cyclic procedure it waits until the next activation occurs .

Referring now to the external commands may be generated from a development tool or a remote device that is connected via a remote gateway . In an alternate embodiment each ECU or virtual ECU can trigger the system to enter a different operating mode.

Continuing with in the configuration mode the system software and the information sharing configuration can be updated via a secure communication link with encrypted commands. Each processing node ECU or gateway may have security mechanisms such as a certificate that allows it to identify and authorize another entity remote gateway remote ECU or development tool to make changes to its bulletin board parameters.

The remote entity may also download a new firmware to the bulletin board. The ECU or gateway can store this new firmware in its non volatile memory while it backs up the original image on the bulletin board for the case that the new software is not functional. In the update mode the distributed system can also reconfigure the communication and computing infrastructure based on a new set of parameters that need to be stored in the individual bulletin boards.

In the normal run mode the system operates in the real time information sharing mode and network configuration and certain parameters can t be changed. That protection allows defining deterministic temporal behavior on all communication links. But any processing node may enter a debug emergency mode if a failure or other qualifying event occurs.

In the emergency mode a processor executes an alternate procedure that maintains the temporal behavior on the communication links but may reduce or increase the amount of information shared with other processors. It also lets other processing nodes check on the integrity of sensors and actuators. In the maintenance and upgrade mode an external system can upgrade executable code images and the bulletin board configuration via secure communication links.

A system and method are thus provided for sharing information within a distributed embedded communications and computing system and with components outside the embedded system. The information sharing mechanism relies on a bulletin board that may include a small database operating under hard real time conditions with minimal delays communication latency and jitter. The embedded database or bulletin board isolates a real time application in a Electronic Control Unit ECU from various other real time applications and from input output signals in the same module local information sharing from event triggered communications with applications in other modules and from time triggered communications with applications in other modules.

One design criteria of the database is that the temporal behavior of communications does not impact the real time computing task and provides enough information access performance at peak time demand. Typically distributed embedded systems consist of a static structure that can be analyzed at design time. In addition to the real time operation the proposed method for information sharing also provides access to the parameters of the embedded system and allows for software upgrades of certain modules.

The present embodiment addresses the shortcomings of traditional computer networks with following enhancements 

1 The concept of multi mode storage that links two or more communication networks via a bulletin board. The bulletin board is a multi mode storage that can be thought of an extension to shared memory that can be accessed by local and remote processes at attached networks. There may be multiple hierarchical layers of bulletin boards depending on the topology of the communication system. The bulletin board increases the network efficiency by reducing the number of transactions needed to access remote variables.

2 The concept of a direct access bulletin board that does not require a network layer translation of messages on each node of the network. Even though this approach restricts the reach of each node to only adjacent nodes and the next gateway this still allows cross network variable sharing though vertical real time replication of data.

3 The concept of hierarchical bulletin board management that allows restriction of information access to certain levels in a network but still allows the replication of information to other nodes in the network. This paradigm follows the path of reducing the information amount from the leaves of the network to central control and diagnosis hubs.

4 The concept that a gateway can host an assembly of bulletin boards or embedded database that allows operations on bulletin boards to generate events for associated processes. This extension allows definition of a set of data processing operations that would be done once in a network and would be instantly available for connected nodes. Examples for operations are sensor data state observers diagnostics integrity checks fail safe mechanisms etc.

5 The concept that an embedded communication and computing network can run in multiple modes in order to provide for a guaranteed deterministic behavior of the system. This property can be achieved by only allowing change to the configuration and or the functions SW code in a secured configuration and upgrade mode. If the network is booted in the normal operating mode all processors execute the existing code and only allow data sharing through the bulletin boards. The emergency or debug mode lets the network run in a fail safe reduced operation mode or in a diagnostic mode that allows inspection of the system while it is running. For each operating mode the gateway can store a processing image on the bulletin board. The advantage of this procedure is that only the communication hubs need to deal with secure data transfer and encryption while the peripheral nodes in the network can be relative simple in design.

6 The concept of designing the topology of a distributed computing and communication system independent of the definition of the individual functions that the network performs. Each processing task is only associated with a bulletin board but isolated from I O processing.

While various embodiments have been described above it should be understood that they have been presented by the way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should be not limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

