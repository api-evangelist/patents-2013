---

title: Hardware platform validation
abstract: A system for validating a hardware platform is provided. The system includes a database that stores one or more test specifications, a compiler that generates a target image based on (i) a device driver obtained from a device driver generator, (ii) a platform independent target application code, (iii) a kernel source, and (iv) a run time environment, and a software driven validation generator that analyzes the run time specification and the device programming specification and generates (i) one or more test cases based on (a) the one or more test specifications, and (b) the device programming specification, and (ii) a control software based on the test cases. The test cases include configurations that are specific to the hardware platform. The hardware platform is validated based on (i) an execution of the target image and the control software on the hardware platform, and (ii) the one or more test cases.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09372770&OS=09372770&RS=09372770
owner: 
number: 09372770
owner_city: 
owner_country: 
publication_date: 20130604
---
The embodiments herein generally relate to validation of hardware platforms and more particularly to system and method for hardware platform validation driven by software.

Typically in every electronic products components like one or more micro controllers memories RAM ROM Flash peripherals such as USB controller Ethernet controller WiFi and application specific processors including DSP are present. A Hardware platform refers to a system that is composed of components like above designed for a specific product application like a mobile communication device or a network router.

Most of the electronic devices products will have number of hardware functionalities and at some point for development of a hardware platform. Softwares are integrated to determine performance and functionality of the device. The hardware platform can be a real board e.g. mother board . The hardware platform may be realized as the physical hardware as found in an end product product silicon or a test sample of the sample platform sample silicon or an FPGA based implementation of the sample platform Emulator or a simulation of the platform at RTL or behavior levels like SystemC simulator . Post si platform can either refer to product silicon and sample silicon and pre si platform refers to either emulator or simulator.

The cost of a bug or defect to identify and fix it increases drastically if it is found in later stages like product silicon as against early stage like simulator. These defects should be found and fixed as early as possible and should be tested thoroughly at each stage. The overall objectives of platform level testing can be roughly divided into structural tests functional validation and performance validation. Structural tests are performed to determine any connectivity issues. Functional validation tests are done to check whether hardware platform functions as per the requirements and performance validation tests are done to check whether the hardware platform service requests within stipulated time.

In the existing technology hardware platform is checked for structural issues and the product software is then tested on the platform that means both hardware platform and softwares are tested jointly. Since both platform and software can potentially have bugs defect isolation can be tedious. The product software requires many cycles to execute a specific validation goal and in pre si especially in simulation this means considerable simulation time is required for each test. There also custom test software available in which a testing engineer maintains the test software which is different from product software which is then used to test the hardware platform before testing both jointly. However this custom test software is not portable on to different platforms and it is also not possible to check complete use cases.

Accordingly there remains a need for developing a methodology and associated tool for enabling functional and performance validation of hardware platforms and reproduce issues in post si at pre si stages efficiently and effectively identify and isolate defects that otherwise manifest in product silicon cost and schedule efficient.

In view of the foregoing an embodiment herein provides a system for validating a hardware platform. The hardware platform includes one or more hardware components and one or more software components. The system includes a database that stores one or more test specifications a device driver generator that receives a run time specification and a device programming specification that are specific to the hardware platform and generates a device driver that is specific to the hardware platform a compiler that generates a target image based on i the device driver ii a platform independent target application code iii a kernel source and iv a run time environment a software driven validation generator that analyses the run time specification and the device programming specification and generates i one or more test cases based on a the one or more test specifications and b the device programming specification and ii a control software based on the one or more test cases. The hardware platform is validated based on i an execution of the target image and the control software on the hardware platform and ii the one or more test cases. The one or more test cases include one or more configurations that are specific to the hardware platform.

The system identifies the hardware platform when a control link is validated. A log message is displayed when a pair of probes is connected across at least one component of the hardware platform wherein the log message indicates an execution status of the hardware platform. The one or more test cases are generated based on i a class of the hardware platform and ii the one or more configurations. An input is processed from a user. The input includes a selection of at least one test case from the one or more test cases. The selection of the at least one test case is specific to the hardware platform. The at least one test case is executed to validate at least one hardware component or at least one software component of the hardware platform. The one or more test cases specify that the one or more software components are executed in software. The one or more software components that are executed in software are executed on the system.

In another aspect a method of validating a hardware platform is provided. The hardware platform includes one or more hardware components and one or more software components. The method includes obtaining a device driver that is specific to the hardware platform generating a target image based on i the device driver ii a platform independent target application code iii a kernel source and iv a run time environment analyzing the run time specification and the device programming specification and generating i one or more test cases based on a the one or more test specifications and b the device programming specification and ii a control software based on the one or more test cases and validating the hardware platform based on i an execution of the target image and the control software on the hardware platform and ii the one or more test cases. The one or more test cases include one or more configurations that are specific to the hardware platform 

The one or more test cases are generated based on i a class of the hardware platform and ii the one or more configurations. The method may further include displaying the one or more test cases based on the analysis of the run time specification and the device programming specification processing an input that includes a selection of at least one test case from the one or more test cases and executing the at least one test case to validate the at least one hardware component or the at least one software component of the hardware platform. The selection of the at least one test case is specific to at least one hardware component or at least one software component of the hardware platform.

The method may further include connecting a pair of probes on a data line across the at least one hardware component of the hardware platform and displaying a log message when the pair of probes is connected across at least one hardware component of the hardware platform. The log message indicates an execution status of the hardware platform.

In yet another aspect a system for validating a hardware platform is provided. The hardware platform includes one or more hardware components and one or more software components. The system includes a database that stores one or more test specifications a compiler that generates a target image based on i a device driver obtained from a device driver generator ii a platform independent target application code iii a kernel source and iv a run time environment and a software driven validation generator that analyses the run time specification and the device programming specification and generates i one or more test cases based on a the one or more test specifications and b the device programming specification and ii a control software based on the one or more test cases. The one or more test cases include one or more configurations that are specific to the hardware platform. The hardware platform is validated based on i an execution of the target image and the control software on the hardware platform and ii the one or more test cases.

The system identifies the hardware platform when a control link is validated. A log message may be displayed when a pair of probes is connected across at least one hardware component of the hardware platform. The log message indicates an execution status of the hardware platform. The one or more test cases specify that the one or more software components are executed in software. The one or more software components executed in software are executed on the system.

These and other aspects of the embodiments herein will be better appreciated and understood when considered in conjunction with the following description and the accompanying drawings. It should be understood however that the following descriptions while indicating preferred embodiments and numerous specific details thereof are given by way of illustration and not of limitation. Many changes and modifications may be made within the scope of the embodiments herein without departing from the spirit thereof and the embodiments herein include all such modifications.

The embodiments herein and the various features and advantageous details thereof are explained more fully with reference to the non limiting embodiments that are illustrated in the accompanying drawings and detailed in the following description. Descriptions of well known components and processing techniques are omitted so as to not unnecessarily obscure the embodiments herein. The examples used herein are intended merely to facilitate an understanding of ways in which the embodiments herein may be practiced and to further enable those of skill in the art to practice the embodiments herein. Accordingly the examples should not be construed as limiting the scope of the embodiments herein.

As mentioned there remains a need for developing a methodology and associated tool for enabling functional and performance validation of hardware platforms and reproduce issues in post si at pre si stages efficiently and effectively identify and isolate defects that otherwise manifest in product silicon cost and schedule efficient. The embodiments herein achieve this by providing a device programming specification DPS and run time specification RTS of the peripherals e.g. one or more system components on the hardware platform customized device drivers generated from DPS and RTS using a device driver generator customized Linux port for the hardware platform platform independent target application code Validation middleware and command processor and a control software on a host system e.g. a personal computer that is used to control the board. Referring now to the drawings and more particularly to where similar reference characters denote corresponding features consistently throughout the figures there are shown preferred embodiments.

In one embodiment device driver interface application programming interface API remains the same for all device classes e.g. universal asynchronous receiver transmitter UART Ethernet USB etc. . This API is based on the Linux character driver API. Each device driver generated can accept data sink s or produce data source s . Sink is achieved by write function and source is achieved by the read function of the character driver API. Each device driver can have multiple logical sources or sinks. Further each device driver will have a specified set of configuration parameters as specified in the DPS .

The SDV generator receives the DPS and RTS and generates the control software e.g. a host software that is executed on a control processor within a host system e.g. on a personal computer . The SDV generator analyzes the DPS and the RTS and generates a one or more test cases e.g. one or more test scenarios based on i the one or more test specifications and ii the DPS and b a control software based on the test cases. The one or more test cases may be generated based a class of the hardware platform e.g. UART USB etc. . The one or more test cases that are generated by the SDV generator may be modified edited by the user . Additionally the one or more test specifications that are stored in the database may be modified edited by the user as per the requirements to validate the hardware platform. The hardware platform is validated based on i an execution of the target image and the control software on the hardware platform and ii the one or more test cases.

Alternatively the hardware platform may be validated based on the one or more test cases and the one or more specifications provided and or submitted by the user . The one or more test cases and the one or more specifications that are provided by the user may be stored in the database . The one or more test cases and the one or more specifications provided by the user may be termed as user submitted one or more test cases and or user submitted one or more test specifications in one example embodiment. The one or more test cases include one or more configurations that are specific to the hardware platform and or various components of the hardware platform . In one embodiment the SDV generator analyses the DPS and the RTS e.g. analyses the type of device and corresponding features registers in the device and accordingly generates the test cases and the one or more configurations. The host system is connected to the hardware platform and the SDE IDE is started on the host system. In one embodiment IDE is a software tool where a user can specify additional tests and execute pre generated tests.

With reference to and illustrates a high level design of the host system and the hardware platform of according to an according embodiment herein. The hardware platform e.g. the target device includes the target image that has the hardware device drivers generated from DPS RTS and software drivers. The validation middleware and protocol stacks are platform and or the command processor independent. The validation middleware and protocol stacks setup required threads for execution and handling protocols like USB Ethernet etc. The command processor accepts control data from SDV IDE interprets them and calls appropriate services in the middleware.

The host system includes a control driver e.g. a device driver for the physical link between the host system and the hardware platform a scripting environment e.g. shell and a graphical user interface GUI . The host system includes one or more libraries e.g. the one or more test cases generic use cases and user defined uses cases pre written tests e.g. test scenarios that can be executed for one or more hardware platforms . In one embodiment the device under test e.g. the hardware platform requires an operating system OS and includes the target image that is platform and or processor independent ANSI C Code.

The one or more test cases specify that the one or more software components are executed in software. The one or more test cases further specify how various components e.g. the one or more hardware components and the one or more software components interact with each other. The one or more software components are executed in software on the host system . The one or more test cases may be executed on i the host system and ii the hardware platform . Alternatively the one or more test cases may be i partially executed on the host system and partially executed on the hardware platform . For example a first stage of a test case may be executed on the host system and a second stage of the same test case may be executed on the hardware platform .

With reference to illustrates a user interface view for validating one or more components of the hardware platform of according an embodiment herein. As shown in the components are instantiated configured and connected to execute one or more various validating functions. In one embodiment the audio tone component is connected to an audio output component for testing the audio functionalities of the hardware platform .

With reference to and is a user interface view illustrating a debug process of the audio tone component when connected to the audio output component using one or more probes according to an embodiment herein. During the validation of the audio tone component the user can attach probes on data paths between the audio tone component and the audio output component for debugging. Statistical data e.g. or report for debugging the audio tone component is shown in .

With reference to is a user interface view illustrating a log message from one or more components of according to an embodiment herein. The user can view one or more log messages by connecting probes to the components e.g. the audio output component . A dialog box is displayed to the user. The dialog box may include a log message as shown in such as 

With reference to through illustrates a user interface view of displaying one or more pre written tests for the components within the hardware platform of according to an embodiment herein. As shown in the pre written tests are retrieved from one or more libraries and are made available to the user to run these tests. In one embodiment the user can browse the pre written tests by clicking the browse option as shown in . With reference to illustrates a user interface view of running one or more pre written tests for the components within the hardware platform of according to an embodiment herein. For example the test may be an echo test for USB. This is checked if basic USB functionality is working correctly. If the USB functionality is working correctly then the result is displayed as pass which indicates that the USB component has passed this test .

Another test may be a beep flash test. If the component produces an audible beep along with a flash on video display then it is indicated that the component is working correctly. Other such tests may include simple audio test e.g. status indicating running basic STB pipeline e.g. status indicating running and or USB performance test with bulk endpoint e.g. status indicating FAIL . When the result is fail the user can go back and see this log messages and insert probes to do trouble shooting. There may be some instances in which the host system may retrieve the one or more pre written tests from the one or more libraries that may not be applicable in this context.

The one or more hardware components may be the demodulator and or the demux de multiplexer etc. in one example embodiment. The one or more software components may be the video decode block and the audio decode block etc. in another example embodiment. The video decode block may decode using a hardware component on which the video decode block is residing in sitting on. Alternatively the decoding may be done entirely in software. A data path is connection between the various components hardware peripherals e.g. an output of the demodulator is sent to an input of the demux .

The input PID indicates configuration of the demux . In other words the one or more configurations may include setting a PID for the demux . One or more configurations may be associated with only the one or more software components in one example embodiment. The one or more configurations may be associated with only the one or more hardware components in another example embodiment. The one or more configurations may be associated with both the one or more software components and the one or more hardware components in yet another example embodiment. Thus the one or more test cases is defined as and includes i specifying how the various components interact with each other ii one or more configurations of various components e.g. setting the Program ID or PID for demux iii a data path that defines connection across the various components iv various components can use hardware peripherals v one or more software components functionalities and vi the one or more software components may be executing on the hardware platform and or on the host system with reference to .

An example graph of such connected functionalities for a basic video pipe in a Set top box or TV is shown in . When a hardware platform is connected to the host system the host system automatically infers possible use scenarios from analysis of DPS together with a library of use cases . By analyzing the DPS file SDV IDE can suggest possible use scenarios. The components are configured and set to valid values automatically and ensure consistency in configuration from analysis of DPS . Device driver architecture is tailored for system level validation of the hardware platform. Further software stack can be tailored for system level validation of the hardware platform.

Digital content may also be stored in the memory for future processing or consumption. The memory may also store program specific information and or service information PSI SI including information about digital content e.g. the detected information bits available in the future or stored from the past. A user may view this stored information on display and select an item of for viewing listening or other uses via input which may take the form of keypad scroll or other input device s or combinations thereof. When digital content is selected the processor may pass information. The content and PSI SI may be passed among functions using the bus .

The techniques provided by the embodiments herein may be implemented on an integrated circuit chip not shown . The chip design is created in a graphical computer programming language and stored in a computer storage medium such as a disk tape physical hard drive or virtual hard drive such as in a storage access network . If the designer does not fabricate chips or the photolithographic masks used to fabricate chips the designer transmits the resulting design by physical means e.g. by providing a copy of the storage medium storing the design or electronically e.g. through the Internet to such entities directly or indirectly.

The stored design is then converted into the appropriate format e.g. GDSII for the fabrication of photolithographic masks which typically include multiple copies of the chip design in question that are to be formed on a wafer. The photolithographic masks are utilized to define areas of the wafer and or the layers thereon to be etched or otherwise processed.

The resulting integrated circuit chips can be distributed by the fabricator in raw wafer form that is as a single wafer that has multiple unpackaged chips as a bare die or in a packaged form. In the latter case the chip is mounted in a single chip package such as a plastic carrier with leads that are affixed to a motherboard or other higher level carrier or in a multichip package such as a ceramic carrier that has either or both surface interconnections or buried interconnections .

In any case the chip is then integrated with other chips discrete circuit elements and or other signal processing devices as part of either a an intermediate product such as a motherboard or b an end product. The end product can be any product that includes integrated circuit chips ranging from toys and other low end applications to advanced computer products having a display a keyboard or other input device and a central processor.

The embodiments herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment including both hardware and software elements. The embodiments that are implemented in software include but are not limited to firmware resident software microcode etc.

Furthermore the embodiments herein can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can comprise store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

A representative hardware environment for practicing the embodiments herein is depicted in . This schematic drawing illustrates a hardware configuration of an information handling computer system in accordance with the embodiments herein. The system comprises at least one processor or central processing unit CPU . The CPUs are interconnected via system bus to various devices such as a random access memory RAM read only memory ROM and an input output I O adapter . The I O adapter can connect to peripheral devices such as disk units and tape drives or other program storage devices that are readable by the system. The system can read the inventive instructions on the program storage devices and follow these instructions to execute the methodology of the embodiments herein.

The system further includes a user interface adapter that connects a keyboard mouse speaker microphone and or other user interface devices such as a touch screen device not shown to the bus to gather user input. Additionally a communication adapter connects the bus to a data processing network and a display adapter connects the bus to a display device which may be embodied as an output device such as a monitor printer or transmitter for example.

The one or more test cases may be displayed based on the analysis of the run time specification and the device programming specification. An input that includes a selection of at least one test case from the one or more test cases may be processed and the at least one test case may be executed to validate the one or more hardware components and or the one or more software components of the hardware platform . The selection of the at least one test case is specific to at least one hardware component and or at least one software component of the hardware platform . The one or more test cases may also be specified by the user .

A pair of probes may be connected on a data line across the at least one hardware component of the hardware platform . A log message may be displayed e.g. the log message as indicated in the description of as when the pair of probes is connected across at least one hardware component of the hardware platform . The log message indicates an execution status of the hardware platform . The one or more software components are executed in software. The one or more software components executed in software are executed on the host system during an execution of the one or more test cases. The one or more software components may be executed on the hardware platform in one example embodiment.

This hardware platform validation driven by software provides a very flexible architecture allowing a validation engineer to quickly test many different scenarios reproduce issues in post Si at pre Si stages efficiently. This hardware platform validation driven by software further allows perform staged validation of the hardware platform start with simple unit level and move up to multiple functionalities that are interacting with each other. It further allows the user to use one or more debug probes which when connected across components display log messages that enable the user to isolate the bug efficiently. Further the communication between the host system and the hardware platform including the one or more hardware components and or the one or more software components enables to i download the one or more test cases and or the data path ii parse one or more commands on the control link iii report a status of the execution and iv control other interfaces connected to the hardware platform e.g. a USB Ethernet etc. in a way that is consistent with one or more test cases when executed.

The execution of the one or more software components in software on the host system during an execution of the one or more test cases e.g. an online communication process between the host system and the hardware platform reduces the time consumption as compared to executing the one or more software components on the hardware platform . The one or more software components and the one or more hardware components may be combined and or matched seamlessly in defining the one or more test cases. Alternatively the one or more software components may be integrated embedded into the one or more hardware components to define the one or more test cases.

The foregoing description of the specific embodiments will so fully reveal the general nature of the embodiments herein that others can by applying current knowledge readily modify and or adapt for various applications such specific embodiments without departing from the generic concept and therefore such adaptations and modifications should and are intended to be comprehended within the meaning and range of equivalents of the disclosed embodiments. It is to be understood that the phraseology or terminology employed herein is for the purpose of description and not of limitation. Therefore while the embodiments herein have been described in terms of preferred embodiments those skilled in the art will recognize that the embodiments herein can be practiced with modification within the spirit and scope of the appended claims.

