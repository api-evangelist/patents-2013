---

title: Systems and methods for print resource management
abstract: Systems and methods consistent with some embodiments presented provide methods for print resource management. In some embodiments of methods for print resource management print data comprising PDL data may be parsed to identify reusable resources in the print data. The reusable resources may be converted to a common internal format and stored. In some embodiments, reusable resources may be rendered to obtain a rendered version of the reusable resource, which may be stored. In some embodiments, the stored rendered version or a rendered form of the stored formatted version of the reusable resource may be used in a bitmap image for a page whenever the reusable resource is referenced during the creation of the bitmap image for the page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08953187&OS=08953187&RS=08953187
owner: Konica Minolta Laboratory U.S.A., Inc.
number: 08953187
owner_city: San Mateo
owner_country: US
publication_date: 20130628
---
This is a continuation of U.S. patent application Ser. No. 12 016 067 filed Jan. 17 2008 the entire content of which is incorporated herein by reference.

The present invention relates to the field of printing and in particular to systems and methods to manage resources in page description languages.

Document processing software allows users to view edit process and store documents conveniently. Pages in a document may be displayed on screen exactly as they would appear in print. However before the document can be printed pages in the document are often described in a page description language PDL . As used in this application PDLs may include PostScript Adobe PDF HP PCL Microsoft XPS and variants thereof as well as any other languages used to describe pages in a document. A PDL description of a document provides a high level description of each page in a document. This PDL description is often translated to a series of lower level printer specific commands when the document is being printed. The translation process from PDL to lower level printer specific commands may be complex and depend on the features and capabilities offered by a particular printer. The process of translation from a PDL description of a document to a lower level description that may be used to place marks on a print medium is termed rasterization.

In one aspect print jobs may be thought of as being of two broad types. In the first type termed non variable data print jobs code for text elements and graphic elements on a page may be sent to the printer and rasterized by the printer once. The printer can then print as many copies as specified. In non variable data print jobs rasterization occurs once even when many copies are printed because each copy is identical.

In the second type termed variable data print jobs code for text and graphic elements on a page may be sent to the printer each time that a customized version of that page is printed. Rasterization may need to occur for each copy printed because the copies may be non identical because of customization even though the content of large sections of each copy may overlap. Thus variable data print jobs can take substantially longer to print.

PDL s include a class of languages governed by the Personal Printer Markup Language PPML specification which permits printer languages to identify store and re use text and graphic elements. A PPML compliant language can speed up the printing of variable data print jobs by permitting the storage and re use of text and graphic elements thus reducing rasterization and bandwidth overheads. PPML compliant languages allow printers to manipulate data components at the object level instead of at the page level. In other words by lowering the granularity of the information stored by a printer to the object level PPML compliant languages allow code to attach names to objects and re use the objects as needed during the process of printing a variable data job. Re useable objects are also often called resources in PPML.

Historically as PDLs emerged over time various and disparate techniques evolved to handle similar objects in different PDLs. For example a printer may employ one technique to optimize reused objects in one PDL and a different technique to handle reused objects in a different PDL. Thus there is a need for more general purpose schemes to efficiently process PDL descriptions of documents to printer specific commands and eliminate the complexities associated with traditional PDL processing.

In accordance with the present invention systems and methods for print resource management are presented. In some embodiments a method for processing print data wherein the print data comprises PDL data the method comprises parsing the print data to identify at least one reusable resource in the print data transforming the identified reusable resource into at least one of several internal formats determined by analyzing at least one characteristic of the reusable resource wherein the internal formats are common to a plurality of POOL data types storing the formatted reusable resource and using a rendered version of the stored formatted reusable resource to create a bitmap image for a page whenever the reusable resource is referenced during the creation of the bitmap image for the page.

Embodiments of the present invention also relate to instructions created stored accessed or modified by processors using computer readable media and or computer readable memory.

In accordance with embodiments reflecting various features of the present invention systems and methods for the automatic storing manipulating and processing of a second or intermediate form of printable data generated from a first printable data are presented. In some embodiments the first printable data may take the form of a PDL description of a document and the intermediate printable data may take the form of a display list of objects generated from the PDL description.

As shown in exemplary system includes computers including a computing device and a server . Further computing device and server may communicate over a connection which may pass through network which in one case could be the Internet. Computing device may be a computer workstation desktop computer laptop computer or any other computing device capable of being used in a networked environment. Server may be a platform capable of connecting to computing device and other devices not shown . Computing device and server may be capable of executing software not shown that allows the printing of documents using printers .

Exemplary printer includes devices that produce physical documents from electronic data including but not limited to laser printers ink jet printers LED printers plotters facsimile machines and digital copiers. In some embodiments printer may also be capable of directly printing documents received from computing device or server over connection . In some embodiments such an arrangement may allow for the direct printing of documents with or without additional processing by computing device or server . In some embodiments documents may contain one or more of text graphics and images. In some embodiments printer may receive PDL or PPML descriptions of documents for printing. Note too that document print processing can be distributed. Thus computing device server and or the printer may perform portions of document print processing such as half toning color matching and or other manipulation processes before a document is physically printed by printer .

Computing device also contains removable media drive . Removable media drive may include for example 3.5 inch floppy drives CD ROM drives DVD ROM drives CD RW or DVD RW drives USB flash drives and or any other removable media drives consistent with embodiments of the present invention. In some embodiments portions of the software application may reside on removable media and be read and executed by computing device using removable media drive .

Connection couples computing device server and printer and may be implemented as a wired or wireless connection using conventional communication protocols and or data port interfaces. In general connections can be any communication channel that allows transmission of data between the devices. In one embodiment for example the devices may be provided with conventional data ports such as parallel ports serial ports Ethernet USB SCSI FIREWIRE and or coaxial cable ports for transmission of data through the appropriate connection. In some embodiments connection may be a Digital Subscriber Line DSL an Asymmetric Digital Subscriber Line ADSL or a cable connection. The communication links could be wireless links or wired links or any combination consistent with embodiments of the present invention that allows communication between the various devices.

Network could include a Local Area Network LAN a Wide Area Network WAN or the Internet. In some embodiments information sent over network may be encrypted to ensure the security of the data being transmitted. Printer may be connected to network through connection . In some embodiments printer may also be connected directly to computing device and or server . System may also include other peripheral devices not shown according to some embodiments of the present invention. A computer software application consistent with the present invention may be deployed on any of the exemplary computers as shown in . For example computing device could execute software that may be downloaded directly from server . Portions of the application may also be executed by printer in accordance with some embodiments of the present invention.

In some embodiments CPU may be a general purpose processor a special purpose processor or an embedded processor. CPU can exchange data including control information and instructions with memory and or firmware . Memory may be any type of Dynamic Random Access Memory DRAM such as but not limited to SDRAM or RDRAM. Firmware may hold instructions and data including but not limited to a boot up sequence pre defined routines and other code. In some embodiments code and data in firmware may be copied to memory prior to being acted upon by CPU . Routines in firmware may include code to translate page descriptions received from computing device to display lists and image bands. In some embodiments firmware may include rasterization routines to convert display commands in a display list to an appropriate rasterized bit map and store the bit map in memory . Firmware may also include compression routines and memory management routines. In some embodiments data and instructions in firmware may be upgradeable.

In some embodiments CPU may act upon instructions and data and provide control and data to ASICs FPGAs and print engine to generate printed documents. In some embodiments ASICs FPGAs may also provide control and data to print engine . FPGAs ASICs may also implement one or more of translation compression and rasterization algorithms. In some embodiments computing device can transform document data into a first printable data. Then the first printable data can be sent to printer for transformation into intermediate printable data. Printer may transform intermediate printable data into a final form of printable data and print according to this final form. In some embodiments the first printable data may correspond to a PDL or PPML description of a document. In some embodiments the translation process from a PDL or PPML description of a document to the final printable data comprising of a series of lower level printer specific commands may include the generation of intermediate printable data comprising of display fists of objects. In some embodiments display lists may hold one or more of text graphics command and image data objects. In some embodiments objects in display lists may correspond to similar objects in a user document. In some embodiments display lists may aid in the generation of intermediate printable data. In some embodiments display lists may be stored in memory or secondary storage . Exemplary secondary storage may be an internal or external hard disk memory stick or any other memory storage device capable of being used system . In some embodiments the display list may reside in one or more of printer computing device and server . Memory to store display lists may be a dedicated memory or form part of general purpose memory or some combination thereof according to some embodiments of the present invention. In some embodiments memory may be dynamically allocated to hold display lists as needed. In some embodiments memory allocated to store display lists may be dynamically released after processing.

In some embodiments the display list may be dynamically reconfigurable and is termed a Reconfigurable Display List RDL . In some embodiments an RDL may be implemented using a data structure that allows certain display list objects to be stored in a manner that allows their manipulation dynamically. For example image objects may be compressed in place to increase the amount of available memory and decompressed when referenced and or used. In some embodiments an RDL may also permit RDL objects to be stored in memory and or secondary storage by holding pointers offsets or addresses to the actual locations of RDL objects which can then be retrieved when referenced and or used. In general the RDL allows display list objects to be flexibly stored and manipulated based on system constraints and parameters.

In some embodiments the translation of a PDL description of a document into a display list representation may be performed by language server using routines in RDL library . In some embodiments language server may take PDL language primitives and transform these into data and graphical objects and add these to the display list using the capability provided by functions in RDL library . In some embodiments access to functions and routines in RDL library may be provided through an Application Programming Interface API . In some embodiments the display list may be stored and manipulated in a dynamically allocated memory pool such as exemplary RDL memory pool . In some embodiments the display list may be a second or intermediate step in the processing of data prior to actual printing and may be parsed before conversion into a subsequent form. In some embodiments the subsequent form may be a final representation and the conversion process may be referred to as rasterizing the data. In some embodiments rasterization may be performed by raster server . Upon rasterization the rasterized data may be stored in frame buffer which may be part of memory . In some embodiments the rasterized data may take the form of a bitmap that specifies the marks to be made on a printed page. Print engine may process the rasterized data in frame buffer and form a printable image of the page on a print medium such as paper. In some embodiments raster server and engine server may also use routines in RDL library to perform their functions. In some embodiments engine server may provide control information instructions and data to print engine . In some embodiments engine server may free memory used by display list objects after processing for return to RDL memory pool in some embodiments portions of RDL memory pool and or frame buffer may reside in memory or secondary storage . In some embodiments routines for language server raster server and engine server may be provided in firmware or may be implemented using ASICs FPGAs .

In some embodiments the identification of reusable resources may be PDL language specific and may be performed by a preprocessing front end prior to processing by language server . In some embodiments the preprocessing front end may use routines in RDL library that are specific to a language to parse the PDL file and identify reusable resources. Exemplary language server may then process all reusable resources identified by the preprocessing front end using PDL language independent routines. The identified reusable resources may be processed using standard routines available to generally process such resources. Accordingly after operations by the preprocessing front end language server may be able to perform its functions in a language independent manner using a common code pathway that is shared across multiple PDLs.

In some embodiments the use of a common code pathway allows language server to make use of general optimizations for print processing based on internal representations of reusable resources rather than a multiplicity of routines that are written for a multiplicity of PDLs. In some embodiments the internal representations or internal formats may be common to reusable resources across a multiplicity of PDLs. In some embodiments the internal formats may include one or more data fields in a data structure associated with a reusable resource. In some embodiments the data structure may correspond to a display list or a reconfigurable display list and the data field to a DL or RDL object. In one embodiment a rendered bitmap image may be associated with a data field in a data structure associated with a reusable resource. In one embodiment a data field may directly hold the internal formatted version corresponding to a reusable resource. In another embodiment a data field may reference the internal formatted version corresponding to a reusable resource using a variety of mechanisms such as pointers linked lists etc.

In some embodiments object level data that is capable of being re used during the rasterization process may be identified as resources for General Resource Manager . In some embodiments if the resources are explicitly identified such as in PPML compliant languages they may be identified as explicit resources . For example Explicit Resources may comprise of those objects that are explicitly identified as re usable in PPML compliant languages. Identification may comprise the generation and assignment of a unique ID to the resource. In some embodiments a Global Unique Identifier GUID may be used to assign unique identifiers to the resources. In some embodiments a further parsing of PDL data may yield harvested resources that are capable of being re used that are specific to a PDL. Harvested resources constitute those re useable objects that are not explicitly identified but which may be identified as resources by parsing PDL data in a manner consistent with embodiments disclosed herein. For example consider the following code sequence in PDL data where the data comprises PostScript PS data 

In some embodiments general resource manager can maintain a table or another data structure that may be used to track resources currently in the system. GUIDs assigned to resources may be used to track whether a particular resource has been rendered. That is the table keeps track of whether the resource is represented as display list not rendered or as a bitmap rendered . Exemplary language server may process explicit resources and harvested resources and may store objects generated during processing in display list DL and or reconfigurable display list RDL . In some embodiments resources or objects that can be reused may be stored in RDL using resource manager . DL and RDL can be processed by raster server to create bitmap .

General resource manager may determine which form bitmap or RDL is optimal for the particular resource. For example dense resources covering a small area may be kept in bitmap form whereas non dense resources covering a large area may be kept in RDL form. In some embodiments general resource manager may use information about the physical bounds of a resource and an estimate of the physical bounds for each object in a display list for the resource to estimate the density of the resource in total. For example general resource manager may identify a resource that spans 100 pixels 100 pixels as low density and may store the resource in display list form if the sole object in the display list for the only marks about 140 pixels. On the other hand general resource manager may identify a resource that spans 100 pixels 100 pixels as high density and may store the resource in bitmap form if there are many objects in the display list for the resource and in total they mark more than 10000 pixels which can occur if some objects overlap physically with other objects . In general general resource manager may use one or more criteria including device specific criteria to determine the format for storing a resource.

When a re usable object is rendered general resource manager may mark the resource as rendered. In some embodiments re usable rendered objects may be stored in frame buffer by general resource manager . In another embodiment a rendered re usable object may be stored on secondary storage if there is no memory available in frame buffer . For example if the time to copy a re usable object from secondary storage into the frame buffer is less than the time to render the object then the object may be stored in secondary storage. In some embodiments re useable objects may be cached. In another embodiment resources may be sent to printer in the form of a Uniform Resource Locator URL . If the resource has already been cached printer may use the cached resource. Otherwise the URL may be used to retrieve the resource.

Some PPML s permit the use of reusable objects across page boundaries. For example Reusable Objects in PPML and Resource Elements in XPS can be used across page boundaries. In one embodiment Generalized Resource Manager may also allow for resources to be stored and reused in a context that spans more than a page. In some embodiments the storing and reuse of objects across page boundaries eliminates the need to re create reusable objects when they are encountered in later pages. In some embodiments Generalized Resource Manager may use data structures to facilitate processing of resources valid within one page and those resources that have wider scope. Resources that are need within a page are often called temporary resources because they are needed only while a page is being created. In some embodiments Generalized Resource Manager may use data elements within a data structure to implement RDL that are routinely used in the context of the current page. For example a registry for the current page may be used to keep track of temporary resources and temporary resources may be registered with this registry when they are identified.

In some embodiments resources with a wider scope than a page may be stored in a special resource data structure. For example a resource may span several pages a document and or a series of documents. Resources that span several pages a document or multiple documents are often categorized as permanent resources. In one embodiment a data structure to hold permanent resources may contain data such as font tables halftone tables as well as objects in the display list and or frame buffer. In some embodiments a system wide registry may be used to keep track of permanent resources and permanent resources may be registered with this registry when they are identified.

For example PPML provides functionality to create a series of reusable objects. In PPML a page or subsets of pages of a multi page document can be defined as reusable object and can have multiple occurrences. In some embodiments generalized resource manager may allocate resources upon determination of their context to data elements within a data structure used in the context of the current page or to data elements with the special resource data structure that is used across multiple pages. In some embodiments the identification of temporary and permanent resources and their allocation to data elements within appropriate data structures and or registration with appropriate registries may be performed by language server . Exemplary engine server may process data in bitmap for printing of the document.

Other embodiments of the present invention will be apparent to those skilled in the art from consideration of the specification and practice of one or more embodiments of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

