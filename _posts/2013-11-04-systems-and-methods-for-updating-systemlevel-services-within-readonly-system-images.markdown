---

title: Systems and methods for updating system-level services within read-only system images
abstract: A computer-implemented method for updating system-level services within read-only system images may include (1) executing, during initialization of a mobile computing device, an update service stored within a read-only system image located on the mobile computing device, (2) identifying, via the update service, a writable partition located on the mobile computing device, (3) identifying, via the update service, a digitally signed update within the writable partition for at least one system-level service stored within the read-only system image, and (4) executing, via the update service, the digitally signed update within the writable partition instead of the system-level service stored within the read-only system image. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08725995&OS=08725995&RS=08725995
owner: Symantec Corporation
number: 08725995
owner_city: Mountain View
owner_country: US
publication_date: 20131104
---
Mobile device carriers and manufacturers often ship mobile computing devices with a read only factory set system image. These system images generally include the settings configurations software operating system etc. needed to run and operate mobile computing devices. In some cases device carriers and manufacturers may allow select developers such as security software providers to embed services in this image. While developers may update these services via carrier or manufacturer Over The Air OTA updates this update process can be inconvenient and slow and may prevent developers from providing timely fixes to critical bugs. In addition because OTA updates often involve re flashing the device this update process may represent an inherently risky undertaking potentially resulting in failed updates that may render the device inoperable and or cause critical applications on the device to fail. Finally while developers can provide updates to remounted or rooted system images this process may compromise device integrity and in some cases prevent the rooted device from connecting to carrier networks.

As such the instant disclosure identifies and addresses a need for a more efficient and effective mechanism for updating system level services within read only system images.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for updating a system level service stored within a read only system image by executing from a writable partition an update for the system level service instead of the system level service stored within the read only system image. In one example a computer implemented method for accomplishing such a task may include 1 executing during initialization of the mobile computing device an update service stored within a read only system image located on the mobile computing device 2 identifying via the update service a writable partition located on the mobile computing device 3 identifying via the update service a digitally signed update within the writable partition for at least one system level service that is stored within the read only system image and is configured to be loaded during initialization of the mobile computing device and then 4 executing via the update service the digitally signed update within the writable partition instead of the system level service stored within the read only system image.

In some examples the computer implemented method may further include 1 retrieving the digitally signed update from a remote server and 2 storing the digitally signed update in a pre defined location within the writable partition. In at least one embodiment the method may also include 1 periodically searching the writable partition for updates and or 2 periodically querying the remote server for updates.

The computer implemented method may also include prior to executing the digitally signed update determining that the digitally signed update is secure by verifying a digital signature of the digitally signed update. In at least one example verifying the digital signature of the digitally signed update may include verifying the authenticity and or the integrity of the digitally signed update.

In some embodiments the computer implemented method may further include upon identifying the digitally signed update for the system level service terminating the system level service and executing the digitally signed update. In one example executing the digitally signed update may include 1 immediately executing the digitally signed update and or 2 executing the digitally signed update when the mobile computing device initializes.

In some examples of the computer implemented method the update service may include a parent process of the system level service. In these examples the computer implemented method may further include before identifying the digitally signed update for the system level service 1 identifying via the update service a digitally signed update within the writable partition for the update service 2 verifying via the update service the digitally signed update for the update service and then 3 executing via the update service the digitally signed update for the update service.

In one embodiment of the computer implemented method identifying the digitally signed update may include receiving via the update service notification of the digitally signed update from 1 the system level service and or 2 an additional service. The computer implemented method may also include 1 identifying via the update service an update for at least one additional system level service 2 determining via the update service that the update for the additional system level service is not secure because a digital signature of the update for the additional system level service could not be verified and 3 executing via the update service the additional system level service instead of the update for the additional system level service.

In one embodiment the computer implemented method may also include 1 detecting that the mobile computing device failed to initialize after the update service executed the digitally signed update and then 2 storing information about the failed initialization in a log within the writable partition. When the mobile computing device re initializes the method may further include 3 determining based on information stored in the log that the digitally signed update for the system level service caused the failed initialization and 4 executing the system level service stored within the read only system image instead of the digitally signed update within the writable partition.

In one embodiment a system for implementing the above described method may include an initialization module that executes during initialization of the mobile computing device an update service stored within a read only system image located on the mobile computing device. The update service may include a partition module that identifies a writable partition located on the mobile computing device. The update service may also include an identification module that identifies a digitally signed update within the writable partition for at least one system level service that is stored within the read only system image and that is configured to be loaded during initialization of the mobile computing device. The update service may further include an execution module that executes the digitally signed update within the writable partition instead of the system level service stored within the read only system image. The system may also include at least one physical processer configured to execute the initialization module and the various modules of the update service.

A corresponding computer readable medium may include one or more computer readable instructions that when executed by at least one processor of a computing device may cause the computing device to execute during initialization of a mobile computing device an update service stored within a read only system image located on the mobile computing device. These computer readable instructions may also cause the computing device to identify via the update service a writable partition located on the mobile computing device. These computer readable instructions may further cause the computing device to identify via the update service a digitally signed update within the writable partition for at least one system level service that is stored within the read only system image and that is configured to be loaded during initialization of the mobile computing device. The computer readable instructions may additionally cause the computing device to execute via the update service the digitally signed update within the writable partition instead of the system level service stored within the read only system image.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for updating system level services within read only system images. As will be explained in greater detail below the systems and methods described herein may provide an efficient and timely process for updating native executables stored within a read only system image. Specifically by storing updates for native executables within a writable partition and then executing these updates instead of the original native executables stored within the read only system image the systems and methods described herein may avoid risky update processes such as OTA updates and provide developers with a safe easy to use process that can be performed without rooting changing or compromising the integrity of the read only system image.

The following will provide with reference to detailed descriptions of exemplary systems for updating system level services within read only system images. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In some embodiments exemplary system may also include a retrieval module that retrieves the digitally signed update from a remote server and stores the same in a pre defined location within the writable partition. Exemplary system may further include a fail safe module that avoids executing digitally signed updates that prevent the mobile computing device from initializing. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. mobile computing device and or update server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include one or more databases such as update database . In one example update database may be configured to store updates for system level services that are stored within a read only system image on a mobile computing device such as mobile computing device in . In at least one embodiment update database may represent a database stored on update server and update server may be configured to provide updates via network to mobile computing device .

Update database may represent portions of a single database or computing device or a plurality of databases or computing devices. For example update database may represent a portion of update server in computing system in and or portions of exemplary network architecture in . Alternatively update database in may represent one or more physically separate devices capable of being accessed by a computing device such as mobile computing device and or update server in computing system in and or portions of exemplary network architecture in .

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a mobile computing device in communication with an update server via a network .

In one embodiment one or more of modules from may when executed by at least one processor of mobile computing device and or update server facilitate mobile computing device and or update server in updating system level services within read only system images. For example and as will be described in greater detail below initialization module may cause mobile computing device to execute during initialization of mobile computing device an update service stored within a read only system image located on mobile computing device . Partition module may then cause mobile computing device to identify a writable partition located on mobile computing device . Identification module may then cause mobile computing device to identify a digitally signed update within the writable partition located on mobile computing device . Verification module may then cause mobile computing device to determine that digitally signed update is secure by verifying a digital signature of digitally signed update . Finally execution module may cause mobile computing device to execute digitally signed update within the writable partition instead of the system level service stored within the read only partition.

In one embodiment retrieval module may cause mobile computing device to retrieve digitally signed update from update server and to store the same in a pre defined location within the writable partition. In addition fail safe module may cause mobile computing device to avoid executing digitally signed updates that prevent mobile computing device from initializing.

Mobile computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of mobile computing device include without limitation laptops tablets cellular phones Personal Digital Assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Update server generally represents any type or form of computing device capable of storing and providing updates for system level services such as digitally signed update to a mobile computing device. Examples of update server include without limitation application servers and database servers configured to provide various database services and or run certain software applications. In at least one example update server may provide digitally signed update to mobile computing device in response to a request for the same from mobile computing device . In another example update server may be configured to provide updates to mobile computing device on a periodic basis.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between mobile computing device and update server .

As illustrated in at step one or more of the systems described herein may execute during initialization of a mobile computing device an update service stored within a read only system image located on the mobile computing device. For example initialization module may as part of mobile computing device in execute during initialization of mobile computing device an update service stored within a read only system image located on mobile computing device .

As used herein the term initialization when used with reference to mobile computing device generally refers to any type or form of boot process performed by mobile computing device . For example the term initialization may refer to any part of any process performed on mobile computing device that is used to start and or boot mobile computing device . The term initialization may also refer to any process or part of a process that readies and or prepares mobile computing device to run applications within an operating system.

In some examples the term initialization may refer to a sequence of steps used to boot mobile computing device . Examples of such steps may include without limitation and in any order loading a bootloader performing any type of Power On Self Test POST loading and executing a kernel and or operating system detecting hardware devices and loading device drivers loading low level Application Programming Interfaces APIs and system libraries loading and executing low level system services e.g. the Zygote service on ANDROID devices executing initialization processes and or files e.g. the init process and init.rc file for ANDROID devices executing kernel daemons mounting file systems loading system services and or core applications and or performing any other suitable step or combination of steps needed to initialize configure boot and or run mobile computing device .

The phrase update service as used herein generally refers to any type of process capable of providing updates to system level services stored on mobile computing device . In some examples this update service may include one or more processes and or steps executed on one or more computing devices such as update server and or mobile computing device . This update service may also include any type or combination of files libraries code systems services processes etc. used to provide updates to mobile computing device . In at least one embodiment this update service may include one or more steps or processes performed by one or more of modules such as partition module identification module verification module execution module retrieval module and or fail safe module .

As used herein the phrase read only system image generally refers to any type of system image stored on a mobile computing device that is not writable. The phrase read only system image may refer to a variety of system images in a variety of configurations such as read only system image in . In some examples the phrase read only system image may refer to any type or form of system image stored on a read only partition of mobile computing device e.g. the system partition for ANDROID . In these examples the read only system image may be generally un writable un modifiable and or un configurable without rooting or remounting the image to a writable partition.

Read only system images may contain files processes code libraries services kernels operating systems etc. needed to boot run and or generally use a mobile computing device. Read only system images may also contain embedded system level services that are provided by a third party developer such as a security software provider. In some examples read only system images may represent factory images that have been configured by a manufacturer or carrier of mobile computing device and as such contain settings software services drivers etc. specific to that manufacturer or carrier. In some embodiments read only system images may be updated via OTA updates.

The systems described herein may perform step in a variety of ways. In one example the systems described herein may initialize the update service through an initialization process. For example initialization module may represent an initialization process e.g. the init process for ANDROID configured to execute and or load system level services during initialization and may execute the update service as part of that process. Specifically initialization module may represent an initialization process that parses an initialization file e.g. initialization file in and executes entries found within the initialization file e.g. entries for loader service and or hub service . For example the update service may represent a service entry in an initialization file e.g. init.rc for ANDROID . In this example initialization module may execute the update service by executing the process pointed to by the service entry.

In some embodiments initialization module may be executed from a read only system image e.g. read only system image within read only partition in and may execute the update service from the same read only system image. In other embodiments initialization module may execute the update service using any other process suitable for executing the update service during initialization of mobile computing device .

The systems described herein may execute the update service at any time during initialization of mobile computing device . For example initialization module may execute the update service at the beginning of an initialization process e.g. immediately after a kernel has initialized during the final steps of initialization e.g. during the loading of high level applications and services or any other time during initialization of mobile computing device . In some embodiments the update service may include one or more files executables computer executable instructions binaries and or libraries in any variety of configurations. In these embodiments executing the update service may include executing one or more computer executable instructions found within such configurations.

As illustrated in at step the systems described herein may identify via the update service a writable partition located on the mobile computing device. For example partition module may as part of mobile computing device in identify a writable partition e.g. writable partition in located on mobile computing device .

Within the instant disclosure the phrase writable partition generally refers to any partition located on any type or form of computer readable storage device that may be written to or modified. In some embodiments the phrase writable partitions may refer to partitions that allow changes to files and or directories. In certain examples a variety of applications and services located on mobile computing device may be capable of modifying the writable partition by saving files to the partition installing programs software and or updates to the partition saving user settings and configurations on the partition storing logs and other data on the partition as well as performing any other action or process that modifies or changes the data on the writable partition. In some examples the phrase writable partition may refer to a partition e.g. the data partition for ANDROID that stores updates to services files libraries applications etc.

The systems and methods described herein may perform step in a variety of ways. In one example partition module may search one or more storage devices on mobile computing device for a writable partition. In another example partition module may search a pre defined location on a storage device for a writable partition. In some embodiments partition module may identify a writable partition by examining partitions that were discovered by an initialization process of mobile computing device . For example a boot process configured to mount file systems may discover multiple partitions during initialization of mobile computing device . In this example partition module may perform step by accessing partition data discovered by the boot process.

As illustrated in at step the systems described herein may identify via the update service a digitally signed update within the writable partition for at least one system level service within the read only system image. For example identification module may as part of mobile computing device in identify a digitally signed update within the writable partition of mobile computing device for a system level service within the read only system image of mobile computing device .

The phrase digitally signed update as used herein generally refers to any type or form of update e.g. loader update and or hub update in that has been signed using a digital signature e.g. digital signature and or digital signature . Examples of such updates include without limitation system level service updates system level library updates system level file and or binary updates system level daemon updates system image updates initialization process updates initialization file updates and or any other suitable type or form of update. In addition the term digital signature as used herein generally refers to any type or form of scheme used to demonstrate the authenticity and or integrity of a digital object. Digital signatures may be encrypted using a variety of encryption algorithms and schemes such as RSA DSA ECDSA ElGamal signature scheme Schnorr signature Pointcheval Stern signature Rabin signature pairing based schemes such as BLS undeniable signatures aggregate signatures and or any other type or form of suitable algorithm and or scheme. Examples of digital signatures may include without limitation signatures that verify the integrity of a digital object signatures that verify the author of a digital object signatures that verify both the integrity and the author of a digital object and or any other type or form of signature that may be used to demonstrate the security of a digital object in any way.

In some examples the digitally signed update and the digital signature may be stored in the same file. Alternatively the digital signature and the digitally signed update may be stored as separate files. For example the digitally signed update and its corresponding digital signature may be stored as separate files in separate locations within the writable partition.

The phrase system level service as used herein generally refers to any type of service native to mobile computing device . Examples of system level services may include without limitation any type or form of native files processes binaries computer executable instructions and or any combinations of the same. System level services may also refer to native services that are stored within a read only system image. In one example all or part of modules may represent system level services that are stored on the read only system image of mobile computing device .

The phrase system level service may also refer to any type of native service that is configured to be loaded during the initialization of a mobile computing device. Such services may include processes files libraries API s and or computer executable instructions that have been specifically designed and or configured to be executed during initialization. For example all or part of modules may be specifically configured to be loaded during initialization of mobile computing device .

In some examples the phrase system level service may also refer to services or processes that must be executed in order for mobile computing device to initialize and or to services or processes that must be executed prior to the execution of higher level applications and services. The phrase system level service may also refer to services that need access to lower level systems and services and as such are configured to be loaded during initialization of mobile computing device . In some embodiments the phrase system level service may refer to daemons i.e. background processes configured to be executed during initialization of mobile computing device .

In some examples system level services may include a variety of native services specific to a mobile platform such as the ANDROID platform e.g. ANDROID 4.0 . Examples of native ANDROID system level services may include without limitation bootloaders LINUX based kernels kernel drivers e.g. audio drivers display drivers usb drivers etc. the init process the init.rc file the Zygote process the Dalvik Virtual Machine ANDROID runtime core libraries system libraries e.g. SQLite SGL SSL libc OpenGL etc. and or the application framework e.g. window manager activity manager view system XMPP service package manager etc. . Additionally these ANDROID system level services may be included in a variety of ANROID read only system images e.g. the razor factory images for nexus such as ANDROID 4.3 JSS15Q and JSS15R .

In some examples the phrase system level service may refer to services within a framework of native services that are embedded in the read only system image of mobile computing device and are configured to be loaded when mobile computing device initializes. For example a security software developer may embed a framework of security services and tools such as loader service and hub service in in the read only system image that for security purposes are configured to be executed when mobile computing device initializes. In some embodiments the read only system image may include a variety of other frameworks services files etc. provided by a variety of third party developers.

The systems and methods herein may perform step in a variety of ways. In one embodiment the systems described herein may 1 retrieve from a remote server the digitally signed update and 2 store the digitally signed update in a pre defined location within the writable partition. For example retrieval module may retrieve an update for loader service in e.g. loader update from update server and store the same in writable partition . In this example identification module may identify loader update by searching a pre defined location within writable partition . In some examples this pre defined location may be a directory or folder within writable partition into which retrieval module stores loader update .

In some embodiments the systems described herein may 1 periodically search the writable partition for updates and or 2 periodically query the remote server for updates. For example identification module may periodically search the pre defined location within the writable partition for updates. In some embodiments identification module may search the pre defined location at a variety of intervals such as once a day once a week once a month multiple times a day etc. or at any other suitable schedule or interval. Similarly in some embodiments retrieval module may periodically query update server for updates. For example retrieval module may query update server at a variety of intervals such as once a day once a week once a month multiple times a day etc. or at any other suitable schedule or interval.

In at least one embodiment the systems described herein may identify the digitally signed update by receiving via the update service notification of the digitally signed update from 1 the system level service and or 2 an additional service. For example identification module may identify loader update by receiving notification from loader service and or an additional service e.g. hub service such as a service or process that is configured to notify another software module such as identification module of updates. In some examples the system level service may be a parent process of the additional service e.g. loader service may represent a parent process of hub service . In other examples the system level service may be a child process of the additional service.

As illustrated in at step the systems described herein may execute via the update service the digitally signed update within the writable partition instead of the system level service stored within the read only system image. For example execution module may as part of mobile computing device in execute digitally signed update instead of the system level service stored within the read only system image.

The systems and methods described herein may perform step in a variety of ways. For example execution module may execute digitally signed update any time after identification module identifies digitally signed update . In one embodiment execution module may immediately execute digitally signed update after identification module identifies the same. In another embodiment execution module may wait to execute digitally signed update until the next time mobile computing device initializes.

In some embodiments the systems described herein may avoid executing digitally signed updates that prevent the mobile computing device from initializing. For example the systems described herein may after executing the digitally signed update as described in step 1 detect that the mobile computing device failed to initialize and then 2 store information about the failed initialization in a log within the writable partition. When the mobile computing device re initializes the systems described herein may additionally 3 determine based on information stored in the log that the digitally signed update for the system level service caused the failed initialization and may 4 execute the system level service stored within the read only system image instead of the digitally signed update within the writable partition. Specifically fail safe module may detect that mobile computing device failed to initialize after execution module executed digitally signed update . Fail safe module may then store information about the failed initialization within initialization log . When mobile computing device re initializes fail safe module may determine based on information stored in initialization log that digitally signed update caused the failed initialization. Fail safe module may then execute the system level service instead of digitally signed update .

In various embodiments the systems described herein may prior to executing the digitally signed update determine that the digitally signed update is secure by verifying a digital signature of the digitally signed update. For example verification module may determine that digitally signed update is secure by verifying a digital signature of digitally signed update . Similarly loader service may determine that hub update is secure by verifying digital signature .

The systems described herein may verify digital signatures and thus their associated updates in a variety of ways. In one example the systems described herein may verify the authenticity of the digitally signed update by successfully decrypting the digital signature associated with the digitally signed update using a public cryptographic key provided by a publisher of the digitally signed update. For example verification module may verify the authenticity of loader update in by successfully decrypting its corresponding digital signature using a public cryptographic key provided by the publisher of loader update .

In another example the systems described herein may verify the integrity of the digitally signed update by verifying a cryptographic hash included within the digital signature associated with the digitally signed update. For example verification module may verify the integrity of hub update in by 1 calculating a cryptographic checksum or hash of hub update 2 decrypting using a public cryptographic key provided by a publisher of hub update digital signature to obtain a cryptographic hash and then 3 determining that cryptographic hash matches the calculated hash. Validating digital signature in this manner may verify that hub update has not been modified or tampered with since leaving the possession of its publisher.

In some embodiments of the systems described herein the update service may be a parent process of the system level service. For example the update service may be part of a framework of services provided by a security software provider. In this example loader service may represent the recited update service which may in turn load and monitor hub service . In some embodiments hub service may represent the recited system level service and in other embodiments the system level service may represent a child process of hub service .

In embodiments where the update service is a parent process of the system level service the systems described herein may before identifying the digitally signed update for the system level service 1 identify via the update service a digitally signed update within the writable partition for the update service 2 verify via the update service the digitally signed update for the update service and 3 execute via the update service the digitally signed update for the update service. For example loader service may identify loader update verify digital signature and then execute loader update .

In various embodiments the systems described herein may upon identifying the digitally signed update for the system level service terminate the system level service and execute the digitally signed update. For example hub service may identify hub update and notify loader service of the same. In response loader service may terminate hub service and execute hub update instead.

In some examples hub service may be a parent process of multiple child processes including a live update service. In this example the live update service may be configured to retrieve updates from update server and store the same within writable partition . The live update service may also notify hub service when an update for a child process of hub service is downloaded. In this example hub service may then terminate the child process and then execute the update for the child process.

In some embodiments the systems described herein may after terminating the system level service either immediately execute the digitally signed update or execute the digitally signed update when the mobile computing device initializes. For example loader service may upon terminating hub service immediately execute hub update . Alternatively loader service may upon terminating hub service wait until mobile computing device re initializes before executing hub update .

In some examples the systems described herein may ensure system security by only executing verified updates. For example the systems described herein may 1 identify via the update service an update for at least one additional system level service that is configured to be loaded during initialization of the mobile computing device 2 determine via the update service that the update for the additional system level service is not secure because a digital signature of the update for the additional system level service could not be verified and then 3 execute via the update service the additional system level service instead of the update for the additional system level service. Specifically hub service may include a child process and may identify a digitally signed update for the same. Hub service may then attempt to verify the digital signature of the update for the child process and may for a variety of reasons find that the digital signature of the child process could not be verified. For example hub service may find that a checksum or encrypted hash similar to cryptographic hash of the update for the child process is inconsistent and may determine based on this inconsistency that the update is unsecure because it has been altered from its original form. Hub service may then execute the child process instead of the update for the child process.

In one example the child process described in the previous paragraph may also be digitally signed and a public key used to decrypt the digital signature of the child process may be included in read only system image . In this example hub service may before executing the child process determine that the child process is secure by using the public key to verify the digital signature of the child process. By doing so hub service may verify that the child process is secure because it has not been modified. In various embodiments read only system image may contain a variety of public keys and digital signatures used to verify the authenticity and integrity of read only system image and or the system level services stored within read only system image . These public keys and digital signatures may help detect if read only system image has been modified e.g. rooted in a way that compromises its security and or integrity.

In some examples the initialization process loader service and hub service may represent daemons configured to run as background processes on mobile computing device . In these examples these processes and services may perform the steps described within the instant disclosure at any time mobile computing device is running. For example after mobile computing device initializes hub service may continue to monitor a framework of security services all of which may be child processes of hub service . If an update for one of these security services is identified hub service may terminate itself and then be restarted by loader service .

In one embodiment loader service may be configured to restart hub service a limited number of times and after reaching a pre defined restart threshold number may wait until mobile computing device re initializes before restarting hub service . In some embodiments when hub service identifies an update hub service may wait to restart until the next time mobile computing device initializes.

The following will provide a detailed example of the process outlined above in connection with . In this example during initialization of mobile computing device an initialization process e.g. the init process for ANDROID may execute loader service by parsing initialization file and executing entries found within the same. Loader service once executed may then search for updates to itself within a pre defined location on writable partition . If loader service identifies an update such as loader update it may then attempt to verify the digital signature of the update. If verification of the update is successful loader service may execute the newest version of loader service which in this example is loader update . If loader service is unable to verify the update then loader service may refrain from executing the update.

After checking for its own updates loader service or the updated version of loader service as the case may be may then check for updates for hub service by searching a pre defined location on writable partition . In this example upon identifying hub update by searching the pre defined location loader service may determine that hub update is secure by verifying cryptographic hash and may execute hub update instead of hub service . In other examples if cryptographic hash cannot be verified loader service may execute hub service instead of hub update . Hub service or the updated version of hub service as the case may be may then check writable partition for updates for one or more child processes. If updates are found for one or more of these child processes hub service may execute the updates for these child processes instead of the native versions of the same.

As explained above in connection with method in when mobile device developers want to provide updates to native binaries they have distributed within a read only partition e.g. the system partition for ANDROID devices they generally must wait until the device is flashed with a carrier or manufacturer OTA update. Developers may want an alternate solution to these often slow to release risky OTA updates. One solution includes remounting or rooting the read only system image but doing so may compromise the integrity of the mobile device and in some cases prevent the device from connecting to a carrier network.

The instant disclosure may overcome these problems by executing from a writable partition e.g. the data partition on ANDROID devices updates for native binaries instead of the native binaries themselves. As detailed in the description above this may be accomplished by retrieving a digitally signed update from a cloud server and installing the same in a pre defined location on the writable partition. Before executing the digitally signed update an update service may ensure that the update is secure by verifying the digital signature of the update. If the mobile device fails to boot after executing the update information about the failed boot may be kept in a log within the writable partition so that problematic updates can be skipped in the future. By performing these steps the instant disclosure may provide a secure solution for updating low level services on a read only partition without needing to re flash the partition and or the mobile device. In some examples this solution may extend to include a mother process e.g. the init process for ANDROID that can provide updates for all system level services and native binaries stored within the read only partition. These solutions may in turn allow developers to provide timely updates to critical services eliminate the risks inherent to flashing mobile devices with OTA updates and increase sales by providing better supported and more robust services.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example update database from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. Compact Disks CDs or Digital Video Disks DVDs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for updating system level services within read only system images.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the phrase information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the phrase information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the phrase endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may identify a system level service stored within a read only system image and then transform the system level service into an updated version of the same by executing a digitally signed update within a writable partition instead of the system level service stored within the read only system image. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms connected to and coupled to and their derivatives as used in the specification and claims are to be construed as permitting both direct and indirect i.e. via other elements or components connection. In addition the terms a or an as used in the specification and claims are to be construed as meaning at least one of. Finally for ease of use the terms including and having and their derivatives as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

