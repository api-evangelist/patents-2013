---

title: Inferring diagram structure through implicit shape relationships
abstract: Information in a diagram is logically structured using lists, containers, and callouts without requiring the diagram author to explicitly define a structure or map any diagram contents to a structure. Logical relationships are inferred based on actions associated with shapes, groupings, and attributes of shapes/groupings taken by the author. Feedback mechanisms are provided to communicate an underlying structure to the author. Intelligent behaviors are enabled to expose manipulation of diagrams based on their logical structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09626739&OS=09626739&RS=09626739
owner: Microsoft Technology Licensing, LLC
number: 09626739
owner_city: Redmond
owner_country: US
publication_date: 20131231
---
This Application is a continuation under 35 U.S.C. 120 of U.S. patent application Ser. No. 12 404 404 filed on Mar. 16 2009 and patented as U.S. Pat. No. 8 648 878 by the same inventors commonly assigned herewith.

Organizational techniques such as cleanly arranged shapes visual groupings of relating items and descriptive text improve readability of a diagram and enable users to better organize the diagrams. With conventional diagramming applications users typically spend a lot of time managing the shapes in their diagram to achieve good visual results. Conventional diagramming applications either allow freeform diagramming or structured diagramming. In freeform diagramming authors can arrange content however they like but no logical relationships are defined by the content. The diagram is simply a picture and interpretation of any diagram meaning is done by the viewer not the software. In structured diagramming authors arrange content according to explicit rules or by invoking specific commands to define the relationships in the diagram for example using a compose group command to positionally associate shapes together that generates a composite shape from several individual shapes .

In the freeform approach the diagram cannot be used with other software tools or features that act on logical relationships since no relationships exist. With the structured approach authors struggle to discover learn and properly use structuring commands to define logical relationships.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to exclusively identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are directed to a mechanism by which information in a diagram may be logically structured without requiring the diagram author to explicitly define a structure or map any diagram contents to a structure. According to some embodiments logical relationships may be inferred based on actions taken by the author. Feedback mechanisms may be provided to communicate an underlying structure to the author. According to other embodiments intelligent behaviors may be enabled to expose manipulation of diagrams based on their logical structure.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory and do not restrict aspects as claimed.

As briefly described above logical relationships may be generated automatically in a diagram canvas as the diagram author uses the software without requiring extra actions to be taken by the author to set up the relationships. In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

While the embodiments will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer those skilled in the art will recognize that aspects may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and comparable computing devices. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments may be implemented as a computer implemented process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage medium readable by a computer system and encoding a computer program that comprises instructions for causing a computer or computing system to perform example process es . The computer readable storage medium can for example be implemented via one or more of a volatile computer memory a non volatile memory a hard drive a flash drive a floppy disk or a compact disk and comparable media. The computer program product may also be a propagated signal on a carrier e.g. a frequency or phase modulated signal or medium readable by a computing system and encoding a computer program of instructions for executing a computer process.

Throughout this specification the term platform may be a combination of software and hardware components for providing diagramming services. Examples of platforms include but are not limited to a hosted service executed over a plurality of servers an application executed on a single server and comparable systems. The term server generally refers to a computing device executing one or more software programs typically in a networked environment. However a server may also be implemented as a virtual server software programs executed on one or more computing devices viewed as a server on the network. More detail on these technologies and example operations is provided below.

Referring to conceptual diagram of an example diagramming application and major components of a diagram document is illustrated. Diagramming application executed on computing device is an example software program for generating and editing diagrams. A diagram is typically generated on a canvas using shapes images textual elements and comparable ones. Diagram elements may be placed on the canvas manually automatically or semi automatically based on user actions. Each of the diagram elements has their own attributes . Relationships and logic structures may be created between the diagram elements such as shapes explicitly or through implication. The diagram with its elements relationships and other information may be saved as a diagram document .

According to other embodiments related shapes possess special behaviors in the diagramming application. For example once a shape is contained by another it automatically may be moved copied or deleted as its container is moved copied or deleted. Yet the contained shape is still available for direct manipulation just as it is when it is not in a relationship with another shape. In contrast a traditional behavior like composing a group limits access to the shapes contained by the group so there is an interactivity tradeoff when forming this explicit logical relationship.

With a shape that is designated as a list container or callout there are relationships that may be established with other shapes. Shapes may be added to lists and containers and callouts may be associated with other shapes. Embodiments provide a means for automatically forming and breaking these logical relationships based on simple actions taken by the diagram author editor. For example moving a shape onto a list or container forms a relationship moving the shape off the list or container breaks a relationship moving a callout or callout leader line onto a shape forms a relationship moving the callout off breaks a relationship.

Logical relationships have no visible aspect so a set of visible feedback mechanisms are defined to indicate the relationships exist are being created or are being broken. A visual feedback may notify the author that their standard action of moving a shape on the canvas will also affect logical relationships. Once a relationship exists the diagramming application may provide a number of behaviors to manage the shapes involved in the relationship. These behaviors include moving copying and deleting shapes involved in a relationship. They also include rearranging the contents of lists and expanding the boundaries of containers as member shapes change. Additional controls may be exposed to the author to customize some of these behaviors.

According to further embodiments relationships may be combined together to form more specialized behaviors in a diagram. An example of this is placing a set of containers into a list. The containers each manage their own member shapes and then are themselves arranged by the list shape.

While the diagramming application and diagramming actions in have been described with specific example elements attributes and behaviors embodiments are not limited to the example components and behavior. Embodiments may be implemented with other shape types behaviors and feedback mechanisms using the principles described herein.

Diagram shows three example list structures. List outlines are necessarily not visible. List includes shapes aligned on a horizontal axis. List includes shapes . As shown in the figure shapes within a list do not have to have similar form or be aligned along horizontal or vertical e.g. list of shapes aligned along the vertical axis axes only. Shapes of list are ordered in a descending format i.e. their alignment axis is at a predefined angle to the horizontal .

In a diagramming application shapes may be added to a list using one of the insert commands exposed by the list or by dragging action by the authors. Adding a shape to a list does not affect its connectivity or callout associations. A list provides a mechanism for clicking directly on the diagram surface to insert items in a list. When the cursor moves near a potential insertion point a list insertion icon may appear in a semi transparent state or on a menu bar. The list container boundary may be highlighted as well. The icon and highlight may disappear once the cursor moves away from the insertion point. The user may add a new or existing shape to a list by dragging it onto an insertion icon or into the list container. If the cursor hovers over the insertion icon a tooltip may appear reading Insert Shape .

The user may be enabled to drag multiple shapes at once to insert them at the insertion location. The cursor determines the insertion location. All allowable shapes in the selection are inserted at the insertion location. Non allowable shapes are simply dropped at the location where they are released on mouse up. Once the new shape or shapes are dropped and inserted the list may be automatically rearranged to fit the new shapes. Shapes not allowed in the list as list members may be checked to determine if they can be added to the list container as regular container members. Any shapes allowed in the list container may be added to the list container. According to some embodiments these shapes may be silently added to the container with no highlighting feedback or shape rearrangement and the list container may not expand to fit the shapes. Shapes may support multiple kinds of relationships such as lists that can also function as a container.

A shape may not be a member of both a list and a partially overlapping container a container that is not a member of the list . List members in containers that fully overlap spatially include the list of containers may be contained. If a member of an overlapping container is successfully added to a list the shape is removed from the overlapping container. If a list member is successfully added to an overlapping container the shape is removed from the list.

As mentioned above shapes may be removed from a list through any of the regular mechanisms for removing a shape from container. Once a shape has been removed the remaining shapes in the list are rearranged. A shape or shapes may be dragged out of a list with the cursor being dragged outside the list container alignment rectangle. The list container may be highlighted when any list member shape is selected. Once the cursor moves outside the list container the list container highlight may disappear to signal that the shapes are free. Dragging multiple shapes out of a list does not preserve any list association between the selected shapes i.e. dragging out a portion of a list does not produce another list .

When a list member s position is changed by the action or through automation its new rank within the list may be determined and the list rearranged based on the new order. If a position change is not significant enough to change the rank the shape may be snapped back into its previous position. If a position change takes the shape out of the list container the shape is removed from the list. When a shape s position moves because of an action other than mouse drag the center of the shape s alignment box may be used to determine rank.

As mentioned previously lists are defined by a list container whose outline may be invisible. Lists can be moved by dragging the list container shape. The shapes in the list container move with the list container. While dragging outline rectangles for the list container and all list members may be displayed.

Lists may be resized in the same ways containers may be resized. However list containers are assumed to form tight boundaries around their contents. Any resize may trigger a fit to contents action adjusting the boundaries for the list container. One exception is that resizing a list of containers causes containers to grow or shrink with the list.

Cut or copy actions a list container shape automatically place all list member shapes on the clipboard. The container and contents are added to the page on paste action. The contents may be deleted manually by the user after the paste operation if they desire. Cut or copy actions on list member shapes however do not place the list container shape on the clipboard. The pasted shapes may not have any list association between the shapes i.e. copying a portion of a list does not produce another list . Duplicating a list container shape may also duplicate the contents of the list creating a whole new list. Duplicating a list member shape is the equivalent of selecting that shape and inserting it at the selected location.

Shapes may be pasted directly into a list if the shapes are added to the diagram within the list container s boundary. Adding the shape to the list is subject to the normal membership requirements allowable shape unlocked container . When a container and member shapes are pasted on a list only the container is a candidate for membership in the list. The container member shapes are not added to the list.

Lists are deleted by deleting the list container shape. Deleting a list container shape also deletes all member shapes. Lists are not deleted when their last member shape is removed. Direction spacing and alignment attributes specified in the list container shape may be used to calculate shape positions when arranging a list. If attributes or values are missing default values may be used. In an arrangement operation the diagramming application may start from one edge of the list container shape the edge depends on the list direction attribute and place the first list member near the edge spaced according to the list container margin attribute for that edge. Following the list direction attribute subsequent member shapes may be positioned relative to the previous member shape. In order to properly space the shapes an upright bounding box may be used for each shape which may include some or all its sub shapes and shapes separated based on the list spacing attribute. The next shape may be aligned based on the list s alignment property.

When shapes have to be rearranged due to a change in direction attribute the member shapes and list container may be positioned such that their new bounding region is centered on their previous bounding region. This reduces the scenarios where a change of direction causes overlap with other parts of the diagram. When all members of the list have been arranged the list container shape may be resized and positioned to bound all the contents. The current margin setting may be applied to the gap between the container shape and the contents.

Containers according to embodiments bound a set of shapes with a visible or invisible border and influence their behavior without abstracting them from the canvas. Containers may also have a text heading. Differently from conventional relationships containers do not become the parent shape for their contents and include special behaviors that make it easy to continue working with the shapes inside the container. A shape may belong to multiple containers e.g. shapes and containers . A container may include other containers in addition to the shapes container with its shapes including also container with its shapes . The container manages the position of its member shapes by moving the shape whenever the container moves though the user may still move the shape around independently from the container. The container copies and deletes its member shapes whenever the container is copied or deleted. Users are able to add and remove shapes simply by dragging them in and out of the container boundary.

Container membership behaviors may apply to lists in addition to the special behaviors described in this section. A container shape may be locked to prevent members from being added or removed. If the container shape is locked no insertion UI may be shown and insertion commands may be disabled.

According to some embodiments a shape that is a member of a container has a member state that defines the behavior of the shape with respect to the container the same mechanism is used for list containers as well . An interior state is the normal member state. Shapes in this state generally are in interior spatial relationships. Interior members that are not currently interior spatially are in a transient state. The On Boundary state is a special member state for shapes placed on the edge of a container. Shapes in this state are in the on boundary spatial relationship. Shapes move with the container edge to remain in this state. An on boundary shape is anchored to the container edge. A shape may be anchored to one horizontal edge and one vertical edge. The edges may be in different containers. The Outside state is a transient member state where a member is spatially outside the container. This typically occurs when a drawing has been modified outside of the diagramming application. These shapes become interior spatially in a future container resize operation. Finally the In List state is a special state for members of lists. Shapes in this state have an interior spatial relationship.

An author of the diagramming application is enabled to move shapes around inside a container using the mouse or keyboard or other means to explicitly set position such as a command through the menu bar. If a shape is moved outside the container boundary the shape is removed from the container.

Callouts are a special type of shape e.g. that can form a logical association with anther shape a target shape on the page. Callouts allow the user to type in a description or comment about the target shape as an annotation to the diagram. A callout shape can be associated with another shape by dragging a user interface element indicating the callout s target shape from the callout shape and dropping it on the target shape. Z order an order of which shape was placed on the canvas over another determines which shape is the target for the control handle. Any previous association may be removed and anew association created.

In a diagramming application according to embodiments a callout associated with a target shape moves with the target shape. In this arrangement moving the callout changes the offset distance from the target while moving the target causes both shapes to move by the same amount. For example if target shape is moved to a new location target shape callout is also moved to the location of callout retaining its size and offset from target shape . Callouts are added to regular containers when they are moved inside the container boundary. Callouts may be resized like normal shapes.

When a target shape is cut copied or duplicated any associated callout shapes are also copied. When a callout shape is copied and pasted without its target shape the new callout becomes unassociated. Callouts do not automatically associate with new shapes when the callouts are pasted on top of them. Callouts can be deleted like normal shapes. Deleting a target shape will also delete any associated callout shapes. Callout shapes that are placed into groups without their target shape may become unassociated. Target shapes that are grouped without their callouts may become unassociated from the callouts.

As a result of composing a group e.g. in a container callow positions may be modified without breaking the callow target shape association. For example upon moving target shape and its callow into container along with the new shape callow and target shape may be moved to accommodate the new shape while the relationship with its target shape is maintained.

Diagram illustrates two basic resizing actions. In the first one one of the member shapes of container is enlarged causing the member shape to exceed the container. The resulting container is a large resized version of container encompassing all three shapes.

In the second example Container includes four member shapes and a second container with three member shapes of its own. Containers and are arranged within a list not shown . One of the member shapes of container is deleted by the user resulting in resized reduced container and . The resizing of containers may be automatic or it may be presented to the user as an option and performed upon user acceptance of the resizing. Containers may be resized with some restrictions on their behavior. While a container may increase in size with no restriction a container may decrease in size until the containment state of any member shape would change. In general member shapes do not move when the container is resized. However shapes designated as on boundary may be repositioned with the container edge they sit on.

By using the inferred relationships between containers and member shapes other special behaviors may also be enabled. For example moving a container shape may cause all member shapes to move along by the same amount. Containers moved on top of other shapes do not pull those shapes into the container. Shapes moved because their container is moved may be added to any other containers they now overlap. If shape protections prevent shapes from moving with their container they may be removed from the container. Effectively the behavior is equivalent to moving the shapes with the container and then moving the shapes back to their original position. If the shape is outside the container it is removed. The container may resize as described above. If a shape is a member of multiple containers it moves with whatever container is moving at the moment. This action may reposition the members relative to other containers and may remove them from the other containers entirely.

Cut or copy actions on a container shape automatically place all member shapes on the clipboard. If the members are themselves containers their members are recursively added as well. The container and contents are added to the canvas on paste. The contents may be deleted manually by the user after the paste operation if they desire.

Cut or copy actions on member shapes do not place the container shape on the clipboard unless the container shape is also in the selection. When pasting a member of a container the new shape is only added to underlying containers if its parent is added if the parent is already on the clipboard . On the other hand if the member s parent is not on the clipboard the new shape is added to any underlying containers subject to normal membership requirements.

Duplicating a container shape also duplicates the contents of the container creating a whole new container. Locked containers may be duplicated creating another locked container. When duplicating a member of a container if the member s parent is also selected the new shape is only added to underlying containers if its parent is added if the member s parent is not selected the new shape is added to any underlying containers subject to normal membership requirements.

Deleting a container also deletes the member shapes of the container unless those shapes are also members of other containers that are not ancestors of the deleted container deleting an inner nested container will delete its contents . Containers can be nested together. For a container to be nested it must be entirely within the boundary of its parent container. If a container is not full dragged into another container it is considered to overlap not nest. When a container is nested inside a parent all member shapes of the parent that are also members of the inner container now become members of both containers. When a nested container is moved so that it overlaps or lies outside its parent container it is removed from the parent container. Any member shapes of the nested container are checked for containment to see if they should be removed from the outer container.

An icon for inserting containers may open a graphic menu of available containers with different textual element options e.g. a title for the container . While the containers in example user interface are shown having rectangular shape other shapes may also be used. Furthermore other attributes of available containers in addition to textual elements may also be presented for selection.

User interface shows an example insert menu presenting available callouts for selection. Upon selection of callout icon available callout types are displayed with varying shapes and outline types line no line etc. .

A user interface for a diagramming application inferring logic relationships from shapes may include additional or fewer textual and graphical elements and may employ various graphical color and other configuration schemes to display different functionalities and associated processes.

As discussed above information in a diagram may be logically structured without requiring the diagram author to explicitly define a structure or map any diagram contents to a structure. A diagramming application executed on one of the client devices or in a distributed manner in one or more of the servers may infer logical relationships based on actions taken by the author. The application may provide feedback mechanisms to communicate an underlying structure to the author. Data associated with rendered diagrams may be stored in one or more data stores e.g. data store which may be managed by any one of the servers or by database server .

Network s may comprise any topology of servers clients Internet service providers and communication media. A system according to embodiments may have a static or dynamic topology. Network s may include a secure network such as an enterprise network an unsecure network such as a wireless open network or the Internet. Network s may also coordinate communication over other networks such as PSTN or cellular networks e.g. external network s . Network s provides communication between the nodes described herein. By way of example and not limitation network s may include wireless media such as acoustic RF infrared and other wireless media.

Many other configurations of computing devices applications data sources and data distribution systems may be employed to implement a diagramming service with diagram structure inference from implicit shape relationships. Furthermore the networked environments discussed in are for illustration purposes only. Embodiments are not limited to the example applications modules or processes.

Diagramming application structure engine and diagram structure API may be distinct modules or an integrated service providing diagramming services with logic relationship and structure inference based on shapes and user actions on a canvas. Structure engine may be a specialized component of diagramming application analyzing shape positions attributes user actions and determining relationships based on those. Special behaviors may be enabled based on the inferred relationships and structures. Diagram structure API may define categories of shape groupings such as lists containers and callouts as well as their attributes for use by the diagramming application and other applications interacting with the diagramming application . This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer readable storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer readable storage media may be part of computing device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device and comparable input devices. Output device s such as a display speakers printer and other types of output devices may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other devices such as over a wireless network in a distributed computing environment a satellite link a cellular link and comparable mechanisms. Other devices may include computer device s that execute communication applications email or presence servers and comparable devices. Communication connection s is one example of communication media. Communication media can include therein computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RE infrared and other wireless media.

Example embodiments also include methods. These methods can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this doe ent.

Another optional way is for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

Process begins with operation where a logic structure between shapes on a diagram canvas is determined based on position interrelations and attributes of the shapes. At operation an action associated with one or more of the shapes is received. This may include a mouse based action such as dragging a shape or a command based action through selection of a command in a menu. At operation a relationship of the affected shape s is determined based on the logic structure. For example a shape that is part of a list or a container may be moved by the author.

The effects of the author s action on the related shapes and logic structure may be determined at operation . For example moving of a shape out of a list or container may affect the ordering of the remaining shapes as well as a sizing of the list or container. At subsequent operation the effects of the action are applied to the related shapes and logic structure. Following the above example remaining shapes may be re ordered and the list or container resized automatically to account for the removal of the shape by the author.

The operations included in process are for illustration purposes. Inferring diagram structure through implicit shape relationships may be implemented by similar processes with fewer or additional steps as well as in different order of operations using the principles described herein.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and embodiments.

