---

title: Fault handling in a distributed IT environment
abstract: An improved method provides fault handling in a distributed IT environment. The distributed IT environment executes at least one workflow application interacting with at least one application by using interface information about the at least one application. The method comprises: storing at least one fault handling description in a implementation-independent meta language associated with the at least one application; associating the interface information with the at least one fault handling description based on at least one defined fault handling policy, created based on at least one service definition; and the workflow application if a fault response from the at least one application is received: retrieving at least one associated fault handling description based on at least one fault handling policy, and interpreting and executing a particular meta language code of the at least one associated fault handling description in order to continue the defined workflow application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09208014&OS=09208014&RS=09208014
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09208014
owner_city: Armonk
owner_country: US
publication_date: 20130228
---
The present application is a continuation of U.S. patent application Ser. No. 13 532 915 titled Method and Arrangement for Fault Handling in a Distributed IT Environment filed on Jun. 26 2012 the contents of which is incorporated herein by reference in its entirety.

The present application claims benefit of priority under 35 USC 120 and 365 to the previously filed Germany Patent Application No. 11171572.8 titled Method and Arrangement for Fault Handling in a Distributed IT Environment with a priority date of Jun. 27 2011. The content of that application is incorporated by reference herein.

The present invention relates in general to the field of distributed and heterogeneous enterprise application environment and in particular to a method and an arrangement for fault handling in a distributed information technology IT environment. Still more particularly the present invention relates to a data processing program and a computer program product for fault handling in a distributed IT environment.

In a typical distributed and heterogeneous enterprise application environment as it is common in many large companies application integration of different software systems is a necessity to automate common workflows and processes of the business and the integration thus enables the companies to become more efficient and competitive in the market.

Companies can distinguish themselves from their competitors by being more agile and adapting faster to changing market trends and legal or industrial regulations e.g. auditability . In order to achieve such agility on a technical level it is important to be able to rapidly deploy new automated workflows and processes or to change existing workflows and processes.

Enterprise process modeling and development environments such as WebSphere Integration Developer by International Business Machines allow integration developers to use graphical tools to model develop and deploy business process applications in standardized ways and formats such as business process execution language BPEL or business process model and notation BPMN and to leverage standardized protocols like SOAP JMS HTTP JCA etc. and proprietary connectors to integrate with third party systems of different kinds.

While these mentioned standards as well as proprietary connectors usually detail the syntactical interfaces to third party systems they often lack semantic context like meanings of error conditions and how to deal with the error conditions under the given circumstances. However this semantic information is needed by the integration developer to properly develop interactions with a system and to appropriately handle fault conditions. Another problem is that syntactical interfaces of systems do not tell the integration developer how to deal with system responses in particular in case of fault responses. Without additional specific documentation two or more developers might take different implementation approaches to perform the same fault handling. The results are non streamlined and hard to read code redundancy differences in the procedure of fault handling in various parts of the integration solution and difficulties in keeping track of changes in the fault handling procedure. Further in an integration application fault handling requirements are often derived from the particular backend application rather than only the interface or the class and or type of system. The derivation is based on a system uptimes and or system downtimes which require buffering of service requests and retrying b availability of compensation services on backend internal or external system and c transactional capabilities or limitations of a system for example. Also in an integration application a fault in one system may have implications for the interaction with other systems. This is true for compensation logic or transaction management over multiple systems and logical association of systems to each other for example. A fault in system A can be remedied by an operation of system B whereas a fault in system A must be corrected by an administrator for example. Further developers need to clarify semantics of fault handling for many systems with the respective subject matter experts or have detailed conventional documentation. This is very time consuming in large appointment driven companies as well as being error prone. Since fault handling logic is part of the modeling and or development process and not a configuration task a change or modification in the fault handling logic requires a change to the process model too. Additionally dynamic binding of new versions of the fault handling logic is currently not supported without bringing down the mediation modules running in an ESB due to a lack of an abstraction language describing the fault handler interfaces.

Generation of fault handlers based on interface definition like Web Service Description Language Definitions WSDLs has long been available in development tools. Resulting fault handlers usually consist of a fault handling skeleton that needs further implementing or a relatively generic fault handling procedure based on the fault type.

In the Patent Publication U.S. Pat. No. 6 421 740 B1 DYNAMIC ERROR LOOKUP HANDLER HIERACHY by LeCroy a method for processing a first error message to produce a second error message in a component based architecture is disclosed. The component based architecture includes a framework which is associated with a first lookup handler and is capable of embedding a first component associated with a first executable unit for handling data of the first component. The method includes the step of generating a hierarchy of lookup handlers the hierarchy including the first lookup handler and a second lookup handler associated with the first executable unit when the first component comes into focus. Further the method includes the step of processing the first error message through the hierarchy of lookup handlers to generate the second error message. Through the hierarchy the first error message is first processed through the second lookup handler. If the second lookup handler is unable to process the first error message the first error message is then processed through the first lookup handler. In this manner the second error message is more specific to the first component than the first error message. Basically a method of transformation or resolution of error information based on less specific error information is disclosed. The method does this by dynamically installing and or embedding and or uninstalling handlers in an application.

Basically this patent publication describes a transformation or resolution of error information based on less specific error information. The publication does this by dynamically installing embedding uninstalling handlers in an application. However the publication does not describe a method to apply error handling based on the error information. Furthermore the publication does not use rules or policies to determine a course of action for a given error situation. It also lacks an abstraction layer in support for dynamic binding of either new error handlers or new versions of existing error handlers.

The technical problem underlying the present invention is to provide a method for fault handling in a distributed information technology IT environment which are able to solve the above mentioned shortcomings and pain points of prior art fault handling in distributed IT environments.

According to the present invention this problem is solved by providing a method for fault handling in a distributed IT environment having the features of claim an arrangement for fault handling in a distributed IT environment having the features of claim a data processing program having the features of claim and a computer program product having the features of claim . Advantageous embodiments of the present invention are mentioned in the sub claims.

Accordingly in an embodiment of the present invention a method for fault handling in a distributed IT environment executing at least one workflow application interacting with at least one application by using interface information about the at least one application comprises storing at least one fault handling description in an implementation independent meta language associated with the at least one application associating the interface information about the at least one application with the at least one fault handling description based on at least one defined fault handling policy which is created based on at least one service definition. The workflow application performs the following processes if a fault response from the at least one application is received retrieving at least one associated fault handling description based on at least one fault handling policy and interpreting and executing a particular meta language code of the at least one associated fault handling description in order to continue the defined workflow application.

In further embodiments of the present invention a fault handler for interpreting and executing a particular execution language of the corresponding fault handling description is implemented in the workflow application based on at least one service definition and at least one fault handling policy which is based on the loaded service definition.

In further embodiments of the present invention the at least one fault handling policy references n fault handling descriptions and the at least one associated fault handling description is referenced by m fault handling policies wherein n and m are natural numbers including zero.

In further embodiments of the present invention changes or modifications during lifetime of the at least one fault handling description and or the step of associating the interface information about the at least one application with the at least one fault handling description are done parallel to the workflow application and or the application without interrupting the running workflow application and or the running application.

In further embodiments of the present invention the at least one fault handling policy is centrally defined and maintained for single service operations and or entire services and or a class or type of same or similar enterprise information systems and or for a particular enterprise information service.

In further embodiments of the present invention a fault handling description language is defined capable of describing common fault handling requirements of an enterprise application environment in a platform independent form.

In further embodiments of the present invention the defined fault handling description language comprises at least one fault handling procedure and or at least one fault handling action and or at least one fault handling condition.

In further embodiments of the present invention the at least one fault handling procedure forms a flow construct and contains an ordered list of fault handling actions or other nested procedures where parallel fault handling activities are specified by embedding fault handling procedures into fault handling procedures.

In further embodiments of the present invention the at least one fault handling condition is based on process variables calendars or priority depending on capabilities of underlying rule language fault handling procedures and fault handling actions.

In the present disclosure a workflow application is a workflow capability which can reside within an application or external to the application in a dedicated workflow application where known examples for the latter are enterprise business process platforms such as WebSphere Process Server etc.

All in all embodiments of the present invention address the generation of fault handling logic in the context of the service of a particular system. The embodiments describe a method to generate a fault handler and a fault handling logic based on a central error processing definitions repository.

The core idea of the present invention is to use fault handling rules or policies to determine a course of action for a given error situation. Embodiments of the present invention are focused on fault handling in the business application integration field. Therefor embodiments of the present invention use 1 a generic fault handling description Meta language 2 an externalized storage in a repository of a fault handling Meta model described in the fault handling Meta language and 3 fault handling policies which are attached to service interfaces in a service registry in order to associate service operations with application specific and or system specific fault handling descriptions. Therefore syntactical service interfaces are associated with particular fault handling Meta models in the repository based on a combination of attributes. Further embodiments of the present invention use policy based resolution and retrieval of pre modeled business application specific fault handling description logic and polymorphism of fault handling logic at runtime through dynamic on demand loading and interpretation of the fault handling descriptions described in the meta language.

Embodiments of the present invention dynamically load fault handling descriptions into the workflow instance and allow polymorphism of fault handling logic through on demand loading and interpreting of a fault handling Meta language at workflow runtime. Further the usage of the fault handling policies which are stored along with the interface information in the service registry allow fine graining of the configurative association of service operations with particular fault handling procedures on a per system or per group of systems and or applications basis for example. Also embodiments of the present invention allow interpretation of dynamically retrieved fault handling description by interpreter code inside the workflow instance and do not interfere with the native scoped fault handling architecture of a workflow platform as they focus only on the fault handling logic for the particular fault and do not manage fault scopes.

One of the key benefits of the present invention are fault handling policies which can be centrally defined and maintained for different scopes like single service operations or entire services a class and or type of same and or similar enterprise information systems or a particular enterprise information system. A developer of integration application does not need the subject matter know how for the implementation of the fault handling procedure and all developers use the same fault handling strategy as defined by the applicable policy in their integration applications avoiding redundancy and hard to read code. Further a change or correction that is applied to a fault handling procedure and stored in the fault handling descriptions catalog can be dynamically picked up by all process instances. Due to the externalization of fault handling logic there is no need to recompile and redeploy applications to implement a fault handling change and dynamic fault handling description resolution at runtime allows for polymorphism of fault handling logic. Further the fault handling logic is changeable even for running process instances due to dynamic interpretation at runtime.

The above as well as additional purposes features and advantages of the present invention will become apparent in the following detailed written description.

Referring to the shown embodiment of the present invention employs an arrangement for fault handling in a distributed IT environment . The distributed IT environment comprises an integrated development environment IDE for developing at least one workflow application a repository comprising an enterprise systems registry and a fault handling descriptions catalogue a workflow runtime environment for executing at least one workflow application interacting with the at least one application by using interface information about the at least one application stored in the enterprise systems registry .

Referring to a developer is loading at least one service definition in the enterprise systems registry . Based on the at least one loaded service definition at least one fault handling policy is defined and loaded in the enterprise systems registry . Additional at least one fault handling description which is written in an implementation independent meta language by the developer using a fault handling description editor for example is stored in the fault handling descriptions catalogue . The at least one fault handling policy is logically linked to at least one fault handling description . So one fault handling policy references to 0 to n fault handling descriptions and one fault handling description may be referenced by 0 to m fault handling policies . Due to the n m linking between the at least one defined fault handling policy and the at least one fault handling description the interface information about the at least one application is associated with the at least one fault handling description based on at least one defined fault handling policy which is created based on at least one service definition and stored in said enterprise systems registry . Embodiments of the present invention allow the developer to query fault handling policy based on service interface information and to apply an associated fault handling description for a given service invocation.

Still referring to the developer imports the service definition from the enterprise systems registry into the integrated development environment . The integrated development environment uses a fault handling policy lookup component to look up a fault handling policy based on the service definition including particular system information e.g. endpoint type of system etc. . Further the integrated development environment uses a fault handling logic generator to generate a fault handler for a dynamic fault handling execution at runtime for a particular execution language of the corresponding fault handling description based on at least one imported service definition and at least one fault handling policy which is based on the imported service definition . The integrated development environment implements the generated fault handler in the workflow application for interpreting and executing a particular execution language of the corresponding fault handling description . When the workflow application is deployed to the workflow runtime environment and the fault handler is triggered it dynamically looks up the fault handling description which is based on the fault handling policy and interprets the fault handling description .

Embodiments of the present invention allow self adaptive determination of a fault handling strategy for a service invocation based on the fault handling policy and self adaptive selection of an externally defined fault handling logic described in the fault handling description Meta language based on previously determined fault handling logic.

Referring to the workflow runtime environment retrieves at least one associated fault handling description from the fault handling descriptions catalogue based on at least one fault handling policy and interprets and executes a particular meta language code of the at least one associated fault handling description in order to continue the defined workflow application if a fault response from the at least one application is received. Thus the workflow runtime environment performs a dynamic loading and interpretation of a fault handling description metadata information during process execution by the generated fault handling implementation. It is important to understand that this allows the use of new published versions of existing error and or fault handlers or entirely new error and or fault handlers without requiring an adjustment and re deployment of the application or the workflow application .

Referring to the workflow runtime environment starts a workflow instance of the workflow application in step S. In step S a request is sent to the application . In step S a first fault reply FR is received from the application which triggers the fault handler . In step S the fault handler performs a lookup of a corresponding first fault handling policy HP which is stored as fault handling policy in the repository and points to a first fault handling description HD. Based on the first fault handling policy HP the first fault handling description HD is loaded to the fault handler in step S. The fault handler interprets and executes the particular Meta language code of the first fault handling description HD in order to continue the defined workflow application . In continuation of the workflow application a further request is sent to the application in step S . In step S a second fault reply FR is received from the application which again triggers the fault handler . In step S the fault handler performs a lookup of a corresponding first fault handling policy HP which is stored as fault handling policy in the repository . Since a policy change was performed between the steps S and S of the workflow application a new first fault handling policy HP which is stored as fault handling policy in the repository is now pointing to a second fault handling description HD. Based on the new first fault handling policy HP the second fault handling description HD is loaded to the fault handler in step S . The fault handler interprets and executes the particular Meta language code of the second fault handling description HD in order to continue the defined workflow application . In step S the present workflow instance is ended. Over the lifetime of the workflow application or the application the fault handlers might change since a new version of an existing fault handling description or an entirely new set of fault handling descriptions might be available and dynamically bound without interrupting the running application or the running workflow instance of the workflow application .

Embodiments of the present invention may use WebSphere Integration Developer as an example for the integrated process development environment and WebSphere Services Registry and Repository WSRR as an Enterprise Systems Registry and as a fault handling description catalog .

The integrated development environment WebSphere Integration Developer WID is a development tool that allows the modeling implementation and deployment of BPEL processes for the WebSphere Process Server BPEL runtime environment. The WebSphere Integration Developer itself is built on top of an Eclipse framework which is an open framework with a strong plugin concept. The plugin concept enables developing of on top functionality for any software that uses Eclipse framework as a basis. By this mechanism an integration of the WebSphere Integration Developer with an enterprise systems registry can be developed.

The WebSphere Services Registry and Repository can store artifacts such like WSDL files XSDs WS Policy documents or any other XML file. It also supports storing service component development language SCDL and BPEL documents. The WebSphere Services Registry and Repository also allows storing of additional metadata for above artifacts using the classification system or properties like user defined key value pairs. The WebSphere Services Registry and Repository can be interacted with all stages of a SOA lifecycle. It can be used during design and development as well as by runtime applications. The WebSphere Services Registry and Repository provides both Java and Web services interface for searching updating creating and deleting service description and associated metadata. Based on these capabilities it is shown by the following example how an enterprise systems registry and a fault handling descriptions catalog might be realized.

Embodiments of the present invention assume that fault handling policies are maintained in a policy registry e.g. together with the service definitions . Fault handling policies could be realized in the form of properties that are attached to a service interface. For example the WebSphere Services Registry Repository WSRR allows attaching of arbitrary properties to WSDL service interfaces and offers a graphical user interface and APIs to create and maintain these properties.

Furthermore embodiments of the present invention assume that fault handling logic is described in an adequate format and made available in a fault handling description store repository. Whilst the fault handling description itself is not part of this disclosure the following explanations of a possible solution outline an exemplary approach to define a fault handling description Meta language shown in .

A possible solution implementation could leverage the Eclipse plug in concept to add additional functionality to the integrated development environment WebSphere Integration Developer WID . Furthermore in this solution the WebSphere Service Registry Repository WSRR serves as a service registry for service definitions fault handling policy store and fault handling description repository. The WebSphere Services Registry and Repository disposes of a query API that leverages XPath to retrieve stored properties etc.

When the process developer models a service invocation and creates a fault handler the plugin could send an API query to the WebSphere Services Registry and Repository requesting the fault handling policies for the given service. The policy information would serve to parameterize any platform specific fault handling processing code which would then load and execute the actual fault handling description accordingly.

Referring to a fault handling description language is defined which is capable of describing common fault handling requirements of business process execution engines in a platform independent format. For a sample implementation an entity based fault handling description language is defined which allows the description of fault handling procedures fault handling actions and associated fault handling conditions . The fault handling procedure is the root element of the exemplary fault handling description language . The fault handling procedure forms a flow construct that can contain an ordered list of fault handling actions as well as other nested procedures. By embedding procedures into procedures parallel fault handling activities can be specified. The fault handling action is nested into a fault handling procedure and forms a single step in the fault handling logic such as termination . compensation . logging . repetition of an action . human intervention . etc. Each fault handling action has its fixed position inside a fault handling procedures meaning that the action executes before or after other actions for sequential execution . One or more fault handling conditions can be attached to both fault handling procedures and fault handling actions . Depending on the capabilities of the underlying rule language fault handling procedures and fault handling actions can be executed conditionally based on process variables calendars priority etc.

The fault handling description Meta language could easily be extended by other entities and semantics as long as the according extended fault handling interpretation logic is provided along with the extended language.

The generation of the fault handling logic for the target platform here BPEL for the execution on WebSphere Process Server is the process of adapting the fault handling description meta information which is stored in the fault handling descriptions catalog to the particular target runtime platform here WebSphere Process Server . In practice this will mostly be the injection of static code that forms a complete parsing engine for all available entities in the fault handling description language .

In order to allow polymorphism of fault handling logic at runtime the outcome of the generator is executable and or interpretable code in the target platform language e.g. BPEL that in turn dynamically loads the fault handling description meta information based on the previously looked up fault handling policies interprets this fault handling description and executes the fault handling accordingly. This allows for the fault handling logic to change without the need of modifying redeploying or even restarting the deployed application. The fault handling description language forms the foundation for both the description and the interpretation logic.

Referring to in step S at least one fault handling description in an implementation independent Meta language associated with the at least one application is stored in enterprise systems registry . In step S at least one service definition is stored in the enterprise systems registry . In step S at least one fault handling policy is created based on the at least one service definition and stored in the enterprise systems registry . In step S the interface information about the at least one application is associated with the at least one fault handling description based on at least one defined fault handling policy . In step S the service definition is loaded to the integrated development environment IDE . Based on the loaded service definition a corresponding fault handling policy is looked up and loaded to the integrated development environment in step S. In step S a fault handler is generated for a dynamic fault handling execution at runtime for a particular execution language of the corresponding fault handling description . The fault handler is generated based on information of the loaded fault handling policy and the generated fault handler is implemented in the workflow application .

Referring to in step S a workflow instance of the workflow application is started. In Query S a check is made whether the fault handler is triggered or not. If the fault handler is not triggered the workflow instance of the workflow application is continued in step S. If the fault handler is triggered a fault handling policy is looked up in step S. Based on the looked up fault handling policy at least one associated fault handling description is retrieved in step S. In step S the Meta language code of the at least one fault handling description is interpreted and executed. In step S the workflow instance of the workflow application is continued. During the executing the workflow instance the query S may be repeated. The workflow instance of the workflow application may be finished in step S.

The inventive method for fault handling in a distributed IT environment can be implemented as an embodiment containing both hardware and software elements. In a preferred embodiment the present invention is implemented using software executing on a hardware processing device and the software includes but is not limited to firmware resident software microcode etc.

Furthermore the present invention can take the form of a computer program product accessible from a computer usable or computer readable medium device providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium device can be any apparatus that can contain store or communicate the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor storage medium system or apparatus or device or a propagation medium. Examples of a computer readable storage medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

