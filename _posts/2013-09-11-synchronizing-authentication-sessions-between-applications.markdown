---

title: Synchronizing authentication sessions between applications
abstract: Disclosed are various embodiments for synchronizing authentication sessions between applications. In one embodiment, a first authentication token is received from a first application in response to determining that the first application is authenticated with a service provider. A second authentication token is requested from a token exchange service associated with the service provider. The second authentication token is requested using the first authentication token. The second application is configured to use the second authentication token in order to access a resource of the service provider.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09106642&OS=09106642&RS=09106642
owner: Amazon Technologies, Inc.
number: 09106642
owner_city: Seattle
owner_country: US
publication_date: 20130911
---
When a user signs onto an account with a network site using a browser a session is created. Typically the user provides a username and a password to the network site though other security credentials may be provided. Upon verification of the provided security credentials and creation of the session one or more authentication tokens may be provided to the web browser to maintain the session state. Upon subsequent requests from the network site the browser is configured to provide the authentication tokens via a cookie form variables or another approach. The authentication tokens may be valid until the user explicitly ends the session by logging out or until the expiration of a predefined period of time e.g. 30 minutes an hour a day or another time period .

In contrast to browser based sessions mobile applications and other dedicated applications may employ a registration approach. With a registration approach after a user provides the username and password or other credentials the application becomes registered with a network service. As with browser sessions an authentication token may be created and supplied to the application by the network service. The application then is configured to automatically provide the authentication token in service calls to that service. Though the user may choose to explicitly deregister the application registration otherwise may persist indefinitely.

The present disclosure relates to synchronizing authentication sessions between applications. Applications such as mobile applications can be classified as native applications browser based applications or hybrid applications that blend the two. Native applications are dedicated applications that typically use a registration approach to authenticate with a network service. Browser based applications employ a web based interface for interacting with a network site. To this end browser based applications may include a container for launching a private instance of a browser to render the web based interface. Browser based applications typically use a short lived session approach to authenticate with network sites. Hybrid applications may include native application code alongside a private browser for a web based interface portion. The native portion may employ a registration approach while the browser portion may employ a short lived session approach.

Because hybrid applications may employ multiple authentication approaches hybrid applications may require multiple sign ons from users even for network sites and services associated with a single user account. For example a user may launch a hybrid application that requires the user to provide a username and password to register the application and access some functionality. However when the user seeks to access other functionality that is browser based the user may be prompted to provide the username and password again to create a browser session with the network site notwithstanding the earlier registration that may remain valid.

Various embodiments of the present disclosure facilitate a single sign on and a single sign out experience for applications using different approaches to authentication in a computing device. With the example of a hybrid application a sign on in the native portion may be used to bootstrap authentication in the browser portion via a token exchange approach. Similarly a sign on in the browser portion may be used to bootstrap authentication in the native portion via the token exchange approach. The authentication sessions may be synchronized on the client side such that expiration or log out via one of the sessions causes the other session to expire.

With reference to shown is an example scenario involving synchronized authentication sessions according to an embodiment of the present disclosure. In the example scenario a client computing device first renders a user interface generated by a native portion of a hybrid application named Buzzy Funnies. The user interface includes a sign in portion that allows the user to enter various security credentials in order to register the application with a network service. In particular the user interface requests a username and a password from the user. In this example the user has provided the username of joe1234 and a password. The user can then select a sign in button or another component in order to transmit the security credentials to an authentication service. The authentication service authenticates the client computing device and returns an authentication token. The Buzzy Funnies application is subsequently configured to present the authentication token to the network service in order to access secured resources or perform secured operations.

Because the Buzzy Funnies application is a hybrid application Buzzy Funnies includes a portion that corresponds to a web application. For example some functionality or content in the Buzzy Funnies application corresponds to network page content rendered in a browser. The example scenario includes a subsequent user interface that has a browser rendered portion that shows some web content. According to an embodiment of the present disclosure rather than seeing another sign in screen in the browser rendered portion the authenticated user is greeted with Welcome Joe In this example the user corresponding to joe1234 is already authenticated within the browser via an exchanged authentication token as will be described. Although the example of a hybrid application has been discussed it is understood the principles of the present disclosure may be applied to multiple distinct applications in a computing device to facilitate a single sign on experience among the applications. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

Turning now to shown is a networked environment according to various embodiments. The networked environment includes a computing environment in data communication with one or more client computing devices via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a hosted computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example includes an authentication service a token exchange service a token validation service a network page server a network service and other applications services processes systems engines or functionality not discussed in detail herein. The authentication service is executed to authenticate users in response to authentication requests. For example a user may submit security credentials via a registration screen in a mobile application or via a sign on network page. The authentication service determines whether the security credentials validly correspond to a user account. If the security credentials are valid the authentication service issues an authentication token that may be employed to access secured resources and or perform secured operations relative to services provided by a service provider. The authentication token may include information on who generated the token an encrypted customer identifier a level of permissions and or other data.

The token exchange service is executed to exchange one type of authentication token for another type of authentication token . For example one type of authentication token may pertain to browser based sessions while another type of authentication token may pertain to registration sessions. An authentication token used in a browser based session may have a relatively short lifetime e.g. 30 minutes an hour a day etc. while an authentication token used in a registration session may have an indefinite lifetime e.g. until explicitly revoked by the user or the service provider . In addition the capabilities or levels of permissions associated with the different types of authentication tokens may differ. As a non limiting example an authentication token associated with a web application might grant permissions to perform only certain operations associated with the user account which might exclude changing an account password. By contrast an authentication token associated with a native application may be able to perform all operations including changing an account password. The different types of authentication tokens may employ different formats and encompass different data in various embodiments.

The token validation service may be executed to determine whether a particular authentication token is valid. For example the token validation service may perform decryption signature verification and or other operations to ensure that the authentication token is valid. Further where an authentication token has an expiration time or can be revoked the token validation service may perform a verification that the authentication token has not yet expired or has not yet been revoked.

The network page server is executed to serve network pages such as web pages and or other forms of network content to client computing devices via the network . The network page server may include a commercially available hypertext transfer protocol HTTP server such as Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and so on. Some of the network pages may be publicly accessible while others of the network pages may be secured such that authentication of a client computing device is a prerequisite for access.

The network service corresponds to a web service or other service that receives requests and produces responses according to a service oriented architecture. The network service may utilize HTTP simple object access protocol SOAP representational state transfer REST remote procedure call RPC remote method invocation RMI web services description language WSDL and or other protocols and approaches. For example a network service may provide content for rendering within a screen of a mobile application or other dedicated application in the client computing device .

The network service and the network page server may be operated by the same service provider or a different service provider. In either case both the network service and the network page server employ a shared user identity system such that a user may log in with the same user account via the network page server or the network service . The authentication service the token exchange service and the token validation service may be operated by the same service provider as the network page server and or the network service . Alternatively the authentication service the token exchange service and the token validation service may be operated by a third party identity provider.

The data stored in the data store includes for example user account data secured resources and potentially other data. The user account data includes various data relating to user accounts. Such data may include security credentials e.g. usernames passwords hashes of usernames and or passwords public keys private keys etc. information relating to active or expired authentication sessions access restrictions and or permissions for the user account maximum lifetime of sessions associated with the user account and or other account information. The secured resources comprise static content dynamic content and or operations that are network accessible to authenticated client computing devices via the network page server and or the network service .

The client computing device is representative of a plurality of client computing devices that may be coupled to the network . The client computing device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client computing device may include a display . The display may comprise for example one or more devices such as liquid crystal display LCD displays gas plasma based flat panel displays organic light emitting diode OLED displays electrophoretic ink E Ink displays LCD projectors or other types of display devices etc.

The client computing device may be configured to execute various applications such as native applications web applications and hybrid applications . These applications may include social networking applications email applications mapping applications contact manager applications imaging applications electronic book reader applications music player applications video player applications and or other types of applications. The native applications are written in a native format for the platform of the client computing device such that the native applications render a native user interface UI upon the display . The native applications may be associated with authentication tokens that facilitate access to secured resources of the network page server and or the network service . In one embodiment the authentication tokens are registration tokens that may have an indefinite lifetime.

The web applications are containers for web based functionality with a user interface rendered on the display by a private instance of a browser . Such user interfaces may correspond to network pages that are customized for rendering on a mobile device or other platform specific to the client computing device . The containers employed for the web applications may be standardized such that the primary functionality is merely to launch the private instance of the browser to access a predetermined uniform resource locator URL . A web application may be associated with one or more authentication tokens that facilitate access by the browser to secured resources of the network page server and or the network service . In one embodiment the authentication tokens may correspond to cookies stored in a cookie jar of the web application .

A hybrid application mixes the functionality of a native application with a web application . To this end the native container of the hybrid application may include some customized functionality as with a native application . However a hybrid application also includes a web application to provide at least some web based functionality. Thus a hybrid application may be associated with registration authentication tokens for use by the native container as well as browser session authentication tokens for use by the private instance of the browser .

The authentication management library corresponds to the client side code that implements synchronization of authentication sessions across applications. To this end the authentication management library may employ a standalone service in communication with various applications executed in the client computing device . Alternatively or additionally at least a portion of the authentication management library may be included within or linked to various applications executed in the client computing device . The operation of the authentication management library may be configured based at least in part on parameters stored within an authentication management configuration . For example the authentication management configuration may enumerate which applications are permitted or not permitted to participate in synchronized authentication sessions. Additionally an operating system may be executed in the client computing device .

Next a general description of the operation of the various components of the networked environment is provided. To begin a user installs and or configures a plurality of applications in the client computing device which employ the authentication management library . For purposes of discussion herein a hybrid application may be considered to be a plurality of applications namely the native container of the hybrid application and the web application as both may employ different authentication tokens . The user establishes or has previously established an account with a service provider thereby resulting in the creation of security credentials for the account.

At some point the user enters the security credentials into a user interface of an application. This may correspond to a registration process for a native application or a hybrid application or a sign in process for a web application . Accordingly the security credentials are provided to the authentication service which generates and returns an authentication token . In some cases the authentication token is returned via the network page server or the network service .

Subsequently the user employs another application or a web application within a hybrid application and the other application encounters a secured resource for which authentication is a prerequisite. Both of these applications employ the authentication management library . The authentication management library is configured to request a new authentication token for the other application using the previous authentication token of the first application. Consequently the other application becomes authenticated and can access secured resources of the network page server and or the network service without having to prompt the user to enter the security credentials. The authentication management library may be configured to synchronize these authentication sessions to provide a single log out experience as well as to refresh authentication tokens that expire while another authentication token remains valid.

In order to facilitate sign on detection log out detection token expiration token exchange and or other communication between applications various techniques involving application signature validation and or secure keys signed by a trusted source may be employed. On an untrusted platform verifying the source of an application may be important to avoid communicating authentication tokens to untrusted applications. Various approaches to secure communication between applications are described in U.S. Patent Application entitled SECURE COMMUNICATION BETWEEN APPLICATIONS ON UNTRUSTED PLATFORMS filed Sep. 11 2013 under Ser. No. 14 023 663 which is incorporated herein by reference in its entirety.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the authentication management library according to various embodiments. Specifically the flowchart of pertains to a bootstrapping procedure where a valid token for one application is used to obtain a valid token for another application thereby implementing a single sign on for the applications. The applications may be implemented in one or more client computing devices . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the authentication management library as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in at least one client computing device according to one or more embodiments.

Beginning with box the authentication management library determines that a first application is to be authenticated for a service provider. For example a native application or a hybrid application may inform the authentication management library that a sign in user interface is to be presented to the user or otherwise that security credentials for a user account are to be requested from the user. In the case of a web application either standalone or embedded in a hybrid application a predetermined sign in uniform resource locator URL may be intercepted. Alternatively a network page obtained by the web application may be analyzed to determine whether it elicits security credentials from the user.

In box the authentication management library determines whether the first application permits a synchronized session. For example a hook in the authentication management library may be present to allow the first application to determine whether to synchronize authentication. In some cases the first application may desire not to synchronize authentication and instead prompt the user to supply security credentials. Such cases may be employed for example to ensure that the authenticated user still maintains control over the client computing device . If the first application does not permit a synchronized session the authentication management library continues to box .

If instead the first application does permit a synchronized session the authentication management library moves from box to box . In box the authentication management library determines whether a second application accessible to the authentication management library is authenticated for the same user account for which the first application is to be authenticated. If a second application is not authenticated the authentication management library proceeds to box .

If instead a second application accessible to the authentication management library is authenticated the authentication management library proceeds from box to box . In box the authentication management library receives a first authentication token from the second application. Where the second application is a web application the authentication management library may read the first authentication token from a cookie jar associated with the web application . Where the second application is a native application or a hybrid application the authentication management library may employ an application programming interface API call to retrieve the first authentication token . In some embodiments where applications are sandboxed a special service that facilitates secure inter process communication may be employed to retrieve and or exchange authentication tokens .

In box the authentication management library requests a second authentication token from a token exchange service via a network . The request may specify a desired format for the second authentication token where the desired format is usable by the first application. For example where the first application is a web application the desired format may be a browser based session format with a predetermined maximum lifetime. Where the first application is a native application or a hybrid application the desired format may be a registration session format with an indefinite maximum lifetime.

In box the authentication management library determines whether the requested second authentication token has been received from the token exchange service . For example the request may fail due to an invalid token lack of permissions revoked access and or other reasons. If the second authentication token is not received the authentication management library proceeds to box .

If instead the second authentication token is received the authentication management library transitions from box to box . In box the authentication management library configures the first application to use the second authentication token to access resources of the network service and or the network page server . For example the authentication management library may store a cookie containing the second authentication token in a cookie jar of a web application . In one embodiment the cookie may be generated by the authentication management library . In another example the authentication management library may provide the second authentication token to a native application and or a hybrid application via an API call.

The authentication management library may cause the application to proceed with accessing a secured resource for which authentication is a prerequisite. In one embodiment where a sign on URL is intercepted the authentication management library may configure a web application to proceed automatically to a destination URL of the sign on URL e.g. a URL that is to be accessed after the user has been authenticated. Thus the sign on URL may be entirely bypassed. Thereafter the portion of the authentication management library ends.

In box synchronized sessions are not currently available so the authentication management library configures the first application to elicit security credentials from the user for authentication. For example the first application may be permitted to render a sign on user interface that elicits a username a password and or other security credentials from the user. Thereafter the portion of the authentication management library ends. An authentication token may subsequently be received from an authentication service and may be used in synchronizing sessions of other applications executed in the client computing device in some cases.

Moving on to shown is a flowchart that provides one example of the operation of another portion of the authentication management library according to various embodiments. In particular the flowchart of pertains to a log out procedure whereby multiple applications are logged out via a single log out request. The applications may be implemented in one or more client computing devices . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the other portion of the authentication management library as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in at least one client computing device according to one or more embodiments.

Beginning with box the authentication management library receives a log out indication from a user in association with a synchronized authentication session. For example the authentication management library may detect that a user has selected a log out component in a user interface rendered by a native application or a hybrid application . In the case of a web application the authentication management library may intercept an access by a browser of a predetermined uniform resource locator URL that is associated with a log out operation.

In box the authentication management library determines an application that is associated with the synchronized authentication session. In box the authentication management library performs one or more actions to invalidate the authentication token corresponding to the application. For example the authentication management library may communicate the authentication token to the token validation service in a request that the authentication token be invalidated or revoked. The authentication management library may remove the authentication token from a cookie jar of the application and or may send an invalidation indication to the application via an application programming interface API call. In one embodiment the application may be configured to send a log out request or token invalidation request to the token validation service in response to receiving a message from the authentication management library .

In box the authentication management library determines whether another application is participating in the synchronized application session. If another application is participating the authentication management library returns to box and determines the other application. If another application is not participating the portion of the authentication management library ends.

Continuing to shown is a flowchart that provides one example of the operation of yet another portion of the authentication management library according to various embodiments. Specifically the flowchart of pertains to a token refresh procedure used to refresh tokens that are expiring. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the other portion of the authentication management library as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in at least one client computing device according to one or more embodiments.

Beginning with box the authentication management library determines that an authentication token in use by an application is expiring or has been revoked. In one example the authentication management library may detect that a web application has been redirected to a sign in uniform resource locator URL . In another example the authentication management library may detect that a native application has received an expired token error or invalid token error in response to a service call. In box the authentication management library determines participating applications in the client computing device that have a valid authentication token for the particular synchronized authentication session.

In box the authentication management library determines whether another application has a valid authentication token . If another application does not have such a valid authentication token the authentication management library continues to box . In box the authentication management library configures the application having the expired or revoked authentication token to elicit security credentials from the user for authentication. Thereafter the portion of the authentication management library ends.

If another application does have a valid authentication token the authentication management library continues from box to box . In box the authentication management library obtains the valid authentication token from the other application. In box the authentication management library receives a new authentication token by providing the valid authentication token to the token exchange service . In box the authentication management library configures the application to use the new authentication token in place of the expired or revoked authentication token . It is noted that in some cases the application may choose to elicit security credentials from the user rather than to refresh an expired or revoked authentication token via an automated process. Thereafter the portion of the authentication management library ends.

Turning now to shown is a flowchart that provides one example of the operation of a portion of the token exchange service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the token exchange service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the token exchange service receives a first authentication token in a token exchange request from a client computing device via the network . The token exchange request may specify a desired format for a requested authentication token . In one example the provided authentication token is in a registration session token format while the requested authentication token is in a browser based session token format. In some scenarios the token exchange request may specify a particular level of permissions to be associated with the requested authentication token . For example it may be desired to request fewer permissions for an authentication token associated with a web application as compared to a native application .

In box the token exchange service performs a validation on the first authentication token . For example the token exchange service may call the token validation service to validate the first authentication token . In various embodiments the first authentication token may be decrypted and or a signature of the first authentication token may be verified. The first authentication token may be examined to ensure that it corresponds to a correct customer identifier which may be encrypted within the token and or has not expired or been revoked. In embodiments where identity federation is employed the token validation service may be operated by a different organization that is trusted by the organization that issues the authentication tokens vended by the token exchange service . In box the token exchange service determines whether the first authentication token is valid. If the first authentication token is determined not to be valid the token exchange service returns an error in box . Thereafter the portion of the token exchange service ends.

If instead the first authentication token is valid the token exchange service continues from box to box . In box the token exchange service generates a second authentication token . For example the second authentication token may be generated in a format requested in the token exchange request. In some embodiments the token exchange service may obtain the second authentication token from a trusted service operated by another organization that issues the second authentication token . In box the token exchange service sends the second authentication token to the client computing device via the network . Thereafter the portion of the token exchange service ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the authentication service the token exchange service the token validation service the network page server the network service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the client computing device according to an embodiment of the present disclosure. The client computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. A display may also be coupled to the local interface .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor may be the native applications the web applications the hybrid applications the authentication management library and potentially other applications. Also stored in the memory may be an authentication management configuration and other data. In addition an operating system may be stored in the memory and executable by the processor .

Referring now to both it is understood that there may be other applications that are stored in the memories and are executable by the respective processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memories and are executable by the respective processors . In this respect the term executable means a program file that is in a form that can ultimately be run by the processors . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memories and run by the processors source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memories and executed by the processors or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memories to be executed by the processors etc. An executable program may be stored in any portion or component of the memories including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memories are defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memories may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processors may each represent multiple processors and or multiple processor cores and the memories may each represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interfaces may be appropriate networks that facilitate communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interfaces may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processors may be of electrical or of some other available construction.

Although the authentication service the token exchange service the token validation service the network page server the network service the native applications the web applications the hybrid applications the authentication management library and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the authentication management library and the token exchange service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of depict a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the authentication service the token exchange service the token validation service the network page server the network service the native applications the web applications the hybrid applications and the authentication management library that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

