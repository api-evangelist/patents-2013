---

title: Labeling context slices to produce a storyline from mobile device data
abstract: Embodiments create and label context slices from observation data that together define a storyline of a user's movements. A context is a (possibly partial) specification of what a user was doing in the dimensions of time, place, and activity. Contexts can vary in their specificity, their semantic content, and their likelihood. A storyline is composed of a time-ordered sequence of contexts that partition a given span of time. A storyline is created through a process of data collection, slicing and labeling. Raw context data can be collected from a variety of observation sources with various error characteristics. Slicing refines the chaotic collection of contexts produced by data collection into a single consistent storyline composed of a sequence of contexts representing homogeneous time intervals. Labeling adds more specific and semantically meaningful data (e.g., geography, venue, activity) to the storyline produced by slicing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08838436&OS=08838436&RS=08838436
owner: Aro, Inc.
number: 08838436
owner_city: Seattle
owner_country: US
publication_date: 20130724
---
This application claims the benefit of U.S. Provisional Application No. 61 675 732 filed Jul. 25 2012 entitled Creating a Storyline from Mobile Device Data and U.S. Provisional Application No. 61 675 733 filed Jul. 25 2012 entitled Recommendation Agents Using Routine Personality Learning and Sharing both of which are incorporated herein by reference in their entirety.

The described embodiments pertain to interpreting location data and other data about a person collected from mobile devices and internetworked services.

Many mobile devices now have the capability of recording location and other information. Having a complete record of when and where the user goes is useful for a variety of applications including recommendation systems lifelogging and goal tracking. However there are a number of obstacles to building useful applications on top of the kinds of data streams currently available.

First these data streams are noisy imprecise and sometimes unavailable. Global Positioning System GPS technology for example can be confused by surrounding buildings or other features and is not available indoors. Cell tower triangulation is imprecise while also unavailable where there are no cell towers. WiFi triangulation is error prone and also unavailable in the absence of nearby WiFi networks.

Second sensor readings such as taking satellite or radio readings can cause a significant drain on the device s battery so they must be done sparingly. Naturally this increases the uncertainty in the data with large gaps from one reading to the next.

Third location data in the form of latitude longitude readings has no semantic content and is useless for many applications. Because of the noisy nature of the data translating lat long into addresses or named locations is difficult especially in the dense urban areas where most users live.

Embodiments of the invention include a method a non transitory computer readable storage medium and a system for creating context slices that together define a storyline. A context is a possibly partial specification of what a user was doing in the dimensions of time place and activity. Each of these dimensions may be defined specifically e.g. location defined by latitude 47.60621 longitude 122.332071 or very generally e.g. the location Seattle Wash. or entirely unspecified e.g. omitted or a default value . They may also be ascribed varying degrees of semantic meaning e.g. Seattle contains more semantic information than 47.60621 122.332071 . A context can represent a stay in a certain location or travel from one place to another. Contexts may have probabilities associated with them. In some cases contexts may be inferred from evidence rather than known with certainty. Thus contexts can vary in their specificity their semantic content and their likelihood. A storyline is composed of a time ordered sequence of contexts that partition a given span of time. Thus a storyline is a single internally consistent accounting for what a user was doing at moments in time and where the user was doing it. In one embodiment a storyline is created through a process of data collection slicing and labeling.

Data collection is performed by context collectors collecting raw context data. Raw context data can be obtained from a variety of observation sources sensors monitors third party sources and the like.

Slicing is the process of refining the chaotic multi threaded collection of contexts produced by data collection into a single consistent storyline composed of a sequence of contexts representing homogeneous time intervals. A context refiner module groups the context data by combining the observations to create a coherent representation of a user s context and may attach semantic content to groups or sequences of context data to form storylines. In one embodiment the slicing process is generally divided into three phases preprocessing segmentation and reconciliation. Preprocessing involves filtering smoothing and interpolating data to reduce the effects of noise and uneven sampling rates during data collection. Segmentation involves determining distinct contiguous series of contexts from the groomed sensor data representing different activities. Reconciliation resolves newly generated context slices with previously generated context slices.

Labeling is the process of adding more specific and semantically meaningful data to the storyline produced by slicing. Labeling may add geography such as the context s city or neighborhood venue public places businesses or personally significant places like home and or activity such as working eating or going to see a movie . In one embodiment the labeling process is generally divided into three phases label candidate search label candidate ranking and label application. In label candidate search label sources are queried to discover possible labels based on the slice context. In label candidate ranking the likelihood of each label candidate is evaluated based on the slice context and ranked according to likelihood. In label application labels deemed sufficiently likely can be applied to label the slices.

In one embodiment after the data collection slicing and labeling process has created a storyline the storyline is stored. The storyline may be presented to the user or accessed for further processing by various mobile applications or web applications for example.

Embodiments of the computer readable storage medium store computer executable instructions for performing the steps described above. Embodiments of the system further comprise a processor for executing the computer executable instructions.

The features and advantages described in the specification are not all inclusive and in particular many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter.

The figures depict embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Embodiments of the invention enable the creation and labeling of context slices from observation data that together define a storyline of a user s movements. A context is a possibly partial specification of what a user was doing in the dimensions of time place and activity. Contexts can vary in their specificity their semantic content and their likelihood. A storyline is composed of a time ordered sequence of contexts that partition a given span of time. A storyline is created through a process of data collection slicing and labeling. Raw context data can be collected from a variety of observation sources with various error characteristics. Slicing refines the chaotic collection of contexts produced by data collection into a single consistent storyline composed of a sequence of contexts representing homogeneous time intervals. Labeling adds more specific and semantically meaningful data e.g. geography venue activity to the storyline produced by slicing. Accordingly the storyline data is then available to offer a historical perspective to the user or for further processing in other applications.

One use of storyline data is to offer a historical perspective to the user who may peruse the storyline to view his her previous activities. Another use of storyline data is for further processing into interesting aggregations e.g. showing how often certain activities were performed within some time period in accordance with another embodiment of the invention. This information can be useful for increasing self awareness or goal tracking purposes e.g. seeing how much time was spent exercising or eating out at restaurants per month.

The raw context collectors collect raw context data from observation sources sensors monitors third party sources and the like. A raw context represents a single observation and so is generally very specific often carries little semantic information on its own and is of high probability. Naturally different observation sources may have greater degrees of noise and uncertainty or may inherently include semantic information. In the example illustrated in the raw context collectors include a location module an activity module and a social module but different and or other context collectors may be included in other embodiments. For example in various embodiments the context collectors include sensors for measuring device orientation e.g. a compass magnetic fields user heart rate and user stress level as well as modules for audio and visual sampling of the user s environment.

Examples of location module include a GPS receiver and a Wi Fi receiver that enable the location module to determine an absolute or relative location of the user s mobile device within a margin of error. Examples of the activity module include a monitor of key presses that determines when a user is typing or otherwise interacting with the user s mobile device and an accelerometer that measures the acceleration forces on the mobile device to determine movement and movement patterns of the mobile device. Examples of social module include a FACEBOOK friend graph PINTEREST pins 

FOURSQUARE check ins and other social media data that identify a user s social acquaintances activities and locations.

The context refiner module receives the raw context data from the raw context collectors . The context refiner module groups the context data by combining the observations to create a more coherent representation of the user s context. The context refiner module may also attach semantic content to groups or sequences of context data to form storylines. In some embodiments the context refiner module includes a plurality of context refiner sub modules not shown one for each type of context data received from the raw context collectors . Each context refiner sub module groups context data by combining the observations from the corresponding raw context collector into slices in order to create a more coherent representation of the user s context indicated by the specific type of context data the sub module is operating on. In one such embodiment the context refiner module includes an additional refiner sub module not shown that analyzes the multiple streams of contexts generated by the other context refiner sub modules to detect overlapping slices and generate combined slices containing context information from the corresponding overlapping slices.

The storyline storage receives the storylines formed by the context refiner module and stores them. Then a storyline retrieval module can access the stored storylines from storage . Examples of storyline retrieval modules include mobile applications and web applications that use the storylines stored in storage . An example of an application that uses a storyline is a mobile phone application that displays the user s history showing the user the places the user has stayed and the travel between the stays. The process of grouping context data and attaching semantic content to form storylines will be described in detail in the section below.

Embodiments of the invention divide the process of storyline creation into three phases data collection slicing and labeling. These phases are illustrated in the flow chart of and described in detail in this section.

Data collection involves accessing the various sources of information and observations of user behavior optionally transporting their data to servers for analysis and storage to offload CPU load and reduce battery usage and translating the data into a collection of raw contexts for additional analysis. These observations may come from a variety of sources including but not limited to the following 

Data collection may be run as a constant on going process with different techniques appropriate to different sources. Alternatively data collection may be run periodically at an interval appropriate for the application.

One challenge with data collection described above is that multiple sources of observation data may result in a collection of contexts that contain conflicting information. For example an observation from the user s calendar may place him at a meeting downtown while GPS observations may show him to be at the beach. Resolving these inconsistencies is key to the interpretation of the data. Slicing is the process of refining the chaotic multi threaded collection of contexts produced by data collection into a single consistent storyline composed of a sequence of contexts representing homogeneous time intervals. These homogeneous time intervals generally represent either a stay at one place or a process of travel from one place to another. In one embodiment place information may be refined in that each stay context defines an area that includes most of the individual points observed during that time. Travel contexts will generally have a start and end point with some definition of the route between them e.g. waypoints . In one embodiment travel slices may be further annotated with mode of conveyance such as driving walking flying or riding a bus and travel slices may be segmented into distinct slices for different modes of conveyance. For example a trip involving a drive to the airport a flight to another city and a taxi to a hotel might be separated into three distinct travel slices. In another embodiment no additional semantic meaning or activity information is added during slicing . Other types of data can be used to produce other types of slices such as slices representing a period of consistent activity. For example an activity like shopping may be represented by a longer duration slice that overlaps with multiple location slices representing stays at different retail businesses as well as travel between those businesses. Conversely an activity like sleeping may span only part of a stay at home. As another example a biometric slice such as high caloric burn may cover part of a visit to the park as well as time at the gym.

Embodiments of the invention divide the process of slicing into three phases preprocessing segmentation and reconciliation . Each of these phases is described in detail in this section with reference to the flow chart illustrated in . The steps of are illustrated from the perspective of the context refiner module performing the method. However some or all of the steps may be performed by other entities and or components. In addition some embodiments may perform the steps in parallel perform the steps in different orders or perform different steps.

Since raw context data input into the slicing process come from a variety of sources with varying degrees of inaccuracy the raw context data are systematically groomed into a suitable form for later steps to minimize the amount of error in the output. In one embodiment preprocessing involves a combination of filtering smoothing and interpolation .

Filtering . Filters on raw context data eliminate from consideration raw context data that are deemed more inaccurate than some desirable threshold. The value of the filter threshold can be sensor specific due to different sensor error characteristics. For example a GPS device s data uncertainty is calculated by physical factors related to the timing of signals received from the device s acquired satellites so it can report a reliable estimate of sensor inaccuracy. In contrast reported uncertainty is less reliable with location technology based on cell tower or Wi Fi triangulation which lack the measurement precision necessary to account for fluctuations in wireless signal strength therefore the threshold for filtering those contexts may be higher. When using any location technology the amount of filtering will depend on its expected error characteristics and the error characteristics are expected to vary between sources of data. Optionally default threshold values for filters may be set system wide set per sensor type or based on user preferences. In addition to filtering by location technology physically unlikely readings e.g. traveling at higher speeds than possible may also be filtered.

Smoothing . It is also helpful to later slicing phases for context grooming to smooth sequences of contexts from the same sensor when each individual context is noisy. Noise characteristics are hardware dependent so the smoothing of each sensor should be parameterized to limit the noise expected from that sensor. For example a certain accelerometer may generate noisy contexts at a high sampling rate characterized by large magnitude swings in all axes. One way to smooth such data is to compute an average of the magnitude values over a time window and then output the smoothed magnitude values at a less frequent sampling rate. Smoothing is also used when different sensors conflict. For example if there is minimal change in values across a series of accelerometer readings it indicates that a device was immobile which could contradict a series of location readings that would otherwise suggest the device was wandering due to inaccurate location technology. In general the degree of smoothing will depend on the variability in data noise from each particular location technology.

Interpolation . Uneven sampling rates can also be due to power conservation where a device chooses to go into a low power low sampling rate state or is forced to by a governing operating system such as a mobile phone OS. It is common for sensors to be configured to increase sampling when the environment is changing and to decrease it when the environment from the sensor s perspective is static. As slicing occurs over a finite window of time a decreased sampling rate could lead to relevant context data falling outside the window. Therefore it is desirable in some cases to interpolate less frequent context data to ensure that the later phases of slicing have sufficient data to analyze. Interpolation generates virtual context data between sensed context data. For example when there is a gap between two location contexts a number of interpolated context data points may be generated that correspond to locations between the two endpoints. Interpolation runs into the risk of adding contexts that should not exist. For example if a sensor is not functional and therefore not reporting a gap in contexts should not be interpolated. To prevent invalid interpolation sensor data payload may include an indication that there has been an interruption in contexts since the last time a sensor generated context. This may be the default behavior whenever a sensor is re started for data collection by the controlling data collection process. In addition if there is an exceptionally long gap between context data from sensors it may indicate an interruption even if the sensors fail to set the flag and would be treated as such.

Segmentation involves determining distinct contiguous series of slices from the groomed sensor data representing different activities. For example the simple day of a user who is an office worker could be segmented into a stay slice located in the morning at her domicile then a commute to work travel slice a stay slice at an office then a commute back home travel slice followed by a stay slice in the evening at her domicile.

There are a variety of algorithms to segment the input raw context data into stays travels and gaps. For example k means clustering can be applied to find clusters of contexts by location or a distance function combining location and time . Stay slices can be distinguished from travel slices by the dispersion of location context and or velocity data. Because k means has fundamental limitations other more sophisticated clustering algorithms can be used additionally or alternatively to extract slices.

Besides clustering segmentation can also be performed by applying time series analysis algorithms using the variance of a sliding window of input contexts to detect inflection points in the distribution. When the variation across a subsequence of input context data differs from a subsequence before it the algorithm divides the two subsequences into slices that can then be classified as a stay or travel. For example a stay is distinguishable from a travel by the low amount of variance in each individual input context in the stay sequence to its centroid the geographic average location.

Because there are a variety of algorithms that can be applied to segmentation each with different features and limitations it is also possible to combine their resulting outputs with a meta segmenter. This meta segmenter can pick and choose slices output with the highest associated probability among all constituent segmentation algorithms.

Segmentation can also be followed by filter and merge steps that smooth the output slices. Filters can remove short slices with more uncertainty associated with the contexts included therein e.g. those with few actual sensor observations and merge adjacent segments that are likely to be the same activity. The thresholds on minimum required observation uncertainty or distance from adjacent segments for filtering and merging can be parameterized to control the false positive rate groups of raw context data that should not have been segmented compared to the false negative rate groups of raw context data that should have been segmented but were not .

In one embodiment the final phase of slicing deals with resolving newly generated slices with existing contexts generated from a previous slicing run. While this reconciliation is optional if it were computationally feasible to run slicing on an entire raw context set the brand new contexts could simply replace the older ones in some cases reconciliation provides desirable qualities for the purpose of presentation. For example it is desirable not to change contexts and slices in a user s history that have been previously displayed to the user unless new data is in significant conflict because the instability in data shown to the user would appear inconsistent. Instability is even less desirable in cases when the user has performed some operation on a previous context or slice such as manually labeling or otherwise attaching metadata to it that the subsequent slicing run would overwrite. As such there are rules governing when new slices and contexts can replace preexisting data in a user s history.

One way to limit the scope of changes between new and preexisting slices is to specify a time window within which preexisting data may be changed or replaced. Any data outside the window i.e. older than a certain age would be left unchanged in later slicing runs. Contexts from newer slices are then integrated into the eligible preexisting slices by comparing type stay or travel and time spans. If a new slice is of the same type and begins and ends at approximately the same time as an existing slice it could retain the same metadata of the existing slice including any identifier labels ids and contexts. When a new slice and old slice overlap in time but conflict in type the process can prefer the new slice except when there has been manual intervention for example when a user has already interacted with the existing slice or confirmed it in some way using a user interface. Finally the last slice is most likely to have changed due to new data and could have its ending time extended if it aligns with a new slice starting at a time near its own start time or completely replaced if the type changed if a previously presumed stay were actually the beginning of a travel slice for instance .

Labeling is the process of adding more specific and semantically meaningful data to the slices produced by slicing . In one embodiment some or all of these labels are themselves contexts associated with the slices. In particular labeling adds geography such as a slice s city or neighborhood venue public places businesses or personally significant places like home and activity such as working eating or going to see a movie . Note that the process of labeling may suggest a revision in slicing such as when the labeling process determines that a user was eating and then seeing a movie at the theater next door while the slicing phase represented both activities as a single slice prompting the single slice to be split into two successive slices taking place at distinct venues.

A slice can be labeled using identifiers from predefined data sets such as public venue records or automatically generated for example using a reverse geocoding system that converts latitude and longitude coordinates into an approximate street address. The labeling process uses these data sources to apply probable labels to each slice. Some labels are exclusive while others may coexist alongside one another. Example data sources for the labeling process include 

Conceptually it is possible to view the labeling process as a collection of subprocesses responsible for outputting one type of label at a time. Labels of different types can then be run simultaneously on slices or chained when one type of label is triggered by the presence of another i.e. activities that are category or venue specific are only considered when a preceding labeling subprocess applies a corresponding category or venue label respectively to the slice . In general the labeling process can be broken into three phases label candidate search label candidate ranking and label application illustrated in .

In the label candidate search phase the label sources are first queried to discover possible labels based on the slice s existing contexts. The following provides examples of how various label types can be searched.

Venues and places are found based on the slice s location which by definition is a consistent estimate of a user s location over a period of time. However there is a degree of uncertainty when using the associated slice location. Essentially raw sensors providing locations are imprecise. The label candidate search phase does not rely on the exact location represented by the slice but instead expands the search within some radius calculated as an estimate of the uncertainty. For example if a slice s location was calculated using Wi Fi triangulation the triangulation error is often in the tens to low hundreds of meters so the search process may query for venues and places centered at the slice location within two hundred meters.

Events and appointments can be found based on the slice s location and time boundaries. An event at a venue would be matched against the overlapping time boundaries between the event and the slice. Appointments are also matched against location and time. Because event and appointment time boundaries are imprecise and slice time boundaries may be imperfect the slice s time boundaries do not need to exactly match those of an event or appointment. Similarly the slice location does not need to be an exact match either. The label candidate search finds possible events and appointments within the likely uncertainty radius of the slice location.

Several methods may also be used to find candidate activities. For example based on the category and or venue labels already applied to the slice the label candidate search process can bring up associated activity labels. As another example the slice context can be compared to similar slices in the past if the user had previously labeled activities manually. For example if a user previously labeled an activity at the same venue or a venue in the same category as the slice that has not yet been labeled with an activity that activity would be considered as a candidate for labeling the slice.

Once a set of label candidates of a given type are found the likelihood of each one given the contexts already associated with the slice is evaluated. In one embodiment the likelihood of each label is computed and the labels are ranked. There may also be a threshold for likelihoods such that if no label is deemed likely enough none is applied to the slice at all this avoids the case of having a label e.g. an incomplete label applied inappropriately. In one implementation slices are constrained to only having one label of some types e.g. venue labels and the top ranked label meeting the minimum likelihood threshold is applied to the slice. For other label types multiple labels can be valid for a single slice and all labels meeting the minimum threshold of likeliness are applied.

Likelihoods are calculated by scoring a candidate label given the contexts already associated with a slice. A model is defined to be an algorithm for computing likelihoods given slice context. Models treat the various aspects of a slice context as features. Some example features include 

Besides the context provided by the slice models can use other sources of information to inform the likelihood estimate. Some example information sources include 

One or more models can be run to process a slice s context s into labels which are applied in label application . Conceptually multiple models can be represented by a single meta model that runs the appropriate features through its composing models. Once the meta model outputs probabilities labels deemed sufficiently likely are applied to the slice. In one embodiment labels that are not deemed to be sufficiently likely can still be surfaced as options to the user should he she wish to alter the label set by adding new labels with the label candidate ranking intact. In such cases it is not necessary for the same meta model to produce the label candidate ranking different meta models can rank labels differently to produce whatever is specified by the system design of a particular embodiment.

In one embodiment automatic label application does not require that every label is ranked solely by likelihood. For example when users interact with the label candidates e.g. to manually apply labels it can be desirable to present candidate labels in different orders to make finding desired labels easier. For example an alphabetical order or a hybrid order that incorporates both likelihoods and lexicographical positions can be used. Once labels are applied to slices the additional contextual data is presentable to the user and available for further processing in a variety of forms.

Once labels are applied to slices the new storyline data is presentable to the user and available for further processing in a variety of forms. As described above one use of storyline data is to offer a historical perspective to the user who may peruse the storyline to view his her previous activities. Another use of storyline data is for further processing into interesting aggregations e.g. showing how often certain activities were performed within some time period or for processing by other software applications.

A computer is adapted to execute computer program modules for providing the functionality described herein. As used herein the term module refers to computer program logic utilized to provide the specified functionality. Thus a module can be implemented in hardware firmware and or software. In one embodiment program modules are stored on a storage device loaded into memory and executed by a processor.

Embodiments of the physical components described herein can include other and or different modules than the ones described here. In addition the functionality attributed to the modules can be performed by other or different modules in other embodiments. Moreover this description occasionally omits the term module for purposes of clarity and convenience.

Some portions of the above description describe the embodiments in terms of algorithmic processes or operations. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs comprising instructions for execution by a processor or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of functional operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of computer readable storage medium suitable for storing electronic instructions and each coupled to a computer system bus. Furthermore the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the disclosure. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the present invention is not limited to the precise construction and components disclosed herein and that various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope as defined in the appended claims.

