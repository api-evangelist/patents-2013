---

title: Size-based data synchronization
abstract: Data synchronization techniques are provided that effectively isolate data transfer over the network from actual interpretation of data. The data synchronization techniques include a protocol designed to work based on a “size” (amount) of data transferred over the network, irrespective of the content represented by the data that is transferred. The size itself may be determined, for example, by the client, backend system, an agreed-upon configuration that is maintained for a predetermined period of time, etc. In certain embodiments, a client transmits a request to the server that indicates a “requested payload size.” Using the requested payload size, the server generates a response (i.e., one or more messages) that provides the client with data, referred to herein as synchronization data, for storage at the client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582561&OS=09582561&RS=09582561
owner: SAP SE
number: 09582561
owner_city: Walldorf
owner_country: DE
publication_date: 20130716
---
The present disclosure relates to a data synchronization protocol configured to operate based on a requested size amount of data to be transferred over a network.

A client is computer hardware or software that operates in conjunction with a backend system. In other words as part of its operation the client exchanges data with or receives data from the backend system via a network. A client may reside in on etc. any combination of one or more of inter alia a wired device a wireless device a mobile phone a feature phone a smartphone a tablet computer such as for example an iPad a mobile computer a handheld computer a desktop computer a laptop computer a server computer an in vehicle e.g. audio navigation etc. device an in appliance device a Personal Digital Assistant PDA a game console a Digital Video Recorder DVR or Personal Video Recorder PVR cable system or other set top box an entertainment system component such as a television set etc. A device that includes a client is referred to herein as a client device.

Certain clients may operate in an offline state i.e. when the client device does not have an active network connection . As such relevant data from backend systems is synchronized with the client such that even in an offline state the client can perform its intended operations. Conventionally during data synchronization messages e.g. packets for related information are sent one by one to the client. In the case of a large number of small messages one network connection might be opened per message per user. In a typical mobile landscape with thousands of mobile users a large number of connections create a load on the network that reduces the efficiency of the backend system and increase the overall bandwidth consumed and response time for the synchronization.

A backend system and a backend system are connected to the network . The backend systems and may comprise for example a desktop computer laptop computer server computer etc. For ease of illustration embodiments will be described herein with reference to the use of server computers servers as the backend systems and .

Server comprises a data repository and a size based synchronization module . Similarly server comprises a data repository and a size based synchronization module . The size based synchronization modules and may be implemented in any combination of hardware and or software and are configured to execute data synchronization operations described herein. The data repositories and may encompass for example any combination of one or more conventional Relational Database Management Systems RDBMSs Object Database Management Systems ODBMS in memory Database Management Systems DBMS equivalent data storage and management facilities etc.

In the example of a client device is wirelessly connected to the network . That is client device may communicate with other devices over the network via wireless network services provided by a wireless telecommunications network not shown or may instead communicate using wireless fidelity Wi Fi or other similar wireless communication techniques. While the instant embodiment is described with a wireless connection between network and client device those skilled in the art will appreciate that a wired connection is also possible.

In the embodiments of the client device comprises a first client and a second client . The client operates using data that is received from the data repository at server while client operates using data that is received from the data repository at server . The clients and comprise size based synchronization modules and . The size based synchronization modules and may be implemented in any combination of hardware and or software and are configured to execute data synchronization operations described herein.

In certain circumstances clients and may operate offline i.e. in a disconnected state when the client device does not have an active network connection with the servers and . As such the clients and are configured to locally store data from the data repositories and respectively in the client device for use while offline. To ensure proper offline operation the locally stored data is synchronized with the data in the data repositories when an active network connection is available. However since the available network time may be limited it is important that the total time consumed on the network for data synchronization is minimized. This mandates that data synchronization is performed with a high degree of network efficiency error resilience and in a manner that is compatible with multiple data formats.

Presented herein are data synchronization techniques that effectively isolate data transfer over the network from actual interpretation of data. The data synchronization techniques include a protocol designed to work based on a size amount of data transferred over the network irrespective of the content represented by the data that is transferred. The size itself may be determined for example by the client backend system an agreed upon configuration that is maintained for a predetermined period of time etc. In certain embodiments a client transmits a request to the server that indicates a requested payload size. Using the requested payload size the server generates a response i.e. one or more messages that provides the client with data referred to herein as synchronization data for storage at the client device. In general this approach substantially reduces or eliminates the need for any optimization that is based on the size of respective data objects stored in the server e.g. data objects that are several MB in size .

Method begins at and at the server receives a data synchronization request sometimes referred to herein as a client request from the client . The client request indicates that the server should initiate operations to transmit data in the data repository to the client . As described further below the client request includes among other information a requested payload size. The requested payload is an indication of the size of the payload the client expects in a response transmitted by the server .

Next at the server uses information in the data client request to obtain synchronization data i.e. data for transmission to the client from the data repository . At the server transmits a data synchronization response sometimes referred to herein as a server response to the client . The server response comprises a payload and a header or footer . The payload includes the synchronization data and has a size that corresponds to the requested payload size of the data synchronization request. That is the size of the payload is the same size as or smaller than the requested payload size identified in the client request.

After the server response is transmitted to the client a determination is made at as to whether the data synchronization operations should be terminated at least for a predetermined period of time . If the data synchronization should not be terminated method returns to where the server awaits another client request. The operations of and continue until it is determined at that the data synchronization operations should be terminated. At that time the method ends at .

As noted above the client is configured to locally store data in client device for use while offline. To ensure proper operation the locally stored data is synchronized with client specific data in the data repository of server . In the embodiments of the data repository includes data for a plurality of clients wherein the data for each client is stored sequentially in client specific data queues. For example illustrates a client specific data queue associated with client . The client specific data queue comprises a plurality of data objects that may be used by client during operation. The illustrative data objects of are data object SalesOrder having a size of 1 megabyte MB data object CustomerInfo having a size of 1.5 MBs data object SalesOrder having a size of 1 MB data object Product having a size of 0.6 MBs and data object SalesOrder having a size of 0.9 MBs. Each data object data relevant for a particular entity is assigned an identifier ID comprising a sequential natural number. In this case the first data object is assigned an ID of 1 the second data object is assigned an ID of 2 the third data object is assigned an ID of 3 the fourth data object is assigned an ID of 4 and the fifth data object is assigned an ID of 5.

It is to be appreciated that the number names sizes etc. of data objects shown in are merely illustrative. Additionally a data object herein may comprise among other elements any combination of one or more of inter alia audio recordings video recordings streaming audio and or video software applications software application patches or updates software application files such as for example .DOC .DOCX .VSD .ZIP .TXT .PDF etc. images application data such as for example queries objects responses etc. encoded and or un encoded text etc.

As shown in the data synchronization process starts when the client transmits a data synchronization request client request to the server . The client request includes authentication and authorization information an indication of the last received data object an indication of the last received data object position and an indication of the requested payload size.

The indication last received data object includes the identifier ID of the last data object for which data was successfully received by the client from the server . This indication may be useful in circumstances where part of a payload is corrupted during transmission over the network and or part of the payload is not received by the client . Upon receiving the indication of the last data object that was successfully received the server can re send only the data that was not received by the client . In other words this ensures that the entire payload is not sent again but rather only data objects that are not received or are corrupted are re sent. As shown in the indication has a value of zero since this is the beginning of the data synchronization process and no earlier data objects were received.

Each data object has a size that corresponds to the number of bytes of data that form the respective data object. For example if a data object has a size of 1 MB then it includes 1024000 bytes of data. As described further below during the data synchronization process server may send the client a portion or segment of a data object i.e. only a subset of the bytes that form the data object . The indication last received data object position indicates the last received byte position of the last received data object. In other words the indication identifies the last byte of data of the last data object that was received by the client . In the case that the last data object was fully received the indication has a value of zero. As shown in the indication has a value of zero since this is the beginning of the data synchronization process and no earlier data objects were received.

The indication requested payload size identifies the size of the payload that the client expects to receive in a response transmitted by the server . In the example of the indication identifies a requested payload size of 2 MBs.

After receiving the client request the server uses the information in the client request to access the client specific data queue and obtain data for transmission to the client . More specifically the client request identifies a requested payload size for a server response 2 MBs an indication of the last received data object value 0 and an indication of the last received data object position value 0 . As such the server retrieves 2 MBs of synchronization data from the client specific data queue starting at byte position 0 of the first data object data object .

After obtaining the synchronization data the server generates a server response data synchronization response for transmission to the client . The server response comprises a payload that includes the synchronization data obtained from the client specific data queue and additional information included in for example a message header or footer. This additional information includes an indication of the last sent data object an indication of the last sent data object position an indication of the size of the payload a sent objects ID list a sent objects lengths list and an object name list .

The indication last sent data object is an identifier of the last data object in the server response. More specifically as shown in the client request indicated that a subsequent response is to include 2 MBs of synchronization data. The first data object in client specific data queue has a size of 1 MB while the second data object has a size of 1.5 MBs. As such a payload of 2 MBs will span both all of first data object and part of the second data object . Accordingly the last sent data object in server response is the second data object and the indication has a value of 2.

As noted above the requested payload size of 2 MBs results in a payload that includes only a portion of the second data object . The indication last sent data object position identifies the byte position of the last data object. In other words the indication identifies the last byte of data of the last data object that is included in the payload . As shown in the indication has a value representing a byte position of 1 MB indicating that only the first 1 MB of the total 1.5 MBs in data object have been included in the payload .

It is to be appreciated that the indication is useful in cases where a partial data object is included in the payload . If the last data object included in a payload is complete then the indication has a value of zero.

The indication response payload size identifies the size of the payload . In embodiments presented herein the payload has a size that is less than or equal to the requested payload size of client request .

As noted the server response also includes a sent objects ID list . This sent objects ID list is a list of the IDs for the data objects appended together in payload . The list lists the IDs for the data objects in the same order in which they appear in the payload . In the embodiments of the list includes the value 1 followed by the value 2 referring to the first and second data objects data objects and respectively .

The list sent object lengths identifies the boundaries of each data object in the payload . The client uses theses value to reconstruct individual data objects from the payload . In the embodiments of the list includes a first value representing a size of 1 MB followed by a second value representing a size of 1 MB. This indicates to the client that the first data object comprises the first 1 MB of the payload and that the second data object comprises the second 1 MB of the payload .

The list object names list provides the names for the data objects included in the payload . Again the order of the names in the list corresponds to the order in which the associated data objects appear in the payload . This list enables the client to uniquely identify the included data objects and to determine where the data object data should be stored locally. In the list includes the names SalesOrder and CustomerInfo. 

In the embodiments of a determination is made after the client receives a server response as to whether data synchronization should continue. As described further below this determination may be made for example based on information or the lack of information in the server response .

In alternative embodiments the determination of whether the data synchronization process is completed may be made by the server prior to transmitting the server response . In such embodiments the server response includes a trigger that causes the client to transmit or not transmit another client request .

If the synchronization process should continue a new client request generated by the client will initiate the transfer of additional synchronization data from the server to the client . illustrates the transmission of a new client request following receipt of server response of .

Similar to the client request of the client request includes authentication and authorization information an indication of the last received data object and indication of the last received data object position and an indication of the response size sometimes referred to herein as the requested payload size.

As shown in the indication last received data object of client request has a value of 2 i.e. the identifier of the second data object in client specific data queue . This indicates to the server that the data from data object was the last data that was successfully received by the client .

The indication last received data object position has a value representing a byte position of 1 MB i.e. the last received byte position of the last received data object is 1 MB . This indicates to the server that client received the first 1 MB of data in data object .

The indication of client request identifies the size of the payload that the client expects to receive in a response transmitted by the server . In the example of the indication identifies the requested payload size as 2 MBs.

After receiving the client request the server uses the information in the client request to access the client specific data queue and obtain data for transmission to the client . More specifically the client request identifies a requested payload size for a server response 2 MBs an indication of the last received data object value 2 indicating data object and an indication of the last received data object position value representing 1 MB . As such the server retrieves 2 MBs of synchronization data from the client specific data queue starting at the 1 MB byte position of the second data object data object .

After obtaining the synchronization data the server generates a server response for transmission to the client . Similar to the server response of server response comprises a payload that includes the synchronization data obtained from the client specific data queue and additional information included in for example a message header or footer. This additional information in server response comprises an indication of the last sent data object an indication of the last sent data object position an indication of the size of the payload a sent objects ID list a sent objects lengths list and an object name list .

As noted above the indication last sent data object is an identifier of the last data object in the server response . More specifically as shown in the client request indicated that a subsequent response is to include 2 MBs of synchronization data starting at 1 MB of the second data object . The second data object in client specific data queue has a size of 1.5 MB the third data object has a size of 1 MB and the fourth data object has a size of 0.6 MBs. As such a payload of 2 MBs starting at 1 MB of the second data object will span the remainder of the second data object 0.5 MBs the third data object 1 MB and part of the fourth data object 0.5 MBs . Accordingly the last sent data object in server response is the fourth data object and the indication has a value of 4.

As noted above the indication last sent data object position identifies the last byte of data of the last data object that is included in the payload . The requested payload size of 2 MBs results in a payload that includes only a portion of the fourth data object . As such the indication of server response has a value representing 0.5 MBs indicating that the first 0.5 MBs of the total 0.6 MBs in data object have been included in the payload .

Also as noted above the indication response payload size identifies the size of the payload . In the payload size is 2 MBs i.e. equal to the requested payload size of client request .

The sent objects ID list of server response is a list of the IDs for the data objects appended together in payload . The list lists the IDs for the data objects in the same order in which they appear in the payload . In the embodiment of the list includes in order the values 2 3 and 4 referring to the second third and fourth data objects data objects and respectively .

The list sent object lengths identifies the boundaries of each data object in the payload . The client uses theses value to reconstruct individual data objects from the payload . In the embodiment of the list includes in order a first value representing 0.5 MBs a second value representing 1 MB and a third value representing 0.5 MBs. This list indicates to the client that the second data object comprises the first 0.5 MBs of the payload that the third data object comprises the next 1 MB of the payload and that the fourth data object includes the last 0.5 MBs of the payload .

The list object names list provides the names for the data objects included in the payload so that the client can uniquely identify the included data objects and determine where the data object data should be stored locally. In the embodiment of list comprises the names CustomerInfo corresponding to data object SalesOrder corresponding to data object and Product corresponding to data object .

As noted in the embodiments of a determination is made after the client receives a server response as to whether data synchronization should continue. If all synchronization data should continue then a new client request is generated by the client . illustrates the transmission of a new client request .

Similar to the client request of the client request includes authentication and authorization information an indication of the last received data object and indication of the last received data object position and an indication of the response size sometimes referred to herein as the requested payload size.

As shown in the indication last received data object of client request has a value of 4 i.e. the identifier of the fourth data object in client specific data queue . This indicates to the server that the data from data object was the last data that was successfully received by the client .

The indication last received data object position has a value representing 0.5 MBs i.e. the last received byte position of the last received data object is 0.5 MBs . This indicates to the server that client received the first 0.5 MBs of data in data object .

The indication of client request identifies the size of the payload that the client expects to receive in a response transmitted by the server . In the example of the indication identifies the requested payload size as 2 MBs.

After receiving the client request the server uses the information in the client request to access the client specific data queue and obtain data for transmission to the client . More specifically the client request identifies a requested payload size for a server response 2 MBs an indication of the last received data object value 4 indicating data object and an indication of the last received data object position value representing 0.5 MB . As such the server attempts to retrieve 2 MBs of synchronization data from the client specific data queue starting at the 0.5 MB byte position of the fourth data object data object .

In the example of the client specific data queue includes only 1 MB of data subsequent to byte position 0.5 of data object . As such the server can only obtain the remaining 1 MBs of synchronization data.

After obtaining the synchronization data the server generates a server response for transmission to the client . Similar to the server response of server response includes a payload that includes the synchronization data obtained from the client specific data queue and additional information included in for example a message header or footer. This additional information in server response comprises an indication of the last sent data object an indication of the last sent data object position an indication of the size of the payload a sent objects ID list a sent objects lengths list and an object name list . This additional information also includes an indication of the pending data object size.

As noted above the indication last sent data object is an identifier of the last data object in the server response . More specifically as shown in the client request indicated that a subsequent response is to include 2 MBs of synchronization data starting at 0.5 MBs of the fourth data object . The fourth data object in the client specific data queue has a size of 0.6 MBs while the fifth data object has a size of 0.9 MBs. As such only 1 MB remains in the client specific data queue leading to a payload size of 1 MB. This payload starts at 0.5 MBs of the fourth data object and will span the remainder of the fourth data object 0.1 MBs and the fifth data object 0.9 MBs . Accordingly the last sent data object in server response is the fifth data object and the indication has a value of 5.

As noted above the indication last sent data object position identifies the last byte of data of the last data object that is included in the payload . The requested payload size of 2 MBs results in a payload that includes the entirety of the fifth and last data object . As such the indication of server response has a value of 0 indicating that the entire fifth data object has been included in the payload .

Also as noted above the indication response payload size identifies the size of the payload . In the payload size is 1 MBs which is less than the requested payload size of client request .

The sent objects ID list of server response is a list of the IDs for the data objects appended together in payload . In the embodiments of the list includes in order the values 4 and 5 referring to the fourth and fifth data objects data objects and respectively .

The list sent object lengths identifies the boundaries of each data object in the payload . The client uses these values to reconstruct individual data objects from the payload . In the embodiments of the list includes in order a first value representing 0.1 MBs and a second value representing 0.9 MBs. This list indicates to the client that the fourth data object comprises the first 0.1 MBs of the payload and that the fifth data object comprises the last 0.9 MBs of the payload .

The list object names list provides the names for the data objects included in the payload so that the client can uniquely identify the included data objects and determine where the data object data should be stored locally. In the embodiments of list comprises the names Product corresponding to data object and SalesOrder corresponding to data object .

As noted a determination is made after the client receives a server response as to whether data synchronization should continue. This determination may be made for example based on indication of the pending object size. This indication is used to inform the client that no additional synchronization data remains in the client specific data queue and accordingly that the data synchronization process may be terminated at least for some predetermined period of time .

In alternative embodiments the determination may be made by the server prior to transmitting the server response . In such embodiments the indication operates as a trigger that causes the client to cease transmission of client requests. In such embodiments the client is configured to transmit a new client request following receipt of a server response that does not include indication .

As noted above illustrate a hypothetical set of exchanges during a data synchronization process. Shown below is pseudo code corresponding to the exchanges of .

Certain embodiments presented herein have built in support for handling partial data objects i.e. behavior does not change depending on the object size . Additionally it may be possible to recover resend a particular object till such a time it is present on the server. Furthermore certain embodiments presented herein may be used irrespective of the data encoding format of the data objects provide efficient use of network bandwidth optimum use of server resources provide a synchronization interface in accordance with Representational State Transfer REST i.e. RESTful synchronization to enable connectivity from any client platform and are resilient to errors during network transfer esp. when very large objects are synchronized .

It is to be appreciated that the values used for the various ID indications lists etc. of and the above pseudo code are merely illustrative. For example the indicators e.g. Last Sent Data Object Sending Object ID List etc. and depicted in the pseudo code e.g. X SAP LAST SENT SERVER OBJ ID X SAP SENDING OBJ ID LIST X SAP LAST RECEIVED SERVER OBJ X SAP REQUEST OBJ SIZE X SAP RESPONSE OBJ SIZE etc. are illustrative only it will be readily apparent to one of ordinary skill in the relevant art that numerous other headers header naming conventions header combinations or arrangements etc. are easily possible. Additionally the specific data objects noted above in connection with and the specific Response Body elements depicted in the pseudo code are illustrative only and it will be readily apparent to one of ordinary skill in the relevant art that numerous naming schemes ordering approaches encoding paradigms etc. are easily possible.

Furthermore the authentication and authorization information noted above in connection with and the specific Authorization elements depicted in the pseudo code are illustrative only and it will be readily apparent to one of ordinary skill in the relevant art that numerous approaches involving for example and inter alia user names and passwords one time tokens time sensitive credentials support for Single Sign On SSO etc. encoding paradigms etc. are easily possible.

The narrative that was presented above was illustrative only and it will be readily apparent to one of ordinary skill in the relevant art that numerous other components interactions interaction arrangements etc. are easily possible. For example and possibly inter alia 

While the exchanges that are depicted in the above pseudo code carry a HyperText Transfer Protocol HTTP flavor it will be readily apparent to one of ordinary skill in the relevant art that numerous alternatives are easily possible. For example any combination of one or more of inter alia a Short Object Service SMS Multimedia Object Service MMS Internet Protocol IP Multimedia Subsystem IMS etc. object exchange a Wireless Application Protocol WAP exchange a structured or an unstructured data transfer a data transfer operation atop one or more proprietary and or standards based protocols an Electronic Object E Mail exchange an Instant Messaging IM exchange Wi Fi a Near Field Communication NFC exchange etc.

Several of the request response etc. exchanges that were described above may employ among other things different addressing artifacts such as inter alia telephone numbers short codes Internet Protocol IP addresses E Mail address Instant Messaging IM handles Session Initiation Protocol SIP addresses etc.

Several of the request response etc. exchanges that were described above may optionally contain any combination of one or more of information elements such as for example a relevant or applicable factoid a piece of product information etc. advertisements promotional items coupons vouchers surveys questionnaires gift cards retailer credits etc. Such material may be selected statically or randomly from for example a repository of defined material may be location based for example selected from a pool of available material based on possibly inter alia information about the current physical location of a Customer s wireless device may be application specific etc.

Several of the request response etc. exchanges that were described above may optionally leverage reference etc. information on the current physical location of a user s wireless device as obtained through inter alia a one or more of a Location Based Service LBS facility a Global Positioning System GPS facility etc. to among other things enhance security provide more applicable appropriate efficient etc. information delivery etc.

Computer system includes one or more processors such as processor . Processor can be a special purpose processor or a general purpose processor. Processor is connected to a communication infrastructure for example a bus or a network .

Computer system also includes a main memory preferably Random Access Memory RAM containing possibly inter alia computer software and or data .

Computer system may also include a secondary memory . Secondary memory may include for example a hard disk drive a removable storage drive a memory stick etc. A removable storage drive may comprise a floppy disk drive a magnetic tape drive an optical disk drive a flash memory or the like. A removable storage drive reads from and or writes to a removable storage unit in a well known manner. A removable storage unit may comprise a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art s removable storage unit includes a computer usable storage medium having stored therein possibly inter alia computer software and or data .

In alternative implementations secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface . Examples of such means may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an Erasable Programmable Read Only Memory EPROM or Programmable Read Only Memory PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system may also include an input interface and a range of input devices such as possibly inter alia a keyboard a mouse etc.

Computer system may also include an output interface and a range of output devices such as possibly inter alia a display one or more speakers etc.

Computer system may also include a communications interface . Communications interface allows software and or data to be transferred between computer system and external devices. Communications interface may include a modem a network interface such as an Ethernet card a communications port a Personal Computer Memory Card International Association PCMCIA slot and card or the like. Software and or data transferred via communications interface are in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via a communications path . Communications path carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link a Radio Frequency RF link or other communications channels.

As used in this document the terms computer program medium computer usable medium and computer readable medium generally refer to media such as removable storage unit removable storage unit and a hard disk installed in hard disk drive . Signals carried over communications path can also embody the logic described herein. Computer program medium and computer usable medium can also refer to memories such as main memory and secondary memory which can be memory semiconductors e.g. Dynamic Random Access Memory DRAM elements etc. . These computer program products are means for providing software to computer system .

Computer programs also called computer control logic are stored in main memory and or secondary memory . Computer programs may also be received via communications interface . Such computer programs when executed enable computer system to implement the techniques discussed herein. In particular the computer programs when executed enable processor to implement e.g. the functions of supplemental information delivery logic . Accordingly such computer programs represent controllers of the computer system . Where the techniques are implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive interface hard drive or communications interface .

The techniques described herein are also directed to computer program products comprising software stored on any computer usable medium. Such software when executed in one or more data processing devices causes data processing device s to operate as described herein. Embodiments may employ any computer usable or readable medium known now or in the future. Examples of computer usable mediums include but are not limited to primary storage devices e.g. any type of random access memory secondary storage devices e.g. hard drives floppy disks Compact Disc Read Only Memory CD ROM disks Zip disks tapes magnetic storage devices optical storage devices Microelectromechanical Systems MEMS nanotechnological storage device etc. and communication mediums e.g. wired and wireless communications networks local area networks wide area networks intranets etc. .

The above description is intended by way of example only. Various modifications and structural changes may be made therein without departing from the scope of the concepts described herein and within the scope and range of equivalents of the claims.

