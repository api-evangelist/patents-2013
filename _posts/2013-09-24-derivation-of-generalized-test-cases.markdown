---

title: Derivation of generalized test cases
abstract: A first computer receives a first and a second test sample. The first computer executes the first and second test sample. The first computer determines that the value exposed by a first parameter in the second test sample is different from the value exposed by the first parameter in first test sample. The first computer creates a first value driven equivalence class. The first computer determines the value exposed by the second parameter in the second test sample is different from the value exposed by the second parameter in the first test sample and the value exposed by the second parameter in the second test sample is equivalent to the value exposed by the first parameter in the second test sample. The first computer adds the second parameter to the first value driven equivalence class and creates a generalized test case, including at least the first value driven equivalence class.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09329979&OS=09329979&RS=09329979
owner: GLOBALFOUNDRIES INC.
number: 09329979
owner_city: Grand Cayman
owner_country: KY
publication_date: 20130924
---
This application is a continuation of U.S. patent application Ser. No. 14 033 762 filed Sep. 23 2013 the entire content and disclosure of which is incorporated herein by reference.

The present invention relates generally to test case generation and more particularly to deriving generalized test cases for use in regression testing.

Regression testing involves the repetition of tests developed for a system for the purpose of ensuring correct system behavior and uncovering any software bugs or regressions in existing functional and non functional areas of the system. Typically regression testing is performed after changes such as enhancements patches or configuration changes have been made to the system. The intent of regression testing is to ensure that the changes made to the system have not introduced new faults or bugs to the system. Regression testing can be used to not only test for the correctness of a program but also for tracking the quality of its output.

When developing regression tests for a client server system testing the server APIs application programming interfaces constitutes a significant part. Test clients are programmed to interact with the server and check responses received from the server. However manually developing test clients is a tedious task requiring people with profound knowledge of the server APIs and significant programming skills.

Embodiments of the present invention provide a method system and computer program product for creating a generalized test case. A first computer receives a first and a second test sample. The first computer executes the first and second test sample. The first computer determines that the value exposed by a first parameter in the second test sample is different from the value exposed by the first parameter in first test sample. The first computer creates a first value driven equivalence class. The first computer determines the value exposed by the second parameter in the second test sample is different from the value exposed by the second parameter in the first test sample and the value exposed by the second parameter in the second test sample is equivalent to the value exposed by the first parameter in the second test sample. The first computer adds the second parameter to the first value driven equivalence class and creates a generalized test case including at least the first value driven equivalence class.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code instructions embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the present invention will now be described in detail with reference to the accompanying Figures.

In the exemplary embodiment network is the Internet representing a worldwide collection of networks and gateways to support communications between devices connected to the Internet. Network may include for example wired wireless or fiber optic connections. In other embodiments network may be implemented as an intranet a local area network LAN or a wide area network WAN . In general network can be any combination of connections and protocols that will support communications between server client device and test case device .

Server includes server program . In the exemplary embodiment server may be a desktop computer a notebook a laptop computer a tablet computer a handheld device a smart phone a thin client or any other electronic device or computing system capable of receiving and sending data to and from other computing devices such as client device and test case device via network . While server is shown as a single device in other embodiments server may be comprised of a cluster or plurality of computing devices working together or working separately. Server is described in more detail with reference to .

In the exemplary embodiment server program is software capable of receiving requests from another computing device such as client device via network and transmitting responses to the requests back to the computing device via network .

Client device includes client program . In the exemplary embodiment client device may be a desktop computer a notebook a laptop computer a tablet computer a handheld device a smart phone a thin client or any other electronic device or computing system capable of receiving and sending data to and from other computing devices such as server and test case device via network . While test case device is shown as a single device in other embodiments test case device may be comprised of a cluster or plurality of computing devices working together or working separately. Test case device is described in more detail with reference to .

In the exemplary embodiment client program is software capable of transmitting requests to other computing devices such as server via network and receiving responses to the requests from the other computing devices via network .

Test case device includes test case program . In the exemplary embodiment test case device may be a desktop computer a notebook a laptop computer a tablet computer a handheld device a smart phone a thin client or any other electronic device or computing system capable of receiving and sending data to and from other computing devices such as server and client program via network . While test case device is shown as a single device in other embodiments test case device may be comprised of a cluster or plurality of computing devices working together or working separately. Test case device is described in more detail with reference to .

In the exemplary embodiment test case program is software capable of receiving or intercepting messages such as requests and responses transmitted between server and client device via network . In addition test case program is capable of analyzing the received or intercepted messages and creating a generalized test case based on the received or intercepted messages. Furthermore test case program is also capable of receiving input from a user via a user interface and transmitting the input to other computing devices such as server and client device via network .

In other embodiments based on design time knowledge a pre defined equivalence class may be defined by an administrator as a set of parameters occurring in specific calls. A parameter is identified uniquely by a methodID and a parameterID . An administrator can then use design time knowledge to group parameters that contain the same or similar identifiers together into pre defined equivalence classes. For example since getTaskDefinitions.outputtaskDefIDs and createTask.input.taskDefID contain the same parameterID taskDefID an administrator with design time knowledge may choose to place both of these parameters into a pre defined equivalence class. In addition in the exemplary embodiment test case program may also receive one more pre defined test exclusion classes however in other embodiments test case program may not receive any pre defined test exclusion classes. In the exemplary embodiment a pre defined exclusion class is similar to a pre defined equivalence class except a pre defined exclusion class is a set of parameters which the administrator does not want to test. Therefore an administrator with design time knowledge can create pre defined exclusion classes so that certain parameters are excluded from testing against the test case.

Test case program then receives a message transmitted between client device and server step . In the exemplary embodiment the received message is part of a test sample which includes a finite number of messages.

Test case program then determines if the parameter in the message meets the requirements of a pre defined equivalence class decision . In the exemplary embodiment the message contains only one parameter however in other embodiments the message may contain multiple parameters in which case test case program analyzes each parameter contained in the message independently to determine if the parameter meets the requirements of a pre defined equivalence class. Referring to the example above for a pre defined equivalence class defined in terms of associated values having certain value constraints such as values containing the prefix TKTID test case program determines if the parameter in the received message has an associated value which contains the prefix TKTID . If test case program determines the parameter in the received message is part of a pre defined equivalence class decision YES branch test case program associates the parameter with the appropriate value driven equivalence class step . For example if test case program determines the parameter is part of a pre defined equivalence class and the parameter has two associated values such as TKTID. and TKTID. as stated above test case program creates two value driven equivalence classes one for each associated value with each containing the parameter. A value driven equivalence class is a set of parameters which have the same associated value. Unlike pre defined value classes they cannot be defined in terms of value constraints or prefixes but rather parameters in a value driven equivalence class must have the same associated value. Referring to the example provided above one value driven equivalence class may be defined as a set of parameters where each parameter has an associated value of TKTID. and another value driven equivalence class may be defined as a set of parameters where each parameter has an associated value of TKTID..

If test case program determines the parameter in the received message is not part of a pre defined equivalence class decision NO branch test case program determines if the parameter meets the requirements of a pre defined exclusion class decision . If test case program determines the parameter meets the requirements of a pre defined exclusions class decision YES branch test case program associates the parameter with a no test class step . In the exemplary embodiment a no test class includes parameters that will not be tested. Once test case program creates a generalized test case the test case is later used by test case program to verify that a program is working properly. For example once the test case is generated and ready for utilization test case device takes the place of client device and test case program communicates with server program in the same fashion as client program . In the exemplary embodiment test case program transmits the messages transmitted by client program in the test sample and verifies that the responses by server program match the responses in the test sample. For example if for a first and second response by server program each response contains a parameter with both parameters belonging to the same value driven equivalence class the associated values of both parameters should be equal. If the associated values are not equal then there may be a bug or issue with server program . In the exemplary embodiment values for parameters that are in the no test class are not verified by test case program .

If test case program determines that the parameter does not meet the requirements of a pre defined exclusion class decision NO branch test case program associates the parameter with a value test class step . Parameters that are associated with a value test class are verified by test case program on an individual basis. For example once the generalized test case is created test case program verifies a parameter associated with a value test by verifying if the value associated with the parameter matches the value generated during the formation of the test case.

Test case program then determines if all messages in the test sample have been transmitted between server and client device decision . If test program determines that all messages in the test sample have not been transmitted between server and client device decision NO branch test case program returns back to step and analyzes the next message in the test sample.

If test case program determines that all messages in the test sample have been transmitted between server and client device decision YES branch test case program determines if any of the value driven equivalence classes formed contain only one associated parameter decision . If test case program determines that no value driven equivalence class formed contains only one associated parameter decision NO branch test case program creates a generalized test case from the formed value driven equivalence classes and value test classes step .

If test case program determines that one or more value driven equivalence classes contains only one associated parameter decision YES branch test case program removes the one or more value driven equivalence classes and associates the parameters contained in the removed value driven equivalence classes with a no test class step . Test case program then creates a generalized test case from the remaining value driven equivalence classes and value test classes step .

Once the generalized test case has been created test case device takes the place of client device and the test sample is re executed. Test case program then verifies that the server response is accurate by way of comparison to the generalized test case. Values for any parameters which fall in a value test class are verified by comparison to the value recorded for the value test class in the generalized test case. If the value matches the recorded value then the server response is verified and accurate. Values for a parameter which falls in a value driven equivalence class is verified by comparison to values for other members of the value driven equivalence class. For example if a first parameter belonging to a first value driven equivalence class is received with a corresponding value A and then a second parameter also belonging to the first value driven equivalence class is received with a corresponding value A the values of the two parameters are compared to determine if they match. If they do match the server response is verified. In addition for verification of a member of a value driven equivalence class the value recorded in the generalized test case is not used for verification purposes. Values of members of value driven equivalence classes are instead compared to other values corresponding to the value driven equivalence class received during the same iteration of the test sample. In other words the value A of the first parameter is compared to the value of the second parameter in order to verify correctness only if both parameters are received during the same iteration of the test sample. In previous or subsequent iterations of the test sample the first parameter may have different associated values however the values of each value driven equivalence class should match for each iteration.

In other embodiments machine learning may be used to create a generalized test case from multiple test samples. In this embodiment a computing device such as test case device may receive pre defined equivalence classes or may create a generalized test case without any pre defined equivalence classes. If pre defined equivalence classes are used test case program processes multiple test samples and creates value driven equivalence classes value test classes and no test classes in a similar manner as described above. If pre defined equivalence classes are not used test case program processes multiple test samples with each distinct parameter initially being designated as a value test class. Therefore test case program processes the first test sample initially designating each parameter with a unique associated value as value test class.

Within the first test sample each parameter is additionally associated with its own value driven equivalence class containing the parameter itself and all other parameters exposing the same value. For any subsequent test samples test classification as well as the associated value driven equivalence class are re computed for every parameter. A parameter is changed to equiv test class if the parameter was a value test in the previous test sample and the parameter value in the current test sample is different from the one in the previous test sample. Otherwise the test class remains the same. In addition the value driven class associated with the parameter is cleared of the parameters exposing a value which is different from the parameter s value in the current test sample. After the test samples and related computations have been completed each parameter classified as equiv test with a value driven equivalence class containing only one parameter is re classified as a no test .

Test case program executes test sample 1 and initially classifies each parameter as a value test class while also creating a value driven equivalence class for each parameter in the first test sample. Therefore test case program classifies each parameter as a value test and also creates a value driven equivalence class which contains all four parameters since they all expose the same value in the first test sample.

Test case program then executes the second test sample. Test case program classifies the first parameter P1 as a value test since it exposes the same value in the second test sample as the first test sample and also creates a first value driven equivalence class containing the first parameter. Test case program classifies the second parameter as equiv test since the value exposed by the parameter P2 in the second test sample is different from the value exposed in the first test sample. Test case program creates a second value driven equivalence class containing the second parameter. Test case program also classifies the third parameter P3 as equiv test and includes it in the second equivalence class since the value exposed by the third parameter in the second test sample is the same as the value exposed by the second parameter. Test case program classifies the fourth parameter as equiv test and creates a third value driven equivalence class containing the fourth parameter. After execution of the test samples test case program determines if any of the value driven equivalence classes contain only a single parameter. In this example the first and fourth value driven equivalence classes contain only a single parameter so they are removed. The first parameter remains a value test while the fourth parameter is re classified as a no test .

The foregoing description of various embodiments of the present invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art of the invention are intended to be included within the scope of the invention as defined by the accompanying claims.

Server client device and test case device include communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s .

Memory and persistent storage are examples of computer readable tangible storage devices and media. Memory may be for example one or more random access memories RAM cache or any other suitable volatile or non volatile storage device.

The programs server program in server client program in client device and test case program in test case device are stored in persistent storage for execution by one or more of the respective computer processors via one or more memories of memory . In the embodiment illustrated in persistent storage includes flash memory. Alternatively or in addition to flash memory persistent storage may include a magnetic disk storage device of an internal hard drive a solid state drive a semiconductor storage device read only memory ROM EPROM or any other computer readable tangible storage device that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include an optical or magnetic disk that is inserted into a drive for transfer onto another storage device that is also a part of persistent storage or other removable storage devices such as a thumb drive or smart card.

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Programs server program in server client program in client device and test case program in test case device may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to server client device and test case device . For example I O interface may provide a connection to external devices such as a keyboard keypad a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. the programs server program in server client program in client device and test case program in test case device can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s may also connect to display .

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

