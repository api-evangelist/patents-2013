---

title: Datacenter workflow automation scenarios using virtual databases
abstract: Information from multiple databases is retrieved and stored on a database storage system. Multiple point-in-time copies are obtained for each database. A point-in-time copy retrieves data changed in the database since the retrieval of a previous point-in-time copy. A virtual database (VDB) is created by creating a set of files in the data storage system. Each file in the set of files created for a VDB is linked to the database blocks on the database storage system associated with a point-in-time copy of the source database. The set of files associated with the VDB are mounted on a database server allowing the database server to read from and write to the set of files. Workflows based on VDBs allow various usage scenarios based on databases to be implemented efficiently, for example, testing and development, backup and recovery, and data warehouse building.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037612&OS=09037612&RS=09037612
owner: Delphix Corp.
number: 09037612
owner_city: Menlo Park
owner_country: US
publication_date: 20131021
---
This application is a continuation of U.S. patent application Ser. No. 13 316 263 filed on Dec. 9 2011 which is a continuation of U.S. patent application Ser. No. 12 603 545 filed on Oct. 21 2009 and issued on Apr. 17 2012 as U.S. Pat. No. 8 161 077 each of which is incorporated by reference herein in its entirety.

This invention relates generally to databases and in particular to storage efficient systems for managing databases and lifecycle workflows based on databases.

Databases store the data that is critical to an organization and thus form an important part of an organization s information technology infrastructure. As the information available in an organization grows so does the complexity of the infrastructure required to manage the databases that store the information. The increased complexity of the infrastructure increases the resources required to manage the databases and the applications that depend on the databases. These increased costs may include the costs associated with hardware for managing the databases as well as the costs associated with additional personnel needed to maintain the hardware. The increased complexity of the infrastructure also affects the maintenance operations associated with the databases for example causing backup and recovery operations to take significantly longer.

In a typical organization s infrastructure environment production database servers run applications that manage the day to day transactions of the organization. Changes to production databases or to applications that depend on the production databases are tested on copies of the databases to protect the production environment. Copies of the production databases may be required for several stages in the lifecycles of workflows associated with the production database and applications that depend on the production databases. For example the stages in the lifecycle of a change incorporated in a production database may include a development stage a tuning stage a testing stage a quality assurance stage a certification stage a training stage and a staging stage. Making copies of the production databases for each stage requires redundant and expensive hardware infrastructure as well as the time overhead required to copy the data which may take days or weeks. Additional hardware also requires additional costs associated with physically storing the hardware such as floor space requirements and costs related to power and cooling. Furthermore redundant hardware typically causes inefficient use of available resources.

Lifecycle workflows can be complex and often involve coordination across multiple teams. Hence making a database available for a specific purpose such as for supporting a particular stage in the lifecycle may require further processing associated with the databases. For example databases often contain critical confidential information causing security and integrity to be important considerations in an environment managing databases. As a result access permissions required for different teams working on different stages are often different. For example data that can be accessed by personnel managing the production database server is often different from data that can be accessed by a person working in the testing stage of the lifecycle. This causes further complications related to administration of permissions across various stages of the lifecycle of any workflow related to the databases.

Virtual databases VDBs combined with operations on virtual databases enable efficient execution of workflow scenarios that are typically executed using conventional database systems. An embodiment allows test and development of databases and database applications using a virtual database system. A source database is linked to a database storage system by receiving information identifying the source database. Multiple point in time copies of the source database are loaded by receiving database blocks for the point in time copies of the source database and storing them on the database storage system. A test virtual database VDB is provisioned to a test system and a development virtual database is provisioned to a development system. In an embodiment the test VDB is created from a point in time copy of a development VDB. The provisioning of the virtual databases is performed by creating a set of files linked to the stored database blocks on the storage system and mounting the set of files to the target system. A database server running on the target system is allowed to access the set of files. In an embodiment backup of the stored database blocks on the storage system may be performed by copying the database blocks to another storage system.

In some embodiments pre script and post script operations are performed before and after specific operations including linking loading and provisioning. The pre script and post script operations allow special purpose logic to be executed before or after a VDB operation for example copying of application specific data filtering of information by excluding selective information masking data and the like. In some embodiments pre script and post script operations associated with a provisioning operation allow setting of system environment associated with the VDB and applications running using the VDB. In some embodiments the test and development VDBs are refreshed by periodically obtaining point in time copies of the source database and automatically provisioning the VDBs based on the latest point in time copy obtained. In an embodiment a quality assurance QA VDB is provisioned based on a point in time copy of the development VDB. Users of the test VDB and QA VDB may be granted appropriate permissions allowing them access to the data in the QA VDB.

Another embodiment allows remote test and development of databases and database applications using a virtual database system. A source database is linked to a database storage system by receiving information identifying the source database. Multiple point in time copies of the source database are loaded by receiving database blocks for the point in time copies of the source database and storing them on the database storage system. The stored database blocks are transmitted from the first storage system to a second storage system. A test virtual database is provisioned to a test system and a development virtual database is provisioned to a development system based on the database blocks stored in the second storage system. In an embodiment the test VDB is created from a point in time copy of a development VDB. The provisioning of the virtual databases is performed by creating a set of files linked to the stored database blocks on the second storage system and mounting the set of files to the target system. A database server running on the target system is allowed to access the set of files. In some embodiments pre script and post script operations are performed before and after the VDB operations including linking loading and provisioning. For example pre script and post script operations associated with transmission of database blocks allow masking purging compression and encryption of data being transmitted.

Another embodiment allows replication of databases using a virtual database system. A source database to be replicated is linked to a storage system by receiving information identifying the source database. Multiple point in time copies of the source database are loaded by receiving database blocks for the point in time copies of the source database and storing them on the storage system. The database blocks stored in the storage system are replicated to a second storage system by transmitting database blocks from the first storage system to the second storage system. The transmitted database blocks represent database blocks in the first storage system that changed since a given point in time. Virtual databases are provisioned from the second storage system to a system running a database server. The provisioning of virtual database includes creation of a set of files linked to the stored database blocks on the second storage system and mounting of the set of files to the system running the database server. The database server running on the system is provided access to the set of files associated with the virtual database.

Another embodiment allows creation of data warehouse and data marts from a database. A source database containing data to be used for a data warehouse is linked to a storage system by receiving information identifying the source database. Multiple point in time copies of the source database are loaded by receiving database blocks for the point in time copies of the source database and storing them on the storage system. A virtual database VDB is provisioned to an operational data store ODS system by creating a set of files linked to the stored database blocks on the storage system and mounting the set of files to the operational data store system. Extract transform and load ETL operations are performed on the data in the virtual database and the output of the ETL operations is stored in a database in a data warehouse system. Database blocks for different point in time copies of the database in the data warehouse are received and stored in the storage system. A VDB is created and provisioned to a data mart system by creating a set of files linked to the stored database blocks associated with the database on the data warehouse system and mounting the set of files to the data mart system. In some embodiments data mart VDBs may be created and provisioned to a data mart system based on subsets of data in the data warehouse database.

In some embodiments the ODS VDB is refreshed by periodically obtaining point in time copies of the source database and automatically provisioning the VDBs based on the latest point in time copy obtained. Refreshing the ODS VDB allows refresh of the reports in the data warehouse database and the data marts automatically. In some embodiments backup of the storage system may be performed allowing backup of the entire data associated with the source database and the virtual databases created based on the source database.

An embodiment allows backups of source database using a database storage system for storing virtual databases. One or more source databases are linked to the database storage system. Multiple point in time copies of the source databases are loaded into the database storage system. Virtual databases are provisioned using the point in time copies of the source databases stored in the database storage system. Backup of database blocks stored in the database storage system is performed by transmitting database blocks associated with the source databases from the database storage system to a backup storage system. The database blocks are stored in the backup system for use for example in case of system crashes associated with the source databases. In an embodiment the backup storage system is a tape backup system.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

In certain embodiments of the invention one or more virtual databases are created based on the state of a production database or a virtual database at a particular point in time and the virtual databases can then be individually accessed and modified as desired. A database comprises data stored in a computer for use by computer implemented applications. A database server is a computer program that can interact with the database and provides database services for example access to the data stored in the database. Database servers include commercially available programs for example database servers included with database management systems provided by ORACLE SYBASE MICROSOFT SQL SERVER IBM s DB2 MYSQL and the like. A database may be implemented using a database model for example a relational mode object model hierarchical mode or network model. The term production database is used in particular examples to illustrate a useful application of the technology however it can be appreciated that the techniques disclosed can be used for any database regardless of whether the database is used as a production database. Furthermore embodiments can create a virtual database using storage level snapshots of production databases or clones of production databases instead of a live production database. The virtual databases are virtual in the sense that the physical implementation of the database files is decoupled from the logical use of the database files by a database server.

In one embodiment information from the production database is copied to a storage system at various times such as periodically. This enables reconstruction of the database files associated with the production database for these different points in time. The information may be managed in the storage system in an efficient manner so that copies of information are made only if necessary. For example if a portion of the database is unchanged from a version that was previously copied that unchanged portion need not be copied. A virtual database created for a point in time is stored as a set of files that contain the information of the database as available at that point in time. Each file includes a set of database blocks and the data structures for referring to the database blocks. In some embodiments the database blocks may be compressed in order to store them efficiently. In some embodiments the database blocks may be stored in the storage system data store in an encrypted form to increase security of stored data. A virtual database may be created on a database server by creating the database files for the production database corresponding to the state of the production database at a previous point in time as required for the database server. The files corresponding to the virtual database are made available to the database server using a file sharing mechanism which links the virtual database to the appropriate database blocks stored on the storage system. The process of making the virtual database available to a database server is called provisioning the virtual database. In some embodiments provisioning the virtual database includes managing the process of creating a running database server based on virtual database. Multiple VDBs can be provisioned based on the state of the production database at the same point in time. On the other hand different VDBs can be based on different point in time state of the same production database or different production databases. In some embodiments provisioned databases are monitored for health and user actions. The database storage system is notified of these events. The database storage system handles these events based on either built in or user specified rules. For example if a user action affects availability of a virtual database a warning message can be displayed on monitoring console or transmitted to a user via email. The database server on which a virtual database has been provisioned can then read from and write to the files stored on the storage system. A database block may be shared between different files each file associated with a different VDB. In particular a database block is shared if the corresponding virtual database systems are only reading the information in the database block and not writing to the database block. In one embodiment the virtual database manager makes copies of the database blocks only if necessary. For example a particular database block may be shared by multiple VDBs that read from the same database block. But if one of virtual database systems attempts to write to the database block a separate copy of the database block is made because the writing operation causes that database block to be different for the VDB corresponding to that virtual database systems than it is for the other VDBs.

In response to a request from the administrator system or based on a predefined schedule the database storage system may send a request for data to a production database system . The production database system responds by sending information stored in the production database as a stream of data . The request is sent periodically and the production database system responds by sending information representing changes of data stored in the production database since the last response sent by the production database system . The database storage system receives the data sent by the production database system and stores the data. The database storage system may analyze the data received to determine whether to store the information or skip the information if the information is not useful for reconstructing the database at previous time points. The database storage system stores the information efficiently for example by keeping versions of database blocks that have changed and reusing database blocks that have not changed. In an embodiment database storage system employs a hierarchical caching system where high speed solid state drive SSD or equivalent storage devices are configured for caching read operations and for persisting logs for writing operations to magnetic disks.

To create a virtual database the database storage system creates files that represent the information corresponding to the production database system at a given point in time. The database storage system exposes the corresponding files to a virtual database system using a file sharing system . The virtual database system runs a database server that can operate with the files exposed by the database storage system . Hence a virtual copy of the production database is created for the virtual database system for a given point in time in a storage efficient manner.

A production database system is typically used by an organization for maintaining its daily transactions. For example an online bookstore may save all the ongoing transactions related to book purchases book returns or inventory control in a production system . The production system includes a database server a production DB data store a vendor interface module and a production system library . In alternative configurations different and or additional modules can be included in a production database system .

The production DB data store stores data associated with a database that may represent for example information representing daily transactions of an enterprise. The database server is a computer program that provides database services and application programming interfaces APIs for managing data stored on the production DB data store . The production system library provides APIs useful for extracting information from the production database system . The vendor interface module represents APIs provided by a vendor for customizing functionality provided by the database server for example APIs to retrieve database blocks that changed since a previous time point. An example of a vendor interface module is the program code of a database server provided by vendor ORACLE that implements RMAN APIs. Database servers provided by other vendors for example MICROSOFT s SQL SERVER or IBM s DB2 have similar APIs. In one embodiment the vendor interface module mounts the production DB data store of the production database system on the database storage system using a file sharing system similar to the file sharing system . Mounting the production DB data store on the database storage system allows transfer of information stored on the production database system to the database storage system .

The production system library may be implemented in different ways depending on the requirements of the vendor interface module . In an embodiment the vendor interface module loads the production system library in order to call back functions implemented in the production system library . For example the production system library may be a shared object file with a .so or a .DLL file extension that contains executable program code that can be called by a C C executable program or by a JAVA program that uses the JAVA NATIVE INTERFACE for interaction with binary code generated by C C programs. Alternatively the production system library may be implemented using the JAVA programming language and installed in the production database system as a file with .jar extension. The java program requires a JAVA VIRTUAL MACHINE running on the production database system for execution. In another embodiment a part of the production system library may be implemented as an executable .so shared object file and another part of the production system library may be implemented as a JAVA program installed as a .jar file.

The vendor interface module responds to requests from database storage system and in response to the requests collects requested information from the production DB data store and returns the collected information to the database storage system . The vendor interface module may send request to the database server for retrieving information from the production DB data store . The vendor interface module loads the program code in the production system library and invokes it to transmit the stream of data for to the database storage system for further processing. In some embodiments the vendor interface module may directly interact with the production DB data store instead of sending a request to the database server to retrieve the necessary database blocks. In other embodiments the vendor interface module may retrieve the necessary database blocks from storage level snapshots of production databases or clones of production databases instead of a live production database.

The database storage system retrieves information available in the production database systems and stores it. The information retrieved includes database blocks comprising data stored in the database transaction log information metadata information related to the database information related to users of the database and the like. The information retrieved may also include configuration files associated with the databases. For example databases may use vendor specific configuration files to specify various configuration parameters including initialization parameters associated with the databases. Copying the configuration files allows a VDB to be created with configuration parameters similar to the source production database. In some embodiments the configuration parameters files may be modified by a database administrator using the user interface to customize the VDB configuration for a specific usage scenario. For example the production database may be accessed by a database server using a particular cache size whereas the corresponding VDB may be accessed by a database server using a different cache size.

The information retrieved may also include information associated with applications using the database for example an enterprise resource planning ERP application may be using the database and may have data specific to the ERP application. Retrieving the ERP application data allows a similar ERP application to be executed with a VDB created based on the production database system. This is beneficial for usage scenarios where a VDB is created for an environment similar to the production environment for example for testing and development. A database administrator can use the user interface to specify logic for copying the information that is specific to a production environment as well as logic for appropriately installing the information with a VDB for use by a virtual database system .

In some embodiments information regarding users of the production database for example the users with administrative privileges may be obtained by using specific APIs or by running specific scripts on the production database. The information about the users can be used to facilitate life cycle management of VDBs in the system. In an embodiment a database administrator is allowed to use the user interface in order to specify information regarding user accounts to be created and their access permissions. For example if the VDB is created for testing purposes test users may be created on the VDB for test organization whereas if the VDB is created as a standby for the production database only users with production support roles should have access. In some embodiments access permission may specify if a user can provision a privileged VDB. One example of privileged VDB is a VDB with full access to non public information information that may not be accessible to non privileged users for example social security numbers or credit card information. The corresponding un privileged VDB is a VDB with non public information masked or scrambled. Another example of privileged VDB is a VDB with sensitive data accessible transparently. The corresponding un privileged VDB is a VDB with sensitive information encrypted.

In some embodiments access privileges are simplified to three levels administrator owner and auditor. Administrator has full control of all managed objects including databases and hosts. The control available to an administrator included policy management. Owner has access to use of resources for example an owner can provision a VDB. Auditor can view logs but may not have rights to consume system resources.

The data stored in the storage system data store can be exposed to a virtual database system allowing the virtual database system to treat the data as a copy of the production database stored in the production database system . The database storage system includes a point in time copy manager a transaction log manager a interface manager a system configuration manager a storage allocation manager a file sharing manager a virtual database manager and a storage system data store . In alternative configurations different and or additional modules can be included in the database storage system .

The point in time copy manager interacts with the production database system by sending a request to the vendor interface module to retrieve information representing a point in time copy also referred to as a PIT copy of a database stored in the production DB data store . The point in time copy manager stores the data obtained from the production database system in the storage system data store . The data retrieved by the point in time copy manager corresponds to database blocks or pages of the database being copied from the production DB data store . After a first PIT copy request to retrieve information production DB data store a subsequent PIT copy request may need to retrieve only the data that changed in the database since the previous request. The data collected in the first request can be combined with the data collected in a second request to reconstruct a copy of the database corresponding to a point in time at which the data was retrieved from the production DB data store for the second request.

The transaction log manager sends request to the production database system for retrieving portions of the transaction logs stored in the production database system . In some embodiments the request from the transaction log manager is sent to the vendor interface module . The data obtained by the transaction log manager from the vendor interface module is stored in the storage system data store . In one embodiment a request for transaction logs retrieves only the changes in the transaction logs in the production database system since a previous request for the transaction logs was processed. The database blocks retrieved by a point in time copy manager combined with the transaction logs retrieved by the transaction log manager can be used to reconstruct a copy of a database in the production system corresponding to times in the past in between the times as which point in time copies are made.

The storage allocation manager provides the functionality of saving data retrieved from the production database system . For example the point in time copy manager may call APIs of storage allocation manager to save blocks of data retrieved from the production database system . The storage allocation manager keeps track of the various versions of each block of data that may be obtained from the production database system . For a given time point the storage allocation manager can be requested to provide the latest version of a block of data obtained before the given time point. The storage allocation manager can also be used for making copies of blocks of data. If a block of data is copied for read only purposes the storage allocation manager allocates only sufficient storage to keep a pointer of reference to the exiting block of data. However if an attempt to write to the copied block of data is made the storage allocation manager allocates sufficient storage to make an actual copy of the block of data to avoid updating the original block of data.

The file sharing manager allows files stored in the storage system data store to be shared across computers that may be connected with the database storage system over the network. The file sharing manager uses the file sharing system for sharing files. An example of a system for sharing files is a network file system NFS . A system for sharing files may utilize fiber channel Storage area networks FC SAN or network attached storage NAS or combinations and variations thereof. The system for sharing files may be based on small computer system interface SCSI protocol internet small computer system interface iSCSI protocol fiber channel protocols or other similar and related protocols. In some embodiments the database storage system may utilize a logical volume manager. Sharing a file stored in the storage system data store using the file sharing manager allows a remote computer for example the virtual database systems to access the data in the shared file. A remote system may be able to read and write from to the file shared by the storage system data store . In an embodiment files are organized in a format emulating a given file system disk layout such as the file system of WINDOWS operating system called NTFS or the UNIX file system UFS .

The virtual database manager receives requests for creation of a virtual database for a virtual database system . The request for creation of a virtual database may be sent by a database administrator using the administration system and identifies a production database system a virtual database system and includes a past point in time corresponding to which a virtual database needs to be created. The virtual database manager creates the necessary files corresponding to the virtual database being created and shares the files with the virtual database system . The database administrator for a virtual database system may be different from a database administrator for the production database system .

The interface manager renders for display information necessary for display using the administration system . A database administrator user can see information available in the storage system data store as well as take actions executed by the database storage system. For example a database administrator can see the different production databases stored in the storage system data store obtained from different production database systems . As another example the database administrator can request the database storage system to make a PIT copy of a database stored on a production database system at a particular point in time. In an embodiment the interface manager allows external applications to access information of the database storage system . For example the database storage system may provide application programming interface API to allow third party vendors to write applications based on database storage system . In an embodiment the interface manager provides web services that allow web applications to access information available in the database storage system . For example the database storage system can be part of a cloud computing environment. A third party vendor can use web services to implement various workflow scenarios based on VDBs for example the various workflow scenarios described herein. This allows automation of the workflow scenarios based on VDBs.

The system configuration manager allows a database administrator using the administration system to setup or change the configuration of the database storage system . For example when the database storage system is being initially setup or at a later stage the system configuration manager allows a database administrator user or an agent to specify production database systems and virtual database systems to connect to. The system configuration manager also allows a user with appropriate roles and privileges to setup policies specifying the schedule with which the point in time copy manager retrieves PIT copies of databases in the production database systems as well as the frequency and the times at which the transaction log manager retrieves updates to online transaction logs from the production database systems . In an embodiment a schedule can specify the frequency and times during the day for the PIT and log retrieval actions or it could be an a periodic schedule specifying the calendar days when the same action should take place.

In an embodiment policies can be defined by a database administrator and stored in the system configuration manager for various operations associated with the loading of point in time copies from production database systems loading of transaction logs from the production database systems purging of information from the database storage system including point in time copies of databases and transaction log information and provisioning of virtual database systems. A policy specifies rules for executing the specific operation. For example a policy may specify the operation to be executed based on a predetermined schedule. A policy may determine when to purge PIT copies stored in the database storage system based on number of PIT copies that have been accumulated for a production database. A policy may measure storage availability to determine when to purge information. For example if the amount of storage available reaches below a threshold level old PIT copies of selected databases may be purged. The policy may also specify priority of production databases to be used before purging information for example low priority database information is purged before purging high priority database information. In a particular workflow scenario a policy may determine when to obtain new information from a production database and automatically update VDB information and provision the updated VDB based on the new information.

A virtual database system includes a database server and a VDB system library . The database server is similar in functionality to the database server and is a computer program that provides database services and application programming interfaces APIs for managing data stored on a data store . The data managed by the database server may be stored on the storage system data store that is shared by the database storage system using a file sharing system . The VDB system library contains program code for processing requests sent by the database storage system . In alternative configurations different and or additional modules can be included in a virtual database system .

The production database system sends the requested data to the point in time copy manager . If the request is the first request for data associated with a database stored on the production database system the production database system sends the data of the entire database in reply. In response to subsequent requests the production database system sends only the data of the database blocks that changed since the last time a reply was sent in response to a previous request .

In an embodiment the vendor interface module sends a request to the database server to collect the information required for the reply . The vendor interface module also loads the program code available in the production system library . The database server sends a request for the necessary data to the data store and receives the requested data in response . The database server sends the requested data to the vendor interface module in response to the request . The vendor interface module invokes the production system library to package the data received from the database server into a format that can be processed by the point in time copy manager . The production system library sends the requested data stream that is formatted appropriately to the point in time copy manager . The production system library sends the information sent by the database server to the point in time copy manager . The vendor interface module in conjunction with the program code of the production system library builds the data stream for processing by the database storage system .

In other embodiments the vendor interface module in conjunction with the production system library obtains the required data directly from the data store and sends the data to the point in time copy manager . Typically these embodiments are beneficial when the database server does support appropriate APIs for extracting the necessary information. In these embodiments the production system library includes code to analyze the structures of the files of the database stored in the data store and also includes code to process metadata associated with database blocks stored in the data store to find database blocks that changed since a previous time point.

The reply is a stream of data comprising database blocks that may be stored in multiple files in the data store . The stream of data corresponding to the reply may interleave information associated with the different database blocks for example database blocks obtained from different files may be interleaved. Hence the program code of the point in time copy manager processes the data stream without assuming any particular order of the database blocks received in the data stream. These database blocks may also belong to different databases.

The point in time copy manager analyzes the metadata for each database block to determine if the database block needs to be stored in the storage system data store or it can be eliminated. For example the log sequence number in the metadata of the database block may indicate that even though the production system library sent the database block along with the data stream the database block was never updated since the last reply received from the production system library . Hence the block need not be stored in the storage system data store and can be skipped. Other examples of database blocks that need not be stored include temporary database blocks session specific database blocks and empty database blocks that have no data written in them. Another example of database blocks that need not be stored includes database blocks that are not meaningful or inaccessible to database software. Another example includes database blocks that have been marked deleted emptied or invalidated by database software.

In the above embodiment the information sent by the production database system included unnecessary blocks that were eliminated after the data stream was received by the database storage system . In other embodiment some or all of the unnecessary blocks may be eliminated while the data stream is built by the production system library . In this embodiment the data stream sent to the database storage system by the production database system is reduced in size resulting in efficient communication between the two systems.

By skipping database blocks that do not need to be stored as well as by using compression of the stored database blocks the database storage system may achieve significant savings in terms of storage required for the database files compared to the production database system for the data corresponding to the same database. For example the storage space occupied by the data corresponding to a production database in the storage system data store may be a quarter of the space occupied by the production database in the production DB data store . Note that the entire information corresponding to the production database system is obtained by the first PIT copy. Subsequent PIT copies obtain only the changed information in the production DB and can be much smaller than the information contained in the first PIT copy.

If the point in time copy manager determines that a database block in the data stream can be skipped the point in time copy manager proceeds to identify the next database block for processing. In an embodiment the point in time copy manager uses the database block size available in the stream metadata to identify database block boundaries in the stream of data. Each block is then processed accordingly.

If the point in time copy manager determines that the database block in the data stream needs to be stored in the data storage system data store the point in time copy manager analyzes the database block metadata to map the database block to a database file and a location within the file. The point in time copy manager sends a request to the storage allocation manager to save the database block. The storage allocation manager stores the database block in the appropriate file associated with database block in the storage system data store . The point in time copy manager checks if the data stream is processed completely. If there is unprocessed data remaining in the data stream the point in time copy manager proceeds to identify the next block of data for processing.

The storage allocation manager may keep several different versions of the database block in the storage system data store corresponding to the data in the database block if it is updated at different points in time. The file in which the database block is saved comprises a file header including metadata associated with the file and a sequence of database blocks. Each vendor specific database server organizes the database information as a set of files that the database server is capable of processing. The organization of information using the set of files for the database may be vendor specific and the database storage system incorporates the program logic to organize the database information in vendor specific organization of files. The point in time copy manager creates a set of files structure that may be similar to the set of files of the database in the data store . However the information in the storage system data store may include multiple versions of the database blocks each corresponding to updated information at different points in time. In an embodiment the storage allocation manager stores the database blocks associated with the files in an efficient manner such that a copy of a database block is made only if the database block was updated for a point in time. For example if a block B is updated at time T but not at time T whereas a block B is updated at time T and T both the data structure of the storage system data store does not keep a copy of the database block B for time T whereas it keeps a version of the database block B for time T.

In an embodiment the transaction log manager waits a predetermined interval of time between log file updates and sends the next request to the production database system to check if new updates to the transaction log updates are available. If no updates were made to the production database during this time interval the production database system informs the transaction log manager accordingly. If no new updates to transaction log for this time interval are available the transaction log manager waits for another interval of time. If the response from the production database system indicates that updates to transaction logs are available the transaction log manager sends the next request to the production database system for retrieving the next update to the transaction logs.

The incremental changes to the transaction logs may be obtained by the transaction log manager much more frequently compared to the point in time copy made by the point in time copy manager . For example the point in time copy manager may make a point in time copy of a database stored in the production database system once a day whereas the incremental changes to the transaction logs may be obtained by the transaction log manager every five minutes. Obtaining incremental changes to the transaction logs at a high frequency provides the ability to recreate a copy of a database from the production database system at a time point in between the times that a point in time copy is made by the point in time copy manager .

The production database system may reuse the transaction log files in a circular fashion thereby overwriting the previous log files. However the database storage system creates a new log file each time it determines to close the log file to which data is currently being written to start writing to a different log file. compares the log files of the production database system with the log files of the database storage system . The log files for the production database system represent online transaction log files. A limited number of files are typically allotted for storing the online transaction logs. For example shows three files and allotted by the production database system for storing the online transaction logs.

As shown in the arrows indicate a change of the transaction log file to which the transaction logs are being written by the production database system at a given time T the times T T T are assumed monotonically increasing . For example at time T the production database system stopped writing the transaction logs to the file and started writing the transaction logs to the file . Similarly at time T the production database system stopped writing the transaction logs to the file and started writing the transaction logs to the file . At time T the production database system stopped writing the transaction logs to the file and decided to reuse the transaction log file . Before reusing a transaction log file the production database system ensures that the transaction logs available in the transaction log file are applied to the appropriate database. The log file changes at times T T T are similar to the changes described above. Hence the production database system may typically reuse the transaction log files in a circular fashion to reuse storage.

The database storage system does not use a circular reuse strategy for log file data because the database storage system keeps the historical information for a much longer time determined by the log retention policy based on the transaction logs. Keeping the historical information based on the transaction logs provides the ability to create VDBs for past time points. VDBs can be created for past time points as long as transaction logs necessary to reconstruct the database snapshot corresponding to the past time points are available. A strategy based on circular reuse of transaction log files results in earlier transaction logs being overwritten. Hence a database system using circular reuse strategy for the log files can only reconstruct database snapshots based on the transaction logs for recent time points for which the transaction logs have not been overwritten.

The logs files stored in the database storage system are retained log files. The arrow represents transfer of information from a transaction log file of the production database system to the retained log file of the database storage system . Each arrow may correspond to several requests being sent from the transaction log manager to the production database system and several responses being sent by the production database system that are processed by the transaction log manager and stored.

For example arrow indicates copy of information from log file to during the time interval T to T. At time T the production database system started writing transaction logs to file . The database storage system creates a new log file and arrow indicates the transfer of transaction log information from file to log file . The above process continues but at time T even though the production database system starts reusing the log file the database storage system creates a new log file . Arrow indicates copy of transaction log information to log file . Accordingly the transaction log information from the same transaction log file of the production database system may be copied to multiple log files in the database storage system at different times. For example the information in transaction log file is copied to log file between T and T to log file between T and T and to log file between time T and T. The database storage system avoids reuse of the log files to keep the transaction log information for as long as possible as determined by the log retention policy. This allows a user to recreate a snapshot of a database at a previous time point for which the transaction log information is available.

The arrow shown in represents the step of creating the files representing a read write copy of a database based on the information as performed by the virtual database manager . The arrows represent the step of making the files available to the virtual database system via the file sharing system . is a flowchart of the process for creating a virtual database. The virtual database manager receives a request to create a virtual database for a Virtual Database System . The request to create a VDB may be received from the administration system . The request to create a VDB may include details of the production database system and the corresponding database that needs to be made available as a VDB the virtual database system for which the VDB needs to be created and a past time point Tn for which the database snapshot needs to be created as a VDB.

The virtual database manager identifies the recent most PIT copy associated with time Tj such that Tj

The mechanism of making storage efficient copies of the file structure is further described herein. The virtual database manager sends indicated by arrow in handles to the read write file structure to the associated virtual database system . In some embodiments the virtual database manager makes the file structures available to the virtual database system by sending a request to the file sharing manager . The file sharing manager in response shares the appropriate files with the virtual database system using the file sharing system . The virtual database manager also sends a request to the virtual database system to perform recovery of the new virtual database by applying the appropriate retained logs to the database blocks. In some embodiments the recovery of the database is automatically performed by the database when the database server starts in the virtual database system .

Assuming the PIT copy is the last PIT copy made for the configuration shown in the VDB file structures are created for time point T. When the structure are created the blocks V V . . . V may be implemented as pointers to the actual database block that stores the data. For example V represents the information in block F and since the block F was never updated during copies made at time T and T V points at F. V represents the information in block F and since F was updated at time T V points at the block F. Similarly V corresponds to block F that was updated at time T and points at the block F.

A VDB may be created using a point in time copy of another VDB as a source. For example assume VDB is created and provisioned to a virtual database system . Database blocks associated with the VDB are copied when the virtual database system writes to the database blocks for the first time. Point in time copies of VDB are also made based on a predefined schedule. This allows a user to create a second virtual database VDB based on a point in time copy of VDB. Transaction logs of VDB are also stored allowing a user to create the second virtual database VDB based on any previous state of VDB that may be in between point in time copies of VDB.

Since the structure illustrated in structure illustrated in or structure illustrated in are read write structures the virtual database system is allowed to read from these structures as well as write to them. When the virtual database system writes to a block Vij space is allocated for the database block and the data of the corresponding database block copied to the space allocated. For example if the virtual database system writes to the block V space is allocated and block F copied to the allocated block. Hence the original copy of the block F is maintained as a read only copy and the virtual database system is allowed to write to a copy of the appropriate database block created specifically for the virtual database system . This can be considered a lazy mechanism for creating copies of the database blocks that copies a database blocks only if the corresponding virtual database system writes to the database block. Since the number of blocks that a virtual database system writes to may be a small fraction of the total number of blocks associated with the VDB the above structure stores the data associated with the VDB in a highly storage efficient manner. A database block that is not written to by virtual database systems may be shared by several virtual database systems without being copied for a specific virtual database systems .

The steps performed in a workflow scenario based on VDBs can be significantly different from the operations performed for the same workflow scenario using conventional systems. These steps may be executed by a database administrator of the database storage system or executed automatically using a script. Various operations associated with a virtual database are described below.

The link operation provides information necessary to access a database on a production database system to the system configuration manager of the database storage system . The information necessary to access the database enables the database storage system to retrieve data from the production database system . The information may include the name of the database network address of the production database system hosting the database and access control information. As part of the linking operation the database storage system may communicate with the production database system to validate the information of the database. The database storage system can retrieve database blocks from the linked database in the production database system and store them in the storage system data store . The database blocks stored in the storage system data store can be used to create virtual databases. In some embodiments linking may specify that only a part of source database needs to be copied rather than the whole source database. For example in relational databases a part of the source database could be a table space a set of one or more tables a subset of a table or a set of subsets of tables. In an embodiment a user can specify a script for computing a part of a database.

The load operation retrieves data from a database of the production database system for storage in the database storage system . The database needs to be linked to the database storage system before the database can be loaded. If the load operation is retrieving the data of the database for the first time the entire data available in the database is retrieved. As a result the first load operation can be slow and may take several hours or days depending on the size of the database and the network bandwidth based on state of the art hardware. Subsequent load operations may take significantly less time since they retrieve only changes in the database since a previous load operation. The load operation is performed periodically to obtain the changes to the database on an ongoing basis. The load operation may obtain database blocks of the database and or transaction logs representing updates to the database since a previous point in time. The input required for the load operation includes information identifying a previously linked database. If only a part of the source database is specified in linking only that part will be loaded.

The load operation can also incrementally update information available in a VDB. The information obtained from the production database system by a database storage system may be updated periodically. As the information obtained from the production database system available in the database storage system is updated the information provisioned to the virtual database system can also be updated. It is possible that the data in the VDB is updated by the virtual database system . In this case the incremental load identifies the updates made by the virtual database system and compares them with the changes retrieved from the production database system . If there are no conflicts in the two sets of updates the load operation can succeed by applying the changes of the production database system to the VDB. If there are conflicts a report of the conflicts may be presented to a database administrator and input requested from the database administrator to help resolve the conflicts. In one embodiment the conflicts between the updates from the two sources are detected by identifying the database blocks affected by the two updates. If there is no overlap between the database blocks of the two sets of updates the database storage system determines that there are no conflicts. If only part of source database is specified in linking only changes to that part will be loaded.

The provision operation creates a virtual database in the database storage system and makes it available to a virtual database system . The virtual database may be created based on a point in time copy of a source database or a point in time copy of another virtual database. One or more read write files may be created for the VDB and shared with the virtual database system using the file sharing system . The read write files include structures that point to database blocks stored in the storage system data store . The input required for the provision operation includes information identifying a previously linked and loaded database or an existing VDB a previous time point corresponding to the desired state of the database and information identifying a virtual database system for which the virtual database is being provisioned. In some embodiments a part of a VDB could be provisioned. Similarly parts from different VDBs may be provisioned together to form a new VDB. In other embodiments several VDBs may be provisioned together as a group using application specific coordination scheme. These group oriented provisioning may involve provisioning or coordination of provisioning of application logic or configuration.

The bookmarking operation marks an application significant point in time in one or more virtual databases. The resulting bookmark can be used to direct provisioning operation. Typically the operation is triggered by user or external program through administration system . Database storage system returns a token as the resulted bookmark is stored in database storage system . Later user or external programs can provision the VDB or the group of VDBs to the same application significant point in time using returned token. For example an external program may wish to capture production database in certain state such as right after a massive batch processing run. User could invoke bookmarking operation via administration system and save returned token. Later user can provision the VDB to the same state by supplying saved token. In some embodiments tokens are in the form of string.

The refresh operation corresponds to the database storage system periodically updating a VDB based on the latest information from the source database system . For example a VDB may be used for a reporting system that generates report for users to view. The refresh operation automatically loads the latest information periodically from a production database system for example daily. The VDB being refreshed is shutdown. The VDB is updated with the latest point in time copy of the production database system and the VDB restarted. Accordingly the users of the corresponding virtual database system see the latest reports based on the latest point in time copy of the data in the production database system . In an embodiment the VDB may also be refreshed based on transaction logs obtained in between point in time copies obtained from production database system . The input required for a refresh operation includes information identifying a VDB to be refreshed and a schedule for refreshing the data.

The pre script operation corresponds to execution of special purpose instructions that perform specific tasks before performing another database storage system operation. For example a pre script operation may be performed before provisioning a VDB or a load of a database from the production database server . A database may be used along with applications that require application specific data stored outside the database. When the database is refreshed or loaded a pre script operation can be executed to load the application specific data to the database storage system . The input to the pre script operation may include an executable script specifying the operations to be performed and details of the database storage system operation before which the pre script operation is performed.

The post script operation corresponds to execution of special purpose instructions that perform specific tasks after performing database storage system operation. For example a post script operation may be performed after provisioning a VDB to a virtual database system . Testing and development of an application using the database in the production database system can be performed by running a similar application using a testing or development virtual database system . In this scenario the application specific data copied from the production database server by the pre script operation may have to be further copied to the virtual database system that runs a corresponding application. The instructions for copying the application specific data from the database storage system to the virtual database system are executed as a post script operation after the provision operation. The input to the post script operation includes an executable script specifying the operations to be performed and details of the database storage system operation after which the post script operation is performed.

The pre script and post script operations can be associated with various VDB operations. For example pre script operation can be performed before a refresh operation and a corresponding post script operation performed after the refresh operation to allow copy installation of specific information before after the refresh operation. Similarly pre script post script operations may be associated with other VDB operations including link load provision and export among other operations. For example during linking or loading data from a source database pre scripting post scripting operations allow scrubbing of data by using compression masking or removing data including columns or rows of database tables. Pre scripting and post scripting allows dealing with application data associated with applications using the source database and or the VDB. Pre scripting and post scripting allows management of system environment issues associated with provisioning of VDBs and allows starting stopping activities before after a VDB is provisioned.

The share operation corresponds to granting permission to another user in order to allow the user to access a VDB. In an embodiment the share operation may include the step of creating a new VDB and provisioning it for sharing with a new user or a set of users. For example in a test and development environment after reaching a particular stage of development using a VDB the VDB may be shared with test users. The input required for a share operation may include information a VDB to be shared information identifying users with whom the VDB is shared and access control information identifying the level of permissions granted to the users.

The export operation copies the information available in a database from one computer to another. Typically the information is copied to a target computer for assembly as a database. A stage operation corresponds to an export operation that copies the database information to a staging server. A staging server is typically used for performing system level testing of a database before using changes made to the database or to a database application in a production environment. The input to the export operation includes information identifying the VDB to be exported and information identifying the target machine to which the data from the VDB needs to be exported.

The mask operation corresponds to altering or skipping specific information in a database when the information in the database is being copied. For example when a copy of a database is made sensitive information in the source may not be copied to the target. Another example is that data is scrambled when database is provisioned. Examples of sensitive information include credit card information or social security numbers. Example scenarios where database information is masked include making a copy of a production database for testing purposes. Users of the database that perform testing using a VDB may not need the sensitive information stored in the production database system . Other operations that can transform data being copied from a source database include compress and encrypt. The compress operation transforms the data by preserving the original information but the converting the format of the data so that it occupies less space when stored. The encrypt operation transforms the data to a format that cannot be read by applications that do not have the logic to decode the encrypted information. The inputs to the mask compress or encrypt operations include information identifying a source VDB and a target database. The target database may itself be a VDB or the data can be exported to a conventional system.

The purge operation deletes information not needed from a VDB. Typically information is purged when it occupies large amount of space and is not needed anymore. For example a database may be storing event data associated with events occurring in a system over a long period of time. Old data that is not needed any more or data that has been archived can be purged from the database. The purge operation can be performed when the database information is copied by skipping the information to be purged from the copy operation. The inputs for a purge operation can include information identifying a source VDB and a target database. The target database can be a VDB or it can be a conventional database.

The extract transform and load ETL operations refers to typical operations performed in a data warehousing project. The extract step retrieves data from a source the transform step modifies the data based on certain operational needs and the load operation loads the data to a target system. The input required by the ETL operations includes information identifying a source database information identifying a target database and operations to be performed for transformation of the data. The inputs for the ETL operation can include information identifying a source VDB and a target database. The target database can be a VDB or it can be a conventional database.

The replicate operation transfers changes from the data stored in a source storage system to a target storage system. The data being replicated can either be a VDB or the data stored in the storage system data store corresponding to the database blocks obtained from one or more production database systems . The source and target storage systems need to be setup appropriately for the replicate operation. Program code for replication on the source storage system may periodically identify the changes in the data stored in the source storage system and send the changes to the target storage system. Similarly program code on the target storage system may receive the changes form the source storage system and process them appropriately to incorporate the changes. Replication can be used for high availability by mirroring the data from the source storage system to the target storage system. The target storage system is available for use in case the source storage system becomes unavailable for some reason. The inputs for the replicate operation may include information identifying a source system and a target system.

The backup operation creates a copy of the data available in a storage system such that the backup copy of the storage system can be used to reconstruct information of the original storage system in case the original data is lost. The restore operation recovers the information available in the backup copy and reconstructs the information. Note that any changes in the original storage system since the backup was created may be lost unless the update information is saved in some format. In some embodiments the backup information is stored on large storage systems with possibly slow retrieval speed for example tape backup systems.

Other VDB operations based on the concepts defined herein can be defined and used for datacenter workflow automation. VDB operations can also be created by combining existing VDB operations. Different workflow scenarios that utilize the above operations based on VDBs or database storage systems are described below. For each workflow scenario a brief description of the scenario based on conventional systems is compared with the scenario based on virtual databases.

In some organizations different activities involved in a workflow may be performed by different physical locations. For example production server may be located in one site of the organization whereas development and testing may be performed in another site of the organization. The other site performing development and testing may be offshore resulting in slow network communication between the two sites. In this scenario the development system and test system shown in may be available on one site and the remaining systems including the production system the QA system and the staging system on a different site.

In another embodiment the data available in the storage system data store is backed up using a backup system . The backup operation may initially copy the entire data available in the storage system data store and subsequently copy incremental changes of the data stored in the storage system data store . The amount of data stored in the storage system data store can be significantly less than the amount of data stored by the data store of the backup system since only changes made to the databases are stored in the storage system data store . Hence the time required to link load the data in databases to the storage system data store combined with the time taken to backup the data of storage system data store can be significantly less than the time taken by the backup operations in a large enterprise especially when it comes to the load and time required from the source databases.

In several workflow scenarios information in a source database is periodically copied to a target database. For example information may be copied from a source database to a target database used for recovery of information in case the source database is destroyed in a disaster the process known as disaster recovery . Information may also be copied to one or more databases to increase the availability of the data to users. For example if the source database is down for maintenance or for other reasons the target database can be made available to the users. In some usage scenarios information is copied from a source database to a target database that is used for reporting purposes. The execution of reports on a production database system may cause significant load on a database. Since the production database system is used for transaction processing it is preferred that a different server synchronized with the database on the production database system be used for generating reports. The target database is updated frequently to provide up to date reports using the reporting infrastructure. Another scenario that requires copy of information from a source database to a target database is the migration of databases from one machine to another. Migration of databases may be required when an enterprise upgrades software to newer versions for example upgrades to a newer version of operating system a newer version of database management system a newer version of an application or upgrade to new hardware. Migration of databases may also be required from one physical location to another for example when a company is acquired by another company.

Various parameters related to the copy operation including the rate of transfer frequency of transfer type of information being transferred may depend on the specific scenario. The source database systems and the target databases may be situated in different physical locations for example geographically separate locations illustrated as the first site and the second site . Typically machines situated in different physical locations have slow network communication compared to machines situated in the same physical location. Embodiments described herein apply to source and target database systems situated in the same physical location as well as different locations.

In the scenario of migration of databases the operation may copy the entire data in the storage system data store . In the scenario of replication the changes in the storage system data store may be copied periodically to the storage system data store . The changes to storage system data store may be applied to VDBs provisioned to target database systems using the refresh operations. If any changes are made to the VDBs by the target database system the changes may be propagated back to the storage system data store .

The operation makes databases stored in the storage system data store available to target database systems . In the scenario of high availability systems the operation may correspond to provisioning a VDB from the storage system data store to target database systems . In the scenario of disaster recovery the operation may correspond to exporting a database to the target database systems . As shown in there can be VDBs provisioned by the source database storage system to VDB systems . Equivalent VDBs can be created using the data in the target database storage system and provisioned to VDB systems . Any changes made to the VDBs in the source database storage system are automatically saved in the storage system data store and get propagated to the target database storage system by the transfer operation .

In one embodiment the target database storage system may have all the modules illustrated in prior to the operation . In another embodiment a machine that does not have the modules of a database storage system shown in may be provided for use as the target database storage system . For example a uses may provide a new machine that does not have all the necessary software installed on it to act as a database storage system . In this embodiment the operation copies the program code that implements the modules of a database storage system to the target machine along with the data stored in the storage system data store . The program code copied to the target machine is installed and prepared for execution. Accordingly the machine provided for use as the target database storage system is prepared to execute the modules of a database storage system . After the data associated with database stored in the storage system data store is copied to the storage system data store the target database storage system can perform VDB related operations for example creating a virtual database or provisioning a virtual database to a VDB system .

In an embodiment the database storage system can also be used in a high availability scenario where it acts as a standby system that can be used when the source database system is down. The database storage system acts as a standby database by creating a VDB and provisioning the created VDB to the VDB system . The VDB system can acts as the standby database when the corresponding source database system is down. The database request that were processed by the source database system can be processed by the VDB system while the source database system is down. When the source database system is ready to process requests the changes made to the VDB by the VDB system are exported to the source storage system. After applying the changes from the VDB system to the source database system the database requests can be diverted back to the source database system .

The machine may be a server computer a client computer a personal computer PC a tablet PC a set top box STB a personal digital assistant PDA a cellular telephone a smartphone a web appliance a network router switch or bridge or any machine capable of executing instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute instructions to perform any one or more of the methodologies discussed herein.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU a digital signal processor DSP one or more application specific integrated circuits ASICs one or more radio frequency integrated circuits RFICs or any combination of these a main memory and a static memory which are configured to communicate with each other via a bus . The computer system may further include graphics display unit e.g. a plasma display panel PDP a liquid crystal display LCD a projector or a cathode ray tube CRT . The computer system may also include alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse a trackball a joystick a motion sensor or other pointing instrument a storage unit a signal generation device e.g. a speaker and a network interface device which also are configured to communicate via the bus .

The storage unit includes a machine readable medium on which is stored instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions e.g. software may also reside completely or at least partially within the main memory or within the processor e.g. within a processor s cache memory during execution thereof by the computer system the main memory and the processor also constituting machine readable media. The instructions e.g. software may be transmitted or received over a network via the network interface device .

While machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions e.g. instructions . The term machine readable medium shall also be taken to include any medium that is capable of storing instructions e.g. instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies disclosed herein. The term machine readable medium includes but not be limited to data repositories in the form of solid state memories optical media and magnetic media.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. As used herein hardware implemented module refers to a hardware module. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented hardware modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. application program interfaces APIs . 

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to these signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example some embodiments may be described using the term connected to indicate that two or more elements are in direct physical or electrical contact with each other. In another example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still cooperate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and processes for datacenter workflow automation scenarios using virtual databases created from point in time copies of production databases and stored in a storage manager. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

