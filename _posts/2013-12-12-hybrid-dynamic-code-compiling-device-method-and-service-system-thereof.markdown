---

title: Hybrid dynamic code compiling device, method, and service system thereof
abstract: An exemplary embodiment of the present disclosure illustrates a hybrid dynamic code compiling device having a parser, a native code generator, and a dynamic code rewriter, wherein the parser is coupled to the native code generator and the dynamic code rewriter. The parser receives and parses a first dynamic code to divide the first dynamic code into compilable blocks and non-compilable blocks. The native code generator generates a native code according to the compilable blocks. The dynamic code rewriter rewrites the non-compilable blocks to generate a second dynamic code, wherein the second dynamic code has function calls which communicate between the native code and the first dynamic code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09182953&OS=09182953&RS=09182953
owner: INSTITUTE FOR INFORMATION INDUSTRY
number: 09182953
owner_city: Taipei
owner_country: TW
publication_date: 20131212
---
The present disclosure relates to a dynamic code compiling device in particular to a hybrid dynamic code compiling device a hybrid dynamic code compiling method and a service system thereof.

Currently the network and electronic technology develops rapidly and by using a terminal device people can easily browse the web page easily to obtain required service and information. The content of the web page can be edited by text markup language such as hyper text markup language HTML so as to show the structured information such as title paragraph and list table .

However the text markup language is usually used to edit static or non interactive web page but hardly used to edit the dynamic or interactive web page. Thus a dynamic directly compiling program language is provided such as JavaScript . JavaScript is a dynamic weak prototype and prototype based language which can support built in prototype. JavaScript code can be embedded in the HTML web page and can be written in a single file which has the auxiliary file name of js so as to easily achieve separation of structure and behavior. JavaScript code can be used to embed the dynamic script in the HTML web page response the browser event access the element of the HTML web page verify data before the data is sent to the server detect browser information of the guest or control cookies.

Currently Mozilla provides an optimization solution for JavaScript the content of a pre defined file named as ASM.js is compared with the received JavaScript code so as to convert the received JavaScript code to C C code through a low level virtual machine LLVM . Therefore the terminal device such as the electronic device with iOs Windows or Android system can execute the C C code to display the dynamic or interactive web page. However when the received JavaScript code does not exist in codebase of the pre defined file named as ASM.js the received JavaScript code cannot be converted to the C C code. That is the optimization solution for JavaScript provided by Mozilla lacks of flexibility.

Furthermore Google provides a JavaScript engine called by V8 engine. Before the JavaScript code is executed the V8 engine does not direct compile the JavaScript code and does not compile the JavaScript code to the byte code but compiles the JavaScript code to a machine code to increase the performance. However the V8 engine still cannot avoid the time consumption for loading the JavaScript code. In addition the JavaScript code itself cannot control the release of the memory space and the memory leak may occur. Thus the V8 engine is designed to have a garbage collection GC function.

The garbage collection is an automatic memory management mechanism. When the data of variables objects or strings stored in the dynamic memory is useless the garbage collection is used to release the memory space occupied by the data. The garbage collection of different strategy can be stop the world STW garbage collection concurrent garbage collection or incremental garbage collection. When the system determines the garbage collection to be executed the stop the world garbage collection stops executing the current program and begins to execute the garbage collection. The concurrent garbage collection executes the garbage collection without stopping the program execution but can merely execute the uncomplicated garbage collection by contrast thus causing poor performance. The incremental garbage collection adopts the stop the world garbage collection and the concurrent garbage collection and determines tradeoff of both of the stop the world garbage collection and the concurrent garbage collection. Thus the incremental garbage collection usually executes uncomplicated garbage collection as the concurrent garbage collection but when the system determines the complicated garbage collection to be executed as the stop the world garbage collection the incremental garbage collection stops executing the current program and begins to execute the complicated garbage collection.

It is known that the stop the world garbage collection and the incremental garbage collection cannot be controlled externally and the concurrent garbage collection may cause the poor performance. V8 engine currently adopts the incremental garbage collection to reduce the impact of the executing program interruption. However when incremental garbage collection executes stop the world garbage collection incremental garbage collection still cannot be controlled externally and the executing program still may be stopped at unexpected time thus causing the poor user experience.

An exemplary embodiment of the present disclosure provides a hybrid dynamic code compiling device comprising a parser a native code generator and a dynamic code rewriter wherein the parser is coupled to the native code generator and the dynamic code rewriter. The parser is used to receive and parse a first dynamic code to divide the first dynamic code into compilable blocks and non compilable blocks. The native code generator is used to generate a native code according to the compilable blocks. The dynamic code rewriter rewrites the non compilable blocks to generate a second dynamic code wherein the second dynamic code has function calls which communicate between the first dynamic code and the native code.

An exemplary embodiment of the present disclosure provides hybrid dynamic code compiling method and the hybrid dynamic code compiling method comprises the following steps. At step A a first dynamic code is received and parsed to divide the first dynamic code into compilable blocks and non compilable blocks. At step B a native code is generated according to the compilable blocks. At step C the non compilable blocks is rewritten to generate a second dynamic code wherein the second dynamic code has function calls which communicate between the first dynamic code and the native code.

An exemplary embodiment of the present disclosure provides a service system comprising a computing device a server and a terminal device wherein the server is connected to the computing device and the terminal device is connected to the server. At least one or combination of the computing device the server and the terminal device is used to execute the hybrid dynamic code compiling method mentioned above.

To sum up the hybrid dynamic code compiling device method and the service system thereof provided by the exemplary embodiments of the present disclosure can efficiently increase the dynamic code processing performance of the terminal device.

In order to further understand the techniques means and effects of the present disclosure the following detailed descriptions and appended drawings are hereby referred such that through which the purposes features and aspects of the present disclosure can be thoroughly and concretely appreciated however the appended drawings are merely provided for reference and illustration without any intention to be used for limiting the present disclosure.

Reference will now be made in detail to the exemplary embodiments of the present disclosure examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers are used in the drawings and the description to refer to the same or like parts.

Exemplary embodiments of the present disclosure provide a hybrid dynamic code compiling device and method and the hybrid dynamic code compiling device and method can be implemented by software or hardware. The hybrid dynamic code compiling device and method receive a dynamic code such as JavaScript code and parse the dynamic code to divide the dynamic code into compilable blocks and non compilable blocks. Next the hybrid dynamic code compiling device and method generate a native code according to the compilable blocks such as C C code or native client application programming interface API of JavaScript and rewrite the non compilable blocks to generate a revised dynamic code wherein the revised dynamic code has function calls which communicate between the original dynamic code and the native code.

Next the terminal device can directly analyze the native code through a browser or other decoding device such as web page browser for iOs Windows or Android system and then analyze the revised dynamic code through a dynamic code decoding engine of the terminal device. Since the revised dynamic code has the function calls which communicated between the original dynamic code and the native code after the terminal device analyzes the native code and the revised dynamic code the terminal device can entirely execute the content of the original dynamic code so as to display the dynamic or interactive web page corresponding to the original dynamic code.

In addition the hybrid dynamic code compiling device and method can further analyze the dynamic code and obtain an annotation of an application programming provided by a system to which the dynamic code corresponds so as to intercept function calls of garbage collection and analyze the annotation to generate the native code and the revised dynamic code accordingly. Therefore the terminal device can release the memory space according to the design of the web page designed. In other words the hybrid dynamic code compiling device and method can allow the web page designer to add the annotation according to the requirements so as to accelerate the processing speed of the server by using the annotation or control the memory space release of the terminal device to prevent the memory leak of the terminal device.

Moreover an exemplary embodiment of the present disclosure further provides a service system using the mentioned hybrid dynamic code compiling device or method. The mentioned hybrid dynamic code compiling device or method can be implemented by at least one or combination of the computing device the server and the terminal device in the service system. Thus the dynamic code edited by the web page designer is parsed and compilable portion of the dynamic code i.e. compilable blocks is converted to the native code and the non compilable portion of the dynamic code i.e. non compilable blocks is rewritten. The terminal device can use the native code and the revised dynamic code to display the dynamic or interactive web page corresponding to the original dynamic code. In other words processing speed and memory efficiency of the terminal device for displaying the dynamic or interactive web page can be increased.

Referring to is a schematic block diagram of a hybrid dynamic code compiling device according to an exemplary embodiment of the present disclosure. The hybrid dynamic code compiling device comprises a parser a help analyzer an optimizer a native code generator and a dynamic code rewriter . The parser is coupled to the help analyzer the optimizer and the dynamic code rewriter and the optimizer is coupled to the native code generator .

The help analyzer is used to receive a text markup language file such as HTML file and analyze the text markup language file to generate help information to the parser wherein the help information is for example interactive information of the dynamic code and web page interface. The parser receives the dynamic code and parses the dynamic code through the help of the help information so as to divide the dynamic code into compilable blocks i.e. the compilable portion of the dynamic code and non compilable blocks i.e. the non compilable portion of the dynamic code . The optimizer receives the compilable blocks and optimizes the compilable blocks. The native code generator is used to receive optimized compilable blocks and convert the optimized compilable blocks to a native code.

Additionally the dynamic code rewriter rewrites the non compilable blocks to generate a revised dynamic code wherein the revised dynamic code has function calls which communicate between the original dynamic code and the native code. Since the revised dynamic code has function calls which communicate between the original dynamic code and the native code after the terminal device analyzes the native code and the revised dynamic code the terminal device can entirely execute the content of the original dynamic code and display the dynamic or interactive web page corresponding to the original dynamic code.

Next the detail how the parser divides the dynamic code into the compilable blocks and the non compilable blocks is illustrated as follows. Though the characteristic of the dynamic code such as JavaScript code is significantly different from that of the native code such as C C code the syntax structure of the dynamic code is similar to that of the native code. Thus the parser traverses the abstraction tree AST and stores the dynamic code according to the syntax structure i.e. sorts the syntax structure of the dynamic code so as to accelerate the compiling process and extract the structured codes accordingly. Furthermore since the objects or classes in the dynamic code may be indefinitely declared i.e. the objects or the classes in the dynamic code may be hidden objects or classes the parser must analyze batches of information associated with the objects or classes to compare the objects or classes in the dynamic code with those in the native code. In addition to the purpose of the traditional compiling technology the parser can further records the occurred variables to form the base of the type inference. It is known that the parser can extract the structured codes the batches of object or class information and the batches of variable information from the dynamic code to establish blocks and portion of the blocks can be the compilable portion of blocks which are converted to the native code.

To put it concretely the parser checks whether the blocks formed by the structured codes the batches of object or class information and the batches of variable information can be the compilable blocks by using an established symbol table. The established symbol table records relation between symbol types and whether the symbol types are compilable. For example the local variable is recorded to be compilable the global variable is recorded to be non compilable the eval in the built in variable is recorded to be non compilable and other variable in the built in variable is recorded to be non compilable or compilable according to the actual implementation. When the block has a global variable or an eval in the built in variable the block is determined to be the non compilable block. By contrast when the block merely has single one or several local variables the block is determined be possible compilable block. Next the parser parser performs a type inference on the possible compilable blocks. When the possible compilable block cannot be inferred the possible compilable block is determined to be the non compilable block. When the possible compilable block can be inferred the possible compilable block is determined to be the compilable block.

Moreover the hybrid dynamic code compiling device in the exemplary embodiment further allow the web page designer to control the garbage collection such that a time for the memory space of the terminal device to be released can be controlled according to the requirements of the web page designer i.e. the hybrid dynamic code compiling device provides an application programming interface to the web page designer such that the web page designer is allowed to call the system to execute the garbage collection. Thus through a built in specific function in the parser when the parser parses the dynamic code the parser can obtain the annotation of the application programming interface provided by the system to which the dynamic code corresponds and intercept the function calls of the garbage collection such as the function calls of the stop the world garbage collection defined in V8 engine. Then the parser analyzes the annotation to determine whether the web page designer want to process the garbage collection for the specific object and generates the native code and the revised dynamic code accordingly such that the terminal device can execute the garbage collection according to the native code and the revised dynamic code i.e. the native code and the revised dynamic code generated further according to the annotation are used to indicate the terminal device when the memory space to be released according to the annotation. In another implementation the parser may not intercept the function calls of the stop the world garbage collection which the system needs to execute but just can analyze the annotation to determine whether the web page designer want to process the garbage collection for the specific object so as to generate the native code and the revised code to the terminal device and then the terminal device can determine when the memory space to be released according to the indications of system and the web page designer. Take V8 engine for example the front end parser of V8 engine in the terminal device is correspondingly modified such that the terminal device can trigger the garbage collection according to the annotation edited by the web page designer after receiving the native code and the revised dynamic code.

In the exemplary embodiment the help analyzer and the optimizer are not the necessary elements of the hybrid dynamic code compiling device . The help analyzer can be removed from the hybrid dynamic code compiling device and the parser can parse the dynamic code without referring the help information generated by the help analyzer . The optimizer can be removed from the hybrid dynamic code compiling device and the native code generator can generate the native code directly according to the compilable blocks which are not optimized. In short whether the hybrid dynamic code compiling device has the help analyzer and or the optimizer is not used to limit the present disclosure.

It is noted that the hybrid dynamic code compiling device can be integrated in single one chip by integrated circuit implementation formed by multiple discrete circuits or implemented by multiple software code based modules. For example the hybrid dynamic code compiling device can be a software package implemented by the software provider or a hardware device sold by the hardware provider wherein the hardware device can be externally connected to such as through the universal serial bus or built in the computing device server or the terminal device. To sum up the detailed implementation of the hybrid dynamic code compiling device is not limit in the present disclosure.

Referring to is a schematic diagram of a service system according to an exemplary embodiment of the present disclosure. The service system comprises a computing device a server an internet and terminal devices through . The computing device is wiredly or wirelessly connected to the server through the internet manner and the server is wiredly or wirelessly connected to the terminal devices through through the internet . The terminal devices through are for example a person computer a notebook a smart phone or a function phone and the type of the terminal devices through are not used to limit the present disclosure.

In the exemplary embodiment of the present disclosure the hybrid dynamic code compiling device can be built in or externally connected to the server . Thus the web page designer can use the computing device to edit the text markup language file and the dynamic code such as the HTML file and the JavaScript code and the web page designer uploads the edited text markup language file and the edited dynamic code to the server .

The server uses the built in or externally connected hybrid dynamic code compiling device to divide the dynamic code into the compilable portion and the non compilable portion of the dynamic code wherein the compilable portion of the dynamic code is converted to the native code and the non compilable portion of the dynamic code is rewritten to generate the revised dynamic code wherein the revised dynamic code has the function calls which communicate between the original dynamic code and the native code.

Then the server can deliver the native code and the revised dynamic code generate by the hybrid dynamic code compiling device to the terminal devices through via the internet such that the terminal devices through can display the dynamic or interactive web page corresponding to the original dynamic code edited by web page designer according to the native code and the revised dynamic code. Furthermore the server can also deliver the text markup language file to the terminal devices through via the internet .

It is noted that the present disclosure does not limit whether the hybrid dynamic code compiling device is built in or externally connected to the server . Referring to is a schematic diagram of a service system according to another exemplary embodiment of the present disclosure. Compared to in the exemplary embodiment of the hybrid dynamic code compiling device is built in or externally connected to the computing device of the service system rather than the server of the service system . In other word the computing device directly receives the dynamic code and the text markup language file edited by the web page designer and directly converts the dynamic code to the native code and the revised dynamic code. Then the computing device transmits the native code and the revised dynamic code to the server via the internet and the terminal device through receives the native code and the revised dynamic code from the server via the internet such that the terminal device through can display the dynamic or interactive web page corresponding to the original dynamic code edited by web page designer according to the native code and the revised dynamic code.

Referring to is a schematic diagram of a service system according to another exemplary embodiment of the present disclosure. Compared to in the exemplary embodiment of the hybrid dynamic code compiling device is built in or externally connected to each of the terminal devices through of the service system rather than the server of the service system . The web page designer uses the computing device transmits the edited text markup language file and the edited dynamic code to the terminal devices through via the server and the internet . The hybrid dynamic code compiling device built in or externally connected to each of the terminal devices through can convert the dynamic code to the native code and the revised dynamic code. Next the terminal device through can display the dynamic or interactive web page corresponding to the original dynamic code edited by web page designer according to the native code and the revised dynamic code.

Though the above exemplary embodiments illustrate the hybrid dynamic code compiling device is built in or externally connected to the computing device the server or the terminal device the present disclosure is not limited thereto. It is noted that considering the computing abilities of the apparatuses are not identical to each other each elements of the hybrid dynamic code compiling device can discretely implemented in at least two of the computing device the server and the terminal device so as to discretely process the dynamic code. In addition the hybrid dynamic code compiling devices can be built in or externally connected to the computing device the server and the terminal device and each of the hybrid dynamic code compiling devices can be communicated with each other and the partial dynamic code can be processed to generate the partial native code and partial revised dynamic code.

Referring to is a schematic flow chart of a hybrid dynamic code compiling method according to an exemplary embodiment of the present disclosure. The hybrid dynamic code compiling method in can be executed in the electronic device having the computing ability and can be executed by the mentioned hybrid dynamic code compiling device. In short the apparatus for executing the hybrid dynamic code compiling method is not used to limit the present disclosure.

Firstly at step S a text markup language file is received and analyzed to generate help information. Then at step S a dynamic code is received and parsed to divide into blocks wherein the help information is optionally inferred to help to parse the dynamic code the dynamic code may be embedded in the text markup language file and the dynamic code is extracted though the analysis of the text markup language file or alternatively the dynamic code is a file independent to the text markup language file. Additionally the dynamic code has structured code batches of object or class information and batches of variable information which are used to form the mentioned blocks.

Next at step S for each block based upon an established symbol table the variable types of the block are checked so as to determine whether the block can be compilable. For example when the block has the global variable or the eval in the built in variable the block is determined to be the non compilable block and then step S is executed. By contrast when the block merely has the single one or several local variables the block is determined to be the possible compilable block and step S is then executed.

Next at step S for each possible compilable block a type inference is performed on the possible compilable block to determine the possible compilable block can be the compilable block. When a type of the possible compilable block is able to be inferred the possible compilable blocks is determined to be the compilable blocks and then step S is executed. When the type of the possible compilable block is not able to be inferred the possible compilable block is determined to be the non compilable block and step S is then executed.

Next at step S a native code is generated according to the compilable blocks i.e. the compilable blocks are converted to the native code. Additionally at step S the non compilable blocks are rewritten to generate the revised dynamic code wherein the revised dynamic code has function calls which communicate between the original dynamic code and the native code. The terminal device receives the native code and the revised dynamic code and entirely executes the content of the original dynamic code to display the dynamic or interactive web page corresponding to the original dynamic code.

Referring to is a schematic flow chart of garbage collection in a hybrid dynamic code compiling method according to an exemplary embodiment of the present disclosure. As mentioned above the hybrid dynamic code compiling method can also allow the web page designer to control the garbage collection. Steps S through S in can be executed at step S of and whether step S comprises steps S through S in is not used to limit the present disclosure i.e. whether the hybrid dynamic code compiling method allows the web page designer to control the garbage collection is not used to limit the present disclosure. When the hybrid dynamic code compiling method allows the web page designer to control the garbage collection the hybrid dynamic code compiling method obtains the annotation of the application programming interface provided by the system to which the dynamic code corresponds so as to intercept function calls of the garbage collection.

At step S whether dynamic code has the web designer denoted annotation for releasing the memory space of the object is determined. When that the dynamic code has the annotation for releasing the memory space of the object is determined step S is then executed. When that the dynamic code does not have the annotation for releasing the memory space of the object is determined step S is then executed. At step S that the garbage collection of the object to be executed is determined and the annotation for executing the garbage collection of the object is generated in the corresponding block. At step S that the garbage collection of the object to not be executed is determined and the annotation for not executing the garbage collection of the object is generated in the corresponding block. Thus the terminal device can determines whether the garbage collection of the object to be executed according to the annotation in the block so as to meet the memory space control manner expected by the web page designer. Accordingly the execution performance of the terminal device is increased and the memory leak is prevented.

It is noted that in the exemplary embodiment of the hybrid dynamic code compiling method intercepts function calls of the garbage collection. However an exemplary embodiment of the present disclosure may selectively intercept the function calls of the garbage collection associated with the persistent objects. In other word the function calls of the garbage collection of the local objects are controlled by the system. The function calls of the garbage collection of the persistent objects can be merely intercepted and the execution of the garbage collection for releasing the memory space of the persistent object of the persistent object may be determined according to the annotation denoted by the web page designer.

Take V8 engine for example in V8 engine the object reference is managed by Handle function module. Handle function module comprises object pointers to indicate the object location addresses. Handle function module divide the objects into persistent objects and local objects. In the exemplary embodiment of the present disclosure V8 engine is modified such that the hybrid dynamic code compiling method control the release of the memory space of the persistent object. In other word when the live range of the local object exceeds the scope of defined HandleScope the garbage collection of the local object is executed automatically by the system. The garbage collection of the persistent object is not only controlled by the system originally but also is executed now according to the web page designer denoted annotation for releasing the memory space of the persistent object. In addition it is noted that V8 engine can be modified as that the garbage collection of the persistent object is merely executed according to the web page designer denoted annotation for releasing the memory space of the persistent object. Alternatively V8 engine can be modified as that the garbage collection of the persistent object is executed simultaneously according to the system control and the web page designer denoted annotation for releasing the memory space of the persistent object.

To sum up according to the hybrid dynamic code compiling device method and the service system thereof provided by exemplary embodiments of the present disclosure the performance of the terminal device for processing the dynamic code can be efficiently improved and the garbage collection may be efficiently executed to prevent the memory leak in the terminal device with the annotation denoted by the web page designer. In addition the hybrid dynamic code compiling device may be implemented by a hardware or software manner and the complexity thereof is not high such that the cost is not expensive.

It is preferred that in the exemplary embodiment of the present disclosure the hybrid dynamic code compiling device can be installed in the server of the service system such that a large number of computing amounts of the computing device may be prevented while the dynamic code is converted and compiled. Moreover based on the above configuration the service provided from the server service provider may allow the web page designer to convert the dynamic code to the native code and the revised dynamic code.

The above mentioned descriptions represent merely the exemplary embodiment of the present disclosure without any intention to limit the scope of the present disclosure thereto. Various equivalent changes alternations or modifications based on the claims of present disclosure are all consequently viewed as being embraced by the scope of the present disclosure.

