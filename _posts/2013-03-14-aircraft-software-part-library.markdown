---

title: Aircraft software part library
abstract: A computer implemented method, apparatus, and computer program product for managing aircraft software parts. An aircraft software part is received at a library. The received part is stored in the library with other aircraft software parts. A user interface is provided to manipulate the aircraft software parts. Responsive to receiving a user input from the user interface to uplink a selected aircraft software part to a target aircraft data processing system, a command is created to send the selected part to an aircraft in which the target aircraft data processing system is located. The uplink command is stored in a queue in the storage in the library. The uplink command is distributed to a proxy server application in response to a request for commands. Responsive to receiving a request from the proxy server application processing the stored uplink command, the selected part is sent to the proxy server application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09038047&OS=09038047&RS=09038047
owner: THE BOEING COMPANY
number: 09038047
owner_city: Chicago
owner_country: US
publication_date: 20130314
---
This application is a continuation application of U.S. application Ser. No. 12 276 516 filed Nov. 24 2008 issued as U.S. Pat. No. 8 490 074 on Jul. 16 2013 which claims the benefit of provisional application 60 990 471 filed on Nov. 27 2007.

The present disclosure relates generally to an improved data processing system and in particular to a method and apparatus for managing software for aircraft. Still more particularly the present disclosure relates to a computer implemented method apparatus and computer usable program product for managing loadable software airplane parts as well as other documents related to the parts known as part usage assets or simply as assets.

Modern aircraft are extremely complex. For example an aircraft may have many types of electronic systems on board. A particular electronic system on an aircraft may also be referred to as a line replaceable unit LRU . Each line replaceable unit may take on various forms. A line replaceable unit may be for example without limitation a flight management system an autopilot an in flight entertainment system a communications system a navigation system a flight controller a flight recorder and a collision avoidance system.

Line replaceable units may use software or programming to provide the logic or control for various operations and functions. The software used in these line replaceable units is commonly treated as parts in the airline industry. In particular a software application for use in a line replaceable unit on an aircraft may also be tracked separately and referred to as a loadable aircraft software part or aircraft software part. This software application also may be considered part of an airplane s configuration.

When an entity i.e. an airline maintenance repair and overhaul service provider MRO or military squadron receives an aircraft aircraft software parts are typically already installed in the line replaceable units in the aircraft. An airline for example may also receive copies of these aircraft software parts in case the parts need to be reinstalled or reloaded into the line replaceable units in the aircraft that have failed and have been replaced. Further the airline also may receive updates to the loadable aircraft software parts from time to time. These updates may include additional features not present in the currently installed aircraft software parts and may be considered upgrades to one or more line replaceable units.

The current system for managing handling and distributing loadable aircraft software parts is cumbersome and time consuming. Currently aircraft software parts are stored on physical media such as diskettes compact discs or digital versatile discs DVD . An airline receives a delivery of the physical media and stores that physical media in a location such as for example filing cabinets. The media also may be kept on board the aircraft in many cases.

Maintenance operations may be performed on the aircraft to install or reinstall aircraft software parts from time to time. When an aircraft software part is needed the media containing that part must be located and retrieved for use by maintenance personnel. This type of storage and retrieval system and process takes up both space and time.

Thus it would be advantageous to have an improved method and apparatus for distributing aircraft software parts that solves the above described problems.

The different advantageous embodiments provide a computer implemented method apparatus and computer program product for managing aircraft software parts. In one advantageous embodiment an aircraft software part is received at a library to form a received aircraft software part. The received aircraft software part is stored in a storage in the library with a plurality of aircraft software parts. A user interface system is provided to manipulate the plurality of aircraft software parts in the library. Responsive to receiving a user input from the user interface system to uplink a selected aircraft software part from the plurality of aircraft software parts in the library to a target aircraft data processing system a command is created to send the selected aircraft software part to an aircraft in which the target aircraft data processing system is located to form an uplink command. The uplink command is stored in a queue in the storage in the library to form a stored uplink command. The stored uplink command is distributed to a proxy server application in response to a request for commands from a proxy server application. Responsive to receiving a request for the selected aircraft software part from the proxy server application processing the stored uplink command the selected aircraft software part is sent to the proxy server application.

In another advantageous embodiment an apparatus comprises a file system located on a storage device a database located on the storage device a manage component and a user interface. The file system stores a plurality of aircraft software parts and the database stores a plurality of commands used to manage the plurality of aircraft software parts. The management component is capable of generating the plurality of commands. The user interface system is capable of receiving user input to operate the management component.

In yet another advantageous embodiment a computer comprises a bus a communications adapter connected to the bus a memory connected to the bus wherein computer usable program code is stored on the bus and a processor unit connected to the bus. The processor unit executes the computer usable program code to receive an aircraft software part at a library to form a received aircraft software part store the received aircraft software part in a storage in the library with a plurality of aircraft software parts provide a user interface system to manipulate the plurality of aircraft software parts in the library create a command to send the selected aircraft software part to an aircraft in which the target aircraft data processing system is located to form an uplink command in response to receiving a user input from the user interface system to uplink a selected aircraft software part from the plurality of aircraft software parts in the library to a target aircraft data processing system store the uplink command in a queue in the storage in the library to form a stored uplink command distribute the stored uplink command to a proxy server application in response to a request for commands from a proxy server application and send the selected aircraft software part to the proxy server application in response to receiving a request for the selected aircraft software part from the proxy server application processing the stored uplink command.

In still another advantageous embodiment a computer program product comprises a computer recordable storage media and program code. The program code includes code for receiving an aircraft software part at a library to form a received aircraft software part. The program code also includes code for storing the received aircraft software part in a storage in the library with a plurality of aircraft software parts and for providing a user interface system to manipulate the plurality of aircraft software parts in the library. The program code includes code responsive to receiving a user input from the user interface system to uplink a selected aircraft software part from the plurality of aircraft software parts in the library to a target aircraft data processing system for creating a command to send the selected aircraft software part to an aircraft in which the target aircraft data processing system is located to form an uplink command. Code is also present for storing the uplink command in a queue in the storage in the library to form a stored uplink command. The program code includes code for distributing the stored uplink command to a proxy server application in response to a request for commands from a proxy server application and code responsive to receiving a request for the selected aircraft software part from the proxy server application processing the stored uplink command for sending the selected aircraft software part to the proxy server application.

The features functions and advantages can be achieved independently in various embodiments of the present disclosure or may be combined in yet other embodiments in which further details can be seen with reference to the following description and drawings.

With reference now to the figures and in particular with reference to an exemplary diagram of a data processing environment is provided in which the advantageous embodiments may be implemented. It should be appreciated that is only exemplary and is not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. As used herein the term exemplary refers to an example and not necessarily an ideal implementation. Many modifications to the depicted environments may be made.

Turning now to a diagram illustrating a network data processing system in which a software part management environment may be implemented is depicted in accordance with an advantageous embodiment. In this example network data processing system is a network data processing system in which information may be transferred between aircraft network and ground network . This information may include for example without limitation commands aircraft software parts downlink data error logs usage history flight data status information and manuals. Ground network includes networks and computers located on the ground. Aircraft network system is a network and computers located on an aircraft.

In these examples commands may be generated on library located on library server computer . Library server computer and other data processing systems such as server computers and connect to intranet .

These commands may be distributed to on ground component OGC on proxy server computer through a network such as Internet . Intranet and Internet may include connections such as for example wires fiber optic cables or wireless communications links. Proxy server computer may be located in a facility such as airport . Proxy servers such as proxy server computer may be located at other airports and other locations such as maintenance locations. Proxy server computer provides for temporary part storage for commands and parts received from library .

The commands and aircraft software parts also may be sent to software maintenance tools on portable computers such as software maintenance tool on maintenance laptop . Proxy server computer and maintenance laptop are referred to collectively as ground tools. A ground tool may be any data processing system that is configured with an appropriate application to transfer information such as commands aircraft software parts and downlink data.

Proxy server computer may connect to aircraft through various types of connections or links. For example wireless unit may establish wireless connection with wireless unit on aircraft . Wireless unit connects to open data network in aircraft . Maintenance laptop has software maintenance tool and on ground component OGC and may communicate with aircraft establishing communications link with cabin wireless access unit . Communications link is a wireless virtual private network tunnel. Cabin wireless access unit connects to open data network in these examples. Open data network provides an interface for various communications links such as wireless link . Additionally satellite unit connected to proxy server computer at airport may establish satellite link with satellite unit which is also connected to open data network .

Open data network connects to aircraft data processing system which contains onboard electronic distribution system OBEDS . Storage device also is located in aircraft data processing system . Storage device provides a location to store information such as aircraft parts. Aircraft data processing system also includes file transfer system FTS onboard storage manager OSM onboard data load function ODLF and signer crater module SCM . In these examples signer crater module may be implemented as a Java library compiled into onboard electronic distribution system . Also aircraft data processing system may take the form of a crew information system maintenance system computer.

File transfer system is used to transfer files from storage device to a line replaceable unit. Onboard storage manager manages information stored in storage device . Onboard data load function is a software component used to load aircraft software parts onto line replaceable units. Signer crater module is used to process incoming crates and store the contents of those crates in storage device . Additionally signer crater module may crate download data for downloading to proxy server computer .

All command processing in these examples is initiated by onboard electronic distribution system located in aircraft data processing system . Onboard electronic distribution system monitors the air to ground link status and determines whether a communications link has been established. If a link becomes available onboard electronic distribution system connects to a ground data processing system via the link.

In other advantageous embodiments maintenance laptop may establish communications link with isolated data network . Maintenance laptop has software maintenance tool and on ground component . Communications link may be a wired connection. The line replaceable units may be for example central server module CSM electronic flight bag EFB and cabin services system CSS . Central server module provides common networking functions for the different networks in aircraft . These services include for example packet routing firewall and wireless access. Cabin services system provides applications to control systems in the aircraft such as lighting cabin doors and address system.

If onboard electronic distribution system establishes a connection to a ground device onboard electronic distribution system requests a list of commands queued or stored for aircraft . Onboard ground components or on data processing systems such as proxy server computer maintenance laptop and or maintenance laptop communicate with onboard electronic distribution system on aircraft data processing system in these examples. This type of software component provides an application program interface to the ground tool to uplink commands and aircraft software parts to aircraft as well as downlinking data or files.

The illustration of particular components and configurations in network data processing system are not meant to imply architectural limitations to the manner in which different embodiments may be implemented. For example although only a single aircraft is shown in aircraft network multiple aircraft may be present within aircraft network . As another example airline network in ground network may connect to computers such as proxy server computer at airports such as airport through other types of networks other than Internet . For example a wide area network WAN may be used in place of or in conjunction with Internet .

Turning now to a diagram of a data processing system is depicted in accordance with an advantageous embodiment. In these examples data processing system is an example of a data processing system that may be used to implement data processing systems such as library server computer maintenance laptop proxy server computer maintenance laptop maintenance laptop and aircraft data processing system in .

In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. A storage device is hardware that is capable of storing program code in a functional form for execution by a processor or other hardware device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is in a functional form and located on computer readable media and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive or a flash memory which is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code.

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown.

For example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

The different advantageous embodiments provide a computer implemented method apparatus and computer usable program product for managing aircraft software parts.

With reference now to a diagram illustrating an aircraft software part management apparatus is depicted in accordance with an advantageous embodiment. In this example aircraft software part management apparatus includes receiving module library proxy server application software maintenance tool and onboard electronic distribution system .

Receiving module is capable of receiving an aircraft software part from a source and sending the aircraft software part to library for storage. The source may include for example an aircraft manufacturer a software vendor a library supplier or an airline.

In these examples library is located on a data processing system such as library server computer in . Library provides a storage system for the aircraft software part. Also library may be used to manage the aircraft software parts. The management of the parts may include for example without limitation organizing aircraft software parts deleting aircraft software parts and distributing aircraft software parts. Security and versioning control processes may be used to manage the aircraft software parts.

Proxy server application may be located on the same data processing system or a different data processing system depending on the particular implementation. Proxy server application is in communication with library and is capable of serving different aircraft clients.

Software maintenance tool may be a software maintenance tool located on a portable computer that provides an alternate route to send the aircraft software part to onboard electronic distribution system from library . Software maintenance tool may receive the aircraft software part directly from library or through proxy server application depending on the particular implementation.

Onboard electronic distribution system is an example of an aircraft client located on an aircraft. Onboard electronic distribution system is a software client that executes on a data processing system on the aircraft. Onboard electronic distribution system may receive an aircraft software part for the aircraft from library through proxy server application . After the aircraft software part has been received by onboard electronic distribution system the aircraft software part may be installed in a line replaceable unit for use.

In addition to using aircraft software part management apparatus to distribute aircraft software parts to an aircraft this apparatus also may be used to receive data generated by the aircraft. This data also is referred to as downlink data. For example a flight recorder may generate data describing different events occurring during a flight. This data may be downlinked through onboard electronic distribution system through proxy server application and or software maintenance tool back to library for later use and analysis. This data also may include configuration data about the aircraft software part the line replaceable unit or the airplane configuration.

With reference now to a block diagram of a software part management environment is depicted in accordance with an advantageous embodiment. Software part management environment is an example of one implementation for aircraft software part management apparatus in .

In this example crate tool executes on computer . Crate tool is an example of one implementation of receiving module in . Library is located on server computer . Library is an example of one implementation of library in . Proxy server application executes on server computer and is an example of an implementation of proxy server application in . Software maintenance tool executes on portable computer . Software maintenance tool is an example of software maintenance tool in . Onboard electronic distribution system runs on aircraft computer on aircraft . Onboard electronic distribution system is an example of one implementation for onboard electronic distribution system in .

In these examples crate tool may receive and process software parts such as aircraft software part in crate . Crate is a packaging system for aircraft software part and is not a physical object. Crate in these examples is a file that contains aircraft software part . Crate may be for example a zip file using a zip file format.

A zip file format is a data compression and archival format in which the zip file may contain one or more files that have been compressed. Other examples of packaging systems for files include for example JAVA archive JAR files. These files also may be encrypted or digitally signed depending on the particular implementation. Of course any type of mechanism that provides a wrapper for aircraft software part may be used. In these examples the wrapper is a security wrapper that is designed to meet various security requirements that may be set or required for aircraft software part .

Aircraft software part may be a software application for use on a data processing system in the aircraft in these examples. The data processing system may be one located within line replaceable units in aircraft . The application may include a set of files. The set of files may include for example one or more programs data files libraries configuration files or other information or code. As used herein a set refers to one or more items. As an example a set of aircraft software parts is one or more aircraft software parts and a set of commands is one or more commands.

Crate tool receives crate and processes crate to store aircraft software part in aircraft software parts in library . This processing may include for example validating signatures for crate and aircraft software part . This validation may be performed to ensure that no corruption or errors has occurred in crate or aircraft software part . The different parts stored within library may be distributed to an aircraft such as aircraft through the proxy server application.

Library provides a component within software part management environment to perform various management operations on aircraft software parts . These management operations may include for example without limitation distributing aircraft software parts to an aircraft organizing aircraft software parts deleting aircraft software parts receiving data from aircraft on which aircraft software parts are present and receiving new aircraft software parts.

Proxy server application may obtain a set of aircraft software parts from aircraft software parts and send those parts to onboard electronic distribution system . Proxy server application is in communication with onboard electronic distribution system through a communications link. This communications link may take various forms. For example a wireless communications link may be used. In this manner aircraft parts and data may be exchanged while the aircraft is on ground or even in flight. In other examples server computer may be connected to aircraft computer through a wired link in a network.

Onboard electronic distribution system processes the set of aircraft parts and stores these parts as aircraft software parts within storage device on aircraft computer . As needed an aircraft software part from aircraft software parts may be installed in line replaceable units . Data such as an aircraft software part manuals documentation and commands sent to the aircraft are referred to as uplink data.

Additionally data may flow in the other direction from aircraft through proxy server application back to library . This type of data is referred to as downlink data. In these examples line replaceable units may generate downlink data which is temporarily stored in storage device . Onboard electronic distribution system may send downlink data to proxy server application . In turn proxy server application sends downlink data to library for storage. This data may then be processed and analyzed. This data also may include for example the status of software on an aircraft. This status information may be used to send an operator to the aircraft to initiate loading and installation of the line replaceable unit on the aircraft.

Additionally software maintenance tool on portable computer provides an alternative route for transferring aircraft software parts and downlink data. Portable computer may be for example a laptop computer. Portable computer may obtain an aircraft software part from aircraft software parts through proxy server application or directly from library depending on the particular implementation. Thereafter portable computer may be transported to aircraft and establish a communications link with onboard electronic distribution system on aircraft computer to send the aircraft software part to onboard electronic distribution system .

This type of distribution of aircraft software parts is especially useful when network connections or communications links cannot be established between server computer and aircraft computer on aircraft . This type of situation may occur depending on the type of equipment available at an airport or maintenance facility. Further in some cases the network or communications systems providing communications links may be temporarily unavailable or require repair. In this manner software maintenance tool may transfer an aircraft software part to onboard electronic distribution system . Further software maintenance tool may also receive downlink data while in communication with onboard electronic distribution system .

In this manner the different advantageous embodiments provide a computer implemented method apparatus and computer usable program code for managing aircraft software parts. Further the different advantageous embodiments also may provide for the transfer of data from an aircraft to a facility or location for later analysis or review.

Turning now to a table illustrating modes of operation for a software part management environment is depicted in accordance with an advantageous embodiment. In this example table illustrates some of the different modes of operation that may occur within software part management environment in . In these examples the different modes of operation include receive and store parts mode distribute commands mode distribute parts mode and receive downlink data mode . These different modes of operations illustrated in table are ones that may occur in one or more components within software part management environment in .

In receive and store parts mode aircraft software parts may be received and stored within library in . Distribute commands mode is used to send commands to the aircraft. These commands may be for example to uplink data. This data may include for example sending aircraft software parts to an aircraft. The uplink data also may include commands to send documentation or other information to an aircraft. Distribute parts mode is the mode of operation in which aircraft software parts are actually sent to the aircraft. Receive downlink data mode is a mode of operation in which data is sent from various components in an aircraft to the library in the software part management environment.

With reference now to a diagram illustrating command types is depicted in accordance with an advantageous embodiment. In this example command types include uplink command downlink command and delete command . Uplink command is used to send information from a library to an aircraft. This information may include for example aircraft software parts configuration information and other data. Downlink command is used to initiate the transfer of data from an aircraft to a library. This information may include for example status information on the uplinking of aircraft software parts and reports of configuration of line replaceable units on the aircraft. Delete command is employed to delete information on the aircraft. For example delete command may be used to delete a selected aircraft software part on an aircraft. In these examples these different commands are sent to the aircraft in a crate.

Turning now to a format for commands is depicted in accordance with an advantageous embodiment. In this example command takes the form of an extensible markup language XML data structure. Command in this example is an uplink command.

Message identifier element in command provides a unique identifier for the command. Type element indicates the type of command. In this example the type of command is identified as an uplink command. System element identifies the target system for the command. Application identifier element identifies the application on the target system to receive the command.

Link label element identifies the type of network link used to transfer the command from the library to the aircraft. For example the link may be a wired link or a wireless link. Server address element identifies the address of the identified device. Data type element provides an identification of the type of information that is subject to the command. Resource type element identifies the particular file that is subject to the command.

Turning now to a message flow diagram illustrating processing of uplink commands is depicted in accordance with an advantageous embodiment. In this example processing of an uplink command involves ground system onboard electronic distribution system OBEDS file transfer system FTS and line replaceable unit LRU . In these examples ground system is for example a proxy server application on a computer or a software maintenance tool located on a laptop computer.

The process begins by onboard electronic distribution system establishing a connection with ground system message M . In response to the connection ground system makes the next command available. In this example the next command is an uplink command. Ground system sends the uplink command to onboard electronic distribution system message M . Onboard electronic distribution system checks the signature for the uplink command.

Thereafter onboard electronic distribution system sends a request for the source to ground system message M . Ground system makes the crate corresponding to the request available for transfer. The request in message M is identified from the uplink command received in message M.

Onboard electronic distribution system uplinks the crate from ground system message M . After receiving the crate onboard electronic distribution system validates the signatures on the crate. This validation includes validating the signature on the crate as well as the signatures for the aircraft software part.

Thereafter onboard electronic distribution system sends a transfer request to file transfer system message M . In response file transfer system transfers the aircraft software part to line replaceable unit message M .

The status is then transferred from file transfer system to onboard electronic distribution system message M .

Turning now to a messaging diagram illustrating processing of a downlink command is depicted in accordance with an advantageous embodiment. In this example the same components as in are present for processing a downlink command. In this example onboard electronic distribution system connects to ground system message N . Ground system makes the next command available for processing.

A downlink command is sent to onboard electronic distribution system message N . Onboard electronic distribution system sends a request to file transfer system to send the downlink command to line replaceable unit message N . In turn file transfer system sends the downlink command to line replaceable unit message N . Line replaceable unit processes the command and then sends downlink data to file transfer system message N . File transfer system sends a request to onboard electronic distribution system to send downlink data to ground system message N . In response onboard electronic distribution system crates and signs the downlink data. Additionally onboard electronic distribution system also adds metadata to the crate. Thereafter onboard electronic distribution system sends the crate to ground system message N .

Turning now to a message flow diagram illustrating processing of a delete command is depicted in accordance with an advantageous embodiment. The same components as depicted in are used to process a delete command. The process begins with onboard electronic distribution system connecting to ground system message O . In response ground system makes the next command for onboard electronic distribution system available. Onboard electronic distribution system receives the delete command message O .

Thereafter onboard electronic distribution system checks the signature for the command. If the signature is valid onboard electronic distribution system sends a request to file transfer system to send the delete command to line replaceable unit message O . In these examples the only time the signature on the command is checked is if the command is issued from the proxy server. The same occurs for the downlink command. Thereafter file transfer system sends the delete command to line replaceable unit message O .

In response to receiving the delete command line replaceable unit deletes the resource identified by the delete command.

File transfer system sends a request to onboard electronic distribution system to send the status to ground system message O . This status indicates whether the resource was successfully deleted by line replaceable unit . In response to receiving this request onboard electronic distribution system crates and signs the status. Thereafter the crate is sent to ground system message O .

Turning now to a high level flowchart of a process used to distribute an aircraft software part is depicted in accordance with an advantageous embodiment. The process illustrated in is an example of a process that may be found in software part management environment in to install an aircraft software part on an aircraft.

The process begins by storing an aircraft software part in a library operation . In these examples the library is a software aircraft management component such as library in . The process then identifies an aircraft to receive the aircraft software part to form an identified aircraft operation . In operation an operator of the library may select aircraft software parts for distribution to a set of aircraft. In other embodiments the target aircraft for aircraft software parts may be preselected through a communication or file received from another system.

Thereafter the aircraft software part is sent to a proxy server application operation in the form of an uplink command. The proxy server application sends the uplink command and the aircraft software part to an onboard electronic distribution system on the identified aircraft operation with the process terminating thereafter.

Turning now to a flowchart for receiving and storing aircraft software parts is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in software part management environment in . This process is an example of steps that may be performed in receive and store parts mode in .

The process begins with a crate tool receiving a crate operation . This tool may be for example crate tool in . In this example the crate contains an aircraft software part that may be requested from a point of origin such as a manufacturer of the aircraft or line replaceable units in the aircraft. The aircraft software part may be received in response to a notification of the availability of the aircraft software part and delivered through some transport mechanism. The crate may be received on a physical or tangible media such as a compact disc flash memory or digital versatile disc. In other embodiments the crate may be received through a transmission media such as a communications link over a network.

The crate tool validates and unpacks the crate operation . In this operation a notification is generated if the signature is invalid or the digest does not match the one calculated by the crate tool. If no problems are detected the crate is unpacked into various locations for additional processing. Next the crate tool validates the signature for the aircraft software part operation . If the signature is invalid or the digest for the aircraft software part does not match the one calculated a notification is generated. If no problems are detected the part is now ready to be signed after the contents of the crate have been validated or verified.

The crate tool then inspects the crate contents operation . In this operation the contents of the crate may be displayed for an inspector to verify the contents. In other embodiments this operation may be performed automatically for a comparison of the contents with a file or configuration information identifying the expected contents of the crate.

Once the contents have been verified the crate tool signs the aircraft software part with the airline s signature operation . Depending on the implementation another entity s signature may be used. For example the signature may be that of a customer or other party that manages the library. If no errors occur in signing the aircraft software part the part is ready for storage.

Thereafter the crate tool places the aircraft software part into a library operation with the process terminating thereafter. This operation involves moving the aircraft software part from its current location on the file system to the storage area for the library containing the different aircraft software parts. In these examples this library may be for example library in .

Referring to a flowchart of a process for distributing commands through a proxy server is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in software part management environment in . In particular this process is an example of one executed during distribute commands mode in .

The process begins by the proxy server application receiving and processing queued commands operation . In these examples queued commands are sent in crates referred to as command packages. The crates are processed and sent to appropriate aircraft command queues in the library. The proxy server application may access and retrieve the queued commands from queues in the library. If these commands include uplink commands crated aircraft software parts also are placed into local inventory of the proxy server. In these examples the commands are placed into crates for distribution to the proxy server.

Thereafter the proxy server application connects to the onboard electronic distribution system on the aircraft operation . The proxy server application may connect to multiple aircraft at the same time. In these examples the aircraft connects to the proxy server application through a wireless connection or communications link. Once the communications link is established information may flow between the proxy server application and the onboard electronic distribution system. This information may include for example commands data aircraft software parts configuration files manuals and status information.

The proxy server application then automatically transfers the crate commands for the aircraft to the onboard electronic distribution system operation . In these examples the crate commands designated for the aircraft are available for retrieval by the onboard electronic distribution system.

The onboard electronic distribution system reads the commands and executes the commands operation . In these examples the onboard electronic distribution system polls the command queue on the proxy server application and retrieves each command for the aircraft one command at a time. The onboard electronic distribution system then verifies the crated commands operation . If the crate is verified the command is passed on to the designated system and application. Thereafter the onboard electronic distribution system returns the status of the transfer for the commands operation with the process terminating thereafter.

Turning next to a flowchart of a process for receiving and distributing downlink data through a proxy server application is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in software part management environment in . In particular the process illustrated in is an example of operations that occur during receive downlink data mode in .

The process begins with the proxy server application connecting to the onboard electronic distribution system on an aircraft operation . Thereafter the proxy server application receives the downlink of the data operation . In these examples the onboard electronic distribution system generates a downlink for each item in the queue containing downlink data.

Thereafter the proxy server application places the downlink data in a local inventory operation . This downlink data is stored for transfer back to the library based on some event. In these examples the event may be a period event such as the expiration of a timer. In other examples the event may be a non period event such as a request generated by a user. Afterwards the proxy server application sends the downlink data to the library operation with the process terminating thereafter. In operation the downlink data is placed in a directory for later use or analysis.

Turning now to a flowchart of a process for distributing aircraft software parts using a software maintenance tool is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in software part management environment in . The different operations in this process are examples of operations that occur during distribute parts mode in .

The process begins with the software maintenance tool connecting to the network operation . This is the network in which the library is present. In this example parts are not present and located on the software maintenance tool. Next the software maintenance tool retrieves a set of uplink commands and crates with aircraft software parts operation .

Thereafter the software maintenance tool disconnects from the network operation . The software maintenance tool is then moved and connected to the onboard electronic distribution system on the aircraft operation . In these examples the connection requires a human operator to initiate the connection. The software maintenance tool automatically transfers the set of uplink commands to the onboard electronic distribution system operation . In these examples the commands are sent to the onboard electronic distribution system one command at a time. Each time a command is sent within operation a check is made as to whether the onboard electronic distribution system is done uplinking the command or other information before sending the next command.

The onboard electronic distribution system reads the set of commands and receives the set of crates containing the aircraft software part operation . In these examples each command in the set of commands is retrieved one at a time by the onboard electronic distribution system from the software maintenance tool. The onboard electronic distribution system verifies the set of crates operation . If the crates are verified the aircraft software parts are then passed on for storage and distribution in the aircraft.

Then the onboard electronic distribution system returns a status of the transfer to the software maintenance tool operation . The software maintenance tool then returns the status of the transfer operation with the process terminating thereafter. In this example the software maintenance tool returns the status to a source of the aircraft software part such as a library or proxy server application.

In these examples the uplink commands may be manually added rather than automatically received from the library. For example an operator of the software maintenance tool may select aircraft software parts for transfer to an aircraft. This selection results in the software maintenance tool generating the appropriate commands to transfer the aircraft software parts. The process still receives crates for the aircraft software parts.

In this type of implementation however the process proceeds from operation to receive a selection of the aircraft software part operation . This selection is based on user input in these examples. Thereafter the software maintenance tool issues an uplink command to the onboard electronic distribution system operation . This command may be placed in a command queue for the onboard electronic distribution system to retrieve.

Turning now to a flowchart of a process for receiving data using a software maintenance tool is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented using software part management environment in . The operations illustrated in are examples of operations that may occur during receive downlink data mode in .

The process begins with the software maintenance tool connecting to the onboard electronic distribution system operation . The software maintenance tool receives a downlink of data from the onboard electronic distribution system operation . The onboard electronic distribution system initiates a downlink for each item within its queue of downlink data.

Thereafter the software maintenance tool places the data in the local inventory operation . In this operation the software maintenance tool accepts the downlink and places the data in its inventory. Other data associated with the downlink data may be displayed in a user interface. This user interface may allow a user to sort downlink data into filtered downlink data using various parameters. These parameters may include for example without limitation aircraft identification system identification application identification or data type.

Next the software maintenance tool disconnects from the onboard electronic distribution system operation . The software maintenance tool is moved from the aircraft to another location to transfer the downlink data. The software maintenance tool connects to the network operation . The software maintenance tool then sends the downlink data to the library operation with the process terminating thereafter.

With reference to a functional block diagram of a library is depicted in accordance with an advantageous embodiment. Library is a more detailed example of library in . Library includes user interface system and backend . Backend includes interfaces storage and management components .

Interfaces include messaging service hypertext transport protocol HTTP service and web service . Storage contains file system and database . In these examples management components include parts vault command dispatcher command queue manager system configurator imported files aggregator report manager event logger and security manager .

User interface system provides an operator access to backend to perform different tasks and operations. User interface system may be a graphical user interface. More specifically user interface system may be a web based application that allows a user to access library from a remote location.

Interfaces contain a number of different interfaces that may be used to transfer information into and out of library . Within interfaces messaging service allows various components within management components to communicate with other applications. In these examples report manager uses messaging service to distribute reports in response to requests. Messaging service may be implemented using various types of messaging services. For example messaging service may be implemented using Java Messaging Service which is part of the Java 2 Enterprise Edition Suite. This product is available from Sun Microsystems Inc.

Web service may be implemented using any web service system. Web service is designed to provide interaction between library and other devices over a network. Web service in interfaces may be implemented using application programming interfaces accessed over a network such as the Internet. Web service may be implemented using various protocols such as for example simple object access protocol SOAP or web surface description language WSDL . Hypertext transport protocol HTTP service may be implemented to provide a request and response system to manage responses made by clients. These requests are typically referred to as HTTP requests.

In these examples hypertext transport protocol service may be used to send and receive information such as files. These files may be for example files containing aircraft software parts commands downlink data and other suitable information. In these examples hypertext transport protocol service is used by parts vault command dispatcher imported files aggregator report manager and event logger .

As depicted the different components from components within management components may access storage for various reasons. Storage contains the different storage systems used to store information within backend of library such as file system and database . Storage is a functional component that stores information and may be located on one or more storage devices such as a hard drive or a random access memory. Storage may be for example located on a single storage device such as a hard drive.

In other embodiments storage may be located on multiple storage devices which may be located in the same physical location or in different physical locations. Within storage file system provides a structure or architecture for storing data. This data may include for example aircraft software parts documentation downlink data and other files. Database in these examples may contain for example metadata and commands related to files located within file system . Additionally database may include other commands for performing other functions such as for example deleting files on an aircraft or downloading downlink data.

Parts vault provides processes to manage the storage and distribution of aircraft software parts to different aircraft. In particular parts vault provides for a secure distribution of parts. These processes may receive new aircraft software parts as well as package or crate aircraft software parts for distribution to an aircraft.

Command queue manager is a component that manages aircraft commands. Command queue manager may allow a user or operator through user interface system to inspect reorder and change the status of commands within database . The inspection of commands may allow a user to see different commands or filter commands based on different criteria.

Command dispatcher is a component that manages creation and dispatching of commands. This component may allow a user or operator through user interface system to create uplink delete and downlink commands. Command dispatcher also provides validations of input parameters when creating these various types of commands. This component provides a mechanism to group crate and dispatch commands when external devices request by various criteria.

In these examples system configurator manages the configuration of data to support operations performed by command dispatcher . System configurator allows a user to define select or import information to define external devices that may be connected to library . Additionally this component may allow defining of aircraft models particular aircrafts and destination systems for the aircraft software parts. These destination systems in these examples may include line replaceable units located in the aircraft.

Imported files aggregator performs concurrent importing of large files sent from external devices to library . Report manager allows an operator to define reports that may be generated by library . These reports may be ones that include information from the event logs that may be aggregated from various sources pertinent to the operation of the software part management environment. For example report manager may allow a user to define a report that identifies successful uplinking of a specific type of aircraft software part to a specific model of aircraft being managed within the software part management environment.

Event logger logs events with respect to the operation of library . Additionally event logger may aggregate logs from different devices connected to library . These events may include for example without limitation aircraft software parts received from outside sources successful transfers of aircraft software parts to aircrafts commands generated for uplinking data commands generated for downlinking data and commands generated to delete aircraft software parts.

Next security manager provides a mechanism to manage access to library by operators using user interface system . Security manager may be implemented using roles and responsibilities that may be configured for particular users. This type of access may provide users privileges to access different features or functionalities within library . Further security manager also may provide for secure communications between external devices and library . As an example security manager may ensure that communications through interfaces occur through mechanisms such as encryption or virtual private networks.

In operation library may receive aircraft software parts from an external program such as for example crate tool in . In this type of operation the external program connects a service such as hypertext transport protocol service and interfaces . Security manager performs authentication of the connection and determines whether aircraft software parts can be imported. If the connection is allowed hypertext transport protocol service may then send a request to parts vault to handle the input process. In this process parts vault writes metadata about the aircraft software parts into database while storing the actual aircraft software parts within file system in some selected file directory.

When managing parts in library aircraft software parts may be retrieved from file system through parts vault and sent to a user for inspection or review. Further aircraft software parts may be archived in file system . This type of archiving saves the part in some designated directory or other storage device. Further parts vault also may scan certificates for parts within file system to identify whether any certificates signing the part have expired. A notification of expiration may be generated in advance through user interface system . Further expiration of a certificate also causes parts vault to disable any commands that contain the part.

Library also may be used to create and distribute commands to outside devices. These commands may be created by an operator through user interface system . User interface system allows a user to enter information for commands. Once the commands are generated these commands are stored within database .

When these commands are needed by external devices the commands may be crated and sent via interfaces . In particular web service may be used to send these commands to an outside component such as a proxy server application or software maintenance tool. If aircraft software parts are specified by a command these parts may be sent in a separate transfer through hypertext transport protocol service in these examples. These aircraft software parts may be sent when requested or sent as part of the transfer depending on the particular implementation.

Additionally reports are examples of other data that may be stored in file system . These reports may be for example spreadsheets parts lists and live reports.

Information obtained from downlinking data such as files and device logs may be stored within file system . These files may be aggregated using imported files aggregator . This component may accept files and create metadata entries in database in addition to saving the files within file system .

The different components illustrated for library are presented as one example of communication for different functions. The presentation and organization of these different components is not intended to imply architectural limitations to the manner in which the components may be implemented. For example the different components within library may be subdivided or combined in other fashions other than that as displayed. Additionally in other implementations some functions may be omitted or other functions may be added. Further some functions may be combined and implemented as a single module or application within library . As another example interfaces may be implemented using other interfaces in addition to or in place of the ones illustrated.

Turning now to a diagram illustrating a file system directory layout is depicted in accordance with an advantageous embodiment. File system directory layout is an example of a layout or schema used within file system in . In this example file system directory layout defines information used to locate files within file system in . The file types include for example downlink log part alternate part sign list APSL spreadsheet and archive .

Each of these types of files is identified within file system directory layout with different types of information. For example downlink includes date device tail number unique identifier UID and downlink file name . Date identifies the creation date of the downlink file. Device identifies the device that transferred the downlink data from the aircraft to the library. This device may be for example a proxy server application or software maintenance tool. Tail number identifies a particular aircraft on which the downlink data was located. Unique identifier uniquely identifies the file within the file system. Downlink file name is the name of the downlink file.

Next log includes device unique identifier UID and eventlog filename . Part is for an aircraft software part and includes unique identifier UID crated crate file name and crated part file name . Crated identifies a directory in which the crate containing the aircraft software part is located. Crate file name is a name of the crate file. Crated part file name is the name of the file containing the aircraft software part.

Alternate part signature list includes unique name and spreadsheet includes unique name . Archive includes aircraft software part SAP unique identifier UID and crate file name .

File system directory layout is provided as an example of one implementation for file system in . In other advantageous embodiments other file system layouts or schemas may be used which are suitable for the particular implementation.

With reference now to a block diagram illustrating an organization of commands in queues is depicted in accordance with an advantageous embodiment. In this example queues and are examples of queues that are located in database in .

Queue includes commands queue includes commands and queue includes commands . Commands and are commands destined for a particular aircraft in these examples. The commands may be for example uplink commands downlink commands or delete commands. An uplink command is a command that sends information from library in to an aircraft while a downlink command is a command that sends information from an aircraft to library in .

A delete command is a command that is used to delete information on the aircraft. This information may be for example an aircraft software part a configuration file or a manual. Each of these queues in these examples is associated with a particular ground tool or device. In these examples queues and are associated or designated for different devices that are to distribute the commands to aircraft.

For example queue may be associated with a first proxy server application queue with a second proxy server application and queue with a software maintenance tool. When different devices contact library in commands are distributed to those devices based on whether commands are present in the queues associated with those devices.

Turning now to a block diagram of an aircraft software part is depicted in accordance with an advantageous embodiment. In this example aircraft software part is stored in crate . Crate is stored within file system in .

Crate is a file in these examples. Crate may be for example without limitation in a zip file format. Crate also may in some embodiments contain more than one aircraft software part. Aircraft software part may include a set of files that provide functionality for the particular part. These files may include for example executable files data files configuration files and library files.

In the depicted embodiments crate and aircraft software part are signed. In other words aircraft software part is signed with one digital signature while crate is signed with another digital signature. These digital signatures may be the same or different depending on the particular embodiment. Of course in other implementations aircraft software part may not be stored in crate .

With reference now to examples of command data structures are depicted in accordance with an advantageous embodiment. The different command data structures illustrated in these figures are examples of temporary data structures created from commands stored in queues such as queues and in .

Turning now to a command data structure for a delete command is depicted in accordance with an advantageous embodiment. In this example delete command data structure includes parameters and .

Parameter identifies a set of file names to be deleted. Parameter identifies a set of part identifiers to be deleted. Parameter is a set of airplane identifiers that identify the particular aircraft to receive the delete command. This list of airplane identifiers may be for example tail numbers. Parameter identifies a set of devices that are to send the command. These devices may be for example ground tools such as a proxy server application or software maintenance tool.

Parameter identifies the destination system to receive the command. In these examples the destination system is the particular line replaceable unit that is to receive the command. Parameter identifies a user that requests the command.

In a diagram illustrating a command data structure for an uplink command is depicted in accordance with an advantageous embodiment. In this example uplink command data structure includes parameters and . Parameter identifies the aircraft software part to be uplinked or sent. Parameter identifies a set of airplanes to receive the commands. These parameters contain aircraft identifiers. Parameter is a set of device identifiers for devices to process the command. Parameter is a set of parameters identifying the destination system to receive the command. Parameter identifies the user that requested the command.

Turning next to a diagram illustrating a data structure for a downlink command is depicted in accordance with an advantageous embodiment. In this example downlink command data structure includes parameters and .

Parameter identifies the type of data that is being downlinked. Parameter identifies a set of aircraft to receive the command to downlink data. Parameter is for a set of devices to send the command to the set of aircraft. Parameter identifies a set of line replaceable units on the set of aircraft to receive the command. Parameter identifies a user that requests the command.

These command data structures are abbreviated forms of the commands that allow devices such as a proxy server application or software maintenance tool to begin processing the commands referenced by the command data structures. These command data structures may reduce the amount of traffic across various communications links in these examples. The devices may request the actual commands after receiving these command data structures. These command data structures are deleted after being sent to the ground tools in these examples.

With reference now to a diagram of a user interface for dispatching commands is depicted in accordance with an advantageous embodiment. Window is an example of a user interface that may be presented through user interface system for command dispatcher in .

In this example a user may select between creating commands such as uplink commands and downlink commands. This selection may be made through controls and . Control may be used to generate an uplink command while control may be used to generate a downlink command. Control may be used to generate delete commands.

In this depicted example control has been selected resulting in section being displayed within window . Section provides a user an ability to input information to create an uplink command. For example the user may select an airplane tail number from list . These airplane tail numbers are unique to particular aircraft.

The user also may select a device in the form of a proxy server application from list to distribute the command. Also devices in the form of software maintenance tools may be selected through list . The destination system on the aircraft may be selected through field . The destination system is a particular line replaceable unit in these examples. Field allows the entry of a part number. Entry of this part number provides other information about the part shown in fields and . The particular information displayed about the part may vary depending on the particular implementation.

Turning to a diagram illustrating a user interface for viewing commands is depicted in accordance with an advantageous embodiment. In this example window is an example of a graphical user interface that may be displayed through user interface system for command queue manager in . In this example the user may view the status of various commands. In particular specific types of commands may be viewed through window .

Commands may be viewed using controls and . Pending commands may be viewed by selecting control executed commands may be viewed by selecting control and dequeued commands may be viewed by selecting control . A user may reorder or change the order in which commands are stored in the queue through control . In this example pending commands have been selected and are displayed within section of window .

With reference now to a diagram of a user interface for viewing parts is depicted in accordance with an advantageous embodiment. Window is an example of a graphical user interface presented through user interface system for parts vault in .

In this depicted example aircraft software parts within the library may be viewed. Valid parts may be viewed through the selection of control incoming parts may be viewed through the selection of control expired parts may be viewed through the selection of control and faulty parts may be viewed through the selection of control . In this example control has been selected and valid parts located within the library are displayed within section of window .

With reference now to a flowchart of a process for receiving aircraft software parts in a library is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in library in . In particular these processes may be implemented in parts vault within management components of library in .

The process begins by receiving an aircraft software part operation . In receiving the aircraft software part metadata is received as well as a stream of data for the aircraft software part. The process determines whether the metadata for the aircraft software part is correct operation . In these examples the metadata is data that is associated with and or describes the aircraft software part.

In these examples the following metadata may be checked whether part name conforms to the regular expression . and less or equal to 200 characters whether the production status is BLACK LABEL RED LABEL or BLUE LABEL whether the applicable standard is of a length greater or equal to 0 and less or equal to 500 characters whether the intellectual property owner is of a length greater or equal to 0 and less or equal to 100 characters whether the release date has a correct date format and whether the description is of a length greater or equal to 0 and less or equal to 2000 characters.

If the metadata for the part is correct the process registers a temporary entry in the database in the library operation . This temporary entry is used to provide a status of the process for receiving the part. The entry initially indicates that the receiving of the part has begun. The process also creates a directory structure in the file system operation . This directory structure is used to save portions or fragments of the file containing the aircraft software part as the file is received.

A determination is made as to whether the receipt of the aircraft software part is complete operation . If the receipt of the aircraft software part is not complete the progress is updated in the database operation and the file fragments received are saved in the file system operation . This progress may be displayed in the user interface. The process then returns to operation to continue checking the status of the received operation for the aircraft software part.

When the receipt of the aircraft software part is complete in operation the process determines whether the part is integral operation . This operation is performed to determine whether the aircraft software part is complete and whether the part has errors. The check may be made by matching a certificate to the received part.

If the aircraft software part is integral the process crates the aircraft software part operation . The process then determines whether the crating operation was successful operation . If the crating was successful the part is marked as complete in the database operation . The crated part is saved in the file system for later retrieval operation with the process terminating thereafter.

With reference again to operation if the crating operation is not successful an error is generated operation . Thereafter the process removes the entry from the database operation and removes the saved data for the aircraft software part operation with the process terminating thereafter. With reference again to operation if the aircraft software part is not integral the process also proceeds to operation . Operations and are performed to clean up the database entry and the file system entry for the failed receipt of the aircraft software part.

With reference again to operation if the metadata for the aircraft software part is not correct the process generates an error operation with the process terminating thereafter. The errors generated in operations and may be stored in a log for later use.

Turning now to a flowchart of a process for creating a command is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in library in . In particular this process may be implemented in command dispatcher in .

The process begins by receiving a user request to create a command operation . This command may be received through a user interface such as that provided through user interface system in . A user may select one of three command types in these examples. The command types include uplink downlink and delete. The process identifies a command type from the user input operation .

In response to the type of command identified the process generates a list of parameters and possible values operation . This list includes for example aircraft tail numbers applicable device name lists and destination line replaceable units to receive the command. The process then selectively presents the list and values to the user operation . In these examples the list is a context sensitive list that provides additional options or values depending on the previous selections made by the user.

The process receives user input selecting values from the presented list and values operation . The process then validates the context of the parameters operation . In these examples the context sensitive values exist in user interface system in . This interface implements what is allowable within a command type the values of destination systems. Operation rechecks these rules at backend in . Backend may serve other user interfaces other than user interface system in that may not have the same validation rules.

The process creates a set of commands operation . In operation the process creates a command for each combination of command type tail number and device name. Of course other rules and policies may be used to identify what commands are created from the user selections. Typically all commands of the same type and target to the same aircraft may be logically grouped. Thereafter the set of commands is saved in the database in the library operation with the process terminating thereafter.

With reference to a high level flowchart of a process for managing aircraft software parts is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in library in in these examples.

The process begins by sending command structures to distribution devices operation . These command structures may be for example delete command data structure in uplink command data structure in or downlink command data structure in . These command structures are sent in response to requests for commands from various devices such as a proxy server application or software maintenance tool.

Thereafter command files are sent to the devices operation . These command files are sent in response to requests for the commands themselves when a particular device executes a command. Command structures are sent instead of sending command files to reduce the amount of traffic that may occur from constant polling by various devices. Instead command files are sent when devices actually begin executing the commands. Thereafter the process sends the aircraft software parts operation with the process terminating thereafter. In this operation the aircraft parts are sent as part of the execution of a command.

Turning now to a flowchart of a process for dispatching command structures is depicted in accordance with an advantageous embodiment. The process illustrated in is a more detailed description of operation in .

The process begins by receiving a request from a device operation . In these examples the device may be for example a proxy server application or a software maintenance tool. Of course the device may be any device that contacts or connects to the library to obtain commands.

The process then queries the database for commands associated or placed in a command queue for the particular device operation . Operation may be implemented using command queue manager in . The process receives a result from the query operation .

Thereafter the process creates a command data structure containing the commands for the device operation . The process then returns the command data structure to the device operation with the process terminating thereafter. In these examples the command data structures are created upon a request by a device for commands. In other embodiments the command data structures may be created and broadcast to many devices based on some event or on a period event such as the expiration of a timer.

Turning now to a flowchart of a process for dispatching command files is depicted in accordance with an advantageous embodiment. The process illustrated in is a more detailed description of operation in . The process illustrated in may be implemented in a component such as command dispatcher in .

At this point in the process the device has received a command data structure for processing. The device may perform some processing of the command based on this command data structure. For example the device may begin to establish a communications link with the aircraft. The command data structure provides sufficient information for the device to perform various processes. The propagation of the command to the aircraft however requires additional information in a command file.

The process begins by receiving a request for a command file from a device operation . The process queries the database for the command identified by the device operation . This query is made using a unique identifier previously sent in the command structure.

The process then receives results from the database operation . Operation in these examples queries the database based on a command ID and retrieves all the information about the command which is used to create a crated version of the command in extensible markup language. Operation could be redundant. These results are used to create a command file operation . The process crates the command file operation . Thereafter the process returns the crate to the device operation with the process terminating thereafter.

With reference now to a flowchart of a process for dispatching parts is depicted in accordance with an advantageous embodiment. The process illustrated in is a more detailed description of operation in . The process in this example may be implemented using command dispatcher in .

The process begins by receiving a request for an aircraft software part from a device operation . The process queries the database for the aircraft software part operation . The process retrieves the crated aircraft software part from the file system operation and retrieves metadata for the aircraft software part from the database operation . The process then performs an integrity check on the aircraft software part operation . The integrity check is performed to ensure that the aircraft software part has not been corrupted while being stored. This integrity check may be made using various error checking processes including hashing.

A determination is made as to whether the aircraft software part is valid based on the integrity check operation . If the aircraft software part is valid the crated aircraft software part is returned to the device operation with the process terminating thereafter. On the other hand if the aircraft software part is not valid an error message is returned operation with the process terminating thereafter.

Turning now to a flowchart of a process for dequeuing commands is depicted in accordance with an advantageous embodiment. The process illustrated in may be performed by command queue manager in . This process is used to remove commands from the queue in the database after the commands have been processed.

The process begins by receiving notification of a command execution operation . In this example the notification is received from the device executing the command. The process looks up the command and its associated group operation . This lookup is performed using a unique identifier for the command. Additionally other commands associated with the executed commands are redundant commands that may have been sent to different devices for the same aircraft.

The process marks and dequeues the command from the command queue in the database operation . The process also dequeues all other commands in the group operation . This dequeuing of other commands prevents redundant commands being dispatched to different devices in the future. Thereafter the status is saved operation with the process terminating thereafter.

Turning now to a diagram illustrating data flow in a proxy server application is depicted in accordance with an advantageous embodiment. Proxy server application interacts with components such as library software management tool and onboard electronic distribution system . In these examples on ground component provides for transfer of information between library and onboard electronic distribution system .

Library may send new commands and aircraft software parts to proxy server application message A . The results of the processing of those commands and parts may be returned to library by proxy server application as command status information message A . Additionally proxy server application also may send downlink and event log files to library message A .

With respect to transferring information with onboard electronic distribution system on ground component and proxy server application may send new commands and aircraft software parts to onboard electronic distribution system message A . Command status information may be returned to on ground component identifying the status of commands and parts sent to onboard electronic distribution system message A . Additionally onboard electronic distribution system may send downlink files to on ground component message A .

Proxy server application may send new commands and parts to software management tool message A . Software management tool may return command status after the processing of those files message A and send downlink files or event logs message A . In these examples software management tool may communicate with onboard electronic distribution system . Software management tool provides an alternate route for exchanging information with onboard electronic distribution system . Software management tool is located in a portable data processing system which may be moved from a location associated with proxy server application to the aircraft in which onboard electronic distribution system is located. These details are described in more detail with respect to the description of software management tool below.

Although the different interactions have been described in a particular order any of the different messages and interactions may occur simultaneously at any time.

For example proxy server application may send commands and aircraft parts to onboard electronic distribution system at the same time onboard electronic distribution system downloads downlink data to proxy server . Further proxy server application may simultaneously service multiple aircraft clients such as software management tool and onboard electronic distribution system .

With reference now to a diagram illustrating a proxy server application is depicted in accordance with an advantageous embodiment. Proxy server application is an example implementation of proxy server application in . In this example proxy server application includes control process database file system on ground component interface software maintenance tool interface and on ground component . These two interfaces may be implemented using application programming interface API calls in these examples.

Database contains commands processed by control process . Each of the records in database may identify the status of a command. For example a record may identify whether a command has been processed as well as the target aircraft and target line replaceable unit on the aircraft. File system stores aircraft software parts and downlink data in these examples.

On ground component is a software component in proxy server application that communicates with the onboard electronic distribution system on the aircraft. On ground component interface has application programming interfaces that provide calls that may be used by control process to exchange information with on ground component .

On ground component functions to allow any processes such as control process in proxy server application to communicate with an onboard electronic distribution system without having to be specifically designed to communicate with the onboard electronic distribution system. As a result control process may be changed or modified without having to include protocols used to communicate with the onboard electronic distribution system. Further changes to an onboard electronic distribution system may occur without requiring changes to all of the processes in proxy server application . Instead modification or changes may be made to on ground component .

Software maintenance tool interface has application programming interfaces that provide calls that may be used by control process to communicate with a software maintenance tool. The structure and organization of database and file system may be similar to that used in a library within the aircraft software part maintenance environment.

Turning to diagrams illustrating data structures used in database in are depicted in accordance with an advantageous embodiment. Command result database table illustrates information and records for command results. Command result database table includes command result identifier command identifier ground status aircraft status date command type aircraft identifier and device name .

Command result identifier uniquely identifies a specific command result record and command identifier uniquely identifies a specific command record. Command identifier may be found in various tables to relate data in the tables to a specific command record. Ground status identifies the origination of the command status messages which may be from an on ground component or an onboard electronic distribution system in these examples. Aircraft status is a command status message that can originate from an on ground component or an onboard electronic distribution system. The ground status identifies the status of the uplink or downlink of the file being uplinked or downlinked.

This information provides the percentage completeness of the actual uplink or downlink of the file. Each percentage may be reported as a separate status. Using an uplink as an example a status message of one quarter done followed by a one half done status message then a three quarters done message and finally a done status message would all be sent as the contents of the file were being sent to the onboard electronic distribution system. The reporting of each message would be an indication that the appropriate amount of the file contents had been successfully delivered. The same may occur with file contents being written to the ground component during a downlink operation.

Date identifies the date that the particular device sent the command result. Command type identifies the type of command such as uplink downlink or delete. Aircraft identifier is a unique value identifying a specific aircraft within an airline s fleet of aircraft. Device name identifies the name of the device sending the command result to the proxy server application.

Turning now to a diagram of a downlink file database table is depicted in accordance with an advantageous embodiment. In this example downlink file database table illustrates information in a downlink file database table. Downlink file database table includes downlink file identifier airplane identifier device date file name file universal resource locator and file status .

With reference now to command and command resource database tables are depicted in accordance with an advantageous embodiment. In this example command database table represents commands while command resources database table represents command resources. Command database table includes command identifier airplane identifier application name command type device name system name date servicing status priority command group crated command and crated command path .

Command resources database table includes command resource identifier data type application standard part expiration date owner name production status release date supplier path crate expiration date and command identifier . Command resources identified in command resources database table are aircraft software parts in crates for uplink commands file or configuration reports for downlink commands and files or aircraft software part files for delete commands.

Command identifier uniquely identifies this specific command result record. Airplane identifier identifies a particular aircraft. Application name identifies the line replaceable unit and the aircraft. For example application name may identify a particular line replaceable unit. Device name identifies the different devices for which the command is dispatched to an aircraft. The device name identifies for example a particular proxy server application or software maintenance tool.

In these examples the name may be a specific name for the particular proxy server application or software maintenance tool. System name identifies the name of the system on which the application is present. Date identifies the date that the command was created by the command dispatcher in the library.

Servicing status is used to identify the status of a command. This field may identify commands that have been successfully sent to the onboard electronic distribution system and to identify commands that a software maintenance tool has reported as being successfully uplinked to an onboard electronic distribution system.

Priority is a value used to order commands within queues for distribution to an onboard electronic distribution system. Command group may be used to group commands. Crated command is the name of the file containing the crated format of the command. Crated command path is a path identifying the location of where the crated command is stored.

In command resources database table command resource identifier uniquely identifies the command resource record. Data type identifies the type of data for the resource. Application standard identifies a standard applicable to the aircraft software part. Part expiration date indicates when the aircraft software part expires and or is no longer usable. For example the data type may be an aircraft software part or a file. Owner identifies the intellectual property owner of the aircraft software part. Name is the name of the file or the aircraft software part in these examples.

Production status identifies the production status of the aircraft software part within a crate. This status may be for example red label blue label or black label. A red label part is a non deliverable production quality hardware or software part under engineering development. A blue label part is controlled and maintained and is restricted for use in a laboratory environment only. A black label part is considered production ready and can be delivered to an airline customer.

Release date identifies the date that the aircraft software part in the crate was released. Supplier identifies the supplier of the aircraft software part. Path in these examples identifies the location of the aircraft software part. For example a universal resource locator string may be used for retrieving the part. Crate expiration date is the date that the certificate used to sign the crate expires. Command identifier identifies the specific aircraft command record.

Crated command files may be associated with records in the command table by storing the file name in the crated command field in combination with the file path string. Aircraft software part crate files may be associated to records in the command resource table in command resources database table by storing the file name in name in combination with a file path string.

In a diagram illustrating an airplane command database table is depicted in accordance with an advantageous embodiment. In this example airplane command database table provides an example of information found for airplane commands. Airplane command database table includes airplane command identifier message identifier airplane identifier command type and command XML .

Airplane command identifier is used to uniquely identify the particular aircraft command record. Message identifier is an identifier for partial downlinks related to a particular downlink command. This identifier is generated for downlink files that are not the result of a downlink command sent to the onboard electronic distribution system. Command XML identifies the extensible markup language document file format of the particular downlink command that the onboard electronic distribution system sent that will be retrieved when the onboard electronic distribution system requests a partial downlink file.

In these examples the different tables may be related to each other through the command identifier. The different database table definitions are for different data elements handled by the proxy server application. Different processes may use one or more of these tables to indicate when a record is inserted updated or deleted.

Turning now to a diagram of a proxy server file system directory structure is depicted in accordance with an advantageous embodiment. In this example directory structure represents a file system directory structure. Directory structure is an example of one type of directory structure that may be implemented in file system in . Directory structure may identify different types of files stored within a file system on a proxy server application.

In these examples directory structure includes crated commands crate downlink files downlink files archive downlink files partial archived event file logs event log and temporary files . This type of directory structure is used to store files in the file system as well as to identify or locate files within the file system in these illustrative examples.

Turning now to a flowchart of a process for receiving information from a library is depicted in accordance with an advantageous embodiment. In this example the process illustrated in may be implemented in control process in . This process is used to receive commands and parts from a library in the aircraft software part maintenance environment. This process may be initiated in response to an event. For example the event may be the expiration of a timer. In other embodiments the event may be caused by other sources. For example the event may be initiated by a user input.

The process begins by identifying successfully executed commands operation . These commands are ones that the proxy server application sent to a set of aircraft in which the processing of the commands occurred successfully. The commands may be for example to delete a software aircraft file load a software aircraft file or downlink data from a line replaceable unit on the aircraft.

These commands may be identified from a database within the proxy server application such as database in . The particular commands may be identified from command identifiers in a command result database table such as command result database table in . The identification of these commands forms a list of commands that is sent to the library operation . Operations and are used to send command status information to the library.

Next the process requests a command list from the library operation . Operation is performed to initiate processing of new commands for distribution to a set of aircraft. The process receives a response from the request operation . A determination is made as to whether a command list is received in the response operation . If a command list is not received the process terminates with no new command present to process. Otherwise the process deletes commands stored within the database that are not found on the new command list received from the library operation .

In operation the commands that are present in the database with the proxy server application that are not included in the list of commands retrieved from the library are considered to be unnecessary for the proxy server application to process or handle. This feature makes the library the authoritative source for commands that are supposed to be processed and found on different proxy server applications in these examples.

If the proxy server application receives a command and the command is canceled by a user before processing the command dispatcher in the library deletes the command for the device. As a result the proxy server application will not receive the command in the list of commands during a future cycle in which commands are requested. In this manner a user may remove all the commands for a particular proxy server application by deleting pending commands for that proxy server application from a command queue screen.

Thereafter the process stores new commands in the database operation . In these examples the command list may be in the form of a command data structure. The proxy server application will selectively request the actual commands themselves either immediately or at some other point in time.

The process then selects an unprocessed new command for the process operation . The process requests a crate containing the command operation . In response to the request the process receives the crate operation . The received crate is then stored in the file system operation . The process then determines whether any unprocessed new commands are still present operation . If additional unprocessed new commands are present the process returns to operation to select another unprocessed new command for processing.

Otherwise in operation the process determines whether uplink commands are present in the new commands received operation . If uplink commands are present an unprocessed uplink command is selected for processing operation . The process then determines whether a crate containing an aircraft software part is already present in the file system operation . If a crate is present the process returns to operation as described above.

If a crate is not present the process requests the crate containing the aircraft software part corresponding to the command from the library operation . Thereafter the process receives the crate operation and stores the crate in the file system operation .

The process then returns to operation to determine whether additional unprocessed uplink commands are present. If additional unprocessed uplink commands are not present the process terminates. Otherwise the process returns to operation to select another unprocessed uplink command as described above.

During execution of the process in three types of event log messages are created and recorded. A record indicating that the proxy server application successfully connected to the library is one event recorded in the log. An event indicating that a list of received commands has been received from the library is another event that is recorded. An event is also recorded for each command that is placed into a queue for an aircraft identified by the command. The list of successful commands sent to the library may be used in aiding an airline with planning maintenance operations.

Turning now to a flowchart of a process for sending downlink files to a library is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in a control process such as control process in . This process illustrates the different operations that occur when a proxy server application sends a downlink file received from an onboard electronic distribution system to a library. This process may be initiated by an event such as a timer. This process may be initiated at a different time from the process for handling commands that is illustrated in to help spread out a traffic network and reduce congestion.

The process begins by identifying downlink records for untransferred downlink data in the database operation . A determination is made as to whether unprocessed records are present in the database operation . If unprocessed records are present an unprocessed record for a downlink file is selected for processing operation . The process sends the file containing the downlink data to the library operation .

Thereafter the process archives the file sent to the library operation . The process then updates the database record for the file as being archived operation . A determination is then made as to whether additional unprocessed records are present operation . If additional unprocessed records are present the process returns to operation .

Otherwise the process identifies records in the database that are older than some selected threshold operation . This threshold may be for example some selected number of hours since the date and or time in the timestamp indicating when the downlink file was received. The process deletes any identified records from the database operation with the process terminating thereafter. With reference again to operation if unprocessed records are not present the process also terminates.

Turning now to a flowchart of a process for sending event files to a library is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in a proxy server application component such as control process in . As with the other processes the process illustrated in may be initiated in response to an event such as a timer.

The process in this figure supports sending event logs back to the library for analysis for use in planning operations such as maintenance operations. The event log sent to the library in captures event messages that are the result of user interaction with an application user interface system and or interface interaction between application components. This type of information may be used during business processes of an airline for reporting during an audit to ensure that various processes are followed for specific operations.

The process begins by comparing a current log file with a copy of the log file from a previous processing cycle operation . The process identifies any new events that have occurred from the comparison of the two log files operation . The process then sends events for new entries found in comparison to the library operation . A copy of the files sent to the file system is archived operation . The process then sends any rollover log files to the library operation . Rollover log files are files present from a previous period of time such as a previous date.

The process archives a copy of any file in the file system sent to the library operation . The process then deletes the rollover log files sent to the library operation . Next the previous copy of the log file is deleted and the current log file is set as the copy for use in the next comparison operation . The process then looks for device name subdirectories within the event logs direction operation . In operation subdirectories with a device name are created when a proxy server application writes event log files for received files from a software maintenance tool into the file system.

The process looks for event log files in any found subdirectories operation . Afterwards the process sends any event log files found in the subdirectories to the library operation . The process then deletes all of the sent files and empties the subdirectories operation . The process then terminates.

Turning now to a flowchart of a process for sending information to an aircraft is depicted in accordance with an advantageous embodiment. In these examples the process illustrated in may be implemented in a software component such as control process within proxy server application in . In these examples the information takes the form of commands and aircraft software parts sent to an onboard electronic distribution system on the aircraft.

The process begins by receiving a request for a next command from the onboard electronic distribution system operation . Thereafter the process obtains the next command requested by the onboard electronic distribution system operation . In these examples the actual file for the command is located in the file system of the proxy server application. The record in the database contains the metadata about the command in the file system.

The process then updates the database record for the command to indicate that the command has been serviced operation . The process makes a determination as to whether the next command is a delete command operation . If the next command to be processed is not a delete command the process then makes a determination as to whether the aircraft is currently uplinking information operation .

If the aircraft is currently uplinking information the process determines whether the aircraft is also downlinking information operation . If the process is not downlinking information a determination is made as to whether the next command is an uplink command operation . If the next command is not an uplink command the process finds the next command and returns that command to the onboard electronic distribution system operation with the process terminating thereafter.

With reference again to step if the next command to be processed is a delete command the process proceeds to step as described above. With reference again to operation if the next command is an uplink command the process finds and returns the next downlink command or delete command for the aircraft operation with the process terminating thereafter. With reference again to operation if the aircraft is downlinking the process finds and returns the next delete command in the queue for the aircraft operation with the process terminating thereafter.

With reference back to operation if the aircraft is not uplinking a determination is made as to whether the aircraft is downlinking operation . If the aircraft is not downlinking in operation the process finds and returns the next command for the aircraft operation with the process terminating thereafter. If the aircraft is downlinking in operation a determination is made as to whether the next command for the aircraft is a downlink command operation .

If the next command is not a downlink command the process proceeds to operation as described above. Otherwise the process finds and returns the next uplink command or delete command operation with the process terminating thereafter.

In these examples the different decisions in determining which command to send to the aircraft is performed to avoid sending too many uplink and or downlink commands to the same aircraft at the same time. This type of processing is employed to improve or optimize the use of bandwidth while the aircraft is communicating with the proxy server application. An event log message is written to a log file during this process that reports when the aircraft software part was uplinked to an aircraft. In other advantageous embodiments other types of decisions may be used to implement other policies that may be desired. For example certain types of commands may be given preference over other types of commands. Selected types of aircraft may be given priority over others.

With reference next to a flowchart of a process for receiving aircraft software parts is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in a software component such as control process in . The process illustrated in this example is used to obtain aircraft software parts from a proxy server application.

The process begins by receiving a request for a crate containing an aircraft software part from an onboard electronic distribution system operation . The process locates the crate corresponding to the request operation . The process then returns the crate to the onboard electronic distribution system operation with the process terminating thereafter.

Turning now to a flowchart of a process for receiving command status information from an aircraft is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in a software component such as control process in . This process is used to receive status information from an onboard electronic distribution system on an aircraft.

The process in is employed to obtain status information regarding the processing of commands on an aircraft. The status information may indicate whether the sending of the command was successful with respect to the particular line replaceable unit. Further with uplink commands the status also will indicate whether the aircraft software part is stored on the aircraft and ready for installation. In these examples the installation of the aircraft software part on the line replaceable unit is one initiated by a mechanic or technician. In other embodiments this type of installation may be automatic.

The process begins by receiving a call from the onboard electronic distribution system with a command status operation . The process inserts a new record in the command results database table with the information from the command status operation with the process terminating thereafter.

With this information the proxy server application may send the status information back to the library as to whether the command was successful. This information allows an identification of when aircraft software parts are present on an aircraft and ready for installation on a line replaceable unit. In these examples three event log messages are created. A message indicates whether the specific command was successful. Messages also are sent back indicating which deleted files within a command were successfully deleted. Additionally the identification of commands that failed also is logged in the status messages.

Turning now to a flowchart of a process for receiving downlink files is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in a software component such as control process in . This flowchart illustrates the processes that occur when a downlink file is sent to a proxy server application from an onboard electronic distribution system.

The process begins by receiving a call from the onboard electronic distribution system to download downlink data operation . In these examples the on ground component identifies a partial downlink when a file writing operation was previously interrupted and the entire contents of the file were not written into the file. If the file writing operation completed successfully the downlink is a completed downlink. If the call is to send additional data for the downlink then the information received is added onto the file previously stored for the downlink on the file system with the proxy server application.

The process then receives data for the downlink file operation . Next the process determines whether the data is for a partially downloaded downlink file operation . If the data is for a new downlink file the process creates a downlink file operation . Thereafter the data is stored in the downlink file operation . A determination is then made as to whether additional data is received for the downlink file operation . If additional data is received the process returns to operation . Otherwise the process determines whether the file is complete operation . If the file is complete the file is stored in the file system on the proxy server operation with the process terminating thereafter.

With reference again to operation if the file is not complete the process marks the file as a partially downloaded downlink file operation with the process terminating thereafter. With reference again to operation if the data to be downloaded is for a partially downloaded downlink file the process determines whether a partial downlink file is present for the data operation .

If the downlink file is present the process proceeds to operation as described above. Otherwise the process sends an error to the onboard electronic distribution system operation with the process terminating thereafter. This area indicates that a partial downlink file for the data to be sent by the onboard electronic distribution system is not present on the proxy server. In this situation the onboard electronic distribution system may resend the entire file in another data transfer.

In these examples the onboard electronic distribution system may send downlink files to the proxy server application at the same time that the onboard electronic distribution system is receiving commands from the proxy server application. This process takes into account that interruptions may occur during the downlinking of data to the proxy server application. If the sending of downlink data is interrupted the successful written part is saved for later when the rest of the data can be written. In this manner rewriting of earlier data is not necessary. In these examples an event log message may be recorded that indicates that the downlink data was received from the proxy server application from a specific aircraft.

With reference now to a flowchart of a process for receiving status information from a software maintenance tool is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in control process in . This process illustrates the different operations that occur in receiving status messages from a software maintenance tool.

The process begins by receiving a call from a software maintenance tool with command status information for a command operation . Thereafter the process inserts a new record in the command results database table for the command identified in the call operation . The process marks the record as software maintenance tool reported success operation .

The process returns a confirmation to the software maintenance tool operation . These different messages may be collected with other messages to transfer back to the library. The process then marks the local copy of the command as sent to the aircraft operation with the process terminating thereafter. This process prevents the proxy server application from resending the command back to the software maintenance tool.

Turning now to a flowchart of a process for sending information to a software maintenance tool is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in control process in . The process sends information in the form of uplink commands and aircraft software parts to the software maintenance tool.

The process begins by receiving requests from the software maintenance tool for a list of commands operation . This operation may be for various types of commands. For example the request may be for any commands that have been designated for the particular software maintenance tool. The request may obtain commands for a particular aircraft a particular line replaceable unit on the aircraft or some identifier.

In response to receiving this request the process locates commands corresponding to the request in the database operation . The process then receives a result from the database operation . The process sends the results back to the software maintenance tool operation with the process terminating thereafter. The software maintenance tool may request the crates containing the aircraft software parts using a process similar to the one illustrated in for sending aircraft software parts to an onboard electronic distribution system.

Turning now to a flowchart of a process for sending lists of aircraft software parts to a software maintenance tool is depicted in accordance with an advantageous embodiment. This process may be implemented in a software component such as control process in . This process may be used to identify what aircraft software parts are available on the proxy server application.

The process begins by receiving a request for a list of aircraft software parts from the software maintenance tool operation . The process then sends a query to the database to identify the aircraft software parts stored in the file system operation . Results are received from the database operation . The list of aircraft software parts are sent to the software maintenance tool operation with the process terminating thereafter.

In these examples the lists returned in operation may contain unique aircraft software part names that are in the inventory of the proxy server application even if the aircraft software part is on the proxy server application only to support a command that was dispatched specifically to that proxy server application and not for other devices.

With reference now to a flowchart of a process for receiving downlink files from a software maintenance tool is depicted in accordance with an advantageous embodiment. The process illustrated in this example may be implemented in a proxy server application component such as control process in .

The process begins by receiving a request from a software maintenance tool to downlink a file operation . In operation this request may be made as a hypertext transport protocol request. A determination is made as to whether a directory is present for the aircraft operation . If a directory is present a determination is made as to whether the file is already present in the directory operation .

If the file is not present in the directory the file is written into the subdirectory for the aircraft operation . Thereafter the process inserts a new record in a downlink files database table for the downloaded file operation with the process terminating thereafter.

With reference again to operation if the file is already present in the subdirectory a timestamp is added to the file name operation with the process then proceeding to operation as described above.

In operation a timestamp is added to the file name to allow an additional copy of the same file to be written without overriding or losing the original file. As a result the original file name is present along with an additional file having a file name that is similar except for the addition of the timestamp. The contents of the files may be identical in some cases. With reference again to operation if the directory for the aircraft is not present the process creates a subdirectory for the aircraft operation . The process then proceeds to operation as described above.

In a flowchart of a process for receiving event log files from a software maintenance tool is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in control process within proxy server application in .

The process begins by receiving a request from a software maintenance tool to downlink an event log file to the proxy server application operation . The process then determines whether a subdirectory is present for the device operation . In this example the device is a software maintenance tool. If a subdirectory is present for the device a timestamp is added to the file name of the file received from the software maintenance tool operation . The process then writes the file into the device name subdirectory operation with the process terminating thereafter.

With reference again to operation if a subdirectory is not present for the device the process creates a subdirectory for that device operation . The process then proceeds to operation as described above.

Within aircraft software part management apparatus in the different advantageous embodiments provide a computer implemented method apparatus and computer program product for managing aircraft software parts. The different advantageous embodiments provide a software maintenance tool located on a portable data processing system that may be used to establish connection to a source through a ground network. A set of uplink commands may be retrieved from the source through this connection. A set of aircraft software parts corresponding to the uplink commands are retrieved from the source through the established connection to form a set of retrieved aircraft software parts. The set of aircraft software parts is stored in the portable data processing system.

This portable data processing system may then be disconnected from the ground network and connected to an aircraft network in an aircraft. An uplink command is issued from the set of uplink commands to the aircraft network through an on ground component located in the portable data processing system. The stored aircraft software part corresponding to the uplink command may then be sent to the aircraft network through the on ground component.

This software maintenance tool may be utilized in situations in which an aircraft network is unable to establish a connection with a ground network. For example at some airports the aircraft network may be incompatible with the particular ground network that is present. In other examples a failure or error in the ground network may prevent the aircraft network from communicating with the ground network to receive commands and aircraft software parts.

Further the software maintenance tool on the portable data processing system also may be employed to receive data from the aircraft. This data may be for example a downlink file.

With reference next to a diagram illustrating data flow and a software maintenance tool is depicted in accordance with an advantageous embodiment. Software maintenance tool interacts with components such as library proxy server application and onboard electronic distribution system . These components also are referred to as sources. In these examples software maintenance tool provides for the transfer of information between library and or proxy server application and onboard electronic distribution system .

Library may be for example library in while proxy server application may be proxy server application in . Onboard electronic distribution system may be for example onboard electronic distribution system in .

Library sends new commands and parts to software maintenance tool message E . The results of processing these commands in parts may be returned to library by software maintenance tool message E . Additionally software maintenance tool also may return downlink and event log files message E .

Depending on the particular implementation or use software maintenance tool may receive new commands and parts indirectly from library through proxy server application message E . In a similar fashion software maintenance tool may return command status message E and downlink and event log files message E to proxy server application which in turn sends this information to library .

With respect to transferring information with onboard electronic distribution system software maintenance tool may send new commands and aircraft software parts to onboard electronic distribution system message E . Software maintenance tool may receive a command status from onboard electronic distribution system message E . The command status also may include the status of software directory parts sent to onboard electronic distribution system . Onboard electronic distribution system may send downlink and event log files to software maintenance tool for transfer to library message E .

Examples of these types of transfers are described in more detail below. Further these steps and interactions may occur in a particular order and any of the different messages and interactions may occur simultaneously at any time. For example software maintenance tool may send new commands and aircraft software parts to onboard electronic distribution system at the same time software maintenance tool receives downlink files from onboard electronic distribution system . In these examples software maintenance tool executes on a portable data processing system such as a laptop computer. Data processing system in is an example of the data processing system that may be used to implement a laptop computer.

Software maintenance tool may be transported from one location to another location to distribute aircraft software parts and to download information such as download data or files from line replaceable units on an aircraft. In the different advantageous embodiments software maintenance tool establishes a direct connection with onboard electronic distribution system . In these examples a direct connection may be a wire connection or a wireless connection. This type of connection is made without a network connecting the data processing system or systems on the aircraft to the data processing system on which software maintenance tool is located.

Turning now to a block diagram of a software maintenance tool is depicted in accordance with an advantageous embodiment. In this example software maintenance tool includes library service database file system manager on ground component interface and on ground component .

Library service provides an interface to communicate with other components within an aircraft software part management apparatus. Library service provides software maintenance tool an interface to communicate with components such as for example a library and a proxy server application. Database contains information such as metadata about commands in aircraft software parts or parts in file system .

Additionally database also may contain information about downlink information. This information is stored in the form of tables and records within database . Further database may store commands received from a proxy server application for execution by an onboard electronic distribution system on an aircraft data processing system in the aircraft.

File system stores files such as commands aircraft software parts and downlink files. The different files may be stored within crates in file system depending upon the particular implementation. Manager includes processes for managing the operation of software maintenance tool . In these examples manager may incorporate processes for presenting user interface views to a user. These views may provide a user an interface to initiate operations and to view information.

On ground component interface provides an interface to on ground component . On ground component interface may be implemented using application programming interface calls in these examples. On ground component communicates with the aircraft. In these examples on ground component may communicate with an onboard electronic distribution system located on the aircraft data processing system in the aircraft. By having an interface to on ground component on ground component may be changed or modified for particular aircraft or types of aircraft without affecting the other components within software maintenance tool .

Turning now to a diagram of commands and command resource tables is depicted in accordance with an advantageous embodiment. In this example commands table represents commands while command resource table represents command resources. These tables are examples of tables that may be found in database in software maintenance tool in .

Commands table includes command identifier airplane identifier system name application name command type priority order device name device type date servicing status execution status percent complete execution completion date and command resource list . Command resource table includes command identifier command resource identifier data type crate name crate path crate file size production status application standard owner supplier crate expiration date and release date .

The different fields illustrated for commands table and command resource table represent fields that may be found in tables within a software maintenance tool database. In commands table command identifier uniquely identifies the particular record. Command identifier may be found in various tables to point to a specific command record. Airplane identifier identifies a specific aircraft. In these examples the identifier may identify an aircraft uniquely within a fleet of aircraft for a particular airline. System name identifies the name of the line replaceable unit on which the aircraft software part is located. System name includes routing information to identify the line replaceable unit. Data type identifies the application generating the command. Command type identifies the type of command. Priority order indicates whether and what a priority may be for a command file. Device name identifies a particular device. Device type identifies the type of device. Date identifies the date and time that a command was created in the library. Servicing status identifies commands that have been successfully sent to the onboard electronic distribution system and identifies commands that have been reported to the library as having been successfully uplinked or executed on the onboard electronic distribution system.

Execution status provides a notification of whether the command has been executed on the aircraft. In particular this command provides information as to whether the onboard electronic distribution system on the aircraft has executed the command. Percent complete indicates the progress of the uplinking of an aircraft software part in a crate by the onboard electronic distribution system in these examples. Execution completion date identifies when the command execution is complete. Command resource list identifies a data structure containing information about the crate such as command resource table in .

In command resource table command identifier is similar to command identifier in commands table and provides an identification of a specific command record. Command resource identifier is used to identify specific command resource records in the database. Data type identifies the type of data for the resource. For example the resource may be an aircraft software part or a file. In these examples each command allows different types of information to be associated with the particular command.

Crate name identifies the name of the crate in which the aircraft software part is located. Crate path identifies the location of the crate containing the aircraft software part. Crate file size identifies the size of the crate. Production status indicates the production status of the particular aircraft software part contained within the crate. These values may be for example red label blue label or black label.

Application standard identifies the applicable standard for the aircraft software part in these examples. Owner identifies the owner of any intellectual property of the aircraft software part contained within the crate. Release date identifies the release date of the aircraft software part.

With reference now to a diagram of partial downlink data is depicted in accordance with an advantageous embodiment. In this example partial downlink table is an example of a table that may be found in a database within a software maintenance tool such as database in . As depicted partial downlink table contains message identifier airplane identifier downlink file and partial file XML .

Message identifier is a command identifier for partial downlinks related to a downlink command sent to an onboard electronic distribution system. This identifier is generated by the onboard electronic distribution system on an aircraft for downlink files and is not the result of the downlink command sent to the onboard electronic distribution system by the library through a proxy server application or the software maintenance tool. Airplane identifier identifies the particular aircraft within a set of aircraft.

Downlink file specifies the full directory path to the partially downlinked file. When an onboard electronic distribution system requests a downlink file for which an attempt has already been made to downlink the file at a prior time the software management tool returns the path to the partially downlinked file.

Partial file XML contains information about the partially downlinked file. This information may be used by the onboard electronic distribution system to resume downlinking of the downlinked file from where the downlinking was previously interrupted. In this manner the downlinking of the file may begin from where it was interrupted to avoid having to resend the entire file.

Turning next to a diagram of a downlinks table is depicted in accordance with an advantageous embodiment. Downlinks table is an example of a table in a database in a software maintenance tool such as database in . Downlinks table stores information about each downlinked file sent by an onboard electronic distribution system in these examples. Downlinks table includes file name file path airplane identifier system name data type AppName file size downlink status downlink received is sent to library and downlink sent to library .

File name identifies the name of the file containing the downlink information. File path in these examples identifies the location of the file containing the downlink information. Airplane identifier identifies the aircraft from which the downlink file was received. This identifier is a unique identifier for a set of aircraft such as aircraft for a particular airline. This identifier may be a tail part number. System name identifies the name of the line replaceable unit on which the aircraft software part is located. Data type identifies the type of data. In the case of downlink information the data is identified as a file. AppName identifies an application on the aircraft data processing system that is responsible for obtaining the aircraft software part.

File size identifies the size of the file containing the downlink data. Downlink status indicates the status of the downlink operation. In these examples downlink status shows successful downlinks. In some embodiments partial downlinks may be identified by downlink status . Library indicates the time when the file was downlinked to the software and maintenance tool. Downlink sent to library indicates the time when the downlinked file is sent to the library or proxy server application. This information is used to determine when to delete the downlinked file from the software maintenance tool. Downlinked files may be deleted after a configurable amount of time past the time the downlinked file was sent to ensure that the downlinked file was backed up on the library or proxy server application to which the downlinked file was sent.

Turning now to a diagram of a software maintenance tool file system directory structure is depicted in accordance with an advantageous embodiment. In this example directory structure represents a file system directory structure that may be used in a file system such as in file system in . Directory structure identifies different types of files to work within the file system on a software maintenance tool. In these examples directory structure includes parts downlinks downlinks unpacked dir route application logs and conf .

Parts identifies a directory that stores crates received from a library directly from the library or through a proxy server application. In these examples the crates may include commands and or aircraft software parts. Further the crates also may be loaded from media such as a flash memory or hard drive attached to the laptop in which the software maintenance tool is located. The crates in this directory may be sent to the onboard electronic distribution system on an aircraft.

Downlinks are a directory used to store downlink files and partial downlink files received from an onboard electronic distribution system. In these examples the downlink files may be organized by the tail number of the aircraft from which the files originated. Downlinks may include subdirectories named by the aircraft tail numbers in these examples. The downlink files are stored in crated form in these examples. Downlink files that have already been sent to the library are not automatically deleted from downlinks . Instead these files may be deleted after some selected amount of time from when they are sent to the library or proxy server application.

DownlinksUnpackDir identifies a directory used by the software maintenance tool to unpack the contents of crates. These crates are unpacked to extract information about a downlink file. The file in uncrated form may be stored in a directory within downlinks unpacked dir using the name of the file.

Route identifies the directory that contains a SMT route info.xml file. This file contains a list of systems applications and commands sorted by each of the applications. The contents of these files are used by the software maintenance tool and indirectly by the library to ensure that uplink commands are sent to the appropriate aircraft systems.

App identifies the directory in which the different processes for the software maintenance tool are installed. Additionally logs related to the software maintenance tool also may be stored in this directory. These logs include for example events that may be recorded during the operation of the software maintenance tool.

Logs is a subdirectory within app and contains the event logger.xml file last sent to the library and or proxy server application in these examples. Conf is a subdirectory within app and contains property files to define the operation or behavior of the software maintenance tool as to define the behavior of various components within the software maintenance tool.

Turning now to a diagram illustrating interface components implemented in a software maintenance tool is depicted in accordance with an advantageous embodiment. In this example user interface components are examples of user interface components that may be implemented in manager within software maintenance tool in . User interface components include connection view uplink command queue view uplink local inventory view downlinked files view events console view and retrieve from library view .

Connection view is a user interface component that provides an area to display functionality tabs. In these examples the user interface provides device identification information as well as a dropdown box allowing a user to select between various components such as an onboard electronic distribution system a library a proxy server application or other devices. Further this interface component also may provide a control to connect the software maintenance tool to the particular device selected from the dropdown box.

Uplink command queue view provides an interface to view the progress of uplinking commands and parts. This view also has a control to delete commands and aircraft software parts. Uplink local inventory view provides a user interface to allow an operator of the software maintenance tool to load or import aircraft software parts from a media. This view allows a user to create uplink commands without being connected to a ground network. The user may select aircraft software parts for uplinking to specific line replaceable units on specific aircraft. This media may be for example a portable media such as a flash memory a portable hard drive a compact disc or a digital versatile disc. Downlinked files view provides a user interface to view downlink files received from the onboard electronic distribution system. A user also may use this view to delete downlink files as well as issue downlink control commands.

Events console view allows a user to view different events that have occurred during the execution of various processes of the software maintenance tool. For example events console view may present a different action that occurred in sending an aircraft software part to an onboard electronic distribution system. These events may include for example connection to the aircraft sending of the file and identification of a successful loading of the file.

Retrieve from library view is a user interface that may be used to initiate processes for obtaining commands and aircraft software parts from a library or proxy server application. Commands table in identifies fields that may be found in commands table . This view also sends back successfully uplinked commands downlink files and event logs.

With reference next to example implementations of user interfaces for user interface components in are depicted. With reference first to window illustrates a main screen or interface that may be presented in user interface components in . In particular window is an example of connection view in . Window includes tabs and . These tabs may be selected to present controls and information for various functions and processes within a software maintenance tool.

Section displays information about the software maintenance tool. In this example section indicates that the software maintenance tool is connected to an aircraft identified by the tail number. List provides a list of other components to which a software maintenance tool may establish connections. Control allows a user to initiate a connection to another component. In these examples a user may select various components such as an onboard electronic distribution system a library or a proxy server application from a set of proxy servers.

With reference now to a selection of tab initiates an uplink command queue view in window . In this example this uplink command queue view is an example of the user interface presented by uplink command queue view in . In this example section displays commands for a particular aircraft in a tree queue. A user may delete a set of commands from section by selecting those commands and pressing delete command . The status information about commands is presented in section .

Information that may be displayed includes for example item expiration priority destination system file type nomenclature file size uplink status and uplink status progress . Item identifies the particular item such as an aircraft software part name. Expiration is an expiration date for a particular command. Priority identifies the order in which commands are to be uplinked to the destination system on the aircraft. Destination system identifies the particular line replaceable unit in an application on the aircraft in which parts are to be sent. Type identifies the type of item contained in the crate such as a file or an aircraft software part.

Nomenclature provides a short identification or description of the part. File size identifies the size of the crate containing the particular item. Uplink status provides a status as to the process success or failure of a command. Uplink status progress provides a graphical progress bar showing the percent complete for a particular command.

With reference now to a diagram illustrating a user interface for an uplink local inventory view is depicted in accordance with an advantageous embodiment. In this example tab has been selected and a user interface for uplink local inventory view in is presented. This particular view allows a user to load crates or aircraft software parts from a local source. This type of functionality allows a user to load an aircraft software part from another source in the event that access to a library or proxy server application may be unavailable or interrupted. Additionally new parts that may not be found in the library or proxy server application or updated versions of aircraft software parts also may be loaded in this manner. A local inventory of aircraft software parts or other items may be found on storage devices such as a hard drive a flash memory a compact disc or a digital versatile disc.

Section illustrates an identification of local inventory that may be loaded onto the software maintenance tool. These items may include aircraft software parts and commands. A particular item may be loaded by selecting that item in section and pressing load inventory from media button . The current inventory found on a particular storage device may be refreshed by pressing refresh inventory .

Details about selected items in section may be displayed in section . In these examples the information may include for example inventory item expiration date airplane identifier airplane destination type nomenclature file size uplink status and uplink status progress . This information is similar to the information displayed for aircraft software parts received from a library proxy server application as displayed in window in .

With reference now to a diagram of a user interface for a downlinked files view is depicted in accordance with an advantageous embodiment. In this example window displays a user interface for a user interface component such as downlinked files view in . This view is presented in response to a selection of tab . In this user interface information about data downlinked from different aircraft is displayed in section .

A user may suspend or stop downlinks from an onboard electronic distribution system on an aircraft by selecting suspend downlinks button . When this button is selected a software maintenance tool does not receive any additional downlinks or information from the aircraft to which the connection is present. Downlinks may be resumed by pressing a resume button that is displayed.

Further a user may redirect downlinks destined for a proxy server application to the software maintenance tool by selecting redirect downlinks button . Selection of this button causes the onboard electronic distribution system to reroute all downlink information destined for a proxy server application to be sent to the software maintenance tool. If the software maintenance tool is disconnected from the onboard electronic distribution system the downlinks are then automatically sent to the original destination.

Section displays additional information for downlink data presented in section . Further a user may view or delete downlink files in section . Deletions may be made by selecting a particular downlink file and initiating the delete command.

Information presented about downlinked files in section include for example file name airplane identifier system application data type description file size downlink status and downlink date and time . File name identifies the name of the file downlinked or received from the aircraft. Airplane identifier identifies the aircraft from which the data is received. System identifies the line replaceable unit from which the data is received. Application identifies the aircraft software part on the line replaceable unit associated with the data.

Data type identifies the type of data generated by the application. The software maintenance tool receives downlinked files with a data type to represent an unsolicited downlink in these examples. Description identifies the name of the file downlinked in this example. File size identifies the size of the downlinked file. Downlink status identifies whether the data was successfully downlinked to the software maintenance tool. Downlink date and time identifies when the downlink is completed. This completion may be a successful completion a failure or a partial downlink depending upon the particular situation.

Turning now to a diagram illustrating a user interface for an event console is depicted in accordance with an advantageous embodiment. In this diagram window displays a user interface for a user interface component such as events console view in . In the depicted example this particular view is presented in window in response to selecting tab . Section presents activity that occurs with a particular software maintenance tool session. In these examples a software maintenance tool session is a period of time during which the software maintenance tool is operating. The events illustrated in section may be presented in real time.

In these examples these events may be saved by selecting save events console button . Events may be cleared from display in section by selecting clear events console button . Additionally the software maintenance tool may automatically save events without user intervention. In these examples each entry displayed in section includes a date and time stamp a user identifier of the user performing a particular action and a message identifying the action that has been performed.

Turning now to a diagram illustrating a user interface for a retrieve from library view is depicted in accordance with an advantageous embodiment. In this example window displays a user interface for retrieve from library view in . This user interface is presented in response to a selection of tab . This user interface may be used to retrieve commands from a library or a proxy server application as well as browsing or looking at the various aircraft software parts. Additionally this is when the loss may be used to create commands to uplink aircraft software parts to an onboard electronic distribution system.

Parts that are available in the library are displayed in section . Particular aircraft software parts designated for the software maintenance tool may be retrieved by pressing perform library transactions button . A user also may create commands to uplink aircraft software parts to an onboard electronic distribution system using this interface. A user may also select an aircraft software part from section and designate a particular aircraft and line replaceable unit using list and list . List provides identifications of aircraft. List identifies a particular line replaceable unit on the aircraft for the aircraft software part.

After these identifications have been made the aircraft software part may be retrieved from the library by pressing retrieve selected inventory from library button . Selection of this button causes the aircraft software part to be retrieved and a command to be created to uplink the aircraft software part to the aircraft.

Turning now to a diagram illustrating data flow through a software maintenance tool in sending commands and aircraft software parts to an aircraft is depicted in accordance with an advantageous embodiment. In this example data sending flow is shown for software maintenance tool to the sending of commands and aircraft software parts from library or proxy server application to onboard electronic distribution system OBEDS on an aircraft. Each of the different steps and the results of those steps performed by software maintenance tool may be logged as events for downloading to library or proxy server application .

In this example the process begins when a user initiates a transactions process with library or proxy server application using a user interface from a user interface component such as retrieve from library view in . Library service retrieves a list of uplink commands that have been successfully uplinked to onboard electronic distribution system . Library service then makes a call to either library or proxy server application and passes a list of the command identifiers for commands that were successfully uplinked to onboard electronic distribution system . Library service retrieves a list of uplink commands that have been successfully uplinked from commands table . Commands table is an example of a table found in database . Commands table in identifies fields that may be found in commands table .

For every command identifier sent to library or proxy server application the corresponding command is deleted from commands table in database . Additionally library service also may send downlink files and event logs from file system .

Thereafter library service may make a call to library or proxy server application to obtain a list of commands. These commands are compared with commands that should be in queues for distribution to different aircraft. If commands are present in commands table that are not in the list of commands received from library or proxy server application those commands are deleted from this table. However commands generated by an operator of software maintenance tool will be retained. The deletion of commands in these examples occurs for commands previously sent from library or proxy server application .

For each new command received library service determines whether a crate already exists for the aircraft software part within file system . If the crate for the aircraft software part is not present for the command then library service retrieves a crate containing the aircraft software part from library or proxy server application . Any retrieved crates are stored in file system . If the crate is successfully retrieved or a crate already exists the new command is placed into commands table in database . If the crate is successfully retrieved or the crate already exists the new command is added to a queue in uplink command queue manager . Uplink command queue view may show information for commands managed by uplink command queue manager .

Thereafter uplink local inventory view is updated or refreshed. In this example uplink local inventory view is a user interface component such as uplink local inventory view as displayed in window in . This view allows an operator to see the different aircraft software parts that are stored within the software maintenance tool. By knowing what aircraft software parts are present in file system an operator may create new commands to uplink those aircraft software parts using the software maintenance tool. Thereafter uplink command queue view is updated. This view may be for example uplink command queue view as displayed in window in .

Thereafter the operator may disconnect software maintenance tool from library or proxy server application . Software maintenance tool may then be transported to the aircraft and connected to onboard electronic distribution system . When this connection is established uplink command queue view automatically uplinks all commands that have not been successfully uplinked for the particular aircraft to onboard electronic distribution system through on ground connection OGC interface .

On ground connection interface creates a command for on ground component OGC and adds this command to a list of commands for on ground component to retrieve one at a time. These commands are identified in uplink command queue manager .

When on ground component calls on ground component interface on ground component interface determines whether the aircraft is already uplinking data. If the aircraft is already uplinking data a null value is returned to on ground component and commands are not changed in the command list. In these examples on ground component communicates with onboard electronic distribution system to determine whether the aircraft is uplinking data in these examples.

If the aircraft is not already uplinking the oldest uplink command in the command queue is passed to on ground component . In turn on ground component communicates with onboard electronic distribution system to start uplinking the crate identified in the command. On ground component may obtain status information during uplinking of aircraft software parts. Further on ground component interface may update uplink command queue view to show a progress bar such as those illustrated in uplink status progress in .

When the command has been successfully executed uplink command queue view updates the information in commands table . Additionally uplink command queue view also updates the execution status of the command field in commands table .

Turning now to a diagram illustrating data flow in a software maintenance tool processing downlinked files is depicted in accordance with an advantageous embodiment. In this example software maintenance tool may receive downlinked files initiated by application executing on a laptop computer connected to onboard electronic distribution system OBEDS . Additionally unsolicited downlink files from line replaceable units LRU s also may be received by software maintenance tool . When software maintenance tool establishes a connection to onboard electronic distribution system on ground component is the component that provides the communication with onboard electronic distribution system .

On ground component OGC communicates through on ground component OGC interface with other components in software maintenance tool . In this example a downlink file is downlinked and stored in file system . When the downlink file is transferred to file system on ground component interface inserts a new record in downlinks table in database .

The different downlink files stored within file system may be viewed using downlinked files view . This view is an example of a user interface component such as downlinked files view in . This view may be used to identify what downlink files have been received as well as manipulate downlink files. Downlinks table in shows examples of fields that may be found in downlinks table .

Thereafter software maintenance tool may be moved and establish a connection with library or proxy server application . When this connection is established library service identifies downlink files that have not yet been sent to library or proxy server application . The identification of these files may be found in downlinks table .

In these examples partially downlink files are not sent to library or proxy server application . For each of the downlink files identified in downlinks table library service confirms that these files are still stored in file system . Library service then forwards all of the located downlinked files to library or proxy server application . Any files sent to proxy server application are eventually sent to library by proxy server application .

In some cases files may be only partially downlinked to the software maintenance tool because of an interruption. The different advantageous embodiments provide a mechanism through which partially downlinked files are saved by the software maintenance tool within file system . These partial downlinked files are saved and additional or remaining portions of the downlink may be retrieved at a later time and added to these partial downlinked files to form a complete downlink file. In this manner if an interruption occurs the downlinking of data may pick up where it left off without having to downlink the entire file again.

Turning now to a diagram illustrating data flow and logging importing events by a software maintenance tool is depicted in accordance with an advantageous embodiment. In this example software maintenance tool logs events in file system using process event logger . Process event logger is an example of a process that may be found in manager in .

In these examples process event logger may log all of the different steps and results of those steps performed by software maintenance tool in uplinking and downlinking data. This type of information may be displayed in event console view which is an example of a user interface component in user interface components in . An example user interface is window in . When software maintenance tool connects to library or proxy server application through library service a user input is received to transfer data and log files stored in file system and are forwarded on to library and proxy server application . If the event logs are successfully sent the event log files are renamed for archival purposes.

Turning now to a diagram illustrating data flow in a software maintenance tool retrieving parts from a library is depicted in accordance with an advantageous embodiment. In this example software maintenance tool may connect to library or proxy server application through library service . A user may retrieve from library view to identify parts stored on library and or proxy server application .

Retrieve from library view is an example of retrieve from library view in within user interface components in . Window in is an example of a user interface for this particular view. The parts may be displayed and retrieved from retrieve from library view . A user may select a set of parts and retrieve those parts from library and or proxy server application and store the aircraft software parts in file system . The parts are then displayed for users to create uplink command s .

Turning now to a diagram illustrating data flow in a software maintenance tool during retrieving and creating of commands is depicted in accordance with an advantageous embodiment. In this example software maintenance tool may retrieve parts and create commands using retrieve from library view . Retrieve from library view is an example of a user interface component such as retrieve from library view in as presented in window in .

When library service is connected to library or proxy server application a user may view a list of parts retrieved from retrieve from library view . A user may select parts through this view and initiate downlinking of those parts by library service . The parts retrieved by library service are stored in file system . In these examples the aircraft software parts are stored as crates. Uplink local inventory view may be refreshed.

With retrieve from library view a user may create commands that are stored in commands table in database . These commands may be added to uplink command queue manager for execution by on ground component OGC through on ground component OGC interface to onboard electronic distribution system OBEDS . Uplink command queue manager is an example of a component within manager in software maintenance tool in . The status of this process may be viewed through uplink command queue view .

With reference now to a diagram illustrating uploading of aircraft software parts from alternative sources is depicted in accordance with an advantageous embodiment. In this example software maintenance tool may upload aircraft software parts from media into file system through uplink local inventory manager . This view is an example of uplink local inventory view in . This view uses a graphical user interface such as window in .

The control of this uploading or uplinking process from media may be performed using uplink local inventory view . Aircraft software parts may be uploaded into software maintenance tool from other sources other than a library or a software proxy server application. By allowing for this type of flexibility software maintenance tool may allow for last minute parts or new parts not yet available from normal sources to be uploaded to an aircraft or if a connection to the library or proxy server application is unavailable.

Turning next to a high level flowchart of a process for managing aircraft software parts is depicted in accordance with an advantageous embodiment. The process illustrating in may be implemented in a software maintenance tool such as software maintenance tool in .

The process begins by establishing a connection between a portable data processing system and a source through a ground network to form an established connection operation . Thereafter the process retrieves a set of uplink commands from a source through the established connection operation . The source may be for example a proxy server application a library or even a local storage device.

The process then retrieves a set of aircraft software parts corresponding to the set of uplink commands from the source through the established connection to form a set of retrieved aircraft software parts operation . The process stores the set of retrieved aircraft software parts in the portable data processing system to form a set of stored aircraft software parts operation .

The process then disconnects the portable data processing system with the stored aircraft software parts from the ground network operation . In these examples the portable data processing system is moved to a location to allow the portable data processor to connect to an aircraft network on an aircraft. Next the process connects the portable data processing system with the stored aircraft software parts to an aircraft data processing system in an aircraft operation .

The process then issues an uplink command from the set of uplink commands to the aircraft data processing system through an on ground component in the portable data processing system operation . The process sends a stored aircraft software part corresponding to the uplink command in the set of stored aircraft software parts to the aircraft data processing system through the on ground component operation with the process terminating thereafter.

Turning now to a more detailed flowchart of a process for managing aircraft software parts is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in a software maintenance tool such as software maintenance tool in . The process in this figure illustrates the different steps that occur in a software maintenance tool when connected to a source such as a library or a proxy server application.

The process begins by receiving a request to perform transactions operation . In this example the process to perform transactions may be initiated by a user through a user interface within user interface components in . In particular the process may be initiated by a user entering user input into retrieve from library view in with a user interface such as window as illustrated in .

The process then retrieves a list of uplink commands sent to an onboard electronic distribution system operation . In this example the list of uplink commands are ones in which the aircraft software parts identified by the uplink command has been successfully sent to the onboard electronic distribution system. These different commands may be stored in a table in a database such as commands table in . Each of the records within commands table in may include an indication as to whether a command was successfully sent.

Thereafter the process calls a source operation . The source may be for example a library or a proxy server application. The process sends these lists of commands to the source operation . The commands sent to the source are then deleted from the database and the software maintenance tool operation .

The process then calls the source to retrieve new commands operation . A list of commands is received from the source operation . In operation the commands are received in an uncrated form unlike the manner in which a proxy server or application receives commands from a library. The process then deletes commands not in the list from the database operation . As a result the source is the authority or provides an override as to what commands are to be executed by the software maintenance tool.

If a user desires to remove commands or delete commands for execution on an aircraft these commands may be deleted at the source. The list of commands sent to the software maintenance tool results in any commands not in the list being deleted. As a result this type of process allows for updating commands to be executed on the software maintenance tool.

The process selects an unprocessed command for processing operation . A determination is made as to whether a crate containing an aircraft software part is present for the command operation . In operation the process checks the file system on the software maintenance tool to determine whether a crate containing the aircraft software part is already stored in the file system. If a crate is not present then the process retrieves the crate operation .

Next a determination is made as to whether additional unprocessed commands are present operation . If additional unprocessed commands are present the process returns to operation . The process proceeds to operation from operation if a crate is present for the command. The process then adds the commands to a queue operation . The process then updates the inventory of aircraft software parts operation with the process terminating thereafter.

In these examples the software maintenance tool may be used to send aircraft software parts to an onboard electronic distribution system executing on an aircraft data processing system in the aircraft network. In these examples the queue may be for example a queue in uplink command queue manager in . The process then updates an inventory of aircraft software parts operation with the process terminating thereafter.

Turning now to a flowchart of a process for sending aircraft software parts from a software maintenance tool to an onboard electronic distribution system is depicted in accordance with an advantageous embodiment. In this example the process may be implemented in a software maintenance tool such as software maintenance tool in . The process begins by detecting a connection to the onboard electronic distribution system on the aircraft data processing system operation .

The process determines whether a command is present in the command queue operation . If a command is present the process determines whether the aircraft is currently uplinking data operation . If the aircraft is not currently uplinking data the process sends a request to the onboard electronic distribution system to uplink the crate containing the aircraft software part operation . The process then obtains the status of the uplink operation . The status may be displayed on a user interface such as window in . Operation occurs while uplinking of the crate continues.

After uplinking completes a determination is made as to whether the uplinking of the crate with the aircraft software part has been successful operation . If the uplinking of the crate was successful the command table is updated operation . The table in these examples is a commands table such as commands table in . The process then returns to operation to determine whether additional commands are present in the queue for processing.

With reference again to operation if the uplinking of the aircraft software part was not successful an error is generated operation and the process returns to operation as described above. With reference again to operation if the aircraft is uplinking data a null value is returned operation with the process terminating thereafter.

With reference now to a flowchart of a process for receiving downlink data is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in a data software maintenance tool such as software maintenance tool in .

The process in begins by receiving a call from the onboard electronic distribution system to retrieve a partial downlink file operation . A determination is made as to whether the partial downlink file is contained in a partial downlinks table operation . This partial downlink table may be a table such as for example partial downlink table in . If the partial downlink file is not found in the table the process receives a call to obtain a handle to the downlink file from the onboard electronic distribution system operation .

Next a determination is made as to whether enough disk space is present to store the downlink file operation . If sufficient space is present the downlink file is created in a directory called downlinks and a file handle is returned to the onboard electronic distribution system operation . The process then stores the downlink data into the downlink file in the downlinks directory operation .

A determination is then made as to whether the downlink file was successfully stored operation . If all of the downlink data was successfully stored the process adds the downlink file to the downlinks database table operation . This table may be a table such as for example downlinks table in . The process then updates the downlink files view to show the new file operation . This view is a view such as downlinked files view as presented in window in .

The process then determines whether the data is written to a partial downlink file operation . If the data is not written to a partial downlink file the process terminates. Otherwise the partial downlink record in the partial downlinks table is deleted operation with the process terminating thereafter. In this case the partial downlink file is completed with the rest of the downlink data and the identification of the partial downlink file is no longer needed.

With reference again operation if the storing of all of the data for the downlink file was not successful the process receives a call from the onboard electronic distribution system to store the partial downlink file operation . In this case the onboard electronic distribution system may have interrupted the downlinking data for a number of different reasons. For example the amount of bandwidth available is insufficient to downlink data and uplink other information. The process then creates a record in the partial downlinks database table operation with the process terminating thereafter.

With reference again to operation if insufficient space is present for the downlink file a null is returned to the onboard electronic distribution system to indicate that insufficient disk space is present for the downlink data operation . With reference back to operation if a partial downlink file is present in the partial downlinks table the process returns partial downlink file information to the onboard electronic distribution system operation . This information includes a starting point or offset to send the rest of the downlink data for the downlink file. The process then proceeds to operation as described above.

Thus the software maintenance tool described in these different advantageous embodiments provides an additional feature for transferring aircraft software parts from a library to an aircraft data processing system. In the different advantageous embodiments the software maintenance tool may connect either to the library or to a proxy server application on a ground network to receive commands and aircraft software parts. The software maintenance tool may then be disconnected from the ground network and physically moved to a location for connection to an aircraft network. At this location the software maintenance tool connects to the aircraft network and transfers aircraft software parts and commands to the onboard electronic distribution system executing on a data processing system on the aircraft network in the aircraft.

Additionally the software maintenance tool allows for an operator to create commands independently from the library using graphical user interfaces presented by view components in the software maintenance tool. The software maintenance tool also includes features that allow this component to receive aircraft software parts from other sources other than a library or proxy server application.

The different advantageous embodiments also provide a computer implemented method apparatus and computer program product for transferring information with an aircraft. In one advantageous embodiment a computer implemented method is used for transferring information with the aircraft. A connection is established between an onboard electronic distribution system executing in an aircraft data processing system in the aircraft and an on ground component.

The on ground component may be located in a ground network in a software application such as a software maintenance tool or a proxy server application in these examples. In response to a request for a command from the onboard electronic distribution system made through the connection the command for execution by the onboard electronic distribution system is identified. This identified command is sent to the onboard electronic distribution system from the on ground component. A transaction identifier is assigned to the command.

A status of the transaction associated with the command is maintained on the onboard electronic distribution system and on the on ground component using the transaction identifier. An uplink is initiated by the onboard electronic distribution system. An aircraft software part is then sent to the onboard electronic distribution system from the on ground component to perform the uplink. The status of this transfer is stored.

Turning now to a diagram of components used to transfer information with an aircraft is depicted in accordance with an advantageous embodiment. Onboard electronic distribution system is an example of an onboard electronic distribution system such as onboard electronic distribution system in aircraft software part management apparatus in .

In this illustrative example onboard electronic distribution system and mass storage are components located on an aircraft data processing system in an aircraft network. Onboard electronic distribution system is an example of onboard electronic distribution system in . Mass storage is an example of storage device in . These components are part of an aircraft data processing system such as aircraft data processing system in aircraft network .

On ground component and on ground component interface are examples of components that may be found in a proxy server application or a software maintenance tool such as proxy server application in or software maintenance tool in . In these examples on ground component and onboard electronic distribution system may exchange information. Command aircraft software part downlink file and status are examples of information that may be transferred with onboard electronic distribution system .

In these examples on ground component may send command to onboard electronic distribution system . Onboard electronic distribution system may execute this command to perform a transaction. This transaction may be for example an uplink or a downlink of data. An uplink includes sending aircraft software part to onboard electronic distribution system . A downlink includes sending downlink file to on ground component .

Additionally the status of the different transactions is maintained by both on ground component and onboard electronic distribution system in these examples. Status is sent by onboard electronic distribution system to on ground component to provide the status of a particular transaction being performed through the execution of a command such as command . This status is associated with a particular command or transaction through a command identifier.

Aircraft software part may be sent to onboard electronic distribution system for storage with aircraft software parts in mass storage . Downlink file may be a downlink file from downlink files in mass storage .

Status information may be stored in mass storage and includes status information such as status . Status information may indicate that a particular aircraft software part has been successfully stored within aircraft software parts in mass storage . Status information allows for the initiation of the loading of an aircraft software part from mass storage onto a line replaceable unit once that aircraft software part has been identified as being successfully uplinked by onboard electronic distribution system and stored within mass storage .

Additionally status information may identify whether a downlink file such as downlink file has been successfully downlinked. If a partial downlink of downlink file occurs status information provides the status of what information within downlink file has been transmitted. As a result maintaining a status of how much information has been downlinked to on ground component may be used to downlink the remaining information for downlink file at a later point in time without restarting the entire transmission of downlink file .

On ground component interface provides an interface with other components to on ground component . In this manner on ground component may be interchangeable or modified with other versions or configurations of on ground components to provide access to a particular onboard electronic distribution system that may have a different protocol for exchanging information or processing commands. In these examples on ground component contains the processes needed to transfer information with onboard electronic distribution system . If a different onboard electronic distribution system is employed that is not compatible with on ground component on ground component may be substituted with another on ground component.

As a result other software components in the ground network do not have to be changed. For example other components within a proxy server application and a software maintenance tool do not require modifications to be able to communicate with an onboard electronic distribution system.

Turning now to a message flow diagram illustrating message flow used to poll for a command is depicted in accordance with an advantageous embodiment. In this example the components involved in this message flow are on ground component OGC interface on ground component and onboard electronic distribution system .

In this example onboard electronic distribution system polls on ground component for a command message T . In response to being polled on ground component sends a get command request to on ground component interface message T . This command is used by on ground component interface to identify commands that may be located in a proxy server application or a software maintenance tool for onboard electronic distribution system .

In response a command or a pointer to a crated command file is returned to on ground component message T . In these examples a proxy server application returns a pointer such as a universal resource locator to a crated file containing the command. With a software maintenance tool the actual command itself is returned in message T. If a command is not present then a null value or some other indicator is returned in message T. The returned command is then sent to onboard electronic distribution system message T . Onboard electronic distribution system may then process and execute the command received in message T.

Turning now to a message flow diagram illustrating the sending of status information is depicted in accordance with an advantageous embodiment. In this example components in the message flow include on ground component interface on ground component and onboard electronic distribution system . Onboard electronic distribution system provides status information for various operations and processes executed by onboard electronic distribution system . This status information may include for example the status of an aircraft software part that has been uplinked the status of a downlink file and or other suitable information.

Onboard electronic distribution system sends the status to on ground component message U . This status is relayed by on ground component to on ground component interface message U . This status information may then be processed by a proxy server application or a software maintenance tool in these examples.

Two phases are present for downlinking data. illustrates a first phase in which a request for downlinking data is made and depicts a second phase in which the data is downlinked. With reference now to a message flow diagram of a request to downlink data is depicted in accordance with an advantageous embodiment. The message flow in shows the first phase in downlinking data. In these examples shows the request to downlink data. The second phase is for actually transmitting downlink data as described with respect to below.

In this example phase one has two cases. In case a request to downlink information is made with a partial downlink being available.

In case onboard electronic distribution system sends a request to downlink a file message V . In message V the request may be refused if no space is present to store the downlink file. In response on ground component sends a request to determine whether a partial downlink record is present to on ground component interface message V . In response on ground component interface sends a request to obtain a partial downlink associated with the request to send to message V message V . The request sent in message V includes an airplane identifier and a downlink identifier. This information is used by on ground component interface to determine whether a partial downlink file is present for this particular downlink file.

On ground component interface returns a null value to on ground component indicating that a partial downlink file is not present for the requested downlink message V . In response on ground component makes a request to downlink the downlink file message V . The message in message V is a request to downlink the entire file in these examples. In these examples the message includes information about the file size. If space is available on ground component interface returns a location to downlink the file to on ground component message V . If no space is available a null value is returned to message V.

In response on ground component returns a response to onboard electronic distribution system message V . This message is either an indication that is an okay to proceed downlinking or a denial of the request.

In case in the first phase onboard electronic distribution system makes a request to downlink part of a file for a downlink file message V . In response on ground component makes a request to determine whether a partial downlinked file is already present for the requested downlink message V .

In response to receiving this message on ground component interface returns a document containing a reference to an existing partially downlinked file to on ground component message V . In these examples the document is an extensible markup language XML document and reference may be a pointer or universal resource locator URL depending on the particular implementation.

When the reference is returned on ground component sends a response to the request to downlink a partial downlink file to onboard electronic distribution system message V . The response in this example includes an indication that it is okay to proceed with the downlink and an offset to use. The offset identifies where in the downlink file the downlinking of data should start. This offset is identified from the downlink information already received for the downlink file.

Turning now to a message flow diagram for downlinking data is depicted in accordance with an advantageous embodiment. As with this downlink process includes two cases case and case . Case involves downlinking data with no partial downlinks and phase involves downlinking data with partial downlinks. In case illustrates the case in which a partial downlink is not available while case illustrates the case in which a partial downlink file is available on the on ground component.

In case the message flow begins with onboard electronic distribution system downlinking the downlink file to on ground component message W . On ground component makes a request to downlink the file from onboard electronic distribution system to on ground component interface message W . This message includes a file size as well as other suitable downlink information.

On ground component interface returns a response to on ground component message W . A null is returned if space is unavailable to downlink the downlink file. If the downlink file can be downlinked on ground component writes the information into a file and returns a response to onboard electronic distribution system message W . Thereafter on ground component makes a request to on ground component interface to store the file message W .

Next in case onboard electronic distribution system downlinks a file to on ground component message W . Thereafter on ground component requests the partial downlink file from on ground component interface message W . In this example the file is returned to on ground component by on ground component interface message W .

At this time on ground component writes information into the file to complete the downlink file and returns a response to onboard electronic distribution system message W . In this example the number of bits written in the file is identified in the response. Thereafter on ground component sends a request to on ground component interface to store the downlinked file message W .

In response to this message on ground component interface may store the file within the file system of the ground component. The ground component may be a file stored in a proxy server application or a software maintenance tool.

With reference now to a diagram illustrating message flow when the file is only partially delivered is depicted in accordance with an advantageous embodiment. In this example onboard electronic distribution system downlinks a file using a normal downlink sequence in which the connection fails or stops message X . In response to only receiving part of the file on ground component sends a request to on ground component interface to store the partial downlink file message X . In response to receiving this request the partial downlink file is stored in a file system by on ground component interface . This file system may be located in a proxy server application or a software maintenance tool.

Turning now to a message flow diagram illustrating an uplink process is depicted in accordance with an advantageous embodiment. Uplinking is performed in two phases in these examples. In phase information about the file to be uplinked is requested and in phase the file itself is uplinked. In both phases on ground component prompts the ground system for information about the resource. The ground system may be for example other components in a proxy server application or software maintenance tool.

As depicted onboard electronic distribution system sends a message requesting the uplink of an aircraft software part message Y . In response to receiving this request on ground component sends a call to obtain the particular aircraft software part to on ground component interface message Y . In response to this call an identification of the aircraft software part is returned if the aircraft software part is present message Y .

If the part is not present a null value is returned in these examples. In response to receiving this message on ground component relays the message to onboard electronic distribution system message Y .

In phase onboard electronic distribution system requests the aircraft software part message Y . In response to receiving this request on ground component requests the aircraft software part from on ground component interface message Y . On ground component interface returns the resource if it is available message Y . If the resource is not available a null value is returned. On ground component then sends the aircraft software part to onboard electronic distribution system message Y . If the aircraft software part is not available then an error is returned.

Turning now to a diagram illustrating message flow in an uplink process is depicted in accordance with an advantageous embodiment. In this example two phases are present in the message flow phase and phase . In phase a request is made for a partial uplink of an aircraft software part and in phase the uplink of the partial aircraft software part is performed. This partial uplinking of an aircraft software part may be performed if a previous transfer of the aircraft software part was interrupted.

In phase onboard electronic distribution system sends an uplink request to on ground component . In this example the request identifies the aircraft software part in an offset or start position from which the part should be uplinked message Z . In response to receiving this request on ground component requests the aircraft software part message Z .

On ground component interface returns the aircraft software part if the part is present. Otherwise a null value is returned message Z . In response to receiving the aircraft software part on ground component returns a response indicating that the aircraft software part is available at the particular offset or starting point message Z .

Next in phase onboard electronic distribution system requests the aircraft software part at the start or offset position message Z . On ground component requests the resource in response to receiving this request message Z .

In response to receiving the request on ground component interface returns the aircraft software part or a null value if the part is unavailable to on ground component message Z . Responsive to receiving the response on ground component begins uplinking the aircraft software part at the start point or offset identified message Z . If the part is unavailable an error is returned to onboard electronic distribution system .

Turning now to a flowchart of a process for uplinking data is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in an onboard electronic distribution system such as onboard electronic distribution system in . In this example the uplink data is for an aircraft software part.

The process begins by receiving an uplink command to uplink an aircraft software part operation . A determination is made as to whether the aircraft software part has already been partially uplinked operation . If the aircraft software part has not been partially uplinked a request is made to receive the aircraft software part operation . The process then receives data for the aircraft software part operation .

A determination is made as to whether the transmission of the data has stopped operation . The transmission may stop for a number of reasons. For example the transfer of an aircraft software part may have completed. In another example an interruption may have occurred without completing the transfer of the aircraft software part.

The interruption may also occur due to various events. In one event the communications link between the onboard electronic distribution system and the on ground component may have terminated unexpectedly. In another example the event may be an operator terminating the transmission of the aircraft software part from a software maintenance tool.

If the transmission of data has not stopped the process returns to operation . Otherwise a determination is made as to whether the aircraft software part is complete operation . If the aircraft software part is complete the aircraft software part is stored in a storage device in the aircraft data processing system operation . In this example the storage device may be mass storage in .

The process then returns a status to the on ground component operation with the process terminating thereafter. In this example the status indicates that the aircraft software part has been completely received.

With reference again to operation if the aircraft software part has not been completely received the received portion of the aircraft software part is stored in a storage device operation . The process then stores the status operation with the process terminating thereafter. In this illustrative example the status may identify the aircraft software part and the portion of the aircraft software part that has actually been received. This information may be used at a later point to retransmit the remaining portion of the aircraft software part.

With reference again to operation if the aircraft software part has been partially uplinked the process requests the unsent portion of the aircraft software part operation . The process then proceeds to operation to receive data from the aircraft software part. In operation the request may include an identification of the offset or start point for the aircraft software part data that has not yet been received.

Turning now to a flowchart of a process for downlinking data is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in an onboard electronic distribution system such as onboard electronic distribution system in .

The process begins by sending a request to send a downlink file operation . A determination is made as to whether an indication is received to send the data for the downlink file operation . If an indication is received to send the data the process sends the downlink data for the downlink file operation .

Next a determination is made as to whether the transmission of the downlink data has stopped operation . The transmission may stop because all of the data has been sent. In other instances for example the transmission may stop due to a loss of a communications link or an interruption by an operator on the aircraft. If the transmission of the data has not stopped the process returns to operation to continue to send downlink data.

If the transmission has stopped a determination is made as to whether all of the downlink data has been sent from the downlink file operation . If all of the downlink data has been sent the process sends a status of the completion operation with the process terminating thereafter.

With reference again to operation if all of the downlink data has not been sent a status of the transmission of the downlink data is stored operation . In these examples the status may be stored as status information in . The status in this example may identify the downlink file and the amount of data that was sent.

This process also may be used to send a partial downlink file in which a portion of the downlink file has already been sent. With this type of downlinking operation sends a request to downlink a portion of the downlink file rather than the entire file. With a partial downlink file operation is a positive indication if the on ground component finds the partially downlinked data from a previous transmission. This indication also includes an offset or starting point to send the rest of the downlink file.

Aircraft software parts may be received from various sources. Aircraft software parts may be received from a manufacturer of the aircraft or some third party source depending on the particular implementation. Further an airline also may create aircraft software parts for use within its aircraft. These parts are distributed using crates in the different advantageous embodiments.

The different advantageous embodiments provide a computer implemented method apparatus and computer program product that promotes automation of the receipt and distribution processing digitalized content computer program s or data in digital form that is sensible by a computer. One advantageous embodiment includes the replacement of the physical shipping crate and physical media with a computer sensible crate that facilitates automation. Another advantageous embodiment is the application of one or more digital signatures to the objects inside the crate and to the crate itself. Thus in conjunction with a functioning Private Key Infrastructure it provides authentication of the sender non repudiation and assurance of integrity.

In another advantageous embodiment a method is used for automated processing aircraft software parts. An incoming crate which can be an electronic zip file containing a signed aircraft software part is received from a source outside of an airline s part management system. A set of signatures is validated for the incoming crate and the aircraft software part. Responsive to the set of signatures being valid the incoming crate is unpacked. The contents of the incoming crate may be displayed at the user s discretion. Responsive to a request to upload the unpacked aircraft software part to a library in an aircraft software part management system or apparatus the unpacked aircraft software part is signed again with an approval signature to form a signed approved aircraft software part. An advantageous embodiment is that this second approval digital signature also acts to transfer bailment from the provider of the part to the recipient of the part and provides non repudiation of the consummation of the transaction.

In an advantageous embodiment the crate containing the signed recipient approved aircraft software part is signed to form a signed crate wherein signatures for the signed approved aircraft software part and the signed crate are different from the set of signatures on the incoming crate. The signed crate may be sent to the recipient s library in the aircraft software part management system or apparatus.

In another advantageous embodiment a computer implemented method is used for processing additional configuration items. A crate containing a configuration item is received to form a received crate. A determination is made as to whether a set of signatures for the crate and the configuration item are valid. Responsive to a determination that the set of signatures are valid the configuration item is stored.

Turning now to a diagram illustrating a crate tool is depicted in accordance with an advantageous embodiment. Crate tool is used to receive and manage crates for use in an environment such as aircraft software part management apparatus in .

Additionally crate tool may be implemented in other components for creating crates within aircraft software part management apparatus in . For example the functionality of crate tool may be implemented in a software maintenance tool such as software maintenance tool in . As another example these functions also may be implemented in aircraft network in to send information such as downlink files in crates back to a ground network.

In this example crate tool may receive aircraft software part stored or wrapped within crate . Although these examples illustrate aircraft software part as being the contents of crate any configuration item may be placed into crate for use within aircraft software part management apparatus in in these examples. For example a configuration item also may take the form of a document configuration information or other suitable information.

Crate tool processes crate for uploading to library . Library may be implemented using library in . This processing may include various functions such as checking the integrity and a set of signatures within crate . The checking of signatures may include both the signature for crate and aircraft software part . Further aircraft software part may be removed from crate and inspected. Crate tool also may repackage aircraft software part into another crate for uploading to library .

Turning now to a diagram illustrating a crate tool is depicted in accordance with an advantageous embodiment. Crate tool is a more detailed illustration of crate tool in . Crate tool includes user interface signature unpack and inspect crate and upload . User interface provides a user interface for a user to operate crate tool . Crate tool may be implemented in a data processing system such as data processing system in .

Signature in these examples provides a number of different functions. For example signature may check the integrity of a crate and its configuration items. This integrity may be performed by checking a digital signature for the crate and its contents. In these examples the signatures are located in extensible markup language documents that are separate from the contents that are signed. In other embodiments signatures may be integral to the signed configuration item.

Signature may sign an existing aircraft software part as well as other documents files and other suitable data. Unpack and inspect allows a user to remove aircraft software parts and other information from a crate and inspect or view those components. In unpacking a crate unpack and inspect unzips or removes aircraft software parts from the crate and places them in a selected file system.

Additionally if a packing slip is present in the crate this packing slip also may be displayed. The inspect portion of this function may be used to allow a user to inspect the contents and signature validity of crates stored in file system . Crate allows a user to create new crates and manipulate existing crates.

For example in manipulating crates a user may organize crates add to or subtract from its contents. Crates may be organized in a number of different ways depending on the particular implementation. For example a directory may store crates containing aircraft software parts for a particular type of aircraft. Also crates may be stored based on their source. Upload provides a function to send signed configuration items in crates from crate tool to a library such as library in in these examples.

Turning now to a message flow diagram illustrating the processing of a crate is depicted in accordance with an advantageous embodiment. The message flow in illustrates a flow of messages used to process crates for uploading to a library.

In this example the different components involved in processing a crate involve user crate tool and library . The message flow in this example begins when a user processes or receives incoming crate . In this example a user may receive incoming crate from various sources. For example incoming crate may be received through an internet connection or through some physical media such as a flash memory or compact disc.

The user opens the crate using the crate inspection tool operation I . In response to this user input crate tool displays crate information to the user operation I . The user then inspects the crate contents and chooses to unpack the crate operation I . In response to receiving this user input crate tool validates the signature information and unpacks the contents of the crate into the file system operation I . The signatures in incoming crate are signatures generated by the source of the aircraft software part in incoming crate .

Thereafter user input is generated by user to upload the unpacked aircraft software part to the library using a library upload tool operation I . The user enters user input to add a part to upload from the unpacked crate location operation I . The user then presses an upload to library button operation I .

In response to this user input crate tool prompts user for library login credentials operation I . In response to this prompt user enters library credentials operation I . Crate tool then prompts the user for a signing password to sign the aircraft software part operation I . In response to receiving this prompt user enters a password operation I . The signing password in these examples is used to create the signature that is to be applied to the various files for the aircraft software part. In response to receiving the password from the user crate tool applies the signature to the different aircraft software part files operation I .

As part of this signing process a new crate is created with the aircraft software part files being placed in that new crate. With this type of implementation the digital signatures on the aircraft software part in the crate at this stage is different from the signatures from incoming crate . The signatures that are applied now are ones for a particular user such as a particular airline or maintenance facility.

After the signature has been applied a part upload is initiated by crate tool to library operation I . Library uploads the aircraft software part in the crate and verifies the contents operation I . Thereafter an operation status is returned to crate tool from library operation I . Crate tool sends an event log to library operation I . The event log is uploaded by library operation I .

Next an operation status on the upload is returned to crate tool from library operation I . This operation status is then presented to user by crate tool operation I .

Turning now to a diagram illustrating one implementation of a user interface for a crate tool is depicted in accordance with an advantageous embodiment. In this example user interface illustrates components that may be used to implement user interface in crate tool in . In this example user interface includes working crate list view and working crate detail view .

Working crate list view displays a list of different crates. From this view a user may initiate project operations working crate operations or exit application . Project operations may be used to create a new project open an existing project close a current project or save a current project. Working crate operations allow a user to create crates delete crates or duplicate crates in these examples. Exit application allows a user to exit the crate tool.

Further from working crate list view a user may initiate open or close working crate . If a working crate is open working crate detail view is employed. Working crate detail view provides a user interface that may display different functions depending on the particular type of crate being processed.

In addition from working crate list view and from working crate detail view a user may access tools . Tools provide various functions such as checking crate integrity unpacking and inspecting crates and checking compatibility and setting preferences. In this example tools provide functions and . Function displays information regarding the digital signature and the signature states of the configuration item. Examples of signatures states are manufacturing approval and source.

Function unpacks a signed part and or assets in the crate and places those components into the file system. Function provides for an inspection of crate contents validates crate and component signatures and manages crate files. Function allows a user to check the compatibility of an aircraft software part with the airplane s onboard data load function ODLF . Function allows a user to edit various properties and preferences. The depicted functions are provided as illustrative examples of functions that may be provided in tools . Of course other functions may be used in addition to or in place of the depicted functions.

With reference now to a diagram illustrating data flow in inspecting and unpacking crates is depicted in accordance with an advantageous embodiment. The data flow illustrated in may be implemented in unpack and inspect in crate tool in .

In this example two dialog boxes or views are presented inspect and unpack view and crate inspection view . Inspect and unpack view is displayed to a user and allows a user to perform various actions with respect to a crate that has been received by the crate tool. For example a user may select an operation to manipulate a crate. This operation may be for example delete or move a set of crate files.

If the user selects this operation from inspect and unpack view the selected crate files are moved or deleted operation . Thereafter the crate list is refreshed operation and the process returns to inspect and unpack view .

If a user selects an operation such as removing a location the process then modifies the location list operation . The location preference is then stored operation with the process then returning to operation as described above. This location preference is a path or direction selected by the user. In this manner a user may remove a location from a set of directories or a set of locations in which crates may be stored.

At inspect and unpack view if the user enters user input at a new location in this view the user is prompted for a new location operation . Once the user enters the new location information the process proceeds to operation as described above. If the user selects or decides to inspect a crate the process moves to crate inspection view . In this user interface the user may perform various actions with respect to a crate. For example a user may select to update crate information. Thereafter crate information is read from the file operation . The process then updates dialog box controls with data to display crate information to the user operation .

When crate inspection view is displayed a user may select another action such as unpacking a crate. The selecting of this action results in the crate signature being validated operation . If the signature is valid the crate is unpacked operation . The process presents the results of unpacking the crate along with displaying any packing slip contents in crate inspection view operation . Thereafter the process returns to inspect and unpack view .

In operation if the signature of the crate is invalid the process presents the validation results operation . These results present in crate inspection view may include an indication that the signature problem is fatal if the validation is incorrect for a crate signature.

In crate inspection view if the user selects to validate a crate the process validates the crate signature operation . If the crate signature is valid then each configuration item signature is then validated operation . In both operations and the process proceeds to operation to display the results of the validation. If a configuration item signature is not valid then a warning is presented in contrast with a fatal problem occurring if the crate signature is not valid. In crate inspection view if the user closes the dialog box the process returns to inspect and unpack view .

Turning now to a diagram illustrating the data flow in creating a crate is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in a crate tool such as crate tool in . More specifically the different operations illustrated in may be implemented in crate in .

In this example the process begins by opening a new or existing project operation . Thereafter the process creates a working crate operation . In creating an initial signed configuration item the process begins by receiving initial crate metadata and a configuration item identifier operation . In these examples a configuration item is a single item consisting of a set of files that may be stored within a crate. Each configuration item has a unique identifier. A configuration item may be for example an aircraft software part a related document or some other file.

The user then navigates to the configuration item s data directory on the file system and enters metadata for those selected files operation . A directory of data files is selected because a particular configuration item may be comprised of more than one file. For example an aircraft software part may include an executable file a configuration file and a dynamic link library.

Then the process validates the metadata entries made by the user operation . In operation the process may determine whether the metadata entries meet a set of rules. These rules may require certain types of configuration items that contain certain amounts of information and certain types of information. For example with aircraft software parts a source or manufacturer of the aircraft software part as well as an identification of the type of aircraft may be entered as metadata. In addition the metadata also may identify a particular aircraft that is to receive the aircraft software part.

The process may validate the configuration item depending upon the type of working crate operation . Next the process receives a user password operation . The process then creates a digitally signed extensible markup language file for the configuration item and stores the digitally signed extensible markup language file with the configuration item in the file system operation . The process proceeds to save the project operation . A user may during any of these different operations choose to halt and save the project and continue the project at another time.

The user then navigates to the asset s data directory on the file system and enters metadata for those selected files operation . Thereafter the process validates the metadata entries made by the user operation . The process receives a user password operation . The process then creates a digitally signed extensible markup language file for the asset and stores it on the file system operation .

Turning now to a flowchart of a process for processing a received crate is depicted in accordance with an advantageous embodiment. The process illustrated in may be implemented in a software component such as crate tool in . More specifically the process may be implemented in unpack and inspect in .

The process begins by receiving a crate operation . In this example the crate may be received through various sources. For example a physical media may be connected to or placed into the data processing system in which the process executes. In other embodiments the crate may be received through a communications link such as a network link.

The process presents information about the crate operation . In this operation the information may be presented through a graphical user interface. This information may include for example the manufacturer source of the crate an identification of the contents in the crate a size of the crate and other suitable information. Thereafter a determination is made as to whether to unpack the crate operation . This determination may be made through receiving user input.

If the crate is to be unpacked the process validates signatures for the crate operation . In these examples the signatures may be signed using a private key. A public key located in the crate may be used to determine whether the manifest and file digests are valid. This validation also is used to determine whether the crate actually has been originated by the source and remains unmodified or tampered with.

A determination is made as to whether the signatures for the crate are valid operation . If the crate signature is valid the process unpacks the crate containing the aircraft software part and stores it on the file system operation . The configuration item signatures do not have to be valid to unpack the crate. It is up to the user whether or not to continue unpacking the crate if one or more invalid configuration item signatures are detected. In these examples if the crate signature is valid the aircraft software part is unpacked and stored within a file system as described in operation . The process terminates thereafter.

With reference again to operation if the crate signature is not valid an error is returned operation with the process terminating thereafter. With reference back to operation if the user decides not to unpack the crate the process also terminates.

This tool supports the work flow status and dynamics. The implementation of a user interface as discussed in above allows the user to create validate and complete a crate. A crate starts with a draft status and so does each component of the crate such as the part and a related document . As this process proceeds the status of the crate as well as each component changes from draft to in work and to complete as the crate is signed. The implementation also allows the user to add delete or modify any components of the crate. Any addition deletion or modification will result in a change of the current status of the relevant component and that of the crate and thus requires re validation and resigning. The status is graphically indicated in both crate list view and crate detailed view. While providing flexibility and supporting work flow this functionality further ensures the integrity of completed crates.

This tool supports the dynamic release distribution work flow status. The implementation of a user interface as discussed in above allows the user to create validate and complete a crate. A crate starts with a draft status and so does each component of the crate such as the part and a related document . As this process proceeds the status of the crate as well as each component changes from draft to in work and to complete as the crate is signed. The implementation also allows the user to add delete or modify any components of the crate. Any addition deletion or modification may result in a change of the current status of the relevant component and that of the crate and thus requires re validation and resigning. The status is graphically indicated in both crate list view and crate detailed view. While providing flexibility and supporting work flow this functionality further ensures the integrity of completed crates.

The flowcharts and block diagrams in the different depicted embodiments may illustrate the architecture functionality and operation of one or more possible implementations of apparatus methods and computer program products. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of computer usable or readable program code which comprises one or more executable instructions for implementing the specified function or functions. In some alternative implementations the function or functions noted in the block may occur out of the order noted in the figures. For example in some cases two blocks shown in succession may be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

Further the different block diagrams of software components hardware components and data structures illustrated in this disclosure are provided for purposes of depicting one manner in which the different advantageous embodiments can be implemented and are not meant to limit the form that different embodiments may take. For example some of the block diagrams illustrate functional blocks that may be combined or subdivided in software implementations. Also the hardware and architecture illustrated in these examples may be varied in different advantageous embodiments. Also the different examples of graphical user interfaces are presented for purposes of illustrating one manner in which a user interface may be implemented. These examples also are not meant to limit the manner in which different advantageous embodiments may be implemented.

The different advantageous embodiments can take the form of an entirely hardware based embodiment an entirely software based embodiment or an embodiment containing both hardware and software elements. Some embodiments are implemented in software which includes but is not limited to forms such as for example firmware resident software and microcode.

Furthermore the different embodiments can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any device or system that executes instructions. For the purposes of this disclosure a computer usable or computer readable medium can generally be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer usable or computer readable medium can be for example without limitation an electronic magnetic optical electromagnetic infrared or semiconductor system or a propagation medium. Non limiting examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk a floppy magnetic disk and an optical disk. Optical disks may include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

Further a computer usable or computer readable medium may contain or store a computer readable or usable program code such that when the computer readable or usable program code is executed on a computer the execution of this computer readable or usable program code causes the computer to transmit another computer readable or usable program code over one or more communications links. Each communications link may be either wired or wireless.

A data processing system suitable for storing and or executing computer readable or computer usable program code will include one or more processors coupled directly or indirectly to memory elements through a communications fabric such as a system bus. The memory elements may include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some computer readable or computer usable program code to reduce the number of times code may be retrieved from bulk storage during execution of the code.

Input output or I O devices can be coupled to the system either directly or through intervening I O controllers. These devices may include for example without limitation keyboards touch screen displays and pointing devices. Different communications adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Non limiting examples are modems and network adapters and are just a few of the currently available types of communications adapters.

The description of the different advantageous embodiments has been presented for purposes of illustration and description and it is not intended to be exhaustive or limited to the embodiments in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. Further different advantageous embodiments may provide different advantages as compared to other advantageous embodiments.

The embodiment or embodiments selected are chosen and described in order to best explain the principles of the embodiments the practical application and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.

