---

title: System and method for transport layer agnostic programming interface for use with smartphones
abstract: An application programming interface (API) is disclosed for interfacing a vehicle electronic component with a smartphone, wherein the vehicle electronic component and the smartphone each make use of a short range wireless transceiver for wirelessly communicating with the other, and wherein the smartphone includes an application running thereon. The API has an interconnect API disposed in the electronic component. The interconnect API also has a software library of command and function definitions that are able to be implemented by the API. A connect library is also used which resides within the smartphone and which is configured to communicate with the application running on the smartphone. The interconnect API and the connect library cooperatively operate as a translation mechanism to implement a plurality of functionalities when communicating with the application, according to the electronic device's capabilities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09078088&OS=09078088&RS=09078088
owner: Myine Electronics, Inc.
number: 09078088
owner_city: Ferndale
owner_country: US
publication_date: 20130711
---
This application claims the benefit of U.S. Provisional Application No. 61 670 745 filed on Jul. 12 2012. The entire disclosure of the above application is incorporated herein by reference.

The present disclosure relates to application programming interfaces and more particularly to an application programming interface that enables various types of user devices such as a vehicle radio to be interfaced to a user s smartphone and to implement a variable number of functionalities from an application running on the smartphone according to the device s own hardware capabilities.

The statements in this section merely provide background information related to the present disclosure and may not constitute prior art.

Smartphones are presently gaining tremendously in popularity in part for their ability to provide a plethora of diverse applications. One such application is streaming music over a cellular network to the smartphone. This application can also be used when the user is traveling in a motor vehicle such as an automobile or truck. Often the vehicle will have a Bluetooth connection system by which a wireless connection can be made between the vehicle s audio system and the user s smartphone. The smartphone can wirelessly stream audio content that it receives via a cellular network to the user s vehicle audio system which enables the audio content to be played back over the vehicle s audio system. If a WiFi signal is available then the audio content could be streamed in to the smartphone over a WiFi link. Likewise even a computing tablet laptop or other form of electronic device could be used to receive streamed audio content in the vehicle but for the purpose of this discussion it will be assumed that the user s electronic device is a smartphone.

In the above example it would be highly desirable to be able to control the various functions e.g. Play Tag Search that are often provided with such applications from the vehicle s audio system controls. However since various vehicle audio systems have differing capabilities as far as controls and the user machine interface that they employ this raises significant challenges. In other words heretofore a specific application programming interface API has been required to interface a specific type of device e.g. a specific manufacturer s vehicle audio system having specific control display capabilities with the controls recognized by an application running on a user s smartphone. For example a specific make of vehicle audio system having a simple seven segment LCD display may not have nearly the wide range of functionality that a system may have that implements a touch screen radio HMI Human Machine Interface . And a system that simply has a small plurality of physical user buttons may have even less functionality than the seven segment LCD display mentioned above. In each of these examples a different API would need to be employed that accommodates and is tailored to the functionality of the user s device. So the challenge becomes how to enable a number of diverse devices having differing functionalities and different types of user interfaces to control a given application running on the user s smartphone through the use of a single API. Conversely the other challenge is having a plethora of smartphone applications with highly variable functionalities to be remotely controlled by said devices through the same single point of control the API.

In one aspect the present disclosure relates to an application programming interface API for interfacing a vehicle electronic component with a smartphone wherein the vehicle electronic component and the smartphone each make use of a short range wireless transceiver for wirelessly communicating with the other and wherein the smartphone includes an application running thereon. The API may comprise an interconnect API disposed in the electronic component. The interconnect API may include a software library of command and function definitions that are able to be implemented by the API. A connect library may also be included which resides within the smartphone and which is configured to communicate with the application running on the smartphone. The connect library may be at least substantially identical to the software library. A packet API may also be included for generating data packets according to a predetermined specification. The interconnect API and the connect library cooperatively operate as a translation mechanism for translating packets of information received from the electronic device at least some of the packets forming commands into commands recognizable by the application running on the smartphone and to enable a predetermined desired response to the received commands to thus enable the electronic device to implement a plurality of functionalities when communicating with the application according to the electronic device s capabilities.

In another aspect the present disclosure relates to an application programming interface API for interfacing a vehicle radio system with a smartphone wherein the radio system has a user interface and wherein the radio system and the smartphone each make use of a short range wireless transceiver for wirelessly communicating with the other and wherein the smartphone includes an application running thereon. The API may comprise an interconnect API and a connect library. The interconnect API may be disposed in the radio system and may include a software library of command and function definitions that are able to be implemented by the API. The connect library may reside within the smartphone and may be configured to communicate with the application running on the smartphone. The connect library may be at least substantially identical to the software library and may include a packet API for generating data packets according to a predetermined specification. The interconnect API and the connect library may cooperatively operate as a translation mechanism to enable the application running on the smartphone to accommodate and operate in accordance with functional capabilities of the interface of the radio system.

In still another aspect the present disclosure relates to a method for interfacing a vehicle electronic component with a smartphone wherein the vehicle electronic component and the smartphone each make use of a short range wireless transceiver for wirelessly communicating with the other and wherein the smartphone includes an application running thereon. The method may include using an application programming interface API configured to include an interconnect API running on electronic device and a connect library residing on the smartphone and communicating with an application running on the smartphone. A software library may be used which is in communication with the interconnect API and operating on the component to contain command and function definitions that are able to be implemented by the API. A connect library may be used which resides within the smartphone and which is configured to communicate with the application running on the smartphone. The connect library may be at least substantially identical to the software library. A packet API may be used for generating data packets according to a predetermined specification. The interconnect API and the connect library may be used to cooperatively operate as a translation mechanism to enable the application running on the smartphone to accommodate and operate in accordance with functional capabilities of the interface of the electronic device.

The following description is merely exemplary in nature and is not intended to limit the present disclosure application or uses. It should be understood that throughout the drawings corresponding reference numerals indicate like or corresponding parts and features.

Referring to a high level block diagram illustrates an application programming interface API of the present system and method being implemented within a vehicle radio and within a smartphone of a user. The API includes an interconnect API that resides within the radio and a connect library that resides within the smartphone . It will be appreciated that this is simply one specific implementation that the API could be employed in. The API could be used in virtually any implementation where some external component having some type of user interface is being used to remotely control an application running on a different electronic device e.g. smartphone computing tablet laptop etc. .

In the present example the radio may include a Bluetooth protocol chip for making a wireless Bluetooth protocol connection with the smartphone . A Bluetooth protocol stack includes software that implements the Bluetooth protocol stack. A host application which may reside in an MCU micro controller unit communicates with the connect API and with the Bluetooth protocol stack . A human machine interface HMI may be included to enable the user to input various commands and or functions that may be used to remotely control an application residing on the smartphone . The interconnect API further includes a software library of command and function definitions that can be implemented by the API .

The smartphone in this example is running the iOS operating system from Apple Inc. of Cupertino Calif. The smartphone may have an application that communicates with the connect library . The connect library may include an external accessory framework for connecting to real i.e. actual devices a gamekit framework for testing emulator activities a packet API for generating packets according to a predetermined specification and a connect library which represents a main entry point and abstraction layer for the application running on the smartphone . The connect library is identical or nearly identical to the software library in the interconnect API . The libraries and effectively operate as both a translation mechanism to translate binary livio connect packets received into meaningful commands for the smartphone application as well to enable correct response to the commands received. The connect library may also include a utilities layer for translating from abstract data structures that are meaningful to a smartphone application to binary packets used by the API in communication. also illustrates a similar interconnect library being used on a smartphone that employs the Android operating system from Google Inc. of Mountain View Calif. An authentication server may be employed to handle tangential operations such as communicating firmware updates to the API blacklisting specific types of devices or blacklisting specific types of applications. A developer portal may also be employed to give application developers the ability to blacklist specific hardware devices and hardware device developers to blacklist specific smartphone applications.

Functions and number keys provide the primary function of the interconnect API . This lets devices implement a variable number of functionalities from an application according to its own abilities. Any application that fully implements the interconnect API software libraries and will be able to operate using a wide variety of interfaces having various levels of sophistication and complexity. As one example an application that fully implements the interconnect API would be able to be used with anything from a highly sophisticated touchscreen HMI to a user interface having a simple set of buttons as part of for example a headphone cord.

It will also be appreciated that number keys differ from functions keys in that they are user inputs that are unable to show dynamic content. For example a number key preset button with a silk screened 1 on it cannot give the user any clue as to what it will do in the context of being connected to a given application. For this reason the present API separates the handling of functions and number keys into separate command types.

Some commands used with a given application are less general than others. For example the command TAG CURRENT is a function that tells the application to take whatever is happening in the current context of the application and to save it for later use for the user. This function could easily also be added as a function key but by providing more specific widely used commands this kind of redundancy allows the API to be deployed on devices that do not have the ability to show a function list. The tradeoff of having to be able to respond to multiple commands e.g. a TAG CURRENT command versus a function that does the same thing is small for applications. Put differently it is highly feasible to repeat this functionality in the API and the benefit is that the application is afforded a high level of user remote control from a wide variety of devices having different levels of sophistication.

Referring to a diagram is shown to help describe how the API is able to accomplish the same functionality with different redundant commands. In the first example the device in this example radio initially sends a number N to the application as indicated by line where N represents the number of functions available that the radio can support. In response the application dynamically adjusts its menu based on the number of functions that will be supported. The application also then sends its function attributes for each of the total N functions back to the radio interconnect API of the radio using the connect library in the smartphone . These function attributes may be streamed one after another until all N function attributes have been sent to the radio as indicated by lines . If for example a device sends 0 as the number of functions i.e. it has zero function keys then this would mean that all functionality will need to come from other commands. As another example a device might send 0xFF which in this example is defined to be an infinite number of list items i.e. an infinite number of functions . The application would then be able to choose its maximum number of functions or dynamically respond to requests for function attributes for arbitrarily large numbers. Put differently if a device provides no maximum number of functions that is infinite functions then the application may then choose to support this by just responding to any function number request. This means that the application would be able to respond to for example 100 10000 and 1000000 and all commands would have some meaning to that particular application . As yet another example consider that the radio is able to send 7 as the function number. The application would then rearrange its function list to support seven visible presets i.e. 7 function keys on the radio .

Each one of the function attributes that is sent to the device i.e. radio in this example from the application as evidenced by lines tells the device a little about the functions that the application supports. More specifically each one of the function attributes represented by line may include 

Using function attributes the device doesn t need specific knowledge of the application s operation. The device will be able to perform any of the following actions 

If the device i.e. radio in this example cannot store the data then it can simply ignore function attributes sent to it. Or alternatively as indicated by lines in the device can obtain function attributes one by one from the application . The device does this by issuing a GET FUNCTION ATTRIBUTES command for a specific function ID whenever it needs the function attributes associated with a specific function ID. While not shown explicitly it will be appreciated that after each function attributes request represented by any one of lines the application would send back to the device i.e. radio the function attributes associated with the specific function attributes number that was requested by the device. If a function does not exist for a requested function ID number the command is NAK ed Negative Acknowledged by the application and the device will then know that there is no function for that specific function ID number that it just requested.

With further reference to lines and represent how the API enables one function in this example tagging a song that is playing on the radio to be commanded in two different ways. Line represents the USER SELECT function 1 in this example representing Tag Song being sent to the application which causes the application to tag the currently playing song. Line causes the application to take the same action but instead by a specific command in this example the TAG CURRENT command.

It will be appreciated that function lists arise out of the fact that some devices only support a finite number of visible functions at once. So for instance an Internet radio application may have 12 presets that it wants to show as function keys. It could then connect to a device that only supports 6 simultaneous functions on screen at once. The application would then make two separate function lists which could alternatively be termed two function banks i.e. function bank 1 and function bank 2 each having 6 functions to represent all the functions it wishes to support. Since the device in this example can only issue the commands 1 6 the application must maintain which function bank is the current active function bank and interpret a User Select 1 as either User Select 1 for function bank 1 or User Select 1 for function bank 2.

By being able to handle specific commands as well functions the API can be implemented on devices of limited human interface display sophistication that do not have the ability to display a function list. This provides the potential for the API to be used in a wide variety of devices having different human interface mechanisms. Essentially any type of device that has merely a few simple buttons with predetermined designations thereon e.g. PLAY STOP etc. to much more sophisticated devices able to implement dozens or even hundreds or more different functions through detailed menus can be supported by the API . This means that devices such as vehicle radios from different manufacturers and each have different function capabilities may be supported by the API with little or no modification to the API .

While various embodiments have been described those skilled in the art will recognize modifications or variations which might be made without departing from the present disclosure. The examples illustrate the various embodiments and are not intended to limit the present disclosure. Therefore the description and claims should be interpreted liberally with only such limitation as is necessary in view of the pertinent prior art.

