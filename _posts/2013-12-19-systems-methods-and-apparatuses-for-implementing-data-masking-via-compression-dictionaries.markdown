---

title: Systems, methods, and apparatuses for implementing data masking via compression dictionaries
abstract: In accordance with disclosed embodiments, there are provided methods, systems, and apparatuses for implementing data masking via compression dictionaries including, for example, means for receiving customer data at the host organization; compressing the customer data using dictionary based compression and a compression dictionary; storing the compressed customer data in a database of the host organization; retrieving the compressed customer data from the database of the host organization; and de-compressing the compressed customer data via a masked compression dictionary, in which the masked compression dictionary de-compresses the customer data into masked customer data. Other related embodiments are disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519801&OS=09519801&RS=09519801
owner: salesforce.com, inc.
number: 09519801
owner_city: San Francisco
owner_country: US
publication_date: 20131219
---
This application is related to and claims priority to the provisional utility application entitled DATA MASKING VIA COMPRESSION DICTIONARIES filed on Dec. 19 2012 having an application No. 61 739 107 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Embodiments of the invention relate generally to the field of computing and more particularly to systems methods and apparatuses for implementing data masking via compression dictionaries.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also correspond to embodiments of the claimed inventions.

A single a multi tenant database system operates to store data on behalf of a multitude of paying subscribers each being a tenant of the database system hence the term multi tenant database system.

Within such an operational environment computational efficiency system responsiveness and data security are all of paramount concern both to the provider of the multi tenant database system and to the subscribers or tenants of such a system. Moreover as cloud based technology has matured and become increasingly commonplace within the marketplace over the past several years there has been an increased sensitivity to data privacy concerns as well as regulation mandating certain protections and controls on data protection and privacy. For instance cloud based technologies if they are to remain competitive must adhere to contractual requirements marketplace concerns regarding trade secrets information as well as state and Federal laws mandating certain privacy and data safeguards.

Notwithstanding these requirements there is also a need to ensure comprehensive testing of the cloud based technologies which store data on behalf of subscribers. For instance it is sometimes the case that software released into the production environment passes testing procedures based upon synthetic data used for testing purposes yet fails when applied to live customer data in the production environment at which point the error is far more damaging and costly than had it been caught prior to production release.

To that end it would be highly beneficial to utilize actual live production data belonging to such customers in the testing of the hardware software and other infrastructure modifications to the multi tenant database system but for the legal and privacy related reasons noted above use of customers data in such a way would be improper and would potentially represent a contractual breach as well as a compliance violation.

The present state of the art may therefore benefit from the systems methods and apparatuses for implementing data masking via compression dictionaries as described herein.

Described herein are systems methods and apparatuses for implementing data masking via compression dictionaries in an on demand service environment. Such systems devices and methods may include for example means for receiving customer data at the host organization compressing the customer data using dictionary based compression and a compression dictionary storing the compressed customer data in a database of the host organization retrieving the compressed customer data from the database of the host organization and de compressing the compressed customer data via a masked compression dictionary in which the masked compression dictionary de compresses the customer data into masked customer data.

There may be many compression dictionaries used by the methodologies herein. For instance one set of dictionaries may be used for production and another set of dictionaries used for masked data. For instance data may be compressed at a granular level e.g. a group of DB blocks thus using a dictionary for the granular level or one compression dictionary may be utilized for the entire database. Additionally masking dictionaries may further be utilized to mask data that is not compressible. Test and support persons may for instance both utilize the same masked data interface which would result in data that is still sensitive but less sensitive than unmasked data. Companies which produce the masked data may therefore implement special procedures for handling of such data due to the fact that it remains sensitive. For instance the data may be accessible or shared on a strict as needed basis or require other protections to ensure the privacy of customer s data is maintained.

The dictionary and masked dictionary referred to here may be a set of dictionaries utilized for the purposes of compression and de compression or compression and de compression plus data masking as appropriate and as is described in additional detail below. Further still the dictionary and masked dictionary may constitute a set of dictionaries utilized for an entire database or a set of dictionaries utilized for a specific database or a sub set of the multi tenant database.

In the following description numerous specific details are set forth such as examples of specific systems languages components etc. in order to provide a thorough understanding of the various embodiments. It will be apparent however to one skilled in the art that these specific details need not be employed to practice the embodiments disclosed herein. In other instances well known materials or methods have not been described in detail in order to avoid unnecessarily obscuring the disclosed embodiments.

In addition to various hardware components depicted in the figures and described herein embodiments further include various operations which are described below. The operations described in accordance with such embodiments may be performed by hardware components or may be embodied in machine executable instructions which may be used to cause a general purpose or special purpose processor programmed with the instructions to perform the operations. Alternatively the operations may be performed by a combination of hardware and software.

Embodiments also relate to an apparatus for performing the operations disclosed herein. This apparatus may be specially constructed for the required purposes or it may be a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition embodiments are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the embodiments as described herein.

Embodiments may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the disclosed embodiments. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. a machine e.g. computer readable transmission medium electrical optical acoustical etc.

Any of the disclosed embodiments may be used alone or together with one another in any combination. Although various embodiments may have been partially motivated by deficiencies with conventional techniques and approaches some of which are described or alluded to within the specification the embodiments need not necessarily address or solve any of these deficiencies but rather may address only some of the deficiencies address none of the deficiencies or be directed toward different deficiencies and problems where are not directly discussed.

Multi tenant database system includes a plurality of underlying hardware software and logic elements that implement database functionality and a code execution environment within the host organization . In accordance with one embodiment multi tenant database system further implements databases to service database queries and other data interactions with the databases . The hardware software and logic elements of the multi tenant database system are separate and distinct from a plurality of customer organizations A B and C which utilize the services provided by the host organization by communicably interfacing to the host organization via network . In such a way host organization may implement on demand database services or cloud computing services to subscribing customer organizations A C.

Host organization receives input and other requests from a plurality of customer organizations A C via network such as a public Internet . For example incoming database queries API requests interactions with displayed graphical user interfaces and displays at the client devices A C or other inputs may be received from the customer organizations A C to be processed against the multi tenant database system including queries to read write and update data stored within the databases .

In one embodiment each customer organization A C is an entity selected from the group consisting of a separate and distinct remote organization an organizational group within the host organization a business partner of the host organization or a customer organization A C that subscribes to cloud computing services provided by the host organization .

In one embodiment requests are received at or submitted to a web server within host organization . Host organization may receive a variety of requests for processing by the host organization and its multi tenant database system . Incoming requests received at web server may specify which services from the host organization are to be provided such as query requests search request status requests database transactions graphical user interface requests and interactions processing requests to retrieve update or store data on behalf of one of the customer organizations A C code execution requests and so forth. Web server may be responsible for receiving requests from various customer organizations A C via network and provide a web based interface or other graphical displays to an end user client device A C or machine originating such data requests .

Authenticator operates on behalf of the host organization to verify authenticate and otherwise credential users attempting to gain access to the host organization.

Query interface provides functionality to pass queries from web server into the multi tenant database system for execution against the databases or other data stores of the host organization s production environment . In one embodiment the query interface implements an Application Programming Interface API through which queries may be executed against the databases or other data stores. Query optimizer performs query translation and optimization for instance on behalf of other functionality such as functionality of a graphical interface which possesses sufficient information to architect a query yet lacks the necessary logic to actually construct the appropriate query syntax. In other instances query optimizer modifies a submitted query to optimize its execution within the host organization without affecting the resulting dataset returned responsive to such an optimized query. Analysis engine operates on behalf of functionality within the host organization to perform additional data evaluation where necessary.

Host organization may implement a request interface via web server or as a stand alone interface to receive requests packets or other requests from the client devices A C. Request interface further supports the return of response packets or other replies and responses in an outgoing direction from host organization to the client devices A C.

Data mask and data compression units are further depicted as interacting with the databases . Data mask unit performs data masking via compression dictionaries to obfuscate customer data when necessary for instance where customer data needs to be obfuscated prior to use in test sequences. Data compression unit performs dictionary based data compression to optimize the storage footprint of data stored in the database specifically to reduce the storage requirements of customer data where possible. According to one embodiment Data mask unit operates by de compressing previously compressed and stored customer data via a masked compression dictionary resulting in customer data that is uncompressed by masked and therefore obfuscated from its original form and meaning.

Additionally depicted is a data compression unit having therein a dictionary . The data compression unit implements dictionary based data compression. For instance uncompressed customer data e.g. having the plain text string Worthington may be provided to the data compression unit which then applies data compression on the uncompressed customer data by correlating the data to a corresponding symbol indexed by the dictionary resulting in compressed customer data e.g. having the symbol or string 3 which is then returned to the databases for storage.

The dictionary based compression algorithms seek to reduce the amount of storage space on disk required to store the same amount of data by converting it into a smaller but recoverable form by exploiting the redundancy of data stored in the database. For instance consider that in 2009 the top 1000 first names accounted for 73 of all names in the United States at which time there were nearly 250 million individuals thus representing significant redundancy and therefore a significant opportunity for compression. Dictionary based algorithms do not encode single symbols as variable length bit strings but rather they encode variable length strings of symbols as single symbols. The symbols form an index into a phrase dictionary and the dictionary is then used as a simple lookup table to map between the symbols and the non compressed original data in its plaintext form. Dictionary compression can be used for more than just strings. For instance a dictionary or set of dictionaries may be used for a range of database blocks.

Numerous other examples dictionaries and variations of methodologies exist with the underlying principle that a smaller string symbol offset index code token etc. to represent a larger string enables compression.

The dictionary based data compression as applied by data compression unit does not itself implement security measures to protect the data but rather is simply a means by which uncompressed customer data can be stored more efficiently within the databases .

Massive quantities of customer data are stored within the databases of the multi tenant database system which translates into infrastructure costs for procurement maintenance power cooling physical space to house the databases and so on. For these reasons it is increasingly common for databases to be compressed so as to reduce the amount of storage space required to store the same amount of data on behalf of customers. At the same time as CPU processing speed continues advance the delay and computational burden of compressing and de compressing data becomes less problematic thus making data compression more economically feasible to the host organization responsible for the multi tenant database system .

Depending on the implementation and processing capacity of the multi tenant database system data may be immediately compressed upon insertion into the databases or alternatively uncompressed customer data may be retrieved from the database compressed and then stored into the database as compressed customer data either overwriting the original uncompressed data or subsequently marking the uncompressed customer data for deletion from the databases .

Further depicted here is the receipt of a request for customer data which arrives at the query interface . The query interface then issues a database query to the databases resulting in the compressed customer data e.g. having a compression symbol value of 3 being returned as the value of the customer s stored data in its compressed form pursuant to prior data compression techniques. Before returning the data responsive to the request for customer data the compressed customer data is then passed through the data de compression unit and its dictionary resulting in the uncompressed customer data e.g. the string Worthington being returned to the query interface which then returns a response having the uncompressed customer data therein as part of the response or returned dataset responsive to the request . Stated differently the string Worthington is recovered subsequent to compression and correctly returned responsive to the request for customer data .

Additionally depicted here is a test sequencer and a testing query interface capable of submitting DB queries to the databases . In the example show here the test sequencer makes a request for customer data for the purposes of testing however this request is issued to a testing query interface for instance operating as an on the fly test query Application Programming Interface API which permits requests and queries to be handled in an identical fashion to the query interface previously described but for the purposes of supporting test transactions rather than production transactions.

The testing query interface issues a database query to the databases of the multi tenant database system resulting in compressed customer data e.g. having the symbol 3 rather than an uncompressed string being returned by the databases responsive to the database query . However unlike a production transaction and query which is processed via the data de compression unit and its dictionary the testing query interface instead causes the compressed customer data to be processed through the data mask de compression unit and its masked dictionary which in turn causes uncompressed masked data to be returned. For instance instead of the compressed symbol 3 being de compressed to the string Worthington as would happen with dictionary the compressed symbol 3 is instead uncompressed to the string Gsksdfsaehy according to the masked dictionary .

The uncompressed masked data is returned to the testing query interface which then returns the value to the test sequencer responsive to the request . In such a way an on the fly or ad hoc query mechanism is established for the purposes of test transactions which does not require a separate copy of the customers data to be stored in a masked form. Rather a single copy of customer data may be stored at the databases and further reduced in terms of storage requirements by having been stored in compressed form and then test queries needing to utilize data from the live production database can interact with the databases in the usual manner but be exposed only to obfuscated data as a result of de compression being processed through the masked dictionary as shown. Additional dictionaries e.g. in the set may be required to mask any uncompressed data. Masked data regardless of whether it is masked from compressed data or not remains sensitive but lesser so than original data in its plaintext and uncompressed form.

Use of live production customer data can often find defects in software such as web based application or database operations whereas synthetic test data will not. Certain problems escape test and enter production because the test data utilized to exercise the various test sequences fails to represent the scope and variety as is present with actual customer data. Customer data allows testers to better simulate application use and performance by running them against authentic customer data which in turn improves the quality of testing. For application developers use of customer data gives them tremendous insights into the nature of data stored within the multi tenant database system which then enables the developers to craft algorithms functions SQL statements and application code perfectly tailored to the needs of the customers. For upgrade procedures customer data is useful to for trial upgrades before an official upgrade takes place to determine if faults are likely to occur once the upgrade is released into production.

Unfortunately customer data is simply too sensitive to share with development test and support teams and very often the data is protected by policy contract or even Federal law. It is therefore becoming increasingly common to limit the number individuals having access to customers live production data regardless of their role. Eliminating the ability for individuals to access customer data thus reduces the likelihood of sensitive information falling into the wrong hands due to a disgruntled employee hacking attacks by individuals who gain access to lower level security systems or even simple curiosity by individuals attempting to look at information for which they have no reason or right to view.

Certain modern databases now have even implemented functionality which limits access to the data by system administrators who traditionally have enjoyed unfettered access. These prior solutions however make inefficient use of storage space and fail to address the needs of testing and application development.

Data masking or obfuscation works by building a dictionary of the unique values in the production data and replacing them with similar but less sensitive information thus resulting in nearly authentic and more production like data. For example the records Wendy Smith 59 000 and Bob Smith 85 000 and Wendy McAlister 101 000 may have a masking dictionary of Wendy sknskh Bob S9D McAlister Ak2 1us9d Smith Sm98st 59 000 12323 85 000 34567 and 101 000 890123. In such a way masked data is far less sensitive for support test and application development persons to view while at the same time it operates as a very good substitute for live customer data versus synthetic test data which has been conventionally utilized. Data that is not compressible may require different masking techniques such as intelligent masking to ensure the order of number data is maintained etc.

Unfortunately conventional solutions that implement masking require the masking dictionaries as well as the masked data to be stored on separate servers which in turn increases the hardware costs of the solution requiring significantly increased storage costs for the duplicated data as well as increasing the operational overhead of the organization that uses data masking often making it too expensive to be practical on a large scale for all but the most sensitive data. Having to install manage upgrade troubleshoot additional systems is also very expensive.

As can be seen from the exemplary embodiment of the methodologies described herein do not convert clear data to masked data for the purposes of testing. Rather compressed data is retrieved which is less sensitive than uncompressed data in its plaintext form as it cannot be converted to plaintext without the proper data de compression dictionary . Even masked or compressed data should still be protected as it can be analyzed to reveal patterns and statistics about the underlying data that should not be shared. Instead of processing the de compression via the de compression dictionary as is used by the production query interface the data is de compressed by an already masked dictionary thus negating the need to store a second copy of the data in masked form and additionally preventing exposure of the customer data in its clear form to test development and support personnel while at the same time enabling the test sequencer to have access to nearly authentic and production like data via the uncompressed masked data returned as a response by the testing query interface .

Thus instead of unmasking a compressed customer data value having the compression key 0x123 to the clear text string Wendy using dictionary the testing query interface upon retrieving the compressed customer data value with compression key 0x123 uses the identical compression key but when the pointer is processed through masked dictionary the corresponding masked data value of 0x123 is returned as masked text sknskh. 

By pointing a de compression algorithm to the masked dictionary instead of the normal unmasked dictionary a masked version of the actual data is accessible without making any copies of the data and on an ad hoc or on the fly basis utilizing the testing query interface . The customer s data can be kept in its original place within databases and there is no need for additional storage capacity to store the masked copy of the data.

With conventional masking solutions it is necessary to maintain a dictionary that keeps track of the masking information. Unfortunately the masking dictionary is not overly secure because it translates directly from actual values to masked values and visa versa thus presenting a security risk if the dictionary is obtained.

Conversely in accordance with certain embodiments the masked dictionary is made more secure than conventional solutions because the masked dictionary includes only a list of dictionary offsets to the masked values e.g. 0x123 maps to sknskh and as such if the masked dictionary itself were to be obtained the combination of offsets and masked values could not be used to unmask the data returned by the testing query interface .

Compression dictionaries will ideally have a small number of values so that the keys for the dictionary e.g. the dictionary index values are as small as possible. For a large data set the compression dictionary may be split into smaller scopes such that the keys for the compression dictionaries fit within a small integer value such as a 16 bit integer. The scope may be based on a block or groups of blocks to use a smaller physical chunk of data.

Some data does not compress well and may not benefit from dictionary compression for the purposes of reducing its storage footprint on disk. For example a list of random numbers would not compress well. However it may nevertheless be desirable to compress such data even where a net gain will not be realized such that the testing query interface can retrieve the corresponding compressed value for the data and then de compress the compressed data using the masked dictionary to result in masked data being returned to the test sequencer . Other traditional masking techniques for non compressible data may also be employed to ensure that plaintext customer data is not revealed. For instance data may be passed through the masking layer and processed using a masking dictionary using the compressed symbols to make the dictionary more sensitive. Masked dictionaries could also be built for non compressible data. A customer may alternatively choose to leave non compressible data unmasked while everything having redundancy such as names geographies etc. would be masked.

Therefore according to a first embodiment any data that is not compressed or not compressible will nevertheless be subjected to a data compression operation and then de compressed via data mask de compression and its masked dictionary so as to obfuscate any and all data utilized by the test sequencer . The compression operation for non compressible data will thus yield an offset index or symbol in place of the unmasked customer data notwithstanding the fact that the offset index or symbol may be the same or larger in size than the original unmasked customer data. In a second distinct embodiment conventional masking is applied to non compressible data or non compressible data is simply left unmasked.

According to one embodiment a unique ID is utilized that represents scope of compression such as a table or a chunk of data. According to one embodiment compressed tables or chunks will share their unique scope IDs with the compression dictionary set and uncompressed tables chunks will require additional dictionaries. In certain embodiments the masked dictionary is a set of one or more dictionaries that hold masked values for non production use such as testing and application development. According to one embodiment the testing query interface is enabled to read values in a masked dictionary given a scope ID and compressed data string index offset or other identifier within the scope ID provided.

According to certain embodiments the testing query interface is queryable as an API using SQL and JSON JavaScript Object Notation formats on production systems and executes its queries against the databases in a live production environment having live customer data stored therein in its compressed form. The testing query interface may be specified or utilized by default based on role or based on the scope of the query or data request being made against the database. For instance a user having administrative or testing rights specifying a query scope that encompasses customer data may trigger the testing query interface to be permissibly utilized without an access rights error however the response from the testing query interface will result in uncompressed masked data being returned rather than uncompressed customer data in its clear and unmasked form.

Notwithstanding that the testing query interface described previously may be utilized in a live production environment to return on the fly requests for masked customer data from the live production databases it is sometimes necessary or preferable to operate test in a non production environment such as a test or sandbox type environment so as to negate any potential risk of overwhelming the infrastructure resources allocated to the live production environment or causing transactions in the databases of the live production environment which may trigger locks delay additional latency for customer transactions or any other ill effects.

Accordingly embodiments additionally support a database export in which the compressed customer data in the databases is transmitted to the data mask de compression unit and its masked dictionary with the uncompressed masked database export then being transmitted to and stored within test database . Such processing may occur separate from the execution of test sequences for instance where real time synchronization of data is not important for testing purposes.

Although such a process does create a separate copy of the data in its masked form to be stored within database the processing is still distinct from conventional means of data masking. Specifically the data is masked not with a masking dictionary but rather is masked via the database export of the compressed data which is then de compressed through the masked dictionary according to the stored compressed symbols offset index or other identifier and not based on the clear text string which is unknown and inaccessible to the test database at all times.

Where the test database is utilized within the non production environment the test sequencer issues its request for test data to the testing query interface as before but the DB query is issued directly to the test database within the non production environment instead of being processed by the databases of the live production environment . The response is then returned to the test sequencer via the testing query interface or directly providing the masked data to the test sequencer for the purposes of testing or application development.

In accordance with certain embodiments the test database may additionally or optionally be shared for restrictive and tightly controlled uses. Although the data is masked it remains sensitive and should therefore not be shared without good reason and careful protections. For example application developers may not be granted access to such data but their test procedures could be permissibly routed through the test query interface and thus exposed to masked data. Such data may be useful for not just test but also trouble shooting performance analysis and so forth.

At block processing logic receives customer data at a host organization. For instance any entity which implements the databases and the data masking via compression dictionaries may operate as such a host organization.

At block processing logic compresses the customer data using dictionary based compression and a compression dictionary.

At block processing logic stores the compressed customer data in a database of the host organization.

At block processing logic retrieves the compressed customer data from the database of the host organization.

At block processing logic de compress the compressed customer data via a masked compression dictionary in which the masked compression dictionary de compresses the customer data into masked customer data.

According to another embodiment of method receiving customer data at the host organization includes receiving the customer data in its plain text and uncompressed form as part of a database transaction in a live production environment of the host organization and in which retrieving the compressed customer data from the database of the host organization includes retrieving the compressed customer data from the database responsive to a masked transaction e.g. such as a transaction by a test sequencer which is subjected to masked data rather than production data in its plaintext and uncompressed form in which the masked transaction specifies a database query for the customer data and further in which the host organization returns the masked customer data to fulfill the masked transaction without exposing the customer data in its plain text and uncompressed form.

According to another embodiment of method the compression dictionary used to compress the customer data maps strings to symbols in which storing the compressed customer data in the database of the host organization includes storing the symbols and not the strings and in which masked compression dictionary maps the symbols to masked strings different than the strings used by the compression dictionary to create the symbols.

According to another embodiment of method the symbols are one of a compression key an offset an index or a replacement string having a size in bits less than the string being compressed.

According to another embodiment of method compressing the customer data using dictionary based compression and a compression dictionary includes generating a compression key for the customer data using the compression dictionary and storing the compression key in the database and in which de compressing the compressed customer data via the masked compression dictionary comprises retrieving the compression key for the customer data and using the compression key to lookup the masked customer data in the masked compression dictionary.

According to another embodiment of method retrieving the compressed customer data from the database of the host organization includes receiving a first database query from a testing interface and returning the masked customer data responsive to the first database query from the testing query interface and in which the method further includes a receiving a second database query from a query interface b retrieving the compressed customer data from the database of the host organization c de compressing the compressed customer data via the compression dictionary and d returning the customer data in its plain text and uncompressed form responsive to the second database query from the query interface. For example the first database query is for the sake of internal testing and as such must be given masked data where as the second database query is from a customer or a user with proper access rights to see the data being requested and as such the data should be recovered and returned in its original form that is to say returned in its plain text and uncompressed form.

Thus according to another embodiment of method the first database query is issued as part of a masked transaction against the database of the host organization and in which the second database query is issued on behalf of a customer having ownership of the customer data.

According to another embodiment method further includes receiving a test database query from a test Application Programming Interface test API the test database query specifying the customer data to be retrieved from the database of the host organization and in which the test API causes the compressed customer data retrieved from the database to be de compressed using the masked compression dictionary and return the masked customer data responsive to the test database query.

According to another embodiment method further includes processing real time transaction requests at the host organization within a live production environment via a customer facing query interface concurrently with the one or more masked transactions within the live production environment via an internally facing testing query interface in which the real time transaction requests via the customer facing query interface return the customer data in its plain text and uncompressed form based on the compression dictionary and in which the one or more masked transactions via the internally facing testing query interface return masked customer data in an uncompressed form based on the masked compression dictionary 

According to another embodiment of method the database of the host organization stores underlying records on behalf of customer organizations the underlying records having sensitive data stored therein and in which the underlying records of the databases having sensitive data stored therein include at least one of HIPAA Health Insurance Portability and Accountability Act protected data Sarbanes Oxley Act SOX protected data proprietary sales data proprietary financial data proprietary trade secret data and government classified data.

According to another embodiment method further includes exporting the compressed customer data stored in the database to a test database via the operations including a de compressing the compressed customer data using the masked compression dictionary and b storing the masked customer data in the test database in an uncompressed form and in which the test database resides in a non production environment separate from the database within a live production environment.

According to another embodiment method further includes sharing the masked customer data as stored in the test database in an uncompressed form subject to policy restrictions and controls.

According to another embodiment of method the host organization implements the method via computing architecture of the host organization including at least the processor and the memory in which a user interface operates at a user client device remote from the host organization and communicatively interfaces with the host organization via a public Internet and in which the host organization operates as a cloud based service provider to the user client device.

According to another embodiment of method the host organization provides a multi tenant database system via the database and the computing architecture of the host organization the multi tenant database system having elements of hardware and software that are shared by a plurality of separate and distinct customer organizations each of the separate and distinct customer organizations being remotely located from the host organization.

According to another embodiment method further includes retrieving non compressible data from the database of the host organization masking the non compressible data via the masked compression dictionary and returning the de compressed masked customer data and the masked non compressible data responsive to a masked transaction issued on behalf of a test sequencer.

According to a particular embodiment there is non transitory computer readable storage media having instructions stored thereon that when executed by a processor in a host organization the instructions cause the host organization to perform operations including receiving customer data at the host organization compressing the customer data using dictionary based compression and a compression dictionary storing the compressed customer data in a database of the host organization retrieving the compressed customer data from the database of the host organization and de compressing the compressed customer data via a masked compression dictionary in which the masked compression dictionary de compresses the customer data into masked customer data.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system is used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it is understood that the networks that the claimed embodiments may utilize are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system may include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser a Mozilla or Firefox browser an Opera or a WAP enabled browser in the case of a smartphone tablet PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it is understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units.

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS may include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It is understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas e.g. tenant storage space which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage space tenant data and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to tenant data . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage space . A UI provides a user interface and an API provides an application programmer interface into system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process space for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user may hit three different application servers and three requests from different users may hit the same application server . In this manner system is multi tenant in which system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS may have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects as described herein. It is understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It is understood that the word entity may also be used interchangeably herein with object and table. 

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. static memory such as flash memory static random access memory SRAM volatile but high data rate RAM etc. and a secondary memory e.g. a persistent storage device including hard disk drives and a persistent database and or a multi tenant database implementation which communicate with each other via a bus . Main memory includes a data compressor which may implement dictionary based data compression with a data dictionary to compress customer data to be stored. Data de compressor de compresses compressed data via a data dictionary to result in customer data in its plaintext and uncompressed form or operates using a masked data dictionary to result in masked customer data in its uncompressed form. Test query interface is capable to receive database queries for purposes of testing and permissibly returns masked customer data in place of customer data in its plaintext and uncompressed form. Main memory and its sub elements are operable in conjunction with processing logic and processor to perform the methodologies discussed herein. The computer system may additionally or alternatively embody the server side elements as described above.

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the processing logic for performing the operations and functionality which is discussed herein.

The computer system may further include a network interface card . The computer system also may include a user interface such as a video display unit a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. an integrated speaker . The computer system may further include peripheral device e.g. wireless or wired communication devices memory devices storage devices audio processing devices video processing devices etc. .

The secondary memory may include a non transitory machine readable storage medium or a non transitory computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface card .

In accordance with one embodiment there is a system having at least a processor and a memory therein to execute implementing logic and or instructions . According to such an embodiment the system further includes a request interface to receive customer data at the system a data compressor to compress the customer data using dictionary based compression and a compression dictionary a database to store the compressed customer data a test query interface to retrieve the compressed customer data from the database and a data de compressor to de compress the compressed customer data via a masked compression dictionary in which the masked compression dictionary de compresses the customer data into masked customer data .

According to another embodiment of the system the test query interface is to receive a first database query from a test sequencer and return the masked customer data to the test sequencer responsive to the first database query from the testing query interface and in which the system further includes a the request interface to further receive a second database query b a query interface to retrieve the compressed customer data from the database c the data de compressor to de compress the compressed customer data via the compression dictionary and d the request interface to return the customer data in its plain text and uncompressed form responsive to the second database query

According to another embodiment the system further includes a web server to implement the request interface and to receive the customer data at the system from one of a plurality of customer organizations remote from the system in which the plurality of customer organizations communicably interface with the system via a public Internet and in which each customer organization is an entity selected from the group consisting of a separate and distinct remote organization an organizational group within the host organization a business partner of the host organization or a customer organization that subscribes to cloud computing services provided by the host organization.

According to another embodiment of the system a user interface operates at a user client device remote from the system and communicatively interfaces with the system via a public Internet in which the system operates at a host organization as a cloud based service provider to the user client device and in which the cloud based service provider hosts the customer data within a multi tenant database system at a host organization on behalf of the user.

Bus interfaces the various components of the system amongst each other with any other peripheral s of the system and with external components such as external network elements other machines client devices etc. including communicating with such external devices via a network interface over a LAN WAN or the public Internet.

While the subject matter disclosed herein has been described by way of example and in terms of the specific embodiments it is to be understood that the claimed embodiments are not limited to the explicitly enumerated embodiments disclosed. To the contrary the disclosure is intended to cover various modifications and similar arrangements as are apparent to those skilled in the art. Therefore the scope of the appended claims are to be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the disclosed subject matter is therefore to be determined in reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

