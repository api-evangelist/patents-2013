---

title: Analyzing security of applications
abstract: In various embodiments, static, dynamic, and behavioral analyses may be performed on an application. A set of code fragments employed by the application may be determined. A set of device resources employed by the application may be determined. An application fingerprint is generated for the application and potentially malicious component and/or behaviors are identified. The application fingerprint encodes identifiers for the set of code fragments and identifiers for the set of device resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652617&OS=09652617&RS=09652617
owner: Amazon Technologies, Inc.
number: 09652617
owner_city: Seattle
owner_country: US
publication_date: 20130625
---
An application marketplace may offer a multitude of different applications such as mobile applications. For example the applications may include games email applications social networking applications mapping applications imaging applications music playing applications shopping applications and so on. Proprietors of application marketplaces may wish to detect malicious application or malware within the application marketplace for security considerations as well as user experience considerations.

The present disclosure relates to generating profiles of applications referred to herein as application fingerprinting. An application fingerprint uniquely identifies an application based on for example what application programming interfaces API it uses what software libraries or code fragments it uses what hardware devices it accesses what device resources it employs typical resource consumption patterns and or other characteristics. In some embodiments the application fingerprint may also identify typical user behavior relative to the application. The application fingerprints may have many uses including application search application categorization defect detection and so on. In a curated application marketplace the proprietor of the application marketplace may wish to avoid or prevent the distribution of applications containing malicious code to the users of the application marketplace. Accordingly embodiments of the present disclosure can analyze the application fingerprints of applications as well as usage data associated with applications to identify malicious behavior. Additionally embodiments of the present disclosure can also analyze the application fingerprints of applications and certify that an application distributed via the application marketplace is employing best practices such that the application is not likely to contain malicious code.

With reference to illustrated is a fingerprint scenario according to various embodiments of the disclosure. More specifically the fingerprint scenario illustrates applications and for which corresponding application fingerprints and are generated. The applications are representative of the multitude of applications that may be offered by an application marketplace. In this non limiting example the application corresponds to a music player and the application corresponds to another music player that may have varying and or additional features relative to the application . Each of the applications has its own respective application fingerprint that can function to distinguish one application from another and or to identify similarities between applications . Accordingly in the non limiting example of each of the application fingerprints identifies characteristics relating to device hardware used software libraries or code fragments used and resource consumption. In other examples additional or different characteristics may be represented by the application fingerprints .

Here the application fingerprint indicates that the application uses the accelerometer and touchscreen of the device and the software libraries including LibAudioDecode 2.0. Also the application is associated with high processor and battery usage. The application fingerprint indicates that the application uses a sound device the touchscreen of the device as well as radio and network capabilities of the device. The application fingerprint also indicates that the application uses the software libraries named GraphicsEffects 1.3b and LibAudioDecode 2.0 and SocialConnect 0.1a. The application is associated with medium processor and battery usage.

In the depicted example one or more of the software libraries or code fragments employed by an application and or can be associated with a known malicious behavior. Accordingly embodiments of the disclosure can identify the application and or as a malicious application if the application fingerprint and or indicates that the application employs a known malicious software library or code fragment. Additionally embodiments of the disclosure can perform an analysis of the behavior of the application to assess whether the application should be designated as a potential malicious application. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

Turning now to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and one or more clients in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include a fingerprint generation service a metric collection service an application security analyzer a hosted environment an application marketplace system and other applications services processes systems engines or functionality not discussed in detail herein. The fingerprint generation service is executed to generate application fingerprints for applications .

Various techniques relating to application fingerprinting are described in U.S. Patent Application entitled APPLICATION FINGERPRINTING filed Jun. 25 2013 under Ser. No. 13 926 607 U.S. Patent Application entitled APPLICATION MONETIZATION BASED ON APPLICATION AND LIFESTYLE FINGERPRINTING filed Jun. 25 2013 under Ser. No. 13 926 656 U.S. Patent Application entitled DEVELOPING VERSIONS OF APPLICATIONS BASED ON APPLICATION FINGERPRINTING filed Jun. 25 2013 under Ser. No. 13 926 683 U.S. Patent Application entitled APPLICATION RECOMMENDATIONS BASED ON APPLICATION AND LIFESTYLE FINGERPRINTING filed Jun. 25 2013 under Ser. No. 13 926 574 U.S. Patent Application entitled IDENTIFYING RELATIONSHIPS AMONG BETWEEN APPLICATIONS filed Jun. 25 2013 under Ser. No. 13 926 215 and U.S. Patent Application entitled RECOMMENDING IMPROVEMENTS TO AND DETECTING DEFECTS WITHIN APPLICATIONS filed Jun. 25 2013 under Ser. No. 13 926 234 all of which are incorporated herein by reference in their entirety.

The metric collection service is executed to obtain various metrics as for use by the fingerprint generation service in generating application fingerprints . Such metrics may include resource consumption metrics usage data and or other types of metrics. For example resource consumption metrics can include an amount of network usage CPU utilization memory utilization or any other aspect about resources consumed by a particular application. For example the resource consumption metrics can include information about data stored on the client that is accessed by a particular application as well as what the application does with the data. For example the resource consumption metrics can identify whether an application accesses an address book stored on a device how much of address book is accessed by the application and whether the application transmits data from the address book to any other server or network location via the network . As another example the resource consumption metrics can also identify whether an application accesses any other files within file system as well as how the application manipulates or uses the accessed files. Additionally the resource consumption metrics can be linked with a time of day or other clock that is maintained by or accessible to the client and or computing environment .

Additionally the metric collection service can also obtain usage data associated with a particular application by users of the application marketplace who have installed the application . Such usage data can include crash data or information related to the unexpected termination of an application . Usage data can also comprise information about various aspects features levels of an application that users of the application marketplace utilize during usage of the application . For example the usage data can include usage time of a user within different levels of a game application the amount of time a user spends in a particular section of an application relative to other applications an amount of network traffic originating from the application or any other usage metric associated with an application .

In one embodiment an application can be instrumented to report usage data to the metric collection service . The usage data and or resource consumption metrics can be stored in the data store and associated with a user account of a user. In other embodiments the metric collection service is configured to store the usage data and or resource consumption metrics on an aggregate non user identifiable basis. In either scenario the stored data can be analyzed with respect to various attributes of users such as demographic categories.

Various techniques relating to collecting behavioral usage metrics and or usage data from applications are described in U.S. patent application Ser. No. 13 215 972 entitled COLLECTING APPLICATION USAGE METRICS and filed on Aug. 23 2011 which is incorporated herein by reference in its entirety. Various techniques relating to profiling user behavior are described in U.S. patent application Ser. No. 13 555 724 entitled BEHAVIOR BASED IDENTITY SYSTEM and filed on Jul. 23 2012 which is incorporated herein by reference in its entirety.

The hosted environment is configured to execute an application instance for use in dynamic analysis and resource consumption profiling by the fingerprint generation service. Additionally the hosted environment can allow the application security analyzer to examine the behaviors of the application to judge whether the behaviors exhibited by the application can be associated with malicious behavior. To this end the hosted environment may comprise an emulator or other virtualized environment for executing the application instance .

The application marketplace system is executed to provide functionality relating to an application marketplace in which a multitude of applications may be submitted by developers and made available for purchase and or download by users. The application marketplace system may include functionality relating to electronic commerce e.g. shopping cart ordering and payment systems. The application marketplace system may support searching and categorization functionality so that users may easily locate applications that are of interest. The application marketplace system may include functionality relating to verification of compatibility of applications with various clients .

The data stored in the data store includes for example applications application fingerprints data relating to an application marketplace and potentially other data. The applications correspond to those applications that have been submitted by developers and or others for example for inclusion in the application marketplace . The applications may correspond to game applications email applications social network applications mapping applications and or any other type of application . In one embodiment the applications correspond to mobile applications for use on mobile devices such as for example smartphones tablets electronic book readers and or other devices.

Each application may include for example object code source code metadata and or other data. The object code corresponds to code that is executable by clients either natively by a processor or by way of a virtual machine executed by the processor. The source code corresponds to the source for the application as written in a programming language. In some cases the source code may be generated by way of decompiling the object code . The source code may be executable by clients through the use of an interpreter. The metadata may declare compatibility with various clients software libraries used by the application device resources used by the application and or other information. In one embodiment an application is distributed as a package including the object code and the metadata .

Application fingerprints can identify a respective application by its characteristics. In one embodiment an application fingerprint corresponds to a summarized numerical value. In various embodiments the application fingerprint may be stored as a string. The application fingerprint may include various unique identifiers for device resources and software libraries that are employed by the application . The application fingerprint may indicate resource consumption profiles and or behavioral usage profiles.

The data associated with the application marketplace includes for example download information categories application usage data and or other data. The download information indicates the popularity either in terms of absolute number of downloads or in terms of relative popularity of the applications offered by the application marketplace . The download information can also identify users either individually by a user account and or on an aggregate basis according to demographic category that have downloaded a particular application . The categories correspond to groupings of applications that may indicate similar applications and may be employed by users to more easily navigate the offerings of the application marketplace . Non limiting examples of categories may include social networking applications mapping applications movie information applications shopping applications music recognition applications and so on.

The security data models may be employed for machine learning purposes. For example the security data models may be trained via training sets that include applications that contain malicious components application fingerprints of applications that contain malicious components as well as through manual confirmation of correct identification malicious applications and or applications containing malicious components. For example the detection of applications containing malicious components can be confirmed or overridden by one or more users e.g. voting obtained from multiple users . Where correct detections are confirmed the application fingerprint application usage data and or other information associated with the detection may be employed in the security data models to improve the accuracy of further determinations about malicious applications . In other words the application security analyzer can employ the security data models in a machine learning solution that identifies malicious applications based upon their similarity to and or difference from data within the security data model .

The client is representative of a plurality of client devices that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display comprising for example one or more devices such as liquid crystal display LCD displays gas plasma based flat panel displays organic light emitting diode OLED displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as an application instance a metric generation service and or other applications. The application instance corresponds to an instance of an application that has been downloaded to the client from the application marketplace system . The application instance may correspond to actual use by an end user or test use on a test client . The metric generation service is configured to monitor the application instance and report data that the user of the client has elected to share with the metric collection service . Such data may include resource consumption metrics behavioral usage metrics and or other data. The client may be configured to execute applications beyond the application instance and the metric generation service such as for example browsers mobile applications email applications social networking applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin an application is received by the computing environment . The fingerprint generation service then begins processing the application to generate an application fingerprint . Such initial processing may comprise a static analysis which may compare the object code and or the source code against identified code fragments . Other aspects of such a static analysis which can inform an application fingerprint are described herein The fingerprint generation service may also perform a dynamic analysis of the application which may include executing an application instance for the application in a hosted environment and determining which code paths are taken by the object code . Other aspects of such a dynamic analysis which can inform an application fingerprint are described in herein.

The application fingerprint may indicate which of the identified code fragments and or identified hardware resources are actually used by the application instance . Resource consumption metrics and or usage data may be generated by a metric generation service executed in a client . The resource consumption metrics and or usage data then may be reported back from the client to the metric collection service by way of the network which can analyzed and incorporated into an application fingerprint as well as application usage data .

Accordingly an application fingerprint that has been generated may be used in many different ways. As one example the application security analyzer is executed to analyze an application fingerprint as well as application usage data to determine whether a corresponding application contains one or more malicious components or is a malicious application. In the context of the present disclosure a malicious component or malicious application can be identified as an application that violates a policy or best practice that is promulgated by a proprietor of an application marketplace .

In some embodiments the application security analyzer can generate a score on a scale that ranges from non malicious on a first end of the scale to malicious on another end of the scale. Upon detection of potentially malicious components within and or behaviors exhibited by an application the application security analyzer can score the application on such a scale accordingly. If for example the application security analyzer fails to detect any malicious components and or behaviors such a score for an application can fall towards the non malicious end of the scale. If the application security analyzer detects a large number of malicious components and or behaviors upon analysis of a particular application such a score can fall towards the malicious end of the scale.

Accordingly the security data model can define to what extent the detection of a potentially malicious component and or malicious behavior of an application affects such a score of the application . Therefore the application security analyzer can generate a score that indicates a degree of maliciousness associated with the application by consulting the security data model . In other words the application security analyzer can detect whether a particular application based upon an analysis of an application fingerprint associated with the application is potentially malicious based upon the calculated score of the application .

In one embodiment the application security analyzer can determine whether object code or a binary representation of an application contains a symbol table that is obfuscated. Because a symbol table is one way in which functionality of an application can be deduced obfuscation of a symbol table is often one way in which malicious actors attempt to hide malicious functionality that is within an application. Therefore an application that contains an obfuscated symbol table can be identified as a malicious application .

As another example the application security analyzer can determine whether an object code or any binary representation of an application that is intended for distribution to clients comprises a packed symbol table. Because a symbol table is one way in which functionality of an application can be deduced packing of a symbol table is often one way in which malicious actors attempt to hide malicious functionality that is within an application. Therefore an application that contains a packed symbol table can be identified as a malicious application .

As another example the application security analyzer can determine whether an object code or any binary representation of an application that is intended for distribution to clients comprises a stripped binary. Therefore an application that comprises a stripped binary can be deemed as a policy of the application marketplace as a type of binary that is associated with a malicious application and identified as a malicious application by the application security analyzer . Conversely the application security analyzer can also identify that an application that comprises an unstripped binary is associated with non malicious behavior. In some embodiments the application security analyzer can determine that an application can comprises a binary that includes information aiding in the analysis debugging and or decompiling of an application is also associated with non malicious behavior.

As another example the application security analyzer can also exercise the various functionality contained within an application by executing an application instance within the hosted environment . The application security analyzer can observe the behavior of the application which includes its attempts to access device resources its use of network resources the servers with which the application instance communicates and determine whether the application instance is exhibiting potentially malicious behavior. If the application exhibits malicious behavior in the hosted environment the application security analyzer can identify the application as a malicious application.

For example the application security analyzer can determine whether network activity caused by the application does not correspond with user activity within the application based upon an analysis of execution of the application instance within the hosted environment and or based upon an analysis of usage data obtained from application instances associated with clients . For example if user activity is minimal or non existent but the application is causing network activity the application security analyzer can deem the application as potentially malicious. Additionally if an application based upon an analysis of usage data and or execution of an application instance within the hosted environment is accessing known malicious servers via a network the application security analyzer can designate the application as potentially malicious.

The application security analyzer can also examine the degree of change between versions of an application that are submitted by the application marketplace by a developer of the application and compare the degree of change in an application update with the changes that are identified within release notes that are associated with the update. For example if release notes provided along with an application update do not identify many changes but the difference between the object code of the update and the previous version of the application is significant the application security analyzer can flag the application update as a potential malicious application . To analyze release notes associated with a version of an application the application security analyzer can perform a sentiment analysis or any other natural language processing to assess the text contained within release notes associated with the application.

The application security analyzer can also examine the differences between different versions of an application that are provided by a developer for various platforms served by the application marketplace . For example a developer may generate different versions of applications for mobile phones tablets personal computers etc. Accordingly if the software libraries device capabilities and or resource consumption profiles utilized by the various platform versions of the application vary to a significant degree from one another the application security analyzer can designate the application as a potential malicious application .

The application security analyzer can also determine whether different versions of an application that are associated with different platforms of clients behave similarly when executed within the hosted environment . Additionally the application security analyzer can determine whether software libraries or portions of software libraries that are referenced within the object code of the various platform versions of the application that are identified as synonymous with one another are employed in the various platform versions of the application . If they are not then the application security analyzer can determine that the application is a potential malicious application when there is too much variance in functionality between the various platform versions of the application .

As another example the application security analyzer can determine based upon an execution of an application instance within the hosted environment and or on a client whether a particular application updates itself without going through an approved application update process e.g. updating via the application marketplace . Accordingly if a code space or application storage area assigned to a particular application within the hosted environment and or on a client changes by more than a threshold amount the application security analyzer can designate the application as potentially malicious.

In some scenarios the application security analyzer can initiate steps to mitigate the potentially malicious behavior of an application where malicious content or behaviors that can be mitigated or prevented are detected. For example the application security analyzer can modify the application sandbox in which an application instance is executed to remove the ability of the application to access certain device resources. For example the application security analyzer can remove the capability of the application to access personal information stored on a client and or adjust the access of the application to network capabilities of the device.

Additionally the application security analyzer can adjust the capability of the application to access any other device resource of a client such as hardware sensors mass storage device display devices speakers microphones and or any other device capability. For example if the application security analyzer determines that an application is making potentially malicious use of any device hardware or software capability the application security analyzer can modify the application sandbox in which the application is executed to remove or restrict the ability of the application to access any such device hardware or software capability.

In some scenarios the application security analyzer can also patch a version of an application where malicious content that can be repaired is detected. For example if the object code associated with the application references a known malicious server by a domain name system DNS name that is known to be associated with the malicious server the application security analyzer can replace the reference to the DNS name in the object code with a reference to localhost or a non malicious DNS name.

Accordingly a security data model employed by the application security analyzer can take into account one or more of the above factors in assessing whether an application contains a malicious component and or whether the application is a malicious application . Therefore the application security analyzer can update training sets stored within the security data model as malicious behaviors malicious components and or malicious applications are identified so that other applications that may exhibit similar behaviors can also be detected as potentially malicious.

The application security analyzer can also determine whether other applications offered via an application marketplace are potentially malicious when one application that is related to the other applications is detected as potentially malicious by the applications security analyzer . Accordingly if a behavior exhibited by an application and or component within the application is determined to be potentially malicious by the application security analyzer the application security analyzer can then determine whether other applications that are closely related to the application also incorporate the potentially malicious component and or behavior.

The application security analyzer can also determine whether an application can be certified as not containing malicious components based at least upon whether the application complies with standards and or best practices set forth by a proprietor of the application marketplace . For example if the application does not employ a packed and or obfuscated symbol table is provided with an unstripped binary employs only approved software libraries and or any combination thereof the application can be certified by the application security analyzer based upon an analysis of the application fingerprint corresponding to the application .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the application security analyzer according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application security analyzer as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application security analyzer identifies an application . For example a developer of an application may wish to have an application evaluated by the application security analyzer . Additionally the application security analyzer may be invoked to analyze applications as they are submitted to the application marketplace for distribution to users. In box the application security analyzer can obtain an application fingerprint corresponding to the application . In box the application security analyzer can consult a security data model to identify potential malicious components and or malicious behaviors associated with the application . For example the application security analyzer can determine whether an analysis of object code of the application yields detection of potential malicious components as described above. Additionally the application security analyzer can also determine whether execution of the application by the hosted environment also yields detection of malicious behavior as described above.

In box the application security analyzer can identify whether the application employs a malicious code fragment and or software library and can be designated as a potentially malicious application. If a potentially malicious code fragment and or software library is detected then at box the application security analyzer identifies the application as a potentially malicious application . As noted above the application security analyzer can generate a risk profile or a risk score and comprises a confidence score expressing a level of risk associated with the maliciousness of the application. Thereafter the process shown in proceeds to completion.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the application security analyzer according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application security analyzer as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application security analyzer identifies an application . For example a developer of an application may wish to have an application evaluated by the application security analyzer . Additionally the application security analyzer may be invoked to analyze applications as they are submitted to the application marketplace for distribution to users. In box the application security analyzer can obtain an application fingerprint corresponding to the application . In box the application security analyzer consult a security data model to identify potential malicious behaviors associated with the application . For example the application security analyzer can determine whether an analysis of the application s use of network resources device resources personal information stored on a device or any other aspect of the behavior of the application yields detection of malicious behavior as described above.

If a potentially malicious behavior is detected then at box the application security analyzer identifies the application as a potentially malicious application . As noted above the application security analyzer can generate a risk profile or a risk score and comprises a confidence score expressing a level of risk associated with the maliciousness of the application. Thereafter the process shown in proceeds to completion.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the application security analyzer according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application security analyzer as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application security analyzer identifies an application . For example a developer of an application may wish to have an application evaluated by the application security analyzer . Additionally the application security analyzer may be invoked to analyze applications as they are submitted to the application marketplace for distribution to users. In box the application security analyzer can obtain an application fingerprint corresponding to the application . In box the application security analyzer can determine whether the application employs a potentially malicious component and or malicious behavior as described above. For example the application security analyzer can determine whether an analysis of the application and or the application fingerprint of the application reveals a potentially malicious component and or behavior.

At box the application security analyzer can identify related applications based upon an analysis of the application fingerprint of the application as well as the respective application fingerprints of other applications within the application marketplace. At box the application security analyzer can then determine whether the characteristic or characteristics that are potentially malicious and are detected within the application are also detected within related applications. In other words the application security analyzer can determine whether the potentially malicious components and or behaviors that have been detected within the application are also within related applications . If so then at box the related applications exhibiting the potentially malicious components and or behaviors are identified as potentially malicious. As another example the application security analyzer can also deem the related applications as potentially malicious if the applications are distributed via an application marketplace by the same developer. As another example the application security analyzer can deem the most closely related applications or the nearest neighbors of the application as potentially malicious applications . Thereafter the process shown in proceeds to completion.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the fingerprint generation service the metric collection service the application security analyzer the application marketplace system and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the fingerprint generation service the metric collection service the application security analyzer the application marketplace system and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the application security analyzer . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in flowcharts of may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in flowcharts of may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the fingerprint generation service the metric collection service the application security analyzer the application marketplace system that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

