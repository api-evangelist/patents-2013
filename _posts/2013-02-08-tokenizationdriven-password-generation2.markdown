---

title: Tokenization-driven password generation
abstract: Applications usually require users to present passwords as a form of identification in order to access user accounts. To improve the security and convenience for accessing such accounts, tokenized passwords may be used in place of or in addition to traditional passwords. Client devices retrieve password rules from an application associated with the user account, and retrieve token tables based on the password rules. The client device receives information from the user for use as a password seed. Using the password seed as an input to the token tables, the client device generates a tokenized password. The tokenized password is transmitted to the application for association with the user account. The tokenized password is not saved at the client device but is re-generated each time the user accesses the account, improving the security of the token-driven password generation system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09648011&OS=09648011&RS=09648011
owner: Protegrity Corporation
number: 09648011
owner_city: Grand Cayman
owner_country: KY
publication_date: 20130208
---
The application claims the benefit of Provisional Application No. 61 597 595 filed on Feb. 10 2012 which is incorporated herein by reference.

This application relates to the field of password management and more specifically to the management of passwords generated by tokenization.

Many websites services and applications require users to register a password with the website service application as a security measure for user authentication. For example users register passwords with email providers banks online markets credit card companies computer systems social networks and the like. To minimize the number of passwords that a user has to maintain users often choose to re use the same password for multiple accounts on different websites applications and services. However if a malicious individual gains knowledge of the password for one of the user s accounts then several of the user s accounts may be compromised. Furthermore users may register weak passwords such as passwords based on a special date a name a specific sequence of numbers a mnemonic device a key phrase and the like. In this case malicious individuals may determine a user s password by various brute force methods.

The user may take steps to protect against such an event such as creating complex passwords registering different passwords for each account using password managers and so forth. Each of these methods has downsides which can create difficulties for the user or vulnerabilities in the user s account security. While complex passwords may be difficult for malicious individuals to determine users themselves may have difficulty remembering such passwords. A user may register different complex passwords for different accounts but this compounds the difficulty of remembering all of the passwords and remembering which account each to which each password corresponds. Password managers can store all of a user s passwords but storing passwords comes with the risk that malicious individuals may hack into the password manager and obtain all of the user s passwords.

A client device uses user provided information and token tables to generate passwords for various user accounts. The user provided information referred to herein as a password seed is used as an input to one or more token tables to generate a tokenized password. The client device such as a computer smart phone website web server and the like contains one or more token tables that are received from a security system. These token tables may be updated or replaced periodically by the security system based on various conditions such as specific time intervals user requests or security rules. In an embodiment the tokenized passwords described herein are implemented within a client device in the form of a plug in or an application that executes in the background and monitors user inputs.

In one embodiment in response to a user accessing a website service application or the like collectively referred to as application henceforth that requires the user to register an account with a new or replacement password the client device generates a tokenized password that is more secure than a user generated password. The application may also require that a user input a combination of a user provided password and a tokenized password into the application in order to access an account in which case the client device prompts the user to provide the necessary information and generates the tokenized password. As used herein tokenized password and tokenization based password are used to refer to tokenized data used as a password. The client device can communicate with the application to determine specific password requirements hereinafter password rules such as password length character requirements e.g. letter case digits symbols spacing and so forth or sequence requirements e.g. letter number ordering . The client device generates tokenized passwords according to these password requirements.

The client device accesses and uses a password seed in generating a tokenized password. The password seed can include information that the user explicitly provides to the client device e.g. a phrase a password a URL a website a user account number or identifier a user identity a text string a mnemonic device various numbers associated with the user and so forth in response to a password generation request. For example the client device can request the user to provide a keyword or short phrase such as bank account or email a website or URL such as www.bankaccount.com or www.wikipedia.org or the name of a service such as Netflix . The user can provide information associated with an account that does not necessarily identify an account. For example a user can associate any keyword or term they desire whether as a mnemonic term e.g. money with the user s bank account at a bank website or an entirely arbitrary term e.g. elephant with the user s cloud stored documents on web based storage system . This information can be used as the password seed for generating a tokenized password. Instead of having to memorize complex passwords as traditional accounts require users can memorize an easy password which is automatically converted into an opaque tokenized password that is resistant to brute force attacks.

The client device can also collect a password seed without explicitly requesting the user to input the password seed. For example the client device can analyze client device properties network connection properties network browser client properties stored cookies system security properties or any other information associated with the user that can be used in generating a tokenized password which is useful to limiting account access under certain conditions. Once selected the source of the password seed should be invariant over time in order to generate the same tokenized password with a given set of token tables without having to store the password locally on the client device. In addition to knowing explicitly provided information for the password seed users can also need to fulfill other conditions in order to gain account access. For example time could be used to restrict account access to certain times of day e.g. based on the hour digit . Location could also be used to limit access to when a user is in a specific state or country which is useful for both travelers and non travelers. Such information can be used as part of the password seed used to generate a tokenized password.

The client device generates a tokenized password by tokenizing the password seed using one or more token tables. In embodiments where an application programming interface API is used by the client device to retrieve password rules the client device selects specific token tables that map input values to tokens that satisfy the retrieved password rules. The client device then interfaces with the application and registers the tokenized password for a user account. Alternatively some applications may not have the capability to automatically interface with the password generator of the client device. In such instances the client device can provide the user with the tokenized password and the user can register the tokenized password with the application. If the tokenized password fails to satisfy the password rules then the client device can iteratively generate new tokenized passwords using different sets of token tables until a tokenized password is generated that satisfies the password rules.

Each subsequent time the user wants to access an account the user provides the same password seed first used to generate the tokenized password for the account. The client device tokenizes the password seed using the same token tables initially used to generate the password in order to re generate the tokenized password. The tokenized password is then provided to the application. Unlike a typical password manager the token based passwords are not stored locally on the client device but are re generated each time the user wishes to access an account. By re generating the token based passwords the client device eliminates the potential security vulnerability presented by the storage of passwords in a password manager. As long as the client device maintains access to the token tables used to generate the tokenized password tokenizing the password seed will result in the generation of the correct tokenized password each time the tokenized password is requested. If a client device s token tables are updated the client device can prompt the user to register a new tokenized password with the application or can automatically register a new tokenized password with the application.

The figures Figs. depict embodiments for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein can be employed without departing from the principles of the invention described herein.

Reference will now be made in detail to several embodiments examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers can be used in the figures and can indicate similar or like functionality. The figures depict embodiments of the disclosed system or method for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein can be employed without departing from the principles described herein.

The transmission and storage of sensitive data such as passwords credit card numbers social security numbers bank account numbers driving license numbers etc is oftentimes challenging. Before sensitive data can be transmitted or stored the sensitive data can be tokenized into tokenized data to prevent an unauthorized entity from accessing the data.

As used herein the tokenization of data refers to the generation of tokenized data by querying one or more token tables mapping input values to tokens with the one or more portions of the data and replacing the queried portions of the data with the resulting tokens from the token tables. Tokenization can be combined with encryption for increased security for example by encrypting sensitive data using a mathematically reversible cryptographic function e.g. datatype preserving encryption or DTP a one way non reversible cryptographic function e.g. a hash function with strong secret salt or a similar encryption before or after the tokenization of the sensitive data. Any suitable type of encryption can be used in the tokenization of data. A detailed explanation of the tokenization process can be found in U.S. patent application Ser. No. 13 595 439 filed Aug. 27 2012 which is hereby incorporated by reference.

As used herein the term token refers to a string of characters mapped to an input string of characters in a token table used as a substitute for the string of characters in the creation of tokenized data. A token can have the same number of characters as the string being replaced or can have a different number of characters. Further the token can have characters of the same type such as numeric symbolic or alphanumeric characters as the string of characters being replaced or characters of a different type.

Any type of tokenization can be used to perform the functionalities described herein. One such type of tokenization is static lookup table SLT tokenization. SLT tokenization maps each possible input values e.g. possible character combinations of a string of characters to a particular token. An SLT includes a first column comprising permutations of input string values and can include every possible input string value. The second column of an SLT includes tokens with each associated with an input string value of the first column. Each token in the second column can be unique among the tokens in the second column. Optionally the SLT can also include one or several additional columns with additional tokens mapped to the input string values of the first column.

In some embodiments to increase the security of tokenization sensitive data can be tokenized two or more times using the same or additional token tables. For example the first 8 digits of a 16 digit credit card number can be tokenized with an 8 digit token table to form first tokenized data and the last 12 digits of the first tokenized data can be tokenized using a 12 digit token table to form second tokenized data. In another example the first 4 digits of a credit card number are tokenized using a first token table the second 4 digits are tokenized with a second token table the third 4 digits are tokenized with a third token table and the last 4 digits are tokenized with a fourth token table. Certain sections of the sensitive data can also be left un tokenized thus a first subset of the resulting tokenized data can contain portions of the sensitive data and a second subset of the tokenized data can contain a tokenized version of the sensitive data.

Dynamic token lookup table DLT tokenization operates similarly to SLT tokenization but instead of using static tables for multiple tokenizations a new token table entry is generated each time sensitive data is tokenized. A seed value can be used to generate each DLT. In some embodiments the sensitive data or portions of the sensitive data can be used as a seed value to generate a DLT. DLTs can in some configurations provide a higher level of security compared to SLT but require the storage and or transmission of a large amount of data associated with each of the generated token tables. While DLT tokenization can be used to tokenize data according to the principles described herein the remainder of the description will be limited to instances of SLT tokenization for the purposes of simplicity.

The security of tokenization can be further increased through the use of initialization vectors IVs . An initialization vector is a string of data used to modify sensitive data prior to tokenizing the sensitive data. Example sensitive data modification operations include performing linear or modulus addition on the IV and the sensitive data performing logical operations on the sensitive data with the IV encrypting the sensitive data using the IV as an encryption key and the like. The IV can be a portion of the sensitive data. For example for a 12 digit number the last 4 digits can be used as an IV to modify the first 8 digits before tokenization. IVs can also be retrieved from an IV table received from an external entity configured to provide IVs for use in tokenization or can be generated based on for instance the identity of a user the date time of a requested tokenization operation based on various tokenization parameters and the like. Data modified by one or more IVs that is subsequently tokenized includes an extra layer of security an unauthorized party that gains access to the token tables used to tokenized the modified data will be able to detokenize the tokenized data but will be unable to de modify the modified data without access to the IVs used to modify the data.

The client device is a computing device capable of processing data as well as transmitting data to and receiving data from the other modules in the system environment via the network . For example the client device can be a desktop computer laptop computer smart phone tablet computing device server payment terminal or any other device having computing and data communication capabilities. Each device includes one or more processors memory storage and networking components. The client device is coupled to the network and can interact with other modules coupled to the network using software such as a web browser or other application with communication functionality. Such software can include an interface for communicating with the other modules via the network . In some embodiments of the system environment there can be any number of the client devices security systems and applications connected to the network and communicating with one or more other modules.

The network connecting the various modules is typically the Internet but can be any network including but not limited to a local area network LAN metropolitan area network MAN wide area network WAN cellular network wired network wireless network private network virtual private network VPN direct communication line and the like. The network can also be a combination of multiple different networks.

A security system is connected to the network and is configured to generate and or maintain a plurality of token tables for use by the application and the client device . For example the security system can generate and transmit token tables to the client device for password tokenization operations. The security system distributes the token tables to the client device for storage. If the token tables stored by the client device meet certain conditions that require them to be updated e.g. they are outdated or compromised an update request is received from the user a periodic token table update is due and the like then the security system generates new token tables or accesses additional token tables and provides the new token tables to update or replace the existing token tables at the client device . The security system can also remove existing token tables on client device particularly from devices that have security compromised token tables.

In some embodiments the security system can also be configured to control or maintain other security measures for the application and or the client device such as encryption algorithms initialization vector tables public private keys encoding operations and so forth. Security system can generate and or update existing measures at the application or the client device in response to specific conditions. These conditions can include outdated algorithms compromised algorithms user initiated updates automatic periodic updates and so forth. The security system exposes an application programming interface by which client devices and applications can invoke the foregoing functions and operations.

The application can be any website service or application that requests or requires that the user register a password in order to provide a form of identity verification for accessing an account at the application . For example the application can be a bank terminal shopping website company portal government application email provider server VPN access portal social network communication client and other similar services. The application can contain one or more accounts associated with user . In an embodiment an API is used by the application that allows the application to interface with the client device . Through the API the application can communicate password rules error responses command responses application information and the like to the client device . For each account the application can request and receive a password from the client device for the account and can store the received password in associated with the account.

Upon receiving a request from the client device to subsequently access an account the application can request the password associated with the account from the client device . In response to the request the client device generates a tokenized password using locally stored token tables and passes the generated password to the application. If the received password is the same as the stored password associated with the account the application provides access to the account to the client device . In an embodiment of the environment the application can be configured to communicate automatically with the client device to request and receive tokenized passwords from the client device without user intervention. Alternatively the application can be configured to request that the user input a tokenized password associated with a requested account.

As mentioned in the security system generates and maintains various security measures for the client device and the application . These security measures include token tables encryption algorithms initialization vector tables encoding operations and so forth as described for example in U.S. patent application Ser. No. 13 595 438 filed Aug. 27 2012 which is incorporated by reference herein. The security system includes a token tables database . The security system generates and stores token tables in the token tables database for instance in response to a request for token tables from the client device or for periodic replacement of token tables stored at the client device . Token tables can be generated prior to or in response to requests by a client device for token tables. The security system can retrieve token tables from the token tables database and send them to a client device for example in response to certain conditions e.g. the elapsing of periodic time intervals the receipt of user requests security vulnerabilities and so forth .

In various embodiments a security system includes other modules and databases implementing and monitoring security at the client device and or the application . For example the security system can include modules such as an initialization vector database initialization vector generator encryption algorithm database and so forth. In addition while the communication shown between the security system and the client device is shown to be one directional in other embodiments can utilize a two directional communication scheme. For example a client device can actively request the security system to provide updated token tables or can notify the security system of a security breach.

As noted above an application can be any website service or application that requests a user to register or input a password in order to access an account saved on the application . For example when a user signs up for an account on a social network website e commerce website financial services website or the like the website requests that the user create a password that becomes associated with the account. In order to subsequently access the account the user has to input the correct password. When the user inputs an incorrect password the website blocks access to the account until the correct password is entered. An application can be configured to accept tokenized passwords that a user manually inputs or it can be configured to automatically communicate with a client device to request and receive a tokenized passwords.

The application can enforce certain password format rules in order to encourage the use of strong passwords. Typical password format rules include a minimum number of characters a maximum number of characters certain types of characters e.g. letters letter casings numbers symbols and the like and or certain character sequencing e.g. password beginning with a letter password alternating letters and other types of characters password having a limited number of character repetition and so forth . These password format rules can be transmitted from the application to the client device and saved in a password restrictions database discussed below in greater detail. In embodiments where an API is used by the application to communicate with client device the application can automatically transmit password rules without user input. In other embodiments where such an API does not exist the user can manually enter an application s password rules into client device using a supplied syntax. The application can be configured to periodically or immediately update the password rules database with new password rules as they are updated or changed.

In the embodiment of the client device includes a token tables storage module a token server a password generator and a password rules storage module . Other embodiments of the client device can contain different and or additional components than those shown by . The client device acts as an interface between a user and an application allowing the user to access the application . The client device communicates with the security system and the application through a network not shown .

The token tables database stores token tables received from the security system . These token tables can remain stored for an indefinite amount of time or can be updated removed periodically by the security system . Each stored token table can be associated with a different level of complexity. For example a token table with tokens consisting of entirely lower case letters can be associated with a low level of token complexity a token table with tokens consisting of a mix of lower and upper case letters can be associated with a medium level of complexity and token tables with tokens consisting of numbers symbols lower case letters and upper case letters can be associated with a high level of complexity. When requested by a token server the token tables database retrieves one or more token tables based on the received password rules or based on a requested level of complexity and transfers the token tables to the password generator for use in tokenizing data. The database stores information mapping each token table with one or more applications for which the token table is used for generating tokenized passwords.

The token server receives requests for token tables stored in the token tables storage module retrieves the token tables that satisfy the password rules or requested complexity level and provides the retrieved token tables to the password generator . For example when a user enters information into the client device in order to access an account at an application the password generator prompts the token server for token tables associated with the account passing to the token server information identifying the application . The token server responds by retrieving the appropriate token tables associated with the application that satisfy the password rules or requested complexity level from the token tables database and transfers them to the password generator . Furthermore the token server can monitor the viability or strength of the stored token tables. For example if the token server determines that one or more token tables are outdated or have been compromised it can automatically block usage of the affected token tables and prompt the security system to update the token tables. In such a case it can also prompt the password generator to create and or update one or more tokenized passwords associated with the affected token tables so that the tokenized passwords instead correspond to the updated token tables. The user initially registers a tokenized password with a requested account at the application in advance. For example during the setting up of an account or upon updating a password for an account the application associated with the account can prompt a user to provide a password. The remainder of the description will be limited to embodiments in which the user creates and requests passwords for an account at the application via the client device though in other embodiments the user can directly interface with the application to create and provide passwords for accounts at the application . In response to the receipt of a password request for an account at the client device the password generator generates a tokenized password for use with the account.

In an embodiment the disclosed invention is implemented on the client device as plug in software or as an installed program configured to generate tokenized passwords hereinafter password application . The password application identifies when an application or website requires a password to be entered or changed for example by detecting password tags fields in a website s program code . The password application can also include protocols allowing it to interface with the application . By interfacing with the application the password application allows the client device to retrieve password rules request password changes determine password registration success failure receive instructions or updated protocols and so forth. In an embodiment the password application can be visible on an operating system as an icon or taskbar symbol. The password application can be programmed to communicate with other programs running on the operating system that accesses user accounts. In another embodiment the password application can be installed as a plug in on other software such as Internet browsing clients. When the browsing client accesses a site that allows users to access user accounts the plug in can automatically recognize the website and provide the appropriate interface and user choices.

To generate a tokenized password the password generator prompts the user to provide information as a password seed that will be used to generate a tokenized password. The password generator can prompt a user to provide various information associated with the account. Alternatively the password generator can automatically obtain the password seed from some aspects of the state of the client device which aspects are invariant over the time period for which the generated password is expected or required to be valid. Upon receiving a password seed associated with the account the password generator requests one or more token tables associated with the account from the token server . In one embodiment the password generator requests token tables based on the received password seed. In an embodiment the token server can retrieve specific token tables that will generate tokenized passwords that satisfy the password rules. In another embodiment the token server can retrieve token tables based on the level of security needed by the application . The password generator generates a tokenized password by tokenizing the password seed associated with the account with the one or more token tables associated with the account. The password seed is not stored on the client device.

The received password seed associated with a requested account can be tokenized in whole or in part and various portions of the password seed can be tokenized using different token tables. In addition one portion of the received password seed can be used to modify or encrypt another portion of the password seed before or after tokenization. For instance the password generator can use the first half of an inputted key phrase as a seed for selecting a specific set of token tables to use in tokenizing the second half of the inputted key phrase to generate the tokenized password. Likewise a portion of the password seed can be used as an IV or as an encryption key to modify a second portion of the password seed before tokenization. For example a user can input a key phrase thefirstlawofrobotics and the password generator can use the last two characters cs as an initialization vector that modifies the rest of the phrase before tokenization. In some embodiments the password generator can use chained tokenization to generate a tokenized password. For example the password generator can use the password seed to generate an intermediate tokenized password with a first set of token tables and can generate a final tokenized password by tokenizing the intermediate tokenized password with a second set of token tables.

In an embodiment where the application includes an API that allows the application and the client device to communicate with each other the password generator can retrieve a set of password rules associated with the requested account and with the application from the password rules database . For example the retrieved password rules can require passwords for the requested account have a combination of lower case letters upper case letters numbers and symbols. The password rules can be transmitted to the password rules database when the user first uses the client device to access the application and the rules can be updated each time the user subsequently accesses the application . In embodiments where the application does not include an API the client device may prompt the user to input the set of password rules for the application . The token server retrieves token tables that map input values to tokens that each individually satisfy the password rules. In instances where the password rules are not known token server can retrieve token tables associated with a requested level of complexity. For example a low level complexity password can include all lowercase letters while a high level complexity password can include letters numbers and symbols.

In an example embodiment in which password rules are not known to the password generator the token server can retrieve a low complexity level token table and the password generator can generated a tokenized password using the low complexity level token table. The tokenized password generated from the low complexity level token tables can be provided to the application and if the application rejects the password for not satisfying the application s password rules the token server can retrieve a higher complexity level token table and the password generator can generate a new tokenized password based on the retrieved higher complexity level token table. This cycle can be repeated with iteratively higher complexity level token tables until a tokenized password is generated that is accepted by the application .

The password generator can be configured so that upon generating a tokenized password that satisfies retrieved password rules the password generator automatically transmits the tokenized password to an application for registering with a user s account without further user actions. For example a client side browser plug in can monitor and identify which applications the user is currently accessing. When the plug in detects that the current application that requires a password the plug in can automatically notify the password generator to prompt the user for the password seed. However some applications may not have an API to receive such automated communication from the password generator or the password generator may not be configured to automatically transmit the tokenized password. In such instances the password generator can display the tokenized password to the user and the user can manually input the tokenized password into the application .

At a subsequent time a user will need access to the application . When the user accesses the application at this later point the application will require input of the user s password. The password generator in response to receiving a request to access the account from the user can prompt a user to provide the password seed used to generate a tokenized password for the account and the user can provide the requested information. The password generator then accesses the one or more token tables associated with the application and used to generate the tokenized password for the account and tokenizes the password seed using the accessed token tables to generate the tokenized password. The tokenized password is then provided to the application and the user is granted access to the account.

Unlike a general password manager the tokenized passwords used for a user s various accounts are not stored locally on the client device but instead are re generated each time the user wishes to access an account. This process of re generating the tokenized password eliminates the potential security vulnerability presented by the storage of passwords in a password manager cookies or other repository on the client device. As long as the token tables used to initially generate a tokenized password remain accessible to the client device the password seed used to generate tokenized passwords will result in the generation of the same tokenized password each time the same password seed is tokenized using the token tables. In the event that the client device loses access to the token tables the client device can request the token tables from the security system .

In an example embodiment a user signs up for an online banking account with the website www.bankaccount.com . During the process of signing up for the account the user is asked to enter a password to register with the account. The website uses the following password rules 

In an embodiment where an API provides an interface between the client device and the website the client device can directly retrieve these password rules from the website. Otherwise the user can manually input the password rules into the password application through a user interface. The client device then prompts the user to provide information as the password seed. The user provides a phrase e.g. bank account to the client device . The client device can retrieve one or more token tables based on the retrieved password rules and can query the token tables with the string bank account producing the tokenized string ajkT13jhDLAv . The generated string ajkT13jhDLAv satisfies the website s password rules and is either transmitted automatically to the website for associating with the user s new account or displayed to the user for manual entry into the website.

On subsequent visits to the same website the user is prompted by the client device to re enter the same phrase as when the tokenized password was registered bank account . The client device also retrieves the same token tables that were used initially during the earlier registration process. Using the same phrase and the same token tables client device is able to generate the same tokenized password ajkT13jhDLAv . The user is then able to use the tokenized password to log onto an account on the bank website. Alternatively the client device can automatically transmit the tokenized password directly to the bank website during the password registration or account access period thus reducing the inputs required from the user .

In another example embodiment a user attempts to change the password Ush411N0tp455 on a different bank website that does not make password rules publically available. When the client device prompts the user for a password seed the user can associate the phrase lots of money with the user account at the bank website. Since the client device does not have the set of password rules from the website the client device can retrieve low complexity level token tables for generating a tokenized password. The client device uses this user s phrase to generate SlfswFkLvm . The bank website can reject this tokenized password because it does not satisfy its unstated password rules which can be inferred to require at least one digit. In response the client device can retrieve higher complexity level token tables that generate token digits and re generate a tokenized password based on the original input phrase. Using the newly retrieved token tables and the original phrase the client device can generate the tokenized password K1d5reXp3n51V3 which the bank website accepts as a valid password confirming the requirement of at least one digit. The new tokenized password can then be successfully registered with the bank website. Furthermore the client device associates the higher complexity level token table with the bank website. During subsequent visits to the bank website the user can enter the same phrase lots of money and the client device retrieves the same higher complexity level token table as during the previous visit in order for the client device to re generate K1d5reXp3n51V3 which is then transmitted to the bank website for account access.

The client device can retrieve one or more token tables based on the retrieved password rules. A token tables database can contain several different token tables and the token server can use the retrieved password rules to retrieve token tables that map input values to tokens that satisfy the password rules. Thus the password generator can generate tokenized passwords by tokenizing the password seed using the retrieved token tables that satisfy the application s password rules. The client device then generates a tokenized password by querying the token tables with all or part of the password seed before transmitting the tokenized password to the application .

In one embodiment the password rules associated with an application are not public. In such instances the client device can retrieve low complexity token tables and generate a tokenized password using these token tables. After the tokenized passwords have been generated the client device can attempt to register the tokenized password with the application . If the application rejects the tokenized password as failing to satisfy the password rules of the application the client device can retrieve higher complexity token tables and re generate a new tokenized password. This process can continue until a tokenized password is generated that satisfies the application s password rules.

The present invention has been described in particular detail with respect to one possible embodiment. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. First the particular naming of the components and variables capitalization of terms the attributes data structures or any other programming or structural aspect is not mandatory or significant and the mechanisms that implement the invention or its features may have different names formats or protocols. Also the particular division of functionality between the various system components described herein is merely exemplary and not mandatory functions performed by a single system component may instead be performed by multiple components and functions performed by multiple components may instead performed by a single component.

It should be noted that various functionalities described herein may be combined in ways not explicitly described. For instance data can be tokenized to include one or more use rules such that the resulting tokenized data fails a validation test and is verifiable. Thus while self aware tokenization and verifiable tokenization are described separately aspects of each may be performed in concert and the resulting tokenized data can be both self aware tokenized data and verifiable tokenized data.

Some portions of above description present the features of the present invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. These operations while described functionally or logically are understood to be implemented by computer programs. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules or by functional names without loss of generality.

Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as determine refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system memories or registers or other such information storage transmission or display devices.

Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software firmware or hardware and when embodied in software could be downloaded to reside on and be operated from different platforms used by real time network operating systems.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored on a non transitory computer readable medium that can be accessed by the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of computer readable storage medium suitable for storing electronic instructions and each coupled to a computer system bus. Furthermore the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

The algorithms and operations presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may also be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will be apparent to those of skill in the art along with equivalent variations. In addition the present invention is not described with reference to any particular programming language. It is appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references to specific languages are provided for invention of enablement and best mode of the present invention.

The present invention is well suited to a wide variety of computer network systems over numerous topologies. Within this field the configuration and management of large networks comprise storage devices and computers that are communicatively coupled to dissimilar computers and storage devices over a network such as the Internet.

Finally it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

