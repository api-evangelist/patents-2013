---

title: Computer implemented methods and apparatus for managing permission sets and validating user assignments
abstract: Disclosed are methods, apparatus, systems, and computer-readable storage media for modifying permission sets and validating permission set assignments to users. In some implementations, a computing device receives a request to create a permission set containing one or more permissions and assign the permission set to a first user. The first user is associated with a first user constraint that defines a first group of permissions available to the first user. The computing device may determine that the permission set to be assigned to the first user does not violate the first user constraint, and may assign the permission set to the first user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09628493&OS=09628493&RS=09628493
owner: salesforce.com, inc.
number: 09628493
owner_city: San Francisco
owner_country: US
publication_date: 20130703
---
This application claims priority to U.S. Provisional Patent Application No. 61 667 508 filed on Jul. 3 2012 entitled SYSTEMS AND METHODS FOR CONSTRAINING PERMISSION COLLECTIONS AND VALIDATING USER ASSIGNMENTS by Bitting et al. which is incorporated herein by reference in its entirety and for all purposes.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

This patent document relates generally to permissions and more specifically assigning permission allowing access to components of a system to users of cloud computing services.

 Cloud computing services provide shared resources software and information to computers and other devices upon request. In cloud computing environments software can be accessible over the Internet rather than installed locally on in house computer systems. Cloud computing typically involves over the Internet provision of dynamically scalable and often virtualized resources. Technological details can be abstracted from the users who no longer have need for expertise in or control over the technology infrastructure in the cloud that supports them.

Permissions to access services and systems can be manually provided in a cloud computing context. However using conventional techniques it is difficult to efficiently manage and assign permissions to a large amount of users. For example different users may require different types and or levels of permissions to various resources.

Examples of systems apparatus and methods according to the disclosed implementations are described in this section. These examples are being provided solely to add context and aid in the understanding of the disclosed implementations. It will thus be apparent to one skilled in the art that implementations may be practiced without some or all of these specific details. In other instances certain process method operations also referred to herein as blocks have not been described in detail in order to avoid unnecessarily obscuring implementations. Other applications are possible such that the following examples should not be taken as definitive or limiting either in scope or setting.

In the following detailed description references are made to the accompanying drawings which form a part of the description and in which are shown by way of illustration specific implementations. Although these implementations are described in sufficient detail to enable one skilled in the art to practice the disclosed implementations it is understood that these examples are not limiting such that other implementations may be used and changes may be made without departing from their spirit and scope. For example the blocks of methods shown and described herein are not necessarily performed in the order indicated. It should also be understood that the methods may include more or fewer blocks than are indicated. In some implementations blocks described herein as separate blocks may be combined. Conversely what may be described herein as a single block may be implemented in multiple blocks.

Various implementations described or referenced herein are directed to different systems apparatus methods and computer readable storage media for providing permissions that give access to computing resources such as data objects components and other entities of a system. In some examples permissions can be managed and assigned via permission sets. Multiple permission sets may be assigned to a user of a system in order to grant access to a variety of resources. In some implementations a permission set is structured as a container of permissions. The permission set can be assigned directly to a user with the permissions layered to provide one or more rights needed to access computing resources in an on demand database service environment including but not exclusive of objects fields pages programmatic functions identity service providers and general functions.

For instance users and permission sets may be assigned to each other based upon criteria. The assignments of users and permission sets may be stored in one or more databases of an on demand database service environment. Thus users may receive permission to access certain resources. A permission server in an on demand database service environment can store criteria data regarding the types of users and permission sets to assign to each other. For example a computing device can provide to the server data indicating an attribute of a user e.g. geographic location industry role level of experience etc. and particular permissions to be assigned to the users fitting the attributes. Permission sets meeting the criteria may be selected and assigned to the users. Moreover permissions may appear in multiple permission sets. In this way the users can gain access to the components of a system.

In some an on demand database service environments an Application Programming Interface API is configured to expose a collection of permissions and their assignments to users through appropriate network based services and architectures for instance using Simple Object Access Protocol SOAP Web Service and Representational State Transfer REST APIs.

Some implementations of the disclosed techniques can allow developers to create advanced administrative tooling to reduce administrative time managing a user s rights enable advanced reporting of a user s permissions through their permission set assignments and allow developers to integrate master entitlement systems like Active Directory or Lightweight Directory Access Protocol LDAP services in an on demand database service environment for the purpose of synchronizing a user s rights across multiple services and applications.

In some implementations a permission set may be presented to an administrator as a container of permissions. However each permission can reside in a separate API object exposed in a shared API that has a child parent relationship with the same permission set object. This allows a given permission set to scale to millions of permissions for a user while allowing a developer to take advantage of joins across the API objects to query insert update and delete any permission across the millions of possible choices. This makes the API highly scalable reliable and efficient for developers to use.

In some implementations a permission set API constructed using the techniques disclosed herein can provide scalable reliable and efficient mechanisms for a developer to create tools that manage a user s permissions across various sets of access controls and across types of users. Administrators who use this tooling can effectively reduce their time managing a user s rights integrate with external systems and report on rights for auditing and troubleshooting purposes.

Permission sets have licensing implications because the specific permissions granted to a user may be limited by the user s license. For example an employee s user license may not permit the employee to access manager data objects. Consequently the employee user should not be assigned a permission set that includes permission to access manager data objects. One way to ensure that permission sets are not assigned to users in a way that violates their user licenses is to associate every permission set that is created with a user license and to validate upon creation of the permission set that none of the permissions in the permission set violate the user license associated with the permission set. However in situations where an administrator wishes to grant a single permission to multiple users with different user licenses this system may require an administrator to create multiple permission sets having the same single permission in order to grant that permission to multiple users with different user licenses. As an example if there are five different user license types and an administrator wishes to assign an API Enabled permission to all users the administrator would need to create five permission sets each containing only the API Enabled permission and each corresponding with one of the five different user licenses. The implementations described herein reduce this administrative overhead by creating only one API Enabled permission set which may be assigned to users having different user license type.

As another example an independent software vendor wishes to publish a custom application consisting of custom objects fields classes and pages to be accessed by all users of an organization in a multitenant database environment. The vendor may wish to create permission sets that grant access to the custom objects fields classes and pages of the custom application to all users. The implementations described herein allow the vendor to create a single permission set that may be assigned to any license type to grant access to the vendor s application making it easier for independent software vendors to install permissions with their custom applications rather than creating one permission set for each license that may be available in an organization.

In some implementations described herein a permission set may be created by an administrator without being associated with a user license. Validation of the permission set may not occur until the permission set is assigned to a user at which point the server identifies the user license associated with the user and determines whether the permission set being assigned to the user violates the user license associated with the user. For example a single API Enabled permission set may be created. This permission set may then be assigned to users of all license types because all of the license types allow the API Enabled permission to be assigned to the users. This obviates the need to create an API Enabled permission set for each user license type.

In some implementations when a permission set is modified to include additional permissions the modification may be validated by the server because the additional permissions may violate a user license of a user to whom the permission set is assigned. When the server receives a request to add one or more permissions to a permission set the server identifies the users to whom the permission set is currently assigned identifies the user licenses associated with those users and then determines whether the additional permissions will violate any of the user licenses.

In addition to user licenses other constraints may be implemented to determine what permissions a user may possess. User constraints may take the form of any logical grouping of metadata that has access controls. For example other user constraint forms may include an online community an application a line of business or an independent software vendor application. Having these flexible user constraints allows an administrator of a system to grant access to various system resources based on the needs of the business.

These and other implementations may be embodied in various types of hardware software firmware and combinations thereof. For example some techniques disclosed herein may be implemented at least in part by computer readable media that include program instructions state information etc. for performing various services and operations described herein. Examples of program instructions include both machine code such as produced by a compiler and files containing higher level code that may be executed by a computing device such as a server or other data processing apparatus using an interpreter. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media and hardware devices that are specially configured to store program instructions such as read only memory ROM devices and random access memory RAM devices. These and other features of the disclosed implementations will be described in more detail below with reference to the associated drawings.

Environment is an environment in which an on demand database service exists. User system may be implemented as any computing device s or other data processing apparatus such as a machine or system that is used by a user to access a database system . For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of such computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is implemented in the example of as database system .

An on demand database service implemented using system by way of example is a service that is made available to outside users who do not need to necessarily be concerned with building and or maintaining the database system. Instead the database system may be available for their use when the users need the database system i.e. on the demand of the users. Some on demand database services may store information from one or more tenants into tables of a common database image to form a multi tenant database system MTS . A database image may include one or more database objects. A relational database management system RDBMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In some implementations application platform enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level also called authorization.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. Network can include a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I. The Internet will be used in many of the examples herein. However it should be understood that the networks that the present implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP signals to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the network interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least for users accessing system each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one implementation system shown in implements a web based customer relationship management CRM system. For example in one implementation system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms web pages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object in tenant data storage however tenant data typically is arranged in the storage medium s of tenant data storage so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain implementations system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA tablet smartphone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. The term computing device is also referred to herein simply as a computer . User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user input devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. of the computing device in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above implementations are suitable for use with the Internet although other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one implementation each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of its components might be operator configurable using application s including computer code to run using processor system which may be implemented to include a central processing unit which may include an Intel Pentium processor or the like and or multiple processor units. Non transitory computer readable media can have instructions stored thereon in that can be executed by or used to program a computing device to perform any of the methods of the implementations described herein. Computer program code implementing instructions for operating and configuring system to intercommunicate and to process web pages applications and other data and media content as described herein is preferably downloadable and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any other type of computer readable medium or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for the disclosed implementations can be realized in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to some implementations each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to refer to a computing device or system including processing hardware and process space s an associated storage medium such as a memory device or database and in some instances a database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database objects described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to communicate with tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage spaces which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage space user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage space . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language implementations is discussed in commonly assigned U.S. Pat. No. 7 730 478 titled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE by Craig Weissman issued on Jun. 1 2010 and hereby incorporated by reference in its entirety and for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain implementations each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one implementation therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one implementation the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain implementations three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner by way of example system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain implementations user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may involve sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to some implementations. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for case account contact lead and opportunity data objects each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. Commonly assigned U.S. Pat. No. 7 779 039 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. issued on Aug. 17 2010 and hereby incorporated by reference in its entirety and for all purposes teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain implementations for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

As shown in accessing an on demand database service environment may involve communications transmitted among a variety of different hardware and or software components. Further the on demand database service environment is a simplified representation of an actual on demand database service environment. For example while only one or two devices of each type are shown in some implementations of an on demand database service environment may include anywhere from one to many devices of each type. Also the on demand database service environment need not include each device shown in or may include additional devices not shown in .

Moreover one or more of the devices in the on demand database service environment may be implemented on the same physical device or on different hardware. Some devices may be implemented using hardware or a combination of hardware and software. Thus terms such as data processing apparatus machine server and device as used herein are not limited to a single hardware device but rather include any hardware and software configured to provide the described functionality.

The cloud is intended to refer to a data network or plurality of data networks often including the Internet. Client machines located in the cloud may communicate with the on demand database service environment to access services provided by the on demand database service environment. For example client machines may access the on demand database service environment to retrieve store edit and or process information.

In some implementations the edge routers and route packets between the cloud and other components of the on demand database service environment . The edge routers and may employ the Border Gateway Protocol BGP . The BGP is the core routing protocol of the Internet. The edge routers and may maintain a table of IP networks or prefixes which designate network reachability among autonomous systems on the Internet.

In one or more implementations the firewall may protect the inner components of the on demand database service environment from Internet traffic. The firewall may block permit or deny access to the inner components of the on demand database service environment based upon a set of rules and other criteria. The firewall may act as one or more of a packet filter an application gateway a stateful filter a proxy server or any other type of firewall.

In some implementations the core switches and are high capacity switches that transfer packets within the on demand database service environment . The core switches and may be configured as network bridges that quickly route data between different components within the on demand database service environment. In some implementations the use of two or more core switches and may provide redundancy and or reduced latency.

In some implementations the pods and may perform the core data processing and service functions provided by the on demand database service environment. Each pod may include various types of hardware and or software computing resources. An example of the pod architecture is discussed in greater detail with reference to .

In some implementations communication between the pods and may be conducted via the pod switches and . The pod switches and may facilitate communication between the pods and and client machines located in the cloud for example via core switches and . Also the pod switches and may facilitate communication between the pods and and the database storage .

In some implementations the load balancer may distribute workload between the pods and . Balancing the on demand service requests between the pods may assist in improving the use of resources increasing throughput reducing response times and or reducing overhead. The load balancer may include multilayer switches to analyze and forward traffic.

In some implementations access to the database storage may be guarded by a database firewall . The database firewall may act as a computer application firewall operating at the database application layer of a protocol stack. The database firewall may protect the database storage from application attacks such as structure query language SQL injection database rootkits and unauthorized information disclosure.

In some implementations the database firewall may include a host using one or more forms of reverse proxy services to proxy traffic before passing it to a gateway router. The database firewall may inspect the contents of database traffic and block certain content or database requests. The database firewall may work on the SQL application level atop the TCP IP stack managing applications connection to the database or SQL management interfaces as well as intercepting and enforcing packets traveling to or from a database network or application interface.

In some implementations communication with the database storage may be conducted via the database switch . The multi tenant database storage may include more than one hardware and or software components for handling database queries. Accordingly the database switch may direct database queries transmitted by other components of the on demand database service environment e.g. the pods and to the correct components within the database storage .

In some implementations the database storage is an on demand database system shared by many different organizations. The on demand database system may employ a multi tenant approach a virtualized approach or any other type of database approach. An on demand database system is discussed in greater detail with reference to .

In some implementations the app servers may include a hardware and or software framework dedicated to the execution of procedures e.g. programs routines scripts for supporting the construction of applications provided by the on demand database service environment via the pod . In some implementations the hardware and or software framework of an app server is configured to execute operations of the services described herein including performance of the blocks of methods described with reference to . In alternative implementations two or more app servers may be included and cooperate to perform such methods or one or more other servers described herein can be configured to perform the disclosed methods.

The content batch servers may handle requests internal to the pod. These requests may be long running and or not tied to a particular customer. For example the content batch servers may handle requests related to log mining cleanup work and maintenance tasks.

The content search servers may provide query and indexer functions. For example the functions provided by the content search servers may allow users to search through content stored in the on demand database service environment.

The file force servers may manage requests for information stored in the Fileforce storage . The Fileforce storage may store information such as documents images and basic large objects BLOBs . By managing requests for information using the file force servers the image footprint on the database may be reduced.

The query servers may be used to retrieve information from one or more file systems. For example the query system may receive requests for information from the app servers and then transmit information queries to the NFS located outside the pod.

The pod may share a database instance configured as a multi tenant environment in which different organizations share access to the same database. Additionally services rendered by the pod may call upon various hardware and or software resources. In some implementations the ACS servers may control access to data hardware resources or software resources.

In some implementations the batch servers may process batch jobs which are used to run tasks at specified times. Thus the batch servers may transmit instructions to other servers such as the app servers to trigger the batch jobs.

In some implementations the QFS may be an open source file system available from Sun Microsystems of Santa Clara Calif. The QFS may serve as a rapid access file system for storing and accessing information available within the pod . The QFS may support some volume management capabilities allowing many disks to be grouped together into a file system. File system metadata can be kept on a separate set of disks which may be useful for streaming applications where long disk seeks cannot be tolerated. Thus the QFS system may communicate with one or more content search servers and or indexers to identify retrieve move and or update data stored in the network file systems and or other storage systems.

In some implementations one or more query servers may communicate with the NFS to retrieve and or update information stored outside of the pod . The NFS may allow servers located in the pod to access information to access files over a network in a manner similar to how local storage is accessed.

In some implementations queries from the query servers may be transmitted to the NFS via the load balancer which may distribute resource requests over various resources available in the on demand database service environment. The NFS may also communicate with the QFS to update the information stored on the NFS and or to provide information to the QFS for use by servers located within the pod .

In some implementations the pod may include one or more database instances . The database instance may transmit information to the QFS . When information is transmitted to the QFS it may be available for use by servers within the pod without using an additional database call.

In some implementations database information may be transmitted to the indexer . Indexer may provide an index of information available in the database and or QFS . The index information may be provided to file force servers and or the QFS .

As multiple users might be able to change the data of a record it can be useful for certain users to be notified when a record is updated. Also even if a user does not have authority to change a record the user still might want to know when there is an update to the record. For example a vendor may negotiate a new price with a salesperson of company X where the salesperson is a user associated with tenant Y. As part of creating a new invoice or for accounting purposes the salesperson can change the price saved in the database. It may be important for co workers to know that the price has changed. The salesperson could send an email to certain people but this is onerous and the salesperson might not email all of the people who need to know or want to know. Accordingly some implementations of the disclosed techniques can inform others e.g. co workers who want to know about an update to a record automatically.

The tracking and reporting of updates to a record stored in a database system can be facilitated with a multi tenant database system e.g. by one or more processors configured to receive or retrieve information process the information store results and transmit the results. In other implementations the tracking and reporting of updates to a record may be implemented at least partially with a single tenant database system.

The various components are able to communicate with each other over the Internet or a combination of networks including the Internet. For example in some implementations user system may communicate with permission server . Permission server may further communicate with permission database . Accordingly permission server may process data received from user system and access analyze and or modify data stored in permission database . Permission server may also transmit data from permission database to user system .

For example permission server may receive data regarding criteria such as a geographic location a level with an organizational hierarchy title an industry a role and or a permission. In some implementations permission server may query permission database to select a permission set associated with the criteria received from user system . Permission server may also identify users associated with the criteria. Accordingly permission server may assign the selected permission set to the identified users. As such the users who have been assigned the permission set may obtain access rights to one or more components of a system whose access permissions may be managed by architectural components of . In some implementations permission server may receive the criteria via an application programming interface API .

Profiles and may be assigned to a variety of users and . For example profile may be a profile indicating a non management employee within an organization and therefore includes permissions and to provide employees assigned to profile with a level of access to components of a system. Components of a system may include databases records fields of records customer relationship management CRM tools objects software etc. For example permission may provide read access to a field of a database table. Permission may provide access to a certain software program. Permission may provide write capability to a particular field of a database table. Finally permission may provide access to a particular object. In some implementations permissions may include create read update and or delete CRUD options. For example a permission may only include a level of access associated with reading for example a field of a record. Another permission may include a level of access associated with reading and updating a field of a record.

Accordingly users and may be assigned profile and receive permissions and . However if user is promoted to a management position a system administrator may need to assign a new permission to user . For example permission may provide view all data access for a database. Accordingly the system administrator may need to modify profile to include permission . However by modifying permission with another permission user will also get permission . Therefore the system administrator may create profile a new type of profile for management employees which includes the same permissions as profile for non management employees i.e. permissions and but also includes permission . User s profile may then be assigned to profile .

Additionally the system administrator may wish to receive all permissions for the components of the system. As such the system administrator may create a third profile profile which includes all permissions .

However across an organization different users needing different levels of access to different components of the system may create an unwieldy amount of user profiles for system administrators. A user needing an extra access control such as management employee user needing access to permission i.e. view all data requires creating a new profile i.e. profile and subsequently removing the association between the old profile i.e. profile and user and assigning the new profile even though profile only includes one extra permission than profile . As such the administrative work load for the system administrator may increase with a cumbersome assignment and multitude of profiles.

Permission sets and may also be assigned to a variety of users and . The permission sets may provide a more modular form of groupings of permissions than profiles. As such a single user may be assigned multiple permission sets tailored to their particular access needs. For example permission set is assigned to users and . Permission set may be assigned to user . Permission set may be assigned to user .

In some implementations users may be assigned both profiles and permission sets. Some permissions may be associated with a profile assigned to a user and some permissions may be associated with permission sets. In an implementation some permissions may be allowed on both profiles and permission sets. Accordingly some permissions may be enabled on a user s profile and or assigned permission sets. Alternatively some permissions may only be assigned to a user s profile rather than through a permission set and vice versa. For example as in profiles may be associated with non management employees management employees and system administrators. The profiles for the non management and management employees may include a minimum or base amount of permissions. However the employees may also be assigned permission sets based on the characteristics or attributes of the employees as discussed below. As such permission sets may add additional permissions beyond those found in a profile for a user.

In some implementations the grouping of permissions into permission sets may be associated with criteria. Criteria may include a geographic location a level within an organizational hierarchy e.g. engineer senior engineer staff engineer etc. manager senior manager director etc. an industry a role level of experience or seniority and other characteristics of users. For example permission set may be associated with engineers. Permissions within permission set i.e. permissions and may provide a level of access to components needed for engineers. Accordingly users and may be assigned permission set because the users are engineers.

Permission set may be associated with a geographic location such as a continent region state city etc. For example permission set may be associated with California. As such permission set may include permissions allowing a level of access needed for employees within California e.g. permission to edit data associated with business activity in California . In user is the only user assigned to permission set because user may be the only user within California and therefore the only user provided access to permission .

Permission set may be associated with an industry such as aerospace. Accordingly permission set may be assigned to user because user may be an aerospace engineer and therefore needs the permissions associated with aerospace i.e. permission set and engineer i.e. permission set .

Additionally an assignment of a permission set may be removed or revoked from a user. For example as discussed above user may be assigned permission sets i.e. a permission set associated with engineers and i.e. a permission set associated with California . If user transfers from California to Alabama a system administrator may desire to revoke the assignment of permission set to user .

In some implementations revoking a permission set may not result in the revocation of a particular permission that exists in multiple permission sets. For example in permission is associated with permission sets and . If permission set is revoked but permission set is maintained i.e. not revoked user may still retain permission because permission set is still assigned and includes permission . Therefore revoking permission set may not necessarily affect the assignment of permission to user due to the assignment of permission set .

Profile entity may be associated with a user license entity . User license entity may be associated with one or more profile entities. In some implementations user license entity may include an identifier. Moreover user license entity may be associated with one or more permission set entities . Profile entity may also be associated with a permission set entity .

User entity may be associated with zero or more permission set assignment entities . In permission set assignment entity includes an identifier an assignee or user identifier and a permission set identifier. Accordingly a permission set assignment object may include a user s identifier and an identifier associated with a permission set. In some implementations every assignment of permission sets to a user may include a permission set assignment object.

Permission set entity includes an identifier a permission set assignment identifier for an object of the permission set assignment entity a profile identifier and the permissions within the permission set. Each permission set entity may be associated with zero or more types of permissions. For example in the entity relationship diagram of permission set entity may be associated with zero or more object permissions entity field permissions entity and setup entity access entity .

In some implementations object permissions entity may determine a permission set s CRUD i.e. create read update and delete permissions. Field permissions entity may determine a permission set s field level security permissions. Setup entity access may determine a permission set s access to pages e.g. apex pages classes and services. Accordingly permissions may include a variety of entities used by a system such as objects fields applications or system wide permissions.

In at block a server performing method receives a request to create a permission set. The request includes one or more permissions that are to be included in the permission set. The one or more permissions may be stored in a permission database that the server has access to. In some implementations the request may come from an administrator user at a computing device.

In at block the server performing method creates the permission set. In some implementations one or more records may be stored in the permission database indicating the creation of the permission set with the one or more permissions of the request.

In some implementations the permission set is associated with a permission set constraint and the permission set constraint defines a superset of permissions that may be included in any permission sets associated with the permission set constraint.

As an example shows a graphical representation of a permission set and a permission set constraint in accordance with some implementations. In a permission set is defined as the group of permissions and . In some implementations a permission set is a group of permissions that may be assigned to one or more users granting them the permissions of the permission set. The permission set constraint defines a superset of permissions that may be included in a permission set associated with the permission set constraint. For example the permission set constraint for the permission sets of an organization may be the set of all permissions that the organization is permitted to assign to its users. In some implementations the permissions included in a permission set must all be included in the permission constraint as well for the permission set to be valid.

In some implementations the permission set constraint may define the superset of permissions as all of the permissions that are available to a tenant organization in a multi tenant environment. For example Acme Corp. may be a tenant organization using the permission server to manage the permissions available to various Acme Corp. employees and customers using the multi tenant environment. The permission set constraint for Acme Corp. could be all of the permissions related to Acme Corp. users and records such that a permission set that is assigned to an Acme Corp. user may only include permissions related to Acme Corp. users and records.

In at block the server performing method receives a request to assign the permission set to a first user. The first user is associated with a first user constraint. The first user constraint defines a first group of permissions that is available to the first user.

In some implementations the permission set is not associated with the first user constraint when the permission set is created by the server. Rather the permission set is associated with the first user constraint when the permission set is assigned to the first user.

In some implementations the first group of permissions defined by the first user constraint includes one or more permissions associated with one or more of an online social network an application a line of business a software vendor package and a logical grouping of metadata having access controls. For example the first user constraint may define a group of permissions that are related to an application provided by a software vendor. The software vendor s application may include records users and other data requiring access controls. The software vendor package may further define permission sets to be assigned to users having different roles in the software vendor s application. For example the software vendor s application may be a paid time off PTO time manager where employees may enter the time that they are taking off from work where managers may view the time that their employees are taking off from work and where administrators may view or edit the entries. The software vendor package may include separate prepackaged permission sets for employees managers and administrators and the permission sets may be assigned to users of the multitenant environment in which the software vendor s application has been installed. Because the permission sets do not have to be associated with a user constraint when the permission sets are created an independent software vendor has the flexibility to define and package permission sets for its applications without having to worry about user constraints that are enforced in the multitenant environment in which the application will be installed.

The first permission set API Enabled for ALL Users however is not associated with any user constraint. Consequently this permission set may replace the other five redundant permission sets because it may be assigned to any user with any user license subject to the validation procedure that occurs upon assignment of the permission set to a user.

In some implementations the user constraint may be associated with the user when the user is created. Moreover the user may only be allowed to be associated with a single user constraint. In another implementation the user may have no user constraint associated with it but the user also may not have any permissions assigned to him until a user constraint is associated with him. In other implementations the user constraint may be associated with the user after the user is created and an administrator may change the user constraint that is associated with the user. As an example an administrator may downgrade a user s user license from one that grants him all permissions to a user license that grants the user only a subset of all available permissions. Similarly an administrator may upgrade a user s user license to give the user a larger set of permissions that may be assigned to him.

In at block the server performing method determines that the permission set to be assigned to the first user does not violate the first user constraint associated with the first user. In some implementations the server determines whether the permission assignment violates the user constraint by determining whether all of the permissions of the permission set exist in the first group of permissions defined by the first user constraint.

In some implementations the permission set may be associated with a user constraint such as a user license before it is assigned to a user . In these implementations the permissions server of may validate the permission set when the permission set is created obviating the need to validate the permission set when it is assigned to a user having the user license.

In another implementation the permission set may be defined independent of a user license prior to assigning the permission set to a user. In these implementations when the permission set is assigned to a user who is associated with a user license the permission server may then validate that assignment by determining if the permissions of the permission set are all contained within the user constraint.

In some implementations the server may determine that the permission set to be assigned to the first user does violate the first user constraint associated with the first user.

As an example shows a graphical representation of an invalid permission assignment to a user via a permission set in accordance with some implementations. In a permission set is assigned to a user and the user is associated with a user constraint . In some implementations the user constraint is a user license defining what permissions a user having the user license may have. In the permission set has been defined to include permissions and . When an administrator of the server attempts to assign the permission set to the user the permission server identifies the user constraint associated with the user and determines whether the assignment of the permission set to user violates the user constraint . In this implementation the permission set includes permissions permissions and that are not included in the user license . Consequently the permission server may determine that assigning the permission set to user would violate the user license .

In another implementation the permission server may require that a permission set be associated with a user license when the permission set is created. In this implementation the validation of the permission set could occur when the permission set is created and associated with the user license .

In at block the server performing method assigns the permission set to the first user. In some implementations a record is created in the permission database indicating that the permission set has been assigned to the first user.

In at block the server performing method receives a request to modify the permission set by adding one or more permissions to the permission set.

In some implementations an administrator may wish to add more permissions to an existing permission set. For example as described in API Enabled for ALL Users is a permission set that is already assigned to multiple users associated with different user licenses and the permission set initially includes only the permission API Enabled granting users access to any Salesforce.com API. In the administrator attempts to add the permission Customize Application to the permission set allowing users to customize the organization using App Setup menu options. When the administrator selects Customize Application and clicks Save the request is submitted to the server to modify the permission set to include the new permission.

As an example shows a graphical representation of modification of a permission set assigned to a user in accordance with some implementations. In the requested permission set is the modification of the initial permission set of .

In other implementations the modification to the permission set may be to remove one or more permissions from the permission set. In these implementations the server does not need to validate the request and the permission set may be modified as requested without validation.

In at block the server performing method determines that the permission set is not assigned to any users. In some implementations the server may determine this by accessing the permission database and determining that no database record exists in the permission database associating the permission set with a user. Consequently there is no group of permissions that the permissions of the permission set need to be a part of in order to be valid.

In at block the server performing method modifies the permission set to include the one or more permissions to be added. In some implementations the permission server updates the permission database by creating records associating the permission set with each of the one or more permissions to be added.

In at block the server performing method identifies one or more users to whom the permission set is assigned.

Returning to the example of the server may identify user as a user to whom the permission set is assigned. This information may be stored in the permission database of the permission server . In some implementations the permission set may be assigned to more than one user and the server may identify each of those users to whom the permission set has been assigned. In the example of the permission set is assigned to only one user user . In some implementations the user may have more than one permission set assigned to him.

In at block the server performing method identifies one or more user constraints associated with the one or more users. In some implementations the user constraint may be the user license associated with each user. As an example a user license may be a Sales Manager license. In the example of the user is associated with a user constraint which includes permissions and . In some implementations a user must be associated with a user constraint before the user may be assigned any permissions.

In at block the server performing method determines that the one or more permissions to be added are contained in each of the one or more user constraints. In the example of the permissions to be added are permissions and which are contained in the requested permission set but not in the initial permission set of . The server will determine that permissions and are included in the user constraint associated with user meaning the requested permission set does not violate the user constraint of user . In some implementations the permission server performs this determination. Once the server has validated the requested modification to the permission set it will modify the permission set as requested and update the permission set in the permission database.

In at block a server performing method receives a request to modify the permission set by adding one or more permissions to the permission set as generally described above at block of method .

Returning to the example of the user is associated with the user license which defines the permissions that the user is permitted to have. The initial permission set is initially assigned to the user .

In some implementations the request received by the server includes the initial permission set from and the one or more permissions to be added permissions and . The request may come from an administrator attempting to add permissions to a permission set. For example there may exist a Sales Manager permission set which is assigned to users in a sales manager role of an organization and which include permissions required for the sales manager users to do their jobs in the organization. The administrator may wish to expand the group of permissions given to all of the sales manager users. An expedient way to do this would be to modify the Sales Manager permission set that is already assigned to all of the sales manager users to include the additional permissions that the administrator wishes to grant to the sales manager users. The administrator may then submit a request to the server identifying the Sales Manager permission set and the additional permissions that he wishes to add to the permission set.

In at block the server performing method identifies the first user to whom the permission set is assigned. Returning to the example of the server may identify user as the first user to whom permission set is assigned.

In at block the server performing method determines that the one or more permissions to be added violate the first user constraint. In some implementations the server may determine that a permission set violates a user constraint by identifying one or more permissions in the permission set that are not contained in the group of permissions associated with the user constraint.

Returning to the example of the requested permission set includes permissions and which are not contained within the group of permissions of user constraint . Consequently the requested modification to the permission set violates the user constraint of user .

In at block the server performing method transmits data indicating a first error without modifying the permission set as requested. In some implementations the transmitted data may include a message that the permission set was not modified as requested. In other implementations the transmitted data may identify the one or more permissions of the requested modification that violated the user constraint.

Returning to in some implementations at block the server performing method may identify a second user that the permission set is also assigned to. The second user is associated with a second user license which defines a second group of permissions that are available to the second user. In some implementations the first and second user licenses may be different and they may identify different groups of permissions. In some implementations the second user license may be identified without identifying the second user. For example the permission set may be associated in a database table with one or more user licenses or constraints with which the permission set is to be validated when it is modified.

In at block the server performing method determines that the one or more permissions to be added violate the second user constraint.

In at block the server performing method transmits data indicating a second error without modifying the permission set as requested.

In some implementations when a server identifies a first user constraint that is violated by the requested modification the server may transmit the error message and stop looking for other user constraints that may be violated by the requested modification. In other implementations the server identifies all of the user constraints that are violated by the requested modification and transmits an error message for each user constraint that is violated. is an example of the latter implementation displaying error messages for all of the user licenses that are violated by the attempted modification to the permission set API Enabled for ALL Users. 

The specific details of the specific aspects of implementations disclosed herein may be combined in any suitable manner without departing from the spirit and scope of the disclosed implementations. However other implementations may be directed to specific implementations relating to each individual aspect or specific combinations of these individual aspects.

While the disclosed examples are often described herein with reference to an implementation in which an on demand database service environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present implementations are not limited to multi tenant databases nor deployment on application servers. Implementations may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the implementations claimed.

It should be understood that some of the disclosed implementations can be embodied in the form of control logic using hardware and or using computer software in a modular or integrated manner. Other ways and or methods are possible using hardware and a combination of hardware and software.

Any of the software components or functions described in this application may be implemented as software code to be executed by a processor using any suitable computer language such as for example Java C or Perl using for example conventional or object oriented techniques. The software code may be stored as a series of instructions or commands on a computer readable medium for storage and or transmission suitable media include random access memory RAM a read only memory ROM a magnetic medium such as a hard drive or a floppy disk or an optical medium such as a compact disk CD or DVD digital versatile disk flash memory and the like. The computer readable medium may be any combination of such storage or transmission devices. Computer readable media encoded with the software program code may be packaged with a compatible device or provided separately from other devices e.g. via Internet download . Any such computer readable medium may reside on or within a single computing device or an entire computer system and may be among other computer readable media within a system or network. A computer system or other computing device may include a monitor printer or other suitable display for providing any of the results mentioned herein to a user.

While various implementations have been described herein it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present application should not be limited by any of the implementations described herein but should be defined only in accordance with the following and later submitted claims and their equivalents.

