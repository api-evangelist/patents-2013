---

title: Performance-driven resource management in a distributed computer system
abstract: A system and method for managing resources in a distributed computer system that includes at least one resource pool for a set of virtual machines (VMs) utilizes a set of desired individual VM-level resource settings that corresponds to target resource allocations for observed performance of an application running in the distributed computer system. The set of desired individual VM-level resource settings are determined by constructing a model for the observed application performance as a function of current VM-level resource allocations and then inverting the function to compute the target resource allocations in order to meet at least one user-defined service level objective (SLO). The set of desired individual VM-level resource settings are used to determine final RP-level resource settings for a resource pool to which the application belongs and final VM-level resource settings for the VMs running under the resource pool, which are then selectively applied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411622&OS=09411622&RS=09411622
owner: VMware, Inc.
number: 09411622
owner_city: Palo Alto
owner_country: US
publication_date: 20130625
---
In a cloud computing environment multiple virtual datacenters VDCs can be implemented using physical devices such as host computers and storage devices which can support virtual machines VMs and applications executed by those VMs. A VDC is an example of a resource pool RP which is a logical container representing an aggregate resource allocation for a collection of VMs. A single VDC may support multiple RPs. Resource management techniques for VDCs are important to ensure that applications running on the VDCs are operating at their service level objectives SLOs . Existing resource allocation techniques offer powerful resource control primitives such as reservations limits and shares which can be set at a VM level or at an RP level including VDCs to ensure SLOs of applications running on the VDCs are being met.

These resource control primitives allow administrators to control the absolute and relative amount of resources consumed by a VM or an RP including a VDC . However determining the right settings of the resource control primitives can be extremely challenging due to various factors. As an example different VMs supporting the same application may require different amount of resources to meet the application performance targets. In addition an application running on a VDC may have time varying demands which means that resource control settings determined for one period of time may become ineffective at a later period of time. Thus setting the resource controls for multiple RPs such that applications running on the RPs get enough resources to meet their respective SLOs becomes a nearly insoluble task.

A system and method for managing resources in a distributed computer system that includes at least one resource pool for a set of virtual machines VMs utilizes a set of desired individual VM level resource settings that corresponds to target resource allocations for observed performance of an application running in the distributed computer system. The set of desired individual VM level resource settings are determined by constructing a model for the observed application performance as a function of current VM level resource allocations and then inverting the function to compute the target resource allocations in order to meet at least one user defined service level objective SLO . The set of desired individual VM level resource settings are used to determine final RP level resource settings for a resource pool to which the application belongs and final VM level resource settings for the VMs running under the resource pool which are then selectively applied.

A method for managing resources in a distributed computer system that includes at least one resource pool for a set of VMs in accordance with an embodiment of the invention comprises constructing a model for observed performance of an application running in the distributed computer system as a function of current VM level resource allocations inverting the function to compute a set of target resource allocations in order to meet at least one user defined service level objective SLO determining a set of desired individual VM level resource settings corresponding to the target resource allocations determining final RP level resource settings for a resource pool to which the application belongs and final VM level resource settings for the VMs running under the resource pool based on at least the set of desired individual VM level resource settings current RP level resource settings of the resource pool and available resource capacity of the resource pool and applying at least one of the final RP level resource settings and the final VM level resource settings to at least one of the resource pool and the VMs running under the resource pool based on at least one resource property of the resource pool. In some embodiments the steps of this method are performed when program instructions contained in a computer readable storage medium is executed by one or more processors of the host computers.

An application resource allocation module for a distributed computer system that includes at least one resource pool for a set of VMs in accordance with an embodiment of the invention comprises at least one application manager at least one resource pool manager and an actuator. The application manager includes a model builder configured to construct a model for observed performance of the application as a function of current VM level resource allocations an application controller configured to invert the function to compute a set of target resource allocations in order to meet at least one user defined service level objective SLO and a resource controller configured to determine a set of desired individual VM level resource settings corresponding to the target resource allocations. The resource pool manager is configured to determine final RP level resource settings for a resource pool to which the application belongs and final VM level resource settings for the VMs running under the resource pool based on at least the set of desired individual VM level resource settings current RP level resource settings of the resource pool and available resource capacity of the resource pool. The actuator is configured to apply at least one of the final RP level resource settings and the final VM level resource settings to at least one of the resource pool and the VMs running under the resource pool based on at least one resource property of the resource.

Other aspects and advantages of embodiments of the present invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings illustrated by way of example of the principles of the invention.

It will be readily understood that the components of the embodiments as generally described herein and illustrated in the appended figures could be arranged and designed in a wide variety of different configurations. Thus the following more detailed description of various embodiments as represented in the figures is not intended to limit the scope of the present disclosure but is merely representative of various embodiments. While the various aspects of the embodiments are presented in drawings the drawings are not necessarily drawn to scale unless specifically indicated.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by this detailed description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

Reference throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus discussions of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize in light of the description herein that the invention can be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the indicated embodiment is included in at least one embodiment of the present invention. Thus the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Turning now to a distributed computer system that provides a cloud computing environment in accordance with an embodiment of the invention is shown. The distributed computer system may be for example a computer network system. As shown in the distributed computer system includes a network clusters C C . . . C N of host computers where N is a positive integer storage and a management server with a resource allocation module . The exact number of host computer clusters included in the distributed computer system can be any number of clusters from one to tens of clusters or more. The host computers of the different clusters the storage and the management server are connected to the network. Thus each of the host computers in the clusters and the management server are able to access the storage via the network and may share the resources provided by the storage. Consequently any process running on any of the host computers and the management server may also access the storage via the network.

In the illustrated embodiment each of the clusters C C . . . C N includes a number of host computers H H . . . H M where M is a positive integer . The host computers can be assigned to the host computer clusters based on predefined criteria which may include geographical and or logical relationships between the host computers. The number of host computers included in each of the clusters can be any number from one to several hundred or more. In addition the number of host computers included in each of the clusters can vary so that different clusters can have different number of host computers. The host computers are physical computer systems that host or support one or more clients so that the clients are executing on the physical computer systems. As used herein the term client is any software entity that can run on a computer system such as a software application a software process or a virtual machine VM . The host computers may be servers that are commonly found in data centers. As an example the host computers may be servers installed in one or more server racks. Typically the host computers of a cluster are located within the same server rack.

Turning now to components of a host computer that is representative of the host computers H H . . . H M in the clusters C C . . . C N in accordance with an embodiment of the invention are shown. In the physical connections between the various components of the host computer are not illustrated. In the illustrated embodiment the host computer is configured to support a number of clients A B . . . L where L is a positive integer which are VMs. The number of VMs supported by the host computer can be anywhere from one to more than one hundred. The exact number of VMs supported by the host computer is only limited by the physical resources of the host computer. The VMs share at least some of the hardware resources of the host computer which include system memory one or more processors a storage interface and a network interface . The system memory which may be random access memory RAM is the primary memory of the host computer. The processor can be any type of a processor such as a central processing unit CPU commonly found in a server. The storage interface is an interface that allows that host computer to communicate with the storage . As an example the storage interface may be a host bus adapter or a network file system interface. The network interface is an interface that allows the host computer to communicate with other devices connected to the network . As an example the network interface may be a network adapter.

In the illustrated embodiment the VMs A B . . . L run on top of a virtual machine monitor VMM which is a software interface layer that enables sharing of the hardware resources of the host computer by the VMs. However in other embodiments one or more of the VMs can be nested i.e. a VM running in another VM. For example one of the VMs may be running in a VM which is also running in another VM. The virtual machine monitor may run on top of the host computer s operating system or directly on hardware of the host computer. In some embodiments the virtual machine monitor runs on top of a hypervisor that is installed on top of the hardware components of the host computer. With the support of the virtual machine monitor the VMs provide virtualized computer systems that give the appearance of being distinct from the host computer and from each other. Each VM includes a guest operating system OS and one or more guest applications APP . The guest operating system is a master control program of the respective VM and among other things the guest operating system forms a software platform on top of which the guest applications run.

Similar to any other computer system connected to the network the VMs A B . . . L are able to communicate with other computer systems connected to the network using the network interface of the host computer . In addition the VMs are able to access the storage using the storage interface of the host computer.

The host computer also includes a local resource allocation module that operates as part of a local resource management system such as a distributed resource scheduler system to manage resources consumed by the VMs A B . . . L. The local resource allocation module in each host computer of a cluster cooperatively operates with the local resource allocation modules in the other host computers in the same cluster to perform resource scheduling which includes balancing the loads of software processes and or storage resource scheduling. Although the local resource allocation module is illustrated in as being separate from the virtual machine monitor the local resource allocation module may be implemented as part of the virtual machine monitor. In some embodiments the local resource allocation module is implemented as software programs running on the host computer. However in other embodiments the local resource allocation module may be implemented using any combination of software and hardware.

Turning back to the network can be any type of computer network or a combination of networks that allows communications between devices connected to the network. The network may include the Internet a wide area network WAN a local area network LAN a storage area network SAN a fibre channel network and or other networks. The network may be configured to support protocols suited for communications with storage arrays such as Fibre Channel Internet Small Computer System Interface iSCSI Fibre Channel over Ethernet FCoE and HyperSCSI.

The storage is used to store data for the host computers H H . . . H M of the clusters C C . . . C N which can be accessed like any other storage device connected to computer systems. In an embodiment the storage can be accessed by entities such as clients e.g. VMs running on the host computers using any file system e.g. virtual machine file system VMFS or network file system NFS . The storage includes one or more computer data storage devices which can be any type of storage devices such as solid state devices SSDs hard disks or a combination of the two. The storage devices may operate as components of a network attached storage NAS and or a storage area network SAN . The storage includes a storage managing module which manages the operation of the storage. In an embodiment the storage managing module is a computer program executing on one or more computer systems not shown of the storage. The storage supports multiple datastores DS DS . . . DS X where X is an integer which may be identified using logical unit numbers LUNs . In an embodiment the datastores are virtualized representations of storage facilities. Thus each datastore may use the storage resource from more than one storage device included in the storage. The datastores are used to store data associated with the clients supported by the host computers of the clusters. For virtual machines the datastores may be used to store virtual storage e.g. virtual disks used by each of the virtual machines as well as other files needed to support the virtual machines. One or more datastores may be associated with one or more host computers. Thus each host computer is associated with at least one datastore. Some of the datastores may be grouped into one or more clusters of datastores which are commonly referred to as storage pods.

The management server operates to monitor and manage the host computers H H . . . H M of the clusters C C . . . C N and or the storage of the distributed computer system . The management server may be configured to monitor the current configurations of the host computers and the clients running on the host computers for example virtual machines VMs . The monitored configurations may include hardware configuration of each of the host computers such as CPU type and memory size and or software configurations of each of the host computers such as operating system OS type and installed applications or software programs. The monitored configurations may also include clustering information i.e. which host computers are included in which clusters. The monitored configurations may also include client hosting information i.e. which clients e.g. VMs are hosted or running on which host computers. The monitored configurations may also include client information. The client information may include size of each of the clients virtualized hardware configuration of each of the clients such as virtual CPU type and virtual memory size software configuration of each of the clients such as OS type and installed applications or software programs running on each of the clients and virtual storage size for each of the clients. The client information may also include resource settings such as limit reservation entitlement and share values for various resources e.g. CPU memory network bandwidth and storage which are consumed by the clients.

The management server may also be configured to monitor the current configuration of the storage including the physical storage devices and the datastores DS DS . . . DS X of the storage. The monitored storage configuration may include storage device configuration which may include the number of storage devices in the storage the device type of the storage devices such as solid state devices SSDs and hard disks and storage capacity of each of the storage devices. The monitored storage configuration may also include datastore configuration such as storage capacity of each of the datastores and connections and associations between the datastores and the host computers H H . . . H M and or the clients running on the host computers.

The management server may also be configured to monitor the current usage of resources by the clients the host computers H H . . . H M and the clusters C C . . . C N of host computers. For example the management server may monitor CPU processing usage memory usage network usage and storage usage of the clients. The management server may also be configured to store the usage of resources by the clients the host computers and the clusters of host computers to maintain historical resource usage information. The historical resource usage information can then be used to develop various resource usage statistics for the individual clients the individual host computers and the individual clusters of host computers.

The management server may also be configured to perform various operations to manage the clients the host computers H H . . . H M the clusters C C . . . C N of host computers and the storage . As an example the management server may be configured to initially place new clients onto one or more of the host computers in particular clusters and move existing clients to different host computers and or different clusters. The management server can assign software processes to the host computer clusters in a manner that balances the loads of the software processes running on the host computer clusters. Processes such as VMs can be balanced based on allocation policies resource demand and the availability of resources provided by the host computer clusters. Balancing can be applied to computer resources such as processor time i.e. CPU cycles memory space network bandwidth including any type of input output or bus bandwidth storage space power consumption cache space software licenses and so on. To effectively balance the computing resources a running VM can be migrated from one host computer cluster to another in a process that is known as live VM migration. As another example the management server may be configured to power down particular clients and or host computers to conserve power.

In order to perform these various operations the management server may maintain requirements and preferences for the clients with respect to the host computers and the datastores. These requirements and preferences may include affinity or anti affinity rules for some of the clients which may be mandatory or preferential. For example these affinity or anti affinity rules may include rules that specify which clients should run on the same host computer or be kept on separate host computers. As another example these affinity or anti affinity rules may include rules that specify which host computers are acceptable to clients and which host computers are not. The management server may be configured or programmed to perform other operations to manage the distributed computer system . In an implementation the management server is a VMware vCenter server with at least some of the features available for such server.

In an embodiment the management server is further configured to allow administrators to define and create VDCs and or other resource pools RPs . Each of the RPs including VDCs is a logical container that represents an aggregate resource allocation for a collection of virtual machines. Each RP may include one or more smaller RPs each of which may further include one or more even smaller RPs. A VDC can be viewed as a particular type of RPs which typically encapsulates an aggregation of resources that are allocated to an individual organization. The configured capacity of the VDC can be tied to how much the organization is being charged. A VDC can contain multiple RPs each supporting a specific department of the organization. In addition each RP of the VDC can contain one or more applications each supporting a specific business process. Thus the resources provided by the distributed computer system can be represented in a hierarchical RP structure.

In an example of a hierarchical RP structure for the distributed computer system with multiple VDCs is shown. As illustrated in the hierarchical RP structure includes a root RP VDCs RPs applications and VMs . The root RP represents the total amount of resources of the distributed computer system. The resources of the root RP are allocated to the VDCs. The allocated resources of each VDC are further allocated to the RPs of that VDC. The allocated resources of each RP are still further allocated to the VMs of that RP. Some of these VMs may be executing applications. These applications may be applications supported by multiple VMs such as multi tier applications each with a web tier an application tier and a database tier. In the illustrate example the RP includes an application running on some of the VMs of the RP and another application running on other VMs of the RP . However the RP does not include any applications running on multiple VMs.

In an embodiment the resource controls that can be set by the management server includes reservations limits and shares for individual VMs and RPs including VDCs in the distributed computer system . Reservation values specify the minimum amount of certain resource that VMs or RPs must receive even when this resource is overcommitted in order to for example provide a guaranteed amount of the resource to a specific application or department within an organization. Limit values specify the maximum allocation that should be made to VMs or RPs in order to for example prevent demand spikes within one application or RP from affecting others. Share values i.e. the numbers of shares provide a measure of relative importance between a group of VMs or a group of RPs within the same parent RP and thus are used to prioritize allocation when capacity is constrained. Thus share values allow multiple applications or RPs within the same organization to share resources in proportion to their respective priorities.

The application resource allocation module operates to compute resource control settings for VMs and or RPs associated with applications running on the distributed computer system for one or more computer resources so that application SLO requirements are met. The computer resources may be any resource that can be allocated such as processor time i.e. CPU cycles memory space network bandwidth including any type of input output or bus bandwidth storage space power consumption and cache space. The application resource allocation module may be periodically activated i.e. called to run at predefined intervals for example every five minutes. In addition the resource allocation module may be activated at will when certain events or conditions occur. For example the resource allocation module may be activated after a business critical application is deployed and starts running or when the latency of an application exceeds a threshold. Alternatively the application resource allocation module may be activated manually by a user of the management server .

Turning now to a block diagram of components of the application resource allocation module in the management server in accordance with an embodiment of the invention is shown. As illustrated in the application resource allocation module includes a number of application managers a number of RP managers and an actuator . Each application manager is configured to determine resource control settings for the VMs in the distributed computer system running a particular application to satisfy any application SLO requirements. Thus the number of application managers included in the application resource allocation module may coincide with the number of applications running on the distributed computer system that are to be managed by the application resource allocation module. Each RP manager is configured to determine appropriate resource control settings for a particular RP and or final resource control settings for the VMs in that RP. Thus the number of RP managers included in the application resource allocation module may coincide with the number of RPs that exist for the distributed computer system that are to be managed by the application resource allocation module. The actuator is configured to set or apply the resource control settings for the VMs and or the RPs as determined by the RP managers. These components of the application resource allocation module can be implemented as software hardware or a combination of software and hardware. In an embodiment the application resource allocation module is installed in the management server . In a particular implementation the application resource allocation module may be installed in a VMware vCenter server that is executed by one or more processors associated with the server. However in other embodiments the application resource allocation module may be installed in any other computer system.

In an application manager in accordance with an embodiment of the invention is shown. The application manager is representative of the application managers of the application resource allocation module illustrated in . As illustrated in the application manager is paired with an application executed by a number of VMs to manage the application. The application is representative of an application running in the distributed computer system . The application being managed by the application manager may be a multi tiered application with each tier of the application being executed by one or more VMs. As an example the application may be a multi tiered application with a web tier an application tier and a database tier each of the tiers being supported by multiple VMs.

As shown in the application is monitored by an application sensor module and a system sensor module . The application sensor module periodically collects various application level performance metrics such as throughput average response time and percentile response time for all the applications running on the distributed computer system including the application . The system sensor module periodically measures and keeps track of current real time resource allocations for all the VMs in the distributed computer system including the VMs running the application . In a particular implementation resource utilization statistics are collected by the system sensor module though vSphere Web Services application programming interface API . As an example the system sensor module may collect the average per VM CPU utilization over a time interval using a usage performance counter and the per VM memory utilization using a consumed counter. In an embodiment the application sensor module and the system sensor module are part of the application resource allocation module . In other embodiments the application sensor module and the system sensor module may be part of another module or system in the management server .

As shown in the application manager includes a model builder an application controller and a resource controller . The model builder is configured to using the information from the application sensor module and the system sensor module construct and iteratively refine a model for the observed application performance as a function of the VM level resource allocations i.e. the resource allocations of the VMs running the application . The application controller is configured to invert the function to compute a new set of desired or target resource allocations in order to meet user defined SLOs. The resource controller is configured to determine a set of individual VM level resource settings that would cause the VMs running the application to acquire the desired resource allocations in the next control interval. In one particular implementation the model builder the application controller and the resource controller constitute an instance of the application manager for a single application. These components of the application manager are described in more detail below.

The following table lists the notation used herein to describe the model builder the application controller and the resource controller of the application manager .

For application a A the resource allocation variable uis defined to be a vector that contains all measured resource allocations for application a. For example for an application of two VMs M vm vm if two resources are considered R cpu memory uis a vector where u u u u . U t represents the measured resource allocation values for application a during control interval t.

The model builder is configured to compute a linear model that approximates the nonlinear relationship between the resource allocations to application a u and its normalized performance circumflex over p . As with most real world systems this relationship is often non linear and workload dependent. Nevertheless many nonlinear models can be approximated by a linear model in small enough regions around an operating point. In an embodiment the following auto regressive moving average ARMA model is used to represent the relationship between the resource allocations to application a u and its normalized performance circumflex over p 1 Equation 1 where circumflex over p t is the normalized performance of the application a for the current control time interval a t is an auto regressive parameter circumflex over p t 1 is the normalized performance of the application a for the previous control interval b t is a vector of moving average parameters and u t is the resource allocation vector for the current control time interval. This model is self adaptive as its parameters a t and b t are re estimated in every control time interval t. Thus the linear model is updated periodically to adapt to changes in the workload and or system conditions.

The application controller is configured to determine the resource allocations for all the VMs running the application such that the application can meet its performance SLOs. The application controller seeks the VM level resource allocations for the next control interval that minimizes the following cost function 1 1 1 1 Equation 2 where u t 1 is the resource allocation vector for the next control time interval t 1 circumflex over p t 1 is the normalized performance of the application for the next control time interval as predicted by Equation 1 u t is the resource allocation vector for the current control time interval and is a scaling factor. In Equation 2 the scaling factor captures the trade off between the performance cost that penalizes the application s performance for deviating from its target denoted by the normalized value equal to 1 and the stability cost that penalizes large oscillations in the resource allocation values.

Using the linear model of Equation 1 the optimal resource allocations that minimizes the cost function of Equation 2 can be solved and expressed as follows 1 1 Equation 3 where u t 1 is the desired resource allocation vector for the next control time interval t 1 b is the moving average parameter vector bis transpose of b is the scaling factor I is the identity matrix a is the auto regressive parameter circumflex over p t is the normalized performance of the application for the current control time interval u t is the resource allocation vector for the current control time interval.

The resource controller is configured to translate the optimal resource allocation values computed by the application controller to desired VM level resource control settings. The translation is needed for the following reasons 1 the output of the application controller is in percentage units whereas the VM level resource control settings are in absolute units e.g. the reservation and limit values for both CPU and memory are in units of megahertz MHz or megabytes MB and 2 in order to deal with inaccuracies in the computed optimal resource allocations more resources are allocated than the computed values as a safety buffer. The resource controller operates to compute the desired resource control settings e.g. reservation and limit values for each resource type being considered.

The operation of the resource controller to calculate for each VM running the application desired VM level resource control settings for each resource type in accordance with an embodiment of the invention is described with reference to . At block the optimal allocation value received from the application controller for a particular resource type is adjusted if the optimal allocation value falls outside of a valid range of values. At block the resource capacity is calculated in absolute units based on the resource type. The resource capacity of a VM is the amount of resource configured for the VM for each resource type which is static. At block the desired resource reservation is computed based on the optimal allocation value and the capacity. In an embodiment the desired resource reservation is computed by directly multiplying the optimal allocation value and the capacity. At block a delta value is selected based on measured application performance. At block the size of a safety buffer is determined by the computed reservation the normalized performance and the delta value. At block the resource limit value is set based on at least the computed reservation. In an embodiment the resource limit value is set based on the computed reservation and the safety buffer size. In a particular implementation the resource limit value is set to the sum of the computed reservation and the safety buffer size. In other embodiments the resource limit value can be set based on the computed reservation a constant value and or the application performance. At block the resource limit value is adjusted if necessary based on the available capacity and the minimum resource requirement for a VM so that the final value is feasible.

In one particular implementation the resource controller executes the following algorithm on every VM running the application for both CPU and memory resources to calculate reservation and limit settings.

In the above algorithm the optimal allocation value u for a VM is first adjusted if it falls outside of a valid range line . The resource capacity is then calculated in absolute units based on the specific resource type i.e. CPU or memory line . Next the desired resource reservation is computed by directly multiplying the optimal allocation value and the capacity line . A low or high delta value is then selected depending on whether the measured application performance is below or above the target line . The selected delta value is used to determine the size of a safety buffer. If the application performance is better than the SLO perf1 a relatively large buffer size is needed to improve the performance convergence rate. As an example the low delta value can be set to 0.1 and the high delta value can be set to 0.3. Next the size of a safety buffer is then determined by the computed reservation the normalized performance and a selected delta value line . The resource limit value is then set to the sum of the reservation and the buffer size line . The nonzero adaptive buffer between limit and reservation allows the resource controller to adjust runtime allocations if needed. In other implementations the limit value can be set to one of the following 1 the computed reservation 2 the computed reservation plus some constant and 3 the computed reservation plus the product of application performance and the computed reservation. Next the limit is then compared against the available capacity and the minimum capacity requirement of the VM in order to ensure that the final value is feasible line .

Turning back to different application managers are associated with certain RP managers of the application resource allocation module . Specifically the application managers that manage applications under the same RP are associated with the same RP manager. For each RP the associated RP manager determines the allocation of resources to the applications running under this RP based on the resources requested by the associated application managers the available RP capacity and RP settings. This is required because the application managers act independently of one another and may in aggregate request more resources than a particular RP has available.

As used herein an RP is defined as modifiable if the RP level resource settings can be modified by an administrator or through an API. This allows the resources to flow from low priority RPs to high priority RPs e.g. from the RP to the RP in within the same VDC. In addition an RP is defined as expandable if the RP can automatically increase its own reservation when it is exceeded by the sum of its children s reservations. If an RP has a reservation R and VM represents a virtual machine under this RP with a reservation r then the RP has the following constraints 

For a resource where the total reservation requested is less than the RP level reservation the RP manager honors each associated application manager s requests. For a contested resource where the sum of VM level reservations is greater than the RP level reservation the RP manager executes one of the following solutions 

 2 If the RP is non expandable but modifiable the RP manger sets the RP level reservation as the sum of the requested VM level reservations.

 3 If the RP is non expandable and unmodifiable the RP manager throttles the VM level reservations in proportion to the requested reservation for each VM.

In operation each application manager sends the resource setting requests to the respective RP manager periodically. In an embodiment each request is a 4 tuple of VM name resource type requested reservation and requested limit vmname type resv limit . For each resource the RP manager maintains a global vector e.g. cpu alloc table wherein each element in the vector is a 3 tuple of VM name requested reservation and allocated reservation vmname req resv alloc resv . This table is updated to keep track of each VM s request over time.

Once a request is received from an application manager the associated RP manager operates to calculate the actual or final VM level and RP level resource settings. The operation of the RP manager to calculate for each VM under an RP the final VM level and RP level resource settings for each resource type in accordance with an embodiment of the invention is described with reference to . At block the expandability of the resource type is checked. At block the current RP reservation setting and the current RP limit settings are read. At block the unreserved RP capacity that can still be allocated and the current reservation value of the VM are read. At block if this type of resource is expandable in the RP the VM reservation is limited to the RP reservation to ensure that the constraint for expandable resource type is satisfied. At block if the resource type is non expandable the requested reservation values of all the VMs from the application manager are used to calculate the proportionally allocated reservation value for the VM. For example for a non expandable RP that has an RP level reservation of 1000 MHz if the two VMs vm and vm running under this RP each has a requested reservation value of 900 MHz and 300 MHz respectively then the proportionally allocated reservation values for vm and vm should be 750 MHz and 250 MHz respectively. At block the final allocated value is set to be the minimum of three candidate values 1 the proportionally allocated reservation 2 the unreserved RP capacity that can still be allocated plus the requested limit and 3 the requested reservation. At block the global resource vector table is updated. At optional block the RP level limit is set optionally using a flag. For example if the flag is true then the RP level limit is set to be equal to the RP level reservation. Otherwise the RP level limit is set to be unlimited.

In one particular implementation each RP manager executes the following algorithm for every resource setting request from one of the associated application managers to calculate the actual VM level and RP level resource settings.

In the above algorithm the expandability and modifiability of the resource defined by type are first checked line . The currently used and available RP reservation settings are then read and the total RP capacity is computed line . Next the requesting VM s current reservation value is retrieved line . If the RP is expandable or modifiable the VM reservation value is set directly line . If the RP is non expandable and unmodifiable the global vector is scanned to get the total value of the requested reservations from all VMs in the resource pool and computes the proportionally allocated value prop resv for the requesting VM line . The RP level reservation and limit are then set and the global vector is updated with the new tuple vname type resv vm resv in the end line .

Once the final VM level and RP level resource settings have been calculated the RP manager determines whether some or all of the final VM level and RP level resource settings should be set or applied. Depending on the expandability and modifiability settings of the RP the RP manager can determine to apply the calculated values as follows 

The actuator is configured to apply the final VM level and RP level resource settings and or the RP level resource settings as determined by the RP managers to the respective RPs and or the VMs that belong to the RPs. In an embodiment the final VM level and RP level resource settings and or the RP level resource settings may be set by the actuator through a vSphere Web Service API.

A method for managing resources in a distributed computer system that includes at least one resource pool for a set of virtual machines in accordance with an embodiment of the invention is described with reference to a flow diagram of . At block a model for observed performance of an application running in the distributed computer system as a function of current VM level resource allocations is constructed. At block the function is inverted to compute a set of target resource allocations in order to meet at least one user defined service level objective SLO . At block a set of desired individual VM level resource settings corresponding to the target resource allocations is determined. At block final RP level resource settings for a resource pool to which the application belongs and final VM level resource settings for the resource pool are determined based on at least the set of desired individual VM level resource settings current RP level resource settings of the resource pool and available resource capacity of the resource pool. At block at least one of the final RP level resource settings and the final VM level resource settings is applied to at least one of the resource pool and virtual machines running under the resource pool based on at least one resource property of the resource pool.

Although the operations of the method s herein are shown and described in a particular order the order of the operations of each method may be altered so that certain operations may be performed in an inverse order or so that certain operations may be performed at least in part concurrently with other operations. In another embodiment instructions or sub operations of distinct operations may be implemented in an intermittent and or alternating manner.

It should also be noted that at least some of the operations for the methods may be implemented using software instructions stored on a computer useable storage medium for execution by a computer. As an example an embodiment of a computer program product includes a computer useable storage medium to store a computer readable program that when executed on a computer causes the computer to perform operations as described herein.

Furthermore embodiments of at least portions of the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer useable or computer readable medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disc and an optical disc. Current examples of optical discs include a compact disc with read only memory CD ROM a compact disc with read write CD R W a digital video disc DVD and a Blu ray disc.

In the above description specific details of various embodiments are provided. However some embodiments may be practiced with less than all of these specific details. In other instances certain methods procedures components structures and or functions are described in no more detail than to enable the various embodiments of the invention for the sake of brevity and clarity.

Although specific embodiments of the invention have been described and illustrated the invention is not to be limited to the specific forms or arrangements of parts so described and illustrated. The scope of the invention is to be defined by the claims appended hereto and their equivalents.

