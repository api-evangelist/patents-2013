---

title: Touch event model programming interface
abstract: An electronic device receives touch input signals associated with a respective region of a web page. The respective region of the web page is associated with a plurality of event handlers or event listeners including an event handler or listener for a touch event and an event handler or listener for a gesture event. In response to receiving the touch input signals, the device sends a gesture event to the web page. The gesture event corresponds to a combination of two or more touch events, and the two or more touch events correspond to the touch input signals. The device dynamically rotates an element associated with the respective region of the web page with the event handler or listener for the gesture event based on a rotation value associated with the gesture event, and sends the touch events to the web page for processing, distinct from the dynamically rotating.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09323335&OS=09323335&RS=09323335
owner: APPLE INC.
number: 09323335
owner_city: Cupertino
owner_country: US
publication_date: 20130308
---
This application is a continuation application of U.S. patent application Ser. No. 12 042 299 filed Mar. 4 2008 which is incorporated herein by reference in its entirety.

This application is related to U.S. patent application Ser. No. 12 042 237 filed Mar. 4 2008 and U.S. patent application Ser. No. 12 042 067 filed Mar. 4 2008 the contents of which are herein incorporated by reference in their entirety.

Web pages are created using a markup language which provides a means to describe a structure of text based information in a document and to supplement that text with interactive forms embedded images and other objects. One popular markup language is HyperText Markup Language HTML which is written in the form of tags surrounded by angle brackets. HTML can describe the appearance and semantics of a web page and can include embedded scripting language code e.g. JavaScript which can affect the behavior of web browsers and other HTML processors. JavaScript provides developers with the ability to add mouse event handlers or event listeners in a web page. These mouse event handlers can be assigned to specific regions of the web page and configured to receive mouse events in those regions such as mouse up or mouse down events.

By contrast web pages that are navigated with a touch sensitive device often need to respond to touch events generated by a user touching a web page with one or more fingers and making gestures. Conventional mouse event handlers cannot correctly interpret these touch events. Thus touch events require a different touch event model to correctly interpret touch events and to allow developers to fully utilize the capabilities of a touch sensitive display or device.

One or more touch input signals can be obtained from a touch sensitive device. A touch event model can be used to determine touch and or gesture events based on the touch input signals. The touch and gesture events can be associated with touch input signals generated from different regions of a web page displayed on the touch sensitive device. Access can be provided to at least one touch or gesture event through a programming interface.

In some implementations in a web browser a method comprising receiving a rotation value associated with a gesture event and dynamically rotating an element of a web page associated with the gesture event in the web browser based on the rotation value wherein the rotation value is a relative delta in degrees. The gesture event can includes two or more touch events.

In some implementations in a web browser a method includes receiving a scaling value associated with a gesture event dynamically resizing an element of a web page associated with the gesture event in the web browser based on the scaling value wherein the scaling value is a relative delta in document pixels. The gesture event can be associated with two or more touch events.

In some implementations in a web browser a method includes receiving a touch list the touch list including touch data to identify one or more touches on a web page wherein the touch data includes a touch identifier and at least one set of touch location coordinates wherein the touch list further includes data to a touch event target associated with each touch wherein the at least one set of touch location coordinates includes a set of client coordinates a set of page coordinates and a set of screen coordinates. The touch data can identify one or more changed touches.

Other implementations are disclosed which are directed to systems methods and computer readable mediums.

In some implementations a user may perform various functions with the elements on the web page using a finger instead of a mouse. The user can for example touch the elements of the web page using the touch sensitive display shown in . In one example the user can select an element by touching the element with one or more fingers and or making a gesture such as a swiping pinching or rotating motion. To recognize touch input signals certain areas of the web page may be associated with touch event handlers. This can be accomplished with a DOM and embedded scripting language as will be described in reference to .

In some implementations one or more elements in web page can be associated with one or more corresponding touch event handler by associating corresponding nodes in the DOM with the touch event handlers. Touch event handlers can be inserted into HTML tags of the web page and can execute a scripting language to perform an action when for example a user touches or gestures within one of the elements on the web page . For example JavaScript can work with the DOM to attach actions to different touch events.

In some implementations one or more elements can receive touch input which is detected by an event handler or listener. The touch input can be detected and processed into touch events by a touch event model which can be implemented in one or more layers of a software stack as described in reference to . The touch events can be further processed by the web page . The touch events can be in a format e.g. attributes that are easier to use in an application than raw touch input signals generated by the touch sensitive device. For example each touch event can include a set of coordinates at which a touch is currently occurring.

Each element in the web page and its associated event handler can receive process and handle touch events. For example if driver senses a touch point associated with element or a touch point associated with element the event handlers associated with elements or can each receive a separate touch event indicating that the element has been touched and can optionally send the touch event to the web page for further processing. In some implementations if a region of the web page is touched that does not correspond to an event handler a browser in the applications layer can process the input instead of the web page .

In some implementations a touch event can be detected per finger per node in the DOM . For example a user can touch the touch sensitive display at touch point and touch point at substantially the same time and two separate touch events can be detected by the touch event model. A separate touch event can be detected for touch point and touch point because each node and node in the DOM are associated with a separate touch event handler.

In some implementations touch events can be delivered to the web page as EventTargets. Some examples of touch events can include touchstart touchmove touchend and touchcancel. Other touch events are possible. Touchstart is a touch event that is detected when a user first places a finger on the touch sensitive display in a region on the web page that is associated with an event handler. When the user moves his finger around on the web page one or more touchmove events can be detected. When the user raises his finger off of the web page a touchend event is detected. The touchcancel can be detected when the system interrupts regular event handling. For example a touchcancel event can occur when the touch sensitive display is locked out to prevent inadvertent touches.

In some implementations gesture events can also be detected by combining two or more touch events. Like touch events the gesture events GestureEvents can also be delivered to the web page as EventTargets. Some examples of gesture events can be gesturestart gesturechange and gestureend. The gesture events can contain scale and or rotation information. The rotation information can include a rotation value that is a relative delta in degrees. An element on the webpage can be dynamically rotated base on the rotation value. The scale information can include a scaling value that is a relative delta in document pixels. An element on the webpage associated with the gesture event can be dynamically resized based on the scaling value. Other gesture events are possible.

In some implementations a touch list can be received that includes touch event data to identify one or more touches on the web page . The touch event data can include a touch identifier and at least one set of touch location coordinates. The touch list can also include touch event data to a touch event target associated with each touch. In some implementations the one set of touch location coordinates can include client coordinates page coordinates and screen coordinates. In some implementations the touch event data can identify one or more changed touches.

In some implementations GestureEvents can be sent to the web page before TouchEvents. For example if a user places fingers on touch point and touch point then makes a rotating gesture with those fingers clockwise or counterclockwise on the touch sensitive display the touch event model detects these multiple touch events and combines the touch events into a gesture event. The gesture event can then be sent to the web page followed by the touch events that were combined to form the gesture event. This way a developer has access to a gesture event and the individual touch events of the gesture event which provides the developer with more flexibility when developing a web application.

In some implementations the touch events are received in the following order a touchstart event one or more touchmove events and a touchend or touchcancel event. Using the example of when the user touches touch point a first touchstart event is detected by a first touch event handler associated with element . When the user touches touch point a second touchstart event is detected by a second touch event handler associated with element . As the user rotates her fingers without lifting her fingers the first and second touch event handlers detect touchmove events which can be interpreted by the touch event model as a rotation gesture event. When the user finishes the rotation and lifts her fingers from the web page the first and second touch event handlers detect touchend events. All or some of these touch events can be made available to developers through a touch event Application Programming Interface API . The touch API can be made available to developers as a Software Development Kit SDK or as part of an application e.g. as part of a browser tool kit . The touch event API can rely on other services frameworks and an operating system to perform its various functions. These services frameworks and operating system can be part of a software or processing stack as described in reference to where the touch events are associated with attributes that can be inserted in documents to define event actions in an application.

An example touch event model will now be described in Interface Description Language IDL . The functionality and data structures of the IDL can be accessed through an API by a web designer or application developer. Access to touch events and or gesture events can be associated with attributes that can be inserted in an markup language document e.g. HTML XML to define event actions in an application. For example the attributes can be inserted in one or more HTML tags in an HTML document for generating the web page displayed on the touch sensitive display . The event actions can include running an embedded script e.g. JavaScript .

The following is example of HTML code snippet for processing touch events using the example IDL above. The HTML below shows for example that the touch event listener TouchStart and GestureStart were added to an element with the HTML code 

One or more drivers in a driver layer can communicate with the hardware . For example the drivers can receive and process touch input signals generated by the touch sensitive display or device in the hardware layer . A core Operating System OS can communicate with the driver s . The core OS can process raw input data received from the driver s . In some embodiments the drivers can be considered to be a part of the core OS .

A set of OS application programming interfaces APIs can communicate with the core OS . These APIs can be a set of APIs that are usually included with operating systems such as for example Linux or UNIX APIs . A set of core foundation APIs can utilize the OS APIs and a set of foundation APIs can utilize the core foundation APIs .

Web page software development kit SDK can include a set of APIs designed for use by applications running on the device. The touch event APIs can for example be included in the Web page SDK . The APIs of the Web page SDK can utilize the foundation APIs . The Web page SDK can for example include Web KIT provided by Apple Inc. The Web page SDK can be offered as an API or can be accessible through an application for example a browser such as SAFARI provided by Apple Inc.

Applications running on the device can utilize the APIs of the Web page SDK to create web pages. The APIs of the Web page SDK can in turn communicate with lower level elements ultimately communicating with the touch sensitive display or device and various other user interface hardware. While each layer can utilize the layer underneath it that is not always required. For example in some embodiments applications can occasionally communicate with OS APIs .

In some implementations the touch sensitive display can comprise a multi touch sensitive display . A touch sensitive display can for example process multiple simultaneous touch points including processing data related to the pressure degree and or position of each touch point. Such processing facilitates gestures and interactions with multiple fingers chording and other interactions. Other touch sensitive display technologies can also be used e.g. a display in which contact is made using a stylus or other pointing device. Some examples of multi touch sensitive display technology are described in U.S. Pat. Nos. 6 323 846 6 570 557 6 677 932 and U.S. Patent Publication 2002 0015024A1 each of which is incorporated by reference herein in its entirety. In some implementations the multi touch capable device can display one or more graphical user interfaces on the touch sensitive display for providing the user access to various system objects and for conveying information to the user.

In some implementations the multi touch capable device can implement multiple device functionalities such as a telephony device an e mail device a network data communication device a Wi Fi base station device and a media processing device. In some implementations the multi touch capable device can include a web browser for displaying web pages e.g. web page . The touch sensitive display can receive touch input signals made on the web page and the touch model described above can be used to determine touch and or gesture events based on the touch input signals. In some implementations the multi touch capable device can implement network distribution functionality. In some implementations the touch sensitive display can be locked down when the multi touch capable device is proximate to the user s ear. This lockdown would cause a touchcancel event as described in reference to .

In some implementations an accelerometer can be utilized to detect movement of the multi touch capable device as indicated by the directional arrow . Accordingly display objects and or media can be presented according to a detected orientation e.g. portrait or landscape. In some implementations the multi touch capable device may include circuitry and sensors for supporting a location determining capability such as that provided by the global positioning system GPS or other positioning systems e.g. systems using Wi Fi access points television signals cellular grids Uniform Resource Locators URLs . In some implementations a positioning system e.g. a GPS receiver can be integrated into the multi touch capable device or provided as a separate device that can be coupled to the multi touch capable device through an interface to provide access to location based services. The multi touch capable device can also include one or more wireless communication subsystems.

In some implementations a port device e.g. a Universal Serial Bus USB port or a docking port or some other wired port connection can be included. The port device can for example be utilized to establish a wired connection to other computing devices such as other multi touch capable devices network access devices a personal computer a printer or other processing devices capable of receiving and or transmitting data. In some implementations the port device allows the multi touch capable device to synchronize with a host device using one or more protocols such as for example the TCP IP HTTP UDP and any other known protocol.

The multi touch capable devices and can also establish communications by other means. For example the multi touch capable device can communicate with other wireless devices e.g. other multi touch capable devices cell phones etc. over the wireless network . Likewise the multi touch capable device and can establish peer to peer communications e.g. a personal area network by use of one or more communication subsystems such as the Bluetooth communication device shown in . Other communication protocols and topologies can also be implemented.

The multi touch capable device can for example communicate with a network resource over the one or more wired and or wireless networks . For example the network resource can be a web server for delivering web pages which can be touched via the touch model as described in reference to .

Other services can also be provided including a software update service that automatically determines whether software updates exist for software on the multi touch capable device then downloads the software updates to the multi touch capable device where it can be manually or automatically unpacked and or installed.

Sensors devices and subsystems can be coupled to the peripherals interface to facilitate multiple functionalities. For example a motion sensor a light sensor and a proximity sensor can be coupled to the peripherals interface to facilitate the orientation lighting and proximity functions described with respect to . Other sensors can also be connected to the peripherals interface such as a positioning system e.g. GPS receiver a temperature sensor a biometric sensor or other sensing device to facilitate related functionalities.

A camera subsystem and an optical sensor e.g. a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor can be utilized to facilitate camera functions such as recording photographs and video clips.

Communication functions can be facilitated through one or more wireless communication subsystems which can include radio frequency receivers and transmitters and or optical e.g. infrared receivers and transmitters. The specific design and implementation of the communication subsystem can depend on the communication network s over which the multi touch capable device is intended to operate. For example a multi touch capable device may include communication subsystems designed to operate over a GSM network a GPRS network an EDGE network a Wi Fi or WiMax network and a Bluetooth network. In particular the wireless communication subsystems may include hosting protocols such that the device may be configured as a base station for other wireless devices.

An audio subsystem can be coupled to a speaker and a microphone to facilitate voice enabled functions such as voice recognition voice replication digital recording and telephony functions.

The I O subsystem can include a touch screen controller and or other input controller s . The touch screen controller can be coupled to a touch screen . The touch screen and touch screen controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch screen .

The other input controller s can be coupled to other input control devices such as one or more buttons rocker switches thumb wheel infrared port USB port and or a pointer device such as a stylus. The one or more buttons not shown can include an up down button for volume control of the speaker and or the microphone .

In one implementation a pressing of the button for a first duration may disengage a lock of the touch screen and a pressing of the button for a second duration that is longer than the first duration may turn power to the multi touch capable device on or off. The user may be able to customize a functionality of one or more of the buttons. The touch screen can for example also be used to implement virtual or soft buttons and or a keypad or keyboard.

In some implementations the multi touch capable device can present recorded audio and or video files such as MP3 AAC and MPEG files. In some implementations the multi touch capable device can include the functionality of an MP3 player such as an iPod . The multi touch capable device may therefore include a 32 pin connector that is compatible with the iPod. Other input output and control devices can also be used.

The memory interface can be coupled to memory . The memory can include high speed random access memory and or non volatile memory such as one or more magnetic disk storage devices one or more optical storage devices and or flash memory e.g. NAND NOR . The memory can store an operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks. The operating system may include instructions for handling basic system services and for performing hardware dependent tasks.

The memory may also store communication instructions to facilitate communicating with one or more additional devices one or more computers and or one or more servers. The memory may include graphical user interface instructions to facilitate graphic user interface processing sensor processing instructions to facilitate sensor related processing and functions phone instructions to facilitate phone related processes and functions electronic messaging instructions to facilitate electronic messaging related processes and functions web browsing instructions to facilitate web browsing related processes and functions media processing instructions to facilitate media processing related processes and functions GPS Navigation instructions to facilitate GPS and navigation related processes and instructions camera instructions to facilitate camera related processes and functions and or other messaging instructions to facilitate processes and functions as described in reference to .

Each of the above identified instructions and applications can correspond to a set of instructions for performing one or more functions described above. These instructions need not be implemented as separate software programs procedures or modules. The memory can include additional instructions or fewer instructions. Furthermore various functions of the multi touch capable device may be implemented in hardware and or in software including in one or more signal processing and or application specific integrated circuits.

The features described can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The features can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by a programmable processor and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output.

The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language e.g. Objective C Java including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors or cores of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made. For example elements of one or more implementations may be combined deleted modified or supplemented to form further implementations. As yet another example the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

