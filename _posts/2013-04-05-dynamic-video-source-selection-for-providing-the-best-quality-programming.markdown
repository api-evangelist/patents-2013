---

title: Dynamic video source selection for providing the best quality programming
abstract: A Dynamic Video Source Selection (DVSS) component that can be implemented in a physical or virtual STB that is capable of presenting a high quality service and consistent navigational paradigm to the viewer, while detecting, selecting, and presenting the best quality programming possible based upon the current position of the viewer's device within the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935732&OS=08935732&RS=08935732
owner: EchoStar Technologies L.L.C.
number: 08935732
owner_city: Englewood
owner_country: US
publication_date: 20130405
---
This application claims the benefit of U.S. Provisional Application No. 61 095 738 filed Sep. 10 2008 which is hereby incorporated by reference. This application is related to co pending U.S. application Ser. No. 12 556 443 entitled Virtual Set Top Box filed herewith which is incorporated herein by reference.

Embodiments of the present invention relate to Internet Protocol Television IPTV technology and specifically to emulating a physical set top box STB for providing an IPTV service to a user such that the user may view programming content on a device such as a computing device the presentation and functionality associated with traditional programming paradigms being maintained.

In the traditional television paradigm programming content is sent as an analog or digital signal to a viewer s television set via cable satellite or through the air. The signals are then received processed and displayed for the viewer to watch on the screen of the television set.

However with the exoteric spread of portable electronic devices such as laptop computers viewers no longer wish to be restricted to watching television via a conventional television set which is more or less confined to use in one physical location. Given the desire or need for portability and the ubiquitous presence of Internet based technologies within modern computing equipment the ability to receive IPTV services via computing equipment is becoming increasingly important from both a consumer s i.e. viewer s perspective and from the perspective of the service providers who seek to commercialize the opportunities.

Thus the monopoly of the traditional television paradigm is being eroded and challenged by the development of Internet Television Internet TV and Internet Protocol Television IPTV technologies.

Internet TV enables a user to select programs from a list and is typically delivered over an IP network in the form of streaming video via a website. The content is embedded into a web page and accompanying text is typically wrapped around the streaming video which is presented to the viewer within a separate window. In some ways this presentation style is similar to a newspaper page wherein surrounding text flows around not over the image albeit that the static image is replaced by a video component.

By contrast a typical IPTV system enables delivery of a digital television service to a viewer over a closed network infrastructure. The delivery is performed using Internet Protocol and typically includes a broadband connection. The IPTV system receives and displays the video stream which has been encoded as a series of Internet Protocol data packets. IPTV can be in the form of live TV but also as stored video sometimes known as video on demand VOD .

Traditionally the viewer must use a device known as a set top box STB in conjunction with his her television set in order to receive and view IPTV. The set top box acts as an interface between the television and the network decoding the incoming video streaming media converting it into standard television signals and providing two way communications over the IP network. It also performs functional processing such as setting up the connection and quality of service QoS with the service node channel change functionality and user display control. This functionality is achieved via the use of software known as middleware .

 Middleware is a key component within the IPTV solutions architecture. It is the application software layer that acts as an interface between the user interface and the hardware operating system OS of the STB. Middleware vendors adopt abstraction based strategies to isolate themselves from the underlying hardware.

However service providers can find it challenging to make the IPTV business model commercially viable due to the often relatively high cost of STBs. This is compounded by the linear nature of the cost functionality line of STBs the more features or functions the STB is required to posses the higher the cost of the device. This has prompted IPTV service providers to investigate the possibilities of delivering their services to mass market end user devices such as personal computers where the cost of the hardware has already been borne by the end user viewer. Thus if standard computing components can be used to mirror and mimic their televisual counterparts e.g. monitor CPU disk used to replace TV STB VCR respectively then functionality can be maintained while eliminating the cost and inconvenience of a required STB.

The following description describes embodiments of a virtual set top box vSTB for executing a middleware component designed for execution by the physical STB including emulating hardware capabilities of the physical STB to process IPTV content received over a network connection. The middleware component is a container framework in which applications can operate. The middleware component may be the application software layer that acts as an interface between the user interface and the hardware and operating system of the STB or in the case of vSTB the hardware and operating system of the client device not a physical STB . For example the middleware component may be an operating system layer designed for consumer electronics such as for physical set top boxes that connect to a service provider s system such as OpenCable Application Platform used for cable television systems. The middleware component is typically specific to the particular vendor of the television services.

The following description also describes embodiments of a DVSS component that can be implemented in a physical or virtual STB that is capable of presenting a high quality service and consistent navigational paradigm to the viewer while transparent to the user detecting selecting and presenting the best quality programming possible based upon the current position of the viewer s device within the network regardless of multicast support . The DVSS component may be used to provide the user with a single experience of optimal quality regardless of the network in which the client device operates. In one embodiment the DVSS component determines and acquires the optimal quality programming possible based on the current position of the user s device within the network for example the DVSS component can issue a request to a first source using a first protocol and upon determining that the request fails re issuing the request to a second source using a second protocol. The DVSS component can receive the requested media content using the particular protocol used by the particular delivery network used by the selected source. For example the media content can be received in one of the different protocols for example RSTP Internet Group Management Protocol IGMP Digital Video Broadcasting DVB or others such as peer to peer P2P streamlets e.g. HTTP streamlets described below.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. Many of the functional units described in this specification have been labeled as modules engines or managers in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit including custom integrated circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module engine or manager may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like. These modules engines and managers may also be implemented in software for execution by various types of computing devices. An identified module of executable code may for instance include one or more physical or logical blocks of instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may include disparate instructions stored in different locations which when joined logically together include the module and achieve the stated purpose for the module. Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving attaching forwarding caching or the like refer to the action and processes of a computing device or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computing device s registers and memories into other data similarly represented as physical quantities within the computing device memories or registers or other such information storage transmission or display devices.

The embodiments described herein may remove the need for a traditional i.e. physical STB and or television set and provides in one embodiment a software based emulation environment such that the signals can be received processed and viewed on an alternative device such as a portable computing device e.g. laptop computer without loss or adaptation of service presentation style or functionality. The embodiments may also be used in connection with a physical STB and or television set.

This maintenance of viewing experience is illustrated in which shows a laptop computer executing a 3party middleware running in conjunction with an STB emulation system according to one embodiment despite the middleware having been designed for use with a traditional STB. also illustrates how the STB emulation system has been architected to deliver a rich multi media televisual experience akin to that traditionally associated with a physical STB and television set. The image shows the end result of how the 3party middleware has elected to render the user interface and video layers with respect to each other instead of wrapping the graphics and or text around the video as done in conventional web television.

Thus the functional components of the virtual set top box also referred to as the STB emulation system as described in the embodiments herein allow the middleware to define the exact co ordinates of each visual element in all three planes X Y and Z . The Z plane also includes the ability to apply alpha blending techniques to vary the opacity of the User Interface UI layer with respect to the video layer.

In order to receive IPTV services and view them on another alternate electronic device such as a personal or laptop computer the electronic device itself performs the functional processing described herein in relation to the STBs used with televisions but does so by executing a middleware component designed for execution by a physical STB including emulating hardware capabilities of the physical STB to process IPTV content as if the electronic device were a physical STB.

The embodiments described herein describe a system which provides the seamless delivery of IPTV services to an alternative device such as a computing device such as the laptop computer illustrated in . Ideally such a system would be arranged and configured such that it can be integrated with existing IPTV technologies. This integration work involves primarily three areas 1 Video delivery some embodiments are based on standard broadcast technologies and not those which have emerged in relation to web based Internet TV services. This is because of the difference in viewing experiences described herein primarily in the segregation of text and moving images. 2 Conditional Access CA service providers require a means of controlling and managing access to the services. Each provider may have a different mechanism for controlling and managing access to the services. Subscribers may opt for varying levels of service and thus access to the content must be controlled via a conditional access CA system. This is typically implemented via the use of virtual or traditional hardware smart cards used in conjunction with STBs. Ideally such a system is managed from a single installation of the customer s CA head end and allows rights to be managed seamlessly over heterogeneous display devices. 3 Middleware middleware plays a key role in any IPTV system and determines the presentation layer of most services. The choice of middleware is determined by the viewer s chosen service provider and is typically of a client server architecture the client residing on the STB. Typically middleware includes an application management component an execution environment and the ability to access libraries Application Programming Interfaces known as APIs to control the underlying hardware OS.

i Category I middleware middleware which is embedded within the Document Object Model DOM of a STB s embedded browser. These products use vendor provided extensions to that environment in the form of scripting language libraries e.g. ECMAScript libraries to control the media management elements of the service and utilize standards based rendering technologies to render their user interfaces such as Hypertext Mark up Language HTML and Scalable Vector Graphics SVG or

ii Category II middleware middleware that is written directly on top of the low level APIs typically implemented in languages such as C or C provided by the STB vendors to control the media management elements of the service and typically utilize proprietary based rendering technologies to render their user interfaces.

Both approaches suffer from the problem that the STB vendor provided APIs both ECMAScript and C C are not standardized and therefore each middleware vendor must perform a porting exercise each time a new STB is to be added to their portfolio of supported end user devices.

Another problematic area facing computer based IPTV systems e.g. would be computer based IPTV systems that don t use a physical STB is that most known IPTV systems are designed to deliver IP encapsulated MPEG 2 4 content at 2 to 4 Mbps to users on multicast enabled networks. To date the general lack of multicast support within large portions of the available networks restricts the number of potential target clients. There are several commercial and technical factors in existence which remain barriers to the effective delivery of these services.

End users of television services are typically unconcerned with the underlying delivery mechanism employed to deliver the picture to their device e.g. Digital Terrestrial Television DTTV or DTT IPTV etc. . However they are concerned about the quality of the content which they wish to view and the ease of use with which they access that optimal quality content.

Therefore in some embodiments described with respect to the DVSS component the system is capable of presenting a high quality service and consistent navigational paradigm to the viewer while transparent to the user detecting selecting and presenting the best quality programming possible based upon the current position of the viewer s device within the network regardless of multicast support .

Known solutions attempt to address some of these difficulties although they typically involve considerable expense from the service provider in terms of both development and operational overheads to effectively create a parallel distribution mechanism encoding encryption delivery middleware integration device integration etc. and typically provide a different viewing experience in terms of presentation style and format navigational interfaces etc. from that which the viewer would expect from a traditional television based service.

In addition many proposed solutions focus on how to deliver IPTV content to an end user rather than how to process and or display that content once it has been received at the client end or how to improve replace the technology employed at the client end.

For example EP1895777 A1 discloses a method of providing an IPTV service to a subscriber and a network element for executing said method. This is achieved by introducing an additional tier an intertwine tier into the traditional tiered IPTV architecture. This intertwine tier includes IPTV service routers and a communication network thus enabling provision of an IPTV service between different networks which may belong to different operators and or be installed in different countries. Thus the disclosed method and element add roaming functionality to the existing IPTV service.

However the method and element disclosed in EP1895777 A1 do not enable a subscriber to receive and display ITPV content on an alternative device such as a computing device operating a STB emulation system. Instead the disclosed method provides an alternative architecture for delivery of the programming content to the subscriber and does not address the issues discussed above concerning the technology employed at the client end.

Similarly WO 2008 045384 A2 discloses an IPTV transport architecture with double layer encryption and bulk decryption. The disclosed transport architecture is designed to operate in accordance with a client s traditional television STB combination and does not provide a means of presenting the programming content on an alternative device operating a STB emulation system.

A number of systems are known in relation to STB simulation for the purpose of testing constrained isolated aspects of IPTV service delivery. For example the solution disclosed in EP 1914940 A1 provides a test apparatus for assessing the quality of an IPTV service and to locate and repair malfunctions. The test apparatus accesses the IPTV network from a central office as a simulation of the user s STB receives and analyses channel information and media contents downloaded from the IPTV network and then generates test results. This obviates the need for an operator to enter the user s premises and perform the test routine using manual test apparatus. Thus the STB simulation performed by the disclosed solution is limited such that it only simulates the way in which the STB presents itself to the network and receives information from the network. It does not present a fully operable STB emulation system which could be used to replace a user s STB and television and present the received content to the viewer. Thus it does not provide a means of performing all the functions required and expected of a physical STB.

Similarly US 2002 0026637 A1 discloses a computer program which allows a personal computer to emulate the functions of various STBs so that a combined video and an enhanced content stream can be displayed and randomly accessed to ensure that a desired layout is achieved with respect to the displayed content. The program is designed to facilitate quick and easy checking of the quality of the content presentation with modification to the combined content stream being permitted during the checks if required. Thus only one aspect of a traditional STB functionality is addressed by the disclosed solution which does not provide a complete alternative system for use in presenting IPTV content to an end user. The disclosed solution provides a means of pre viewing video and interactive content by a producer rather than presenting a complete service to a user.

Neither US 2002 0026637 A1 nor EP 1914940 A1 address the problem of integrating different forms of existing middleware products with a STB emulation system. Neither do they include simulation components to support or emulate other traditionally required functions such as conditional access and other network management functions.

As shown in operators are typically forced to consider an almost complete duplication of their television infrastructure when they decide to target devices such as PCs with services. This is generally because the protocols and technologies associated with web TV delivery as well as its navigational paradigms differ from those of IPTV implementations. This is largely a result of technological limitations than choice. When considering web TV services operators are usually forced to transrate or transcode their existing content into a more PC friendly format such as for example Windows Media and Flash formats. This then requires the employment of alternative Conditional Access and Digital rights Management DRM strategies and must finally re design their whole UI presentation layer to overcome the non TV nature of their target device. This leads generally to implementations where text flows around not over the video. and emphasize the point by illustrating the result of each of the architectures on the services that can be delivered to the end user.

The embodiments described herein may provide a means for receiving IPTV services on a user s device and presenting the IPTV content on the device such that the viewer enjoys continuity of programming service regardless of his her physical location or the underlying hardware software platform of the device. In one embodiment the user s device acts as an alternative to a traditional television and STB combination. In a typical embodiment said device is a personal or laptop computer although other electronic devices may be used. The embodiments described herein may provide a system and method for the simulation of a physical STB and to enable standard computing components to minor and mimic their televisual counterparts e.g. monitor CPU disk TV STB and VCR . The embodiments described herein can be easily integrated with known IPTV technologies for example the virtual STB may present itself to the IPTV head end system as if it were a physical STB and may execute the middleware component that has been designed for execution on the physical STB. The embodiments described herein may maintain substantially the same viewing experience as that experienced by a user when receiving and viewing televisual services via traditional i.e. television plus physical STB or alternative technologies. In other words the content navigational paradigm presentation and quality of service may be substantially the same as those enjoyed by users of traditional IPTV systems i.e. a physical STB being used in connection with a television set . For example when viewing said televisual content the navigational and presentation styles are maintained and the format of the content is the same or substantially the same as that experienced by a viewer using a physical STB and television set.

The embodiments described herein provide a means for emulation of a traditional physical STB such that a virtual STB environment is created within the viewer s computing device. In addition to the virtual STB environment there is provided a set of core APIs which act as conduits into the 3party middleware executing within the virtual i.e. emulated STB environment. The APIs service requests made by external applications and expose the functionality of the middleware to those applications. Thus the STB emulation system operates in conjunction with the set of core APIs to enable the maintenance of connectivity between standard category I and II middleware and the IPTV service provider. In one embodiment in order to facilitate management from the network operator perspective there needs to be direct access into the embedded middleware by the service provider. If the middleware belongs to category I this is achieved by DOM connectivity. If however the middleware belongs to category II then connectivity is achieved via the middleware s APIs which connect to the set of core APIs. Thus the emulated environment as described herein is agnostic to 3party middleware connectivity.

In one embodiment the emulation is achieved by a software based system which creates a virtual STB environment for other known software to interact with such that the emulation system running on the computing device presents itself to the network and service provider as if it were a physical STB connected to a television. The embodiments described herein may be resource efficient especially in respect to CPU usage and memory .

In one embodiment 3party middleware appropriate to the viewer s chosen service provider is embedded within the emulation system. The emulation system acts as a wrapper around the 3party middleware. In one embodiment a STB emulation system is installed on the end user s i.e. viewer s device said emulation system encapsulating 3party middleware which is appropriate for and compatible with the delivery system deployed by the user s chosen IPTV service provider. In one embodiment the STB emulation system provides an API based STB emulation environment within which known 3party middleware both category I and II is able to execute. The execution and performance of the middleware is preserved in its traditional form and the 3party middleware interacts with the virtual STB environment as it would with a traditional STB operating within a traditional IPTV system. In this embodiment no modification of the vendor s middleware is required. These embodiments allow the viewer to view televisual content on an electronic device such as a personal or laptop computer or other electronic device by providing a virtual STB environment within the device said virtual environment being able interface and interact with known 3party middleware such that all aspects of functionality performance and presentation formats are substantially identical to those enjoyed by users of a traditional IPTV i.e. STB plus TV configuration.

It should be noted that a typical embodiment of the emulation system described herein provides at least two sets of distinct APIs 

The emulation components of the depicted embodiment include a presentation manager a codec manager a conditional access CA manager and a DVSS component . Alternatively other interfaces may be included so as to extend the set of capabilities or alternatively some interfaces described below may not be required in alternative embodiments.

The presentation manager communicates with the host operating system such as with the audio and video drivers to control the presentation of the IPTV content and a user interface UI on the display of the computing device . The presentation manager refreshes the display . The graphics interface provides the middleware component with the emulated STB environment with a mechanism to inform the underlying graphical subsystem e.g. audio and video drivers and presentation manager that something has changed and that underlying graphical system should now refresh itself. The MUX interface may be used to enable the middleware component to control the UI and video mixing capabilities e.g. including chroma keying and alpha blending .

The codec manager manages the encoding and or decoding of the IPTV content e.g. digital data stream or signal for example using Codec I and Codec II . In this embodiment the system can have one or more different codecs that can support various types of formats such as MPEG 1 MPEG 2 MPEG 4 WMV Flash VC1 Flash or the like as represented by the Codecs I and II and . These codecs and can operate simultaneously concurrently or individually. In one embodiment the codecs are software codecs. In another embodiment the codec manager can manage encoding and or decoding using hardware codecs and the codecs I and II and represent the interfaces to the hardware codecs.

The conditional access manager is a mechanism that controls and manages the user s ability to access the IPTV content i.e. programming content or services provided by a network provider. In the depicted embodiment the conditional access manager interacts within one or more CA modules or mechanisms provided by one or more different vendors as represented by CA I IV . For example different types of vendors may use different CA mechanisms and CA I IV represent that the system can support various types of CA modules or mechanisms. In some embodiments subscribers may opt for varying levels of service and thus access to the content is controlled via the conditional access manager . Unlike physical STB that use a traditional hardware smart card the embodiments described herein may use a virtual smart card. Ideally such a system is managed from a single installation of the customer s CA head end system and allows rights to be managed seamlessly over heterogeneous display devices. The CA manager communicates with the host operating system such as with the network and event drivers to communicate keys to from the CA head end system to control access to the IPTV content. The CA manager is an easy mechanism to deliver and manage IPTV content from a network provider s prospective. Alternatively other CA mechanisms may be used such that a service provider is able to control and manage the user s ability to access the programming content.

The CA interface may be used to enable the middleware component to initiate the registration of 3party conditional access subsystems and to interact with the features provided by those vendors. The media interface may be used to enable the middleware component to control the requesting decoding and displaying of the data streams e.g. IPTV content . Said data streams could contain audio video or data information. In one embodiment the media interface abstracts the middleware component from the underlying transport protocols and codecs required to display the content and simplifies them into a number of simple play commands.

The DVSS component determines and acquires the optimal quality programming possible based on the current position of the user s device within the network for example by receiving the IPTV content in one of the different protocols for example RSTP IGMP Digital Video Broadcasting DVB or others such as peer to peer P2P streamlets e.g. HTTP streamlets described below. Fundamentally the DVSS component addresses the afore mentioned need to relieve the viewer of the burden of deciding which underlying mechanism is required to receive the desired televisual content. The viewer is not typically concerned with selection between RTSP IGMP DVB S C T or others e.g. P2P HTTP streamlets . Thus the media interface services requests from the DVSS component of the vSTB environment such that the viewer is able to simply select the content he or she wishes to watch the technical aspects of the optimal delivery mechanism being handled behind the scenes without user manually selecting the delivery mechanism. The DVSS component has the capability to make decisions based on the network environment on how best to source and deliver the requested content. In one embodiment this abstraction is continued with respect to both container formats and media types being able to seamlessly decode multiple formats such as MPEG 1 MPEG 2 MPEG 4 WMV Flash etc. Alternatively other components may be used to provide an IPTV system for receiving and presenting IPTV services on a user s device such that dynamic DVSS is achieved where the system is able to determine and acquire the optimal quality programming possible based on the current position of the user s device within the network. This source selection may be achieved dynamically without the need for explicit input from the user. Alternatively the source selection may be achieved with some or minimal input from the user such as the user s preference.

The events interface is the primary interface existing between the network and event drivers of the OS for keyboard mouse and remote control devices to pass their inputs actions on to the middleware component within the emulated STB environment . The events interface may communicate with the network and events drivers using a Remote Control RC key handing interface and keyboard mouse Kb M interface . Alternatively the events interface may interface with other user input devices.

The network interface may be used to support the abstracted network delivery required by the media interface . The network interface provides modules for supporting standard video delivery mechanisms IGMP is provided to handle multicast IP based broadcast content an intelligent RTSP proxy is provided to communicate in the appropriate RTSP dialect with RFC2326 based servers. HTTP and HTTPS interfaces are also provided for standard Web . based communications.

The system settings interface may be used to enable the operator to configure the virtual environment in accordance with his or her needs and without having to make changes to the STB emulation component itself e.g. . In one embodiment the STB emulation system can be configured or tailored to the viewer s or service provider s requirements via the use of configuration files which store settings to enable and facilitate the management and control of the behavior of the STB emulation system .

The persistent storage interface may be used to provide a mechanism for the middleware component executing within the emulated environment to store both content and content metadata on the local system to enable such features as a personal video recorder PVR and off line modes to be implemented. Additionally this may facilitate the operation of some middleware products which require this feature to cache carousel delivered electronic programming guide EPG metadata. Both the system setting interface and the persistent storage interface communicate with the disk and memory drivers of the OS .

In one embodiment the STB emulation system is implemented in a computing device that is configured and arranged such that the OS is able to execute on said computing device and is connected to a network such that data may be received from external source s over the network and or sent to external source s over the network. In another embodiment the computing device is configured and arranged to include one or more hardware components such as those included in a typical personal laptop computing system. Such hardware components may include but not be limited to 

In one embodiment the STB emulation system provides a virtual STB application environment which not only emulates the underlying hardware capabilities of a physical STB e.g. video scaling video positioning chroma keying alpha blending UI layout Remote Control key handling etc. but also provides the same software environment in terms of available APIs and libraries such that 3party middleware is able to execute in this environment without modification even though the middleware was designed originally for use with a physical STB and television set rather than with a computing device operating the STB emulation system .

In another embodiment the STB emulation system provides an IPTV system for receiving and presenting IPTV services on a user s device such that DVSS is achieved where the system is able to determine and acquire the optimal quality programming possible based on the current position of the user s device within the network. This source selection may be achieved dynamically without the need for explicit input from the user or alternatively with user input.

The embodiments described herein may also provide a means of receiving and presenting said IPTV service such that 3party category I or category II middleware described below designed for execution by a physical STB can execute in its usual manner and provide the same functionality on the viewer s computing device without any alteration or modification even though it was designed originally for use with a physical STB rather than a computing device. The maintained functionality will typically include the ability to perform presentation layer rendering video blending and multi media control and the provisioning of UIs.

In one embodiment the player component includes one or more sub components such as a hardware abstraction layer a video codec component a DVB subtitle codec component a PID filter and an audio codec component . These components are used to render the video graphics and or text and to present the audio on the screen and speakers of the customer equipment . These components can also be used to receive input from the user input devices such as keyboard mouse remote control and or the like to report back navigational events to the embedded web browser .

In one embodiment the API libraries are implemented in a language such as Javascript and may include a display API which provides connectivity with said player component an AV API which provides connectivity with a DVSS controller which in turn integrates with said DVSS component and an Event API which provides support for requests made by the management component .

In one embodiment embedded web browser performs the UI functionality. The embedded Javascript APIs enable the browser to integrate with various other subcomponents of the STB emulation system to control the user interface. For example the display API may be provided so as to handle requests made via the browser and requiring action by a sub component of the player component . Similarly the AV API and the event API may be provided so as to handle communication between the browser with the other components and sub components of the STB emulation system .

In one embodiment the management component includes sub components such as a scheduler a log statistics maintenance component a license manager for handling the licensing of the STB emulation system a TR 135 client that allows the device to be managed for example by standards based management servers e.g. TR 069 based management servers and an Event Listener which interacts with the event API provided within the Javascript API libraries . In one embodiment the management component enables a network operator to manage the STB emulation system as if it were a network device such as a router or a physical STB. In one embodiment the management component is used in order to deploy various components of the system to many residential viewers.

In one embodiment the DVSS component further includes sub components such as but not restricted to a PVR controller an IGMP client a RTSP client and a DVB T client . The DVSS component integrates with the DVSS controller which in turn is supported by the AV API contained within the Javascript API libraries . In one embodiment the DVSS component also integrates with a decryption component which integrates with said player component . In one embodiment the decryption component is receives signals from a dynamically selected source decrypt said signals and pass them on to the player component for further processing and display.

In one embodiment the STB emulation system can be configured or tailored to the viewer s or service provider s requirements via the use of configuration files . The configuration files may store settings to enable and facilitate the management and control of the behavior of the STB emulation system .

In the depicted embodiment the STB emulation system interacts with components of the customer s equipment . In one embodiment the customer s equipment includes user input devices such as keyboard mouse remote control and or the like screen and speakers an operating system e.g. Windows based OS Mac based OS Linux based OS Unix based OS etc . The hardware of the customer s equipment such as the user input devices and screen and speakers communicate with the hardware abstraction layer of the player component . The customer s equipment further includes a network interface such as a network interface card which communicates with the head end infrastructure e.g. IPTV head end system as described above . The head end infrastructure may include a DRM entitlement server a multicast streamer a RSTP server an IPTV middleware server and a license server which each communicate with the STB emulation system via the network interface . The DRM entitlement server may be responsible for authenticating the client device and for performing secure key exchanges with the client device. The multicast streamer may be the output stage of a DVB to IP Gateway. The component delivers UDP datagrams to the network which encapsulate the video date e.g. MPEG video data. The RTSP Server may be a RFC2326 compliant server controlled by the client device to achieve VoD functionality. The IPTV middleware server may be responsible for orchestrating the user experience as well all transactional based services such as for example VoD payments and Pay Per View PPV events. The license server may be responsible for version control of the deployed vSTB software. Operators can suggest upgrades to the user force upgrades on the user and or revoke product use all together. The customer s equipment may also support various protocols such as HTTP s which can be used to communicate with the management component USB DVB T which can be used to communicate with the DVSS component e.g. DVB T client and Universal Plug and Play UPnP which can be configured to communicate with the DVSS component e.g. PVR controller and other network devices such as remote storage . The customer s equipment may also include local storage .

As previously stated viewers of IPTV programming content are not generally concerned with the underlying delivery mechanism s used to provide their viewing content. They do however care about the quality of that content and the ease with which they can access their desired programs. As such embodiments of the DVSS component may be used to present the viewer with a consistent viewing experience e.g. consistent navigational paradigm while behind the scenes determining and acquiring the best quality programming available based upon the current position of the client device within the network. The DVSS component can be used to switch between sources from which it can receive the media content such as by receiving IPTV content using IGMP or receiving the media content using different protocols for example RSTP Digital Video Broadcasting DVB or others such as peer to peer P2P or streamlets e.g. HTTP streamlets . In another embodiment the STB emulation system may not include the DVSS component and may communicate only through the closed network using IGMP for example.

Using the DVSS component the STB emulation system can provide a single experience of optimal quality on any network regardless of whether the network in which the client device is located is a multicast enabled delivery network. In one embodiment the use of the DVSS component removes the requirement of using a closed network for delivery of the IPTV to the client device when the client device is not located within the closed network. In another embodiment the provision of the DVSS component removes the need for a closed network and allows the client device to receive regular DVB based broadcast feeds typically via a USB based DVB T dongle and thus it is not mandatory that the video packets received via the network are encapsulated in IP.

The DVSS component may provide a consistent viewing experience using any available network while maintaining optimal quality of service. In one embodiment the DVSS component can determine that the client device can receive the media content through a closed network that supports for example IGMP or through an open network that supports HTTP for example. The DVSS component can determine which delivery mechanism to use in order to provide the user with the best quality programming available. For example the DVSS component may detect that it is located within a P2P based delivery network or a HTTP based delivery network e.g. CDN and the DVSS component can retrieve the media content over one of these other types of networks instead of through the closed network. There may be other scenarios where the DVSS component detects multiple networks for delivery of the media content and the DVSS component detects which of these sources can provide the highest quality to the viewer regardless of the delivery protocol selected e.g. IGMP HTTP or the like . It should be noted that these embodiments allow the STB emulation system to possibly retrieve the same set of channels over a different delivery mechanism when located within certain network environments.

For DVSS the DVSS component needs to know how to determine in which network it finds itself and how to issue the appropriately formed request in order to deliver the requested media content to the viewer. The functionality of the DVSS component can be decomposed into a number of key technical areas 1 Dynamic network awareness and 2 Dynamic addressing and sourcing. For dynamic network awareness the DVSS component needs to be aware of the environment in which it finds itself. In one embodiment the DVSS component has the ability to detect the capacity of a network to deliver multicast traffic and if so at what bitrate. The bitrate calculation should also take into account the possibility of two or more devices which are attempting to source content over the same DSL line. There are a number of ways of determining the networks capability for example simply issuing an IGMP request which fails is sufficient to determine lack of multicast support. Having determined the network environment dynamic addressing and sourcing implies that the metadata collected at the head end should not multiply based on the number of delivery mechanisms available to us. In one embodiment the DVSS component selects the appropriate URI syntax to request the media content. Selecting the appropriate URI syntax can also be done in a number of ways for example In one embodiment the DVSS component uses a consistent addressing schema to request the media content from the different sources 

In another embodiment a simpler approach would be to use a common identifier for the content and then allow the client to determine the appropriate delivery mechanism. For example a channel asset is typically created for Channell by associating it with a URL in the form of IGMP xxx.xxx.xxx.xxx 5000. This is unfortunate as it strongly implies that a multicast network is available e.g. IGMP . In another embodiment client device can simply ignore the URL and use a unique channel name as a key to communicate with the other receives such as P2P DTT or HTTP. Alternatively other mechanisms may be used to request the content from the various sources.

In another embodiment the DVSS component provides the ability to issue the appropriate requests independent of original URI based information this could perhaps be from multicast USB based DVB T devices or other streaming technologies such as P2P or HTTP streamlets.

In the depicted embodiment the STB is also configured to receive media content using a non IPTV based delivery system e.g. TV broadcasts over the air such as from a broadcasting source . In this embodiment when the DVSS component receives the media content over the non IPTV based delivery system via the DTT client. The STB receives the media content over the air using a USB based DVB T dongle for example. Alternatively the STB receives the media content over the air using other mechanisms as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.

In one embodiment when using the HTTP delivery network the STB may request the media content using the concept of streamlets. The term streamlet as used herein refers to a single encoded representation of a portion of the video. Each streamlet may be an individual a portion of the media content and may be encapsulated as an independent media object allowing the streamlet to be cached individually and to be independently playable by a media player. In one embodiment the individual portion is stored in a file that can be individually requested and cached for example using a content delivery network CDN . Each of these individual files may be independently or individually playable meaning the file can be played without the need of the previous or subsequent file in the media content. In one embodiment a streamlet is a static file that can be served by a non specialized server instead of a specialized media server. In one embodiment the content in a streamlet may have a predetermined length of playback time. The predetermined length of time may be in the range of between about approximately 0.1 and 5.0 seconds for example. The content in the streamlet may have a unique time index in relation to the beginning of the content contained in the stream. Alternatively the streamlets may be divided according to a file size instead of a time index. The term stream as used herein may refer to a collection of streamlets of the video encoded by the same video quality profile for example portions of the video that have been encoded at the same video bit rate. For example the media content of a television program may be encoded according to ten different video quality profiles one streamlet for each portion of the media content per profile. The streamlets may be stored as separate files on any one or more of the web servers or the proxy caches or other devices within a CDN. The separate files e.g. streamlets may be requested from the web server using HTTP. Using a standard protocol such as HTTP eliminates the need for network administrators to configure firewalls to recognize and pass through network traffic for a new specialized protocol such as Real Time Streaming Protocol RTSP . Additionally since the media player initiates the request a web server for example is only required to retrieve and serve the requested streamlet not the entire stream. The media player may also retrieve streamlets from more than one web servers. These web servers may be without specialized server side intelligence to retrieve the requested portions. In another embodiment the streamlets are stored as separate files on a cache server of a network infrastructure operator e.g. an ISP or other components of a CDN. Although some of the present embodiments describe the use of streamlets the embodiments described herein are not limited to use in computing systems that use streamlets but may also be implemented in other systems that use other techniques for delivering live media content over the Internet. For example in another embodiment the media content is stored in a single file that is divided into portions that can be cached in the CDN using HTTP range requests.

In the depicted embodiment the head end architecture also includes a content management system an IPTV platform and an Accounting Rating and Billing ARB system . The content management system is a central repository providing the link between physical stream arriving for encoding their abstract representation within the IPTV middleware and their material values as defined within the billing system. The IPTV platform is a centralized middleware server responsible for the end users viewing experience. The IPTV platform can communicate with the STB to send encryption keys metadata etc. using HTTP protocol. The ARB system is a system responsible for understanding what content is being purchased by which consumer at any point in time. Therefore being able to present to that user the appropriate discounted price for any item buy one get one free for example and to manage all financial transactions with respect to the purchase of that item credit card billing direct debits and physical bill printing .

In the depicted embodiment the client device represents anyone of the client device and includes the STB emulation system . In another embodiment the DVSS component may be integrated into a physical STB.

The STB emulation system includes a network stack that receives the network traffic including encryption keys IPTV content e.g. IGMP received through the multicast enabled delivery network or the media content received through a unicast enabled delivery network such as using RTSP HTTP P2P or the like. The decryptor receives the video from the network stack and decrypts the media content and sends it to the codec. The network stack also receives the graphics and or text for the UI for example from the IP platform such as graphics and or text for the electronic programming guide closed captioning text etc. The browser application interfaces with the graphics controller and the video controller via Javascript APIs. The mux handles the UI and video mixing capabilities as described herein and communicates with the hardware abstraction layer to present the video on the display play any audio on the speakers of the client device . The hardware abstraction layer also receives navigational events from the mouse keyboard or remote control. These events are communicated to the browser application.

In the depicted embodiment the service delivery platform is coupled to the customer care management . The customer care management mayh be a third party management tool typically the network operators that provides a management view of the complete television subsystem. This allows the third party to manage the service with respect to consumer provisioning suspension cessation and all other forms of operational queries from their own call centers.

In another embodiment Mr. A purchases an additional physical STB and subscription for his home . When Mr. A selects 1 on his new remote for BBC 1 this time the physical STB issues the IGMP request for BBC 1. However his ISP may or may not support multiple streams for a single residence. If the ISP does support multiple streams to Mr. A s home for example if two STBs are operating at the same time the IGMP request will succeed. If not the physical STB which include the DVSS component described herein will re issue a request for the media corresponding to BBC 1 from a non multicast enabled network such as an open network like the Internet. In one embodiment the physical STB requests a HTTP streamlet from a CDN or from a content server over the open network e.g. HTTP enabled delivery network . The end result is that Mr. A gets BBC 1 even though it may now be through a completely different delivery mechanism and or using different delivery protocol.

In another embodiment Mr. A purchases a PC extension to his subscription. Mr. A selects BBC 1 on the laptop and the vSTB STB emulation system as described above issues the IGMP request for BBC 1. Mr. A s ISP may or may not support multiple streams. If the ISP does support multiple streams to Mr. A s home for example if another STB is operating at the same time as the vSTB the IGMP request will succeed. If not the vSTB will re issue a request for the media corresponding to BBC 1 from a non multicast enabled network such as an open network like the Internet. In one embodiment the vSTB requests a HTTP streamlet from a CDN of the open network or from a content server over the open network e.g. HTTP enabled delivery network . The end result is that Mr. A gets BBC 1 even though it may now be through a completely different delivery mechanism and or using different delivery protocol.

In another embodiment Mr. A Purchases a Roaming capability for his PC subscription and visits a hotel on a business trip. Mr. A selects BBC 1 on the laptop and the vSTB on his laptop issues the IGMP request for BBC 1. Since Mr. A is connected to the open network which does not support multicast streams the vSTB issues a request for the media corresponding to BBC 1 from the non multicast enabled network . In one embodiment the vSTB requests a HTTP streamlet from a CDN of the open network or from a content server over the open network e.g. HTTP enabled delivery network . Similarly Mr. A may visit a relative s house that has an ISP which is a closed network that does not support multicast. Mr. A. selects BBC 1 on the laptop and the vSTB on this laptop issues the IGMP request for BBC 1 from the non multicast enabled network ISP A . Since Mr. A is connected to the closed network which does not support multicast streams the vSTB issues a request for the media corresponding to BBC 1 from the non multicast enabled network . The end result is that Mr. A gets BBC 1 even though it may now be through a completely different delivery mechanism and or using different delivery protocol.

With reference to one feature that makes the vSTB of the present embodiments immediately valuable to third party developers is its ability to provide an emulated API for a number of existing hardware based STBs such as the Amino Aminet. The API of the STB emulation system is wrapped in a number of pure Javascript emulations that present the API of the native physical STB while mapping the calls through to the applications executing in the STB emulation system indicated as igloo objects A . In the oval objects labeled A represent the proprietary vanilla APIs of the STB emulation system the ellipses labeled B represent the emulated set top box specific APIs these APIs match the API of the specific set top box but map calls to the igloo APIs of the STB emulation system the arrows labeled C represent the mapping of the set box specific APIs to the igloo APIs of the STB emulation system and the arrows labeled D represent the IPTV middleware communicating with the emulated set top box specific APIs. It should be noted that middleware can be authored either by writing directly to the proprietary vanilla API or to the abstracted STB specific APIs according to various embodiments.

Due to the limitations imposed by the Cross Platform Component Object Model XPCOM with respect to model overloading default method parameters and additional cross browser incompatibility issues a technique of injecting the API directly into the web page as it is loaded has been implemented. This achieves the same goal of transparency to the user of the APIs and maintains the ability to use good object orientated principles as well as being browser agnostic.

One of the main functions of the vSTB in one embodiment is the switching between media streams. This stream switching can be in response to a user input for example requesting a change from one channel of TV programs to another or the selection of a new stream by the virtual set top box from a selection of multiple sources and delivery mechanisms streaming the same content. In one embodiment the three main components involved in media stream switching are the main container application labeled as CProgrammeSource the UI component encapsulated by the embedded browser labeled as ClnukBrowser and a number of protocol specific stream handlers in this instance the multicast specific handler labeled as ClgmpController .

The embedded browser abstracts an underlying browser implementation such as for example WebKit or Mozilla. The ClnukBrowser is a global object initialized in main in igloo.cpp. ClnukBrowser creates the browser window using Mozlib and receives mouse and keyboard events from the Simple DirectMedia Layer SDL and passes them on to the browser window. It also receives events from the Javascript client and sends back responses via a registered listener.

The CProgrammeSource is a global object in igloo.cpp which acts as a container for assorted video sources including those coming from a personal video recorder PVR or multicasts. CProgrammeSource allows the joining of a channel by URL and it encapsulates the modes that a channel can be in for example off air encrypted from a PVR a multicast a video on demand VOD and DVSS. In this instance the DVSS component invoked during the PlayChannel url call has determined that the client device is in a multicast capable environment and as such elects to utilize the underlying multicast stream handler ClgmpController. The CProgrammeSource creates a transport stream plaza a multicast buffer and a multicast socket. It creates a table parsing thread on joining a channel and stops that thread on leaving. The CProgrammeSource holds the frame rate that is set from CodecLibAv CH264Codec and read by various components although not may not be used itself in CProgrammeSource. It also holds an offAirTimeout which detects channel loss based on packet delivery anomalies. CProgrammeSource also creates a CVideoController which is sub classed depending on the source type for example file IGMP RTSP HTTP etc.

The CIgmpController implements the CVideoController for IGMP streams. On connection it uses an injecting multicast socket to join a multicast group. It creates a receive thread and injects the multicast buffer and connected socket. The thread receives data from the socket splits it into Digital Video Processor DVP packets and puts each packet into the multicast buffer. On a stop command the socket disconnects from the multicast group.

The sequence diagram shown in illustrates the operation of the above components in the media switching process. Referring to this sequence diagram illustrates the process occurring once a media stream switch has occurred showing what happens to an h.264 video packet when it is received in the transport stream.

Referring to this sequence diagram illustrates the process of synchronizing the audio and video data received using an audio call back mechanism that allows the video rate to be determined by the audio frequency. With the ability to switch between media sources and to synchronize the playback of audio and video components of the streams already programmed into the software of STB it is then necessary to provide an interface through which third party applications can take advantage of these features using an application programming interface API of the STB.

When producing a new virtual set top box a developer uses the API of the STB to feed the incoming data stream to the middleware and receives output signal from the middleware which is then used to produce the output display to the user on the display device. The APIs are presented to the developer through the DOM document object model DOM of the embedded Mozilla based browser. Communication is achieved through a combination of events and manipulation of the HTML DOM as follows. When the browser based application the middleware loads the browser creates an object called IglooController which inserts an element referred to as into the head of the HTML document. The element has two string fields a request field and a response field. When the middleware needs to issue a command to the virtual set top box it locates the element and sets the request field. The controller then generates an iglooEvent event and dispatches it. LLMozlib is a listener that receives the event. On receipt the LLMozlib locates the element and examines the contents of the request attribute. LLMozlib then calls the on IglooEvent on all registered LLEmbeddedBrowserWindowObservers to which the ClnukBrowser is a child of. The browser passes the command stream to processCommand. If igloo needs to pass a response back it calls sendlglooResponse in LLMozlib which set the response attribute of the element. Meanwhile the IglooController has been waiting in a spinlock for something to set the response attribute. Once this response attribute has been set the IglooController reads it sets the contents to and returns to its caller. The sequence diagram of illustrates this process.

The architecture of the vSTB of one embodiment is specifically designed to be platform independent and to take advantage of any native hardware acceleration where this is available. This is achieved using the abstraction layer which provides a common interface to hardware platforms specific features. This interface is an abstraction of the specific implementation details of each hardware platform that the applications of the present invention run on. This application layer is important for a number of reasons and has the significant advantage that the applications can run on a new platform by simply writing a new abstraction layer without changing the application code. It also provides a logical separation between the platform specific code and the code of the applications of the present invention making the process of maintenance of this code more straightforward. The initial platform abstraction is implemented using the Simple DirectMedia Layer SDL foundation library and additional interfaces that call the operating system functions directly. While SDL provides a basic platform independent interface capability for various hardware platforms it cannot effectively handle all hardware specific accelerations for example graphical blitting operations. Such operations particularly where images are stretched and resized are computationally expensive and therefore require acceleration. In one embodiment the STB emulation system independently implements hardware acceleration by means of MMX specialized registers and as a result a significantly decreased use of the CPU.

The abstraction layer consists of a number of components that provide interfaces to the threading timing event handling graphics and audio subsystems. illustrates how the abstraction layer used in the present invention relates to the third party APIs such as SDL DirectX and OpenGL and also to the operating system. The graphics and audio interfaces are created during the run time using the CGraphicsFactory and CAudioFactory classes. Alternatively these can be implemented using plug ins.

The abstraction and rendering subsystems are illustrated in and the remainder of components is then implemented in a platform agnostic manner operating above the hardware abstraction layer.

The application is implemented in a multi threaded manner for both performance and resilience purposes. The main thread clusters are split into global threads responsible for overall operation of the application and per channel events which are localized instances responsible for the streams. The global threads look after activities such as event handling video rendering and audio call backs while the per channel threads are responsible for stream based activities such as socket connections stream parsing and codec management. These thread pools are illustrated in . Overlaid above the thread handling model are specific data flows such as that of the raw data received to AV display and illustrated in . The remaining subsystems of the present invention are illustrated in .

In one embodiment in order to support the secure storage of application leveled data in the vSTB a secure cookie store has been implemented within the browser. This may be achieved by modifying the original Mozilla source code and adding a call to a generic encryption library specific to the present application used for the secure properties file. This approach may transparent to both the user and the webpages using the cookies and as a debug feature the resulting cookies.txt file can be read with the PFE properties profile editor. The generic encryption library provides encryption and decryption features using the Tiny Encryption Algorithm TEA .

In one embodiment the vSTB has a basic RSC2326 RTSP stack implementation augmented by the ability to dynamically detect and alter its behavior based on various dialects of RTSP implemented by the server fenders as illustrated in .

An important advantage of the present invention may be the ability to blend the graphical user interface on top of a moving video stream in a way that is familiar to the user. In other words the output from the middleware in the vSTB produces the same on screen menu overlaying or alongside streaming video as its equivalent hardware based physical STB. Alternatively the embodiments described herein may provide other advantages as described herein.

One problem that arises relates to color format information. The h.264 codec returns video in YUV format while a browser returns an RGB bitmap requiring one format to be modified to the other. Because SDL does not handle complex YUV functions well the CPU must be used to perform YUV alpha blending and the merging of the layers. This YUV video must then be converted to RGB in the hardware just prior to displaying on screen as monitors can only display RGB. An immediate advantage of converting the YUV video frames to RGB is that the frames can use the chroma key when a previous frame pixel was the same color as the next frame pixel. This approach also allows de interlacing of the video and the ability to perform advanced image manipulations.

The YUV to RGB algorithms implemented are extremely fast and also handle color anomalies near the extremes of the RGB color values. A fast clipping function has been developed to enhance performance as well as to improve alpha blending capabilities. Each pixel is tested in order to compare with the chromakey value. Pixels that match the color mask allow the video pixel to be shown through unaltered. Pixels that do not match the chromakey are alpha blended 128 bit on top of the video layer.

It should be noted that the above mentioned embodiments illustrate rather than limit the invention and that those skilled in the art will be capable of designing many alternative embodiments without departing from the scope of the invention as defined by the appended claims. In the claims any reference signs placed in parentheses shall not be construed as limiting the claims. The singular reference of an element does not exclude the plural reference of such elements and vice versa. Some embodiments may be implemented by means of hardware including several distinct elements and by means of a suitably programmed computing device. In a device claim enumerating several means several of these means may be embodied by one and the same item of hardware. The mere fact that certain measures are recited in mutually different dependent claims does not indicate that a combination of these measures cannot be used to advantage.

