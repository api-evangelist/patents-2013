---

title: Recipe-based application conversion
abstract: An installation package associated with an application is obtained. Installation of the application in a first type of system is analyzed based at least in part on the installation package. A first set of changes made to the first type of system resulting from installation of the application in the first type of system is identified. Based on the first set of changes, a second set of changes made to a second type of system resulting from installation of the application in the second type of system is identified, and a recipe identifying the second set of changes is generated. A new installation package associated with the application can also be generated. This new installation package is configured for installation of the application on the second type of system, and is based at least in part on both the recipe and the installation package.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116770&OS=09116770&RS=09116770
owner: Microsoft Technology Licensing, LLC
number: 09116770
owner_city: Redmond
owner_country: US
publication_date: 20130315
---
This application is a continuation of U.S. patent application Ser. No. 12 465 793 filed May 14 2009 entitled Recipe Based Application Conversion the entire disclosure of which is hereby incorporated by reference herein in its entirety.

As computing technology advances the manner in which systems operate changes over time. While these changes typically provide numerous benefits and advantages migrating to these changed systems can be problematic. For example applications can be designed to be installed on an older system and an installation package with various files and data can be generated to allow the application to be installed on the older system. However newer systems operating using different techniques can require applications to be installed in different manners so situations can arise where the installation package for installing the application on the older system cannot be used to correctly install the application on the newer system. This can result in users having applications that cannot be installed on their new systems leading to user frustration.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In accordance with one or more aspects an installation package associated with an application is obtained. Installation of the application in a first type of system is analyzed based at least in part on the installation package. A first set of changes made to the first type of system resulting from installation of the application in the first type of system is identified. A second set of changes made to a second type of system resulting from installation of the application in the second type of system is identified and a recipe identifying the second set of changes is generated. This second set of changes made to the second type of system is identified based on the first set of changes made to the first type of system.

In accordance with one or more aspects in a first type of system an installation package associated with an application is obtained with the installation package being configured for installation of the application on a second type of system. A recipe corresponding to the application is also obtained with the recipe identifying a first set of one or more changes to be made to the first type of system when installing the application on the first type of system. This first set of one or more changes is based on a second set of one or more changes made to the second type of system resulting from installing the application on the second type of system. A new installation package associated with the application is also generated. This new installation package is configured for installation of the application on the first type of system and is based at least in part on both the recipe and the installation package.

Recipe based application conversion is discussed herein allowing an application to be converted for installation on one type of system to installation on another type of system using a recipe. A first installation package configured to install an application in one type of system is analyzed and a set of changes made to that type of system resulting from installation of the application on that type of system is identified. A second set of changes is also generated and stored as a recipe associated with the application. This second set of changes identifies changes that are made to a second type of system when installing the application on the second type of system. This second set of changes is generated based on the set of changes made to the one type of system resulting from installation of the application on that one type of system as well as differences between the two types of systems. This recipe can be used in conjunction with the first installation package to generate a second installation package that can be used to install the application on the second type of system without requiring any changes to the first installation package.

System can be implemented using a variety of different computing devices capable of running applications. For example system can be implemented in a desktop computer a mobile station an entertainment appliance a set top box communicatively coupled to a display device a cellular or other wireless phone a game console an automotive computer and so forth. Thus system can be implemented in devices ranging from a full resource device with substantial memory and processor resources e.g. personal computers game consoles to a low resource device with limited memory and or processing resources e.g. traditional set top boxes hand held game consoles . System is typically implemented on a single computing device but can alternatively be implemented across multiple computing devices.

System can analogous to system be implemented using a variety of different computing devices ranging from a full resource device with substantial memory and processor resources to a low resource device with limited memory and or processing resources. System is typically implemented on a single computing device but can alternatively be implemented across multiple computing devices.

Different types of systems are implemented using different software typically different operating systems or versions of operating systems. There can also be various differences in hardware and or firmware on which the different types of systems are implemented. The manner in which different types of systems operate can vary. For example different types of systems can implement operating system registration stores in different manners different types of systems can have different rules regarding how operating system registration stores are accessed different types of systems can have different rules regarding which folders or directories files can be stored in and so forth.

Recipe service is a service that maintains one or more recipes . Each of these recipes can be used in conjunction with an installation package configured to install an application on a particular type of system to install that application on another system. Recipes and their use are discussed in more detail below. Recipe service can analogous to system be implemented using a variety of different computing devices ranging from a full resource device with substantial memory and processor resources to a low resource device with limited memory and or processing resources. Recipe service can be implemented on a single computing device or can alternatively be implemented across multiple computing devices.

System includes a recipe generation module that generates a recipe associated with an application. System communicates the generated recipe to recipe service which stores the received recipe as a recipe . Recipe service maintains a correspondence of recipes to applications allowing the particular recipe corresponding to a particular application to be subsequently identified.

System includes a recipe based installation module . When installing an application from an installation package that has not been configured for system installation module obtains the recipe corresponding to that application from recipe service . Installation module can then use the obtained recipe along with the installation package to install the application on system .

In system a recipe is generated on one type of system system and used for installation of an application on another type of system system . illustrates another example system implementing the recipe based application conversion in accordance with one or more embodiments. System can be implemented using a variety of different computing devices analogous to system of . System includes a recipe generation module that generates recipes analogous to recipe generation module of . System also includes a recipe based installation module that installs an application using a recipe analogous to recipe based installation module of . Accordingly system can generate the recipe for an application and install the application using that recipe in conjunction with the installation package for the application . As system generates the recipe no recipe service of need be accessed by system to obtain the recipe.

It is also to be appreciated that system can be used in system of . For example recipe based installation module of system can access recipe service to obtain a recipe for an application and if no such recipe is available from recipe service then recipe generation module can generate the recipe.

Recipe is associated with the application that can be installed using installation package . This association allows recipe to be saved and subsequently used by different computing devices. Recipe can be saved for example in recipe service of . Alternatively if recipe is being generated and used by the same computing device e.g. the device implementing system of then no such association between installation package and recipe need be maintained.

Recipe can be associated with the application that can be installed using installation package in a variety of different manners. In one or more embodiments a representation of installation package is generated that allows installation package to be distinguished from other installation packages. This representation is also referred to as an application id identifier and can be for example a hash value generated by applying a hash algorithm to installation package or a portion thereof e.g. one or more files included in installation package . Any of a variety of different well known hash algorithms can be used to generate this hash value. This hash value can then be stored in recipe or alternatively a list or other record of the correspondence between the hash value and the recipe can be maintained.

Alternatively recipe can be associated with the application that can be installed using installation package in other manners. For example an application identifier can be assigned by a developer or other party and included in installation package as well as in the associated recipe . By way of another example various information regarding installation package such as the name of the file storing installation package the size e.g. in bytes of installation package a creation date and or time of installation package and so forth can be combined to generate an application id. This combining can be for example concatenating the information into a single string of characters. This application id can be stored in recipe or alternatively a list or other record of the correspondence between the application id and the associated recipe can be maintained.

Installation package includes the data for installing an application on a system. This data includes various instructions data and optionally other information describing the application. This data is typically grouped together in one or more files including application files as well as configuration files. Application files include instructions data and or other information that are to be stored in a particular folder or directory of the system. Configuration files include data and or other information that is to be stored in a particular folder or directory of the system and or stored in a registration store of the system.

The instructions data and or other information in installation package can optionally be compressed or combined together into a single installation package file. Any of a variety of well known compression techniques can be used to generate the single installation package file. For example installation package can be a Microsoft Windows operating system Installer package file additional information regarding such package files is available from Microsoft Corp. of Redmond Wash. a CAB cabinet file a ZIP file and so forth.

Different types of systems can operate in different manners. These different manners of operation can take a variety of different forms such as locations where files are to be stored naming conventions for files types of data that is to be stored in an operating system registry a manner in which an operating system registry is to be accessed and so forth. For example one type of system may allow application files to be stored in a particular folder or directory during installation while another type of system may prohibit application files from being stored in that particular folder or directory during installation.

By way of another example two different types of systems may both have an operating system registration store in which various data regarding the installation and or configuration of an application is stored. However each of these two types of systems can differ in how the application accesses this registration store. E.g. one type of system may permit direct access to the registration store while another type of system employs an application programming interface API exposing one or more methods that are invoked to access the registration store.

Installation package is associated with a particular application and is configured to install the associated application on a system of a particular type. The developer or designer of installation package is aware of the manner in which systems of that particular type operate and configures package in accordance with that manner of operation. For example installation package can be configured to indicate that application files are to be stored in a particular directory or directories that particular values are to be stored in the operating system registration store and so forth.

For the particular type of system for which installation package is configured to install the associated application recipe generation module analyzes installation of the application on that particular type of system. As at least part of the analysis recipe generation module determines the changes resulting from installation of the application on that particular type of system. These changes can include for example files written into particular folders or directories settings or values written into an operating system registration store and so forth.

This analysis can be performed by recipe generation module in a variety of different manners. Different example manners in which this analysis can be performed by module are discussed below although it is to be appreciated that the analysis can alternatively be performed in other manners.

In one or more embodiments the analysis is performed by recipe generation module monitoring the installation of the application on system . An installer module not shown of system accesses installation package and installs on system the application associated with installation package . A sequencer module which can be included in recipe generation module monitors the changes made to system during the installation process. Alternatively the sequencer module can be separate from module and can communicate to module the changes it identifies in system .

In other embodiments installation package is implemented in a declarative manner in which the actions to be taken to install the application associated with installation package are listed as part of package . In such embodiments recipe generation module can access the actions listed in package and readily ascertain from those listed actions the changes resulting from installation of the application on a particular system system or alternatively another system . For example installation package can include a list of files from package that are to be stored in the system as well as the folders where those files are to be stored installation package can include a list of configuration values that are to be stored in an operating system registry and so forth.

In other embodiments recipe generation module records a pre installation state of system prior to the application associated with installation package being installed. An installer module not shown of system then accesses installation package and installs on system the application then recipe generation module records a post installation state of system . These two states pre installation and post installation are then compared to determine the differences and thus the changes that were made to system . These states include for example indications of which files are stored in which directories or folders what values are stored in an operating system registry and so forth.

In addition recipe generation module is aware of the differences between the type of system for which installation package is configured and the type of system for which recipe is being generated. Recipe generation module can be made aware of these differences in a variety of different manners. For example module can be pre configured with these differences module can obtain these differences from a remote source e.g. a service accessed via network of module can obtain these differences from a local source e.g. a file stored in system a removable storage device coupled to system etc. and so forth.

Based on the analysis performed by recipe generation module module can identify the changes made to the type of system on which the application is to be installed resulting from installation of the application on that particular type of system. As recipe generation module is also aware of the differences between the type of system for which installation package is configured and the type of system for which recipe is being generated recipe generation module can readily identify the changes to be made to the type of system for which recipe is being generated based on the changes made to the type of system for which installation package is configured.

For example assume that installation package is configured to install an application on a first type of system and that a recipe allowing installation package to be used to install that application on a second type of system is desired. Further assume that as a result of installing the application associated with installation package on the first type of system a particular file named foo.txt is stored in a particular directory c system . As part of the differences between the first and second types of systems that module is aware of further assume that module is aware that the second type of system does not permit the installation process to store files in the directory c system but that they are to be stored in c safe system instead. Accordingly module can include in recipe an indication that foo.txt is to be stored in c safe system rather than c system .

Following this same example further assume that as a result of installing the application associated with installation package on the first type of system a particular value of threshold setting 5 is written in the operating system registry by the installation process. As part of the differences between the first and second types of systems that module is aware of further assume that module is aware that the second type of system does not permit the installation process to directly write values to a registration store of the operating system. Rather the installation process is to invoke a StoreValue method of an API and pass the StoreValue method a parameter that is the particular value to be stored in the registration store. Accordingly module can include in recipe an indication that rather than saving the value of threshold setting 5 in the registry the StoreValue method is to be invoked with a parameter of threshold setting 5 . Alternatively rather than invoking a method of an API in the second system a registration declaration e.g. using an eXtensible Markup Language XML or other format can be used that includes an indication that a threshold setting 5 value is to be maintained in the registration store. In such an alternative module can include in recipe an indication that rather than saving the value of threshold setting 5 in the registry a threshold setting 5 value is to be included in a registration declaration.

In one or more embodiments recipe generation module can also receive user input from a user of system regarding the generation of recipe . Such input allows the user to modify or augment recipe as desired by the user. For example a user can test recipe and if any problems are identified with recipe the user can input request via module to modify recipe to correct such problems.

It is to be appreciated that the system in which recipe generation module is implemented need not be the same type of system for which installation package is configured to install the associated application. Rather as discussed above module can analyze the installation of the application on a particular type of system without actually installing the application on that particular type of system.

Installation package in is the same installation package as was used by recipe generation module in . Recipe in is the same recipe as was generated by recipe generation module in .

As discussed above installation package is configured to install an associated application on a first type of system and recipe is generated for a second type of system. To generate new installation package recipe based installation module analyzes both installation package and recipe . Changes made to the second type of system are identified based on recipe and installation package and those changes are reflected in new installation package . New installation package allows the application associated with installation package to be installed on the second type of system. Analogous to installation package package includes the data for installing an application on a particular system although the system that the data in package applies to is a different system than the system that the data in package applies to. Package can be provided to an application installer for the second type of system to have the application installed on the second type of system.

Continuing with the example above assume that installation package indicates that a particular file named foo.txt is to be stored in a particular directory c system and that recipe indicates that foo.txt is to be stored in c safe system rather than c system . Recipe based installation module includes in new installation package an indication that foo.txt is to be stored in c safe system .

Continuing with this example further assume that installation package indicates that a particular value of threshold setting 5 is to be stored in the operating system registry and that recipe indicates that rather than writing the value of threshold setting 5 directly to the registry the StoreValue method is to be invoked with a parameter of threshold setting 5 . Recipe based installation module includes in new installation package an indication that the StoreValue method is to be invoked with a parameter of threshold setting 5 . Alternatively assume that recipe indicates that rather than writing the value of threshold setting 5 directly to the registry a registration declaration is to include a value of threshold setting 5 . In such an alternative recipe based installation module includes in new installation package an indication that the threshold setting 5 value is to be included in a registration declaration.

Thus it can be seen that recipe based installation module allows for the creation of a new installation package for the second type of system without requiring any alterations to installation package . The application can be converted by recipe based installation module for installation on one type of system to installation on another type of system using both recipe and installation package .

It should be noted that the system in which recipe based installation module is implemented is typically the type of system for which recipe is generated. Alternatively the system in which recipe based installation module is implemented and in which new installation package is generated can be a different type of system than the system for which recipe is generated.

It should also be noted that oftentimes the recipe based application conversion discussed herein is used with reference to only two types of systems. For example a first type of system and a second type of system with the second type of system being an upgraded or new version of the first type of system. The recipe based application conversion thus allows legacy applications having an installation package created for installing the applications on devices implementing the first type of system to be readily installed on devices implementing the second type of system.

Alternatively situations can arise where three or more types of systems are involved. In such situations multiple different recipes can be generated each being associated with a different one of the three or more types of systems. An identification of the type of system to which a particular recipe corresponds can be maintained such as including an identifier of the type of system in recipe or maintaining a separate list or record of such correspondences. Maintaining an identification of the type of system to which a particular recipe corresponds allows the correct recipe to be identified e.g. by recipe based installation module of . System identifiers allow different types of systems to be distinguished from one another and can be generated in a variety of different manners analogous to the application identifiers discussed above. For example a system identifier can be a hash value generated by applying a hash function to one or more files of a system can be a value assigned by a developer or other party and so forth.

It should further be noted that in one or more embodiments a system on which an application is installed using new installation package also includes a runtime translator that facilitates running of the application on the system. For example the application may be configured to access a file stored in a particular location that is actually stored in a different location than the application is expected. By way of another example the application may be configured to attempt to access an operating system registry in a manner not supported by the system. The runtime translator is able to intercept and convert such requests to the correct format e.g. accessing the correct location accessing the operating system registration store in the correct manner and so forth for the system.

In process an installation package for an application is obtained act . The installation package can be obtained in a variety of different manners such as from a local storage device from a removable storage device e.g. an optical disc a Flash memory device etc. from a remote service e.g. via network of and so forth.

The obtained installation package is decoded act . As discussed above installation packages can be combined or compressed in different manners. This combining or compressing is decoded in act allowing the individual files and other data or information included in the installation package to be retrieved.

The installation of the application on a first type of system based on the installation package is analyzed act . As discussed above this analysis can take a variety of different forms such as monitoring the installation of the application on the first type of system accessing a declarative list of actions to be taken to install the application comparing pre installation and post installation states of the first type of system and so forth.

A first set of changes made to the first type of system resulting from installation of the application on the first type of system is identified act . As discussed above this first set of changes can include files written to particular locations in the first type of system data written to an operating system registry of the first type of system and so forth. It should also be noted that in one or more embodiments this first set of changes resulting from installation of the application on the first type of system can be identified without actually installing the application on the first type of system. For example the first set of changes can be made by analyzing a declarative list of actions to be taken to install the application without actually installing the application.

Based on the first set of changes identified in act a second set of changes to be made to a second type of system is identified act . As discussed above based on the changes made to the first type of system and the differences between the first and second types of systems the second set of changes to be made to the second type of system can be readily identified.

A recipe identifying the second set of changes is generated act . An application id for the application can also be generated and stored as part of the recipe or alternatively associated with the recipe in other manners as discussed above. An identification of a type of system to which the recipe corresponds can also be stored in the recipe or alternatively associated with the recipe in other manners as discussed above. This recipe can optionally be communicated to a recipe store allowing the generated recipe to be accessed by multiple other devices as discussed above.

In process an installation package for an application is obtained act . The installation package can be obtained in a variety of different manners such as from a local storage device from a removable storage device e.g. an optical disc a Flash memory device etc. from a remote service e.g. via network of and so forth.

An application identifier for the application is also obtained act . The application identifier can be determined in a variety of different manners as discussed above.

A check is then made as to whether a recipe for the application is available from a remote service act . This remote service can be for example recipe service of . This check in act can be performed in different manners such as by sending the application identifier obtained in act to the remote service. Although described as a remote service in act in addition to or in place of checking with the remote service a local service can also be checked. This local service can be for example a recipe store maintained on the device implementing process a recipe store maintained on a removable storage device coupled to the device implementing process and so forth.

If a recipe is available for the application then the recipe is obtained act . The recipe can be obtained in different manners such as receiving the recipe from the remote service accessing another service or location identified by the remote service and so forth.

A new installation package based on the installation package obtained in act and the recipe obtained in act is then generated act . This new installation package can be used to install the application on the system implementing process or alternatively can be stored or communicated to another system.

Returning to act if the recipe is not available for the application then installation of the application fails act . Process ends without generating a new installation package.

Alternatively rather than not installing the application other actions can be taken. For example a recipe for the application can be generated e.g. using process of and a new installation package based on the installation package obtained in act and the recipe can be generated. By way of another example installation of the application can proceed using the obtained installation package and not a recipe assuming the system implementing process supports installation of applications using the installation package without the recipe. It should also be noted that in this example the system implementing process may not fully support such an installation e.g. various functionality provided by the system for applications may not be provided to an application installed in accordance with this example .

In the discussion of process above it is assumed that an application has a single associated recipe. Process can be modified to support embodiments in which multiple recipes can be associated with the same application in order to allow new installation packages to be generated for multiple different types of systems. This modification includes adding an act of obtaining a system identifier which can be done in a variety of different manners as discussed above and also modifying act to check whether a recipe for the application and for the type of system is available.

Furthermore process as well as system of are discussed primarily with reference to generating a new installation package. Alternatively rather than generating a new installation package process or recipe based installation module can install the application in addition to or in place of generating the new installation package.

Computing device includes one or more processors or processing units one or more computer readable media which can include one or more memory and or storage components one or more input output I O devices and a bus that allows the various components and devices to communicate with one another. Computer readable media and or one or more I O devices can be included as part of or alternatively may be coupled to computing device . Bus represents one or more of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port a processor or local bus and so forth using a variety of different bus architectures. Bus can include wired and or wireless buses.

Memory storage component represents one or more computer storage media. Component can include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . Component can include fixed media e.g. RAM ROM a fixed hard drive etc. as well as removable media e.g. a Flash memory drive a removable hard drive an optical disk and so forth .

The techniques discussed herein can be implemented in software with instructions being executed by one or more processing units . It is to be appreciated that different instructions can be stored in different components of computing device such as in a processing unit in various cache memories of a processing unit in other cache memories of device not shown on other computer readable media and so forth. Additionally it is to be appreciated that the location where instructions are stored in computing device can change over time.

One or more input output devices allow a user to enter commands and information to computing device and also allows information to be presented to the user and or other components or devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone a scanner and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card and so forth.

Various techniques may be described herein in the general context of software or program modules. Generally software includes routines programs objects components data structures and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

 Computer storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer.

 Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

Generally any of the functions or techniques described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The term module as used herein generally represents software firmware hardware or combinations thereof. In the case of a software implementation the module represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices further description of which may be found with reference to . The features of the recipe based application conversion techniques described herein are platform independent meaning that the techniques can be implemented on a variety of commercial computing platforms having a variety of processors.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

