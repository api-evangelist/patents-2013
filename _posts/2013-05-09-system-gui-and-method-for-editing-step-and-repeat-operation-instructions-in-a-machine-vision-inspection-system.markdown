---

title: System, GUI and method for editing step and repeat operation instructions in a machine vision inspection system
abstract: A system, a GUI and a method are provided that allow intuitive, flexible and robust editing of individually editable instructions generated by conversion operations applied to a defined step-and-repeat programming element in a machine vision inspection system. The method includes: a) Converting a defined step-and-repeat programming element to generate N independently-editable code blocks including an independently-editable substantial replication of a repeated operation block of the step-and-repeat element, each of code blocks executed at a respective location corresponding to a step and repeat location; b) Representing the code blocks in an editing GUI; and c) Eliminating the defined step-and-repeat programming element as an editable element. The defined step-and-repeat programming element may be represented in the editing GUI. The conversion operations may be initiated by a user activating a step and repeat conversion command directed to the defined step-and-repeat programming element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235337&OS=09235337&RS=09235337
owner: Mitutoyo Corporation
number: 09235337
owner_city: Kanagawa-ken
owner_country: JP
publication_date: 20130509
---
The invention relates generally to machine vision inspection systems and more particularly to systems GUIs and methods embodied in computer readable media for converting step and repeat operations programmed for such systems into a more versatile editable form.

Precision machine vision inspection systems or vision systems for short can be utilized to obtain precise dimensional measurements of inspected objects and to inspect various other object characteristics. Such systems may include a computer a camera and optical system and a precision workstage that is movable in multiple directions to allow the camera to scan the features of a workpiece that is being inspected. One exemplary prior art system that is commercially available is the QUICK VISION series of PC based vision systems and QVPAK software available from Mitutoyo America Corporation MAC located in Aurora Ill. The features and operation of the QUICK VISION series of vision systems and the QVPAK software are generally described for example in the QVPAK 3D CNC Vision Measuring Machine User s Guide published January 2003 and the QVPAK 3D CNC Vision Measuring Machine Operation Guide published September 1996 each of which is hereby incorporated by reference in their entirety. This series of products for example is able to use a microscope type optical system to provide images of a workpiece at various magnifications and move the stage as necessary to traverse the workpiece surface beyond the limits of any single video image. A single video image typically encompasses only a portion of the workpiece being observed or inspected given the desired magnification measurement resolution and physical size limitations of such systems.

Machine vision inspection systems generally utilize automated video inspection. U.S. Pat. No. 6 542 180 the 180 patent teaches various aspects of such automated video inspection and is incorporated herein by reference in its entirety. As taught in the 180 patent automated video inspection metrology instruments generally have a programming capability that allows an automatic inspection event sequence to be defined by the user for each particular workpiece configuration. This can be implemented by text based programming for example or through a recording mode which progressively learns the inspection event sequence by storing a sequence of machine control instructions corresponding to a sequence of inspection operations performed by a user with the aid of a graphical user interface GUI or through a combination of both methods. Such a recording mode is often referred to as learn mode or training mode. Once the inspection event sequence is defined in learn mode such a sequence can then be used to automatically acquire and additionally analyze or inspect images of a workpiece during run mode. 

The machine control instructions including the specific inspection event sequence i.e. how to acquire each image and how to analyze inspect each acquired image are generally stored as a part program or workpiece program that is specific to the particular workpiece configuration. For example a part program defines how to acquire each image such as how to position the camera relative to the workpiece at what lighting level at what magnification level etc. Further the part program defines how to analyze inspect an acquired image for example by using one or more video tools such as edge boundary detection video tools.

Video tools or tools for short and other GUI features may be set up manually to accomplish inspection and or other machine control operations. Video tools set up parameters and operations can also be recorded during learn mode in order to create automatic inspection programs or part programs which incorporate measurement analytical operations to be performed by various video tools. Video tools may include for example edge boundary detection tools autofocus tools shape or pattern matching tools dimension measuring tools and the like. Other GUI features may include dialog boxes related to data analysis step and repeat loop programming as disclosed for example in U.S. Pat. No. 8 271 895 the 895 patent which is hereby incorporated herein by reference in its entirety etc. For example such tools and GUI features are routinely used in a variety of commercially available machine vision inspection systems such as the QUICK VISION series of vision systems and the associated QVPAK software discussed above.

The currently available features and GUI controls for step and repeat programming are limited. Briefly in the context of machine vision inspection systems step and repeat programming involves programming imaging analytical operations to be repeatedly executed N times at N locations in an array of workpiece features e.g. workpiece features arranged at locations in a regularly spaced grid . For example when a workpiece is supposed to have 8 instances of a circular hole arranged in an array the step and repeat programming permits a user to define a single block of instructions to image analyze the hole which will then be executed 8 times as opposed to having to separately define 8 sets of instructions. However when a single set of instructions is to be executed multiple times each time with the workstage shifted to image analyze each of the features in the array there currently is no convenient method for a relatively unskilled user e.g. one that is not skilled in text based computer programming in an underlying part program language to edit or make adjustments to the instructions with respect to a particular one of the features.

The present invention is directed to providing a system GUI and method as embodied in a computer readable medium which allow intuitive flexible and robust conversion of step and repeat operation instructions to a more versatile editable form in part programs for precision machine vision inspection systems.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

In various embodiments a machine vision inspection system is provided which is operable in a learn mode to create a part program and in a run mode to execute a previously created part program. The system includes an imaging portion a stage for holding one or more workpieces in a field of view of the imaging portion a control portion and a graphical user interface GUI . The system further includes an editing portion operable to edit part program instructions in the learn mode the editing portion including an editing interface portion displayable in the GUI. The system further includes a step and repeat loop generator configured to be operable to generate and define in the learn mode a step and repeat programming element in a part program the defined step and repeat programming element defining a repeated operation block of inspection instructions to be executed N times at N defined locations in an array of workpiece features. The system further includes a step and repeat loop converter configured to be operable in the learn mode to provide step and repeat conversion operations directed to a defined step and repeat programming element wherein the conversion operations comprise a Automatically replicating the inspection instructions defined in the repeated operation block of the defined the step and repeat programming element to generate N independently editable code blocks each including an independently editable substantial replication of the inspection instructions defined in the repeated operation block each of the independently editable code blocks to be executed at a respective location corresponding to one of the N defined locations b Automatically providing a representation of the N independently editable code blocks in the editing interface portion of the GUI each of the N code block representations including an editable representation of operations included in its replicated instance of the repeated operation block and c Eliminating the defined step and repeat programming element as an editable element in the editing interface portion of the GUI. As used herein the phrase substantial replication does not necessarily mean a literal or exact replication of all details of the inspection instructions or their representations although this may be the case in some embodiments. Rather it means replication of at least the features of the instructions that replicate the essential or fundamental operations of the repeated operations block.

In various embodiments generating the N independently editable code blocks includes generating for each independently editable code block independently editable instructions that determine the respective location where that independently editable code block is to be executed.

The independently editable code blocks may comprise machine executable code instructions written in a markup language e.g. HTML XML or a derivative thereof and associated editable instruction representations that are displayed in the GUI e.g. in the editing portion . The term code block as used herein generally may encompass both of these associated aspects unless otherwise indicated by description or context. In various embodiments generating the N independently editable code blocks includes generating for each of the independently editable code blocks at least one unique identifier associated with the code block e.g. a unique code block name or node number or the like . In common with other type of instructions and instruction representations referred to herein such unique identifiers may be assigned and used in various embodiments to support certain context establishing operations and or user interface window synchronization operations and or code and representation associations. In one embodiment such associations and features may be implemented as described in co pending co assigned U.S. patent application Ser. No. 13 297 232 the 232 application filed Nov. 15 2011 titled Machine Vision System Program Editing Environment Including Real Time Context Generation Features and or describe in co pending co assigned U.S. patent application Ser. No. 13 676 061 the 061 Application filed Nov. 13 2012 titled Machine Vision System Program Editing Environment Including Synchronized User Interface Features which are each hereby incorporated herein by reference in their entirety.

In various embodiments each of the independently editable code blocks e.g. instruction representations and or the code instructions may be arranged in a tree structure including one or more parent nodes having one or more child nodes or the like. User input to edit instruction representations on the GUI may include one or more of adding deleting and modifying any of the instruction representations. In some embodiments some of the nodes correspond to video tools each containing a subset of instructions directed to discrete operation such as a geometry measurement operation or an imaging e.g. auto focusing operation or an image processing operation and so on. In various embodiments each of the independently editable code blocks may be assigned a unique node name variable name and or code block name. A name may in some embodiments and or situations be changed when the node or code block has been edited.

In various embodiments a computer readable medium is provided which includes computer executable instructions which are configured to be loaded onto a computer to enable the computer to perform a method for generating N independently editable instances of a repeated operation block of inspection operations defined in a step and repeat programming element wherein the repeated operation block is to be executed N times at N locations in an array of workpiece features in a machine vision inspection system. N is an integer greater than 1. The machine vision inspection system includes an imaging portion a stage for holding one or more workpieces in a field of view of the imaging portion a control portion and a graphical user interface GUI . The method to be performed may comprise displaying a representation of the defined step and repeat programming element in an editing interface portion of the GUI and operating the editing interface portion to execute a conversion command directed to the defined step and repeat programming element. The conversion command may include and or perform operations comprising a Automatically replicating the inspection instructions defined in the repeated operation block defined in the step and repeat programming element to generate N independently editable code blocks each including an independently editable substantial replication of the inspection instructions defined in the repeated operation block each of the independently editable code blocks to be executed at a respective location corresponding to one of the N defined locations b Automatically providing representation of the N independently editable code blocks in the editing interface portion of the GUI each of the N code block representations including an editable representation of the inspection instructions included in its replicated instance of the repeated operation block and c Eliminating the defined step and repeat programming element as an editable element in the editing interface portion of the GUI. In some embodiments eliminating the defined step and repeat programming element as an editable element comprises deleting the displayed representation of the defined step and repeat programming element from the editing interface portion.

In various embodiments generating the N independently editable code blocks includes generating independently editable instructions for each independently editable code block that determine the respective location where that independently editable code block is to be executed. Determining the respective location may include motion control instructions.

In some embodiments operating the editing interface portion to execute the conversion command may comprise selecting the representation of the defined step and repeat programming element in the editing interface portion of the GUI operating the GUI to display a menu including editing commands corresponding to the selected representation of the defined step and repeat programming element and selecting the conversion command in the displayed menu.

In some embodiments or instances the method to be performed may further comprise providing the defined step and repeat programming element by one of a operating the GUI to create the step and repeat programming element and define its repeated operation block and its parameters that define the N locations and b opening a previously created part program including the defined step and repeat programming element and displaying a representation of the previously created part program in the editing interface portion of the GUI.

In various embodiments or instances the method to be performed may further comprise providing via the GUI user editing input e.g. adding an instruction deleting an instruction and modifying an instruction to edit one of the independently editable code blocks and recording the resulting independently editable code block in a part program as edited. The editing input may delete one of the independently editable code blocks if desired. Editing an independently editable code block does not affect the other independently editable code blocks.

In some embodiments generating the N independently editable code blocks includes generating for each of the independently editable code blocks at least one unique identifier associated with the code block e.g. a unique code block name or node number or the like . Such unique identifiers may be used in some embodiments to support certain context establishing operations and or user interface window synchronization operations as described in greater detail below.

The vision measuring machine includes a moveable workpiece stage and an optical imaging system which may include a zoom lens or interchangeable lenses. The zoom lens or interchangeable lenses generally provide various magnifications for the images provided by the optical imaging system . The machine vision inspection system is generally comparable to the QUICK VISION series of vision systems and the QVPAK software discussed above and similar state of the art commercially available precision machine vision inspection systems. The machine vision inspection system is also described in commonly assigned U.S. Pat. Nos. 7 454 053 7 324 682 8 111 938 and 8 111 905 which are each incorporated herein by reference.

A workpiece or a tray or fixture holding a plurality of workpieces which is to be imaged using the machine vision inspection system is placed on the workpiece stage . The workpiece stage may be controlled to move relative to the optical assembly portion such that the interchangeable objective lens moves between locations on a workpiece and or among a plurality of workpieces . One or more of a stage light a coaxial light and a surface light may emit source light or respectively to illuminate the workpiece or workpieces . The source light is reflected or transmitted as workpiece light which passes through the interchangeable objective lens and the turret lens assembly and is gathered by the camera system . The image of the workpiece s captured by the camera system is output on a signal line to the control system portion . The light sources and may be connected to the control system portion through signal lines or busses and respectively. To alter the image magnification the control system portion may rotate the turret lens assembly along axis to select a turret lens through a signal line or bus .

In various exemplary embodiments the optical assembly portion is movable in the vertical Z axis direction relative to the workpiece stage using a controllable motor that drives an actuator a connecting cable or the like to move the optical assembly portion along the Z axis to change the focus of the image of the workpiece captured by the camera system . The term Z axis as used herein refers to the axis that is intended to be used for focusing the image obtained by the optical assembly portion . The controllable motor when used is connected to the input output interface via a signal line .

As shown in in various exemplary embodiments the control system portion includes a controller a power supply portion the input output interface a memory a workpiece program part program generator and executor a recorder translator a learn mode executor a run mode executor an editing portion a surrogate data manager a program status manager a node manager an auto scroll manager and a step and repeat loop generator and a step and repeat loop converter . Each of these components as well as the additional components described below may be interconnected by one or more data control buses and or application programming interfaces or by direct connections between the various elements. As apparent to those skilled in the art any of these components may be merged together may consist of multiple sub components or any of their respective sub components may be merged together depending on each implementation.

The input output interface includes an imaging control interface a motion control interface a lighting control interface and a lens control interface . The motion control interface may include a position control element and a speed acceleration control element although such elements may be merged and or indistinguishable. The lighting control interface controls for example the selection power intensity on off switch and strobe pulse timing if applicable for the various corresponding light sources of the machine vision inspection system .

The memory includes an image file memory portion a workpiece program memory portion that may include one or more part programs PP or the like a video tool portion and in the illustrated embodiment a surrogate data memory portion that may include surrogate data SD. The video tool portion includes various video tools collectively each including the GUI and image processing operation defined to perform a specific function such as edge boundary detection tools autofocus tools shape or pattern matching tools and dimension measuring tools. Many known video tools are included in commercially available machine vision inspection systems such as the QUICK VISION series of vision systems and the associated QVPAK software discussed above. The video tool portion also includes a region of interest ROI generator that supports automatic semi automatic and or manual operations that define various ROIs that are operable in various video tools included in the video tool portion .

The surrogate data memory portion includes surrogate data SD. In accordance with some embodiments when editing a part program rather than being required to execute all of the steps of the part program from the beginning in order to generate the needed context for continuing edits at a certain location in the program the needed context both in terms of hardware setting and software parameters and values can be simulated using previously saved data as surrogate data as described in the previously referenced 232 application.

In general the memory portion stores data usable to operate the vision system components portion to capture or acquire an image of the workpiece such that the acquired image of the workpiece has desired image characteristics. The memory portion may also store inspection result data and may further store data usable to operate the machine vision inspection system to perform various inspection and measurement operations on the acquired images e.g. implemented in part as video tools either manually or automatically and to output the measurement results through the input output interface . The memory portion may also contain data defining a user interface operable through the input output interface .

The signal lines or busses and of the stage light the coaxial light and the surface light respectively are all connected to the input output interface . The signal line from the camera system and the signal line from the controllable motor are connected to the input output interface . In addition to carrying image data the signal line may carry a signal from the controller that initiates image acquisition.

One or more display devices e.g. the display of and one or more input devices e.g. the joystick keyboard and mouse of can also be connected to the input output interface . The display devices and input devices can be used to display a user interface which may include various user interface features that are usable to perform inspection operations to create and or modify part programs including step and repeat instructions to view the images captured by the camera system and or to directly control the vision system components portion . In particular according to various exemplary embodiments of the present invention the display devices and input devices are used to present various user interface features usable to allow rapid efficient intuitive flexible and robust editing of step and repeat instructions in part programs for the machine vision inspection system .

The workpiece generator and executor recorder translator learn mode executor run mode executor editing portion surrogate data manager program status manager node manager auto scroll manager a step and repeat loop generator and a step and repeat loop converter may in one embodiment all be considered to be part of a general machine controller block MC that is linked to the controller . The workpiece program generator and executor is responsible for creating and executing part programs. It will be appreciated that the terms workpiece program and part program may be used interchangeably herein. Based on the operations of the workpiece program generator and executor a user utilizes the machine vision inspection system to create a part program for the workpiece either by explicitly coding the instructions automatically semi automatically or manually using a workpiece programming language and or by generating the instructions by operating the machine vision inspection system in a learn mode e.g. as controlled by the learn mode executor to provide a desired image acquisition training sequence. For example a training sequence may comprise positioning a workpiece feature in the field of view FOV setting light levels focusing or autofocusing acquiring an image and providing an inspection training sequence applied to the image e.g. using video tools . The learn mode operates such that the learned operation sequence s are recorded and converted to corresponding part program steps i.e. instructions . These part program steps when the part program is executed in a run mode e.g. as controlled by the run mode executor will cause the machine vision inspection system to reproduce the trained image acquisition and inspection operations to automatically inspect a workpiece or workpieces matching the workpiece used when creating the part program.

The recorder translator is utilized for translating machine operations into part program code. In other words if a user performs an action e.g. such as manually altering a video tool that is used to measure a feature on a workpiece a basic instruction is generated that is translated into a machine readable language to form a part program and a reverse translation may also be performed. As will be described in more detail below in various embodiments of the present invention editable instruction representations are displayed on an editing GUI and the instruction representations point to machine readable code instructions written for example in a markup type language. The recorder translator may perform translation between the editable instruction representations and their corresponding code instructions. The editing portion provides or activates various operations and user interface features related to editing a part program as will be described in more detail below in reference to .

In some embodiments the surrogate data manager links to surrogate data which may be recorded in a part program. In certain implementations the surrogate data manager is responsible for obtaining the surrogate data from an output where it would normally be generated and providing the surrogate data to be written into the part program. The program status manager in one embodiment manages whether programs are protected or unprotected. In one example embodiment protected programs are programs for which the editing process has been completed such as may be utilized in a factory in a run mode. In one implementation an unprotected part program may include stored surrogate data for use in generating the right context for editing purposes. The program status manager is also responsible to ensure that when a part program is unprotected the surrogate data remains recorded in the part program and when the part program is recalled by the editing portion the surrogate data is indicated as being available.

In one embodiment the node manager is responsible for managing node numbers that are assigned to nodes in a part program. In one implementation within a representation of a part program each of the instruction representations is assigned a node number. In certain implementations an organizational tree structure may be utilized that includes parent nodes and child nodes. In certain implementations every line of a part program representation that is generated by the recorder translator is assigned a node number by the node manager . The auto scroll manager utilizes the node numbers assigned by the node manager to display related elements of associated part program elements and corresponding editing functions in different windows at the same time. For example to allow a user to see which measurements of a workpiece are related to which instruction representations and or coded instructions in a part program the auto scroll manager may automatically scroll in the respective windows to the relevant lines in the part program representation and or coded instructions that correspond to the relevant node number.

The step and repeat loop generator is responsible for creating step and repeat programming element instructions and defining N related inspection locations and the like which may form part of a workpiece program. In one embodiment the step and repeat loop generator may be implemented using features disclosed in the previously referenced 895 patent. As described in greater detail below the step and repeat loop converter is responsible for converting and or replacing a defined step and repeat loop programming element into a plurality of independently editable code blocks each including an independently editable substantial replication of the inspection instructions defined in a repeated operation block of the step and repeat programming element each of the independently editable code blocks to be executed at a respective location corresponding to one of the N inspection locations defined in the step and repeat element. The converter may also provide an editable representation of the independently editable code blocks in the editing interface portion of the GUI and may also eliminate the step and repeat programming element as an editable element in the editing interface portion. To that end the step and repeat loop generator and the step and repeat loop converter may access and use any of the functions operations and user interface features provided by the workpiece program generator and executor recorder translator editing portion surrogate data manager program status manager and auto scroll manager . Alternative configurations are possible for the step and repeat loop generator and converter . For example in some embodiments the step and repeat loop generator and converter and one or more of the workpiece program generator and executor recorder translator editing portion surrogate data manager program status manager and auto scroll manager may be merged and or indistinguishable. Generally the invention may be implemented in any now known or later developed form that is operable in conjunction with the machine vision inspection system to provide the user interface features and related programming and other operations disclosed herein.

In various embodiments the edit execution portion is responsible for various edit execution modes during an editing process in the learn mode including an edit mode of execution that is different from a run mode of execution in the run mode. Generally the run mode of execution executes a part program from the beginning to acquire and process e.g. inspect and analyze actual data obtained from imaging a workpiece. On the other hand the edit mode of execution in various embodiments is operable to substitute at least some of the actual data with surrogate data previously recorded so that the execution may start at any desired point in the part program using the surrogate data as opposed to having to start from the beginning of the part program in order to acquire actual data. That is the edit mode of execution in various embodiments is capable of efficiently generating the right context necessary for editing any portion of a part program. It should be noted that editing a part program for a machine vision inspection system is a more complex task than editing a program for a machine tool or assembly robot or the like. For example part programs for machine vision inspection systems include later subsequent portions that control operations and or provide image dependent measurement results that depend at least partially on the results achieved obtained by the execution of a previous portion of the program and or on the particular instance of a workpiece that is being imaged to be analyzed. Note also that the vision system typically consists of various mechanical electrical and optical elements that interact with each other in a complex manner to carry out imaging analytical operations. Thus editing any portion of a part program including step and repeat instructions must be done in the right context based on a realistic set of conditions i.e. with various hardware and software elements and parameters of the vision system properly set based on realistic data for that portion to be edited. A standard practice for achieving the right context for editing a part program is to have a vision system actually execute all of the instructions in a part program from the beginning up to and or including a portion of the instructions to be edited which is time consuming wasteful and may be even impractical for a large part program. One solution that provides a vision system editing environment capable of generating the right context for a particular node of a part program to be edited based on use of surrogate data is disclosed in the previously referenced 232 application.

In some embodiments the edit execution portion includes a surrogate mode portion an actual mode portion and an edit execution user interface features portion . The surrogate mode portion includes a node analyzer which includes surrogate data operations and machine operations . When the surrogate mode portion operates a surrogate execution mode surrogate data is utilized for generating context for the continuing editing operations. The node analyzer in one implementation determines whether the part program execution has reached a target node e.g. where a modification is to be made in the part program . The node analyzer determines whether the surrogate data operations A or actual machine operations B will be performed in accordance with the type of node that is involved. In general once the target node is reached then actual machine operations are performed whereas for part program instructions prior to the target node surrogate data operations may be utilized for generating at least some of the context that is needed for the continuing editing operations. If surrogate data is missing a user may be prompted to allow perform actual machine operations to generate the needed context. In one implementation each node is analyzed to determine if surrogate data operations are applicable including whether surrogate data exists if it is the right type of node for surrogate data operations or whether actual machine operations need to be utilized etc. For example some nodes in a part program may require actual machine operations such as actual movement of the workpiece stage the imaging portion etc to acquire actual data which cannot be substituted with surrogate data.

The actual mode portion includes operations that are more traditionally performed by prior machine vision systems. It will be appreciated that the actual mode portion may also be called by the surrogate mode portion for performing the machine operations when appropriate. The actual mode portion includes machine operations and data operations . The machine operations perform actual machine operations e.g. moving the stage as part of a video tool operation while the data operations generally output data. The edit execution user interface features provide user interface features for the execution of the editing functions e.g. indications as to the status of various execution operations such as color codes indicating what portions of a part program have utilized surrogate data or have been run through an actual execution etc. In various embodiments such features may be implemented as disclosed in the previously referenced 232 application.

The editor commands include a run segment portion a modify portion an insert append portion and a step and repeat loop conversion command . The step and repeat loop conversion command may activate operations of the step and repeat loop converter and or various step and repeat loop conversion operations and methods as disclosed and claimed herein. As discussed above in various embodiments the step and repeat loop converter may access and use any of the functions and features provided by the editing portion including the editing operations controller editing UI portion edit execution portion and editor commands . The operations of the modify portion and insert append portion will be described in more detail below with respect to .

In general the run segment portion performs an actual run of a selected segment of the part program. It will be appreciated that in order to run a selected segment of a part program the proper context up to the selected segment must be established. The proper context may be established by utilizing surrogate data.

The modify portion has certain similarities to the operation of the run segment portion . In general when an instruction representation in a part program is selected to be modified edited then the surrogate mode may be utilized for the portions of the part program that precede the instruction to be modified so as to generate the right context for the editing purposes. In one embodiment when the modify command is selected for an instruction representation in a part program the node for the instruction representation is designated as a target node. Once the target node is reached the editor switches out of the surrogate mode into the actual execution mode e.g. as controlled by the actual mode portion and executes the first relevant part program instruction of the target node.

In the following paragraphs and are frequently referenced in an interleaved fashion rather than a sequential fashion. This is due to the arrangement of the figures in groups that have a consistent type of element for continuity e.g. primarily different types of GUI elements in one group code instruction examples in another group and so on while the arrangement of the description is in terms of functional and or sequential relationships between the different types of elements e.g. between a GUI input and a resulting instruction modification . In particular are diagrams of an editing interface or GUI including a representation of a step and repeat programming element including a repeated operation block of instructions and representations of one embodiment of step and repeat conversion operations that replace the step and repeat element with code blocks including independently editable instances of its repeated operation block according to principles disclosed herein as well as various windows menus and tool bars configured to assist a user in editing any of the independently editable instances. are diagrams of a user interface including an image of a workpiece which is used to define the repeated operation block instructions and other parameters of the step and repeat programming element corresponding to . are diagrams of various windows which may be additionally and selectively displayed on a user interface in association with operations related to those illustrated in and or . are diagrams of code instructions written in a markup language which correspond to a step and repeat programming element including a repeated operation block of instructions in one embodiment of step and repeat conversion operations that replace the step and repeat element with code instruction blocks that provide independently editable instances of its repeated operation block according to principles disclosed herein.

Referring back to the example shown in the part program representation is set up to determine features of a generally circular workpiece feature such as a hole defined through a surface. In one embodiment each of the part program instruction representations is associated with a node and is assigned a node number e.g. as disclosed in the previously referenced 232 application and or 061 application. In certain implementations a tree structure is utilized wherein some of the instructions representations are associated with parent nodes and some are associated with child nodes. For example the children node instruction representations A B A and A are respectively associated with their parent node instruction representations and . As used herein each of the program instruction representation as displayed on the editing interface may be interchangeably referred to as a node. It will also be appreciated that in one embodiment the instruction representations as displayed on the editing interface comprise icons and labels derived from the markup language instructions code instructions of the part program. In some embodiments the markup language of the part program may comprise XML like code such as a customized markup language code. The instruction representations thus point to or have and association with associated code instructions that are machine executable which will be described in more detail below in reference to .

As shown in a Prologue node represents a process needed to run a part program in the run mode which is typically generated when the learn mode is entered. The Prologue node is a parent node which includes two child nodes a Set Lights node A and a Move Stage node B. The Set Lights node A defines what type of lighting is used at what intensity level which a user can readily set and adjust using the sliding bars included in the light control window . In the illustrated example a Stage light is used at 27 intensity level. The Move Stage node B defines the position of the stage that holds the workpiece as manually set by the user according to various implementations. In the subsequent two Measure Circle nodes operate to set the workpiece coordinate system by aligning the coordinate system with the generally circular workpiece feature of . Specifically a Measure Circle Circle 1 node includes a child node Align Origin to Circle 1 that aligns the origin of the coordinate system with a center of a defined circle Circle 1. A Measure Circle Circle 2 node includes a child node Align X Axis to Circle 2 that rotates the X axis of the coordinate system about the Z axis to be aligned with a corresponding line of a defined Circle 2. The operations of the instruction representations therefore establish the correct location and orientation of the workpiece in the relevant coordinate system for performing additional measurements.

Referring to a user may define step and repeat instructions using various GUI features according to embodiments of the present invention. Specifically when a user places a selector e.g. cursor over a Program option a pull down menu may appear which includes a Step and Repeat option . User selection of the Step and Repeat option displays another pull down menu which includes an Array option . The user may select the Array option to start defining the instructions of a step and repeat programming element comprising a repeated operation block of inspection operations wherein the repeated operation block is to be executed N times at N defined locations in an array of workpiece features.

Referring to in the illustrated embodiment upon user selection of the Array option as described above an Array Step and Repeat window may appear on the display screen to prompt the user to define the overall arrangement and structure of an array. In some embodiments the user may enter the name of the array in a name box in which the user has entered MyLoop in the illustrated example. The user further defines the number of repeats to be made along one axis e.g. X axis in a first repeats box A and defines the interval distance between the repeats along the same axis in a DX box A. Similarly the user defines the number of repeats to be made along another axis e.g. Y axis in a second repeats box A and defines the interval distance between the repeats along that axis in a DY box B. In the illustrated example the user has defined that a basic set of step and repeat instructions is to be repeated 2 times along the X axis with the interval of 1.5875 and to be repeated 3 times along the Y axis with the interval of 1.5875 as graphically represented by six 6 icons that are respectively numbered 1 1 1 2 1 3 and 2 1 2 2 2 3 . The Array Step and Repeat window may also prompt the user to define whether the basic set of step and repeat instructions is to be repeated feature to feature on a single workpiece or is to be repeated workpiece to workpiece on multiple workpieces along each of the axes. The window may still further allow the user to identify any member feature of the array that should be skipped in a Skipped Steps box . For example if the user wishes the basic set of step and repeat instructions to be executed five times at five locations 1 1 1 2 1 3 and 2 1 2 2 but not at location 2 3 that is when the user wishes to skip location 2 3 the user may enter 2 3 in the Skipped Steps box . Then the basic set of step and repeat instructions will not be executed at location 2 3 that is location 2 3 will be skipped. When the user finishes defining the locations of the array the user selects an OK button to save the defined locations.

Referring to the user may then define the repeated operation block to be repeatedly executed N times on the array of N workpieces or workpiece features as defined in above. Specifically in the editing interface a video tool bar may appear in appropriate situations which includes various icons representing video tools that the user can select and utilize to define different measurement inspection operations such as a point tool A a box tool B and a circle tool C. In some embodiments the tool bar may appear upon user completion of the definition of the array as shown in above. In other embodiments the user may explicitly request that the tool bar be displayed in the editing interface . Briefly the point tool A is configured to be used to determine the X Y Z coordinates of a point. The box tool B is configured to determine points that can be used to define a line e.g. by best fit operations as well as the angles that the line forms with the X Y and Z axes and the X Y plane respectively and also the straightness of the line. The circle tool C is configured to determine points that can be used to define a circle e.g. by best fit operations including the X Y Z coordinates of the center of a circle as well as the diameter radius and circularity roundness of the circle. The point tool A box tool B and circle tool C are all edge detection tools that are configured to identify edge points to define measure a particular geometry. The functions and operations of these and other video tools are known in the art and are described in more detail in the previously incorporated references.

In the illustrated example the user has selected the circle tool C and applied it to the image of the workpiece in the field of view window see which may cause generation of a Measure Circle Circle 5 node as a child node to a parent node of Array Step and Repeat Loop MyLoop in the editing interface . In the Measure Circle Circle 5 5 is used as an identifier of a circle to be determined. In one embodiment the Measure Circle Circle 5 node automatically includes three child nodes a Set Up For Measurement node A a Circle Tool node B and a Define Circle node C. The Set Up For Measurement node A defines and represents settings needed to run the circle tool i.e. to measure a circle such as light setting and workstage setting. The Circle Tool node B represents the circle video tool C and includes instructions configured to measure a circle. The Define Circle node C defines the measured Circle 5 to thereby conclude operation of the Measure Circle Circle 5 instruction representation .

Selection of the circle tool C from the video tool bar may also be used in conjunction with a command or circle measurement tool that generates a Measure Circle window which provides the user with options available in connection with definition of a circle measurement operation. For example when the user selects a Run option A to thereby run the Measure Circle Circle 5 instruction representation using the edit mode of execution in the learn mode the vision system may perform the measurement operation starting with the first workpiece feature at location 1 1 .

Referring to the user may further add a line measurement operation to the repeated operation block to be repeatedly executed N times on the array of N workpieces or workpiece features as defined in . Specifically in the editing interface the video tool bar may be available from which the user may select the box tool B once and the point tool A twice and apply them to the image of the workpiece in the field of view window see . User selection of the box tool B designed to measure a line may cause generation of a Measure Line Line 3 node as another child node to the parent node of Array Step and Repeat Loop MyLoop node in the editing interface . In the Measure Line Line 3 3 is used as an identifier of a line to be determined. The Measure Line Line 3 node includes four child nodes a Box Tool node A a first Point Tool B a second Point Tool C and a Define Line node D. In one embodiment the Box Tool node A and the Define Line node D are automatically included as a minimum set of child nodes under the Measure Line Line 3 node while the two Point Tools are manually added by a user. The Box Tool node A represents the box video tool B which may be used in conjunction with a command or line measurement tool that includes instructions configured to measure a line. The two Point Tool nodes B C each represent the point video tool A and include instructions configured to determine a point. The Define Line node D defines the Line 3 as measured by a combination of one box tool B and two point tools A to thereby conclude operation of the Measure Line Line 3 node . Generation of the Measure Line Line 3 node may also generate a Measure Line window which provides a user with options available in connection with definition of a line measurement operation. For example when the user selects a Run option A to thereby run the Measure Line Line 3 instruction representation using the edit mode of execution in the learn mode the vision system measures the workpiece feature at location 1 1 to determine a line.

When the Array Step and Repeat Loop MyLoop as defined above is fully executed the circle and line measurement results will be obtained for each of the 6 workpiece features in the 2 3 array as defined in . illustrates one example of the measuring results in which only the measuring results for locations 2 2 and 2 3 are shown in a Measurement Results window though the measurement results for other locations 1 1 1 2 1 3 2 1 may be accessed by scrolling up the window .

Generation of a repeated operation block of inspection operations to be executed N times at N locations in an array of workpiece features i.e. the Array Step and Repeat Loop MyLoop node in the illustrated example is now complete.

Referring now to according to various embodiments of the invention a user may convert a defined step and repeat loop programming element to generate N independently editable code blocks each including an independently editable substantial replication of the inspection instructions defined in its repeated operation block each of the independently editable code blocks to be executed at a respective location corresponding to one of its N defined locations. In one embodiment when a representation of a defined step and repeat programming element is displayed in the editing interface portion of the GUI the user may select that representation e.g. placing a cursor over the Array Step and Repeat Loop MyLoop node on the editing interface and or right click on the selected representation and a menu window may appear including various options selections directed to the selected representation such as an Unroll Step Loop command option A which is one embodiment of a conversion command including various operations as disclosed herein. When the user selects and or executes the Unroll Step Loop command option A the step and repeat loop converter in the control system portion see executes operations of that command that automatically replicate the inspection instructions defined in the repeated operation block of the selected step and repeat programming element to generate N independently editable code blocks each including an independently editable substantial replication of the inspection instructions defined in the repeated operation block each of the independently editable code blocks to be executed at a respective location corresponding to one of the N defined locations. In various embodiments the step and repeat loop converter also executes operations of that command that automatically provide a representation of the N independently editable code blocks in the editing interface portion of the GUI each of the N code block representations including an editable representation of the inspection instructions included in its replicated instance of the repeated operation block. In various embodiments the step and repeat loop converter also executes operations of that command that eliminate the defined step and repeat programming element as an element in the part program and as an editable element in the editing interface portion of the GUI. In some embodiments this may comprise deactivating the step and repeat programming element as an editable element and or indicating its deactivation with a predetermined color or cursor state or strikethrough or the like until the part program is saved with the step and repeat programming element and its associated instructions completely deleted. In other embodiments the step and repeat programming element e.g. the instruction representations included in Array Step and Repeat Loop MyLoop node on the editing interface may be immediately deleted along with its associated underlying code.

It should be appreciated that in contrast to known step and repeat unroll operations as may be performed in a compiler or the like which may expand a step and repeat loop into explicitly coded loop iterations for the purpose of faster machine execution of the code the step and repeat loop conversion command disclosed herein is available in a GUI to be operated by choice by a relatively unskilled user e.g. for the purpose of editing augmenting replacing or deleting operations at individual locations . In contrast to known unroll operations the conversion command operations disclosed herein may completely eliminate a step and repeat programming element and automatically replace it with a more flexible group of instructions which allow the user to perform editing adjustments to the instructions with respect to a particular one or more of the features to be inspected which would otherwise be individually inaccessible in the original step and repeat loop element.

Referring back to when a user wishes to edit one instance of the independently editable instructions sets the user may place a cursor over the representation of that instance and in some embodiments then right click which may cause a drop down menu to appear in the editing interface for performing certain edit mode commands or functions. In other embodiments the drop down commands may alternatively be accessed through menu choices associated with tool bars or tabs that are consistently displayed in the GUI. In this embodiment the drop down menu in the illustrated example includes options such as a delete A a promote to step loop B that will promote the selected instance to contain its own internal step and repeat instructions a copy C a cut D a run selection E that will run the code corresponding to the selected instance using actual data and or surrogate data a run to selection F that will run the code corresponding to a part program including the step and repeat instructions up to prior to the selected instance using actual data and or surrogate data and a clear initial setup block marker G that will clear an initial setup block marker for the selected instance.

In one embodiment the drop down menu may be provided when a user selects certain instruction representation s for example by using a mouse to move a selector cursor over the instruction representation s and or by right clicking on it. The instruction representation s that are selected to be edited e.g. instruction representations .S may be indicated by a selector box as shown in or by highlighting or by other indicator method. In some embodiments the drop down menu may be customized depending on whether the user selects one instruction representation or multiple instruction representations. In the example of the user has selected three instruction representations in three lines .S and thus the drop down menu includes various edit mode commands or functions applicable to multiple instruction representations at once. On the other hand when a single instruction representation is selected another type of drop down menu may appear that includes various edit mode commands or functions applicable to a single instruction representation such as insert to insert a new instruction representation above the selected instruction representation or modify to modify the selected instruction representation.

Still referring to when the user selects the delete option A from the drop down menu the selected instruction representations .S consisting of one Box Tool and two Point Tools under the parent node of Measure Line Line 3 2 2 are caused to be deleted as shown in . Specifically shows the parent node of Measure Line Line 3 2 2 .P which is now empty and includes only the concluding Define Line child node. Thus at this time the independently editable instance . of the instructions to be applied to a workpiece feature at location 2 2 is made shorter than each of the rest of the instances . . and . displayed in the editing interface . As in though only four independently editable instances . . . and . are shown the user can readily view and access all six instances by using the scroll bar for the editing interface .

Referring to at this point the user may select the empty node Measure Line Line 3 2 2 .P by for example placing a cursor over it and right clicking on it which may again cause the drop down menu to appear from which the user may again select the delete option A to delete the node .P including one remaining child node Delete Line as shown deleted in . Specifically shows that the instance . to be executed on a workpiece feature at location 2 2 consists only of the Measure Circle Circle 5 2 2 instruction representation and the Measure Line Line 3 2 2 instruction representation has been completely deleted. In one embodiment if a parent node is selected and deleted all child nodes and grand child nodes that depend from the parent node may also be deleted while if a child node is selected and deleted its parent node remains and is not automatically deleted as in the example illustrated in above.

Referring to the user continues with independent editing of instances of the basic set of step and repeat instructions as shown in the editing interface . At this time the user wishes to modify the light setting to be applied in execution of the Measure Circle Circle 5 2 2 node remaining in the instance . from which the Measure Line Line 3 2 2 node has been deleted. Thus the user selects the Set Up For Measurement child node .L under the parent node of the Measure Circle Circle 5 2 2. As shown in each of the displayed instances . . . and . of the set of instructions starts right under the parent node of Measure Circle Circle 5 x x with a child node of Set Up For Measurement which defines the initial workstage position and light setting. In one embodiment when the basic set of step and repeat instructions was unrolled to generate multiple instances of independently editable instruction sets each instance is configured to include a copy of the Set Up For Measurement instruction representation and its corresponding code configured for the basic set of step and repeat instructions. Thus in this case because the lighting was originally set to use a stage light in at the intensity level of 27 as shown in the light control window of the Set Up For Measurement instruction representation .L of the instance . also initially defines use of the stage light at the intensity level of 27 .

In one embodiment user selection of the Set Up For Measurement node .L under the parent node of Measure Circle Circle 5 2 2 may cause a warning window to appear to warn the user that the machine vision inspection system needs to move the workpiece stage . The warning is defined to prompt the user if the position change will cause a collision to adjust the stage before clicking OK in the window . Specifically because the Set Up For Measurement node defines the workstage position and light setting in various implementations modifying editing the workstage position or light setting need to be carried out in the right hardware context such as the correct initial stage position light levels magnification etc. as well as in the right software context such as the previous measurements already made a coordinate system being utilized etc. . In other words due to the very nature of a part program that it must control operations of a vision machine in the right context editing of a part program also must be done in the right context in various embodiments. In the illustrated example the vision machine or specifically the workstage may need to be physically moved as indicated in the warning window to generate the right context that permits the user to edit the Set Up For Measurement node .L to be applied to a workpiece feature positioned at location 2 2 .

After the user clicks OK on the warning window of as shown in the user may be prompted by a Set Up Measurement window to adjust the stage lens and lights and then click Done . At this time a parameter window may also appear in the editing interface to indicate the current parameter values related to the stage X Y Z position the lighting and the magnification. In one embodiment the user may directly change the parameter values in the parameter window to effect a desired change. In other embodiments the user may manually change the workstage position and the magnification on the machine vision system via a suitable control panel interface for example. In the illustrated example of the user may control the sliding bars in the light control window to effect a desired change for the lights. shows that the user has changed the stage light intensity level from 27 to 0 and changed the coaxial light in intensity level from 0 to 15 . Thus the light setting in the Set Up For Measurement node .L in the instance . of instructions to be executed on a workpiece at location 2 2 is now changed from the stage light at 27 to the coaxial light at 15 . In various embodiments changes and modifications made in various windows and control panels such as the parameter window and the light control window once recorded are automatically reflected in the corresponding areas of the editing interfaced including the corresponding instruction representation the Set Up For Measurement node .L in the illustrated example and the corresponding computer executable code instruction.

In some embodiments as shown in a visual delineator such as an arrow and or a line may be included in the editing interface to indicate an instruction representation or a node that is being edited. In the example of the visual delineator indicates that the Set Up for Measurement node .L of the instance . is being edited or has been edited.

Next as a further example of editing one instance of the converted instructions independently of other instances assume that the user now wishes to add a video tool to alter the set up in the Measure Circle Circle 5 2 2 node of the instance .. In one implementation user selection of the Measure Circle Circle 5 2 2 node in the editing interface causes the video tool bar including various icons representing video tools to appear as in the original definition of the basic set of repeat and step instructions described above in reference to . Specifically as shown in the video tool bar may appear when the user places a cursor over the Measure Circle Circle 5 2 2 node to be edited in the editing interface or may appear when a user explicitly selects a radio button that causes the tool bar to appear. From the tool bar the user selects any of the video tools included therein and in the illustrated example has selected to use a surface focus tool D. Briefly the surface focus tool is configured to auto focus on a surface region of interest for the purpose of more precisely focusing at that region of interest. Operations and use of the surface focus tool are known in the art and described in detail in the incorporated references. shows the user selection and application of the surface focus tool D on a workpiece in the field of view window of the image interface . In the illustrated example the user has selected the surface focus tool D to be run in connection with set up for the Circle Tool node B. of the instance . of instructions to be applied to a workpiece feature at location 2 2 . Thus as illustrated in when a user places a cursor on the Circle Tool node B. in the editing interface and selects the surface focus tool D to be added from the video tool bar a Surface Focus Tool node .X is inserted above the Circle Tool node B. in the instance .. In the illustrated embodiment a new Set Up For Measurement node .Y is also added together with the new Surface Focus Tool node .X by default which in some embodiments is a copy of the Setup for Measurement node .L for the Measurement Circle Circle 5 2 2 parent node because proper operation of any video tool requires proper Set Up For Measurement. In other embodiments a new Set Up For Measurement node .Y need not be added because the Set Up For Measurement node .L for the Measurement Circle Circle 5 2 2 parent node already exists as in the present example.

After adding the Surface Focus Tool node .X in the instance . for a workpiece feature at location 2 2 the user may then start editing the succeeding Circle Tool node B. to be run subsequent to the surface focus tool. To that end the user may select the Circle Tool node B. in the editing interface which may cause a Modify Circle Tool window to appear as well as the parameter window that shows parameter values currently defined for the Circle Tool B.. One of the parameters included in the parameter window is a Edge Slope parameter A which by default is set Rising to indicate that a circle is to be determined by detecting an edge with a rising slope when the vision system scans an image from a first circle R1 to a second circle R2 in the direction of an arrow as illustrated in . Thus the Circle Tool node B. is defined to detect a bossed circular area on a surface. In one embodiment the user selects an Edit option in the Modify Circle Tool window and is allowed to modify and edit any of the parameters listed in the parameter window .

In one embodiment the user may edit modify the parameters directly in the parameter window . In other embodiments as shown in Circle Tool parameter editing windows and are generated in the editing interface upon user selection of the Edit option in the Modify Circle Tool window . Referring to a first parameter editing window A shows the current parameter values set for the circle tool. shows the same first parameter editing window B but in which the user has modified the values of R1 and R2 see A from those in to change the direction of scan. Specifically as shown in the direction of scan to determine a circle is now set to occur from a smaller circle with R1 to a larger circle with R2 in the direction of an arrow which is opposite to the scan direction used in . In one embodiment when the user selects OK in the first parameter editing window B to accept the result of the modification a second parameter editing window A will appear as shown in which includes a further set of the current parameter values that are set for the circle tool. shows the same second parameter editing window B but in which the user has modified the Slope parameter see B from Rising to Falling. As a result the circle tool is configured to detect an edge with a falling slope when the vision system scans an image from the first smaller circle with R1 to the second larger circle with R2. Since the direction of scan has also been switched with the change of a to be detected edge slope from Rising to Falling the modified circle tool is also configured to detect and measure a bossed circular area similarly to the original circle tool before the modification. Once the editing is complete the user selects OK in the second parameter editing window B and the results of the modification are reflected in the Circle Tool node B. in the editing interface as well as in the code instruction to be executed.

After completing modification of the Circle Tool node B. in the instance . the user may continue to edit e.g. delete add and modify any of the instruction representations in each of the instances independently of other instances in the editing interface similarly to the various editing operations described herein above as examples. In accordance with various embodiments user editing e.g. deletion addition modification etc. of instruction representations may be intuitively flexibly and robustly carried out in the editing interface as visually assisted by multiple windows drop down menus tool bars etc. that may be displayed at appropriate times to guide the user through the editing process. In various embodiments the results of the editing are simultaneously reflected in real time in all of these various windows menus etc. in the editing interface to further assist the user in the editing process. In various embodiments any modification made to the instruction representations in the editing interface may also effect automatically or semi automatically the same modification to the corresponding code instructions to be executed. Throughout the editing process each instance of the basic set of step and repeat instructions is maintained independently of each other in various embodiments such that each instance is independently editable and any editing made in one instance is not reflected in other instances.

In various exemplary embodiments as previously outlined a part program including step and repeat instructions and or the instructions generated by the step and repeat loop converter is written in a markup type language such as Extensible Markup Language XML or a similar customized markup language. That is the editable instruction representations displayed in the editing interface point to corresponding code instructions machine executable instructions written in a markup type language.

As also shown in the XML like code instructions include node I.D. numbers which in one embodiment may respectively correspond to the instruction representations nodes as displayed in the editing interface of .

As discussed above in reference to execution of any portion of a part program including the unrolled step and repeat instructions may be carried out not only in the run mode according to a run mode of execution wherein a part program is executed from the beginning but also in the learn mode when the user is training the machine vision inspection system to learn how to acquire images and analyze measure workpiece features in acquired images. As further described above in various embodiments any portion of the part program that is being generated or edited may be executed in the learn mode according to an edit mode of execution which is different from the run mode of execution. Unlike the run mode of execution the edit mode of execution may start at any mid point in a part program by using surrogate data which is typically an actual data previously acquired from executing the part program. In various embodiments surrogate data from previously executed instructions in a part program may be used as a substitute for actually executing those instructions at a later time for example to continue execution of later portions of the program to acquire actual data in a later portion of the part program. Thus some or all of the actual data A obtained by running the modified instance . of the step and repeat instructions on a workpiece feature at location 2 2 may be used as such surrogate data in order to generate the right context for the purpose of editing and running according to the edit mode or execution any subsequent portion of the part program. Conversely the right context for the purpose of editing an instance within the blocks of the converted instructions may be generated using surrogate data of previous portions of the part program preceding the to be edited instance of the converted instructions. That is when a user selects any of the independently editable instances of the converted instructions in the editing interface to edit modify previously acquired data in connection with prior portions of the part program or version of the data modified or formatted for compatibility may be utilized as surrogate data for establishing a valid context for the selected edits.

Comparison of makes it apparent that the code instructions for the modified instance of are quite different from the code instructions for the unmodified instance of despite that the two instances were initially replicated from the same repeated operation block of a step and repeat loop at locations 2 2 and 2 3 within the step and repeat array. The comparison further shows how according to various embodiments of the present invention multiple instances of instructions obtained by converting a step and repeat programming element according to principles disclosed herein are independently editable such that any edits made to one instance are reflected in its corresponding code but are not reflected in the code corresponding to other instances. As discussed above in reference to in some embodiments the translation between the instruction representations effected in the editing interface and the machine executable code instructions may be performed by the recorder translator coupled to the controller .

The illustrated embodiment of the method includes generally six steps. Step includes providing a defined step and repeat programming element wherein a repeated operation block of inspection instructions is to be executed N times at N defined locations in an array of workpiece features in a machine vision inspection system N being an integer greater than 1 the machine vision inspection system including an imaging portion a stage for holding one or more workpieces in a field of view of the imaging portion a control portion and a graphical user interface GUI . Step includes displaying a representation of the defined step and repeat programming element in an editing interface portion of the GUI e.g. see . Step includes operating the editing interface portion to execute a conversion command directed to the defined step and repeat programming element e.g. see . Step includes executing the conversion command to automatically replicate the repeated operation block defined in the step and repeat programming element to generate N independently editable replicated instances of the repeated operation block as contained in N independently editable code blocks each of the independently editable code blocks to be executed at a respective location corresponding to one of the N defined locations e.g. see . Step includes executing the conversion command to automatically provide a representation of the N independently editable code blocks in the editing interface portion of the GUI each of the N code block representations including an editable representation of operations included in its replicated instance of the repeated operation block e.g. see . Step includes executing the conversion command to eliminate the defined step and repeat programming element as an editable element in the editing interface portion of the GUI e.g. see .

It should be appreciated that although the step and repeat loop examples described above were arranged on an XY grid a step and repeat loop may also be arranged on a circular grid. Thus it will be appreciated that references to locations herein are not restricted to XY locations but also apply to radial and angular locations or positions as well as any other form of location reference which may be used in a step and repeat loop.

The various embodiments described above can be combined to provide further embodiments. All of the U.S. patents and U.S. patent applications referred to in this specification are incorporated herein by reference in their entirety. Aspects of the embodiments can be modified if necessary to employ concepts of the various patents and applications to provide yet further embodiments.

These and other changes can be made to the embodiments in light of the above detailed description. In general in the following claims the terms used should not be construed to limit the claims to the specific embodiments disclosed in the specification and the claims but should be construed to include all possible embodiments along with the full scope of equivalents to which such claims are entitled.

