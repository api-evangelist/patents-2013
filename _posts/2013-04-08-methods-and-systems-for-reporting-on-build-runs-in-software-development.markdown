---

title: Methods and systems for reporting on build runs in software development
abstract: A method for reporting build runs includes: obtaining code changes for a software product; identifying the code change as affecting a work item of a software product under development, the work item specifies a feature to be added to or a defect to be removed from the software product; generating (i) a plurality of build runs of the software product, respective build runs corresponding to one or more code changes; and (ii) data associating the work item with one or more build runs that each correspond to at least one of the one or more code changes specified as involving the work item; receiving a user input selecting the work item; and in response to the user input, displaying respective identifiers of at least one build run of the one or more build runs associated with the work item, including presenting an identifier of the at least one build run.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08813040&OS=08813040&RS=08813040
owner: VersionOne, Inc.
number: 08813040
owner_city: Alpharetta
owner_country: US
publication_date: 20130408
---
This application is a continuation of U.S. patent application Ser. No. 12 463 299 filed May 8 2009 which is incorporated herein by reference in its entirety.

The disclosed embodiments relate generally to project management software and more particularly to reporting associations between build runs and work items using software development project management software.

Agile software development refers to software development methodologies in which software is developed incrementally in steps referred to as iterations. Iterations typically are measured in weeks and may vary in length from one week or less to one month or more. Examples of agile software development methodologies include Scrum Extreme Programming XP Crystal Lean Development AgileUP and Dynamic Systems Development Method DSDM . Agile software development methods also have been referred to as lightweight methods. Methodologies may have their own vocabulary. For example an iteration may be referred to as a sprint or a timebox depending on the methodology. Agile software development is distinguishable from the waterfall model of sequential software development.

Software for implementing agile development methodologies or other types of software for managing software development allows work items associated with development of a software project to be tracked. Examples of work items include without limitation features to be implemented defects to be fixed and tasks and tests associated with implementing features and fixing defects. Software developers testers and project managers may desire to view the relationships between work items and code changes in a user friendly and efficient manner.

Systems and method for reporting on build runs are disclosed. In some embodiments a method includes obtaining a plurality of code changes for a software product and identifying the plurality of code change as affecting a work item of a software product under development. The work item specifies a feature to be added to the software product or a defect to be removed from the software product. In some implementations the method also includes generating i a plurality of build runs of the software product respective build runs corresponding to one or more code changes in the plurality of code changes and ii data associating the work item with one or more build runs that each correspond to at least one of the one or more code changes specified as involving the work item receiving a user input selecting the work item and in response to the user input displaying respective identifiers of at least one build run of the one or more build runs associated with the work item including presenting an identifier of the at least one build run.

Reference will now be made in detail to embodiments examples of which are illustrated in the accompanying drawings. In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. However it will be apparent to one of ordinary skill in the art that the present disclosure may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to unnecessarily obscure aspects of the embodiments.

Work item planning includes identifying work to be performed during the software development process. For example features to be included in the software being developed are specified and software defects to be fixed during development are identified. Depending on the agile methodology being used features also may be referred to as stories backlog items or requirements. In the context of agile software development a work item is any item for which the agile development management software platform can track progress such as time spent working on the item. Estimates for the time that work items require for completion e.g. the time to complete features or to fix defects may be entered during the work item planning process. Furthermore groups of work items may be defined. For example a feature group may be defined to include a plurality of features. In some embodiments a group of related features is referred to as a theme. In some embodiments a group of features that constitute a single large or complex feature is referred to as an epic. Defined groups of work items may contain different types or levels of work items and thus be hierarchical or alternatively may contain a single type or level of work items and thus be flat. Work estimates for the features within a feature group may be added together to provide an overall work estimate for the feature group. The work estimate for a group of work items e.g. a feature group thus may provide a roll up of the work estimates for the individual work items e.g. features in the group.

Release planning includes assigning identified work items e.g. features and defects to particular planned software releases. For example certain features may be included in an initial release with additional features to be added in subsequent releases. Similarly fixing various defects may be scheduled across multiple releases. More generally release planning may include assigning identified work items to levels or nodes in a project hierarchy. The project hierarchy may include projects sub projects releases teams and other internal organizations clients or customers and vendors.

Iteration planning includes assigning work items to iterations. There may be multiple iterations performed to prepare a particular software release iteration planning thus involves specifying what work will be performed in which iterations. For example features and defects are assigned to particular iterations. Within each iteration tasks and tests corresponding to the features and defects are defined. A task is a unit of work performed as part of delivering a feature. In some embodiments a task is defined such that it takes no more than days to perform. A test is an acceptance criterion that a feature must satisfy. Estimates for the time required to complete tests and tasks may be entered. In some embodiments the estimates for tasks and tests are independent of the estimates for their features. Tasks and tests are examples of work items.

The actual time spent working on the work items e.g. on the features and defects and their corresponding tasks and tests during an iteration is tracked and compared against the estimates. Progress and status reports may be displayed graphically. For example a dashboard user interface may display multiple graphical reports. Possible graphical reports include burndown charts velocity charts burn up charts Gantt charts parking lot reports scope change defect trending test case status and defect actuals. A burndown chart illustrates remaining work vs. time. Velocity refers to the estimated work per iteration on a project. Scope change refers to a change in requirements such as the addition or deletion of features and defects. Reports may be generated for a specified level or node in the project hierarchy e.g. for a specified project sub project release team or other internal organization client or customer and or vendor. Reports may be generated to display relationships between work items and build runs.

The operations in the development process flow are presented sequentially in for purposes of illustration. However the operations need not be performed sequentially. For example the planning operations and may be updated dynamically throughout the agile development process. Similarly tracking may be performed dynamically and may prompt subsequent planning changes. Furthermore multiple operations may be combined into a single operation and additional operations may be added to the flow .

As used herein terms such as work item release and project hierarchy are not limited to the context of agile development management software but instead may apply to any type of project management software for developing software. A work item thus is any item associated with software development for which project management software can track progress such as time spent working on the item. A release may refer to any type of software product release. A project hierarchy may refer to any set of levels or nodes associated with a software development project being managed using project management software.

At a high level a software project development process such as the agile software development process has various assets associated with it. Nodes in the project hierarchy such as projects sub projects releases teams clients and vendors can be considered assets as can iterations. Work items such as features and defects are assets as are tasks and tests. Feature groups are assets. Assets may be associated with i.e. related to other assets. In some embodiments for example tasks and tests are associated with corresponding features and defects which in turn may be associated with corresponding iterations. In another example features in a particular feature group are associated with the feature group.

An asset includes various attributes. In some embodiments each kind of asset e.g. work item project goal feature group feature task etc. has a specified set of associated or related attributes. Types of attributes include text strings numerical values values calculated according to a formula synthetic attributes and associated related assets. A first asset associated with i.e. related to a second asset thus is considered an attribute of the second asset. An attribute may be automatically included e.g. hard coded or created for a particular installation in project management software or may be customized i.e. user defined .

Attention is now directed to user interfaces UIs for software development project management software. While the following UIs are described with respect to agile development management software analogous UIs may be provided by other types of software development project management software. In some embodiments UIs are shown in a browser window. In some embodiments UIs are shown by a stand alone application.

Agile development management software can display groups of assets of a particular type. For example groups of assets associated with work item planning release planning or iteration planning may be displayed.

The displayed assets in the group are associated with a particular project hierarchy node displayed for example in a project selection window .

Assets may be added to the group for example by selecting an add story i.e. add feature link or an add defect link . In general a user interface for displaying a group of assets may include multiple links or icons for adding multiple respective kinds of assets or may include a single link or icon for adding assets e.g. a single add work item link not shown . In some embodiments selection of a link or icon for adding assets results in the display of a separate user interface for adding assets not shown .

Assets displayed in the group also may be edited for example by selecting an edit link e.g. corresponding to a respective asset. In some embodiments selection of an edit link or corresponding icon results in the display of a separate user interface for editing assets as described below with regard to .

The displayed assets include a set of attributes selected for display such as title ID owner status priority estimate and project . Some of the attributes are also assets such as project . Some of the values for the attributes are blank for example no owner status priority or estimate is shown for a number of assets including feature .

Assets to be displayed in the group may be filtered according to one or more attributes using filters .

A subset of the displayed attributes includes user input fields to accept edits to attribute values. For example a user may select a priority from a drop down box and may enter a work or size estimate e.g. an estimate of time in a text input box .

Assets to be displayed in the group may be filtered according to one or more attributes using filters . Assets may be added to the group by for example selecting an add backlog item link or an add defect link .

The displayed assets in the group include a set of attributes such as title ID owner status estimate detail estimate and to do . The estimate and detail estimate attributes provide estimates of quantities of work associated with assets while the to do attribute provides estimates of quantities of work remaining to be done for assets. As discussed with regard to some of the attributes may be assets associated with a displayed asset in the group i.e. may be related assets .

In some embodiments an asset displayed in the group may be edited by selecting a link corresponding to the asset which results in display of a separate user interface UI for editing the asset. For example selection of the plan backlog item link for the enter RMA asset results in display of a window . Backlog item in this context is a type of work item . The window displays attributes of the enter RMA asset such as ID title project iteration feature group description and estimate. In some embodiments the attributes are displayed in a list.

The window also displays related assets associated with the enter RMA asset . In this example the related assets include tasks and tests associated with the enter RMA asset which is a feature. Attributes of the related assets e.g. title ID owner and detail estimate are displayed.

The related assets may be edited by selecting a corresponding link. For example related asset Enter RMA Using Order Number may be edited by selecting an edit link . In some embodiments in response to selection of the edit link a UI for editing the related asset is displayed in the window along with the attributes and related assets . The UI includes user input fields e.g. and to display and receive edits to attributes of the related asset . In some embodiments the UI includes drop down menus e.g. to select values for attributes of the related asset . In some embodiments the user may enter values directly into the user input fields. Edits may be applied by selecting the OK link or canceled by selecting the cancel link . In some embodiments upon selection of the OK link display of the UI is ceased and displayed attribute values for the edited related asset are updated in response to the edits. The user then may select another edit link associated with another related asset resulting in display of another UI within the window for displaying and editing the newly selected related asset. In some embodiments multiple UI s for displaying and editing multiple respective related assets may be open simultaneously within the window and may be accessed simply by scrolling within the window .

In some embodiments a new related asset may be added via the window . For example a new task or test for the enter RMA asset may be added by selecting the add task link or add test link . In some embodiments selection of the add task link or add test link results in display within the window of a user interface analogous to UI for which the user input fields e.g. and are blank. The user may enter attribute values for the new task or test through the user input fields. In some embodiments the user may specify attribute values via drop down menus e.g. . In some embodiments creation of the new task or test is completed by selecting the OK icon or canceled by selecting the cancel icon . In some embodiments upon selection of the OK icon display of the UI for creating the new related asset is ceased and the new related asset is displayed among the related assets .

The window thus provides a single integrated interface through which a user may view multiple levels of information for an asset in addition to performing edits. For example the user may view attributes of the asset itself and of related assets and may edit or create related assets. The integrated interface allows the user to perform these tasks without having to browse through a succession of windows.

The UI enables a developer or quality engineer to determine the appropriate build to use to verify a group of work items. For example to verify all work items displayed in the group a quality engineer would select the Call Center build run or a more recent build run because Call Center is the most recent of the build runs displayed under Last Affected Build Run .

In some embodiments a group of work items such as the group includes one or more other attributes involving build runs in addition to or as an alternative to the last affected build run . For example a list of defects may include the build runs in which respective defects were found.

In some embodiments a user may select a particular work item and view build runs associated with the selected work item. is a schematic screenshot of a user interface displaying build runs or more precisely build run indicators associated with a selected work item in accordance with some embodiments. The UI is accessed by selecting a work item e.g. by clicking on the title of the Inventory Levels off in Warehouse defect in the UI and in some embodiments by clicking on one or more tabs icons menu items or the like. The UI displays various types of build runs associated with the defect including the build run in which the defect was identified Found In Build Run the last affected build run for the defect and a list of all build runs affected by the defect All Affected Build Runs . In some embodiments affected build runs for a defect are defined to be all successive build runs from the build run in which the defect is identified through the last affected build run. In this example the defect was found in the Call Center build run and fixed in the Call Center build run. The affected build runs thus are Call Center and as displayed in the All Affected Build Runs section of the UI .

A title and reference is shown for each build run displayed in the UI . In some embodiments the title combines a project name e.g. Call Center with a serial number. In some embodiments the reference is a serial number. In some embodiments other build runs indicators e.g. the date of the build run may be displayed along with or included in the title and or reference .

By selecting e.g. clicking on the Assign icon the user may change the build run listed under Found In Build Run or if no build run is listed add a build run to be displayed that indicates when the defect was identified. Similarly by selecting the Assign icon the user may change the build run listed as the Last Affected Build Run . In some embodiments for example by default the last affected build run for a work item is defined as the most recent build run with code changes corresponding to the work item but a user may override this default and assign the last affected build run to be a different build run such as the build run in which the work item e.g. the defect was verified. In some embodiments selecting the Assign icon or results in display of a UI with a list of build runs. In the UI is displayed as superimposed on the UI . A filter allows the user to filter the build runs in the list by selecting a build project e.g. Call Center in response to which build runs for the selected build project are displayed in the list . The build project is selected for example using a drop down menu . The user may select a build run from the list e.g. by clicking on the title of the build run or on a corresponding Add icon . The selected build run is subsequently displayed in the UI under Found In Build Run if the UI was accessed through the Assign icon or Last Affected Build Run if the UI was accessed through the Assign icon . The UI thus allows the user to specify the build run in which the defect was identified or verified. If the user decides not to specify a build run the user may select the Close Window button to return to the UI .

The term build project refers to a project associated with a discrete or deliverable software product. Not every project hierarchy node is a build project. For example the project hierarchy node is a deliverable piece of software being developed for call center operations and thus is a build project. Sub nodes of the node however such as Team A and Team B are not build projects.

By selecting a Remove icon the corresponding build run is removed from the UI such that it is no longer displayed. Selecting a Remove icon thus severs the relationship between a work item and a build run e.g. by severing a relationship or in the object model .

The UI thus displays various build runs associated with the defect . An analogous UI not shown displays builds runs associated with a particular feature or with any other type of work item. For example a UI for displaying build runs associated with a particular feature may include the lasted affected build run for the feature and or a list of all affected build runs for the feature. In some embodiments the list of all affected build runs for the feature includes every build run between the first build run to include changes related to the feature and the last affected build run or alternatively every build run that includes code changes related to the feature.

In some embodiments a group e.g. a list of build runs is displayed in a report. is a schematic screenshot of a user interface displaying a report with a list of build runs in accordance with some embodiments. In some embodiments the UI is accessed by selecting one or more tabs icons menu items or the like e.g. Reports tab and Build Runs tab . A build project e.g. the Call Center project hierarchy node is selected in response a list of build runs for the selected build project is displayed. The list includes one or more identifiers and or attributes of the build runs including for example the build run title reference number date e.g. the date the build run was generated build project source status and links . The Build Report link allows the user to navigate to a web page displaying a build report with information about a corresponding build run. Build reports are generated for example by a continuous integration server e.g. server responsible for generating the build run.

In some embodiments the user may select a particular build run from the list e.g. by clicking on a particular title and view one or more work items e.g. every work item associated with the selected build run. is a schematic screenshot of a user interface displaying work items associated with a selected build run Call Center in accordance with some embodiments. A defect entitled No Field Validation is listed under Found Defects indicating that the No Field Validation defect was identified in the Call Center build run. Identification of the Call Center build run as the build run in which the No Field Validation defect was found may have resulted from selecting the defect and then accessing the UI via an Assign icon for example. A defect entitled JavaScript Error is listed under Completed Work Items indicating that the defect was fixed in code changes introduced in the Call Center build run or alternatively that the defect was verified in the Call Center build run. Identification of the Call Center build run as the last affected build run for the No Field Validation defect may have resulted from comments submitted with code changes e.g. as discussed for below or from selecting the defect and then accessing the UI via an Assign icon for example. A feature entitled Add Customer Header is listed under Included Work Items . In some embodiments listing of the feature under Included Work Items but not under Completed Work Items indicates that code changes relating to the Call Center build run were included in the Call Center but did not fully implement the feature . For example only a portion of the functionality of the feature may have been implemented in the Call Center or the implementation of the feature in the Call Center may have included bugs. Identification of the Call Center build run as affecting the feature may have resulted from comments submitted with code changes e.g. as discussed for below for example.

In some embodiments the UI lists one or more change sets with code changes that affect the selected build run. The listed change set CS thus includes code changes that affect the Call Center build run. In some embodiments the displayed title of each change set is a link to provide access to the change set.

In some embodiments a user may specify a range of build runs and view one or more work items e.g. every work item associated with build runs in the specified range. is a schematic screenshot of a user interface allowing a user to specify a range of build runs in accordance with some embodiments. In some embodiments the UI is accessed by selecting one or more tabs icons menu items or the like e.g. Reports tab and Build Run Contents tab . The user specifies the first run in the range using the Start Run user input field and the last run in the range using the End Run user input field . In some embodiments the first and last i.e. start and end runs are specified using icons and which provide access to a list of builds associated with a selected build project . Selecting the Go button results in display of the one or more work items associated with the build runs in the specified range while selecting the Reset button resets the values in the user input fields and .

In at time t the CI server queries the SCM server as to whether the SCM server has received any code changes since a previous query. The SCM server responds in the negative and the CI server does not perform a build.

At a subsequent time t a developer at a developer system commits a code change to the SCM server . In committing this code change the developer specifies work items affected by the code change. For example if the code change attempts to at least partially implement a feature or fix a defect the developer specifies the feature or defect when committing the code change. In some embodiments the SCM server provides a user interface for committing code changes that includes one or more user input fields for specifying identifiers e.g. titles or IDs of work items.

At a subsequent time t the CI server again queries the SCM server as to whether the SCM server has received any code changes since the previous query . Because the SCM server received the code change it responds affirmatively and provides the updated code to the CI server along with the specified work items affected by the code change. In response the CI server uses the code change to perform a build i.e. it builds the software product thus generating a build run. The CI server publishes the build run results to the project management server . The CI server may publish a web site displaying information about the build accessible for example through the Build Report link . In addition the CI server provides the work item information and a build run identifier to the project management server which updates its database of information regarding the software product being developed Link to Build Run . An object model of this database is described below with regard to .

At a subsequent time t the CI server queries the SCM server as to whether the SCM server has received any code changes since the previous query . The SCM server responds in the negative and the CI server does not perform a build.

The server system includes a project management server and a database . The server serves as a front end for the server system . The server provides an interface between the server system and the client systems . The server system also includes a CI server and SCM server as described above with regard to . In some embodiments the functions of servers and or may be divided or allocated among multiple servers or implemented on a single server.

The server system stores data relating to the agile development process including asset data . The asset data includes attributes for respective assets. An exemplary data structure for asset data is illustrated in described below. The asset data includes work item data and build run data .

A user interfaces with the server system at a client system or device hereinafter called the client system for ease of reference . The client system includes a computer or computer controlled device such as a personal digital assistant PDA cellular telephone or the like. The computer typically includes one or more processors not shown memory which may include volatile memory not shown and non volatile memory such as a hard disk drive and a display . The computer may also have input devices such as a keyboard and a mouse not shown .

In some embodiments a user may interact with the server system via an agile development user interface presented on the display . Examples of user interfaces are illustrated in . In some embodiments the agile development user interface may be a web based user interface. That is the user interface may include one or more web pages. It is noted that a single web page can contain multiple frames each of which may appear when displayed by a browser application to be a distinct web page. The web page s may be written in the Hypertext Markup Language HTML Extensible Markup Language XML or any other suitable language for preparing web pages and may include one or more scripts for interfacing with the server system . For example the web page s may include a JavaScript application that interfaces with the server system via an application programming interface API . The JavaScript application receives asset data and reporting data from the server system manages the rendering of that data at the client and also performs the client side aspects of other tasks such as receiving user input associating work items with build runs updating attribute values according to data entered in user input fields and transmitting user requests to the server system .

In some other embodiments the agile development user interface may be a part of a stand alone application that is run on the client system . The standalone application may interface with the server system via an application programming interface API .

The agile development management system may perform the methods in accordance with some embodiments. In some embodiments performance of various operations in the methods and is divided between the client system and server system . In some embodiments the methods and are performed entirely by the server system .

Instead of using a client sever model project management software e.g. agile development management software may be installed and used on a single computer system combining the functionalities of the server system and client system . For example the methods may be performed entirely on a single computer system.

In some embodiments the agile development management module includes a local database for storing data sent by the server e.g. asset data which includes work item and build run data an asset display module for displaying assets e.g. via the user interfaces of an asset editing module for updating attribute values e.g. in accordance with data entered via user input fields and a server interface module for interfacing with server computer . The asset display module includes a build run reporting module for displaying build runs and their relationships to work items e.g. via the user interfaces of . The asset editing module includes a build run relationships module for creating and editing relationships between work items and build runs e.g. via UIs and . In some embodiments the build run reporting module and build run relationships module correspond to instructions for performing all or a portion of the operations in the methods . In some embodiments the server interface module includes a cache for storing data to be transmitted to the server.

In some embodiments the agile development management module may be a script based module embedded in a web page served from the server system . The web page may be rendered by a client application such as a web browser at the client computer . When the web page is rendered the agile development management module is executed thereby providing a web based interface to the server system . The script based agile development management module may be written in JavaScript AJAX ECMAScript Perl or any other suitable scripting language.

In some other embodiments the agile development management module may be a standalone application stored in memory of the client computer .

In some embodiments the agile development management module is replaced with a more general project management module that is not specific to agile software development.

Each of the above identified elements in may be stored in one or more of the previously mentioned memory devices. Each of the above identified modules corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise re arranged in various embodiments. In some embodiments memory may store a subset of the modules and data structures identified above. Furthermore memory may store additional modules and data structures not described above.

In some embodiments the asset data includes work items and build runs in accordance with the database . In some embodiments the agile development management database is organized in accordance with the object model . In some embodiments the agile development management database includes database management software for performing one or more operations of the methods . In some embodiments the application interface includes a presentation layer for rendering user interfaces e.g. accessed by a client system .

In some embodiments the agile development management database is replaced with a more general project management database that is not specific to agile software development. In some embodiments the agile development management application interface is replaced with a more general API that is not specific to agile software development.

Each of the above identified elements in may be stored in one or more of the previously mentioned memory devices. Each of the above identified modules corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise re arranged in various embodiments. In some embodiments memory may store a subset of the modules and data structures identified above. Furthermore memory may store additional modules and data structures not described above.

Although shows a server computer is intended more as a functional description of the various features which may be present in a set of servers than as a structural schematic of the embodiments described herein. In practice and as recognized by those of ordinary skill in the art items shown separately could be combined and some items could be separated. For example some items shown separately in could be implemented on single servers and single items could be implemented by one or more servers.

The agile development management database stores data in various tables. For example an Asset Type table includes an entry for each kind of asset such as goal feature group feature defect task or test. An Attribute Definition table defines the attributes associated with each kind of asset listed in the Asset Type table. A Synthetic Attribute table references formulas used to calculate synthetic attributes. For example if a work estimate or degree of completion is defined as a roll up of estimates or degrees of completion for other assets the roll up may be specified in a Synthetic Attribute table. An Attribute Security Check table contains references to operations used to determine whether a user may access or modify particular attributes. For attributes that are associated assets a Relation Definition table defines relationships between assets. In addition a Many to Many Relation Definition table may contain relationship information for assets in many to many relationship with other assets. Other tables may specify business rules for various assets.

Attribute values for particular assets are stored in asset tables as illustrated in in accordance with some embodiments. For example the database includes asset tables . While the asset table of is illustrated as a single table it may be implemented in accordance with an object model relating multiple tables including for example Asset Type Attribute Definition Synthetic Attribute and Relation Definition tables . In some embodiments a table corresponds to a particular type of asset such as feature group feature defect task or test. The asset table includes a row for each respective asset stored in the table. Each row includes fields that contain values for attributes of the respective asset as defined in the Attribute Definition table. For example the attribute fields may include title asset ID project estimate and various other attributes . The asset table also includes fields to specify attributes that are associated i.e. related assets. For example if a respective asset is a feature or defect fields may specify tasks and tests associated with the feature or defect for example by providing the asset IDs of the tasks and tests. If a respective asset is a work items fields may specify builds runs associated with e.g. affected by the work item. In another example a field may specify an iteration to which an asset is assigned.

In some embodiments an asset table for work items stores multiple versions of respective work items wherein each version of a respective work item has a distinct work estimate value. The version is specified for example in a version field.

The tables thus include information to allow the agile development management API to respond to a request from a client computer when a user seeks to create display and modify assets or to access information regarding assets. The interface can access the asset tables e.g. by writing to or querying the tables in response to requests from the client computer .

A last affected build run relationship between work items and build runs is navigated to determine the last affected build run for a work item. Because a particular build run may complete multiple work items and because fixes may be back ported to older releases the relationship is a many to many relationship. The CI server thus is used to ensure that only one last affected build run for a given build project exists in the relationship .

In some embodiments work items include defects and features as indicated by the relationships and respectively. A found in relationship indicates the build run in which a particular defect was introduced or identified. Because multiple defects can be introduced or identified in a particular build run and defects may exist in build runs representing different product releases the relationship is many to many and the CI server is used to ensure that for a given build project only one found in build run for a given defect exists in the relationship .

A changes relationship indicates which change sets include code changes for particular work items . Because a single change set may affect multiple work items and multiple change sets might be needed to deliver full functionality for a work item the relationship is many to many. The relationships and may be navigated to identify all build runs that contain changes for a particular work item.

In some embodiments the object model includes additional relationships that map work items to related work items. For example tasks and tests are mapped to their corresponding features and defects and features are mapped to their corresponding feature groups. Such relationships may allow a user to select a work item of a particular type and to view build runs associated with a related work item.

In the method successive code changes for a software product are received . In addition input is received specifying that one or more code changes involve a work item associated with development of the software product. For example the code changes and input specifying a work item are received at an SCM server during a commit code change operation .

A plurality of build runs of the software product is generated e.g. by a CI server . Respective build runs correspond to one or more of the successive code changes.

Data is stored associating the work item with one or more build runs that each correspond to at least one of the one or more code changes specified as involving the work item. For example the data is stored in a database in accordance with the object model .

A user input selecting the work item is received . In some embodiments a plurality of work items associated with development of the software project is displayed e.g. in the group and the user input selects the work item e.g. defect from the plurality of displayed work items.

In response to the user input respective identifiers of at least one build run of the one or more build runs associated with the work item are displayed . In some embodiments an identifier of a last affected build run for the work item e.g. a build run for which work on the work item was completed or verified an identifier of a build run for which work on the work item began and or respective identifiers of one or more build runs for which work on the work item occurred are presented i.e. displayed . In some embodiments identifiers of every build run incorporating code changes involving the work item are presented .

In some embodiments the respective identifiers include dates e.g. dates the respective build runs were generated . In some embodiments the respective identifiers include distinct numbers e.g. serial numbers in a title or reference .

In some embodiments the work item is a defect e.g. defect and the displaying of operation includes presenting an identifier of a last build run affected by the defect e.g. Last Affected Build Run presenting respective identifiers of every build run incorporating code changes involving the defect e.g. All Affected Build Runs and or presenting an identifier of a build run in which the defect was found e.g. Found In Build Run .

In some embodiments the work item is a defect and the method further includes receiving a user input specifying a build run in which the defect was found e.g. via the Assign icon and the UI storing data associating the build run in which the defect was found with the defect e.g. via the relationship and displaying an identifier of the build run in which the defect was found e.g. a title or reference of a build run in the Found In Build Run category .

In some embodiments the work item is a feature or defect having an associated task or test and the displaying of operation includes presenting respective identifiers of one or more build runs incorporating code changes involving the associated task or test.

In some embodiments the work item is a feature group e.g. an epic or theme comprising an associated feature and the displaying of operation includes presenting respective identifiers of one or more build runs having code changes involving the associated feature.

In some embodiments the method further includes receiving a user input to change the last affected build run for the work item e.g. via the Assign icon and the UI . In response to the user input to change the last affected build run for the work item the last affected build run for the work item is updated e.g. in the relationship . An identifier of the updated last affected build run for the work item is displayed e.g. a title or reference of a build run in the Last Affected Build Run category .

While the method includes a number of operations that appear to occur in a specific order it should be apparent that the method can include more or fewer operations which can be executed serially or in parallel. An order of two or more operations may be changed and or two or more operations may be combined into a single operation. For each operation in which information is displayed the information alternately may be provided by a server to a client for display.

In the method the operations and are performed as described above for the method . In addition data is stored associating respective build runs with one or more respective work items involved in the one or more successive code changes corresponding to the respective build runs. For example the data is stored in a database in accordance with the object model .

User input is received specifying one or more build runs. For example the user selects a build run e.g. Call Center in the group . In some embodiments the one or more build runs include a range of build runs which are specified for example by first and last build runs e.g. via the user input fields and .

In response to the user input at least one work item involved in code changes corresponding to the specified one or more build runs is displayed . In some embodiments one or more defects introduced during the specified one or more build runs e.g. Found Defects or Defects Introduced one or more defects fixed during the specified one or more build runs e.g. Completed Work Items or Defects Completed and or one or more features completed during the specified one or more build runs e.g. Features Completed are presented i.e. displayed .

In some embodiments the method further includes in response to the user input of the operation providing e.g. displaying a link to a change set e.g. CS associated with a respective build run of the specified one or more build runs.

While the method includes a number of operations that appear to occur in a specific order it should be apparent that the method can include more or fewer operations which can be executed serially or in parallel. An order of two or more operations may be changed and or two or more operations may be combined into a single operation. For each operation in which information is displayed the information alternately may be provided by a server to a client for display.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the present disclosure to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present disclosure and its practical applications to thereby enable others skilled in the art to best utilize the present disclosure and various embodiments with various modifications as are suited to the particular use contemplated.

