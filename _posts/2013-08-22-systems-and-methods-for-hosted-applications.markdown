---

title: Systems and methods for hosted applications
abstract: Systems and methods for locally managing a user's interaction with content derived from web pages within the user interface of an application executing within a runtime provided by an application platform on a computing device in accordance with embodiments of the invention are disclosed. In many embodiments, a runtime provided by an application platform enables the execution of a non-natively implemented hosted application in which executing instructions in a scripting language within a background page control the downloading and modification of web content to create user interface pages for the hosted application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08799771&OS=08799771&RS=08799771
owner: Sweetlabs
number: 08799771
owner_city: San Diego
owner_country: US
publication_date: 20130822
---
This application is a continuation of U.S. application Ser. No. 13 843 549 filed Mar. 15 2013 which claimed priority to U.S. Provisional Patent Application Ser. No. 61 694 166 filed Aug. 28 2012 the disclosure of which is herein incorporated by reference in its entirety.

The present invention is generally related to applications and more specifically to applications that manage a user s interaction with web pages.

A runtime environment can enable an application to be integrated into the computing environment of a computing device. Typically a runtime environment is provided for applications to be implemented natively i.e. compiled into the machine code of the computing device on which it resides . However other runtime environments can be provided for applications to be implemented non natively on a computing device such as web applications which can operate within a virtual machine provided by a web browser that operates natively on a computing device.

A web browser is an application that typically retrieves and presents information found on web pages maintained by content servers over a network. A web page is typically a file formatted in browser supported formats such as but not limited to markup languages such as but not limited to HTML scripts such as but not limited to JavaScript and style sheets such as but not limited to CSS that can be displayed by a web browser.

Systems and methods in accordance with embodiments of the invention download and modify web content to create interactive cross platform applications.

a processor and storage where an operating system is installed on the computing device that configures the processor to create a computing environment 

an application platform application stored in the storage of the computing device where the application platform application comprises 

an integration process that enables instructions executing within the virtual machine to modify the computing environment 

wherein the virtual machine is configured to parse the instructions in the scripting language contained within the background page file to configure the processor to 

wherein the rendering engine process is configured to render a user interface page based upon the modified DOM generated by the execution of the background page.

In another embodiment a resource locator indicating the location of the background page is stored in the storage and the application platform application is configured to download the background page using the resource locator.

In a still further embodiment modifying the instructions written in the scripting language within the at least one downloaded file in accordance with a predetermined page modification rule to create at least one modified file comprises inserting instructions into the instructions written in the scripting language within the at least one downloaded file.

In still another embodiment the instructions inserted in the scripting language call an API in the integration layer process.

In a yet further embodiment the instructions inserted in the scripting language call an API in a remote server.

In yet another embodiment modifying the instructions written in the scripting language within the at least one downloaded file in accordance with a predetermined page modification rule to create at least one modified file comprises removing instructions from the instructions in the scripting language within the at least one downloaded file.

In a further embodiment again the at least one downloaded file further comprises instructions written in the rendering language and the method further includes modifying instructions written in the rendering language within the at least one downloaded file in accordance with a predetermined page modification rule as part of the process of creating the at least one modified file.

In another embodiment again modifying instructions written in the rendering language within the at least one downloaded file in accordance with a predetermined page modification rule further comprises inserting into the instructions written in the rendering language within the at least one downloaded file.

In a further additional embodiment modifying instructions written in the rendering language within the at least one downloaded file in accordance with a predetermined page modification rule further comprises removing instructions written in the rendering language from the instructions written in the rendering language within the at least one downloaded file.

In a still yet further embodiment the at least one downloaded file further comprises a Cascading Style Sheet CSS and the method further includes modifying the Cascading Style Sheet CSS within the at least one downloaded file in accordance with a predetermined page modification rule as part of the process of creating the at least one modified file.

In still yet another embodiment modifying the CSS within the at least one downloaded file in accordance with a predetermined page modification rule further comprises removing a CSS from the at least one downloaded file.

In a still further embodiment again modifying the CSS within the at least one downloaded file in accordance with a predetermined page modification rule further comprises inserting a CSS into the at least one downloaded file.

In still another embodiment again the DOM in accordance with a predetermined DOM modification rule further comprises inserting a DOM node in the DOM.

In a still further additional embodiment modifying the DOM in accordance with a predetermined DOM modification rule further comprises removing a DOM node in the DOM.

In still another additional embodiment the at least one downloaded file further comprises a resource locator indicating the location of a piece of content and the method further includes removing the resource locator from the at least one downloaded file.

In a yet further embodiment again rendering the modified DOM using the rendering engine process includes calling an API in the integration layer.

In yet another embodiment again rendering the modified DOM using the rendering engine process includes calling an API on a remote server.

One embodiment of the method of the invention includes executing at least one hosted application comprising a background page file including instructions in the scripting language on a computing device where the computing device comprises a processor and a storage containing the background page an operating system that configures the processor to create a computing environment and an application platform application that comprises a rendering engine process configured to render pages within the computing environment created by the operating system by interpreting instructions written in a rendering language and implement a virtual machine configured to execute instructions written in a scripting language and an integration process that enables instructions executing within the virtual machine to modify the computing environment parsing instructions in the scripting language contained within a background page file using the rendering engine process downloading at least one remotely hosted file containing instructions in the rendering language for rendering web page using the rendering engine process based upon instructions written in the scripting language within the background page modifying the instructions written in the scripting language within the at least one downloaded file in accordance with a predetermined page modification rule to create at least one modified file using the rendering engine process based upon instructions written in the scripting language within the background page building a document object model DOM based upon at least the instructions in the at least one modified file using the rendering engine process modifying the DOM in accordance with a predetermined DOM modification rule to create a modified DOM based upon instructions written in the scripting language within the background page and rendering a user interface page based upon the modified DOM using the rendering engine process.

Turning now to the drawings systems and methods for locally managing a user s interaction with content derived from web pages within the user interface of a hosted application executing within a runtime provided by an application platform on a computing device in accordance with embodiments of the invention are illustrated. In many embodiments a runtime provided by an application platform enables the execution of a non natively implemented hosted application. Application platforms that create a runtime environment in which non natively implemented hosted applications can execute are discussed in U.S. application Ser. No. 13 164 740 filed Jun. 20 2011 titled Systems and Methods for Integration of an Application Runtime Environment into a User Computing Environment the disclosure of which is hereby incorporated by reference in its entirety. In several embodiments a runtime environment generated by an application platform is at least partially natively implemented and provides an intuitive user interface that is integrated with the computing environment of a device s operating system. The application platform can enable a user to access organize and discover applications including hosted applications which can execute within the runtime environment. In many embodiments an application platform includes a rendering engine layer and an integration layer. The rendering engine layer includes various parsers and virtual machines associated with supporting specific web technologies including but not limited to HTML JavaScript and CSS. The integration layer exposes a number of APIs that can be called by a hosted application to make modifications to a user s computing environment. In several embodiments the integration layer APIs are JavaScript APIs that can be called by a hosted application running within the application runtime environment created by the application platform. In response to the API calls the integration layer can communicate with the operating system and or natively implemented processes to modify the user s computing environment.

A hosted application can be implemented using a background page which generates at least one user interface page. User interface pages are generated locally using the logic of the background page found within the hosted application s package stored on a computing device and derived from a web page maintained by content servers over a network such as but not limited to the Internet. The background page is loaded locally at the time the hosted application is initiated from the hosted application s package and is defined in the hosted application manifest. A hosted application s package can include an application manifest located in the root directory of the hosted application s package to bootstrap the application into an application platform such as but not limited to an application platform application in order to share the resources of the application platform.

In many embodiments the background page contains all of the logic of the hosted application. The logic of the hosted application can parse one or more remotely hosted text files that constitute a web page to determine the content of the text file s . From a determination of the content of the text file s the logic of the background page can generate a user interface page derived from the remotely hosted web page by including or excluding content markup scripts or style sheets in view of the remotely hosted web page. For example the logic could cause exclusion of certain text pictures sounds or animation cause a change in the layout of content preventing the loading of a pop up window and or changing the text font. In other embodiments any of a variety of predetermined page modification rule can be applied that is capable of being expressed as a logical statement. The logic can include or exclude content markup scripts or style sheets upon first accessing the web page as one or more text files maintained on a remote server by modifying the instructions in markup and or scripting language s contained within the text file s and once again after building a Document Object Model DOM using the text files by modifying the nodes or the text of the DOM . Furthermore the inclusion of content markup scripts or style sheets also includes the inclusion of application platform APIs which can call for functions performed locally at the application platform or performed remotely at a remote server. The background page can be implemented using one or more text files as opposed to a binary executable file that can include HTML JavaScript and or CSSs that the rendering engine layer of the application platform parses to implement the logic contained therein in a similar fashion to the way in which the rendering engine of a web browser application parses a conventional web page when enabling a web application on a computing device. In numerous embodiments a background page can load JavaScript as the logic that conducts page flow control and injection of styling and functionality to the content and markup CSS and JavaScript derived from a web page to generate a user interface page. In certain embodiments a background page is formatted in a markup language such as HTML located within the hosted application s package. The JavaScript of the background page can be loaded locally or from a remote server and dynamically pulled as the application is launched.

An application platform can implement a user interface for a hosted application using instructions contained within a background page to generate user interface pages with content derived from web pages hosted on remote servers. In certain embodiments a user interface page is generated according to the logic of the background page using a URL that enables retrieval of a web page from a remote server that can be rendered by the rendering engine of the application platform to create the user interface page based upon the content found using the URL. In numerous embodiments a user interface page is generated by adding to and or removing portions of the content along with the markup scripts and CSS retrieved from a web page before or as the user interface page is displayed. Certain user interface pages may not however require any modification in order to be rendered by the application platform. In certain embodiments a user interface page is rendered by the application platform in response to a user selecting a link such as a hyperlink or Uniform Resource Locator URL . In response to the selection of a link the hosted application can instruct the application platform to generate a user interface page using the web page identified by the link. In several embodiments a user can interact with content derived from web pages as a controlled flow of user interface pages in an experience akin to how a user would experience content on a mobile application executing natively within an operating system such as but not limited to the iOS mobile operating system developed and distributed by Apple Inc. headquartered in Cupertino Calif. or the Android mobile operating system released by Google Inc. headquartered in Mountain View Calif. Thereby a hosted application manages user interaction with remotely hosted web pages by generating user interface pages from the remotely hosted web pages according to instructions contained within a background page and or obtained using the background page that control the flow from one user interface page to another.

Although specific embodiments of hosted applications are discussed above hosted applications can be implemented in any manner as appropriate to the requirements of a specific application in accordance with embodiments of the invention. Systems and methods incorporating application platforms configured to execute hosted applications that generate user interface pages from remotely hosted web pages in accordance with embodiments of the invention are discussed below.

Hosted applications running on computing devices in accordance with many embodiments of the invention can manage user interactions derived from a remote web page formatted in a cross platform language e.g. a markup and or scripting language supported by a web browser application into a format suitable for display as a user interface page. In certain embodiments the computing devices on which hosted applications execute within a runtime provided by an application platform can communicate via a network with content servers that maintain text files and content utilized by rendering engines in web browser applications to render web pages. In many embodiments the text files contain instructions in markup languages and or scripting languages that a web browser application interprets when formatting content for display. As the hosted application executes within the application platform the hosted application derives user interface pages from the text files and content retrieved from the remote content servers. The user interface pages can then be rendered by a rendering engine within the application platform to provide a user interface for the hosted application.

A network diagram illustrating a system that utilizes hosted applications in accordance with an embodiment of the invention is illustrated in . The system includes a number of computing devices connected to content servers via a network such as but not limited to the Internet. The content servers maintain websites including web pages and content that can be accessed by hosted applications running on computing devices . Within each computing device hosted applications can execute within the runtime environment provided by an application platform and can access web pages from one or more content servers to generate user interface pages.

Although specific systems that utilize hosted applications are discussed above systems can utilize hosted applications in any manner as appropriate to the requirements of a specific application in accordance with embodiments of the invention. The lifecycle of hosted applications in accordance with embodiments of the invention are discussed further below.

Hosted applications in accordance with many embodiments of the invention locally manage a user s interactions by locally creating a user interface page derived from remote web pages. Hosted applications are configured to generate a user interface page according to instructions in a scripting language such as but not limited to JavaScript contained within a background page and or obtained using the background page. The instructions within the background page dictates the injection or removal of content such as but not limited to pictures animation sound or text and the HTML JavaScript and or CSSs found within the text files maintained on a remote server to generate a user interface page. The background page is loaded upon hosted application initialization and remains active in the background so long as the hosted application is executing. The background page includes the logic used to generate user interface pages from web pages retrieved from a remote server that maintains the web pages. Executing the instructions generates instructions from which the rendering engine layer of the application platform can render the user interface page on a computing device and the integration layer of the application platform can integrate the user interface page with the functionality of the computing device.

Thereby a user interface page derived from a web page can present a user of the computing device with a controlled user experience according to the logic of the background page executing from a hosted application s package locally stored on the computing device. For example a hosted application can control the content with which a user can interact such as by allowing or denying a user s access to content found on a particular web page such as pop up windows or particular images found on the web page .

In several embodiments a hosted application s lifecycle includes the generation of various user interface pages according to the instructions contained within the background page and or obtained using the background page. A lifecycle process of a hosted application in accordance with an embodiment of the invention is illustrated in . The process includes loading a background page. In certain embodiments a background page is loaded upon initializing the hosted application. A background page can be loaded from a hosted application s package locally stored on a computing device. In several embodiments the background page includes a URL that is used to load one or more text files from a remote server that include instructions implementing the logic of the hosted application. Instructions contained within a background page and or instructions contained within files retrieved using information contained within the background page can be collectively referred to as the instructions of the background page and are part of the logic of the background page. The logic of the hosted application is used to generate user interface pages from web pages maintained by remote servers. After the background page is loaded a decision is made as to whether a user interface page should be generated. The decision is made according to the instructions of the background page. In certain embodiments the instructions of the background page automatically load an initial user interface page using a URL that directs the hosted application to access one or more files on a remote website that can be rendered as a web page using a web browser application. The application platform utilizes the one or more files indicated by the URL to generate a user interface page. The URL can be loaded automatically such as but not limited to where the logic of the background page retrieves a URL from the hosted application s package without explicit user instructions or manually such as but not limited to where a user provides a specific URL for the background page of the hosted application . The process continues generating user interface pages as a user interacts with the hosted application until there is no further need to generate user interface pages e.g. the user hides closes or terminates the execution of the hosted application . The decision as to whether additional user interface pages are to be generated is made by the logic of the background page. The generation of a user interface page is discussed in more detail in .

Although specific lifecycles of hosted applications are discussed above a hosted application can have any lifecycle as appropriate to the requirements of a specific application in accordance with embodiments of the invention. Generation of a user interface page of a hosted application is discussed further below.

User interface pages in accordance with embodiments of the invention can be generated from content and one or more text files containing instructions in markup and or scripting languages capable of being rendered by a web browser application. The user interface pages are generated from the content and one or more text files according to the instructions of a background page that specifies the logic of a hosted application. A user interface page is generated by modifying the text that represents a web page by injecting and or removing content markup style sheets and scripts from the retrieved web page according to the logic of the background page. Although in many embodiments a web page is remotely hosted user interface pages may also be generated from one or more locally stored files including content markup scripts and or style sheets. Upon the generation of a user interface page an application platform can integrate the user interface page with the computing environment of the computing device and render the user interface page in the foreground of the computing environment of a computing device for user interaction. In certain embodiments the logic of the background page can generate a user interface page in accordance with the requirements of a specific application such as but not limited to ensuring that a rendered user interface page can fit within a window of the hosted application s user interface.

The logic of the hosted application can parse the text file of a remotely hosted web page to generate a user interface page with particular content markup scripts or style sheets. The inclusion of particular content markup scripts or style sheets also covers the inclusion of API calls including but not limited to API calls to the application platform and remote servers. A user interface page that includes particular content markup scripts and or style sheets can be generated by modifying the accessed web page first as a retrieved text file and or second after building the DOM of the modified retrieved text file. The first modification of the accessed web page as a retrieved text file includes parsing the code of the retrieved text file to determine the content of the retrieved text file to determine the content markup scripts and or style sheets to include or exclude from a user interface page. Further modifications can occur after a DOM is built. In several embodiments text or nodes are modified by including or excluding particular content markup scripts or style sheets as nodes of a completed DOM.

A process for generating a user interface page in accordance with an embodiment of the invention is illustrated in . The process includes retrieving a web page. In many embodiments a hosted application is provided manually or automatically with a URL from which one or more files associated with a web page can be retrieved . As noted above the retrieved text files can include content with markup scripts and style sheets from which a typical web browser can render the web page. After retrieving the text file instructions within the background page determine the modifications applied to the text file by modifying by injecting and or removing content markup scripts and or style sheets. After modifying the text file a DOM representation of the text file is generated . Upon generating the DOM the DOM is modified by injecting and or removing content markup scripts and or style sheets within the DOM. The application platform utilizes its integration and rendering engine layers to integrate and render the user application page.

In certain embodiments the application platform can either remove or replace the code of a remote web page as particular nodes of a remote web page in a DOM according to the logic of the background page. In certain embodiments a node including window functions such as window.open can be detected and fed into the logic of the background page. Thereby the logic of the background page can make a decision as to how the window functions that imply modifications outside of the rendered user interface page e.g. resizeTo resizeBy should influence the chrome that contains the rendered user interface page. The logic of the background page can replace the window.open code of opening a browser window by replacing it with a script for generating a user interface page using the details provided by the window.open code such as but not limited to the URL of the web page to access while ignoring the other specifications such as a web browser window name access to a menu bar ability to resize the web browser window and implementation of particular scrollbars status bars and tool bars. Similarly the logic can parse the text of a web page to determine if window.resizeTo or window.resizeBy or window.close code is present and remove or replace the code according to the logic of the background page.

In a variety of embodiments the logic can incorporate custom style sheets such as by adding style sheets when generating a user interface page s head node . In certain embodiments incorporation of style sheets to a user interface page s head node is performed by the execution of the following code 

In numerous embodiments the logic of the background page can incorporate functionality by integrating scripts or calls for application platform APIs such as but not limited to an API that enables resizing of a user interface page for example to a default window size of 640 480 pixels . In particular embodiments scripts can be incorporated to a user interface page s head node where the incorporation of scripts to a user interface page s head node is performed by the execution of the following instructions 

In a number of embodiments the logic of the background page controls user interaction with the hosted application by disabling or adding functions traditionally present in a web browser. In certain embodiments disabling or adding functions is accomplished by adding or removing various scripts or API calls that enable functionalities including but are not limited to the ability to cut copy paste select all text utilize a spell checker resize a rendered web page or the ability to manually determine the flow of web pages such as enabling a user to view web pages previously accessed e.g. back and or forward commands rendered by a web browser.

In many embodiments the logic of the background page can generate a user interface page at any time after accessing the remote web page from which the user interface page is generated including prior to or after the DOM of the web page is loaded.

In several embodiments the logic of the background page can monitor the access of a web page such as the download of one or more text files used to render a web page during the generation of a user interface page and display a splash page while the user interface page is being generated. In certain embodiments the download of one or more text files used to render a web page is reported back to the background page through the following function where the body of the function returns an indication of progress as an integer between 0 and 100 

Although specific processes for generating a user interface page are discussed above user interface pages may be generated according to any of a variety of process as appropriate to the requirements of a specific application in accordance with embodiments of the invention. Rendering of user interface pages of a hosted application is discussed further below.

A user interface page of a hosted application in accordance with many embodiments of the invention can be rendered within the user interface of the computing device on which the hosted application is executing. A rendered user interface page in accordance with an embodiment of the invention is illustrated in . The user interface page 400 enables a user to log into a user account associated with the Facebook social networking service maintained by Facebook Inc. headquartered in Menlo Park Calif. Additional styling and functionality was injected into the user interface page that was not present in the web page that the user interface page is derived from such as a button for launching the web page in a traditional web browser as well as a link integrating additional functionality which was not present in the web page from which the user interface page is derived.

Although specific user interface pages of a hosted application are discussed above any user interface page can be rendered as appropriate to a specific application in embodiments of the invention.

While the above description contains many specific embodiments of the invention these should not be construed as limitations on the scope of the invention but rather as an example of one embodiment thereof. It is therefore to be understood that the present invention may be practiced otherwise than specifically described without departing from the scope and spirit of the present invention. Thus embodiments of the present invention should be considered in all respects as illustrative and not restrictive. Accordingly the scope of the invention should be determined not by the embodiments illustrated but by the appended claims and their equivalents.

