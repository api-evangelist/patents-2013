---

title: Systems and methods for multi-function and multi-purpose cryptography
abstract: Systems and methods for multi-function and multi-purpose cryptography are described, including obtaining a message to be encrypted by a cipher engine configured to perform encryption using a plurality of predetermined tags with an encryption function; determining a tag of the plurality of predetermined tags based on the message; encrypting, by the cipher engine, the message using the tag to produce a ciphertext; and sending the ciphertext.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189638&OS=09189638&RS=09189638
owner: GOOGLE INC.
number: 09189638
owner_city: Mountain View
owner_country: US
publication_date: 20130825
---
The subject matter discussed herein relates generally to data processing and more particularly to systems and methods for multi function and multi purpose cryptography.

Data is frequently transmitted on a public medium e.g. on the Internet in one encrypted form or another. Data encryption may be done using a public key that involves a trusted third party e.g. a certificate authority or a private key shared with a communication partner.

Communications with different partners and or different types of messages typically involves developing and or using different cryptographic software and or or devices each is developed for communicating with a specific partner specific messages. Changing or modifying a communication e.g. to use a new encryption of old message or a new message that need to be encrypted a different encryption key etc. typically involves stopping the affected communication software including the cipher operation modifying it then restarting it. To implement a new communication link with a new partner typically involves developing new software or changing existing software to handle the new encrypted communication link.

The subject matter includes methods for multi function and multi purpose cryptography are described including obtaining a message to be encrypted by a cipher engine configured to perform encryption using a plurality of predetermined tags with an encryption function determining a tag of the plurality of predetermined tags based on the message encrypting by the cipher engine the message using the tag to produce a ciphertext and sending the ciphertext.

The methods may be implemented using one or more computing devices and or systems. The methods may be stored in one or more computer readable media.

The subject matter described herein is taught by way of example implementations. Various details have been omitted for the sake of clarity and to avoid obscuring the subject matter. The examples shown below are directed to structures and functions for implementing systems and methods for multi function and multi purpose cryptography.

Cipher engines may be implemented for high volume and real time communications e.g. for supporting encrypted communications on the Internet . Communications between two cipher engines may use any one or more available hash functions cryptographic functions encryption functions one way functions and or pseudorandom functions selected based on performances levels of security and or other factors. Examples of available hash functions cryptographic functions and pseudorandom functions include but are not limited to Advanced Encryption Standard AES Data Encryption Standard DES Message Authentication Code MAC Keyed hash Message Authentication Code HMAC HMAC 3 Message Digest Algorithms MD2 MD4 MD5 MD6 Secure Hash Algorithms SHA0 SHA1 SHA2 SHA3 . . . SHA256 HMAC SHA1 HMAC SHA256 etc. Other available functions and any customized or modified functions may be used.

A cipher engine such as CE may communicate with two or more CEs e.g. CEs using different cryptographic schemes. For example CE communicates with CE using one scheme communicates with CE using a second scheme and communicates with CD using a third scheme. A communication scheme may define or specify one or more functions e.g. hash function cryptographic function etc. one or more keys e.g. an encryption key and or an authentication key other information and customization e.g. sub schemes or purposes etc. . For example a scheme used between CEs and also defines two or more purposes of communication e.g. different customization sub schemes for different plaintexts . Encryption with purposes is described in below. Also different messages sent to the same CE may be using different cryptographic schemes.

Key information and purpose information used on both ends of a communication link e.g. used by CEs and or may be predetermined or prearranged and may also be dynamically rearranged and or changed. For example at the initial set up of a communication link between two partners or parties e.g. the parties that control operate and or manage CEs and the parties may agree on a communication scheme such as what cryptographic function and or authentication function to use such as HMAC and SHA1 respectively. For clarity the examples herein are described using HMAC SHA1 and HMAC SHA1 in combination. However any functions and combination of functions may be used. One party e.g. the one that operates CE may provide an encryption key and or an integrity key to another party e.g. providing encryption key KEn and an integrity key KIn to the party that operates CE . If purposes are used with a cryptographic scheme purposes information e.g. and may be established e.g. provided by one party to another party .

In implementations a communication scheme may involve only encryption only authentication or both. If purposes are used in a communication scheme the same encryption function or key may be used across different purposes or across a subset of purposes e.g. other encryption function s key s is are used for other purposes .

Example key information referred to as key tables for simplicity may include identifiers information encryption keys integrity keys and or other information not shown . Identifiers may be used to identify CEs e.g. CEs have identifiers ID ID and IDn respectively . Encryption keys may be the keys e.g. private or secret keys shared by and used for encrypting communications between the shared CEs. Integrity keys may be the keys shared by and used for message authentication e.g. message integrity . Other information not shown may include for example agreed upon cryptographic and or authentication functions etc.

Key tables and show that integrity key KI is used between CE and CE which is associated with an identifier ID. CE illustrates that the chosen communication scheme does not use a shared encryption key e.g. a scheme that uses public key encryption or does not use an encryption function at all . Key tables and show that encryption key KE is shared and used between CE and CE which is associated with an identifier ID. CE illustrates that the chosen communication scheme includes a shared encryption key KE but does not include a shared integrity key e.g. a scheme that does not authenticate messages or data in the communication link between CEs and . Key tables and show that encryption key KEn and integrity key KIn are shared and used between CE and CE which is associated with an identifier IDn.

CE illustrates that the chosen communication scheme includes customization or enhancement to the chosen cryptographic and or authentication functions by for example defining and using two or more purposes shown by purpose information and . For example different messages may be encrypted decrypted using different purpose values to provide data security data identification and or performance enhancement etc. e.g. for real time high volume communication over the Internet etc. .

Example purpose information referred to as purpose tables for simplicity may include purposes or tags encryption lengths ELi integrity lengths ILi and or other information not shown . Tags may be used to identify the purposes e.g. purpose identifiers . Encryption lengths may indicate the lengths of messages of the corresponding purposes in plaintext form or ciphertext form e.g. for use in integrity verification authentication checking and or other uses . Integrity lengths may indicate the lengths of integrity values of the corresponding purposes e.g. for use in integrity verification authentication checking and or other uses. Other information not shown may include for example types of messages formats of messages e.g. number text binary etc. . Some of the encryption length and integrity length may have values that indicate variable lengths. For example a negative encryption length value e.g. 1 may indicate that the message of the corresponding purpose is of variable length.

Key information and and purpose information and are shown in tables as an example. In implementations key information and or purpose information may be stored in a database one or more files executing software and or anywhere and in any form that is accessible by one or more cipher engines. Key information and purpose information may be organized in any manner. For example key information may be stored in one or more tables. Purpose information may be stored in one or more tables. Key information and purpose information may be stored together not shown such as in one or more tables.

In some implementations communications between two CEs may use more than one scheme not shown . For example data associated with purposes 1 to J use one scheme and data associated with purpose J 1 to L use another scheme.

Key information and purpose information may be modifiable live that is without requiring stopping the accessing cipher engines. For example key table s and purpose table s may be modified e.g. for adding deleting and or changing the information of one or more rows while CE and CEs continue to execute to provide encryption and decryption services on Internet speed.

Updates may be performed to the key information e.g. key table purpose information e.g. purpose table and or some portion of the CE software e.g. a dynamically accessed library header file configuration file etc. with the updated or part of the updated information .

The examples in show updates to the key information and purpose information. Key table is the same key table updated with the ID row and KE removed and ID row added. Purpose table is the same purpose table updated with the TAG row and EL removed TAGk row added and TAGm row modified added Elm . The same updates may be reflected on the other side of CD s communications links e.g. CEs and . For example CE newly added is shown having access to key table with KE and KI corresponding to the same information on the ID row of table .

For example to add a cryptographic scheme between CE and a new communication partner e.g. cipher engine or an existing communication partner e.g. cipher engine or information for the cryptographic scheme may be entered to data stores or tables accessed by the partner CEs without interrupting their operations. The information may be entered manually or with the assistance of a software mechanism e.g. user interface . In some implementations the software mechanism may be associated with a key exchange protocol such as Secure Sockets Layer SSL protocol the Transport Layer Security TLS protocol the like or a customized or newly developed protocol.

To enable updating information manually for example cipher engines may be implemented to read in updated key information and purpose information incremental or complete information on predetermined times and or intervals e.g. every X number of minutes such as 30 every Y number of hours such as two every day at 03 00 hour etc. . Information added before the next read by a CE will be available to the CE after the next read. Information can be deleted after a CE s last read of the information i.e. the deleted information is determined not needed after the last read . And information can be changed e.g. the equivalent of the combination of a deletion before an addition after the information to be deleted is no longer needed and before the information to be added is needed.

For example operators of CEs and shared some update key and or purpose information e.g. addition deletion and or modification reflected on tables and and agreed upon a schedule e.g. at 21 00 hour on a certain day to perform the updates. CE may be implemented to update itself with key and purpose information by fetching or reading tables and at 09 00 hour and 21 00 hour. CE may be implemented to update itself every three hours e.g. at 03 00 I hours I 0 to 8 . Based on the agreed upon update schedule the operator at CE may enter update information to tables and any time after the last read at 09 00 on that day. The operator at CE may enter update information to tables and any time after the last read at 18 00 on that day. At 21 00 hour of that day updated information e.g. addition deletion and or modification are read by CEs and without stopping or any interruption of service.

To implement updating using an assisted mechanism e.g. user interface or UI not shown the UI may take input from an operator e.g. operator of CE or and perform the update at time based on the implementation of a CE and a schedule by the operator. For example CE is implemented as described above e.g. to update itself at 09 00 hour and 21 00 hour . The operator may at any time provide information to be updated and schedule the mechanism to update tables and at 08 59 at the agreed upon day. The operator itself in turn may be updated by a secure communication protocol e.g. using SSL TLS etc. .

In some implementations updating on both ends of a communication link does not need to be synchronized e.g. CE is updated but CE is not . For example key and or purpose information may be associated with a version number. Encrypted information may be communicated from one CE to another CE with the information version number at least in the first packet of information. CE may encrypt and or authenticate a message using version 5 of the key and or purpose information. CE sends the ciphertext with an indication that version 5 information is used. CE on the receiving end checks to see if version 5 information is available. If it is CE decrypts and or checks the authentication of the received information. If version 5 information is not available assuming that it will be after a subsequent update of information CE may queue or stored the received message to be processed later when version 5 information is available.

At block key information associated with the communication partner is identified determined or looked up e.g. KEn and KIn for IDn or CE . At block based on the purpose e.g. TAG the purpose information which provides length information such as encryption length EL and integrity length IL is retrieved. Optionally at block some error checking may be performed. For example the length of the message may be verified or compared to the EL value. Error messages and or other appropriate operations may be performed if the length of the message is not verified. It the length is verified at block the existence of an encryption key KEn indicates that the message should be encrypted using the predetermined function e.g. HMAC SHA1 used as a pseudorandom function stored in a column of table not shown . In some example implementations an encryption function e.g. MAC SHA1 or HMAC SHA1 may be used by default unless a different function is specified or defined e.g. in table not shown . The message M is encrypted at block to produce a ciphertext. Example encryption operations are described in below.

At block the existence of an integrity key KIn indicates that the message should be authenticated using the predetermined function e.g. HMAC or HMAC SHA1 stored in a column of table not shown . In some implementations a hash function e.g. one based on a MAC function e.g. HMAC SHA1 may be used by default unless a different function is specified or defined e.g. in table not shown . At block the message is authenticated to produce an integrity value. There are many ways to produce the integrity value which is used by the receiver to authenticate the ciphertext. For example given a function F e.g. HMAC or HMAC SHA1 and an integrity key e.g. KIn the integrity value may be produced from 

IV is a random value associated with the current invocation of the cipher pseudorandom value or any agreed upon unique private or public value. IV examples are described in . denotes concatenation. The integrity value may be truncated down to or extracted only a few bytes of data e.g. any agreed upon four bytes and indicated by the integrity length value e.g. IL ILk or ILm in table . The receiver e.g. CE knowing the same F the same secret integrity key KIn and the same way of producing another integrity value from the ciphertext is able to authenticate or validate the integrity of the ciphertext by checking the equality of the produced value against the received value. The receiver s operations are described further in below.

At block the encryption results and or authentication results are sent to the receiver. For example the ciphertext if encryption is performed the integrity value if authentication is performed the IV value described in if used and the receiver identifier e.g. IDn are sent to the receiver. The receiver and the sender may be referred to as cipher engines partners or servers.

In some examples process may be implemented with different fewer or more blocks. Process may be implemented as computer executable instructions which can be stored on a medium loaded onto one or more processors of one or more computing devices and executed as a computer implemented method.

Data string may be referred to as an initial vector or IV . IV includes a tag and a nonce e.g. a number that is arbitrary and with high probability only used once in a cryptographic communication . Tag is used in a communication scheme that involves different purposes for different messages. Tag is not used or used with a default value if a communication scheme does not use purposes. Nonce may be any value or string that is not easily repeatable in the system. An example of a nonce may be the combination or concatenation of a timestamp an identifier or internet protocol IP address of the sender and other value e.g. tie breaker value that ensures two IVs created in a small time window by the same sender are not the same. An example tie breaker value may be an identifier e.g. PID of an executing process spawned to form the IV or a few least significant bytes of a PID.

For example tag may be a one byte value i.e. supports tags and the nonce may be a 15 byte value e.g. an eight byte timestamp a 4 byte sender or server IP address or identifier and a 3 byte PID . In combination IV is a 16 byte value that is different from another 16 byte IV created at another time and or by another process e.g. with a different PID . Components of IV may be arranged in any manner or order.

IV provides added benefits of detecting stale responses replies and or attacks. Since an IV includes a timestamp of the time of the start encryption any IV value received substantially later or unreasonably later than the timestamp is a suspect data package and may be subject to further determination or investigation.

Data string may be referred to as an extended IV or E IV. E IV is IV with a count . Count may be one or more bytes long depending on implementations and or message length. For example to implement an expandable count count may start as a one byte value for any count value from 0 to 255. After that count may be two bytes long for the next 256 counts e.g. the first byte stores a 0 or another value plus a second byte stores the count . Then count may be three bytes long e.g. first two bytes store 00 a count byte for the next 256 counts and so on. The count value may be expanded to support unlimited number of counter bytes to encrypt a message of arbitrary length.

In some implementations where more than 256 tags are needed Tag may be implemented to be expandable in the same fashion as count .

IV and E IV used as seed values in cryptographic functions are generated in a manner or any manner that results in a value that is not easily repeatable in the system. For example the PID in nonce is pseudo random and count is generated in a manner only shared by the CEs on both ends of a communication link e.g. different pair of CEs may implement count differently . IV may be exchanged in the clear between the sender and the receiver or may be exchanged in a secure manner e.g. using SSL TLS etc. .

At block check to see if there is another block of M that has not been encrypted. If so repeat the operations from block on. In this example where M is eight byte long there is no more remaining M to encrypt. The ciphertext C is provided at block .

If M is longer than 20 bytes process is iterated over blocks more than once. For example given a different M that is 44 bytes 352 bits long. M is associated with the purpose TAGk for example. M is broken up into two 20 byte segments and a third 4 byte segment. At block IV is generated as TAGk current timestamp server ID current PID . At block the first E IV or E IV is generated as IV count 0 . AT block to encrypt the first segment segment of M a first chunk chunk of cipher data is produced by chunk F KEn E IV . The first 20 byte of ciphertext C segmentXOR chunk. More M is yes at block . Process iterates through blocks two more times to produce 

Since segmentis 4 byte long chunkis truncated down to four bytes and Cis 4 byte long. At block a 44 byte ciphertext C C C Cis provided.

Having unique IV values are vital. For example if messages M and M are encrypted using the same IV value. Ciphertext C F KEn IV XOR M and C F KEn IV XOR M. If an attacker or data interceptor intercepts C and C which may be communicated over the Internet the attacker will be able to recover M if the attacker is aware of M and vice versa since M C XOR C XOR M. For each unique IV value E IV E IV E IV . . . E IVare generated to ensure unique initialization vectors for each of the segment of the message M.

Note that C may also be produced by C M XOR chunk chunk chunk chunk chunk chunk may be referred to as a cipher pad .

In some example implementations process may be implemented with different fewer or more blocks. Process may be implemented as computer executable instructions which can be stored on a medium loaded onto one or more processors of one or more computing devices and executed as a computer implemented method.

If nothing fails process continues to block where key information associated with the communication partner is identified determined or looked up e.g. KEn and KIn from table . In some implementations CE may communicate with two or more partners and table may include identifiers of the communication partners e.g. IDc for CE not shown . At block a tag value for a communication is extracted from the received IV value. Based on the extracted purpose e.g. TAG the purpose information which provides length information such as encryption length EL and integrity length IL is retrieved from table . The received integrity value may be checked against the integrity length IL. If the length is checked out at block the received ciphertext is decrypted. Example decryption operations are described in below. A message M is produced from the decryption operations.

At block if an integrity value is received it is used to perform an authentication verification or checking. To detect any tampering during transmission another integrity value integrity value 2 is generated by the receiver CE in exactly the same method an integrity value that was received was generated by the sender at above . The integrity value 2 may be generated the same way the received integrity value was generated since the sender and receiver e.g. CEs and share information about the function used F the same secret integrity key KIn the same secret integrity length value IL and the same way of producing the integrity value e.g. using the message M and the IV used . After integrity value 2 is generated it is compared with the received integrity value to authenticate or validate the integrity of the received ciphertext. If integrity value 2 matches integrity value the received ciphertext is validated and the decrypted message M is accepted. If not an error has occurred and appropriate operations may be performed. Note that generating the integrity tag at block and at block using M can be done in various other ways e.g. replacing M by C as long as the sender and receiver are in agreement on what integrity method is to be employed.

In some examples process may be implemented with different fewer or more blocks. Process may be implemented as computer executable instructions which can be stored on a medium loaded onto one or more processors of one or more computing devices and executed as a computer implemented method.

Decrypting C uses the special characteristics A XOR B XOR A B of the XOR operation. Since C cipher pad XOR M. M cipher pad XOR C cipher pad XOR cipher pad XOR M. Therefore the same cipher pad used in producing C needs to be generated here to decrypt C to produce M. Since CEs on both ends of a communication links share the same secret keys same cryptographic function s and the same manner in producing count values both CEs given the IV can produce the exact cipher pad in segments or in whole.

C is a 44 byte string and is broken up into two 20 byte segments Cand C and a third 4 byte segment C . At block the first E IV or E IV is generated as IV count 0 . AT block to decrypt the first segment of C C a first chunk chunk of cipher data is produced by chunk F KEn E IV . The first 20 byte of M M CXOR chunk. More C predicate question result in a yes at block . Process iterates through blocks two more times to produce 

Since Cis 4 byte long chunkis truncated down to four bytes and Mis 4 byte long. At block a 44 byte message M M M Mis provided.

In some examples process may be implemented with different fewer or more blocks. Process may be implemented as computer executable instructions which can be stored on a medium loaded onto one or more processors of one or more computing devices and executed as a computer implemented method.

In some examples process may be implemented with different fewer or more blocks. Process may be implemented as computer executable instructions which can be stored on a medium loaded onto one or more processors of one or more computing devices and executed as a computer implemented method.

An example of one or more devices may be computing device described below in . Devices may include but are not limited to a computer e.g. a laptop computing device a mobile device e.g. smartphone or tablet a television a device associated with a vehicle a server computer computing devices storage devices and .

Computing device can be communicatively coupled to input user interface and output device interface . Either one or both of input user interface and output device interface can be a wired or wireless interface and can be detachable. Input user interface may include any device component sensor or interface physical or virtual that can be used to provide input e.g. buttons touch screen interface keyboard a pointing cursor control microphone camera braille motion sensor optical reader and or the like . Output device interface may include a display television monitor printer speaker braille or the like. In some example implementations input user interface and output device interface can be embedded with or physically coupled to the computing device . In other example implementations other computing devices may function as or provide the functions of input user interface and output device interface for a computing device .

Examples of computing device may include but are not limited to highly mobile devices e.g. smartphones devices in vehicles and other machines devices carried by humans and animals and the like mobile devices e.g. tablets notebooks laptops personal computers portable televisions radios and the like and devices not designed for mobility e.g. desktop computers other computers information kiosks televisions with one or more processors embedded therein and or coupled thereto radios and the like .

Computing device can be communicatively coupled e.g. via I O interface to external storage and network for communicating with any number of networked components devices and systems including one or more computing devices of the same or different configuration. Computing device or any connected computing device can be functioning as providing services of or referred to as a server client thin server general machine special purpose machine or another label.

I O interface can include but is not limited to wired and or wireless interfaces using any communication or I O protocols or standards e.g. Ethernet 802.11x Universal System Bus WiMax modem a cellular network protocol and the like for communicating information to and or from at least all the connected components devices and network in computing environment . Network can be any network or combination of networks e.g. the Internet local area network wide area network a telephonic network a cellular network satellite network and the like .

Computing device can use and or communicate using computer usable or computer readable media including transitory media and non transitory media. Transitory media include transmission media e.g. metal cables fiber optics signals carrier waves and the like. Non transitory media include magnetic media e.g. disks and tapes optical media e.g. CD ROM digital video disks Blu ray disks solid state media e.g. RAM ROM flash memory solid state storage and other non volatile storage or memory.

Computing device can be used to implement techniques methods applications processes or computer executable instructions in some example computing environments. Computer executable instructions can be retrieved from transitory media and stored on and retrieved from non transitory media. The executable instructions can originate from one or more of any programming scripting and machine languages e.g. C C C Java Visual Basic Python Perl JavaScript and others .

Processor s can execute under any operating system OS not shown in a native or virtual environment. One or more applications can be deployed that include logic unit application programming interface API unit input unit output unit cipher engine purposes tags management engine update and inter unit communication mechanism for the different units to communicate with each other with the OS and with other applications not shown . For example cipher engine purposes tags management and engine update may implement one or more processes shown in and C . The described units and elements can be varied in design function configuration or implementation and are not limited to the descriptions provided.

In some example implementations when information or an execution instruction is received by API unit it may be communicated to one or more other units e.g. logic unit input unit output unit cipher engine purposes tags management and engine update . For example cipher engine may be used to implement anyone of CE or . A communication scheme that involves purposes and tags is supported by purposes tags management which for example associates a message with a tag and determines an associated tag for a given message. When cipher engine needs to be updated e.g. the key information and or purpose information accessed by the cipher engine engine update module may be used. For example engine update may take a user s or an administrator s updated information and store it in memory and or internal storage . When the time comes to perform the update e.g. a scheduled time engine update updates one or more tables used by cipher engine .

In some instances logic unit may be configured to control the information flow among the units and direct the services provided by API unit input unit output unit cipher engine purposes tags management and engine update in some example implementations described above. For example the flow of one or more processes or implementations may be controlled by logic unit alone or in conjunction with API unit .

In situations in which the systems discussed here collect personal information about users or may make use of personal information the users may be provided with an opportunity to control whether programs or features collect user information e.g. information about a user s social network social actions or activities profession a user s preferences or a user s current location or to control whether and or how to receive content from the content server that may be more relevant to the user. In addition certain data may be treated in one or more ways before it is stored or used so that personally identifiable information is removed. For example a user s identity may be treated so that no personally identifiable information can be determined for the user or a user s geographic location may be generalized where location information is obtained such as to a city ZIP code or state level so that a particular location of a user cannot be determined. Thus the user may have control over how information is collected about the user and used by a content server.

Although a few example implementations have been shown and described these example implementations are provided to convey the subject matter described herein to people who are familiar with this field. It should be understood that the subject matter described herein may be implemented in various forms without being limited to the described example implementations. The subject matter described herein can be practiced without those specifically defined or described matters or with other or different elements or matters not described. It will be appreciated by those familiar with this field that changes may be made in these example implementations without departing from the subject matter described herein as defined in the appended claims and their equivalents.

