---

title: Resuming applications and/or exempting applications from suspension
abstract: Only a particular number of applications on a computing device are active at any given time, with applications that are not active being suspended. A policy is applied to determine when an application is to be suspended. However, an operating system component can have a particular application be exempted from being suspended (e.g., due to an operation being performed by the application). Additionally, an operating system component can have an application that has been suspended resumed (e.g., due to a desire of another application to communicate with the suspended application).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361150&OS=09361150&RS=09361150
owner: Microsoft Technology Licensing, LLC
number: 09361150
owner_city: Redmond
owner_country: US
publication_date: 20130930
---
This application is a continuation of U.S. patent application Ser. No. 13 229 574 filed Sep. 9 2011 entitled Resuming Applications and or Exempting Applications from Suspension to Benjamin Salim Srour et al. now U.S. Pat. No. 8 578 394 the entire disclosure of which is hereby incorporated by reference herein in its entirety.

Many computing devices can run multiple programs concurrently some being used by the user and others running in the background or ready to be used by the user. Running multiple programs concurrently typically allows the user to quickly switch between programs that he or she desires to use but is not without its problems. One such problem is that these multiple programs oftentimes include programs running in the background that provide little if any value to the user and are not likely to be used anytime soon by the user. These programs can use significant amounts of resources such as processor time memory etc. which can lead to using energy unnecessarily and decreased battery life for battery powered computing devices. However preventing multiple programs from running concurrently can decrease responsiveness and functionality that users expect due to the need to re start the programs.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In accordance with one or more aspects a determination is made of one application of multiple applications running on a computing device that is to be exempted from being suspended. In response to the determination the one application is exempted from being suspended on the computing device.

In accordance with one or more aspects a request to resume execution of an application that has been suspended due to the computing device no longer displaying a user interface for the application is received. The request is received from an operating system component running on the computing device. In response to the request execution of the application is resumed.

Resuming applications and or exempting applications from suspension is discussed herein. Multiple applications can be started and loaded into the memory of a computing device concurrently but only a particular number of those applications e.g. one or two are active at any given time. Applications that are not active are suspended which refers to the applications not being able to use the processor. A policy is applied to determine when an application is to be suspended. However an operating system component can have a particular application be exempted from being suspended e.g. due to an operation being performed by the application . Additionally an operating system component can have an application that has been suspended resumed e.g. due to a desire of another application to communicate with the suspended application .

Suspending rather than terminating applications resolves various issues regarding having unnecessary applications running in the background. It is often faster and more efficient to unsuspend a program rather than restart it but while it is suspended it is prevented from executing and consuming energy or interfering with the applications the user is using. However a technical challenge remains in determining when it is okay to suspend an application and when an application should be terminated instead of suspended. These determinations can be made at least in part by observing and modifying policies maintained by the system for particular applications and or classes of applications.

Computing device includes an operating system and one or more applications . During operation operating system and applications run on computing device with operating system managing applications . The management of applications can include automatically terminating one or more applications as discussed in more detail below.

Operating system includes an application management module a system responsiveness analysis module an application lifetime management module an application termination module a policy evaluation module and an application suspension module . Although modules are illustrated as being part of operating system alternatively one or more of modules can be implemented separately from operating system . Additionally it should be noted that the functionality provided by one or more of modules can be separated into multiple modules and or that at least some of the functionality provided by two or more of modules can be combined into a single module. Furthermore although modules are illustrated it should be noted that operating system can include various additional modules providing various additional functionality.

Various modules of operating system are discussed herein as notifying or communicating various indications or information to one another. It should be noted that such notification or communication can take various forms. For example one module can invoke an application programming interface API of another module one module can report an event that another module has registered to receive one module can store data or other information in a location from which another module can retrieve the data or information and so forth.

Application management module monitors or is otherwise aware of which applications are running on computing device at any given time including active and inactive applications. An active application refers to an application that is currently being scheduled for execution by one or more processors of computing device and thus an application that is being allocated processor time for execution. An inactive application refers to an application that is not currently being scheduled for execution by one or more processors of computing device and thus an application that is not being allocated processor time for execution. An application can be loaded into memory of computing device but be an inactive application as discussed in more detail below.

Application management module also monitors or is otherwise aware of which applications are being used at any given time. Generally an application is being used at a particular time if a user interface for the application is being displayed or otherwise presented by computing device at that particular time and or a user of computing device is providing user inputs to the application at that particular time. Module can determine which applications are being used at any given time in a variety of different manners. For example module can determine that an application is currently being used if a window in which that application displays a user interface is currently being displayed on a display device that is part of or coupled to computing device that an application is currently being used if a window in which that application displays a user interface is a top or highest level window being displayed on a display device that is part of or coupled to computing device that an application is currently being used if a window in which that application displays a user interface is not minimized and so forth. An application can also be referred to as being used at a particular time if another application that is being used at the particular time is communicating with the application. For example module can determine that an application is currently being used if that application is communicating with another application that displays a user interface that is a top or highest level window being displayed on a display device that is part of or coupled to computing device .

In one or more embodiments operating system allows a particular number of windows e.g. one or two to be displayed at any given time. Applications display their user interfaces within such windows and thus only the particular number of applications can display their user interfaces at any given time. At any particular time an application that is displaying a user interface on a display device that is part of or coupled to computing device is determined as being an application that is currently being used by a user of computing device at that particular time. And an application that is not displaying a user interface on a display device that is part of or coupled to computing device is determined as being an application that is not currently being used by a user of computing device at that particular time.

Application lifetime management module controls the policy applied by operating system to determine which applications can execute. This policy can indicate how to determine whether an application is active or inactive at any given moment how to determine which application is to be terminated how many windows can be displayed at any given time and so forth. Module can obtain the policy in a variety of different manners such as being pre configured with the policy receiving the policy from a user of computing device e.g. via various preference or configuration settings receiving the policy from another module of computing device or from another computing device receiving the policy from a network e.g. from another device or service via the network and so forth.

Policy evaluation module determines whether the policy applied by operating system is being satisfied by applications . Policy evaluation module communicates with application management module to determine which applications are being used at any given time. Based on this determination and the policy module determines whether the policy is being satisfied by applications . For example if the policy indicates that applications that are not being used be inactive and if one or more applications that are not being used by a user of computing device are active at a particular time then module determines that the policy is not being satisfied by applications at that particular time.

In response to determining that applications do not satisfy the policy policy evaluation module determines one or more applications to suspend so that applications do satisfy the policy. Suspending an application refers to making the application inactive. Policy evaluation module determines which one or more applications to suspend based on the determination of which applications are being used and the policy. For example if the policy indicates that applications that are not being used be inactive and if one or more applications that are not being used are active at a particular time then module determines that the applications that are not being used but are active are the one or more applications to suspend.

Application suspension module receives from policy evaluation module an indication of one or more applications to suspend. In response to the indication to suspend one or more applications policy suspension module suspends the indicated one or more applications . An application is suspended by notifying the application that it is to be suspended. The application is optionally given an amount of time e.g. 1 second or 4 seconds to save data and or state information that the application deems is to be saved prior to being suspended. The application stores data and or state information to a nonvolatile or other persistent storage device allowing the data and or state information to be subsequently retrieved even if the application is terminated . Suspending an application refers to changing the application from being active to being inactive. An inactive application also referred to as a suspended application is not executed by a processor of computing device as discussed above. An application can be suspended in different manners such as by invoking an API of operating system to suspend the application.

It should be noted that once suspended an application can subsequently become active. For example a user input can be received from a user indicating that he or she desires to use an application. If the application is inactive the application is made active in response to a user request to use the application and the application is executed by one or more processors of computing device . Making a suspended application an active application is also referred to as resuming the application. Once active again the application resumes execution restoring saved state as appropriate for the application.

System responsiveness analysis module uses one or more of various metrics regarding memory usage to determine whether to terminate one or more applications . For example system responsiveness analysis module can determine that one or more applications are to be terminated based on a memory load metric that refers to an amount of memory allocated to applications an available physical memory metric that refers to an amount of physical memory that is available at any given time an available page file space metric that refers to an amount of available storage space on a storage device in which pages are stored an average lifetime on standby list metric that refers to the average lifetime of pages on a standby list maintained by a memory manager of operating system and so forth. System responsiveness analysis module notifies in response to determining that one or more applications are to be terminated application termination module to terminate one or more applications .

Application termination module determines in response to a notification from system responsiveness analysis module to terminate one or more applications one or more applications to terminate. An application can be terminated in different manners such as by invoking an API of operating system to terminate the application. In one or more embodiments module selects to terminate one or more applications that have been suspended and terminates the selected one or more applications . Application termination module can determine which particular applications to terminate in various manners such as based on how recently each of applications was used how frequently each of applications is used an amount of memory used by the applications and so forth.

Alternatively rather than terminating an application application termination module can move an application out of primary memory into secondary memory such as a hard disk or flash storage device. Module can determine which particular applications to move in various manners analogous to the determination of which particular applications to terminate as discussed above. An application can be moved in different manners such as by invoking an API of operating system to move the application copying pages of memory used by the application to the secondary storage device and so forth.

Application lifetime management module can also receive a request from another module or component of operating system to exempt an application from being suspended. Such a request is made for example by a module or component of operating system that is aware of an operation being performed by the application that is not yet finished e.g. playing back audio content printing a document and so forth . In response to a request to exempt a particular application from being suspended application lifetime management module notifies policy evaluation module that when determining which one or more applications to suspend that that particular application is not to be suspended. Exempting an application from being suspended refers to preventing the application from being suspended if the application would have otherwise absent the request to exempt the application from being suspended been suspended the request to exempt the application from being suspended prevents the application from being suspended.

Application lifetime management module can also receive a request from another module or component of operating system to resume execution of a suspended application . Such a request is made for example by a module or component of operating system that is aware of an application that desires to communicate with a suspended application. In response to a request to resume execution of a suspended application application lifetime management module resumes the application. An application can be resumed in different manners such as by invoking an API of operating system to resume the application. Application lifetime management module can also resume a terminated application by having the terminated application re started e.g. by invoking an API of operating system to re start the application and then resuming the application.

Some OS components communicate with module using a lifetime interface API and other OS components communicate with module using asynchronous communication mechanism . How an OS component communicates with module can be determined in different manners and can be a design choice on the part of the developer of the OS component. In one or more embodiments the manner in which an operating system component communicates with module is determined based on whether the operating system component is running in a user mode or a kernel mode. For example if an operating system component is running in a kernel mode then the operating system communicates with module using asynchronous communication mechanism and if the operating system component is running in a user mode then the operating system component communicates with module using lifetime interface API .

Lifetime interface API exposes one or more methods that can be invoked by an operating system component . A method of API can be invoked by an operating system component providing an identifier of an application as a parameter. A variety of different identifiers of applications can be used that allow the applications to be distinguished from one another. For example the identifier of an application can be an identifier of a package that includes the application e.g. a combination of a name of the application a name of a publisher of the package an indication of an architecture with which the application is designed to operate a version number of the package and or various other characteristics of the package . The operating system component can also provide an exemption class or resumption class as a parameter. The exemption class or resumption class indicates a reason why operating system component is making the request and can be used in a variety of different manners as discussed below. The exemption class or resumption class can be identified as a parameter when invoking a method of API or alternatively can be inherent in the method invoked e.g. different methods can be exposed for different exemption and or resumption classes . The type of request e.g. a request to resume execution of a suspended application or a request to exempt an application from being suspended can be identified as a parameter when invoking a method of API or alternatively the request can be inherent in the method invoked e.g. different methods can be exposed for different types of requests .

Asynchronous communication mechanism includes a module or component that can receive notifications from various operating system components . Other components or modules such as application lifetime management module can subscribe to these notifications. Thus whenever an operating system component provides a notification to mechanism mechanism provides the notification to module . This notification can include various information such as an identifier of an application which can take various forms as discussed above an indication of an exemption class or resumption class for the request and or an indication of a type of request e.g. whether the request is a request to resume execution of a suspended application or a request to exempt an application from being suspended .

In response to a request to exempt an application from being suspended application lifetime management module trusts that the operating system component making the request is doing so for an appropriate reason. Thus module prevents the application from being suspended by notifying an evaluation module that when determining which one or more applications to suspend that the identified application is not to be suspended.

An operating system component can request that an application be exempted from being suspended for various reasons and different operating system components can request that applications be suspended for different reasons. Typically an operating system component requests that an application be exempted from being suspended in response to the operating system component determining that the application is performing an operation that is to be allowed to continue but that would not continue if the application were suspended. For example an application could be performing a printing operation that involves providing on a page by page basis data for a document to be printed. The operating system component e.g. a print spooler requests that the application be exempted from being suspended because if the application were to be suspended before printing of the document finishes then printing of the document would not finish. By way of another example an application could be an audio player application playing back audio content e.g. a song or playlist of songs . The operating system component e.g. an audio API requests that the application be exempted from being suspended because if the application were to be suspended then playback of the audio content would stop.

By way of yet another example an application could be communicating with a device e.g. camera network interface card wireless device etc. via an operating system component that is a device driver. The operating system component determines that the application is actively using the device if the communication e.g. input output I O between the application and device is occurring at at least a threshold rate and requests that the application be exempted from being suspended if the application is actively using the device. By way of still another example an application could be sharing information e.g. photos music videos etc. with another application e.g. through a well defined interface as part of a share operation. If a share operation is being performed the operating system component e.g. that facilitates or is otherwise aware of the share operation requests that the application be exempted from being suspended so that the share operation can be completed. Various other operations could also cause an operating system component to request that an application be exempted from being suspended such as an application transferring data to and or from another device e.g. on a local area network over the Internet etc. an application performing some device utility operation e.g. backing up a hard drive checking for malware and so forth.

The request that an application be exempted from being suspended can also indicate an exemption class. Various different exemption classes can be used and each exemption class identifies the reason why the application is being requested to be exempted from being suspended. For example exemption classes could be printing audio device I O and so forth.

Alternatively rather than specifying an exemption class application lifetime management module can infer the reason why the application is being requested to be exempted from being suspended. For example each operating system component can have a particular reason why it requests that an application be exempted from being suspended. Thus module can identify the reason why an application is being requested to be exempted from being suspended based on the operating system component from which the request was received.

Application lifetime management module can exempt an application from being suspended indefinitely or alternatively until some event occurs or some amount of time elapses. For example such an event can be that the operating system component that requested that the application be exempted from being suspended notifies module when the application is to no longer be exempted from being suspended e.g. because a document finished printing because a user paused playback of audio content for at least a threshold amount of time e.g. two minutes etc. . By way of another example module can exempt an application from being suspended for a particular amount of time e.g. five minutes one hour etc. This particular amount of time can be determined in different manners such as based on the reason why the application is being requested to be exempted from being suspended e.g. different exemption classes for the request provided by operating system components can have different particular amounts of time based on a default configuration of module based on an indication of the particular amount of time received as a parameter of the request from module and so forth. This particular amount of time could optionally be extended by the operating system component by for example submitting one or more additional requests to exempt the application from being suspended. In response to such an event or amount of time elapsing the application is no longer exempted from being suspended. Accordingly module invokes a policy evaluation module e.g. policy evaluation module of to suspend the application or to determine whether the policy applied by the operating system is being satisfied by the applications as discussed above.

The reason why the application is being requested to be exempted from being suspended e.g. an exemption class for the request provided by the operating system component can also be used in other manners. For example application lifetime management module can include or invoke another module including functionality to maintain a record of which modules requested that applications be exempted from being suspended the reason why those operating system components requested that the applications be exempted from being suspended and or which applications were exempted from being suspended. This record can be used in various manners such as to identify potential abuses of the requests to exempt applications from being suspended to identify a frequency with which requests to exempt applications from being suspended are received and so forth.

In response to a request to resume execution of a suspended application application lifetime management module trusts that the operating system component making the request is doing so for an appropriate reason. Thus module resumes the suspended application such as by invoking an API of operating system to resume the suspended application.

An operating system component can request that an application be resumed for various reasons and different operating system components can request that applications be resumed for different reasons. Typically an operating system component requests that an application be resumed in response to a desire of another application component or module to communicate with the suspended application. For example an application may desire to communicate with another application using any of a variety of conventional inter process communication techniques. The operating system component requests that the other application be resumed because the other application cannot communicate if suspended because the suspended application is not being scheduled for execution . By way of another example an application may desire to obtain data from another application in response to a user request received by the other application e.g. a request to paste data copied from the other application . The operating system component requests that the other application be resumed because the data cannot be obtained from the other application if the other application is suspended.

By way or another example an operating system component itself may desire to communicate with a suspended application e.g. to enumerate something in or otherwise obtain information or data from the suspended application . The operating system component requests that the application be resumed because the application cannot communicate if suspended. It should be noted that these are example reasons why an operating system component may request that a suspended application be resumed and that an operating system component can request that an application be resumed for any of a variety of other reasons.

The request to resume execution of a suspended application can also indicate a resumption class for the request. Various different resumption classes can be used and each resumption class identifies the reason why the application is being requested to be resumed. For example resumption classes could be inter process communication user request operating system component desire and so forth.

Alternatively rather than specifying a resumption class application lifetime management module can infer the reason why the application is being requested to be resumed. For example each operating system component can have a particular reason why it requests that an application be resumed. Thus module can identify the reason why an application is being requested to be resumed based on the operating system component from which the request was received.

Once an application is resumed application lifetime management module exempts the application from being suspended. This exemption is analogous to the discussion above except the exemption is done in response to the request to resume execution of the suspended application. The application can be exempted from being suspended indefinitely or alternatively until some event occurs or some amount of time elapses analogous to the discussion above. For example application management lifetime module can exempt the application from being suspended for a particular amount of time e.g. two seconds ten seconds and the particular amount of time can be based on the reason why the application is being requested to be resumed. By way of another example application management lifetime module can exempt the application from being suspended until a notification is received from the operating system component that the reason for requesting that the application be resumed is no longer present. In response to such a notification module invokes a policy evaluation module e.g. policy evaluation module of to suspend the application or to determine whether the policy applied by the operating system is being satisfied by the applications as discussed above.

In one or more embodiments an operating system component requesting to resume execution of a suspended application maintains a counter or other record of how many applications or operating system components have requested an action that triggers making the request an action that causes the operating system component to make the request to resume execution of the suspended application . Different counters or other records can be maintained for different reasons. For example if three different applications request to communicate with a suspended application using an inter process communication technique then the operating system component maintains a counter or other record indicating that three applications have requested an action that would trigger making the request. If an additional application requests to communicate with the suspended application using an inter process communication technique then the counter is incremented or other record updated to indicate that four applications have requested an action that would trigger making the request. Or if one of the applications finishes its inter process communication after the suspended application was resumed then the counter is decremented or other record updated to indicate that two applications have requested an action that would trigger making the request.

When the counter or other record changes from zero applications having requested an action that would trigger making the request to one application having requested an action that would trigger making the request then the operating system component requests to resume execution of the suspended application. Additional changes of the counter or other record indicating more than one application have requested an action that would trigger making the request do not cause the operating system component to request to resume execution of the suspended application because the request has already been made. When the counter or other record changes from one application having requested an action that would trigger making the request to zero applications having requested an action that would trigger making the request then the operating system component notifies the application lifetime management module to have the policy evaluation module determine whether the policy applied by the operating system is being satisfied by the applications. If the resumed application is no longer exempted from being suspended e.g. due to a request from another OS component then the resumed application can be suspended in accordance with the policy. Additional changes of the counter or other record indicating that still more than one application have requested an action that would trigger making the request do not cause the operating system component to notify module to have the policy evaluation module determine whether the policy applied by the operating system is being satisfied by the applications because at least one application has still requested an action that would trigger making the request to resume execution of the suspended application.

In process a request is received to exempt an application from being suspended act . The request is received from an operating system component and thus is trusted as discussed above.

In response to the request received in act the application is exempted from being suspended act . By exempting the request the application is not suspended even though the application may otherwise have been suspended due to one or more applications running on the computing device not satisfying a policy as discussed above. The application can be exempted from being suspended indefinitely or alternatively until some event occurs or some amount of time elapses as discussed above.

In process a request is received to resume execution of an application that has been suspended act . The request is received from an operating system component and thus is trusted as discussed above. The application would have been suspended for example due to the computing device no longer displaying a user interface for the application as discussed above.

In response to the request the execution of the application is resumed act . The application is also exempted from being suspended on the computing device indefinitely or alternatively until some event occurs or some amount of time elapses as discussed above.

Thus the resuming applications and or exempting applications from suspension techniques discussed herein support various usage scenarios. A policy can be applied to suspend applications that are not being used resulting in applications that are not displaying a user interface being suspended. However if such an application is performing an operation that an operating system component determines is to be allowed to continue e.g. printing playing audio content then the application can be exempted from being suspended. Furthermore if communication with a suspended application is desired then an operating system component can have execution of the suspended application resumed. After communication with the suspended application is completed the operating system component can have the application suspended again assuming a policy does not otherwise indicate that the application is not to be suspended .

Computing device includes one or more processors or processing units one or more computer readable media which can include one or more memory and or storage components one or more input output I O devices and a bus that allows the various components and devices to communicate with one another. Computer readable media and or one or more I O devices can be included as part of or alternatively may be coupled to computing device . Processor computer readable media one or more of devices and or bus can optionally be implemented as a single component or chip e.g. a system on a chip . Bus represents one or more of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port a processor or local bus and so forth using a variety of different bus architectures. Bus can include wired and or wireless buses.

Memory storage component represents one or more computer storage media. Component can include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . Component can include fixed media e.g. RAM ROM a fixed hard drive etc. as well as removable media e.g. a Flash memory drive a removable hard drive an optical disk and so forth .

The techniques discussed herein can be implemented in software with instructions being executed by one or more processing units . It is to be appreciated that different instructions can be stored in different components of computing device such as in a processing unit in various cache memories of a processing unit in other cache memories of device not shown on other computer readable media and so forth. Additionally it is to be appreciated that the location where instructions are stored in computing device can change over time.

One or more input output devices allow a user to enter commands and information to computing device and also allows information to be presented to the user and or other components or devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone a scanner and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card and so forth.

Various techniques may be described herein in the general context of software or program modules. Generally software includes routines programs applications objects components data structures and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example and not limitation computer readable media may comprise computer storage media and communication media. 

 Computer storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer. Computer storage media refer to media for storage of information in contrast to mere signal transmission carrier waves or signals per se. Thus computer storage media refers to non signal bearing media and is not communication media.

 Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

Generally any of the functions or techniques described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module and component as used herein generally represent software firmware hardware or combinations thereof. In the case of a software implementation the module or component represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices further description of which may be found with reference to . In the case of hardware implementation the module or component represents a functional block or other hardware that performs specified tasks. For example in a hardware implementation the module or component can be an application specific integrated circuit ASIC field programmable gate array FPGA complex programmable logic device CPLD and so forth. The features of the resuming applications and or exempting applications from suspension techniques described herein are platform independent meaning that the techniques can be implemented on a variety of commercial computing platforms having a variety of processors.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

