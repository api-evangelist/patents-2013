---

title: Visualization of access permission status
abstract: Queries regarding access permissions of users and rights to directories in a complex enterprise are executed in near real-time, using lookups to tables that form a condensed database maintained for each file server. User information is condensed by arranging users in user groups having common data access rights. Directory permissions storage is condensed by showing only distinctive permissions to a directory in a table entry, and referencing inherited permissions of parent directories. The tables indicate recursive and ancestral relationships among the user groups and directories. They are developed and updated in advance of any queries. A consolidated view of the query results is presented on a single display screen. Using the tables results can be obtained without exhaustive searches of large file system tables.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08893228&OS=08893228&RS=08893228
owner: Varonis Systems Inc.
number: 08893228
owner_city: Saddle Book
owner_country: US
publication_date: 20130506
---
This invention relates to computer security. More particularly this invention relates to visualization of user access permissions on a computer system.

Data security policies typically determine who has access to an organization s stored data on various computer systems. These policies are rarely static. Users from within the organization e.g. employees partners contractors can pose a threat as severe as threats from outside the organization. Thus as the structure and personnel makeup of the organization change the security policy should be adjusted from time to time. Yet information technology departments often find it difficult to manage user access rights and to ensure that needed information is conveniently available while still protecting the organization s sensitive data.

Large business organizations may operate enterprise computer systems comprising large numbers of servers often geographically distributed. Storage elements in these systems may be accessible in many combinations by large numbers of users possibly numbering in the hundreds of thousands. Various personnel associated with data access authorizations including information technology personnel operational personnel such as account managers and third party reviewers such as the legal department of the enterprise may need to routinely inquire as to user access rights to enterprise data.

Maintaining a conventional localized or distributed database suitable to respond to queries for determining the privileges of any particular user or group of users within the enterprise or conversely to determine the privileges relating to a particular storage element or group of storage elements could overwhelm even the capabilities of today s sophisticated database management programs. Storage and retrieval of such data as needed to service queries may have an adverse affect on the storage capacities of various servers. Execution of such queries may impact performance of the servers and would impair the overall efficiency of the enterprise. Because response to such queries often necessitates an exhaustive iterative search through the directories of many file servers and their access control lists the response time of such queries becomes unacceptably prolonged.

Access control technologies have not been optimally implemented in enterprises that utilize diverse access control models. The state of the art today is such that there is no easy way for system administrators to know who is capable of accessing what in such environments. As a result in many organizations an unacceptably high proportion of users has incorrect access privileges. The related problems of redundant access rights and orphan accounts of personnel who have left the organization have also not been fully solved. Hence there is a need for improvements in controlling user file permissions in order to improve data security prevent fraud and improve company productivity. Furthermore misuse of data access even by authorized users is a concern of those charged with simplification and automation of system security.

Current techniques available to information technology personnel include review and maintenance of access control lists in conjunction with administration of user names passwords and the extension of such techniques to include biometrics encryption and limitation of access to a single sign on. Such techniques are inefficient often inaccurate and become impractical in the context of large complex organizations whose structure and personnel are constantly changing.

According to disclosed embodiments of the invention queries that reveal access permissions of users and rights to directories in an enterprise are executed in near real time. Using an efficient storage technique lookups to tables having abbreviated entries are performed and exhaustive searches of large file system tables are avoided. A consolidated view of the query results is presented on a single display screen which may combine results from geographically diverse file servers. User information is condensed by arranging users in user groups having common data access rights. Directory permission storage is condensed by showing only distinctive permissions to a directory in a table entry and referencing inherited permissions of parent directories. The user information and directory permission are maintained per server as a relatively small database.

An embodiment of the invention provides a method for displaying data access privileges for data in an enterprise which is carried out by defining user groups offering common rights of access to a plurality of file servers. The file servers are organized as a hierarchy of storage elements. The storage elements comprise nondistinctive elements that offer only access privileges that are inherited from ancestors thereof and distinctive elements that offer at least non inherited access privileges. The method is further carried out by maintaining a directory database only for the distinctive elements entries in the directory database including one of the distinctive elements and a list that identifies other distinctive elements that are ancestral thereto in the hierarchy. The method is further carried out by consulting the directory database to determine a directory oriented set of the user groups that offer common rights of access to selected ones of the storage elements.

In an aspect of the method the directory database includes a first directory database and a second directory database. The method is further carried out by defining first user groups and second user groups the first directory database and the first user groups including currently existing information and the second directory database and the second user groups including proposed modifications to the first directory database and the first user groups respectively. The method is further carried out by consulting the first directory database and the first user groups and consulting the second directory database and the second user groups to determine a first directory oriented set and a second directory oriented set respectively and reporting a difference between the first directory oriented set and the second directory oriented set.

In one aspect of the method the user groups comprise ancestral user groups having members that are other user groups and participant members of the other user groups have access rights that derive from the user groups and respective the ancestral user groups thereof. The method is further carried out by maintaining a user database of the user groups and the members entries in the user database including identifiers of respective ancestral user groups and consulting the user database to determine a user oriented set of user groups offering respective common rights of access to selected ones of the participant members.

One aspect of the method includes reporting members of the directory oriented set and the user oriented set.

Another aspect of the method includes making a determination that the user oriented set has an intersection with the directory oriented set and responsively to the determination issuing a report that the participant members are able to access the selected ones of the storage elements.

In yet another aspect of the method the user database includes a first user database of actual user groups in the enterprise and a second user database of proposed user groups and the directory database includes a first directory database of actual non inherited access privileges of the actual user groups and a second directory database of proposed non inherited access privileges of the proposed user groups wherein consulting the user database consulting the directory database making a determination and issuing a report are performed a first time using the first directory database and the first user database to issue a first report and performed a second time using the second user database and the second directory database to issue a second report and presenting a single display of the first report and the second report.

According to still another aspect of the method the single display includes a first pruned tree display of the storage elements including the first report and a second pruned tree display of the storage elements including the second report.

In an additional aspect of the method the user database includes a table of memberships wherein entries identify user groups that respectively offer common rights of access to the participant members and a table of relationships having entries identifying respective relationships among the user groups and the ancestral user groups thereof. The method is further carried out prior to consulting the user database by constructing the table of memberships and the table of relationships and updating the table of memberships and the table of relationships responsively to changes in a composition of any of the user groups.

In one aspect of the method the directory database includes a table of permissions wherein entries identify one of the user groups and a respective one of the distinctive elements a table of derived relationships wherein entries identify one of the distinctive elements and a respective instance of the list. The method is further carried out prior to consulting the directory database by constructing the table of permissions and the table of derived relationships and updating the table of permissions and the table of derived relationships responsively to changes in the non inherited access privileges.

Other embodiments of the invention provide computer software product and apparatus for carrying out the above described method.

In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent to one skilled in the art however that the present invention may be practiced without these specific details. In other instances well known circuits control logic and the details of computer program instructions for conventional algorithms and processes have not been shown in detail in order not to obscure the present invention unnecessarily.

Software programming code which embodies aspects of the present invention is typically maintained in permanent storage such as a computer readable medium. In a client server environment such software programming code may be stored on a client or a server. The software programming code may be embodied on any of a variety of known media for use with a data processing system such as a diskette or hard drive or CD ROM. The code may be distributed on such media or may be distributed to users from the memory or storage of one computer system over a network of some type to other computer systems for use by users of such other systems.

One aspect of the invention provides rapid response to queries regarding access privileges to enterprise data and displays results as a consolidated view of the information often on a single screen. Thus it is possible for qualified administrative personnel respective owners of the storage elements and their delegates to quickly be informed of user access rights to storage elements of an organizational file system.

User groups having common data access rights are interactively established by administrators or owners using the folder management application. Additionally or alternatively user groups may be automatically established using biclustering techniques which are disclosed in commonly assigned application Ser. No. 11 258 256 entitled Automatic Management of Storage Access Control which is herein incorporated by reference. The responsibility for managing changes in access privileges to storage elements in the file system may be centralized in an information technology activity. However it may also devolve upon respective owners of the storage elements who may further delegate responsibility for the same or different portions of the storage elements falling under their responsibility to authorizers . Techniques for the decentralization of user access privilege management are taught in commonly assigned application Ser. No. 11 786 522 entitled Automatic Folder Access Management which is herein incorporated by reference.

Turning now to the drawings reference is initially made to which is a block diagram of a data processing system wherein data access rights in an enterprise can be visualized in accordance with a disclosed embodiment of the invention. The system may be implemented as a general purpose computer or a plurality of computers linked together in a network for example the Internet. Thus although the system is shown as comprising a number of separate functional blocks these blocks are not necessarily separate physical entities but rather represent different computing tasks or data objects stored in a memory that is accessible to the processor. These tasks may be carried out in software running on a single processor or on multiple processors. The software may be provided to the processor or processors on tangible media such as CD ROM or non volatile memory. Alternatively or additionally the system may comprise a digital signal processor or hardwired logic.

Organization wide data storage accessible by the system is represented by an organizational file system . The file system may comprise one or more co located storage units. More typically it may be a geographically distributed data storage system. There is no requirement that individual storage units of the file system have the same capabilities. Storage elements in the file system have an ownership attribute. Within an organization s file system there are typically many owners each having ownership of a portion of the storage elements e.g. folders that are stored in the file system.

The file system may be accessed by any number of users using a graphical user interface application GUI which relates to other elements of the system via an application programming interface API . The users are typically members of the organization but may also include outsiders such as customers. The graphical user interface application is also the interface for management functions of the system . For example the users may be enabled to receive the results of their actual usage analysis as determined by an analysis engine . Sufficiently qualified users owners and their delegates authorizers can view their current status and can view proposed changes. The owners and authorizers may be authorized to accept or reject recommended or requested changes. In a complex organization the owners may be executives of a business unit and the authorizers would be their subordinates. There may be any number of authorizers associated with different owners and different authorizers may be authorized to control the same or different portions of the storage elements in the file system that are owned by the associated owner.

A probe engine is designed to collect historical user access information from the file system in an ongoing manner filter out duplicate or redundant information units and store the resulting information stream in an activity database . The probe engine is also utilized to collect information related to the organization s current file security policy the current structure of the file system and information about the users . The probe engine can be implemented in various environments and architectures. By collecting actual data usage information the probe engine provides coverage of what data is currently available to users across an unlimited number of users and data as well as what data is actually being accessed and used. The system relies on the probe engine to provide a basis for full and accurate usage visibility. The probe engine is completely transparent to system operations. All data collection processes are continuously monitored and terminated if performance degradation is detected assuring an unobtrusive operation.

The database is linked to a user repository which maintains a list of user identifications states roles group memberships and passwords. The user repository can be realized as the Active Directory service available from Microsoft Corporation Redmond Wash. The user repository is a logical unit that may be distributed in one or more enterprise servers e.g. a domain controller. In addition to user information the user repository facilitates assignment of enterprise wide policies deployment of programs and application of critical updates to the entire organization.

The analysis engine is a specialized module that continually aggregates and clusters data events and directory structure information to accurately profile and classify data usage. The analysis engine automatically maps data to users and vice versa making sense of data usage patterns to provide an understanding of data owners and who should be accessing data while pinpointing potential data usage risks. In one aspect of its operation the analysis engine deals with defining normal activity profiles and detecting atypical or exceptional data access activity by the users . The front end for the analysis engine is a data collector which efficiently records the storage access activities in the database . The output of the analysis engine can be further manipulated using an interactive administrative interface that enables system administrators to perform queries on the collected data.

Related to the analysis engine is a commit module which verifies ongoing user compliance with a governing or proposed security policy using data collected prior to its implementation. The commit module references an access control list ACL . Activities of the analysis engine and the commit module are described in further detail in the above noted application Ser. No. 11 258 256.

A specialized access privilege management application is linked to users owners authorizers and third party reviewers via the application programming interface and the user interface application . The management application is adapted to query and receive additional input from the analysis engine . In general the management application is operative for managing all aspects of data usage across the enterprise including risk assessment permission management auditing and reporting.

More particularly the management application is involved in generating convenient views of the composition of user groups data access rights of individual users and details of users or user groups having access rights to storage elements of the file system .

Reference is now made to which is a detailed block diagram of the file system in accordance with a disclosed embodiment of the invention. The file system comprises any number of individual servers each storing enterprise data represented as storage elements . The servers are each provided with a conventional communications interface through which they are linked to other elements of the system using any suitable communications network. In one embodiment the servers each store information relating to data structure and user access privileges to their respective storage elements in respective specialized databases details of which are described below. The management application can access the databases when servicing queries regarding user access privileges. The databases hold information in a highly condensed form and do not unduly preempt needed storage on the servers .

Alternatively the databases can all reside on a specialized database server not shown in which case there is even less impact on storage of the servers . However database maintenance then requires more communications traffic between the specialized database server and the servers which could degrade performance of the file system in a busy production environment.

In order to populate the databases it is assumed that the users and the storage elements throughout the file system have been processed to define user clusters and data clusters in which the users belonging to each user cluster have at least access privileges in common with the other users in that user cluster. Furthermore access privileges to the storage elements in the data clusters can be related to sets of user clusters. The process of defining and maintaining the user clusters and the data clusters may be automated as taught in the above noted application Ser. No. 11 258 256. It should be noted that a user may itself be a user group. Furthermore a user group may be a constituent of other user groups. Thus many of the processes described below are performed recursively.

Referring again to the management application accesses the user repository and cooperates with the user interface application to offer several views that are useful for examination and modification of collected information. A summary view provides a high level overview of each of the monitored resources. Reference is now made to which illustrates a screen presented by the user interface application in accordance with a disclosed embodiment of the invention. The screen is comprised of several elements a menu bar at the top of the screen a toolbar featuring selection icons that invoke specialized functions of the management application and an entity pane that displays the presently existing status of monitored resources. In the example of the pane shows that monitored directory test has been selected and several subdirectories test test . The screen has a pane displaying a proposed list of users and their access rights to the directory . While not shown in the example of the pane may also display the identities of user groups of which the proposed users are members and which enable their accesses to the directory .

In addition the screen includes a status bar at the bottom of the screen which displays operation status software messages and errors. While not shown in the screen may also include a panel for displaying an error list and can present a showing contextual display which is based on the entity selected in the pane .

The panes together constitute a work area which is the main working environment for use with the management application . It provides full visibility of the user repository e.g. Active Directory and allows the directory structure and permissions in the organization to be viewed. The screen enables editing of users user groups and file access permissions over any number of file servers local and remote throughout the enterprise.

As noted above the panes can existing directories users and user groups which are potentially aggregated from hundreds of servers. The pane reflects the actual entities in the environment. The pane displays recommendations for user group membership and file access rights. The panes thus provide an integrated view of current user and group rights to files and directories. In addition they display suggestions and manual changes made by qualified operators to file rights and user group membership.

Reference is now made to which illustrates another screen presented by the user interface application in accordance with a disclosed embodiment of the invention. A pane has a list of users some of whom are individuals e.g. a selected user and some are user groups e.g. user group .

A pane indicates directories to which the user has access rights. Some of these rights are inherited by default inherited from everyone e.g. directory unixdev and its subdirectories. This type of inheritance is often a default on legacy systems and presents a security vulnerability for complex organizations which the system alleviates in many ways. In particular screens that are generated by the user interface application such as the screen and the screen allow an operator to determine quickly the access rights to particular directories and the access rights of any particular user or to set such rights after which it may be desirable to delete the public inheritance from everyone .

For directories to which the user has access privileges entries describing the access permissions appear in a permissions column and an explanation column .

The user does not have access permissions for directory etc and no entries are shown in the permissions column or the explanation column .

In the case of directory ebooks and directory install permissions were originally inherited from everyone but subsequently limited as shown in the permissions column .

Indications of the permission status of the directories may be emphasized by different visual characteristics e.g. colors of their respective icons as can be seen by comparison of the icons of directories . It should be emphasized that the directories shown on the pane could be distributed among many different servers or could be on the same server. Of course if the size of the lists on either or both of the panes exceeds the capabilities of the display scrolling sorting filtering and search facilities are available to the operator in order to locate and display desired information.

Reference is now made to which is a portion of screen display showing a series of directories that is derived from the pane in accordance with a disclosed embodiment of the invention. The display can be navigated similar to a conventional Microsoft Windows display. The display also features a search field which enables the user to find desired resources. Depending on configuration search results are presented as a list a pruned tree in which insignificant results are omitted or an arrow tree which is a tree display in which arrows indicate significant results.

Navigation of user and group lists which are shown on the panes may involve traversing a hierarchical tree. Reference is now made to which is a portion of a screen display illustrating a list of users and user groups in accordance with a disclosed embodiment of the invention. When the list is arranged by parents user groups are displayed as main nodes of the tree while each group s users are shown as subnodes. A user group Domain Users heads the list. A user Administrator is a member of the user group . Information may be updated using button Reload . Using a drop down list a member of a list of users and groups may be selected after which only relevant user and user group elements are shown on the screen.

Reference is now made to which is a portion of a screen display in accordance with a disclosed embodiment of the invention. The display is similar to the display but is now arranged by users children . In this display users appear at the main nodes. User groups of which each user is a member are displayed at the subnodes. Thus in the user Administrator is displayed at the top of the list. All the groups of which the user is a member are displayed below his name for example a user Administrators . The display may be sorted using button . Flags may be set and shown on the display. Such flags may mark a displayed entity as read unread or to indicate a need for follow up reference.

A button invites the user to switch to between a view of arranged according to parents and a view arranged according to children. On this is shown as button labeled Children and on as button labeled Parents .

Permissions may be viewed by displaying a view that is derived from the panes . Reference is now made to which is a screen display of access permissions in accordance with a disclosed embodiment of the invention. In the left pane which shows a list of existing users and groups an existing user creator authority has been selected. The name of the user appears on the right pane as a caption . The access permissions of the user are displayed in right pane . For example the user has read permissions to a directory install and lacks access to common files .

Reference is now made to which is a fragmentary hierarchical representation of directory permissions in the file system in accordance with a disclosed embodiment of the invention in which two trees descend from respective root directories which may be located on different volumes of a file server or on different file servers. is helpful in understanding the principles of the invention that are described below. Access to the root directories is limited to user groups G1 G2 respectively. For example the user groups G1 could be a highly privileged group of IT personnel. For example the user group G2 might be composed of high level corporate officers.

In the second level of the hierarchies directories inherit the permissions of their respective parents. Thus just as in case of the root directories only user groups G1 G2 can respectively access the directories .

For purposes of the following discussion the root directories are termed distinctive . The directories are termed nondistinctive . A nondistinctive directory inherits all its permissions from a parent. A distinctive directory does not inherit all its permissions from a parent. As will be seen from the discussion below the fact that the nondistinctive directories have identical permission profiles as their parents can be exploited in a database to limit storage requirements and to greatly reduce query latency. In practice most directories in an organizational file system are nondistinctive.

Continuing down the hierarchy on the left side of on the third level directory can be accessed by user groups G1 and G2. The directory inherits some but not all of its permissions from its parents. Therefore the directory is a distinctive directory. Directory inheriting all its permissions from its parent i.e. directory can be accessed by user groups G1 and G2. Directory is therefore nondistinctive. Directory can be accessed by user groups G1 G2 and G3. Since directory has permissions in addition to those of its parent directory directory is distinctive. It will be noted that in the hierarchy the distinctive directories generally have permissions in addition to those of their parents. Except in the case of protected directories which are described below permissions are not deleted from child directories only fully inherited and added.

In the hierarchy at the right side of directory inherits its permissions from its parent directory and is nondistinctive. It will also be seen from inspection of that directory ultimately inherits its permissions from root directory . Root directory is the closest distinctive directory to directory .

Directory is a child of directory . It can be accessed by user group G3. However directory cannot be accessed by user group G2. Directory has not inherited its permissions from its parent a point which is emphasized by a broken line above directory . Rather the permissions of directory have been expressly set. Directory is a protected directory. For purposes of inheritance of permissions by its descendants directory functions similarly to a root directory in a file system. No recourse to the parents of directory is required or permitted when evaluating the permissions of the descendants of directory . Rather the descendants of directory ultimately inherit their permissions from directory and not from any ancestor of directory . Directory is also a distinctive directory as it has not inherited all its permissions from its parent directory . Indeed it has inherited none of them although this is not necessarily the case. A protected directory may share at least some of the permissions of its parent.

Continuing down the hierarchy on the right directory and directory are accessible by user group G3. These directories are nondistinctive as explained above.

Queries regarding access permissions are facilitated by a largely precomputed and compact arranged database. This 1 accommodates the needed data in a practical storage device and 2 assure retrieval of desired information within a feasible time frame. Reference is now made to which is a block diagram illustrating a system of tables that store such data. The results of executing a query using the tables in is seen in which is further described below. A record layout is presented for each of the tables. The tables shown are maintained for each of file server of interest throughout the enterprise and may be physically consolidated on a single server for convenience of access.

A table holds information pertaining to all storage directories on a particular server. In general directories are arranged in a tree hierarchy having any number of levels. Entries in the table are collected form any number of storage devices on different types of computer systems and typically remote from one another. One entry exists for each directory that is being monitored. A field DirID holds a unique identifier for a directory. This identifier is not necessarily the directory s display name. A field accessPath holds the directory s access path. A field isDistinctive indicates whether the directory is a distinctive directory. A field isProtected indicates whether the directory is a protected directory. A field closestDistinctiveParentDirID contains an indication of the closest distinctive parent directory in the hierarchy. In the cases of root and distinctive directories the fields are identical.

Table stores records of actual permissions on the file system. One entry in table exists for each non inherited permission which may be represented by a tuple Dir Gp . For example the directory can be accessed by two user groups G1 G2. The table relating to directory would have one entry corresponding to the non inherited permission to access the group G2. The directory a nondistinctive directory is not represented in the table although it would have an entry in the table . The root directory would have one entry corresponding to the non inherited permission to access the group G1. As nondistinctive directories that are found on the table are omitted from the table the table is generally much smaller than the table . Obtaining permissions of the directory can be obtained by accessing its entries in the table to obtain non inherited permissions identifying all its distinctive ancestral directories and concatenating their respective non inherited permissions to obtain a full set of permissions. This process is explained below in further detail.

As noted above the system is capable of presenting and even suggesting changes in directory permissions and user group memberships. A parallel system of precomputed tables incorporating such proposals is maintained. The structures of tables are identical to tables respectively except that proposed changes are represented instead of the actual state of the file system. Queries dealing with proposed changes are executed with reference to the parallel system of tables e.g. table and results would be displayed in the right pane . Results of the same query executed using table would be displayed in the left pane . In the case of versions dealing with proposals user group references in the table are to proposed user group configurations as explained below.

A pre computed table holds derived relationships among the directories in the table The term derived relationships refers to relationships only among distinctive directories in a hierarchy of storage elements. The table is a key factor in accelerating the performance of queries. Each entry contains information for a distinctive directory and pointers to all distinctive ancestral directories. Nondistinctive directories are omitted from the table .

Each entry includes a field DirID which corresponds to an instance of field in table and functions as a pointer or index into table . A field parentDirIDList is a list of identifiers of all distinctive ancestral directories of the directory identified in field . Traversal of the list enables each distinctive ancestral directory to be accessed in the other tables in .

Often a directory has inherited some of its permissions from its parent and additionally has some additional non inherited permissions that are lacking in the parent. The difference between the directory s permissions and the parent s permissions are sometimes referred to herein as a delta . Only the delta that is the non inherited permissions need be stored in the table . The full scope of the permissions of the exemplary directory can be obtained by retrieving the delta from the table and combining the delta with the permissions of the table s ancestors. This process may be recursive and is accomplished as follows 

Queries regarding nondistinctive directories can be executed by first identifying the closest distinctive ancestral directory. The permissions of the two are identical.

Reference is now made to which is a block diagram illustrating aspects of user group composition in accordance with a disclosed embodiment of the invention. In order to visualize the permissions of an exemplary user U1 with respect to directories in the file system it is often necessary to determine the user groups to which the user U1 belongs. Referring to diagram in the upper part of a hierarchical relationship of user groups G1 G2 G3 is shown in which the user U1 has membership in user group G3. However the user group G3 is itself a member of user group G2 which in turn is a member of user group G1. These relationships known as direct memberships are stored as raw data in a table available in advance of any query whose execution would reference the table. Table is updated as the enterprise group structure changes. In some embodiments a process such as a daemon monitors changes in group membership and composition.

It is possible that the membership of user U1 in user group G3 is restricted to user group G3. That is user U1 may not be a member of user groups G1 G2. However user U1 may enjoy the access rights accorded to user group G1 by virtue of user group G3 s membership in user group G1 or G2. This information is prerecorded in table a table of derived group relationships.

In the example of table holds derived relationships relevant to the user groups G1 G2 G3. For example entry indicates that user group G2 is a member of user group G1. In entry the status of user group G3 as a member of user group G2 is shown. Entry shows a derived relationship in which the user group G3 has access privileges ultimately derived from the access privileges of user group G1. As will be apparent from the description below entry is a key factor in accelerating execution of queries regarding the privileges of the user U1 as the recursion needed to describe privileges of the user group G3 that derive from its remote ancestral user group G1 has already been performed and need not be repeated when servicing queries. The entries occupy relatively little storage space.

The system maintains tables which are parallel versions of the tables in which proposed group organization and memberships are recorded. Queries dealing with such proposals are serviced by reference to the tables instead of the tables .

A query commonly executed by the management application is a request to determine whether a user U can access a directory D. Referring again to in which privileges of sets of users with respect to sets of directories are presented in an integrated view the integrated view is developed by iterating the queries over the sets. In each iteration the strategy is to determine whether there is an intersection of the union of the set of user groups in which the user U has direct or indirect membership with the set of user groups entitled to access directory D. The latter is calculated by determining the union of the sets of access rights of all distinctive directories relating to the directory D as described above with reference to . If such an intersection exists the integrated view of would code the directory D as accessible to the user U. It will be recalled that this query can be presented for both existing permissions and recommended permissions. A direct comparison can be made on the integrated view of permitting the consequences of implementing such recommendations to be immediately visualized.

Reference is now made to which is a flow chart of a method of determining whether a user can access a directory in a file system in accordance with a disclosed embodiment of the invention.

At initial step a user U and a directory D are designated. In the following description all the user groups from which the user U derives access rights are scanned recognizing from the previous description that user groups may be members of other user groups. The recursive operations required have previously been performed and recorded in the form of tables that can be quickly referenced.

At step the user U is first located in a table of group memberships e.g. table and additional details are subsequently obtained from a lookup of table entries describing derived group relationships e.g. table . If the user U belongs to more than one user group there are multiple entries in the table of group memberships. The current entry in this table includes a user group identification field identifying a current user group.

At step a table of derived group relationships e.g. table is consulted. The tables of derived group relationships and group memberships are related by user group identification fields. The entry thus found in the table of derived group relationships includes the current user group and all encapsulating ancestral user groups of which the current user group is directly or indirectly a member. One of these ancestors or the current user group itself is selected.

Next at step the user group selected in step is added to a set of user groups in which the user U participates either directly or by virtue of membership in an ancestral group. This set is referred to as a user oriented set of user groups.

Control now proceeds to decision step where it is determined if there are more ancestral user group relationships recorded in the current entry of the table of derived group relationships. If the determination at decision step is affirmative then control returns to step .

If the determination at decision step is negative then control proceeds to decision step where it is determined if more user groups entries for the user U remain to be evaluated in the table of group memberships. If the determination at decision step is affirmative then control returns to step .

If the determination at decision step is negative then a comprehensive set of group memberships has been developed for the user U. Control proceeds to decision step which is described below.

The following sequence at the right of describes accumulation of user groups entitled to access the directory D. As shown in it may be performed concurrently with steps . As in the case of the user U relationships of the directory D and its antecedents have been precomputed. In step an all directories table is consulted e.g. table is consulted and an entry for the directory D identified.

Next at step the closest distinctive ancestor of the directory D is identified referred to herein as directory E and its entry referenced in the all directories table. In the exemplary table this is done by reference to field . If the directory D is itself a distinctive directory the fields will be identical and no further table lookup is required as directory D and directory E are identical.

An entry for the directory E in a table of derived directory relationships e.g. Table is referenced at step . This entry is keyed to the directory identifier for the directory E in the current entry of the all directories table. In the example of field and field both identify the directory E.

The entry in the table of derived directory relationships for the directory E includes a list of distinctive ancestral directories of the directory E field . At step a distinctive directory identifier is selected from the list. It should be noted that the directory E itself being distinctive is also a candidate for selection in step .

Next at step a table of permissions is consulted e.g. Table . The tables of permissions derived directory relationships are related by directory identification fields field and a current identifiers in the list of field . The entry in the table of permissions has a field containing an identifier of a user group field that is entitled to access the currently selected distinctive directory.

Next at step the user group identified in step is added to a set of user groups entitled to access the directory D. This set is termed a directory oriented set of user groups.

In the current embodiment each entry in the table of permissions is a tuple of a distinctive directory identifier and a user group identifier. Thus multiple entries may exist in the table for a distinctive directory. It is often desirable at this point to memorize the range of permissions of the current user group that was identified in step . This information may be stored in a mask e.g. field . A logical OR operation can be performed using this mask and with a data developed from other iterations of step . The maximal access rights to the directory E are thus recorded.

Control now proceeds to decision step where it is determined if there are more entries for the current distinctive directory selected in step in the table of directory permissions. If the determination at decision step is affirmative then control returns to step .

If the determination at decision step is negative then control proceeds to decision step where it is determined if more entries in the list of distinctive ancestral directories in the current entry in the table of derived directory relationships remain to be processed.

If the determination at decision step is negative then a comprehensive set of user groups entitled to access the directory D has been established. It will again be recalled that access rights to the nondistinctive instances of the directory D are inherited from the directory E.

Control now proceeds to decision step where a determination is made whether the set of user groups entitled to access the directory D has an intersection with the set of user groups of which user U has rights.

If the determination at decision step is affirmative then control proceeds to final step . The user U is reported as having access permission for the directory D. The particular access rights and the identity of at least one of the user groups enabling user U s access to directory D are optionally reported based on information recorded in step . Appropriate graphical indications and explanations are provided when there is a difference between existing and proposed access permissions. For example deletion of access rights user U to directory D may be proposed. An explanation is provided for the lack of access permissions of U to D. Typical explanations may be e.g. removal of U for a user group or deletion from an entire user group.

If the determination at decision step is affirmative then control proceeds to final step . The user U is reported as not having access to the directory D.

In practice query 1 is accomplished using only a few lookups. Searching large access control lists file allocation tables is unnecessary as the relationships among the user groups and distinctive directories have been prepared in advance. While the process steps shown in have been presented in a particular linear order for clarity in practice they may be implemented as concurrent processes or threads. Furthermore the performance of decision step need not await full traversal of the group table entry nor the list of parent directory identifiers but can be performed whenever a user group is added to the set of user groups of the user U or the directory D. If an intersection is found the process can terminate immediately. Referring again to by performing the query a first time using the tables of existing permissions and group memberships and a second time using the tables of proposed permissions and group memberships. The difference between results of the two queries can be presented side by side on different panes with the differences therebetween graphically indicated e.g. by highlighting to identify members of the intersection.

It will be evident that in a large enterprise the visible displays of and comprise only windows into the directories and users capable of being displayed even when compact presentations such as pruned trees are employed. Thus an operator may visualize a different set of directories or users e.g. by scrolling or using other navigational controls. Indeed the operator may have no need to view details of the entire organizational file system but only fragments of interest. Since the query is executable in near real time it can be iterated and new results displayed whenever the user identifies another window of current interest.

It will be appreciated by persons skilled in the art that the present invention is not limited to what has been particularly shown and described hereinabove. Rather the scope of the present invention includes both combinations and subcombinations of the various features described hereinabove as well as variations and modifications thereof that are not in the prior art which would occur to persons skilled in the art upon reading the foregoing description.

