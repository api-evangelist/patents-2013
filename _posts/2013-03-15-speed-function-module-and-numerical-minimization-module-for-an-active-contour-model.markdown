---

title: Speed function module and numerical minimization module for an active contour model
abstract: A device receives an image for an active contour model, where the active contour model includes a first module and a second module. The device receives an initial contour for the image and the active contour model, and executes a speed function of the first module, based on the image and the initial contour, to generate a speed function result. The device executes a numerical minimization method of the second module, based on the image and the speed function result, to generate a final contour, and provides the image and the final contour for display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09142184&OS=09142184&RS=09142184
owner: The MathWorks, Inc.
number: 09142184
owner_city: Natick
owner_country: US
publication_date: 20130315
---
This application claims priority under 35 U.S.C. 119 based on U.S. Provisional Patent Application No. 61 735 813 filed Dec. 11 2012 the disclosure of which is incorporated by reference herein in its entirety.

The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

An active contour model also called snakes may include a framework for delineating an object outline or contour from an image. The active contour model may be used in a variety of applications such as object tracking shape recognition segmentation edge detection stereo matching etc. The framework may include algorithms to guide fitting the contour to the image. The contour may represent a curve or surface that deforms under the influence of forces in order to fit to the image. For example in two dimensional image segmentation the contour may be a closed curve that is initialized at an arbitrary position on the image. An internal force based on properties of the contour such as curvature and smoothness may act on and guide deformation of the contour. An external force based on properties of the image such as image gradient e.g. edges and region statistics also may act on and guide deformation of the contour.

For image segmentation the active contour model may define the internal and external forces in such a way that the contour deforms and settles on borders of an object s to be segmented in the image. The active contour model may define a problem in terms of an energy functional that associates an energy value with any given state of the contour. The energy functional may be formulated in such a way that a contour state associated with a minimum energy value may yield a final contour that fits the image. Thus the active contour model may include the energy functional portion and an energy minimization or optimization portion that may be computationally solved. The energy minimization portion may include a numerical method used for minimizing the energy functional.

Current techniques for implementing the active contour model may include monolithic computational constructs e.g. functions classes etc. where the energy functional and the energy minimization portions are indistinguishably entangled. For example many active contour models may apply the energy minimization method e.g. evolution equations to the energy functional using a single thread. However not every numerical method can be used to minimize every energy functional which may add complexity to understanding the distinction between the energy functional portion and the energy minimization portion.

The entanglement between the energy functional portion and the energy minimization portion may prevent extensibility and reusability of code associated with the portions. For example assume that a user wants to use a different energy functional but the same numerical minimization method as used in an existing implementation. In such situations there may be no easy way to reuse the code from the existing implementation and the user typically may have to re write the code from scratch.

Systems and or methods described herein may provide an active contour model that includes a speed function module that is separate and distinct from a numerical minimization method module. A speed function may be derived from the energy functional and may define a force that moves a contour. The speed function may include a one to one correspondence with the energy function. Thus the energy functional module may be replaced with a speed function module. The active contour model may enable a user to reuse different speed functions or numerical minimization methods without having to re write code from scratch.

As further shown in the active contour model may include a speed function module and a separate numerical minimization module. The speed function module may include a speed function provided by the user. The speed function may include for example a Chan Vese model a Geodesic model etc. The numerical minimization module may include a numerical minimization method provided by the user. The numerical minimization method may include for example an explicit method an additive operator splitting AOS method a sparse field method a gradient descent method etc. The device may provide the image and the initial contour to the speed function module.

The speed function module may utilize the speed function the image and a current contour location to compute intermediate results such as for example speed or movement values for various portions of the contour. The numerical minimization module may utilize the numerical minimization method and the information generated by the speed function module to move and or deform the contour a little. This process may be repeated. For example the speed function module may again compute the speed values for the image and the updated contour location and may provide this information to the numerical minimization module. The numerical minimization module may move the contour a little bit more. In this way the two modules may iteratively move the contour from the initial contour to an intermediate contour and finally to a final contour.

The intermediate contour may conform more to the outline of the image than the initial contour conforms to the outline of the image. The device may provide the image and the intermediate contour for display to the user. As shown in the final contour may include a contour that conforms to the outline of the image. The device may provide the image and the final contour for display to the user. The final contour may be used in a variety of applications such as image tracking image recognition segmentation edge detection stereo matching etc.

Such an arrangement may enable the user to use different speed functions or numerical minimization methods without having to re write code from scratch. The speed function module and or the numerical minimization module may be extended by the user which may provide flexibility to the user. For example the user may provide a speed function written by the user or another user to the speed function module and may utilize a numerical minimization method provided in the numerical minimization module. Similarly the user may provide a numerical minimization method written by the user or another user to the numerical minimization module and may utilize a speed function provided in the speed function module. This code reusability may be beneficial to the user since the user may not have to waste time re writing code.

The terms code and program code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code that may require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

User interfaces as described herein may include graphical user interfaces GUIs and or non graphical user interfaces such as text based interfaces. The user interfaces may provide information to users via customized interfaces e.g. proprietary interfaces and or other types of interfaces e.g. browser based interfaces etc. . The user interfaces may receive user inputs via one or more input devices may be user configurable e.g. a user may change the sizes of the user interfaces information displayed in the user interfaces color schemes used by the user interfaces positions of text images icons windows etc. in the user interfaces etc. and or may not be user configurable. Information associated with the user interfaces may be selected and or manipulated by a user of a technical computing environment TCE e.g. via a touch screen display a mouse a keyboard a keypad voice commands etc. .

Client device may include one or more computation devices such as for example a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation devices. In some implementations client device may include a TCE described below.

Server device may include one or more server devices or other types of computation and communication devices. Server device may include a device that is capable of communicating with client device e.g. via network . In some implementations server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. In some implementations server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN or a cellular network an intranet the Internet or a combination of networks.

As indicated above TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In some implementations TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In some implementations TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . In some implementations TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhapsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in some implementations environment may include fewer components different components differently arranged components or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in some implementations device may include fewer components different components differently arranged components or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more tasks described as being performed by one or more other components of device .

As shown in process may include providing for display a representation of a first module of an active contour model that defines an interface for speed functions block . For example client device TCE may provide for display a representation of a speed function module of an active contour model. In some implementations the representation of the speed function module may include a mechanism e.g. an icon a block a link etc. that may be selected by the user. When the mechanism is selected client device TCE may provide an interface that enables the user to provide settings for the speed function module. In some implementations the settings for the speed function module may include the identification of a speed function. The speed function may be selected from a list of available speed functions may be uploaded by the user to the speed function module may be suggested by client device TCE etc. The suggested speed functions may be based on a number of times the user has previously utilized the suggested speed functions. For example a particular speed function may be suggested since the user previously utilized the particular speed function the most number of times.

In some implementations client device TCE may not provide a representation of the speed function module and may receive the settings for the speed function module via other means. For example client device TCE may provide one or more command prompts that request the settings for the speed function module. The user may provide the settings for the speed function module via the one or more command prompts.

As further shown in process may include receiving a speed function via the first module of the active contour model block . For example client device TCE may receive a speed function via the displayed representation of the speed function module. In some implementations the speed function may include for example a Chan Vese model a Geodesic model etc. In some implementations the active contour model may include a generic evolution equation expressed as 

Client device TCE may store the speed function e.g. in main memory and or may provide the received speed function in the speed function module so that the speed function module encapsulates computational elements of the speed function. In some implementations the speed function module may include a software object e.g. an ActiveContourSpeed class . The ActiveContourSpeed class may be an abstract base class that defines an interface for speed functions. The ActiveContourSpeed class may include various settings associated with the speed function such as for example an initial speed setting e.g. initializeSpeed a calculate speed setting e.g. calculateSpeed an update speed setting e.g. updateSpeed etc.

The ActiveContourSpeed class may be extended to implement other speed functions through an inheritance relationship. For example the ActiveContourSpeed class may be extended to implement a Chan Vese speed function via a software object e.g. an ActiveContourSpeedChanVese class an edge based speed function via a software object an ActiveContourSpeedEdgeBased class and or a speed function defined by a user. The ActiveContourSpeedChanVese class may include the settings associated with the ActiveContourSpeed class as well as a lambda setting an inner contour mean setting an inner contour area setting an outer contour mean setting an outer contour area setting etc. The ActiveContourSpeedEdgeBased class may include the settings associated with the ActiveContourSpeed class as well as a lambda setting an image gradient setting etc.

In some implementations the speed function module may include one or more functions e.g. rather than software objects that define an interface for speed functions. The interface may be used to receive a speed function for the speed function module to execute.

As further shown in process may include providing for display a representation of a second module of an active contour model that defines an interface for numerical minimization methods block . For example client device TCE may provide for display a representation of a numerical minimization module of the active contour model. In some implementations the representation of the numerical minimization module may include a mechanism e.g. an icon a block a link etc. that may be selected by the user. When the mechanism is selected client device TCE may provide an interface that enables the user to provide settings for the numerical minimization module. In some implementations the settings for the numerical minimization module may include identification of a numerical minimization method. The numerical minimization method may be selected from a list of available numerical minimization methods may be uploaded by the user to the numerical minimization module may be suggested by client device TCE etc. The suggested numerical minimization methods may be based on a number of times the user has previously utilized the suggested numerical minimization methods. For example the a particular numerical minimization method may be suggested since the user previously utilized the particular numerical minimization method the most number of times.

In some implementations client device TCE may not provide a representation of the numerical minimization module and may receive the settings for the numerical minimization module via other means. For example client device TCE may provide one or more command prompts that request the settings for the numerical minimization module. The user may provide the settings for the numerical minimization module via the one or more command prompts.

Returning to process may include receiving a numerical minimization method via the second module of the active contour model block . For example client device TCE may receive a numerical minimization method via the displayed representation of the numerical minimization module. In some implementations the numerical minimization method may include for example an explicit method an AOS method a sparse field method a gradient descent method etc.

Client device TCE may store the numerical minimization method e.g. in main memory and or may provide the numerical minimization method in the numerical minimization module. In some implementations the numerical minimization module may encapsulate computational elements for energy minimization and contour evolution and thus may aggregate the ActiveContourSpeed class. In these implementations since the numerical minimization module aggregates the ActiveContourSpeed class e.g. the speed function module the numerical minimization module may include all of the elements of the active contour model. In some implementations the numerical minimization module may not aggregate the ActiveContourSpeed class and the active contour model may include a third module that aggregates the speed function module and the numerical minimization module.

In some implementations the numerical minimization module may include a software object e.g. an ActiveContourEvolver class . The ActiveContourEvolver class may be an abstract base class that defines an interface for numerical minimization methods. The ActiveContourEvolver class may include various settings associated with the numerical minimization method such as for example a numeric dimensions setting e.g. NumDimensions a contour speed setting e.g. ContourSpeed an image setting e.g. Image a contour state setting e.g. ContourState a move contour setting e.g. moveActiveContour a plot setting e.g. plot etc.

The ActiveContourEvolver class may be extended to implement other numerical minimization methods through an inheritance relationship. For example the ActiveContourEvolver class may be extended to implement a numerical minimization method defined by a user. In some implementations the numerical minimization module may include one or more functions e.g. rather than software objects that define an interface for numerical minimization methods. The interface may be used to receive a numerical minimization method for the numerical minimization module to execute.

As further shown in process may include providing a representation of the active contour model with the speed function and the numerical minimization method for display block . For example client device TCE may provide a representation of the active contour model for display to the user. In some implementations the representation of the active contour model may include the representation of the speed function module and the representation of numerical minimization module. In some implementations the representation of the speed function module may include a representation of the received speed function and the representation of the numerical minimization module may include a representation of the received numerical minimization method.

In some implementations client device TCE may provide information requesting whether the user wants to use the active contour model. If the user wants to use the active contour model the user may provide an input to client device TCE indicating that the user wants to user the active contour model. Client device TCE may receive the input and may begin executing the active contour model. Further details of execution of the active contour model are described below in connection with for example one or more of .

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

In example assume that the user utilizes client device to select representation of the speed function module. When the user selects representation client device TCE may provide a user interface e.g. a window a menu etc. for display to the user as shown in . User interface may enable the user to enter settings for the speed function. For example user interface may display a list of speed functions e.g. a Chan Vese method a geodesic method etc. from which the user may select a speed function for the speed function module.

In some implementations user interface may request that the user upload a speed function for the speed function module. The user may identify a name and a location of the speed function to cause the speed function to be uploaded to the speed function module. In some implementations user interface may provide one or more suggested speed functions e.g. a geodesic model for the speed function module. In any event the user may identify a speed function to be associated with the speed function module. As indicated above the suggested speed functions may be based on a number of times the user has previously utilized the suggested speed functions. For example the geodesic model may be suggested since the user previously utilized the geodesic model the most number of times. In some implementations the suggested speed functions may include a last used speed function speed functions based on user context e.g. what type of image is to be analyzed etc.

If the user does not select representation of the speed function module client device TCE may utilize a last used speed function a most used speed function etc. as a default speed function for the speed function module. In some implementations client device TCE may enable the user to select multiple speed functions for the speed function module and may execute the multiple speed functions in parallel or serially. This may enable the user to compare results of the multiple speed functions and to pick a speed function that provides the best result.

Assume now that the user utilizes client device to select representation of the numerical minimization module. When the user selects representation client device TCE may provide a user interface e.g. a window a menu etc. for display to the user as shown in . User interface may enable the user to enter settings for the numerical minimization method. For example user interface may display a list of numerical minimization methods e.g. an explicit method an AOS method a sparse field method etc. from which the user may select a numerical minimization method for the numerical minimization module.

In some implementations user interface may request that the user upload a numerical minimization method for the numerical minimization module. The user may identify a name and a location of the numerical minimization method to cause the numerical minimization method to be uploaded to the numerical minimization module. In some implementations user interface may provide one or more suggested numerical minimization methods e.g. an AOS model for the numerical minimization module. In any event the user may identify a numerical minimization method to be associated with the numerical minimization module. As indicated above the suggested numerical minimization methods may be based on a number of times the user has previously utilized the suggested numerical minimization methods. For example the AOS model may be suggested since the user previously utilized the AOS model the most number of times. In some implementations the suggested numerical minimization methods may include a last used numerical minimization method numerical minimization methods based on user context e.g. what type of image is to be analyzed etc.

If the user does not select representation of the numerical minimization module client device TCE may utilize a last used numerical minimization method a most used numerical minimization method etc. as a default numerical minimization method for the numerical minimization module. In some implementations client device TCE may enable the user to select multiple numerical minimization methods for the numerical minimization module and may execute the multiple numerical minimization methods in parallel or serially. This may enable the user to compare results of the multiple numerical minimization methods and to pick a numerical minimization method that provides the best result.

Once the user has provided the speed function for the speed function module client device TCE may provide a representation e.g. a block an icon a link etc. of the speed function in representation of the speed function module. Once the user has provided the numerical minimization method for the numerical minimization module client device TCE may provide a representation e.g. a block an icon a link etc. of the numerical minimization method in representation of the numerical minimization module. Client device TCE may provide representation of the speed function and representation of the numerical minimization method for display to the user as shown in .

As further shown in client device TCE may request whether the user wants to use active contour model as indicated by reference number . If the user wants to use active contour model the user may select a mechanism e.g. a Yes button link icon etc. and client device TCE may execute active contour model as described below in connection with . If the user does not want to use active contour model the user may select another mechanism e.g. a No button link icon etc. and client device TCE may store active contour model for later use.

As shown in process may include receiving an image for an active contour model block . For example client device TCE may receive an image to be processed by an active contour model provided by client device TCE . In some implementations client device TCE may receive the image from server device may retrieve the image from memory e.g. main memory may receive the image from a user of client device TCE e.g. via user inputs etc. The image may include a two dimensional image a three dimensional image etc. in a variety of formats such as for example a Joint Photographic Experts Group JPEG format a Tagged Image File Format TIFF etc. In some implementations the image may include a portion e.g. a frame of a video file provided in a variety of formats such as for example an audio video interleave AVI format a QuickTime movie MOV format a moving picture experts group MPEG format a Windows media video WMV format etc.

As further shown in process may include receiving an initial contour for the image and the active contour model block . For example client device TCE may instruct the user to input an initial contour for the image. Based on the instruction the user may provide the initial contour to client device TCE . In some implementations the user may draw the initial contour e.g. with a mouse a keyboard etc. of client device around or adjacent to the image. In some implementations client device TCE may provide a grid with coordinates around the image and the user may provide coordinates for the initial contour. Based on the provided coordinates client device TCE may generate the initial contour around or adjacent to the image.

As further shown in process may include providing the image and the initial contour for display and to a first module of the active contour model block . For example client device TCE may provide the image for display when the image is received by client device TCE . Client device TCE may provide the initial contour for display when the initial contour is received by client device TCE . In some implementations client device TCE may provide the image and the initial contour to a speed function module of the active contour model. The speed function module may receive the image and the initial contour. In some implementations client device TCE may store the image and or the initial contour e.g. in main memory .

Returning to process may include executing a speed function of the first module based on the image and the initial contour to generate a speed function result block . For example the speed function module may include a speed function provided by the user as described above in connection with . The speed function may include for example a Chan Vese model a Geodesic model etc. The speed function module may execute the speed function based on the image and the initial contour to generate a speed function result. For example the speed function module may utilize the speed function the image and a current contour location to compute intermediate results such as for example speed values for various portions of the initial contour.

As further shown in process may include providing the image and the speed function result for display and to a second module of the active contour model block . For example client device TCE may provide the image and the speed function result e.g. an intermediate contour for display when the speed function result is generated by the speed function of the speed function module. In some implementations client device TCE may provide the image and the speed function result to a numerical minimization module of the active contour model. The numerical minimization module may receive the image and the speed function result. In some implementations client device TCE may store the speed function result e.g. in main memory .

Returning to process may include executing a numerical minimization method of the second module based on the image and the speed function result to generate a final contour block . For example the numerical minimization module may include a numerical minimization method provided by the user as described above in connection with . The numerical minimization method may include for example an explicit method an AOS method a sparse field method a gradient descent method etc. The numerical minimization module may utilize the numerical minimization method and the information generated by the speed function module to move and or deform the contour a little. This process may be repeated. For example the speed function module may again compute the speed values for the image and the updated contour location and may provide this information to the numerical minimization module. The numerical minimization module may move the contour a little bit more. In this way the two modules may iteratively move the contour from the initial contour to an intermediate contour and finally to a final contour.

In some implementations if the image includes multiple objects to which the user wanted to apply the active contour model client device TCE may enable the user to provide an initial contour for each object. Client device TCE may also enable the user to specify a speed function and a numerical minimization method for each object of the image so that different speed functions and or numerical minimization methods may be utilized for different objects of the image. Client device TCE may execute the specified speed functions and numerical minimization methods so that a final contour may be generated for and conform to each object of the image.

As further shown in process may include providing the image and the final contour for display block . For example client device TCE may provide the image and the final contour for display to the user. The final contour may be used by the user in a variety of applications such as image tracking image recognition segmentation edge detection stereo matching etc. In some implementations client device TCE may store the final contour e.g. in main memory .

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

Client device TCE may receive the uploaded image and may display the uploaded image as indicated by reference number in . As shown in image may include a two dimensional image of a seven point star. Execution of the active contour model may cause client device TCE to request that the user provide an initial contour for image as indicated by reference number in . Based on the request assume that the user utilizes client device to provide an initial contour for image . For example the user may utilize a mouse or other pointer device of client device to trace the initial contour for image .

Client device TCE may display image with an initial contour provided by the user as shown in . As shown initial contour may be provided around or adjacent to image . In some implementations initial contour may not be provided around image but may be provided adjacent to e.g. within a particular distance from image . In some implementations initial contour may include a closed shape e.g. a square a rectangle a circle an oval a polygon etc. or a non closed shape e.g. a line two connected lines etc. . As further shown in execution of the active contour model may cause client device TCE to request whether or not the user wants to execute a speed function of the active contour model as indicated by reference number . Based on the request assume that the user selects a mechanism e.g. a Yes button icon link etc. that instructs client device TCE to execute the speed function.

Client device TCE may execute the speed function based on image and initial contour to generate a speed function result as shown in . For example initial contour may deform and converge toward an outline of image . Client device TCE may provide speed function result for display with image as shown in . In some implementations speed function result may include an intermediate contour that conforms more to the outline of image than initial contour conforms to the outline of image . As further shown in execution of the active contour model may cause client device TCE to request whether or not the user wants to execute a numerical minimization method of the active contour model as indicated by reference number . Based on the request assume that the user selects a mechanism e.g. a Yes button icon link etc. that instructs client device TCE to execute the numerical minimization method. In some implementations the user may select another mechanism e.g. a No button icon link etc. if the user does not wish to execute the numerical minimization method e.g. if speed function result provides a satisfactory result for the user .

Client device TCE may execute the numerical minimization method based on image and speed function result to generate a final contour as shown in . For example client device TCE may apply the numerical minimization method to speed function result so that speed function result deforms and converges toward the outline of image . Client device TCE may provide final contour for display with image . In some implementations final contour may include a contour that conforms to the outline of image . As further shown in execution of the active contour model may cause client device TCE to request whether or not the user wants to try a different speed function or a different numerical minimization method as indicated by reference number . If the user selects a mechanism e.g. a Yes button icon link etc. client device TCE may enable the user to provide a different speed function or a different numerical minimization method as described above in connection with .

Systems and or methods described herein may provide an active contour model that includes a speed function module that is separate and distinct from a numerical minimization method module. A speed function may be derived from the energy functional and may define a force that moves a contour. The speed function may include a one to one correspondence with the energy function. Thus the energy functional module may be replaced with a speed function module. The active contour model may enable a user to use different speed functions or numerical minimization methods without having to re write code from scratch.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an ASIC or a FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used herein should be construed as critical or essential unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

