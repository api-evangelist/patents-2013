---

title: Data transmission to an untrusted entity
abstract: Techniques for transmitting data to an entity may be provided. In particular, a location of a data file (e.g., image, text, multimedia file, document, blog entry, identifying user information) can be provided to a location of a transitive file storage device for the entity to retrieve, instead of providing the data file directly to the entity. The entity can then provide the data file to users (e.g., via a hosted network page) and/or provide the data file to a service provider along with code to enable the service provider to provide the data file to users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251361&OS=09251361&RS=09251361
owner: Amazon Technologies, Inc.
number: 09251361
owner_city: Reno
owner_country: US
publication_date: 20131213
---
Providers of network pages frequently have their network pages provided in a networked environment by network page hosts that offer web hosting services. In some instances the providers may generate network page instructions for implementing the network pages they provide. The providers may send the network page instructions to the host so that the host can display the network page appropriately without generating their own network page instructions for the provider. However the host may not know whether the instructions are malicious creating potential vulnerability for the host.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Embodiments of the present disclosure are directed to among other things a system for providing data transmissions to an untrusted entity. In particular a location of a data file e.g. an image text a multimedia file a document a blog entry user information etc. can be provided to a transitive file location for the untrusted entity to retrieve instead of providing the data file directly to the untrusted entity. The untrusted entity can then provide the data file to users e.g. via a hosted network page .

In a non limiting example an item provider may start with a network page that they would like an entity to host e.g. on the Internet . The item provider may provide instructions e.g. HTML instructions server side scripting instructions etc. to an untrusted server so that the untrusted server may be able to know what the item provider would like the page to look like. The item provider may also provide a manifest file of instructions to a trusted server so that the trusted server can determine where to obtain the data for their network page e.g. images blog entries text etc. . The trusted server can gather the data from the data providers and provide the data to a transitive file server. The untrusted entity may receive a notification of the location s of the data and retrieve the data from the transitive file server. The untrusted server can then host the item provider s network page using the instructions and received data.

A trusted entity e.g. a trusted server a trusted computer etc. may be a computer that provides data for one or more entities. The original locations of the data can be identified in a manifest file provided to the trusted server from locations that provide non executable data to the trusted server e.g. free from malicious and or fraudulent executable instructions . In some examples the trusted server may be a providing entity of the data or interact with data providers that can provide the data for the trusted server.

An untrusted entity e.g. untrusted server untrusted computer may be a computer that accesses the data to provide the data as part of a hosted network page. The untrusted entity server may interact with a user to provide an item provider s hosted network page to the user. The untrusted entity may receive a key e.g. symmetric key to provide appropriate authentication credentials before the untrusted entity is permitted to access the data as part of a hosted network page. In some examples the untrusted entity may be untrusted because the trusted entity or a service provider has not verified code associated with the untrusted entity has a low level of trust associated with the untrusted entity and or is unaware of a level of trust associated or that should be associated with the untrusted entity. Additionally in some examples the code e.g. computer executable code to be hosted or otherwise executed by the trusted entity or a service provider may be untrusted in that it was sourced created or otherwise provided by an untrusted entity or an entity with little or no level of trust associated therewith.

A transitive file location e.g. transitive file server transitive file computer may be a location that provides data for a transitory amount of time. For example the transitive file server may receive a data file from a trusted server provide the data file to an untrusted server and discontinue providing storage for the data file after the data file has been accessed by the untrusted server e.g. clearing the data from and or dereferencing the data of the transitory file location . In some examples the transitive file server is configured to provide data independent of identifying the providing entity or configured to refrain from providing the origin of the data file to a requester.

A hash function may map data from one state to a different state e.g. locations data stores results of a hash function . For example the hash function can receive an identification of a data file e.g. file name a PIN location portion and a key from an untrusted server. The hash function can calculate results from the hash function to generate a location e.g. address in a data store. The process may be automatic. In some embodiments an API server and or API module implemented at a trusted server or separate from a trusted server can access the data stored at the location e.g. at a persistent data store and provide the data to a transitive file server and or hash table accessible by the transitive file server. In some embodiments the hash function can help ensure that data is accessible by entities that can provide a correct key e.g. symmetric key for authentication or other input for a hash function to generate a location for data.

A manifest file can identify one or more locations of data e.g. original location originating data provider . For example an item provider may provide the manifest file to the trusted server so that the trusted server can receive the data that the item provider would like to incorporate with their hosted network page. The trusted server may access the locations listed in the manifest file to the receive data. In some examples the manifest file identifies originating locations of data files so that the trusted server can access the data files and place the data in a persistent data store that is accessible at a later time e.g. when the data is requested by an untrusted server .

The method may receive the data . For example the trusted server may identify a first data location e.g. at data provider A from the manifest file communicate with the location and receive the data. The trusted server may interact with more than one location including a second data location e.g. data provider B identified by the manifest file to receive additional data from more than one location. The data may include images text multimedia data blog entries user information item information or other data associated with an item provider.

In some examples the trusted server may communicate with the data providers by transmitting one or more requests to the data providers for the data. The request may ask for a particular data file that contains the data streaming data data located at a distributed data store and or other methods of receiving data.

The method may provide data to a transitive file location . In some examples the trusted server may store the data received from the data providers with the transitive file server . The transitive file server may store the data received from the trusted server in a data store and or hash table.

In some examples the trusted server may store a copy of the data received from the data providers with a persistent data store not shown . The trusted server e.g. via an API module and or an API server may provide a copy of the data to the transitive file server in response to a request. Details and features associated with this example are provided in relation to .

In some examples a trusted server may provide a location and or a key to the untrusted server without waiting for the untrusted server to request the location and or key. For example the trusted server can calculate a key e.g. symmetric key authentication key and provide the key to the untrusted server . The trusted server can also store data with the transitive file server . The location can be associated with a hash function so that the results of the hash function may identify the location of the data stored with the transitive file server . When the data is be stored with the transitive file server the untrusted server can be notified of the location of the data with the transitive file server . In some examples the trusted server can transmit a notification to the untrusted server that includes both the key and the location of the data.

In some examples an untrusted server may request the data from the transitive file server e.g. transitive file location . In some examples the untrusted server may provide a location and or a key to the transitive file server . The location can be associated with a hash function so that the results of the hash function may identify the location of the data stored with the transitive file server . The transitive file server can access the data and provide the data to the untrusted server. In some examples a notification can be transmitted to the untrusted server that includes an identification of the location of the data in the transitive file server .

The untrusted server may be configured to retrieve the data from the location. In some examples the untrusted server can retrieve the data file from the transitive file server independent of identification of a providing entity. For example the data provided to the transitive file server may be submitted via a user datagram protocol UDP . In some examples the untrusted server can retrieve the data file from the transitive file server by submitting the key and or location of the data and retrieving the data stored in the particular location.

The data may be removed from the transitive file server . For example the data may have been provided to a transitive file location that customarily removes data once the data is accessed and or received by a third party so that when the untrusted server accesses or retrieves the data from the transitive file server the data can be removed from that location.

The method may include providing the data to users . For example the untrusted server and or trusted server may provide information to a network page accessible by a user including data retrieved from the transitive file server e.g. from the untrusted server text or other non executable data e.g. from the trusted server or other information provided by a host of web hosting services e.g. untrusted server and or trusted server .

In some examples the networks may include any one or a combination of many different types of networks such as cable networks the Internet wireless networks cellular networks and other private and or public networks. While the illustrated example represents the users accessing the application over the networks the described techniques may equally apply in instances where the users interact with the one or more trusted computers one or more untrusted computers and or one or more transitive file computers via the one or more user devices over a landline phone via a kiosk or in any other manner. It is also noted that the described techniques may apply in other client server arrangements e.g. set top boxes etc. as well as in non client server arrangements e.g. locally stored applications etc. .

As described briefly above the application may allow the users to interact with a service provider computer such as to access web content e.g. web pages music video etc. . The one or more trusted computers one or more untrusted computers and or one or more transitive file computers perhaps arranged in a cluster of servers or as a server farm may host the application and or cloud based software services. Other server architectures may also be used to host the application . The application may be capable of handling requests from many users and serving in response various item web pages. The application can provide any type of website that supports user interaction including social networking sites online retailers informational sites blog sites search engine sites news and entertainment sites and so forth. As discussed above the described techniques can similarly be implemented outside of the application such as with other applications running on the user devices .

The user devices may be any type of computing device such as but not limited to a mobile phone a smart phone a personal digital assistant PDA a laptop computer a desktop computer a thin client device a tablet PC an electronic book e book reader etc. In some examples the user devices may be in communication with the one or more trusted computers one or more untrusted computers and or one or more transitive file computers via the networks or via other network connections. Additionally the user devices may be part of the distributed system managed by controlled by or otherwise part of the one or more trusted computers one or more untrusted computers and or one or more transitive file computers e.g. a console device integrated with the trusted computers .

In one illustrative configuration the user devices may include at least one memory and one or more processing units or processor s . The processor s may be implemented as appropriate in hardware computer executable instructions firmware or combinations thereof. Computer executable instruction or firmware implementations of the processor s may include computer executable or machine executable instructions written in any suitable programming language to perform the various functions described. The user devices may also include geo location devices e.g. a global positioning system GPS device or the like for providing and or recording geographic location information associated with the user devices .

The memory may store program instructions that are loadable and executable on the processor s as well as data generated during the execution of these programs. Depending on the configuration and type of user device the memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. . The user device may also include additional removable storage and or non removable storage including but not limited to magnetic storage optical disks and or tape storage. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for the computing devices. In some implementations the memory may include multiple different types of memory such as static random access memory SRAM dynamic random access memory DRAM or ROM.

Turning to the contents of the memory in more detail the memory may include an operating system and one or more application programs or services for implementing the features disclosed herein such as via the browser application or dedicated applications e.g. smart phone applications tablet applications etc. . The browser application may be configured to receive store and or display a website or other interface for interacting with the one or more trusted computers one or more untrusted computers and or one or more transitive file computers . Additionally the memory may store access credentials and or other user information such as but not limited to user IDs passwords and or other user information. In some examples the user information may include information for authenticating an account access request such as but not limited to a device ID a cookie an IP address a location or the like. In addition the user information may include a user provided response to a security question or a geographic location obtained by the user device .

In some aspects the one or more trusted computers one or more untrusted computers and or one or more transitive file computers may also be any type of computing devices such as but not limited to a mobile phone a smart phone a personal digital assistant PDA a laptop computer a desktop computer a server computer a thin client device a tablet PC etc. Additionally it should be noted that in some embodiments the one or more trusted computers one or more untrusted computers and or one or more transitive file computers are executed by one more virtual machines implemented in a hosted computing environment. The hosted computing environment may include one or more rapidly provisioned and released computing resources which computing resources may include computing networking and or storage devices. A hosted computing environment may also be referred to as a cloud computing environment. In some examples the one or more trusted computers one or more untrusted computers and or one or more transitive file computers may be in communication with the user devices and or other service providers via the networks or via other network connections. The one or more trusted computers one or more untrusted computers and or one or more transitive file computers may include one or more servers perhaps arranged in a cluster as a server farm or as individual servers not associated with one another. These servers may be configured to implement the data transmission to an untrusted entity described herein as part of an integrated distributed computing environment.

In one illustrative configuration the trusted computers may include at least one memory and one or more processing units or processor s . The processor s may be implemented as appropriate in hardware computer executable instructions firmware or combinations thereof. Computer executable instruction or firmware implementations of the processor s may include computer executable or machine executable instructions written in any suitable programming language to perform the various functions described.

The memory may store program instructions that are loadable and executable on the processor s as well as data generated during the execution of these programs. Depending on the configuration and type of trusted computers the memory may be volatile such as RAM and or non volatile such as ROM flash memory etc. . The trusted computers or servers may also include additional storage which may include removable storage and or non removable storage. The additional storage may include but is not limited to magnetic storage optical disks and or tape storage. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for the computing devices. In some implementations the memory may include multiple different types of memory such as SRAM DRAM or ROM.

The memory the additional storage both removable and non removable are all examples of computer readable storage media. For example computer readable storage media may include volatile or non volatile removable or non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. The memory and the additional storage are all examples of computer storage media. Additional types of computer storage media that may be present in the trusted computers may include but are not limited to PRAM SRAM DRAM RAM ROM EEPROM flash memory or other memory technology CD ROM DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the trusted computers . Combinations of any of the above should also be included within the scope of computer readable media.

Alternatively computer readable communication media may include computer readable instructions program modules or other data transmitted within a data signal such as a carrier wave or other transmission. However as used herein computer readable storage media does not include computer readable communication media.

The trusted computers may also contain communications connection s that allow the trusted computers to communicate with a stored database another computing device or server user terminals and or other devices on the networks . The trusted computers may also include I O device s such as a keyboard a mouse a pen a voice input device a touch input device a display speakers a printer etc.

It should be appreciated that the one or more untrusted computers and or one or more transitive file computers may also include processor s I O device s storage communications connection s operating system data store s application program s services or other aspects not explicitly illustrated in including aspects discussed in relation to a trusted computer .

Turning to the contents of the memory in more detail the memory may include an operating system one or more data stores and or one or more application programs or services for implementing the features disclosed herein including a manifest file analysis module a fetch cache module a protocol module and or a hashing module . In some examples the manifest file analysis module may be configured to receive a location of a data file. The location of the data file can be included in a manifest file received from an item provider. In some examples the location of the data file can be received at the computer system e.g. trusted server .

The manifest file analysis module may also be configured to determine credentials for the trusted server to interact with data provider s . For example the trusted server may submit a user name PIN key or other identifying information to access the data from the data provider s . In some examples credentials may not be required to interact with the data provider s .

The manifest file analysis module may also be configured to identify any data that the untrusted server needs to provide hosting services for the item provider. The manifest file analysis module may be configured to analyze the data requested in the manifest file and determine the data needed by the untrusted computer to host a network page for an item provider. In some examples the item provider can provide information about the network page to the untrusted computer e.g. via the item provider module so that the untrusted computer can host the network page provide hosting services for the item provider or offer other services. Some of the information may be included and or analyzed using the manifest file.

The memory may also include a fetch cache module . The fetch cache module may be configured to provide credentials and or locations to the data provider s . In some examples the location of the data may identify a data provider and the data requested e.g. file name while the data provider locates the data. In some examples the location may be a physical location of the data file e.g. IP address hash table location data store location at a data store managed by a data provider.

The fetch cache module may also be configured to identify one or more data providers. For example some data providers may include network pages an item provider computer a user device social networking providers e.g. Twitter Facebook data stores or other providers of information.

The fetch cache module may also be configured to store or cache data in a data store a distributed server a trusted server an application programming interface API server or at a transitive file server. The data store may be a persistent data store or a transitive data store. For example the data may be stored in a particular location at the data store including a location associated with the results of a hash function determined by the hashing module or the associated with an automatic process for generating the file location.

The fetch cache module may also be configured to provide an application programming interface API to receive data. For example the fetch cache module can provide the API to receive data interact with requests to receive data or place data in a data store after receiving a request for data. The request may be received from an untrusted entity implementing a data module .

The memory may also include a protocol module . The protocol module may be configured to transmit or place data in a location using a particular protocol. For example the protocol module may utilize UDP PCP or TCP to transmit data. In some examples user datagram protocol UDP transmissions can provide data to a server or data store via an internet protocol IP network without prior communications to set up special transmission channels or data paths. The UDP transmission may be connectionless emphasize low overhead operation and provide reduced latency. The UDP transmission may be one type of transmission protocol that transmits data independent of identifying a providing entity. In some examples transmission control protocol TCP transmissions can provide data to a server or data store via an IP network by detecting potential issues with transmitting data and requesting retransmission of lost data or rearranging out of order data. In some examples port control protocol PCP transmissions can help control data forwarding by other servers devices firewalls or other systems computers.

The protocol module may also be configured to provide a data file a copy of a data file or other information to a transitive file location via a user datagram protocol UDP . The transitive file location can be associated with the transitive file computer including a hash table data store or other storage medium.

The memory may also include a hashing module . The hashing module may be configured to identify a location for a data file based in part on a hash function. The hashing module may also be configured to identify results of the hash function. The results of the hash function can help identify a location of a data file in a hash table or data store. In some examples the hashing module may be configured to determine a location based in part on the results of the hash function and a key provided by the requester.

The hashing module may also be configured to provide information for a multifactor authentication process. For example the hashing module can calculate a key personal identification number PIN location or file name key to the untrusted computer . The hashing module may be configured to transmit the key to the untrusted computer . The key may be a symmetric key used in part to identify the untrusted computer as an entity that is allowed to access the data and or data file. The transitive file computer can retrieve the data from a hash table based in part on the multifactor authentication process including identifying a location from the request and accessing the data at the particular location.

In one illustrative configuration the untrusted computers may include at least one memory and one or more processing units or processor s . The processor s may be implemented as appropriate in hardware computer executable instructions firmware or combinations thereof. Computer executable instruction or firmware implementations of the processor s may include computer executable or machine executable instructions written in any suitable programming language to perform the various functions described. The memory may store program instructions that are loadable and executable on the processor s as well as data generated during the execution of these programs. Depending on the configuration and type of untrusted computers the memory may be volatile such as RAM and or non volatile such as ROM flash memory etc. .

Turning to the contents of the memory in more detail the memory may include an operating system one or more data stores and or one or more application programs or services for implementing the features disclosed herein including an item provider module and or a data module . In some examples the item provider module may be configured to communicate with an item provider. The item provider may be an entity that provides a network page e.g. users consumers merchants .

The item provider module may also be configured to host a network page for an item provider. In some examples the item provider can provide information about the network page to the untrusted entity so that the untrusted entity can host the network page provide web hosting services for the item provider or offer other services.

The item provider module may also be configured to generate a manifest file or receive a manifest file from an item provider. In some examples the item provider module at the untrusted computer may communicate with the manifest file analysis module . For example when the item provider module generates the manifest file for the item provider the manifest file can be received by the trusted computer and analyzed by the manifest file analysis module to determine one or more locations of data. In some examples the manifest file can include an originating network location of the data file e.g. a location of the data file before the data file is provided to the file location at the transitive file computer .

The item provider module may also be configured to receive instructions from an item provider so that the untrusted server will know what the item provider would like its page to look like. The instructions can be provided in hypertext markup language HTML extensible markup language XML server side scripting language e.g. JavaScript or other suitable formats. In some examples the untrusted entity e.g. untrusted computer can receive instructions from the item provider and provide web hosting services for the item provider based in part on the instructions. In some examples the instructions enable the untrusted entity to retrieve images text or multimedia data for the item provider.

The memory may also include a data module . The data module may be configured to receive a request for a network page from a user. For example the user can initiate a request by selecting a link with the untrusted computer opening a network page browsing to a particular location on a network page or other actions that may be received at the untrusted server. In some embodiments the activation may occur automatically so that the untrusted computer starts the process without an interaction with a user.

The data module may also be configured to receive a key. The key may be received via a push notification or received without a request from the untrusted computer . In some embodiments the key may be received with the location of the data without first requesting the data. The data module can identify the key and provide the key to the transitive file computer . The transitive file computer can authenticate the untrusted computer and allow the untrusted computer to access the data identified by the location.

The data module may also be configured to receive a location corresponding to the request from a trusted computer or API not shown . The data module can identify the location and request the data from the transitive file computer at a particular location.

The data module may also be configured to generate a request and transmit the request to a trusted server or API not shown . For example the data module can associate the activation with instructions to request data and transmit the request to the trusted server or API.

The data module may also be configured to receive a notification. The notification can include a key and or location of the data. The data module may be configured to analyze the notification e.g. decrypt parse calculate to determine the key and or location identified by the notification. In some embodiments the location may be used to identify a location e.g. transitive file location of data for the untrusted computer to use for hosting services for the item provider.

The data module may also be configured to provide information for a multifactor authentication process. For example the data module can submit a request that includes a personal identification number PIN location file name or a key. The key may be a symmetric key used in part to identify the untrusted computer as an entity that is allowed to access the data and or data file. The transitive file computer can retrieve the data from a hash table based in part on the multifactor authentication process including identifying a location from the request and accessing the data at the particular location.

In one illustrative configuration the transitive file computers may include at least one memory and one or more processing units or processor s . The processor s may be implemented as appropriate in hardware computer executable instructions firmware or combinations thereof. Computer executable instruction or firmware implementations of the processor s may include computer executable or machine executable instructions written in any suitable programming language to perform the various functions described. The memory may store program instructions that are loadable and executable on the processor s as well as data generated during the execution of these programs. Depending on the configuration and type of transitive file computers the memory may be volatile such as RAM and or non volatile such as ROM flash memory etc. .

Turning to the contents of the memory in more detail the memory may include an operating system one or more data stores and or one or more application programs or services for implementing the features disclosed herein including a hashing module and or a data retrieval module . In some examples the hashing module may be configured to identify a location for a data file based in part on a hash function. The hashing module may also be configured to identify results of the hash function. The results of the hash function can help identify a location of a data file in a hash table or data store. In some examples the hashing module may receive a key from an untrusted computer determine the location of the data based in part on the key e.g. using a hash function to decode the key and determine the location a symmetric key an authentication key and locate the data at the location identified by the untrusted computer .

The memory may also include a data retrieval module . The data retrieval module may be configured to access a hash table or data store in response to receiving a key. For example the hashing module may determine a location of the data associated with a key and the data retrieval module may retrieve the data identified at the location. The data retrieval module may also be configured to locate data identified by a calculated key and or location from the trusted computer .

The data retrieval module may also be configured to access a hash table or data store in response to a request. In some examples the data retrieval module may be configured to provide a mailbox e.g. mailbox server . For example the data retrieval module can receive information from a trusted entity place the information in a known location and allow an untrusted entity to access the information at the known location. In some examples the file location is located at a data store associated with the mailbox server.

The data retrieval module may also be configured to clear delete write over or remove data from a data store. For example the data retrieval module can determine that data has been accessed from a particular location and clear the memory space at the hash table. In some examples the data retrieval module can receive a request to clear data from a particular location and clear the memory space at the hash table. In some examples the particular location can be a transitive file location and the data file provided at the file location is removed after the untrusted entity retrieves the data file.

The data retrieval module may also be configured to limit accessibility of a data store. For example the location may be inaccessible by the untrusted server when the data file is provided to or retrieved from the location e.g. atomic . In another example the file location is inaccessible by an untrusted entity when the data file is provided to a file location.

At block the trusted server receives the manifest file from the item provider not shown . The manifest file can include one or more locations that include data files e.g. data providers . In some examples the manifest file may include substantially all data needed by the untrusted server in order to provide hosting services. For example the manifest file can include one or more data locations that identify data proactively for example so that the untrusted server would not need to request the data at a later time.

At block the trusted server receives of the data files from data providers. The data providers can be accessible through one or more network connections. The trusted server can provide the copies of the files to a persistent data store . The persistent data store may be a data store that stores one or more data files from one or more locations for more than a transitory amount of time.

At block the application programming interface API server becomes aware of the data file in the persistent data store and associates results of a hash function e.g. an algorithmic hash to the data file. In some embodiments the results of the hash function may be used as a document identifier or location of the data file.

In some embodiments the functionality of the API server may be located within and or in association with the trusted server . For example the API server may be implemented as a module and or an API provided by the trusted server . In some examples the data may be cached at a distributed server a trusted server an application programming interface API an API server and or a transitive file server or data store associated therewith.

In some embodiments user can initiate an untrusted server request including selecting a link with the untrusted server opening a network page browsing to a particular location on a network page or other actions that may be received at the untrusted server to start a live process. In some embodiments the activation may occur automatically so that the untrusted server starts the process without an interaction with a user.

In some embodiments the untrusted server may not request data e.g. receive a push notification at block . In some embodiments the untrusted server may request the data. For example the untrusted server associates the activation with instructions to request data and transmits the request to the API server . The request can include identifiers timestamps or other information that can identify what data the untrusted server is requesting. In some embodiments the request includes a request for a copy of the data file a second algorithmic hash a key e.g. symmetric key authentication key and or a result of a hash function. In some embodiments the untrusted server transmits the request via transmission control protocol TCP to the API server .

In some examples the API server identifies an appropriate data file to provide to the untrusted server . The identification of the appropriate data file can be based in part on the data provided by the trusted server in response to the data referenced in the manifest file . In some examples identification of the appropriate data file can be based in part on a request from the untrusted server. In some examples the API server translates the algorithmic hash from the untrusted server into results from a hash function and receives the corresponding data file from the persistent data store .

The API server can calculate a key for the untrusted server . The authentication key may help identify the untrusted server to the transitive file server and or provide credentials to authenticate the untrusted server with the transitive file server .

At block the API server provides a copy of the data file to a transitive file server . In some examples the API server provides the data file to the transitive file server based in part on a location associated with the results of the hash function. In some examples the API server provides a copy of the data file to the transitive file server using a transfer protocol that allows the API server and or trusted server to remain anonymous and or provide data independent of identification including via a user datagram protocol UDP .

In some examples the location may be inaccessible the untrusted server when the data file is provided to the location e.g. atomic . This may include restricting access to the transitive file server while the API server is transmitting data to the transitive file server when the transitive file server is reading writing and or communicating with the hash table or when the transitive file server is communicating with another entity e.g. the API server .

In some examples the transitive file server may include a mailbox server. For example the transitive file server can receive information from a trusted entity place the information in a known location and allow an untrusted entity to access the information at the known location.

At block the transitive file server stores writes a copy of the data file to a hash table and storage . The location of the data file may be associated with the results of the hash function. In some embodiments the location of the data file stored in the hash table and storage may be a new location of the data file in comparison to the original locations with the data provider s and or the persistent data store .

At block the API server transmits a notification to the untrusted server by providing the location of the data in the hash table . For example the notification can be in response to the request provided by the untrusted server asking for the data file.

In some examples the API server also provides the key e.g. authentication key symmetric key to the transitive file server . In some embodiments the transitive file server can use the key to confirm the authentication of the data requester e.g. the untrusted server . In some embodiments the transitive file server can use the key to determine a location of the data in the hash table.

At block the untrusted server requests the data from the transitive file server at a particular location. For example the untrusted server may submit a request that includes an HTTP Get instruction to the transitive file server . In some examples the untrusted server can also provide the key e.g. an authentication key asymmetric key a calculated key etc. to the transitive file server . The transitive file server may authenticate the untrusted server as an authorized data requester. In another example the untrusted server can submit a request that includes a multifactor authentication process. The transitive file server can receive the data from the hash table based in part on the location provided by the untrusted server .

At block the location of the data file at the transitive file server may be cleared. For example the API server can submit a request to clear the memory space at the hash table via the transitive file server .

At block the trusted API server may receive a manifest file. For example the manifest file may be provided by an item provider to a trusted API server. The manifest file may contain a location of a data file stored with a data provider.

At block the trusted API server retrieves data from one or more locations. For example the trusted API server may receive the data file from the data provider. The data file location can be based in part on the location listed in the manifest file. The data received from the data provider can be provided via the API trusted transmission via a network or any other communication medium.

At block the trusted API server can associate a hash function with the data. For example the trusted API server can execute a hash function when the trusted API server receives the data. The trusted API server can identify results of the hash function for the data file that identifies a new location of the data file.

In a related process at block an untrusted server can receive a request for data. For example the request for data can be received through an automated process to refresh data at a network page or an activation of a network page by a user. The requested data can include images text blog entries items offered in an electronic marketplace or other data provided by a network page. The request for data may identify the data to display at the network page.

At block the trusted API server finds the data and or the results of the hash function associated with the data. For example the trusted API server can execute a hash function when the trusted API server receives the request for the data. The trusted API server can identify results of the hash function that helps to identify a location of the data file associated with the request. For example the location of the data file may be document identifier that identifies a location in a hash table where the data file is stored. In another example the location of the data file may be a location in a persistent storage. The trusted API server can retrieve the data from the location.

At block the trusted API server writes the data to a transitive file server. For example the transitive file server can be associated with a hash table so that the location of the data file can be associated with the identification of the data file. The identification of the data file may be unique. In some examples the trusted API may execute a hash function and the results of the hash function are used in part to determine the location of the data file in the transitive file server.

In some examples the trusted API server may write the data to the transitive file server so that the transitive file server is unable to identify the trusted API server. For example the transmission may include a UDP transmission so that the trusted API server can send the data to the transitive file server on an internet protocol IP network without prior communications to set up special transmission channels or data paths.

At block the transitive file server stores the data file in a location associated with the results of the hash function. For example the results of the hash function may be X h 100 where X is the transitive file server h is the hash function and 100 is the location where the data is stored. In another example the data file may be stored in location A in a data store.

At block the trusted API server notifies the untrusted server e.g. a push notification . For example the notification can include an identification of the transitive file location e.g. location A . The untrusted server may be configured to receive a copy of the data file from the transitive file location after the untrusted server receives the notification.

In some embodiments the notification can include a key. For example the key may be a symmetric key that authenticates the untrusted server with the trusted API server. The symmetric key may be shared with multiple entities so that when the entity provides the symmetric key to the trusted API server the symmetric key can act as a password personal identification number PIN or shared secret to allow the untrusted entity access to one or more services. The untrusted server may also provide authentication credentials through a multifactor authentication process. In some examples the key may be an asymmetric key or other authentication key used to identify the untrusted server.

In embodiments the untrusted server may request the data e.g. not a push notification from the trusted API server. For example the request may be a request for the data file a copy of the data file a location of the data file a stream of data or other requests. The request can include the symmetric key so that the trusted API server can authenticate the untrusted server.

At block the untrusted server receives the location of the data file. This may include the transitive file location and or the key. At block the untrusted server can retrieve the data at the location. At block the transitive file server provides the data to the untrusted server.

Illustrative methods and systems for providing image analysis management are described above. Some or all of these systems and methods may but need not be implemented at least partially by architectures such as those shown at least in above.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term data store refers to any device or combination of devices capable of storing accessing and or retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device handling a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the Web server in the form of HTML XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the Web server. It should be understood that the Web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein.

The data store can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect. For example the data store illustrated includes mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as for page image information and to access right information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. In one example a user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop or laptop computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP OSI FTP UPnP NFS CIFS and AppleTalk . The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a Web server the Web server can run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C Visual C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as RAM or ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the a system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the disclosure as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the disclosure to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the disclosure as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the disclosure and does not pose a limitation on the scope of the disclosure unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the disclosure.

Disjunctive language such as that included in the phrase at least one of X Y or Z unless specifically stated otherwise is otherwise understood within the context as used in general to present that an item term etc. may be either X Y or Z or any combination thereof e.g. X Y and or Z . Thus such disjunctive language is not generally intended to and should not imply that certain embodiments require at least one of X at least one of Y and or at least one of Z in order for each to be present.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the disclosure. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the disclosure to be practiced otherwise than as specifically described herein. Accordingly this disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

