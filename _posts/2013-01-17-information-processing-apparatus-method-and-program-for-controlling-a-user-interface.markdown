---

title: Information processing apparatus, method, and program for controlling a user interface
abstract: An information processing apparatus which operates an operating system providing a first user interface environment appropriate for a touch panel and a conventional desktop user interface environment automatically executes processing by using information set as a default value, if an operation by a user on a pop-up dialog, which is displayed in the desktop user interface environment and is related to functions including a secure print function provided by a printer driver, is not performed for a predetermined period of time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164714&OS=09164714&RS=09164714
owner: Canon Kabushiki Kaisha
number: 09164714
owner_city: Tokyo
owner_country: JP
publication_date: 20130117
---
The present invention relates to a technique useful for print processing performed by an information processing apparatus.

A printer is controlled by software called a printer driver which normally runs on a client computer. The printer driver has two major functions. One function allows a user to perform a print setting. Generally the function includes a user interface UI . The other function converts a rendering instruction sent from an application into print data in page description language PDL which can be interpreted by the printer and transmits the data to the printer. These functions are realized in cooperation with an operating system OS on the client computer.

Further the printer driver has a function called secure print which is discussed in Japanese Patent Application Laid Open No. 2001 318779. This function allows the user to input a password before printing is performed with the printer. When the user provides a print instruction the printer driver automatically displays a pop up dialog on the screen of the client computer prompting the user to input a password. The secure print is realized by adding the input information to the print data.

When specifications of an OS which generally cooperates with the printer driver are changed the user may find difficulty in using the functions realized by the printer driver or may not be able to use the functions. Examples of the OS specification change include an OS design that employs a new UI optimized for touch panel devices such as a smartphone. When such a new OS is used only a part of the functions which is associated with the UI provided by the printer driver for the previous OS are supported by the new UI. The functions not supported by the UI are for example executed on the new OS on a different screen which is provided for a previous application. However in many exceptional UI functions such as an automatic pop up dialog e.g. the above described secure print usability thereof is not fully considered for the new OS.

As examples of similar exceptional UI functions provided by a printer driver there are dialogs requesting department information for departmental management and designation of a file path for a file storage setting. A similar UI function is used for address designation in a facsimile driver.

The present invention is directed to an information processing apparatus which is capable of appropriately executing a function provided by a printer driver such as a secure print function even if a user does not fully understand a display function for a new OS such as an OS for a touch panel device.

According to an aspect of the present invention an information processing apparatus including a control unit configured to execute an operating system OS providing a first user interface UI environment appropriate for a touch panel and a second UI environment different from the first UI environment and a device driver configured to control an image forming apparatus includes a setting unit configured to set in advance information to be set via a pop up dialog in the second UI environment as a function of the device driver before a request to the image forming apparatus is executed a control unit configured to pop up the dialog in the second UI environment as a function of the device driver according to execution of the request to the image forming apparatus and an execution unit configured to execute processing regarding the request by using the information set by the setting unit if an operation by a user on the dialog in the second UI environment is not performed for a predetermined period of time.

Further features and aspects of the present invention will become apparent from the following detailed description of exemplary embodiments with reference to the attached drawings.

Various exemplary embodiments features and aspects of the invention will be described in detail below with reference to the drawings.

In a CPU executes a program stored in a ROM or a RAM in a main storage unit or stored in an auxiliary storage unit and controls the entire information processing apparatus. The RAM is used as a work area when the CPU performs various types of processing. The auxiliary storage unit stores various programs including an operating system OS and an application .

An input device such as a keyboard and a pointing device represented by a mouse or a touch panel is used by the user to provide various instructions to a client computer via an input I F interface . An output I F is used for outputting data to an external device. For example the output I F outputs data to an output device such as a monitor or a printer . Although the information processing apparatus is directly connected to the printer in the apparatus can be connected to the printer on a network via a communication I F . Further the interfaces and the modules of the information processing apparatus exchange data via a common data system bus .

When the user prints a document the user gives an instruction to the information processing apparatus by using the UI of the application displayed on the monitor with an input device such as the keyboard or the pointing device . The print processing is executed by performing three types of processing which are selecting the printer generating the print setting and converting drawing data.

Regarding the selection of the printer the user selects an icon indicative of a print queue of the printer driver corresponding to the printer which the user desires to use. In when the printer driver is installed on the client computer the printer driver is associated with the print queue and the icon indicative of the print queue is provided for the user.

To generate the print setting the function of the printer driver is used. First an initial value is generated by a configuration module . Then by using a user interface UI of the application or the printer driver the user changes the setting as appropriate and determines a print setting . For example the user changes the size of paper to be output or designates two sided printing or monochrome color printing.

The user interface of the printer driver is provided by the configuration module . The print setting is reserved in the RAM . The format of the print setting is for example a binary data structure or an XML in a markup language. The format depends on the specification of the printer driver and the OS . Further the print setting is generated each time a document is printed. However useful information such as an optional device configuration of the printer and environment settings set for each user are stored in a registry database of the OS by the printer driver . Further default values for each user in the print setting are stored in the registry database by the print manager of the OS .

Next conversion of the drawing data will be described. If print processing is executed by the user after the generation of the print setting the application notifies the OS of start of printing. Then print data is generated by the designated printer driver via the graphics engine of the OS . If layout processing is designated in the print setting a spool file which is a temporary file is generated before the data is processed by a rendering module of the printer driver . Then a layout module starts layout processing which includes changing a paper order and making an N up printing. After the layout is changed by the layout module the rendering module of the printer driver converts the drawing data into PDL data which can be understood by the printer. When the drawing data is converted into PDL data the print setting is also converted into PDL data. In many cases both the rendering module and the configuration module are shared and can be used by a plurality of types of printers the printers . The difference between the models is described in a model dependent data file . The rendering module and the configuration module refer to this model dependent data file as appropriate. The data which has been converted is sequentially stored as the spool file . The print manager acquires the spool file and manages the schedule of the print processing as a print job. When the printer is ready for printing the print manager transmits the print job to the printer via an I O module . In this manner the data provided by the application is transmitted to the printer as a print job and printing is executed.

In generating the print setting of a document illustrated in the print setting is directly rewritten by the application. Further the print setting can be generated using a user interface. The user interface is provided by the configuration module of the printer driver . illustrates an example of a user interface provided by the configuration module of the printer driver .

The print setting includes a structure called a DEVMODE structure on a Microsoft registered trademark Windows registered trademark OS. The DEVMODE structure is illustrated in . The DEVMODE structure includes two regions which are a standard setting region and an extended setting region . The standard setting region is publicly defined by the OS and the setting region is a region extended by the printer driver. Various print settings including changing a paper size or a paper feed stage and switching color monochrome printing can be performed in the standard setting region . In the setting region optional settings associated with a discharge function and a fine color adjustment function of the printer can be performed. Since information on the extended settings on the printer driver is not provided to the application the application can only change the print settings performed in the standard setting region defined by the system. Thus generally the application causes the printer driver to display a user interface so that the user can perform the print settings in the extended setting region .

The configuration module provides not only the user interface but also an application programming interface API . Thus it is possible to perform the print settings in the extended setting region from an external apparatus without displaying the user interface. However if an API of the configuration module is used the application needs to correspond to the printer driver . Therefore in a common application only the print settings in standard setting region are changed.

Next the OS described above with reference to will be described in detail together with the issues to be solved by the present invention.

In recent years mobile terminals e.g. cellular phones and tablet computers including a touch panel have widely been used. Since these devices are operated by touching the screen the UI environment of the OS of these devices is optimized for a touch panel. Such a UI environment hereinafter referred to as a touch panel UI is different from a UI environment optimized for for example the conventional Windows registered trademark XP hereinafter referred to as a desktop UI .

An OS on which the display of the touch panel UI can be manually changed to a desktop UI can also be assumed. To generate an application that runs on such an OS a different package needs to be prepared for each UI environment.

According to the present invention the OS enables switching between the touch panel UI and the desktop UI .

The OS allows compatibility so that when a print request from a document application conforming to the touch panel UI is received the user can manually switch the UI screen for the touch panel UI to the UI screen for the printer driver see conforming to the environment of the desktop UI . Accordingly even on the OS the user can use the printer driver designed for the conventional UI environment and perform printing.

However if the UI of a printer driver assuming such a conventional UI environment is displayed although the necessary content is displayed the operability is not good. This is because the buttons for the conventional UI environment generally used with a mouse and a keyboard are too small for a user to use a device generally operated on a touch panel.

Thus when a print request from a document application conforming to the touch panel UI is received instead of directly displaying the UI of the printer driver the OS automatically generates a UI based on metadata in the XML format so that the user can easily perform the necessary print setting. illustrates an example of a UI of an application conforming to the touch panel UI and a UI for a print setting automatically generated by the OS based on metadata in the XML format according to the present exemplary embodiment.

However since the UI is not a module provided by a printer vendor but generated by the OS the user can specify only a part of the print settings on the UI . In other words the secure print function or the departmental management function requesting the user to input information e.g. user information authentication information which has been provided by the printer driver is not provided on the UI . The function displays a pop up dialog prompting the user to input user information when the user presses a Print button . The structure of the OS which automatically generates a UI based on the metadata in the XML format cannot support such a function of the printer driver .

Thus if the user desires to use the secure print function or the departmental management function the user needs to follow the following procedures. First the user needs to set the secure print function or the departmental management function using the UI screen of the printer driver in the conventional UI environment. Next as described above when the user provides the printing instruction a pop up dialog prompting the user to input information needs to be displayed on the desktop UI in the conventional UI environment. However since the touch panel UI is displayed on the monitor screen before and after the user provides the printing instruction. In order for the user to know that a pop up UI is displayed on the desktop UI the user needs to manually change the touch panel UI to the desktop UI after providing the printing instruction.

Thus when the printer driver displays a pop up UI on the desktop UI after the instruction of the printing the OS displays a toast prompting the user to tap the touch panel UI . illustrates an example of the toast according to the present exemplary embodiment.

In a toast is displayed on an application in a touch panel UI. The toast includes a message indicating that the touch panel UI can be changed to the desktop UI if the user taps the toast . If the user taps the toast the OS changes the touch panel UI to the desktop UI . Accordingly the user can notice the pop up UI displayed on the desktop UI input necessary information and continue the print processing.

However the display control of the toast by the OS needs to be supported not only by the printer driver but by various conventional applications which the OS ensures compatibility. Some of pop up dialogs displayed on the desktop UI which is not displayed on the touch panel UI may not require confirmation by the user. If user confirmation is not necessary the toast which continues to be displayed until the toast is tapped by the user indicates that the display area on the touch panel UI is unnecessarily occupied.

Thus normally the toast is used only as a temporary notification displayed by the OS and disappears after the elapse of a predetermined period of time. On the other hand to execute the function of the printer driver such as the above described secure print function and the departmental management function the input of user information is necessary. Thus if the user misses the toast the printer driver continues to display a pop up UI on the desktop UI to wait for the input about necessary information and the user is unable to know that the print processing is not being performed although the print processing is suspended.

Thus if the user does not fully understand the display function of the OS some of functions of the printer driver may not be appropriately executed. According to the present exemplary embodiment the user can make full use of the functions of the printer driver running on the OS that supports more than one UI environment.

The above described processing will be described with reference to . is a flowchart illustrating the print processing of the printer driver according to the present exemplary embodiment. The program i.e. the printer driver of this processing is stored in the auxiliary storage unit of the client computer read out by the RAM and executed by the CPU .

The print processing includes prompting the user to input information by displaying a pop up dialog. In step S the printer driver acquires drawing data and the print setting from the application .

In step S the printer driver determines whether the setting for a pop up dialog prompting the user to input information which is previously performed in advance via the driver UI illustrated in is included in the print setting acquired from the application . Such a dialog is displayed when for example the secure print function is used. When this secure print function is used the user is prompted to input a user name and a password. When the information is input authentication is performed by the printer. In step S if the printer driver determines that the setting for a pop up dialog prompting the user to input information is not included in the print setting NO in step S the processing proceeds to step S without displaying the pop up UI. In step S the printer driver converts the print setting and the drawing data into PDL data and executes printing. On the other hand in step S if the printer driver determines that the setting for a pop up dialog is included in the print setting YES in step S the processing proceeds to step S.

In step S the printer driver displays on the desktop UI a pop up dialog prompting the user to input information. An example of a UI displaying a pop up dialog prompting the user to input information hereinafter referred to as a pop up UI according to the present exemplary embodiment is illustrated in . illustrates a pop up UI for the secure print function. Before the secure print is executed the user is prompted to input a user name and a password so that the printer can perform the authentication before the print product is actually output.

In step S the printer driver acquires information on the application which is the print source. For example the printer driver makes a request to the OS and refers to identification information to acquire the information on the application from the OS. In step S the printer driver determines whether the application is operable on the touch panel UI from the information on the application acquired in step S. If the application is not operable on the touch panel UI NO in step S the processing proceeds to step S.

In step S the printer driver determines whether the user name and the password have been input and an O button has been pressed via the pop up UI illustrated in . In step S if the printer driver determines that the OK button has not yet been pressed NO in step S the printer driver waits for the OK button to be pressed. On the other hand if the printer driver determines that the OK button has been pressed YES in step S the processing proceeds to step S. In step S the printer driver converts the print setting including the information such as the user name and the password and the drawing data into PDL data and generates print data. The generated data is transmitted to an image forming apparatus such as a printer and the data is printed according to the above described setting.

In step S if the printer driver determines that the application is operable on the touch panel UI YES in step S the processing proceeds to step S. In this case when the popup UI is displayed in step S the OS displays the toast see prompting the user to tap the toast on the touch panel UI . In step S the printer driver determines whether the user name and the password are set to default values via the UI in . If the user name and the password are set to default values YES in step S the processing proceeds to step S. If the user name and the password are not set to default values NO in step S the processing proceeds to step S.

In step S the printer driver determines whether the OK button of the pop up UI illustrated in has been pressed. If the printer driver determines that the OK button has not yet been pressed NO in step S the processing proceeds to step S. On the other hand if the printer driver determines that the OK button has been pressed YES in step S the processing proceeds to step S.

In step S the printer driver determines whether a predetermined period of time has passed with no focus received on the pop up UI in other words with no user operation performed or with no user operation detected on the pop up UI since the pop up UI has been displayed on the desktop UI . The predetermined period of time may be registered and set in advance for the printer driver or set by the user via the driver UI illustrated in . Further the printer driver can acquire the above described toast display time and set the time as the predetermined period of time.

In step S if the printer driver determines that the predetermined period of time has not yet passed NO in step S the processing returns to step S. On the other hand if the printer driver determines that the predetermined period of time has passed YES in step S the processing proceeds to step S. In step S the printer driver converts the print setting including the information such as the user name and the password which have been set as the default values and the drawing data into PDL data and generates print data. The pop up UI displayed in step S is automatically closed by the printer driver.

Although the flowchart in has been described with reference to the pop up UI of the secure print function illustrated in similar processing can be performed by a device driver function that displays a pop up dialog during the print processing after the printing has been instructed by the user.

As another example a pop up UI of the departmental management function of the printer driver is illustrated in . If the use of the departmental management function is set in advance and printing is instructed the printer driver displays a UI . Then the user inputs a department ID and a password . As is the case in printing started when the OK button illustrated in is pressed printing is started when an OK button in is pressed.

As yet another example a pop up UI of a facsimile transmission function of a facsimile driver is illustrated in . When the user inputs an address name and a facsimile number and presses an add to recipient list button the destination of the facsimile is determined. Then if the user presses an OK button the facsimile transmission is started. Furthermore yet another example of a pop up UI of a file storage function of a printer driver is illustrated in . When the user inputs an output file name such as a file path via a UI and presses an OK button the storage of the file is started.

According to the processing illustrated in even if the focus is not received on the pop up UI of the desktop UI the printing is automatically executed after a predetermined period of time elapses. Thus even if the user overlooks the toast the print processing is not suspended. This indicates that even if the user does not fully understand the display function for the OS the function of the printer driver can be appropriately executed.

According to the first exemplary embodiment whether the user name and the password are set to default values is determined in step S in order to determine whether to automatically execute the printing after the elapse of a predetermined period of time. According to a second exemplary embodiment of the present invention the user is asked to determine whether to perform automated execution of the printing after the elapse of a predetermined period of time.

Additionally the UI illustrated in includes a check box which is used for determining whether the user information is to be confirmed before the secure print is performed. If the user clears the check box the pop up will not appear before the secure print is performed. On the other hand if the user checks the check box the user can confirm and input information such as a user name in the above described pop up dialog before the secure print is performed. The check box may be controlled by the printer driver such that the box cannot be cleared if the valid user name and the valid password have not been input.

According to the second exemplary embodiment the UI further provides a check box which is used when the user designates whether the printing is to be executed after the elapse of a predetermined period of time.

The check box is controlled by the printer driver in such a manner that the check box can be checked or cleared only when the check box confirm user information before secure printing is checked. If the user checks the check box the printer driver automatically executes the secure printing when a predetermined period of time has passed since the pop up UI has been displayed on the desktop UI. The check box is controlled by the printer driver such that the check box cannot be checked if the valid user name and the valid password have been input. Further it is desirable to set a sufficiently long time as the predetermined period time compared to the toast display time described above. Basically this predetermined period of time is managed by the printer driver but the period of time can also be set by the user.

Next processing of the printer driver according to the present exemplary embodiment will be described in detail with reference to the flowchart in .

The flowchart in is performed in a case where the check box confirm user information before secure printing and the check box execute printing after elapse of predetermined period of time are checked on the UI in .

In step S the printer driver determines whether the OK button of the pop up UI for the secure print has been pressed as is the case performed in step S. If the OK button has been pressed YES in step S the processing proceeds to step S. If the OK button has not yet been pressed NO in step S the processing proceeds to step S.

Processing in step S is similar to the processing in step S. Th t is the printer driver determines whether the predetermined period of time has passed with no user operation performed on the pop up since the pop up UI of the secure print has been displayed on the desktop UI . In step S if the printer driver determines that the predetermined time has passed YES in step S the processing proceeds to step S. If the printer driver determines that the predetermined period of time has not yet passed NO in step S the processing returns to step S.

In step S the printer driver converts the print setting including information such as the user name and the password set on the UI and the drawing data into PDL data and generates print data. The generated data is transmitted to an image forming apparatus such as a printer. Then the data is printed according to the above described setting.

By using the UI illustrated in the user can designate whether to perform automated printing after a predetermined time so that the user can have more options. As described in the first exemplary embodiment various functions require the pop up UI. Since the processing performed after the elapse of a predetermined period of time can be designated for each function the device driver can provide a detailed support to the user.

For example if a file output instruction is provided as illustrated in the processing may be cancelled after the elapse of a predetermined period of time. Further if a facsimile transmission instruction is provided as illustrated in in order to prevent transmission error automatic transmission may not be performed until the user inputs necessary information. Furthermore when the user designates automatic printing execution after the elapse of a predetermined period of time as is the case performed in the first exemplary embodiment the functions of the printer driver can be appropriately executed even if the user does not fully understand the display function for the OS.

Aspects of the present invention can also be realized by a computer of a system or apparatus or devices such as a CPU or MPU that reads out and executes a program recorded on a memory device to perform the functions of the above described embodiment s and by a method the steps of which are performed by a computer of a system or apparatus by for example reading out and executing a program recorded on a memory device to perform the functions of the above described embodiment s . For this purpose the program is provided to the computer for example via a network or from a recording medium of various types serving as the memory device e.g. computer readable medium .

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications equivalent structures and functions.

This application claims priority from Japanese Patent Application No. 2012 013039 filed Jan. 25 2012 which is hereby incorporated by reference herein in its entirety.

