---

title: Supporting arbitrary routing criteria in software defined networks
abstract: System, method, and computer program product to route data communications based on non-routing criteria, by receiving, by a network element, a data packet, identifying, in a routing table of the network element, a first route for routing the data packet, computing, by an application executing on the network element, a routing score for the first route based on one or more non-routing criteria, computing, by the application, a routing score for a second route for routing the data packet based on the one or more non-routing criteria, and upon determining that the routing score for the second route is less than the routing score of the first route, updating the routing table to cause the network element to route the data packet according to the second route.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09258212&OS=09258212&RS=09258212
owner: Cisco Technology, Inc.
number: 09258212
owner_city: San Jose
owner_country: US
publication_date: 20130315
---
Embodiments presented in this disclosure generally relate to software defined networks. More specifically embodiments disclosed herein provide software defined networks which support arbitrary routing criteria.

Routing protocols have been designed to take into account a number of network related conditions in creating and maintaining routes such as reachability and network congestion. Currently however there is no way to route based upon non network related conditions such as dynamic latency service level agreements identity conditions bandwidth or contractual arrangements requiring a certain amount of traffic to flow via a given provider as incorporating these capabilities into a switch is prohibitive to do for each individual customer.

Embodiments disclosed herein provide a method to route data communications based on non routing criteria by receiving by a network element a data packet identifying in a routing table of the network element a first route for routing the data packet computing by an application executing on the network element a routing score for the first route based on one or more non routing criteria computing by the application a routing score for a second route for routing the data packet based on the one or more non routing criteria and upon determining that the routing score for the second route is less than the routing score of the first route updating the routing table to cause the network element to route the data packet according to the second route.

Embodiments disclosed herein enable network programmability to define rules at a network level for data forwarding and traffic classification. A user may define policies in a policy engine to control routing actions of the network element within the network allowing traffic control based on parameters that are not normally used for conventional network protocols including e.g. identity considerations cost considerations contractual considerations and weather considerations or any other arbitrary criteria. For example in one embodiment the policy engine may optimize routing for lowest cost in terms of currency by evaluating transmission costs and shifting traffic to lowest cost links. In another embodiment the policy is optimized for customer experience and shifts traffic to protect service level agreements SLAs . Taking full advantage of the programmable aspects of a software defined networking SDN enabled network embodiments disclosed herein allow a broad variety of non traditional routing criteria to influence routing and forwarding decisions.

Software defined networking SDN allows networks traditionally static entities to become more dynamic in nature. SDN opens data networking to application developers who may write applications to manage network elements and the data flows passing through them without requiring physical access to the network elements themselves. Rather than network elements being just appliances SDN considers network hardware to be part of a distributed computational system that can be manipulated by software. An application developer writing applications for an SDN may execute the application on any device which can access the network. The application may execute commands and apply functions to the network devices and the data flows therein remotely or locally on the network element itself. Using applications in an SDN developers may manage networking behavior of a network element including routing quality of service QoS and bandwidth allocation as well as manage the network elements themselves. More specifically applications executing in a SDN such as a routing policy engine may modify routes in the SDN based on any software defined networking criteria. Additionally different programming logic may be applied to different flows or packets in the same network topology such that each network graph need not have its own instance of the SDN application.

The descriptions of various embodiments below are presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the disclosure may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the present disclosure a user may access a policy engine or related data available in the cloud. For example the policy engine could execute on a network element in the cloud. An operator of a physical data center in the cloud providing cloud services may use the policy engine to alter control or otherwise determine routing and forwarding controls for traffic generated by cloud customers e.g. customers hosting virtual machine instances networked by virtual networks based on non routing criteria relevant to the service provider. In such a case the policy engine could store modified routes and data related to the non traditional routing criteria at a storage location in the cloud. Doing so allows a user to access this information from any computing system attached to a network connected to the cloud e.g. the Internet .

Due to a variety of factors however the cost or other metrics of routing along the edges in the graph may change. In one embodiment a policy engine allows users to define and route forward traffic based on these attributes. For example the policy engine may compute the cost or other metric of transmitting data packets from source to destination. When the policy engine determines that another route based on the non traditional routing criteria is more efficient than the route currently defined in the RIB or a route used by the policy engine to override the route currently defined in the RIB the policy engine may override the route in the RIB and replace it with the more efficient route.

The policy engine may execute on the network elements themselves or on a computing device external to the network element. In either case the policy engine can override the routing decisions of the network element. The network elements described herein provide a plurality of application programming interfaces APIs which may be used to allow control of the network element including but not limited to its functions attributes and routing engine. Specifically by providing an interface to the routing engine of the network element applications using the APIs may determine routes based on non traditional routing criteria overriding the default routing decisions of the network element.

In another example the policy engine may observe that a service level agreement SLA requires that data communications traffic should pass through the geographic region within which node H is located. The policy engine may identify the physical location of the network element represented by node H and determine that it is within the mandated geographic region. In making such a determination scores for routes may be based on whether each route passes through the mandated geographic region. If the route includes the mandated geographic region the score may be lowered to reflect a more desirable route. If the route does not include the mandated geographic region the score may be increased to reflect the less desirable route. Embodiments disclosed herein contemplate any type of scoring scale sufficient to indicate a preference of one route over another. For example the more desirable route may be reflected by the highest score. Once the most desirable route is identified which may be based on the lowest cost route including the mandated geographic region the policy engine may override default or currently existing routes to implement the most desirable route.

In yet another example the policy engine may use weather conditions to influence the scores of each route. For example if a blizzard was occurring in the geographic region including node B there may be a strong possibility of service outages and delays. In such an event the policy engine may look for other routes having no significant impact from weather conditions. For each route a score may be calculated based on the possible adverse effects of weather conditions. For example if one area had a 100 chance of a blizzard while another area had a 50 chance of the same blizzard the scores for each route could be weighted accordingly. If the score for routes including node B is greater than another route not including node B the policy engine may override the routing tables of each node such that no or less data is routed through node B.

In still another example the policy engine may use the identity of a user as a criterion for affecting routing in the SDN enabled network. For example the policy engine may prioritize the data coming from all devices used by the CEO of a corporation. In order to do so the policy engine may compute a priority score for all network traffic based on the identity of the person or user whose device originated the data. When the policy engine determines that data packets come from a user having high priority the priority score for these data packets may be lowered or raised in some embodiments to reflect the higher priority. The policy engine may then direct the network elements in the SDN enabled network to apply a greater priority to these packets which may be delivered to their destination more quickly than without having the added priority.

In another example the policy engine may use energy costs and use of specific network elements as routing criteria. Certain portions of the network may see reduced usage at certain times and it may be economical to force the traffic to go through alternate routes so that lesser used network elements may be powered down to save energy. When other criteria become more important such as an increase in traffic the network elements may be repowered so that flows may go across them again.

The network elements generally include a processor connected via a bus to a memory and a network interface device . The network elements are configured to execute containerized software applications. The network elements are generally under the control of an operating system not shown . Examples of operating systems include the UNIX operating system distributions of the Linux operating system and the IOS operating system by Cisco Systems . The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. The processor may execute software developed for the purposes of embodiments disclosed herein. Similarly the memory may be a random access memory. While the memory is shown as a single identity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. The network interface device may be any type of network communications device allowing the network elements to communicate with other network elements and computers via the SDN enabled network .

As shown the memory contains an orchestration application which is an application generally configured to orchestrate automation and programmability of the network elements in the SDN enabled network . Generally the orchestration application provides a plurality of APIs used to abstract the implementation specific details of the network elements in the SDN enabled network . Stated differently the orchestration application is an abstraction tool that permits a programmer or network administrator to access and monitor different functions and outputs of network elements in the SDN enabled network . By using the orchestration application functional programming techniques may be used to program a wide range of network elements regardless of the wide array of distinctions found between specific network elements . In particular the orchestration application may provide an interface to allow an application such as the policy engine to read write and modify the routing table and routing engine of a network element .

The memory also contains a policy engine which is an application generally configured to modify routing policies based on non traditional networking criteria. For example the policy engine may modify routes based on dollar cost latency geographical constraints contractual provisions service level agreements energy costs and weather conditions or any combination thereof. Upon determining that a better route exists than the route currently used to route data the policy engine may issue commands to change the routing engine and RIB of the network elements . The policy engine may use the APIs provided by the orchestration application to modify the RIB and routing engine of the network elements . The routing engine of the network elements is an application generally configured to execute the core networking functions of the respective network element. The routing engine may interact with the routing information base RIB also referred to as a routing table which specifies a plurality of rules used by the routing engine to route packets received on an ingress port not shown of the network elements to a proper egress port not shown of the network elements . In one embodiment the RIB of each respective network element includes immediate topology information of the SDN enabled network i.e. what other network elements a respective network element is connected to and so on.

As shown the memory also contains the application programming interfaces APIs which stores the APIs provided by the orchestration application to the policy engine . In one embodiment the APIs are an integrated component of the orchestration application or the policy engine . The APIs gather data associated with the different functions of the network elements such as statistics associated with the network element routing tables status of the network elements topology information errors and the like. Moreover APIs may also permit a programmer or network administrator to control the functions of the network elements such as change settings in the forwarding engine change the state of the network elements etc. An application therefore such as the policy engine may use the APIs to send commands to the network elements .

By abstracting the RIB of the network elements using the APIs the orchestration application may permit a network administrator to monitor and control a plurality of different types of network elements that each may use proprietary firmware. One such product that permits this function is the One Platform Kit onePK software development kit SDK by Cisco a registered trademark in the United States many other jurisdictions .

The computers may be capable of executing applications such as the policy engine which may utilize the functionality of the APIs provided by the orchestration application . Therefore in one embodiment the orchestration application the policy engine and other user applications may be executed on one or more of the computers in order to modify the routing behavior or any behavior of the network elements . In still another embodiment the computers may be blade servers which execute the orchestration application and the policy engine in the SDN enabled network .

Advantageously embodiments disclosed herein extend a network element s ability to route such that routing decisions may be made based on non traditional criteria which include but are not limited to dollar cost latency geographical constraints contractual provisions service level agreements and weather conditions or any combination thereof.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

In view of the foregoing the scope of the present disclosure is determined by the claims that follow.

