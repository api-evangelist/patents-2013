---

title: Method and system to release IMS resources used by IMS batch application programs
abstract: The embodiments provide a system for managing access to Information Management System (IMS) database resources. The system may include an initialization routine configured to generate a first task in response to an IMS batch job request to enable an application program access to IMS resources including attaching an IMS Coordinator Controller. The IMS Coordinator Controller may be configured to establish a database resource adaptor (DRA) connection to an IMS database control region. The initialization routine may be configured to generate a second task in response to the DRA connection being established including attaching an application program controller. The application program controller may be configured to transform a database access call from the application program to a DRA interface call to access the IMS resources via the DRA connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336067&OS=09336067&RS=09336067
owner: BMC Software, Inc.
number: 09336067
owner_city: Houston
owner_country: US
publication_date: 20130628
---
Current reorganization technologies require that Information Management System IMS Batch Message Processing BMP DLI Data Language Interface and DBB IMS batch jobs all of which are heretofore referred to as IMS Batch jobs or IMS jobs be temporarily stopped in order to reorganize databases that these jobs access. This may be a cumbersome process for customers as it requires that they coordinate production outages with the execution of their IMS database maintenance utilities. The risk of relying on manual intervention to properly stop and restart these IMS jobs is not feasible because a large IMS environment may contain dozens even hundreds of jobs to be stopped and restarted.

Also current technologies that provide coordination between the IMS jobs accessing IMS databases and their maintenance utilities increase processing overhead for the IMS batch jobs as well as alter the execution dynamic of the IMS jobs by abending and restarting the IMS business application program. These shortcomings have been deemed tolerable due to the lack of automated or programmatic alternatives.

The embodiments provide a system for managing access to Information Management System IMS database resources. The system may include at least one processor and a non transitory computer readable medium storing instructions when executed by the at least one processor are configured to implement one or more components for managing access to the IMS database resources including an initialization routine. The initialization routine may be configured to generate a first task in response to an IMS batch job request to enable an application program access to IMS resources including attaching an IMS Coordinator Controller. The IMS Coordinator Controller may be configured to establish a database resource adaptor DRA connection to an IMS database control region. The initialization routine may be configured to generate a second task in response to the DRA connection being established including attaching an application program controller. The application program controller may be configured to transform a database access call from the application program to a DRA interface call to access the IMS resources via the DRA connection.

The IMS Coordinator Controller configured to establish the DRA connection to the IMS database control region may include scheduling a program specification block PSB for execution. The scheduling the PSB for execution may include invoking by the initialization routine an IMS DRA interface routine.

The IMS Coordinator Controller configured to establish the DRA connection to the IMS database control region may include invoking a participant adapter parameter list PAPL builder configured to receive connection parameters from a product load library and generate a PAPL based on the connection parameters and an IMS DRA interface routine configured to establish the DRA connection to the IMS database control region based on the PAPL.

The IMS Coordinator Controller may be configured to receive at least one return code from the IMS DRA interface routine where the at least one return code may indicate whether the establishment of the DRA connection was successful.

The application program controller configured to transform the database access call to the DRA interface call may include a database program request handler configured to normalize a call parameters list related to the database access call and a database language interface configured to generate at least one control block to use the DRA connection.

The initialization routine may be configured to receive a request to terminate the DRA connection when the application program is finished and configured to terminate the DRA connection in response to the request.

The initialization routine configured to terminate the DRA connection in response to the request may include invoking a participant adapter parameter list PAPL builder configured to generate a PAPL for terminating the DRA connection and an IMS DRA interface routine configured to terminate the DRA connection to the IMS database control region based on the PAPL.

The embodiments may include a non transitory computer readable medium storing instructions that when executed cause at least one processor to manage access to Information Management System IMS database resources. The instructions may include instructions to generate a first task in response to an IMS batch job request to enable an application program access to IMS resources including attaching an IMS Coordinator Controller configured to establish a database resource adaptor DRA connection to an IMS database control region and generate a second task in response to the DRA connection being established including attaching an application program controller configured to transform a database access call from the application program to a DRA interface call to access the IMS resources via the DRA connection.

The instructions to establish the DRA connection to the IMS database control region may include instructions to schedule a program specification block PSB for execution. The instructions to schedule the PSB for execution may include instructions to invoke an IMS DRA interface routine.

The instructions to establish the DRA connection to the IMS database control region may include instructions to receive connection parameters from a product load library generate a PAPL based on the connection parameters and establish the DRA connection to the IMS database control region based on the PAPL.

The instructions may include instructions to receive at least one return code from the IMS DRA interface routine where the at least one return code may indicate whether the establishment of the DRA connection was successful.

The instructions to transform the database access call to the DRA interface call may include instructions to normalize a call parameters list related to the database access call and generate at least one control block to use the DRA connection.

The instructions may include instructions to receive a request to terminate the DRA connection when the application program is finished and terminate the DRA connection in response to the request.

The instructions to terminate the DRA connection in response to the request may include instructions to generate a PAPL for terminating the DRA connection and terminate the DRA connection to the IMS database control region based on the PAPL.

A computer implemented method for managing access to Information Management System IMS database resources may include generating by an initialization routine a first task in response to an IMS batch job request to enable an application program access to IMS resources including attaching an IMS Coordinator Controller configured to establish a database resource adaptor DRA connection to an IMS database control region and generating by the initialization routine a second task in response to the DRA connection being established including attaching an application program controller configured to transform a database access call from the application program to a DRA interface call to access the IMS resources via the DRA connection.

The IMS Coordinator Controller configured to establish the DRA connection to the IMS database control region may include invoking a participant adapter parameter list PAPL builder configured to receive connection parameters from a product load library and generate a PAPL based on the connection parameters and invoking an IMS DRA interface routine configured to establish the DRA connection to the IMS database control region based on the PAPL.

The application program controller configured to transform the database access call to the DRA interface call may include invoking a database program request handler configured to normalize a call parameters list related to the database access call and invoking a database language interface configured to generate at least one control block to use the DRA connection.

The method may include terminating by the initialization routine the DRA connection including invoking a participant adapter parameter list PAPL builder configured to generate a PAPL for terminating the DRA connection and invoking an IMS DRA interface routine configured to terminate the DRA connection to the IMS database control region based on the PAPL.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

The present description relates to providing high performance IMS database access that can be programmatically interrupted without altering the execution dynamics of the IMS batch jobs. The system may include any mainframe product that provides batch IMS business application programs access to IMS database resources through a database resource adaptor DRA interface connection. Further the system may avoid task switching between task control blocks TCBs . For example some conventional approaches may use components for using one of the TCBs for connecting to the IMS database and then task switching the database calls between the TCBs. However the system discussed below may avoid such task switching operations thereby improving performance and reducing overhead.

According to the embodiments when an IMS batch job is started the system may perform an initialization process to obtain access to various IMS resources. In one embodiment the system may establish a cross memory environment between the IMS database system and the IMS business application program. By replacing a portion of a standard initialization process with the designed system in this disclosure an IMS database resource adapter DRA interface connection is utilized thereby allowing IMS database access through the IMS control region without any changes to the business application programs. IMS database access may be wholly transparent to the IMS business application program. As further described below database access calls by the application program may be transformed to DRA interface calls.

The non transitory computer readable medium may include instructions that when executed by the at least one processor are configured to implement the components and or functionalities of the system as further described below. The non transitory computer readable medium may include one or more non volatile memories including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. Besides storing executable instructions the non transitory computer readable medium may also store any type of database structure discussed herein. The at least one processor may include one or more processors that carries out the functionalities provided by the components of the system. In one example the at least one processor may be any type of special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Generally the initialization routine may construct a pseudo IMS environment that includes control blocks such as System Contents Directory SCD Partition Specification Table PST Dependent Region Interregion Communication Area DIRCA Environment Control Parameters DFSECP Parameter Anchor Block PARMBLK Resource Routing Table RRT and Database Program Communication Block DBPCB control blocks for example. The initialization routine may initialize anchor and chain the control blocks in a manner to be consistent with a true IMS environment. This allows the application program that utilize the various control blocks to locate the target IMS resources and execute its functions within the boundaries of the established pseudo IMS environment. Also the pseudo IMS environment may allow IMS application programming interfaces to operate without altering the business application program . For instance the system may replace the IMS region controller program e.g. DFSRRC00 with the initialization routine . As a result the pseudo IMS environment may be constructed to include the above described control blocks which are further explained below.

In particular the initialization routine may be configured to generate a first task e.g. the IMS Coordinator Controller in response to an IMS batch job request to enable an application program access to IMS resources e.g. IMS database control region . For example upon receiving the IMS batch job request the initialization routine may be configured to attach the IMS Coordinator Controller . The IMS Coordinator Controller may be configured to establish the DRA connection to the IMS database control region .

In more detail the IMS Coordinator Controller configured to establish the DRA connection to the IMS database control region may include scheduling a program specification block PSB for execution. Also the scheduling of the PSB for execution may include invoking by the initialization routine the IMS DRA interface routine . For example the initialization routine may parse an IMS execution parameter string included in the IMS batch job request in order to establish the DRA connection to the IMS database control region and then schedule the requisite PSB e.g. found in the execution parameter for execution within the IMS database control region . To accomplish this the initialization routine may attach the IMS Coordinator Controller . The IMS Coordinator Controller may then invoke the IMS DRA interface routine which will establish the DRA connection and schedule the PSB for execution. The establishment of the DRA connection is further explained with reference to .

Also the initialization routine may be configured to generate a second task e.g. the application program controller in response to the DRA connection being established. For example the initialization routine may be configured to attach the application program controller . The application program controller may be configured to transform a database access call from the application program to a DRA interface call to access the IMS resources via the DRA connection . Attaching the application program controller may provide an isolated execution environment for the business application program . For example database access calls may be transformed into DRA interface access calls and any information may be transmitted from to the application program via the DRA connection .

As shown in the business application program and the DRA connection execute under different task control blocks. For example the business application program executes under the application program controller and the establishment termination of the DRA connection executes under the IMS Coordinator Controller via the IMS DRA interface routine . Utilizing multiple task control blocks in this manner may allow the system to terminate and restart the DRA connection without terminating the application program . Then using Open Thread Task technology implemented into IMS v12 IMS database calls can be issued directly from the application program controller thereby avoiding any task switching overhead.

As described with reference to referring to the initialization routine may establish the DRA connection via the IMS Coordinator Controller by invoking the IMS DRA interface routine . In this example initialization routine may invoke the database language interface which creates the necessary control blocks and the IMS DRA interface routine which establishes the DRA connection as further explained with reference to .

The application program controller configured to transform the database access call to the DRA interface call may include the database program request handler configured to normalize a call parameters list related to the database access call and the database language interface configured to generate at least one control block to use the DRA connection . For example as IMS database access calls are made by the business application program the database access calls may be provided to the database program request handler . The database program request handler may normalize the call parameter list and then provide the normalized call parameter list to the database language interface . The database language interface may create the control blocks necessary to facilitate use of the DRA connection .

Due to the Open Thread Task interface available only through the IMS DRA interface the IMS database calls may be executed from TCBs that are not directly connected to the IMS database control region . This may avoid task switching between TCBs. If any IMS resources need to be released for online reorganization purposes the system can terminate and restart the TCB connected to the IMS database control region as needed without impacting the business application program as further explained with reference to .

The application checkpoint processor may access the linear dataset and copy application data areas as provided by the application program via standard IMS checkpoint and or program restart calls to the database program request handler . In one example the IMS DRA interface routine may not support IMS application checkpoint and or restart calls thereby making IMS extended restart functionality the responsibility of the overall product. Saving data provided by the application program in the linear dataset will allow the IMS extended restart functionality implemented by the application program to be processed by the product. However the embodiments may encompass IMS DRA interfaces that provide such symbolic check pointing support.

Also because the IMS DRA interface routine may not support access to the GSAM database the system may include the GSAM database processor that is configured to handle calls from to the application program to access provide information from the GSAM database . The IMS DRA interface routine may not support GSAM database access and must therefore be the responsibility of the overall product. In one example the GSAM database may use BSAM or VSAM data sets to store processing parameters or output reports through IMS services.

For example the PAPL builder may be configured to receive connection parameters from the product load library and generate the PAPL based on the connection parameters. The IMS DRA interface routine may be configured to establish the DRA connection to the IMS database control region based on the PAPL . Further the IMS Coordinator Controller may receive at least one return code from the IMS DRA interface routine where the at least one return code indicates whether the establishment of the DRA connection was successful.

For example the PAPL builder may be configured to generate the termination parameters e.g. the PAPL . The IMS DRA interface routine may be configured to terminate the DRA connection to the IMS database control region based on the PAPL . Further the IMS Coordinator Controller may receive at least one return code from the IMS DRA interface routine where the at least one return code indicates whether the termination of the DRA connection was successful.

A first task may be generated in response to an IMS batch job request to enable an application program access to IMS resources including attaching an IMS Coordinator Controller where the IMS Coordinator Controller is configured to establish a database resource adaptor DRA connection to an IMS database control region .

For example referring to the initialization routine may be configured to generate a first task e.g. the IMS Coordinator Controller in response to an IMS batch job request to enable an application program access to IMS resources e.g. IMS database control region . For example upon receiving the IMS batch job request the initialization routine may be configured to attach the IMS Coordinator Controller . The IMS Coordinator Controller may be configured to establish the DRA connection to the IMS database control region .

In more detail the IMS Coordinator Controller configured to establish the DRA connection to the IMS database control region may include scheduling a program specification block PSB for execution. Also the scheduling of the PSB for execution may include invoking by the initialization routine the IMS DRA interface routine . For example the initialization routine may parse an IMS execution parameter string included in the IMS batch job request in order to establish the DRA connection to the IMS database control region and then schedule the requisite PSB e.g. found in the execution parameter for execution within the IMS database control region . To accomplish this the initialization routine may attach the IMS Coordinator Controller . The IMS Coordinator Controller may then invoke the IMS DRA interface routine which will establish the DRA connection and schedule the PSB for execution.

In further detail referring to the PAPL builder may be configured to receive connection parameters from the product load library and generate the PAPL based on the connection parameters. The IMS DRA interface routine may be configured to establish the DRA connection to the IMS database control region based on the PAPL . Further the IMS Coordinator Controller may receive at least one return code from the IMS DRA interface routine where the at least one return code indicates whether the establishment of the DRA connection was successful.

Referring back to a second task may be generated in response to the DRA connection being established including attaching an application program controller where the application program controller is configured to transform a database access call from the application program to a DRA interface call to access the IMS resources via the DRA connection .

For example referring to the initialization routine may be configured to generate a second task e.g. the application program controller in response to the DRA connection being established. For example the initialization routine may be configured to attach the application program controller . The application program controller may be configured to transform a database access call from the application program to a DRA interface call to access the IMS resources via the DRA connection . Attaching the application program controller may provide an isolated execution environment for the business application program . For example database access calls may be transformed into DRA interface access calls and any information may be transmitted from to the application program via the DRA connection .

As shown in the business application program and the DRA connection execute under different task control blocks. For example the business application program executes under the application program controller and the establishment termination of the DRA connection executes under the IMS Coordinator Controller via the IMS DRA interface routine .

In further detail referring to the application program controller configured to transform the database access call to the DRA interface call may include the database program request handler configured to normalize a call parameters list related to the database access call and the database language interface configured to generate at least one control block to use the DRA connection . For example as IMS database access calls are made by the business application program the database access calls may be provided to the database program request handler . The database program request handler may normalize the call parameter list and then provide the normalized call parameter list to the database language interface . The database language interface may create the control blocks necessary to facilitate use of the DRA connection .

Due to the Open Thread Task interface available only through the IMS DRA interface the IMS database calls may be executed from TCBs that are not directly connected to the IMS database control region . This may avoid task switching between TCBs. If any IMS resources need to be released for online reorganization purposes the system can terminate and restart the TCB connected to the IMS database control region as needed without impacting the business application program .

Implementations of the various techniques described herein may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Implementations may implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device computer readable medium for processing by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program such as the computer program s described above can be written in any form of programming language including compiled or interpreted languages and can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be processed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by and an apparatus may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the processing of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer also may include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory may be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations may be implemented on a computer having a display device e.g. a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Implementations may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation or any combination of such back end middleware or front end components. Components may be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

While certain features of the described implementations have been illustrated as described herein many modifications substitutions changes and equivalents will now occur to those skilled in the art. It is therefore to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the embodiments. It should be understood that they have been presented by way of example only not limitation and various changes in form and details may be made. Any portion of the apparatus and or methods described herein may be combined in any combination except mutually exclusive combinations. The embodiments described herein can include various combinations and or sub combinations of the functions components and or features of the different embodiments described.

