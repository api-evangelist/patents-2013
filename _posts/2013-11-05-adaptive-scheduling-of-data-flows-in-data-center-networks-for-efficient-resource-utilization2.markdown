---

title: Adaptive scheduling of data flows in data center networks for efficient resource utilization
abstract: An approach is provided in which a first virtual machine, executing on a host computer system, generates a data packet with a target destination at a second virtual machine over a computer network. The host computer system identifies a data flow corresponding to the data packet based the data packet's header information, and analyzes path weightings of available paths that are made available to the identified data flow. In turn, the host computer system assigns one of the available paths to the identified data flow corresponding to a pre-defined physical layer path from the first virtual machine to the second virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09634938&OS=09634938&RS=09634938
owner: International Business Machines Corporation
number: 09634938
owner_city: Armonk
owner_country: US
publication_date: 20131105
---
The present disclosure relates to efficient resource utilization in a data center network through adaptive data flow scheduling. More particularly the present disclosure relates to assigning a network path to a data packet flow based upon link utilization weightings of the data center network.

A software defined data center SDDC is an architectural approach to virtualizing a data center infrastructure and delivering the infrastructure as a service. This approach is in contrast to traditional data centers where the infrastructure is typically defined by hardware and devices. A software defined data center encompasses a variety of concepts and data center infrastructure components and each component may be provisioned operated and managed through an application programming interface API . The core architectural components of a software defined data center include compute virtualization storage virtualization management and automation software and network and security virtualization.

Compute virtualization is a software implementation of a computer. Storage virtualization e.g. software defined storage enables data center administrators to manage multiple storage types and brands from a single software interface. Management and automation software enables an administrator to provision control and manage all software defined data center components. And network and security virtualization is the process of merging hardware and software resources and networking functionality into a software based virtual network.

Like traditional data centers a software defined data center groups data packet transmissions from a source entity to a destination entity in flows which are represented by a flow identifier included in the data packets. For example the flow identifier may be a 5 tuple that includes a source destination IP address source destination port number and a protocol identifier.

A software defined data center may generate dynamic variations in network traffic which can cause high utilization at some links e.g. connection between two switches or routers while leaving other links in the network underutilized. As such the network may experience network bottlenecks congestion even when the network capacity is sufficient to accommodate the existing flows between network entities.

According to one embodiment of the present disclosure an approach is provided in which a first virtual machine executing on a host computer system generates a data packet with a target destination at a second virtual machine over a computer network. The host computer system identifies a data flow corresponding to the data packet based the data packet s header information and analyzes path weightings of available paths that are made available to the identified data flow. In turn the host computer system assigns one of the available paths to the identified data flow corresponding to a pre defined physical layer path from the first virtual machine to the second virtual machine.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present disclosure as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The embodiment was chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The following detailed description will generally follow the summary of the disclosure as set forth above further explaining and expanding the definitions of the various aspects and embodiments of the disclosure as necessary.

Centralized flow scheduler adds a table entry in master weighting table for each available path which includes a path identifier the path s corresponding links and an initial random path weighting see and corresponding text for further details . In turn centralized flow scheduler sends table entries to each host that corresponds to the particular host. For example centralized flow scheduler sends table entries to host A corresponding to paths AB1 AB2 and AB3 which host A stores in local weighting table see and corresponding text for further details .

Host A s hypervisor processes data packets initiated by virtual machines and . When hypervisor receives a data packet from one of virtual machines or with a destination of one of host B s virtual machines or hypervisor sends the data packet to virtual switch vswitch . Virtual switch compares the header fields from the data packet against datapath rules configured in flow table . For example virtual switch may identify the data flow corresponding to the received data packet by extracting 5 tuple information from the data packet s header and comparing the flow identifier with table entries included in flow table that track existing flows to assigned paths see and corresponding text for further details .

If the data packet belongs to an existing data flow virtual switch applies the actions specified in the flow table to the packet. The actions may include modifying the data packet s header in a way such that the data packet when sent on the network uses a specific path assigned to the data flow see and corresponding text for further details and sending the packet out on a port. In turn the modified data packet traverses through computer network over the assigned path and arrives at host B . Hypervisor and virtual switch receive the data packet and forward the data packet to the appropriate one of virtual machines or .

However when the data packet belongs to a new data flow no matching entry exists in flow table for the data flow and the data packet is sent to the virtual switch control logic. The control logic of the virtual switch checks local weighting table for available paths that correspond to the data packet s source and destination and assigns a path to the data flow based upon the path weightings assigned to the available paths. Virtual switch generates a new table entry in flow table that includes the flow identifier e.g. 5 tuple and the corresponding actions required to forward the packets belonging to the data flow to the assigned path. As such when virtual switch receives a subsequent data packet belonging to the same data flow virtual switch accesses flow table and applies the same actions to each subsequent data packet in the data flow causing the subsequent data packets belonging to the same data flow to be forwarded along the same assigned path.

As data packets traverse through computer network certain links become highly utilized. This may be due to a single data flow from one host system or may be from a combination of flows from multiple host systems see and corresponding text for further details . Centralized flow scheduler detects the highly utilized links and updates path weightings in master weighting table corresponding to the highly utilized links see and corresponding text for further details . For example if the link between switch and becomes highly utilized centralized flow scheduler identifies available paths that include the link and updates their corresponding path weightings.

As such centralized flow scheduler identifies hosts that correspond to the updated path weightings and send updated path weightings to the corresponding hosts e.g. Host A . In turn when virtual switch receives a data packet from virtual machines or that are part of a new data flow virtual switch determines which path to assign to the new data flow based upon the updated path weightings. As a result flows are dynamically assigned across multiple paths in computer network thus reducing the possibility of network congestion.

When centralized flow scheduler configures computer network for multiple path options between hosts centralized flow scheduler adds table entries to table . As can be seen table includes three table entries for paths between host A and host B and three table entries for paths between host C and host B. When centralized flow scheduler detects highly utilized links in computer network centralized flow scheduler identifies paths that use the highly utilizes links via link identifiers in column and updates the corresponding path weightings accordingly. In turn centralized flow scheduler sends the updated path weightings to the corresponding source hosts so the source hosts can update their local weighting tables with the updated path weightings see and corresponding text for further details .

Column shows actions to perform when an incoming data packet s header information matches the information in columns through . The example shown in shows an embodiment where the action is to change the destination MAC address to path identifier AB1 which may be a virtual MAC address. In this embodiment centralized flow scheduler previously configured computer network s switches such that each switch knows how to route the data packet based upon matching the destination MAC address field against the virtual MAC path identifier.

Hypervisor receives data packet and passes data packet to virtual switch . Virtual switch includes data plane and control plan . In one embodiment data plane is responsible for modifying headers of data packets that are part of an existing data flow and control plane is responsible for assigning paths to new flows based upon current path weightings of available paths. As those skilled in the art can appreciate data plane may utilize fast kernel mode logic to perform datapath functions whereas control plane may utilize user mode logic to perform control functions.

Virtual switch s data plane receives data packet and determines whether header s flow identifier matches a flow identifier in flow table . When data plane identifies a match data plane modifies header in one embodiment by replacing an existing field destination MAC address with a path identifier corresponding to the matching flow identifier entry . For example data plane may replace a MAC address corresponding to host B with a virtual MAC address that computer network associates to a particular path through computer network . In turn data plane sends modified data packet to host B over computer network .

However when data plane does not locate a matching flow identifier in flow table indicating that data packet is the first data packet of a new data flow data plane passes data packet to control plane . Control plane analyzes data packet s source and destination and locates multiple path options that are available to data packet based upon the source and destination addresses. shows that local weighting table includes three path options to send data packets to host B which are paths AB1 AB2 and AB3.

As such control plane selects one of the available paths to assign to data packet s data flow based upon the path weightings and informs data plane of the assigned path. In turn data plane adds a table entry to flow table that includes data packet s flow identifier e.g. 5 tuple and the actions corresponding to the assigned path identifier. Data plane modifies header as discussed above with the new path identifier and sends modified data packet to host B over computer network . Since data plane added a new entry to flow table to correspond with the new data flow when subsequent data packets belonging to the data flow are received data plane finds a match in the flow table and performs action that allows it to retrieve the previously assigned path identifier and modify the subsequent data packets header information accordingly without passing the subsequent data packets to control plane for analysis and path assignment.

At the centralized flow scheduler loads master weighting table with source host information destination host information available path information that includes the links comprising the paths and an initial random path weighting see and corresponding text for further details .

At the centralized flow scheduler identifies available paths corresponding to each of hosts and sends the corresponding path information including the initial path weightings to each of hosts . In turn each of hosts s virtual switch e.g. virtual switch loads the path information in their corresponding local weighting tables e.g. local weighting table .

The centralized flow scheduler monitors network traffic through computer network and measures link utilization rates. The centralized flow scheduler determines whether computer network includes any highly utilized links such as by comparing the link utilization rates with a pre determined threshold decision . If no highly utilized links are detected decision branches to the No branch which branches back to continue to monitor computer network .

On the other hand if the centralized flow scheduler detects a highly utilized link decision branches to the Yes branch whereupon the centralized flow scheduler identifies forwarding paths that include the highly utilized link . For example and referring to the centralized flow scheduler may determine that link s35 is a highly utilized link and identifies paths AB1 AB2 and CB3 as using link s35.

At the centralized flow scheduler computes path weightings for the identified forward paths. For each identified forward path in one embodiment the centralized flow scheduler uses the following formula to compute the path weightings cost links in congested links in path weight 1 cost 

where wand ware pre defined weightings based upon how aggressively to avoid congestion versus the minimum number of links. In one embodiment when wis chosen to be higher than w then the congestion avoidance is preferred over reducing path length. In this embodiment a longer path may be assigned lower cost than the smaller paths with more congested links. Conversely if wis set to be higher than w then path length minimization is weighted more heavily than congested link avoidance. In practice wand wweightings are configured by the network administrator based on the desired balance between reducing number of links hops and avoiding congested links.

In one embodiment the centralized flow scheduler normalizes the calculated path weightings for the non highly utilized paths and normalizes the weightings for a particular source host destination host combination. Referring to the path weightings for host A to host B are AB1 0.7 AB2 0.2 and AB3 0.1 which sum to 1. When the centralized flow scheduler updates a path weighting for one of the paths e.g. AB2 the centralized flow scheduler may adjust the path weightings for the other two paths so the sum of the three path weightings still result in 1.

At the centralized flow scheduler identifies the hosts corresponding to the updated path weightings and sends the updated path weightings to identified hosts. In turn the hosts update their local weighting tables with the updated path weightings. As such when the hosts receive data packets for a new data flow the hosts use the updated path weightings to determine which path to assign to the new data flow see and corresponding text for further details .

The centralized flow scheduler determines whether to continue monitoring computer network s link utilizations decision . If centralized flow scheduler should continue to monitor computer network s link utilizations decision branches to the Yes branch which loops back to monitor link utilizations and update path weightings accordingly. On the other hand of the centralized flow scheduler should terminate computer network monitoring decision branches to the No branch whereupon processing ends at .

At the data plane checks flow table for a rule that matches the received data packet. For example the data plane may match the data packet s 5 tuple with a flow table entry specifying the same 5 tuple information. A determination is made as to whether a matching rule was identified in flow table decision . If flow table includes a flow table entry with a matching rule decision branches to the Yes branch whereupon the data plane performs an action included in the matching flow table entry such as modifying the data packet s destination MAC address with a specific virtual MAC address.

On the other hand if flow table does not include an entry that includes a matching rule decision branches to the No branch whereupon the data plane passes the data packet to control plane at . Control plane processing commences at whereupon the control plane receives the data packet from the data plane at . At the control plane analyzes multiple path options and their path weightings in local weighting table that correspond to the data packet s data flow and selects a path for the data flow based upon the analysis .

At the control plane stores a flow table entry in flow table which includes a rule flow identifier information and an action to perform re write destination MAC address based upon a path identifier of the selected path . At the control plane passes the data packet back to the data plane and a determination is made as to whether to continue processing decision . If control plane processing should continue decision branches to the Yes branch which loops back to wait for more data packets from the data plane. This looping continues until the control plane should terminate at which point decision branches to the No branch whereupon control plane processing ends at .

Referring back to the data plane the data plane receives the data packet from the control plane at and modifies the data packet s header as discussed above by updating the path identifier in the header. A determination is made as to whether the data plane should continue decision . If data plane processing should continue decision branches to the Yes branch which loops back to receive data packets from virtual machines. This looping continues until the data plane terminates at which point decision branches to the No branch and ends at .

Centralized flow scheduler monitors link utilization rates of the software defined computer network and determines the link between switch and is a high utilization link. As such centralized flow scheduler identifies paths using the high utilization link e.g. paths and and updates path weightings accordingly. In turn centralized flow scheduler sends path weighting updates and to host A and host D respectively. As a result host A and host D may select a different path for new flows that don t utilize the high utilization link between switches and .

Northbridge and Southbridge connect to each other using bus . In one embodiment the bus is a Direct Media Interface DMI bus that transfers data at high speeds in each direction between Northbridge and Southbridge . In another embodiment a Peripheral Component Interconnect PCI bus connects the Northbridge and the Southbridge. Southbridge also known as the I O Controller Hub ICH is a chip that generally implements capabilities that operate at slower speeds than the capabilities provided by the Northbridge. Southbridge typically provides various busses used to connect various components. These busses include for example PCI and PCI Express busses an ISA bus a System Management Bus SMBus or SMB and or a Low Pin Count LPC bus. The LPC bus often connects low bandwidth devices such as boot ROM and legacy I O devices using a super I O chip . The legacy I O devices can include for example serial and parallel ports keyboard mouse and or a floppy disk controller. The LPC bus also connects Southbridge to Trusted Platform Module TPM . Other components often included in Southbridge include a Direct Memory Access DMA controller a Programmable Interrupt Controller PIC and a storage device controller which connects Southbridge to nonvolatile storage device such as a hard disk drive using bus .

ExpressCard is a slot that connects hot pluggable devices to the information handling system. ExpressCard supports both PCI Express and USB connectivity as it connects to Southbridge using both the Universal Serial Bus USB the PCI Express bus. Southbridge includes USB Controller that provides USB connectivity to devices that connect to the USB. These devices include webcam camera infrared IR receiver keyboard and trackpad and Bluetooth device which provides for wireless personal area networks PANs . USB Controller also provides USB connectivity to other miscellaneous USB connected devices such as a mouse removable nonvolatile storage device modems network cards ISDN connectors fax printers USB hubs and many other types of USB connected devices. While removable nonvolatile storage device is shown as a USB connected device removable nonvolatile storage device could be connected using a different interface such as a Firewire interface etcetera.

Wireless Local Area Network LAN device connects to Southbridge via the PCI or PCI Express bus . LAN device typically implements one of the IEEE . standards of over the air modulation techniques that all use the same protocol to wireless communicate between information handling system and another computer system or device. Optical storage device connects to Southbridge using Serial ATA SATA bus . Serial ATA adapters and devices communicate over a high speed serial link. The Serial ATA bus also connects Southbridge to other forms of storage devices such as hard disk drives. Audio circuitry such as a sound card connects to Southbridge via bus . Audio circuitry also provides functionality such as audio line in and optical digital audio in port optical digital output and headphone jack internal speakers and internal microphone . Ethernet controller connects to Southbridge using a bus such as the PCI or PCI Express bus. Ethernet controller connects information handling system to a computer network such as a Local Area Network LAN the Internet and other public and private computer networks.

While shows one information handling system an information handling system may take many forms. For example an information handling system may take the form of a desktop server portable laptop notebook or other form factor computer or data processing system. In addition an information handling system may take other form factors such as a personal digital assistant PDA a gaming device ATM machine a portable telephone device a communication device or other devices that include a processor and memory.

The Trusted Platform Module TPM shown in and described herein to provide security functions is but one example of a hardware security module HSM . Therefore the TPM described and claimed herein includes any type of HSM including but not limited to hardware security devices that conform to the Trusted Computing Groups TCG standard and entitled Trusted Platform Module TPM Specification Version 1.2. The TPM is a hardware security subsystem that may be incorporated into any number of information handling systems such as those outlined in .

While particular embodiments of the present disclosure have been shown and described it will be obvious to those skilled in the art that based upon the teachings herein that changes and modifications may be made without departing from this disclosure and its broader aspects. Therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this disclosure. Furthermore it is to be understood that the disclosure is solely defined by the appended claims. It will be understood by those with skill in the art that if a specific number of an introduced claim element is intended such intent will be explicitly recited in the claim and in the absence of such recitation no such limitation is present. For non limiting example as an aid to understanding the following appended claims contain usage of the introductory phrases at least one and one or more to introduce claim elements. However the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles a or an limits any particular claim containing such introduced claim element to disclosures containing only one such element even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an the same holds true for the use in the claims of definite articles.

