---

title: Managed execution environment for software application interfacing
abstract: Some embodiments are directed to controlling interactions between a host software program and a computer system by providing a managed execution environment running within the host software program. In one embodiment, a computer system integrates a managed execution environment within a host software program. The computer system uses the managed execution environment to interact with one or more features of the host software program. The managed execution environment includes interface controls configured to interface between the computer system and the host software program. The compute system alters one or more of the various software program features based on code that is identified in downloaded content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170857&OS=09170857&RS=09170857
owner: Microsoft Technology Licensing, LLC
number: 09170857
owner_city: Redmond
owner_country: US
publication_date: 20131112
---
This Application is a continuation of U.S. patent application Ser. No. 11 614 945 filed Dec. 21 2006 which will issue as U.S. Pat. No. 8 584 147 on Nov. 12 2013 which is incorporated herein by reference in its entirety.

Computers are used all over the world to perform a wide variety of tasks. Computers perform these tasks by processing software code which contains commands that are interpreted or compiled and executed by the computer. Software code is typically written by a developer using one or more scripting or programming languages. Many software programs are designed to interact with and process code and or scripts written by other software developers. Such programs however often limit the types of scripts and or code with which the software programs can interact. This is done primarily for reasons of compatibility and security.

One example of a software program designed to interact with code written by other developers is an internet browser. Internet browsers are designed to read files that describe the contents and layout of a web page e.g. a Hypertext Markup Language HTML file and display the web page according to the layout described in the file. The web page may include scripts such as those written in JAVASCRIPT other text or references to graphics files or objects such as ADOBE SHOCKWAVE or MICROSOFT ACTIVEX elements. The code for such scripts and references to objects and other elements can be embedded directly in the HTML file. Most browsers are designed to be able to read and display web pages that have incorporated a plurality of scripts objects and other elements although this may involve the installation of updates and or plug ins to properly display some objects.

Increasingly there is a demand for easy to use fast loading customized web pages. This demand has led to the development of new browser based code implementations for processing and displaying web pages. One example of such an implementation is a scripting language that combines JavaScript and Extensible Markup Language XML the merger of which form Asynchronous JavaScript and XML AJAX . AJAX is commonly used to develop complex software functions used by browsers to generate and display complex dynamic web pages. Such complex functions often result in large files frequently in the hundreds of kilobytes range. Such large files often take extensive amounts of time to download and or process.

Furthermore scripting languages such as JavaScript XML and AJAX have limited capabilities in comparison with other full fledged programming languages such as C C and Visual Basic. Versatile programming languages such as these are much better suited for building complex programming interactions between software programs. Many times however browsers and other applications designed to read and implement code written by other developers are geared toward running scripts and are not designed to run code written in high level languages such as C C and Visual Basic.

Embodiments of the present invention are directed to controlling interactions between a host software program and a computer system by providing a managed execution environment running within the host software program. In one embodiment a computer system integrates a managed execution environment within a host software program. The computer system uses the managed execution environment to interact with one or more features of the host software program. The managed execution environment includes controls configured to interface between the computer system and the host software program. The managed execution environment alters one or more of the various software program features based on code that is identified in downloaded content.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention are directed to controlling interactions between a host software program and a computer system by providing a managed execution environment running within the host software program. In one embodiment a computer system integrates a managed execution environment within a host software program. The computer system uses the managed execution environment to interact with one or more features of the host software program and alters one or more of the various software program features based on code that is identified in downloaded content. The embodiments of the present invention may comprise a special purpose or general purpose computer including various types of computer hardware as discussed in greater detail below.

Embodiments within the scope of the present invention also include computer readable media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable media can comprise physical or recordable type computer readable media including RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to carry or store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Additionally when information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is also properly termed a computer readable medium. Combinations of the above should also be included within the scope of computer readable media.

Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

Host software program may be any type of software program that can be configured to run on client computer system . Host software program includes host software program features . Host software program features includes three features A B and C. It should be noted that the number of host software program features illustrated was chosen arbitrarily and may include more or less than three features. A host software program feature may include any type or portion of functionality that is useful to host software program . For example if host software program was a word processor a feature might be a thesaurus a spell checker a tables wizard or any other piece of functionality within the word processing program. Client computer system includes not only host software program but also other software programs . These other software programs may also be any type of software program that can be configured to run on client computer system .

Host software program also includes managed execution environment . The term managed execution environment as it is used herein refers to interface controls configured to interface between a computer system and a host software program. For example in some embodiments managed execution environment may include controls configured to interface between client computer system and host software program . The interface controls may be used to regulate communication between client computer system and host software program .

Furthermore managed execution environment includes functions downloaded content and code generating module . Functions may include any type of software function including a script an executable assembly file or merely a function within an assembly file. Downloaded content may include any type of content that may be downloaded from another computer system and or computer network. Such content includes but is not limited to text graphics media e.g. movies audio video clips etc. scripts functions or any other content that may be downloaded. Code generating module may be configured to generate code including text scripts or entire functions. Code may be generated in response to downloaded content as will be explained in greater detail below.

Client computer system also includes declarative representation . A declarative representation as used herein is a representative model of an object s structure or layout. More specifically a declarative representation may be a model representing how a user intends to alter the object s structure or layout. For example a user may create a declarative representation of a document object model which is used to describe the structure or layout of an HTML web page. The declarative representation may depict how the user intends to alter the web page s document object model and thus affect how the web page will ultimately be displayed.

Client computer system also includes application programming interface . Application programming interface as the term is used herein includes any means for interfacing between an application and an operating system. Furthermore application programming interface may interface with any software application whether the application was included with the operating system or was installed separately.

Method includes an act of integrating the managed execution environment within the host software program act . For example managed execution environment may be integrated within host software program in client computer system . The term integrating as used herein may refer to either installing and running managed execution environment in host software program as a plug in. Or alternatively managed execution environment may already be a part of host software program and integrating may refer to calling managed execution environment s functionality from within host software program . In both cases managed execution environment is integrated and run within host software program .

Although in some embodiments managed execution environment may be designed to run as a plug in to host software program in some alternative embodiments managed execution environment may be designed to run as a standalone program. Thus for example a computer user using client computer system would be able to open managed execution environment as an application separate from host software program . However whether run as a plug in or as a standalone application managed execution environment performs substantially the same functions.

Method includes an act of using the managed execution environment to interact with one or more features of the host software program the managed execution environment comprising interface controls configured to interface between the computer system and the host software program act . For example managed execution environment may be used to interact with feature A of host software program where managed execution environment comprises interface controls configured to interface between client computer system and host software program . As explained above managed execution environment may be used to interact with host software program features . In one embodiment where host software program is a word processing program software feature A may represent a thesaurus feature B may represent a spell checker and feature C may represent a tables wizard. Managed execution environment may be used to interact with these or other features of the word processing program.

Method includes an act of the managed execution environment altering one or more of the various host software program features based on code that is identified in downloaded content act . For example managed execution environment may alter software program feature A based on code that is identified in downloaded content e.g. downloaded content . As explained above downloaded content may include any type of text graphics scripts functions or any other type of content that may be downloaded from a local or remote computer system via a network. The identified code may include any type of computer code including scripts functions compiled assemblies or other form of computer code.

In some embodiments managed execution environment may load the identified code initialize the code inside of host software program and transfer control to entry points in managed execution environment . In some cases processing the code in such a manner provides access to objects within the software program features such as the root document the immediate parent content element and current uniform resource identifier URI of the software feature e.g. software features .

In other embodiments a computer user may generate a declarative representation of the managed execution environment s interaction with various software program features. For example a user may generate a declarative representation of managed execution environment s interaction with host software program features B and C. In some embodiments a software program developer may use a graphical tool to generate a declarative representation of the managed execution environment s interaction with for example host software program features B and C. In some cases the declarative representation may represent the desired outcome of the interaction between managed execution environment and host software program features e.g. B and C .

In some embodiments managed execution environment automatically downloads software updates used to update the managed execution environment . Additionally or alternatively managed execution environment may automatically download software updates used to update any of the software program features . In other embodiments managed execution environment may receive a function call from one of the various host software program features for a function provided by the managed execution environment e.g. function . Thus managed execution environment may provide functions to host software program features and may receive functions as code identified in downloaded content thus illustrating the bidirectional nature of the interface provided by managed execution environment . Furthermore in some embodiments managed execution environment may be configured to generate code on demand based on the downloaded content.

Method includes an act of integrating the managed execution environment within the internet browser application act . For example managed execution environment may be integrated within an internet browser application. As explained above with regard to host software program an internet browser application may include managed execution environment as part of the application or alternatively managed execution environment may be added on separately as a plug in using the browser s extensibility model. In some embodiments an internet browser application may act as a host software program as represented by host software program in client computer system .

Method includes an act of using the managed execution environment to interact with a web page including a document object model the document object model representing a structural outline of the web page including programmatically accessible elements the managed execution environment comprising interface controls configured to interface between the computer system and the internet browser application act . For example managed execution environment may be used to interact with web page including document object model . Document object model may represent a structural outline of web page including references to web page elements . Managed execution environment may include interface controls configured to interface between client computer system and the internet browser application.

Method includes an act of dynamically altering the document object model based on code that is identified in downloaded content act . For example document object model may be dynamically altered based on code that is identified in downloaded content . In some cases the code is referenced in downloaded content the reference is identified and the code is downloaded on demand.

In some embodiments elements referenced by document object model are dynamically altered. An element is any object that is either part of or referenced in the web page HTML file. In one example web page may contain reference to element and reference to element as well as other references to other elements not shown in FIG. it should be noted that any number of references to elements can exist in web page . Normally when an internet browser application accesses a document object model to determine the layout of the web page the document object model does not alter the layout of the elements and the elements are displayed according to where they are referenced in the web page. For example in a web page that includes HTML and references to elements the element is ultimately displayed based on where the reference is placed in the web page s HTML e.g. reference to element would be displayed above reference to element because precedes in the web page layout. Continuing this example the document object model would normally identify where each element was placed in the web page HTML and display it unaltered as shown passing through unaltered arrow .

However in some embodiments of the present invention elements may be altered as shown passing through altered arrow because the document object model has been altered see act above . Altered document object model may alter one or more characteristics of the element. For example altered document object model may alter where on the web page the element is displayed the color or style of the element the font size or any other element attribute. In some embodiments elements that are dynamically altered include those elements that are accessible via a scripting application interface. In other embodiments the dynamically altered elements include the web page s HTML or XML itself.

In some embodiments one or more additional programming frameworks are used to dynamically alter the document object model. For example a programming framework that allows for dynamic language support may be used. Thus when the document object model is used to render the web page the programming framework that allows for dynamic language support can display the text of the web page in a different language.

Method includes an act of displaying the web page using the altered document object model act . For example web page may be displayed on display using altered document object model . In cases where elements are displayed unaltered those elements shown passing through unaltered document object model the result is the displaying of unaltered elements Element and Element . Additionally or alternatively in cases where elements are altered before they are displayed those elements shown passing through altered document object model the result is the displaying of altered elements Element B and Element B . Thus if the elements referenced in reference to element and reference to element were an ActiveX object and a JavaScript script respectively in the former case the elements would be processed and displayed unaltered from the original layout and in the latter case the elements would be processed and displayed in a layout altered from the original e.g. the JavaScript script may now appear before the ActiveX object in the web page or they may be in different colors different fonts different sizes etc. .

In some embodiments a declarative representation of the managed execution environment s interaction with browser content may be generated by managed execution environment . As explained above a declarative representation is a representative model of an object s structure or layout. In one embodiment the declarative representation is a model that represents the desired altered layout of the document object model.

In some embodiments it may be possible to use multiple managed execution environments to dynamically generate and or alter the content of a web page e.g. web page . For example one managed execution environment may be assigned to each element in the web page so as to increase processing speed and decrease web page loading time. In some embodiments rich network connectivity may be integrated with the internet browser application or other host software program . In some cases this would greatly enhance the usability and functionality of the host software program.

In other embodiments the managed execution environment may receive a function call from one of the programmatically accessible elements of the web page for a function provided by the managed execution environment . As mentioned above managed execution environment may include functions that can be provided to other web page elements or software program features . Managed execution environment includes a bi directional interface that allows the environment to interact with host software program other software programs and host software program features as well as allow those same programs and features to communicate with and request information from the managed execution environment .

Thus embodiments of the present invention are directed to controlling interactions between a host software program and a computer system by providing a managed execution environment running within the host software program. In one embodiment a computer system integrates a managed execution environment within a host software program uses the managed execution environment to interact with features of the host software program and alters one or more of the various software program features based on code that is identified in downloaded content.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

