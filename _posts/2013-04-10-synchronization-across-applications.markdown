---

title: Synchronization across applications
abstract: Mechanisms of synchronization between different types of application, using communication between client and server devices, are described. As an example, synchronization between a script running in a browser and a native application may be implemented using a lock service on a server. Mechanisms for synchronization also allow for applications on different client devices to be automatically synchronized. Identifiers may be automatically used by a synchronization mechanism implemented by a service. Identifiers may include user, machine, application or other identifiers. Messages and protocols between the client devices and server services to create, use, and destroy a lock are described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396043&OS=09396043&RS=09396043
owner: Microsoft Technology Licensing, LLC
number: 09396043
owner_city: Redmond
owner_country: US
publication_date: 20130410
---
The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

Embodiments herein relate to synchronization of applications. Computer related methods and systems described herein may be used to synchronize activity such as blocking one application from further processing while allowing another application to process. Embodiments herein may also be used for other computer related purposes such as for allowing one application to process updates or modifications to an operating system while another process waits for those changes or allowing one application to wait for another application on another device to finish processing of a task.

Synchronization has focused on synchronizing processing threads within an application or process. A problem with existing synchronization methods may be that they do not offer a convenient way to synchronize a web application with an activity of a native application. Similarly existing synchronization mechanisms such as mutexes semaphores critical sections and other multi threading lock mechanisms may not solve a problem of synchronizing applications across devices.

A technical advantage of synchronization across different types of application is that each type of application may be very different and have advantages associated with that type of application and yet synchronization may be performed so that those applications inter operate even if direct communication mechanisms between the applications are not possible. By way of example a first application may be desirable as a web application because it may comprise real time updates on a server. In contrast a second application may be preferable as a native application because it may update an operating system. The web application may need to synchronize with the native application and under that circumstance a synchronization mechanism may be advantageous.

Another technical advantage of synchronization between different types of applications is that it indirectly solves communication between those applications. For example where an application on one machine is not able to easily communicate with another application on another machine or even another application on the same machine a synchronization process using an intermediate lock service is able to transfer information about the progress of one application with tasks or whether the other application is busy. In particular this technique may be useful when security permissions may restrict the ability of one application to communicate with another. For example it may be difficult for a web client application operating within a security sandbox to communicate directly with a native application running on an operating system and so an embodiment locking mechanism may provide a framework for coordination of tasks.

Many of the attendant features will be more readily appreciated as the same become better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below in connection with the appended drawings is intended as a description of present examples and is not intended to represent the only forms in which the present examples may be constructed or utilized. The description sets forth functions of the examples and sequence of steps for constructing and operating the examples. However the same or equivalent functions and sequences may be accomplished by different examples.

Referring to operating environment includes a network . Network may be the internet or network may comprise an intranet and the like. A lock service may communicate with computing devices and over network . An example computing device is described below in connection with . Computing device may include any type of personal computer such as a desktop computer mainframe computer and the like. Computing device may run operating systems such as MICROSOFT WINDOWS GOOGLE CHROME APPLE IOS or any other computer operating system. Tablet computing device includes slate or tablet devices that may be personally carried and used for browsing online services. Examples of a tablet computing device may include a MICROSOFT SURFACE APPLE IPAD SAMSUNG GALAXY computers or any other tablet computing device that may be capable of being personally carried. Mobile computing device may include smart phones or other mobile computers. Mobile computing device may be similar to a tablet computing device or may have a smaller screen. Examples of mobile computing devices are smart phones running MICROSOFT WINDOWS PHONE operating system APPLE IPHONES or mobile phones running GOOGLE ANDROID or any other phone running any other operating system. Each computing device may be used to either access the lock service described herein.

Still referring to operating environment includes an exemplary server or servers configured to provide lock service . Lock service may send binary data text data XML data Hypertext Markup Language HTML Simple Object Access Protocol SOAP or other messages or web service calls in any protocol to the client devices via network . Lock service may be configured to communicate with a data source . Data source may store the data related to the state of the locks held for applications running on client devices and data source may also hold associated data with the locks such as one or more identifiers associated with a lock.

Additionally computing device may also have additional hardware features and or functionality. For example still referring to computing device may also include hardware such as additional storage e.g. removable and or non removable including but not limited to magnetic or optical disks or tape. Storage is illustrated in by storage . In one embodiment computer readable instructions to implement embodiments of the invention may be stored in storage . Storage may also store other computer readable instructions to implement an operating system an application program such as an applications that run on the device and the like.

Embodiments of the invention will be described in the general context of computer readable instructions being executed by one or more computing devices. Software may include computer readable instructions. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects methods properties application programming interfaces APIs data structures and the like that perform particular tasks or implement particular data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

The term computer readable media as used herein includes computer storage media. Computer readable storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer readable storage media may be non transient. Memory and storage are examples of computer storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices solid state drives or NAND based flash memory. Computer readable storage media does not consist of modulated data signal. Any such computer storage media may be part of device .

The term computer readable media may include communication media. Device may also include communication connection s that allows the device to communicate with other devices such as with other computing devices through network . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared and other wireless media.

Computing device may also have input device s such as keyboard mouse pen voice input device touch input device gesture detection device laser range finder infra red cameras video input devices and or any other input device. Input device s may include input received from gestures or by touching a screen. For example input device s may detect swiping the screen with a finger or one or more gestures performed in front of sensors e.g. MICROSOFT KINECT . Output device s includes items such as for example one or more displays projectors speakers and printers.

Those skilled in the art will realize that computer readable instructions may be stored on storage devices that are distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments of the invention. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Communication connection and network may be used to facilitate communication between computing device and computing device . Network may include the internet intranet or any other network. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device . Display representations may be sent from computing device to computing device or vice versa. Those skilled in the art will also realize that all or a portion of the computer readable instructions may be carried out by a dedicated circuit such as a Digital Signal Processor DSP programmable logic array and the like.

Embodiments of the invention provide a mechanism for locking different applications across different types of application. Optionally the locks may be per user per machine or per application. A lock service allows different application types to block or wait for each other in a synchronized manner even when one application is a web application and another is a native application and even if the applications are not able to communicate directly. A lock may also be used when a resource including for example an input output device such as printer connected home appliance such as a loud speaker refrigerator freezer etc. needs to be shared among multiple applications which attempt to accomplish tasks that may not be completely dependent on one another. This may be used for example when an application desires to track the number of other applications users machines or devices that are accessing the resource. A single lock may maintain states for more than one entity resource just as libraries may keep multiple copies of a book. That means more than one yet a limited number of applications may be allowed to hold the lock and do work with the associated resources while one or more other applications wait for the resource.

Referring to an example architecture for the use of the lock service is depicted. A native client application is illustrated as running on a client device . Native client application may be an application that calls operating system methods Application Programming Interfaces APIs it may be a component of an operating system such as a driver hardware on client device or any other component. Client application may perform any function. In one embodiment client application performs operations on the operating system to fix or repair the operating system. Client device may also run a web browser or other internet application. The web browser may run a client browser component . Browser component may comprise a browser plug in script code e.g. JavaScript or any other component of the web browser .

Still referring to security or other permissions may block browser component from directly communicating directly with . Under that circumstance a mechanism may be needed for client application to synchronize and or coordinate with the actions of client browser component . Client application may communicate directly with lock service or to the lock service via a web server . Lock service may run on the client device or on a separate server device. Similarly client browser component may communicate with web server . Although client browser component may communicate with web server client browser component may not be receiving web pages rather for example it may be using a protocol and receiving informational messages via the protocol. In turn in the embodiment depicted by web server may communicate with lock service .

Still referring to client application may communicate directly with lock service . Lock service may allow for creation updates deletion and status checks of locks. Locks allow applications on a device or across devices to synchronize actions. For example client application may create a new lock via a call to lock service and the status of the lock may then be acquired such that other applications wait for the lock to be released. For example after client application creates and acquires a lock the client browser component may poll for the status of the lock via web server or the status of the lock may be pushed to the client browser component from web server or any other server. Web server may acquire the status of the lock via lock service and return the status to client browser component . Browser component may wait until the lock is released.

For two or more applications to be synchronized and pass information about a lock each application needs an identifier associated with the lock. The lock may be identified via use of a single entity in association with the lock such as a user identifier or machine identifier. Alternately either application may pass the identity to the other application before the lock has been created. As another alternative the first requestor of the lock may pass the identity to the subsequent caller after the lock has been created if the identity is specified by the lock service. The identity of the lock may be passed from a client application through invocation of URI to client browser component from client browser component through the invocation of download and launch of data carrying application executable to client application or from yet another entity sending the identity to client browser component and client application .

A lock service may also be configured to allow a threshold number of applications to proceed on one device. The lock service may also be configured to allow a certain number of applications to proceed with one or more tasks on a certain number of machines. Still further the lock service may allow an application to proceed based on the application type or based on any characteristics that may be associated with an application such as for example a file type being used file or memory resources being used by the application protocols being used or some other characteristic . Still further the lock service may block another application based on its type characteristics associated with the application and or based on the machine it is running on or the user identifier associated with the lock.

It is to be appreciated that this lock mechanism may be used for any purpose such as to update repair components when only one update repair at a time is desirable. Equally the lock mechanism may be used for other process such as ensuring that a user only accesses content on one device at a time. For example content may include copyrighted material such as videos audio files documents or other material that is desirable to control access. Such restriction of copyrighted material using a lock embodiment as presented herein may be used by an electronic library or an electronic store such as a web site operated by AMAZON.

Browser may share the security token returned to it via a message to client . As just one example a script running in the browser may encode the token into a launch parameter before launching the client it may perform this for example by storing the launch parameter in a shared location or within a filename of the client application that it launches. As an alternative the security token may be stored by the web server or other server and retrieved by the client upon startup or after periodic polling. Notably in calls are shown as synchronous calls but any message call may also be an asynchronous call.

In the example of a browser is depicted as starting an action and then client creates a lock subsequently. show only some possible sequence diagrams it is to be appreciated that many other embodiments are possible. For example request may create a lock and then launch a client and client may then use or set the status of the lock.

Still referring to however client is depicted as creating the lock such that other applications or devices can be synchronized with the lock. In the example of client creates the lock by sending message to lock service . The message may include an application user machine or other identifier with it. While an application user or machine identifier may be included it is noteworthy that this does not imply the lock is only associated with the application user or machine. The lock may be associated with a resource such as access to Application Programming Interfaces or other processing or computational resources. Still further it may be preferable to pass other data along with the identifier such as state data to be used in association with the lock or resource being locked.

Optionally lock service may use the identifier to send a token to security service in a message . Security service may forward a request to lock database to validate the token. Lock database may return message and security service may return the success or failure in message to lock service . If the token appears valid then lock service may create the lock in association with the application user machine or other identifier by sending message to the lock database . Lock database may store an identifier of the lock in association with the application user machine or other identifier and then return message indicating successful creation of the lock. Lock service may then return message to client indicating the lock has been created. Message may include an identifier associated with the lock so that client may determine status and perform other operations related to the lock by referral to the lock identifier.

Turning to after the client has established a lock it may update progress on the client action set status of the lock or otherwise add update or remove data associated with the lock. Client may send message to lock service in order to update progress. As before lock service may verify a security token via sending a request to security service to verify one or more identifiers within a security token. Security service may verify the token by calling lock database via message . Lock database may return message to security service and in turn security service may return a message to lock service .

Assuming the validation of the token was successful lock service may save the progress of client by sending a progress and or status indicator received from client to the lock database in message . The progress and or status would be saved by lock database in association with the identifier for the lock. After saving status and or progress lock database may return information via message to lock service and lock service may return a success or failure code to client via messages and respectively.

Still referring to the other application on the device or on another device such as browser may inquire as to the status and or progress of the other client . Browser may send message to get the status of the lock to web server . Web server may request the status from lock service via message . Lock service may retrieve the status from lock database and the status and or progress may be returned via return messages and back to the browser . Although illustrates browser retrieving a lock status via message another method of updating status may be for a server such as web server to send the status of the lock to the browser by use of a push mechanism such as via a WebSocket protocol. A technical advantage of pushing the status from the server may be that the browser does not need to spend processor cycles polling for status that may not have changed.

Turning to after client has finished its tasks such as for example finishing repairs and or updates to an operating system client may delete the lock. Client may call the lock service with a delete lock message request. As an optional alternative client may send the message to web server which in turn may send a message to the lock service . Optionally lock service may verify a token comprising an identifier with security service via a request . Security service may request the lock database to validate the token via message and verification returned via messages and . Once verified lock service may send a request to actually delete the lock in message . After the lock database has deleted the lock it may return a message indicating a successful deletion. In lock database the lock records optionally in association with an application user machine or other identifier may be deleted.

Still referring to and considering the activity of application at step the client application receives notification that it has obtained a lock. Optionally at step the application may perform work. Typically the work performed in step may involve operations that would lead to problems if performed by two parallel processes without synchronization. As just one example updates to an operating system on a device may be done by one process. At step after some work has been performed the application may send a request to update progress of the task and associate a progress with the lock. The request may update the progress itself or the status of the lock. In the case of the application that is progressing with tasks this allows other applications to get the status. In the case of the other applications that are waiting for the lock to be released it may allow the other applications to display a progress bar or other notification mechanism on when the process will be finished. At step application may send a notification to terminate the lock and processing of the method for application may stop at .

Still referring to the actions performed by another application operating concurrently with application may be described. At step the notification of the progress or status of the lock may be received indicating that a lock was started by application . At step the application may display part of the application in a locked state. This may be for example via an icon glyph status bar or other display mechanism. Equally it may via an entire web page or via a progress indicator. The user interface may prevent a user from progressing with a subset of actions or an entire set of actions. At step application may receive notification of the progress of the lock or work performed by the other application . Application may display the progress as a progress bar percent complete or other suitable progress indicator. At step the application may receive a notification that the lock has ended. At step application may terminate display of the locked portion of user interface. Processing of the method for application may optionally terminate at step .

In the example of updates on the status of a lock or progress of a task may be performed by receiving information from a server. For example in the example of application may poll the server at intervals to retrieve status. Another method that may be used however is that application may actively receive status messages about the lock or progress of the work via a bi directional protocol. For example by using the WebSocket protocol or any other bi directional communication protocol application may be able to receive messages without having to poll for data at incremental intervals.

After an application has received a notification of a lock it may suspend further processing at least of one or more tasks. The application may display at least a part of a user interface in a locked state. For example the application may display a progress bar showing the progress of the other application. The application may also display an icon or glyph indicating that another application is processing.

The first application and second application that are each using the lock may be any one of a script run by a browser a browser plug in a browser a native application an operating system component a device driver any other software component a managed component or a hardware component. A managed component may include without limitation a Common Language Runtime program a Perl script a PHP script POWERSHELL SILVERLIGHT JAVA JavaScript ANDROID or WINDOWS applications. An application may be any process e.g. an executable or it may be a library e.g. a dynamic link library or a static library . Each application may perform the same or different tasks. For example a first application may be a web application for managing repair of components on a computer and the second application may be an application for modifying settings of one or more components on the first computer. In the example just described it may be desirable for the first application to initiate repair of the device wait for the second application to complete repairs and then release the user interface for further tasks only after the second application is completed.

After a second application has completed a task and released a lock the first application may receive a message indicating the ending of the lock. The first application that was waiting for the lock to be released may display an indication that the task is completed in the user interface.

A feature of the locking mechanism is that it may be used across machines. A first machine may wait for a lock while a task may be completed on a second machine the second machine different than the first machine. To facilitate cross machine locking a request may comprise an identifier of an application an identifier of a machine an identifier of the user using a machine or other identifier. In that way the information related to the lock may be obtained by just sending the identifier. For example if a user is logged in to 3 devices the user may request status of a single lock that is associated with the single user identifier. This feature may be especially advantageous when a user owns multiple devices and one machine at a time needs an update modification or deletion. For example if a user has a mobile phone e.g. a GOOGLE ANDROID phone or APPLE phone or any other phone a tablet device e.g. ANDROID tablet or MICROSOFT WINDOWS SURFACE tablet or any other tablet and a personal computer e.g. a computer running RED HAT LINUX or a personal computer running any other operating system then the user may only get access to reading a book or viewing a movie on one device at a time. Under that circumstance a user identifier may be automatically uploaded such that a lock to the resource the electronic item is created the other devices are locked while a user views the electronic item on a device.

Still referring to an application boundary is illustrated to show that the server may receive requests from different applications. At step the server may receive a status request for the lock from another application. The request received at step may include the user application machine or other identifier within the request. At optional step a security token associated with the identifier received in may be obtained and at step the lock information may be obtained by using the lock identifier in conjunction with the security token and or the user machine application identifier received in the request. At step the status or progress information associated with the lock is retrieved from the database and returned to the requesting client application. Processing of requests by different clients by the server may continue until the lock has been destroyed and processing finishes at .

The lock service may receive a first request to start a lock from a first application on a first machine the request including a user identifier. The lock service may then send and receive messages with other services such as a security service and a database to create a lock in association with the user identifier. Alternately the lock service may just maintain an internal data structure to hold lock information and create the lock. The lock service may send a first message indicating a start of the lock in association with the user identifier back to the first machine.

Subsequent to creation of the lock the lock service may receive a second request for a status of the lock from a second application on a second machine the second request also including the user identifier. The lock service may look up the lock in association with the user identifier and send a second message indicating the status of the lock associated with the user identifier back to the second application. The second message further comprises an indication of the progress of an application on the first machine.

Requests for a lock to be created may involve sending a security message to a security service the security message including the user identifier receiving a security token from the security service in return and sending a database message to a lock database the database message including the security token.

The requests and messages may be made via any protocol such as without limitation Hypertext Transfer Protocol HTTP Simple Object Access Protocol SOAP Representational State Transfer REST protocol Transfer Control Protocol Internet Protocol TCP IP WebSocket protocol or a web service call.

Various operations of embodiments of the present invention are described herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment of the invention.

The above description of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the embodiments to the precise forms disclosed. While specific embodiments and examples of the invention are described herein for illustrative purposes various equivalent modifications are possible as those skilled in the relevant art will recognize in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification. Rather the following claims are to be construed in accordance with established doctrines of claim interpretation.

