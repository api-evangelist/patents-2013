---

title: Methods and apparatus for software license management
abstract: Systems and techniques for managing software licensing are described. When a computing system service request is made, the request is intercepted and software information that may be more or less continuously updated in a managed computing environment is examined to determine the effect of the service request on software usage by the system. The software usage represented by the service request is evaluated based on licensing information to determine license usage by the system and changes in license usage based on the service request, and license usage information is determined based on the software usage and the licensing information. The license usage information may be used in connection with a system of rules to govern actions such as reporting licensing usage or allowing or preventing the use of software based on whether use of the software will violate licensing requirements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08997245&OS=08997245&RS=08997245
owner: International Business Machines Corporation
number: 08997245
owner_city: Armonk
owner_country: US
publication_date: 20130829
---
This patent application is a continuation of U.S. patent application Ser. No. 13 673 104 filed on Nov. 9 2012 which is incorporated herein by reference in its entirety to provide continuity of disclosure.

One or more embodiments of the present invention relate generally to software license management. More particularly the invention relates to the use of data available from infrastructure management processes to track and control software licenses.

Modern large enterprises typically employ data processing resources that may be substantial and widely distributed. Such enterprises generally license software under contracts that require the organizations to monitor their own usage of the software and purchase and maintain the number of licenses needed for the number of instances of the software being used. Vendors reserve the right to audit an organization s software use and under licensing can lead to back payments and penalties. Years ago computing environments changed relatively slowly. A computer was purchased and software was installed on the computer either from media purchased from a publisher or from copies made by a purchaser. A single installation was associated with a single computer and vice versa and an installation remained installed until removed or the computer was taken out of service.

Now however especially in the case of large enterprises software installations may be in a constant state of flux. Software instances may be installed that have the capacity to accommodate many users with the number of licenses required depending on a changing number of users. Software instances may be concentrated on servers and made accessible to users through the servers with the number of licenses needed changing as the number of users changes. In addition software instances may appear and disappear without changes to computing hardware or installation using an external physical medium. A particular software instance may not even be associated with an actual physical machine instead a server may host a number of virtual machines that may appear and disappear as needed with each installation of software on a virtual machine representing a software instance that must adhere to the license terms under which the software is provided to the enterprise. The more frequently the software environment changes the more difficult it is for conventional techniques such as scanning of computers for software instances to accurately identify all instances. For example if system scans are performed periodically a virtual machine using a software instance may appear and disappear between scans. Numerous other difficulties attend license management in large rapidly changing systems.

In one embodiment of the invention a method comprises intercepting a computing system service request identifying at least one software usage change needed to fulfill the computing system service request and identifying at least one software license requirement resulting from the identified at least one software change.

In another embodiment of the invention an apparatus comprises at least one processor and memory storing computer program code. The memory storing the computer program code is configured to with the at least one processor cause the apparatus to at least intercept a computing system service request identify at least one software usage change needed to fulfill the computing system service request and identify at least one software license requirement resulting from the identified at least one software change.

In another embodiment of the invention a computer readable medium stores a program of instructions. Execution of the program of instructions by a processor configures an apparatus to at least intercept a computing system service request identify at least one software usage change needed to fulfill the computing system service request and identify at least one software license requirement resulting from the identified at least one software change.

In another embodiment of the invention a method comprises creating a software usage event based on analysis of at least one intercepted computing system service request wherein the software usage event is created based at least in part on stored software information updated at each computing system service request and creating a software license usage event based on the software usage event wherein the software license usage event is further based on stored license information and stored license rule information.

In another embodiment of the invention an apparatus comprises at least one processor and memory storing computer program code. The memory storing the computer program code is configured to with the at least one processor cause the apparatus to at least create a software usage event based on analysis of at least one intercepted computing system service request wherein the software usage event is created based at least in part on stored software information updated at each computing system service request and create a software license usage event based on the software usage event wherein the software license usage event is further based on stored license information and stored license rule information.

In another embodiment of the invention a computer readable medium stores a program of instructions. Execution of the program of instructions by a processor configures an apparatus to at least create a software usage event based on analysis of at least one intercepted computing system service request wherein the software usage event is created based at least in part on stored software information updated at each computing system service request and create a software license usage event based on the software usage event wherein the software license usage event is further based on stored license information and stored license rule information.

In another embodiment of the invention a method comprises receiving a computing service request submitted to a cloud computing service updating software inventory based on the computing service request and updating software license usage based on the updated software inventory.

In another embodiment of the invention an apparatus comprises at least one processor and memory storing computer program code. The memory storing the computer program code is configured to with the at least one processor cause the apparatus to at least receive a computing service request submitted to a cloud computing service update software inventory based on the computing service request and update software license usage based on the updated software inventory.

In another embodiment of the invention a computer readable medium stores a program of instructions. Execution of the program of instructions by a processor configures an apparatus to perform at least receive a computing service request submitted to a cloud computing service update software inventory based on the computing service request and update software license usage based on the updated software inventory.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

Embodiments of the present invention recognize that scans of computing environment suffer from a number of deficiencies. They interfere to some extent with the efficiency of a system in which they are used and are therefore carried out only periodically. Large modern computing environments are typically in a continual state of change and license management in such environments is subject to a number of difficulties. For example server machines may be missed software may be identified incorrectly with incorrect server and client components being reported or with incorrect software editions being reported. Installation instances may be miscounted with double counting false positives and false negatives occurring. Collection of license metric values may be incomplete.

In addition scanning techniques face various challenges with respect to virtual machine instances. For example scanning and reporting may outlast the lifetime of a virtual machine instance or termination of a virtual machine instance may not be detected promptly. Scanning may require simultaneous access to domains that are isolated from one another with for example information relating to software inventory being in a domain controlled by a customer and information relating to physical processor technology being in a domain controlled by a cloud provider. Software with different license types may not be differentiated in a virtual machine. Embodiments of the present invention recognize that these and other problems may be overcome by using information relating to managed systems whose design includes the collection of information relating to changes to the computing environment.

Embodiments of the present invention recognize that large computing environments are generally known as managed environments in which all changes to the organization s computing resources are performed through controlled processes known as change management processes. In a managed environment under change management control only authorized system personnel are able to perform such actions as software installation and removal. Users who desire software installation must submit a request typically through an automated system. System personnel will receive the request perform the service and mark the request as complete. The present invention recognizes that in a managed environment up to date information relating to the state of the computing resources of the system is available and is continually updated as changes are made. Analysis of this information can allow for accurate tracking of software instances and correlation with licenses.

Software instances are created through machine provisioning and software installation which in a modern environment can be performed under automated control. Many organizations operate in what is known as a cloud environment in which users are provided with the services and software they need without any particular regard from a user s perspective to which physical hardware is providing the service. Many cloud environments regularly commission virtual machines with desired configurations as they are needed and decommission them when they are no longer needed. Installation of software on a virtual machine creates a software instance for which a license should be obtained and various other operations also require licenses.

The updating of computing services in a managed environment as noted above provides data identifying each step that is taken. Information that can be used to determine what licensing is required is collected as part of the managed environment operation. With respect to a virtual machine such information includes characteristics of the virtual machine software running on the machine and even the uses to which the software is being put. For example software manifests for image assets and software bundles are captured in topology files. Virtual machine provisioning and deprovisioning operations are tracked with information collected on image asset identifier start and end time computer type hypervisor identifier and customer accounts. Deployment of software bundles on virtual machine instances may pass through a common application programming interface.

In one or more embodiments of the present invention therefore information generated in carrying out computing infrastructure management processes is gathered and processed to automatically discover license usage and support the license compliance process.

Determining the license obligations of a large enterprise may involve the analysis of hundreds of thousands of software instances with the license required for a particular instance being determined by many factors such as the machine on which the software is installed other software of which the installed software may be a component a contract under which the instance was purchase and the purpose of the instance being used. Other considerations may include the software family of which the instance is a member whether the instance is part of a bundle of applications licensed together and similar considerations.

In management based software operations information relating to the context of software in the inventory of an enterprise is known. For example such information includes information identifying bundle relationships contracts and operations served by the software. Embodiments of the present invention encode such information in structures accessed by management system workflows used to provision virtual machine images and install software and software bundles. Such techniques allow an accurate software inventory to be maintained at all times. If data is also maintained on the licenses held by an enterprise licenses and their terms can be matched with software instances or with proposed creation or installation of software instances. In one or more embodiments of the invention license management mechanisms are integrated with a computing services management system and so has access to software image and software bundle catalogs and is able to determine what software is included in each image and bundle. License management mechanisms according to one or more embodiments of the invention also have access to information specifying the characteristics of each virtual machine and so are able to completely and accurately generate software inventory records.

The presently illustrated example shows the provisioning of virtual machines and the installation of an additional software component on one of the virtual machines.

Upon a request from a user submitted through the cloud portal a computing management event is configured. The event may be a provision deprovision event a software bundle install uninstall event or other comparable event. Virtual machine provisioning events and are initiated to fulfill the request presented by the event . The provisioning events and call on an image retrieval event a software bundle retrieval event and an instance type retrieval event to provide software components to be installed on virtual machines and . The events and furnish the provision engine . In the exemplary provisioning illustrated here instances of a software product are installed on the virtual machines and . At a later time the software product is installed on the virtual machine . A software install event calls on the needed information to be furnished to the provision engine by means of events and .

The various transactions involving the service request retrieval of images and information and software installation involve information exchanges that can be used to understand the software changes being undertaken. This understanding of the software changes and to provide notice that the changes may affect or be affected by licensing requirements. In one or more embodiments of the invention service requests and events performed in fulfilling the requested services are examined to determine that software license usage is or may be occurring to allow for analysis of the service requests and events in terms of knowledge of the license inventory and terms and the identification of actions that should be taken based on the software changes and how they affect or are affected by the license inventory and requirements.

Mechanisms according to one or more embodiments of the invention therefore intercept software provisioning requests and collect information on which analysis may be performed to identify potential changes in license usage.

To the environment the software usage analysis environment adds a service request event interceptor a software product information retriever an instance type resolver and a software license usage event emitter . A service request from the cloud portal is intercepted as a service request event which is captured by the service request event interceptor a software product information retriever an instance type resolver and a software license usage event emitter . Information flows are software product information retrieval A from the image catalog and B from the software bundle catalog and an instance type definition retrieval from the instance type catalog . The software product information retriever instance type resolver and service request event interceptor provide information flows and to the software license usage event emitter which creates a software license usage event .

The software usage information and software license usage information generated by the analysis of the software usage information are in turn analyzed to generate information based on the software usage in terms of the organization s license inventory and terms.

One or more embodiments of the present invention may also perform license enforcement preventing installation of software components that are not covered by a license held by the organization. illustrates a license enforcement environment adding to the license analysis environment a license enforcement engine which receives a license rule action and prevents installation of a software component through for example an invalidate request event which inhibits the passing of a service request to the provision engine .

One or more embodiments of the present invention may also perform automatic license usage report generation. illustrates a report generation and reporting environment which supplements the software license analysis environment with a license usage archiver a license usage event archive suitably implemented as a database a report generation rule database and a report generation engine . The report generation engine receives information from the license usage event archive and is guided by the rules taken from the report generation rule database to create a license usage report event which generates reports suitably periodically or upon the occurrence of a triggering event such as an occurrence of noncompliance.

At step a request such as a cloud service request submitted through a cloud portal is intercepted. At step license usage is computed and at step pre action rules are applied. If the rules do not allow the action to proceed the process skips to step and finishes. If the rules do allow the actions to proceed the process proceeds to step and the requested service is performed. At step software inventory and license information is updated. At step post action rules are performed and the process finishes at step .

At step a call is received to evaluate license rules and return a directed action based on the rules. If the evaluation is called for by neither a request to provision a virtual machine nor a request to perform an install the process proceeds to step a request to provision a virtual machine the process proceeds to step and the action is allowed. If the evaluation is called for by a request to provision a virtual machine the process proceeds to step and a virtual machine image identifier is extracted. At step a software product list is retrieved from a repository such as an image catalog. Such an image catalog is typically maintained as part of a managed system. The process then skips to step .

If the evaluation is called not called for by a provisioning request but is called for by a request to perform installation of a software bundle or a component that may belong to a software bundle the process proceeds to step and a software bundle identifier is extracted. At step a software product list is retrieved from a software bundle catalog.

From step forward the process proceeds the same way in response to a provisioning request or an installation request. At step an instance type is extracted. At step mapping is retrieved that relates a licensing model to license consumption values. At step a license usage event is generated by applying the identified software usage to the licensing model and using the mapping to determine the license consumption value. The license usage event identifies whether a change in license usage would result from the change request and the nature of the change if any. At step the license usage event is evaluated based on the license rules and at a rule action is returned directing a particular disposition of the change request in light of the license usage event.

A License Management Descriptor Table maps change management actions to a sequence of LMDs. Multiple LMDs are required because a service request may involve multiple software changes e.g. multiple products being installed and a sequence is required because the changes may need to be applied in some order e.g. an upgrade may require software removal followed by software installation .

At step a service request type is identified from a request event. At step LMDs for the service request type are identified and at step an LMD list pointer is updated to the first LMD in the list. If the pointer has passed the end of the list the process stops at step . If the pointer has not passed the end of the list the process proceeds to step and the LMD selected by the pointer is read. At step a license management action is read suitably from a license management action table based on a service request type and at step the license management action is executed. The action may for example be an insert software inventory record action an update software inventory record action or a delete software inventory record action. At step license reconciliation is performed and at step the pointer is moved to the next LMD in the LMD list. The process then returns to step for a determination of whether the pointer has passed the end of the LMD list.

At step a determination is made if the machine is among the authorized assets. If not an error is returned. If the machine is among the authorized assets the process proceeds to step and a determination is made if information identifying the software appears in a repository storing information describing members of a collection of software products their components and means to discover the members of the collection and their components. If not an error is returned. If information identifying the software appears in the repository the process proceeds to step and a category attribute is applied. The process proceeds to step and a bundle attribute is applied. The process then proceeds to step and a software specific attribute is applied. The process then proceeds to step and a context specific attribute is applied. The process returns at step .

The alert application defines alert characteristics which govern the generation of an alert instance and the reporting rules govern the generation of periodic and on demand reports .

In one or more embodiments of the invention workflows are coordinated between software management and license management. illustrates information flows from software management operations here represented as a service request manager change management workflow entity cloud infrastructure management entity and license management entity . A user change request from the service request manager directs the change management entity to mark a workflow beginning . In one or more embodiments of the invention the change management entity issues a request for a list of asset management approved software. In one or more other embodiments of the invention no such request need be issued instead software changes may be made whether or not a particular software component appears on an approved list. After the list is requested or in the absence of a request the change management workflow entity issues a perform change request to the cloud infrastructure management entity followed by a check status of change request to the cloud infrastructure management entity . The change management workflow entity performs a verification that changes are confirmed and all machine and software information is complete. The change management workflow entity then provides the license management engine with a request to update deployed software inventory based on what changes were performed with the request including information describing the changes.

Reference is now made to for illustrating a simplified block diagram of details of an electronic device which may be implemented as a data processing device . The data processing device may operate so as to record receive store or process software usage event or license data or other information used in carrying out one or more embodiments of the present invention. Any number of devices such as the data processing device may be used and may each may be configured as called for by the particular design of a system in which they may be used.

The data processing device includes a data processor DP and a memory MEM that stores data and one or more programs PROGs .

At least one of the PROGs is assumed to include program instructions that when executed by the associated DP enable the electronic device to operate in accordance with the exemplary embodiments of this invention as was detailed above in detail.

In general the exemplary embodiments of this invention may be implemented by computer software executable by the DP or by hardware or by a combination of software and or firmware and hardware. The interactions between the major logical elements should be obvious to those skilled in the art for the level of detail needed to gain an understanding of the broader aspects of the invention beyond only the specific examples herein. It should be noted that the invention may be implemented with an application specific integrated circuit ASIC a field programmable gated array FPGA a digital signal processor or other suitable processor to carry out the intended function of the invention including a central processor a random access memory RAM read only memory ROM and communication ports for communicating between the various devices.

The MEM may be of any type suitable to the local technical environment and may be implemented using any suitable data storage technology such as semiconductor based memory devices magnetic memory devices and systems optical memory devices and systems fixed memory and removable memory. The DP may be of any type suitable to the local technical environment and may include one or more of general purpose computers special purpose computers microprocessors digital signal processors DSPs and processors based on a multi core processor architecture as non limiting examples.

At least one of the memories is assumed to tangibly embody software program instructions that when executed by the associated processor enable the electronic device to operate in accordance with the exemplary embodiments of this invention as detailed by example above. As such the exemplary embodiments of this invention may be implemented at least in part by computer software executable by the DP of the data processing device or by hardware or by a combination of software and hardware.

Various embodiments of the present invention take advantage of information that is routinely collected and updated in a managed system and examining that information to determine software usage and changes in software usage taking place in a computing system. Each request for a change in software usage may be used to determine its impact on license usage and also to determine if license usage should be reported or used as a basis for allowing or preventing fulfillment of the request.

The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

