---

title: Correlating data from multiple business processes to a business process scenario
abstract: The present disclosure involves systems, software, and computer-implemented methods for providing process intelligence by correlating events from multiple business process systems to a single business scenario using configurable correlation strategies. An example method includes identifying a raw event associated with a sending business process and a receiving business process, identifying a sending business process attribute associated with the sending business process and a receiving business process attribute associated with the receiving business process, determining a correlation strategy for associating the raw event with a business scenario instance, the determination based at least in part on the sending business process attribute and the receiving business process attribute, and generating a visibility scenario event from the raw event according to the correlation strategy, the visibility scenario event associated with the business scenario instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037525&OS=09037525&RS=09037525
owner: SAP SE
number: 09037525
owner_city: Walldorf
owner_country: DE
publication_date: 20130301
---
This application is related to co pending U.S. patent application Ser. No. 13 782 508 filed on Mar. 1 2013 the entire contents of which are hereby incorporated by reference.

The present disclosure involves systems software and computer implemented methods for providing process intelligence by correlating events from multiple business process systems to a single business scenario using various correlation strategies.

Process intelligence solutions generally allow analysts a particular view into data generated by running business process scenarios. Business process analysts may use this information to optimize a particular business process scenario. Data generated by different business process systems may be in different formats and include different identifiers. It can thus be difficult to identify data from the different business process systems that is associated with the particular business process scenario.

The present disclosure involves systems software and computer implemented methods for providing process intelligence by correlating events from multiple business process systems to a single business scenario using configurable correlation strategies. In one general aspect an example method includes identifying a raw event associated with a sending business process and a receiving business process identifying a sending business process attribute associated with the sending business process and a receiving business process attribute associated with the receiving business process determining a correlation strategy for associating the raw event with a business scenario instance the determination based at least in part on the sending business process attribute and the receiving business process attribute and generating a visibility scenario event from the raw event according to the correlation strategy the visibility scenario event associated with the business scenario instance.

While generally described as computer implemented software embodied on non transitory tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and implementations of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

The present disclosure involves systems software and computer implemented methods for providing process intelligence by correlating events from multiple business process systems to a single business scenario using various correlation strategies.

Process intelligence solutions allow users to observe the behavior of a business process scenario. The business process scenario may include running business processes from multiple different business process systems. For example a business process scenario may include actions performed by multiple different systems including but not limited to Enterprise Resource Planning ERP systems Customer Relationship Management CRM systems Supply Chain Management SCM systems Product Lifecycle Management PLM systems Manufacturing Execution systems message oriented middleware systems BPM Workflow systems Web and legacy applications and other suitable systems. One such process intelligence solution is described in co pending U.S. application Ser. No. 13 674 770 which is hereby incorporated by reference.

The process intelligence solution may provide users and other systems with views into the behavior of the business process scenario by analyzing flow events received from the multiple business process systems. Flow events indicate a specific transition from one state to another state and therefore describe a change in the lifecycle of a flow or flow step of a business process. For example a flow event may be generated by a business process when the process starts when the process terminates when data is received when a task completes when an error occurs or at any other suitable time. As business scenarios may span multiple different business process systems a process intelligence solution may correlate flow events from different end to end process participants to a particular business scenario instance in order to provide a view of the behavior of the business scenario across the various systems. In some cases however there may not be a single correlation identifier that can be used across disparate business process systems.

The present disclosure describes a way of providing a configurable set of correlation strategies based on the type capability or other attributes of the business system. The solution provides a set of correlation logic that is able to detect the type capability or another attribute of the interacting business process participants and apply the correct strategy. In some cases there may be a one to one mapping of a combination of the sending and receiving business process attributes to a correlation strategy. Multiple correlation strategies may also be mapped to a single combination of sending and receiving business process attributes. In some cases the multiple correlation strategies may be associated with priorities where the highest priority strategy determined to be appropriate for a particular flow event is used. The correlation strategies may also include code fragments to be executed by the system to correlate the flow event to a particular business scenario such as for example by performing subsequent lookups or queries to perform the correlation. A fallback correlation strategy may also be configured and executed in cases where no appropriate correlation strategy can be identified. In some cases this fallback correlation strategy may involve examining context fields associated with the flow event. A correlation failure notification may also be configured to notify a user or external system that an event could not be correlated and instruct the user or system that additional configuration is necessary in order to correlate the event to a business scenario instance. In some instances a flag or other identifier may be associated with the event with a list of flagged or otherwise identified events kept for later review and or manual correction.

The example system may include a process intelligence server . At a high level the process intelligence server comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the environment . Specifically the process intelligence server illustrated in is responsible for receiving retrieving or otherwise identifying events from various event sources such as event sources and and processing those events to produce one or more views allowing an analyst to investigate various properties and performance of one or more running business applications. In some cases the process intelligence server may receive requests from one or more clients . These requests may include requests for data from various layers requests for transient data layers or views and configuration requests related to the processing and generation of the various data layers.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a process intelligence server environment can be implemented using two or more servers as well as computers other than servers including a server pool. Indeed process intelligence server may be any computer or processing device such as for example a blade server general purpose personal computer PC Mac workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further illustrated process intelligence server may be adapted to execute any operating system including Linux UNIX Windows Mac OS Java Android iOS or any other suitable operating system. According to one implementation process intelligence server may also include or be communicably coupled with an e mail server a Web server a caching server a streaming data server and or other suitable server.

The process intelligence server also includes an interface a processor and a memory . The interface is used by the process intelligence server for communicating with other systems in a distributed environment including within the environment connected to the network for example the client as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated environment .

As illustrated in the process intelligence server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the process intelligence server . Specifically the processor may execute the functionality required to receive and respond to requests from the client as well as to receive flow events from the event sources and and process these flow events to produce the various data layers required for the various views configured in the process intelligence server .

The illustrated process intelligence server also includes a process intelligence engine . In some cases the process intelligence engine may produce and organize data for use in the process intelligence server . This may include receiving business process events from the event sources and storing those events in a data store such as database and processing the events to produce various layers corresponding to views of the running business processes. In some instances the process intelligence engine is implemented as a software application executing on the process intelligence server . In other instances the process intelligence engine is implemented as a collection of software applications executing on one or more process intelligence servers as part of a distributed system. In still other instances the process intelligence engine is implemented as a separate hardware and or software component separate from the process intelligence server . The process intelligence engine may include one or more different components such as those described below. These components may be separate software libraries separate software applications separate threads or separate dedicated hardware appliances. In some implementations certain components may be omitted or combined or additional components may be added.

In the depicted implementation the process intelligence engine includes a data staging component a data view component and a process visibility component . In some instances the data staging component may be operable to receive business process events from the event sources and and perform processing on the events to interpolate extract and or derive additional information from them based on the events themselves and or configuration information relating to the event sources and the running business processes.

In some implementations the data staging component may be operable to transform events from a particular event source into a common format used by the process intelligence server . For example events received from an event source in business process modeling notation BPMN format may be transformed into a normalized format before storage in database . Further events received from an event source in a business process execution language BPEL format may be transformed into the same normalized format so that the correlation component of process intelligence server can operate on them in a common manner. This harmonization or normalization of events in different formats from various event sources may allow a unified view of a business process running across different business process systems.

In the depicted implementation the data staging component also includes a correlation component . The correlation component may perform correlation of events from different systems or from different business process instances to produce a unified view of the activity of a business scenario. As discussed previously a business scenario is a collection of one or more business process instances that execute and or interact with each other. For example a first process instance running on a first system may perform a task and then transfer control to a second process instance running on a second system. The correlation component may correlate events generated by different processes and process instances in different systems to a single business scenario instance. By correlating the event data in this manner the correlation component may provide a view into the overall operation of a business process rather than a view into only the portion of the process handled by a certain system. In some cases this correlation is driven by configuration data such as correlation strategy data discussed below . Therefore correlation behavior for events between different process instances can be dynamically determined and updated by an analyst or by input from other systems.

In some cases data staging component may also perform more complex operations on the received event data. In some cases the data staging component may derive additional events beyond what is received from the event sources and . For example the data staging component may derive from the receipt of a stop event for a certain process instance that a subsequent process instance responsible for the next task in a business scenario has started and may thereby create a start event for that process instance. In another case the data staging component may filter out events from particular process instances that are determined not to be important. The data staging component may determine which events are important by examining configuration data provided by an analyst or by an external system such as for example the observation projects metadata . For example an analyst may decide that informational status events produced by certain process instances do not contain any useful information about the given business scenario and therefore may choose to configure the data staging component to filter these events. In other cases events may be filtered by many different criteria including but not limited to the source of the event the type of the event the process instance associated with the event the task to which the event is associated one or more actors associated with the event or any other appropriate criteria.

In some implementations the data staging component may store the results of its operations in the database or in some other data store. In other implementations the data staging component may perform its processing on demand when a request for specific data is received. In other cases the data staging component stores the event data received from the event sources and in the database . In still other instances another component is responsible for storing the received event data in the database and the data staging component accesses the event data for processing through the database .

Process intelligence engine may also include a data view component . In some cases the data view component may produce various views into the stored data according to configuration information such as the observation projects metadata the views or any other appropriate configuration data. The views produced by the data view component may be either transient i.e. produced in response to a request or persistent i.e. pre computed and stored . The data view component may produce its view by operating on data output and or stored by the data staging component by operating directly on events received from the various event sources and or by a combination of methods.

The process intelligence engine may further include a process visibility component that provides an interface for configuration and control of the features of the process intelligence server . Specifically the process visibility component allows an analyst an administrator an external system or other suitable user to configure the various views data processing data correlation event derivation and other features of the process intelligence server . In some implementations this configuration is performed by creating editing updating and or deleting the observation projects metadata . The process visibility component may include a web interface allowing a user to specify the observation projects metadata . The process visibility component may also include an application programming interface API allowing external programs and systems to do the same. The process visibility component may also be distributed on both the process intelligence server and the one or more clients as part of a client server application.

The process visibility component may further allow a user or external system to specify various business scenarios for analysis by the system. To this end the process visibility component may present a list of business process instances and allow selection and grouping of the instances into business scenarios representative of larger processes that span multiple instances and or business process systems. By allowing the identification of these business scenarios the process visibility component allows the system to be configured to present complex views of the data that are not practical by manually examining data from one system in isolation.

Regardless of the particular implementation software may include computer readable instructions firmware wired and or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The process intelligence server also includes a memory or multiple memories . The memory may include any type of memory or database module and may take the form of volatile and or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including caches classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the process intelligence server . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others.

As illustrated in memory includes or references data and information associated with and or related to providing multiple process intelligence views related to running business applications. As illustrated memory includes a database . The database may be one of or a combination of several commercially available database and non database products. Acceptable products include but are not limited to SAP HANA DB SAP MaxDB Sybase ASE Oracle databases IBM Informix databases DB2 MySQL Microsoft SQL Server Ingres PostgreSQL Teradata Amazon SimpleDB and Microsoft Excel as well as other suitable database and non database products. Further database may be operable to process queries specified in any structured or other query language such as for example Structured Query Language SQL .

Database may include different data items related to providing different views of process intelligence data. The illustrated database includes one or more tables one or more views one or more stored procedures one or more service artifacts one or more Web Applications one or more observation projects metadata a set of event data one or more data layers one or more business scenarios and a set of correlation strategy data . In other implementations the database may contain any additional information necessary to support the particular implementation. In some implementations the various illustrated components in the database may be created by translating an existing business scenario definition as described in co pending application entitled Translating Business Scenario Definitions Into Corresponding Database Artifacts which is hereby incorporated by reference.

The tables included in the illustrated database may be database tables included as part of the schema of database . The tables may also be temporary or transient tables created programmatically by requests from the clients or from any other source. In some implementations the structure of tables may be specified by SQL statements indicating the format of the tables and the data types and constraints of the various columns. Further the tables may include any indexes necessary to allow for rapid access to individual rows of the tables. These indexes may be stored along with the tables or may be stored separately in the database or another system.

The views included in the illustrated database may be pre computed or transient views into the data stored in the database . Generally a view is query that is specified and stored in the database for quick retrieval. In some instances the views will be specified in the same manner as standard database tables with additional options for specifying whether the view is persistent i.e. pre computed and stored in the database or transient i.e. computed when a request for the view is received . In other implementations the views may be stored separately from the database as scripts or other programs operable to query the database and present the data required by the view.

As illustrated database also includes stored procedures . Generally a stored procedure is a sub routine that is accessible to clients and programs that access a relational database. For example a database might include a stored procedure called max that determines the maximum value in a returned series of integers or a procedure called sum that produces a total when given a series of integers. Stored procedures might also be used to process data already stored in the database or to process data as it is being inserted into the database. In some cases the stored procedures may be used to process the event data received from event sources and in order to produce one or more data layers representing the various views provided by the process intelligence server . In other cases the stored procedures may be used to generate any transient views provided in response to requests from clients by the process intelligence server .

Database may also include service artifacts . In some implementations the service artifacts may include intermediate data formats used in processing the event data to produce the various layers. The data staging component and the data view component may produce various service artifacts as part of their processing. In some implementations these service artifacts may include temporary or permanent database tables views files or other data.

In illustrated database may include Web Applications . In some implementations Web Applications may include web applications for exposing data stored in the database to external users and or systems. The Web Applications may be implemented in any appropriate technology such as for example HTML5 Javascript PHP or any other technology or combination of technologies. In some instances the Web Applications are applications relating to access in memory and other types of databases.

Illustrated database may also include observation projects metadata . As discussed previously observation projects metadata may be used by the process intelligence engine in staging and processing the event data received from the event sources as well as providing views of the data at various levels. In some implementations the observation projects metadata is produced by the process visibility component as a result of a user or external system specifying attributes of a business scenario to be observed.

Database may also include event data . As discussed previously event data may be received retrieved identified replicated or otherwise obtained from the one or more event sources and . In some instances the event data is stored in an unmodified format as it is received from event sources and . This unmodified format may be referred to as raw event data. In some implementations this raw event data is the basis for the staging processing correlation and ultimately data view processing performed by the process intelligence engine . In other implementations the system performs initial normalization or harmonization steps prior to inserting the event data into the database so the event data is not truly raw. Such processing may include translation filtering derivation or any other suitable processing.

In some instances the event data can be used as the basis for deriving additional data layers . In such cases the event data is processed to produce one or more data layers containing data useful for analyzing the respective business scenarios identified to the system. In some cases the data layers may include references to the original event data from which they were derived. For example the event data may include an event representing the start of a particular process instance. In such a case the event may include a unique identifier such as an event ID. A data layer that is produced by processing the event data may include an event corresponding to the original event from the event data . The new event may include additional derived or external information about the event such as for example an identifier representing the business scenario associated with the event. In such cases the new event in the data layer may include the event ID of the original event. In this way the data layer may allow a user or external system to drill down to a lower layer in order to obtain a different view of a business process. Further different layers in the one or more data layers may also build off one another in this same manner such that a layer may contain a reference to the associated data at the layer from which it was derived. In some cases including these references between the layers makes it possible for the system to transition between the different layers allowing a user or analyst to view data representing the operation of the business scenario in many different ways from a single system.

Illustrated database may also include business scenarios . In some cases business scenarios may define groups of business process instances that interact as part of a given business process. The business process instances may be executed on different business process systems on the same business process system or on a combination of the two. In some instances the business scenarios may also define particular events from different business process instances as important or relevant for additional analysis. In other instances the business scenarios may be defined by a user who manually identifies the different business process instances and or events involved in a particular business scenario. In other cases the business scenarios may be defined automatically by a computer system by examining event data from the event sources and by executing according to rules defined by a user or by any other appropriate mechanism or combination or mechanisms.

Illustrated database may also include correlation strategy data . In some cases the correlation strategy data may define mechanisms for correlating received flow events such as those included in event data with particular business scenario instances such as those included in business scenarios . The correlation strategy data may be used by correlation component to determine how to correlate a particular flow event to a business scenario instance. In some cases the correlation strategy data may include one or more database tables storing mappings from business process attributes to correlation strategies. In some cases these correlation strategies may be a single identifier to be used for correlation see e.g. . The correlation strategies may also include composite identifiers including multiple identifiers to be used for correlation. The correlation strategies may also be a prioritized list of correlation strategies see e.g. . In such a case the correlation component may analyze each correlation strategy in light of the received flow event to determine if the strategy is appropriate. The correlation component may also analyze each correlation strategy in the list and determine which of the correlation strategies is best suited to correlating the received flow event.

In some cases the correlation strategies included in the correlation strategy data may also include code fragments to be executed to correlate the received flow event. In some cases these code fragments may be stored in a prioritized list and processed as described above. The code fragments may also be included in a prioritized list alongside other single and composite identifiers. In some cases the code fragments define instructions to be executed by the correlation component in order to correlate the received flow event. The code fragments may also be executed by other components of the process intelligence system to perform correlation of the events. The code fragments may be instructions written in any suitable programming language including but not limited to PYTHON SQL C C VISUAL BASIC JAVA PERL JAVASCRIPT or PHP. The code fragments may also be pre compiled executable programs that when executed perform the required correlation steps. The code fragments may also be directives specific to the correlation component that instruct the correlation component to perform pre defined methods or operations to perform the required correlation.

The illustrated environment of also includes a client or multiple clients . Client s may be any computing device operable to connect to or communicate with at least the process intelligence server via the network using a wireline or wireless connection. In general client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with environment of .

There may be any number of clients associated with or external to environment . For example while the illustrated environment includes one client alternative implementations of environment may include multiple clients communicably coupled to the process intelligence server and or the network or any other number suitable to the purposes of environment . Additionally there may also be one or more additional clients external to the illustrated portion of environment that are capable of interacting with the environment via the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

Illustrated client is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example client may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the process intelligence server or client itself including digital data visual information or a graphical user interface GUI .

Example environment may also include or be communicably coupled to one or more event sources and . In some implementations these event sources are business process platforms producing events representing various aspects of running business processes such as for example state transitions error conditions informational messages failure conditions processes starting process terminating and other events and indications related to the running processes. The event sources and may provide a stream of these events to the process intelligence server in the form of messages sent across network . In some implementations these event messages are sent in real time or pseudo real time while in other implementations the messages are cached by the event sources and and sent in large groups. In still other implementations the process intelligence server polls the event sources and requesting any new events and the event sources and respond with any events produced since the last poll. In another implementation the event sources and communicate events by calling methods exposed through an API associated with process intelligence server . In still other cases the process intelligence server is integrated into the event sources and . In some instances the event sources and may insert events directly into database or may communicate events from associated databases into database through the use of replication protocols and or methods.

The event sources and may produce business process events in different formats such as for example BPEL BPMN advanced business application programming ABAP or any other appropriate format or combination of formats. In some implementations the event sources and will communicate the events to process intelligence server in a normalized event format different from their native event formats by performing a translation prior to sending the event. In some instances the process intelligence server may access and or retrieve event data directly or indirectly from the data sources and .

The example system may include or be communicably coupled to an event source system . In some implementations the event source system may be identical or similar to the event sources and discussed relative to while in other implementations the event source system may be different. As illustrated the event source system may be communicably coupled to a flow event replication store . The flow event replication store may store events from the event source system in a raw format similar to event data in . In other implementations the flow event replication store is a replicated table included in both the event source system and the example system that is kept synchronized by the database engines of the respective systems. The flow event replication store may include one or more tables which may be similar to or identical in structure to the tables discussed relative to .

The illustrated system also includes a flow event structure pre processing and transformation component . In some cases the flow event structure pre processing and transformation component may be communicably coupled to the flow event replication store . In some instances the flow event structure pre processing and transformation component reads raw event data from the flow event replication store and performs pre processing and transformation procedures on the event data during the process of preparing one or more data layers from the raw event data. In some instances the functionality of the flow event structure pre processing and transformation component includes or is similar to some aspect of the data staging component discussed relative to and may include normalizing or otherwise translating the raw event data stored in the flow event replication store into a common format to be processed by other parts of the system. The flow event structure pre processing and transformation component may create one or more calc. views . In some implementations these views may be identical or similar to the views discussed relative to .

The illustrated system may also include a flow event subscription check component operable to determine whether a particular event is relevant or important to any particular business scenario. If an event is deemed not to be important it may not be included in the subsequently produced data layer related to a particular business scenario. This filtering of events may occur according to the observation projects metadata or according to any other specification of which events are important to a given business scenario.

The illustrated system may also include a flow event to observation project correlation component communicably or otherwise coupled to the flow event subscription check component . The flow event to observation project correlation component may operate to correlate events from various business process instances into identified business scenarios. In some implementations the flow event to observation project correlation component performs this correlation in a manner similar to or identical to the correlation component discussed relative to .

The illustrated system may also include a first visibility information model which may also be referred to as Level 0. In some cases Level 0 is a data layer as illustrated in . Level 0 may represent a view of business scenarios as defined by an analyst using a tool to interface with the system such as the process visibility editor discussed below . In some implementations Level 0 is a persistent data layer upon which other transient upper data layers are derived. In other cases Level 0 is itself a transient layer produced on demand in response to a received request for data. In some implementations Level 0 is stored in a database such as database of . In some implementations Level 0 may produce various tables and calc view artifacts that represent various aspects of the first visibility information model .

The illustrated system may also include a second visibility information model which may also be referred to as Level 1. In some cases the Level 1 is a data layer as illustrated in . In some implementations Level 1 may be a transient data layer produced in response to a request for a specific data view. In other implementations Level 1 may be a persistent data layer. In some implementations Level 0 and Level 1 include references between one another to allow a user or analyst to drill down or drill up from one layer to another as described relative to . Using these references it may be possible for a user or analyst to access any data layer from any other data layer.

The illustrated system also includes multiple process visibility workspace views . In some implementations these views are visual representations of the data produced in the second visibility information model . The data may be presented to users or external systems through a graphical user interface GUI such as a web page. In other cases the visibility workspace views may be presented to users in the form of generated reports delivered to the user such as for example by email. In such instances the reports may be in a format readable by standard desktop applications. Such formats may include Excel Postscript PDF Word Doc Access database plain text or any other suitable format or combination of formats.

The illustrated system may also include a visibility pattern Odata service and a visibility pattern UI5 gadget . In some implementations these components may produce and present the process visibility workspace views to the user. In other implementations these components perform additional processing on the second visibility information model before presenting the information contained therein to the requesting user.

The illustrated system may also include or be communicably coupled to a process visibility editor . In some implementations the process visibility editor is a graphical or other interface that allows a user to identify and design the different data layers in order to allow the user to better view running business scenarios. In some implementations this is accomplished by allowing the user to identify the different business process instances that are included in each business scenario and by allowing the user to specify what data from a business scenario is important for them to see. For example a user may identify a first event in a first process instance to be relevant to a certain business scenario and identify a second event in a second instance as relevant to the same business scenario. In some implementations the process fragment source system provides information to the process visibility editor regarding which process instances are available and or currently running in a given business system or set of business systems. In other implementations the context source system provides information to the process visibility editor regarding which process instances are related to which business scenarios.

The illustrated system may also include stored procedures . In some cases stored procedures are similar or identical to the stored procedures described relative to while in other cases the stored procedures may be configured specifically for the illustrated system . Illustrated system may also include Odata service artifacts . In some cases the Odata service artifacts are similar or identical to the service artifacts described in while in other cases the Odata service artifacts may be configured specifically for illustrated system . Illustrated system may also include Web Applications . In some cases Web Applications are similar or identical to the Web Applications described in while in other cases the Web Applications may be configured specifically for illustrated system .

Referring to a block diagram illustrating an example system including multiple business systems and an associated correlation strategy table for correlating events from the business systems to a business scenario is illustrated. The system includes three different business process systems and . In some cases the business process systems and may be different types of business process systems interacting to perform a business scenario. The business process systems and may also have different capabilities inputs outputs or any other suitable differentiating attribute or attributes. The business process systems and may also be hosted on separate server systems while in other cases the business process systems and may be logical divisions within the same system such as different business process instances .

The illustrated implementation also includes event sent between business process system and business process system . In some cases the event is an indication of an occurrence related to business process system such as a business process instance starting or changing state. The event may also be a message sent from business process system to business process system during the interaction of two business process instances. For example a first business process instance associated with business process system may send event to a second business instance associated with business process system to communicate information related to a specific business process scenario such as information entered by a user information for processing by the second business process system or any other suitable information.

The illustrated implementation also includes event sent between business process system and business process system . Event may be similar or identical to event described above except that it is sent between different business systems. Event may be of the same type or of a different type than event . Although only two events are shown in the illustrated implementation the present disclosure contemplates that several events may be passed between the business process systems and monitored. Further events may be passed bi directionally between the various business process systems instead of uni directionally as shown in . Events may also be sent from any of the business process systems to any of the other business process systems as well as to other systems not pictured in . Events may also be sent to other external systems and monitored by the present system.

The associated correlation strategy table may be used to correlate the events and to a business scenario. The correlation strategy table is operable to map the caller and callee types of an event to a particular correlation strategy. The caller and callee types correspond to the type of the business process system that sent the event and the type of business process system that received the event respectively. Upon receipt of an event a monitoring process may consult this correlation strategy table to determine a strategy for correlating the received event to a business process. This process will be described in greater detail with respect to .

Referring to an example data format is illustrated for an example correlation strategy table. The data format may represent one or more tables within a relational object oriented or other database stored within a suitable database management system including but not limited to SAP HANA DB SAP MaxDB Sybase ASE Oracle databases IBM Informix databases DB2 MySQL Microsoft SQL Server Ingres PostgreSQL Teradata or Amazon SimpleDB. The data format may also represent a file in a file system a resource on a server rows within a spreadsheet or any other logical or physical data format suitable for the purposes of the present disclosure. Data format may include an outgoing process type column . In some cases the outgoing process type column may be replaced with a column storing capability or any other suitable attribute of a business process. Data format may also include an incoming process type column . In some cases the incoming process type column may be replaced with a column storing capability or any other suitable attribute of a business process. In some cases the outgoing process type column and the incoming process type column are used to identify a combination of process types to which a particular row in the correlation strategy table applies. For example a row with an outgoing process type of Type A and an incoming process type of Type B would apply to events sent from a business process instance of type Type A to a business process instance of type Type B. 

Data format may also include a correlation strategy column . The correlation strategy column may store an indication of a correlation strategy for events matching the combination of incoming and outgoing types for the particular row in the table. The different values this column may hold and their meanings will be discussed below relative to the example data rows.

Data format also includes three data rows and . These data rows are presented for exemplary purposes only and are not intended to limit the scope of the present disclosure or to necessarily apply to any particular scenario. Data row indicates that the identifier Passport ID within the particular event should be used to correlate events sent from process instances of Type A to process instances of Type A. Note that the incoming and outgoing process types in this example row are identical. This row applies to events sent within the same business process system either between different process instances or inside the same process instance. Data row similarly indicates that the identifier Instance ID should be used to correlate events sent from process instances of Type B to process instances of Type B. 

Data row indicates that the identifier Event ID Sequence ID should be used to correlate events sent from process instances of Type A to process instances of Type B. Identifier is a composite identifier indicating that a combination of two identifiers Event ID and Sequence ID should be used to correlate events matching this data row. In some cases composite identifiers may include three or more identifiers. Composite identifiers may also be identified using any appropriate notation in the data. In some cases additional columns rows or tables may be provided to store each identifier in the composite identifier. The composite identifier may also be indicated by a particular format of text in the correlation strategy column such as the format shown in or any other suitable format.

Referring to an example data format is illustrated for an example correlation strategy table. Data format also includes three data rows and . These data rows are presented for exemplary purposes only and are not intended to limit the scope of the present disclosure or to necessarily apply to any particular scenario. Data row indicates that an identifier from the identifier list Passport ID Instance ID Event ID within the particular event should be used to correlate events sent from process instances of Type C to process instances of Type C. In some implementations the identifier list is a prioritized list of correlation identifiers. The identifier list may be ordered from highest priority to lowest priority or the priority may be explicitly modeled such as in another column or table. In some cases a correlation process may analyze each identifier in the identifier list to determine which of the identifiers is appropriate for a particular event. For example a process may examine the first identifier in identifier list Passport ID and determine that it is appropriate for the particular event. In some cases the process may use the first appropriate identifier for correlation while in other cases the process may examine all identifiers in the list and use the highest priority identifier that is appropriate for the particular event. In some cases whether the identifier is appropriate or not is determined by examining the particular event to determine if the event contains the configured identifier. The identifier may also be determined to be appropriate by other mechanisms such as by consulting an external system additional database tables or any other suitable mechanism.

Data row indicates that the single identifier Instance ID should be used for events from process instances of Type D to process instances of Type D. Note that in some implementations different types of identifiers such as prioritized lists and single identifiers may be contained within the correlation strategy column. In other cases different rows columns or tables are used for storing the different types of identifiers. Data row indicates that the identifier list Event ID Sequence ID Instance ID should be used for events from process instances of Type C to process instances of Type D. The identifier list includes a composite identifier Event ID Sequence ID and a single identifier Instance ID . In some cases the identifier list may be processed as described above.

Referring to an example data format is illustrated for an example correlation strategy table. Data format also includes three data rows and . Data row indicates that the code fragment should be used for events from process instances of Type E to process instances of Type E. In some instances code fragment may include executable code to correlate the particular event with a business process instance. The executable code of code fragment may be executed by the system or process performing the correlation of the particular event such as correlation component from an external system at the direction of the system or process performing the correlation by the database or other system storing data row or by any other suitable system. In some cases code fragment may include instructions in any suitable programming language including but not limited to PYTHON SQL C C VISUAL BASIC JAVA PERL JAVASCRIPT or PHP. The code fragment may also be an object data structure application script applet or any other form of software.

Data row indicates that the code fragment list should be used for events from process instances of Type F to process instances of Type F. In some cases code fragment list may be organized and processed in a similar manner to identifier list where a process may loop through the different fragments in the list and evaluate whether the fragment is appropriate for correlating the particular event. Data row indicates that the hybrid list Event ID Sequence ID should be used for events from process instances of Type E to process instances of Type F. In some cases hybrid list may be organized and processed in a similar manner to identifier list where a process may loop through the different items in the list and evaluate whether the identifier or code fragment is appropriate for correlating the particular event.

Referring to a flowchart of an example method for correlating business process event data with a business scenario is shown. At a raw event associated with a sending business process and a receiving business process is identified. In some cases the raw event may be received from a business process system over a network. The raw event may also be identified by querying a database table containing events. In some cases the raw event may be in a format associated with the particular business process system in which it is generated. The raw event may also have been reformatted or normalized for processing by a monitoring system.

In some cases the raw event will be associated with the sending and receiving business processes by an identifier included in the raw event itself. The raw event may also be associated with the sending and receiving business processes by querying an external system using information included in the raw event.

At a sending business process attribute associated with the sending business process and a receiving business process attribute associated with the receiving business process are identified. In some cases the sending and receiving business process attributes are included within or associated with the raw event. The sending and receiving business process attributes may also be identified by querying an external source to retrieve attributes associated with the sending and receiving business process.

At a correlation strategy for associating the raw event with a business scenario instance is determined based at least in part on the sending business process attribute and the receiving business process attribute. In some cases the correlation strategy is determined by performing a database querying into a table associating the combination of sending and receiving business process attributes with a correlation strategy or list of correlation strategies as described relative to . The correlation strategy may also include multiple distinct correlation strategies organized into a prioritized list and associated with the sending and receiving business process attributes. These correlation strategies may include single identifiers composite identifiers code fragments macros or any other form of software instructions or identifiers.

At a visibility scenario event is generated from the raw event according to the correlation strategy the visibility scenario event associated with the business scenario instance. In some instances the visibility scenario event may be a new row in a database including some or all of the information from the raw event and one or more identifiers to correlate the visibility scenario event to a business scenario instance. In some cases the information to correlate the visibility scenario event to the business scenario instance may correspond to the correlation strategy determined at . After correlation the visibility scenario event may be used to generate various views of the business scenario instance. For example correlated visibility scenario events may be used to provide a visual representation of the operation of the business scenario instance by showing all or some of the events that have been correlated to the business scenario instance. In some cases the correlated visibility scenario events may be used to show one or more views of the operation of the business scenario instance. For example different views may be customized according to different types of analysis to provide different levels of detail.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously concurrently and or in different order than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain implementations and generally associated methods alterations and permutations of these implementations and methods will be apparent to those skilled in the art. Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

