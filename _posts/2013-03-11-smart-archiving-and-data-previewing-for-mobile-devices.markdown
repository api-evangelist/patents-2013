---

title: Smart archiving and data previewing for mobile devices
abstract: Techniques for providing data preview before recalling large data files are disclosed. In one aspect, a data file is made accessible while being offline by converting the data file from a native format to a preview format, storing the data file in the preview format in a primary storage that is locally available and moving, after the conversion to the preview format, the data file in the native format to a secondary storage. When a viewing request is received for the data file, the data file in the preview format is displayed to fulfill the viewing request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09020890&OS=09020890&RS=09020890
owner: CommVault Systems, Inc.
number: 09020890
owner_city: Tinton Falls
owner_country: US
publication_date: 20130311
---
The present application claims priority to and the benefit of U.S. Provisional Application No. 61 618 125 filed Mar. 30 2012 which is hereby incorporated herein by reference in its entirety.

A primary copy of data is generally a production copy or other live version of the data which is used by a software application and is generally in the native format of that application. Primary copy data may be maintained in a local memory or other high speed storage device that allows for relatively fast data access if necessary. Such primary copy data is typically intended for short term retention e.g. several hours or days before some or all of the data is stored as one or more secondary copies for example to prevent loss of data in the event a problem occurred with the data stored in primary storage.

To protect primary copy data or for other purposes such as regulatory compliance secondary copies alternatively referred to as data protection copies can be made. Examples of secondary copies include a backup copy a snapshot copy a hierarchical storage management HSM copy an archive copy and other types of copies.

A backup copy is generally a point in time copy of the primary copy data stored in a backup format as opposed to in native application format. For example a backup copy may be stored in a backup format that is optimized for compression and for efficient long term storage. Backup copies generally have relatively long retention periods and may be stored on media with slower retrieval times than other types of secondary copies and media. In some cases backup copies may be stored at an offsite location.

After an initial full backup of a data set is performed periodic intermittent or continuous incremental backup operations may be subsequently performed on the data set. Each incremental backup operation copies only the primary copy data that has changed since the last full or incremental backup of the data set was performed. In this way even if the entire set of primary copy data that is backed up is large the amount of data that must be transferred during each incremental backup operation may be significantly smaller since only the changed data needs to be transferred to secondary storage. Combined one or more full backup and subsequent incremental copies may be utilized together to periodically or intermittently create a synthetic full backup copy. More details regarding synthetic storage operations are found in commonly assigned U.S. patent application Ser. No. 12 510 059 entitled Snapshot Storage and Management System with Indexing and User Interface filed Jul. 27 2009 now U.S. Pat. No. 7 873 806 which is hereby incorporated by reference herein in its entirety.

An archive copy is generally a copy of the primary copy data but typically includes only a subset of the primary copy data that meets certain criteria and is usually stored in a format other than the native application format. For example an archive copy might include only that data from the primary copy that is larger than a given size threshold or older than a given age threshold and that is stored in a backup format. Often archive data is removed from the primary copy and a stub is stored in the primary copy to indicate its new location. When a user requests access to the archive data that has been removed or migrated systems use the stub to locate the data and often make recovery of the data appear transparent even though the archive data may be stored at a location different from the remaining primary copy data.

Archive copies are typically created and tracked independently of other secondary copies such as other backup copies. For example to create a backup copy the data storage system transfers a secondary copy of primary copy data to secondary storage and tracks the backup copy using a backup index separate from the archive index. To create an archive copy a conventional data storage system transfers the primary copy data to be archived to secondary storage to create an archive copy replaces the primary copy data with a stub and tracks the archive copy using an archive index. Accordingly the data storage system will transfer two separate times to secondary storage a primary copy data object that is both archived and backed up.

Since each transfer consumes network and computing resources when the transfers are taking place the data storage system may not be able to devote such resources to other tasks. Moreover the data storage system is required to devote resources to maintaining each separate index. In some cases the archive index may be unaware of the other secondary copy and the other secondary index may be unaware of the archive copy which may lead to further inefficiencies. Moreover in some cases in the event that an archive copy is moved or transferred e.g. to another tier of secondary storage the archive index may not be able to be updated to reflect the move or transfer. In such cases the data storage system may be unable to use the stub to locate the archived data object.

In some operational scenarios a user may want to browse through files to either take a quick look at the content or identify a particular file that the user is interested in before the user decides to recall the entire file from a secondary backup or an archive or open the file for reading or writing using the native application for the file.

Recently Apple Computers has introduced a facility called Quick Look in their computer products. Quick Look allows users to look at the contents of a file in a finder application window at full or near full size resolution depending on the size of the document relative to the desktop. Quick Look allows viewing of files in different formats such as PDFs and Microsoft Word Excel and PowerPoint file formats. While Quick Look allows quick navigation through various files no storage efficiencies are gained by using the Quick Look format.

Another problem relates to data storage on mobile devices. Often data storage on mobile devices is not optimized. Since mobile devices often have limited storage capacity such lack of optimization affects performance of the device affects the user experience etc.

The need exists for systems and methods that overcome the above problems as well as systems and methods that provide additional benefits. Overall the examples herein of some prior or related systems and methods and their associated limitations are intended to be illustrative and not exclusive. Other limitations of existing or prior systems and methods will become apparent to those of skill in the art upon reading the following Detailed Description.

The techniques disclosed in this document are useful in one aspect in solving the above discussed problems related to browsing through large data files before recalling the data files from a secondary storage. In another aspect the disclosed techniques can be used to convert large data files from their native format e.g. an MPEG Moving Pictures Expert Group video file or a PowerPoint file etc. to a preview format. The converted preview format copy for example may require significantly lower storage space and require less bandwidth to transfer between devices. In some implementations the converted preview format copy may disable the ability to select and copy text or images from the file but may still allow a low resource way for a user to browse through the content of the file. When some of the files that the user browses may be relatively large and may be archived in a secondary storage a user s browsing through such files may use network resources such as Input Output bandwidth and processing power. The use of file copies in a preview format also called stub files in one aspect reduce the amount of computational resources needed for a user s file browsing operation.

The headings provided herein are for convenience only and do not necessarily affect the scope or meaning of the disclosure.

A software firmware and or hardware system for facilitating data previewing before recalling large data files are disclosed. Also disclosed a software firmware and or hardware system to keep devices clean by archiving or moving to secondary storage unused data and applications.

Various examples of the techniques will now be described. The following description provides specific details for a thorough understanding and enabling description of these examples. One skilled in the relevant art will understand however that the invention may be practiced without many of these details. Likewise one skilled in the relevant art will also understand that the invention may include many other obvious features not described in detail herein. Additionally some well known structures or functions may not be shown or described in detail below so as to avoid unnecessarily obscuring the relevant description.

The terminology used below is to be interpreted in its broadest reasonable manner even though it is being used in conjunction with a detailed description of certain specific examples of the invention. Indeed certain terms may even be emphasized below however any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.

Aspects of the technologies described herein may be practiced in an information management environment which will now be described while referencing . As shown in the environment includes multiple computing devices that execute numerous software applications to facilitate the operations of an organization or multiple affiliated organizations such as a household corporation or other business entity a non profit organization an educational institution or a governmental agency. The computing devices may include one or more servers such as mail servers file servers database servers print servers and web servers personal computers workstations or other types of fixed computing systems such as mainframe computers and minicomputers not shown . The servers may include network attached storage NAS filers.

The environment may include virtualized computing resources such as a virtual machine provided to the organization by a third party cloud service vendor or a virtual machine running on a virtual machine host operated by the organization. For example the organization may use one virtual machine A as a database server and another virtual machine B as a mail server. The environment may also include mobile or portable computing devices such as laptops tablet computers personal data assistants mobile phones such as smartphones and other mobile or portable computing devices such as embedded computers set top boxes vehicle mounted devices wearable computers etc.

Of course other types of computing devices may form part of the environment . As part of their function each of these computing devices creates accesses modifies writes and otherwise uses production copies of data and metadata that are typically stored in a persistent storage medium having fast I O times. For example each computing device may regularly access and modify data files and metadata stored on semiconductor memory a local disk drive or a network attached storage device. Each of these computing devices may access data and metadata via a file system supported by an operating system of the computing device.

The environment may also include hosted services that provide various online services to the organization or its constituent members e.g. the organization s departments employees independent contractors etc. such as social networking services e.g. Facebook Twitter Pinterest hosted email services e.g. Gmail Yahoo Mail Hotmail or hosted productivity applications or other hosted applications e.g. Microsoft Office Google Docs Salesforce.com . Hosted services may include software as a service SaaS platform as a service PaaS application service providers ASPs cloud services and all manner of delivering computing or functionality via a network. As it provides services to users each hosted service may generate additional hosted data and metadata that is associated with each user. For example Facebook may generate and store photos wall posts notes videos and other content that are associated with a particular Facebook user s account.

The organization directly or indirectly employs an information management system to protect and manage the data and metadata used by the various computing devices in the environment and the data and metadata that is maintained by hosted services on behalf of users associated with the organization. One example of an information management system is the CommVault Simpana system available from CommVault Systems Inc. of Oceanport N.J. The information management system creates and manages non production copies of the data and metadata to meet information management goals such as permitting the organization to restore data metadata or both data and metadata if an original copy of the data metadata is lost e.g. by deletion corruption or disaster or because of a service interruption by a hosted service allowing data to be recovered from a previous time complying with regulatory data retention and electronic discovery e discovery requirements reducing the amount of data storage media used facilitating data organization and search improving user access to data files across multiple computing devices and or hosted services and implementing information lifecycle management ILM or other data retention policies for the organization. The information management system may create the additional non production copies of the data and metadata on any suitable non production storage medium such as magnetic disks magnetic tapes other storage media such as solid state storage devices or optical disks or on cloud data storage sites e.g. those operated by third party vendors . Further details on the information management system may be found in the assignee s U.S. patent application Ser. No. 12 751 850 filed Mar. 31 2010 entitled DATA OBJECT STORE AND SERVER FOR A CLOUD STORAGE ENVIRONMENT INCLUDING DATA DEDUPLICATION AND DATA MANAGEMENT ACROSS MULTIPLE CLOUD STORAGE SITES now U.S. Patent Publication Number 2010 0332456 which is hereby incorporated herein by reference in its entirety.

The information management system accesses or receives copies of the various production copies of data objects and metadata and via an information management operation such as a backup operation archive operation or snapshot operation creates non production copies of these data objects and metadata often stored in one or more non production storage mediums different than the production storage medium where the production copies of the data objects and metadata reside. A non production copy of a data object represents the production data object and its associated metadata at a particular point in time non production objects A C . Since a production copy of a data object or metadata changes over time as it is modified by an application hosted service or the operating system the information management system may create and manage multiple non production copies of a particular data object or metadata each representing the state of the production data object or metadata at a particular point in time. Moreover since a production copy of a data object may eventually be deleted from the production data storage medium and the file system from which it originated the information management system may continue to manage point in time representations of that data object even though a production copy of the data object itself no longer exists.

For virtualized computing devices such as virtual machines the operating system and applications A D may be running on top of virtualization software and the production data storage medium may be a virtual disk created on a physical medium such as a physical disk. The information management system may create non production copies of the discrete data objects stored in a virtual disk file e.g. documents email mailboxes and spreadsheets and or non production copies of the entire virtual disk file itself e.g. a non production copy of an entire .vmdk file .

Each non production object A C may contain copies of or otherwise represent more than one production data object. For example non production object A represents three separate production data objects C and C represented as C and respectively . Moreover as indicated by the prime mark a non production object may store a representation of a production data object or metadata differently than the original format of the data object or metadata e.g. in a compressed encrypted deduplicated or otherwise optimized format. Although shows that a single production data object e.g. C and its associated data object metadata e.g. Meta11 are represented by the contents of only a single non production object e.g. A the entire contents of a single production data object and or its metadata at a particular point in time may instead span across numerous non production objects. Also a single non production object may contain copies of or otherwise represent production data objects that originated from different computing devices.

Non production copies include backup copies archive copies and snapshot copies. Backup copies are generally used for shorter term data protection and restoration purposes and may be in a native application format or in a non native format e.g. compressed encrypted deduplicated and or otherwise modified from the original application format . Archive copies are generally used for long term data storage purposes and may be compressed encrypted deduplicated and or otherwise modified from the original application format. In some examples when an archive copy of a data object is made a logical reference or stub may be used to replace the production copy of the data object in the production storage medium . In such examples the stub may point to or otherwise reference the archive copy of the data object stored in the non production storage medium so that the information management system can retrieve the archive copy if needed. The stub may also include some metadata associated with the data object so that a file system and or application can provide some information about the data object and or a limited functionality version e.g. a preview of the data object. A snapshot copy represents a data object at a particular point in time. A snapshot copy can be made quickly and without significantly impacting production computing resources because large amounts of data need not be copied or moved. A snapshot copy may include a set of pointers derived from the file system or an application where each pointer points to a respective stored data block so collectively the set of pointers reflect the storage location and state of the data object at a particular point in time when the snapshot copy was created. In copy on write if a block of data is to be deleted or changed the snapshot process writes the block to a particular data storage location and the pointer for that block is now directed to that particular location. The set of pointers and or the set of blocks pointed to by a snapshot may be stored within the production data storage medium .

Non production copies of a data object or metadata may be distinguished from a production copy of a data object or metadata in several ways. First a non production copy of a data object is created to meet the different information management goals described above and is not directly used or modified by applications A D hosted services or the operating system . Second a non production copy of a data object is stored as one or more non production objects that may have a format different from the native application format of the production copy of the data object and thus often cannot be directly used by the native application or a hosted service without first being modified. Third non production objects are often stored on a non production storage medium that is inaccessible to the applications A D running on computing devices and hosted services . Also some non production copies may be offline copies in that they are not readily available e.g. not mounted tape or disk. Offline copies include copies of data that the information management system can access without any human intervention e.g. tapes within an automated tape library but not yet mounted in a drive and copies that the information management system can access only with at least some human intervention e.g. tapes located at an offsite storage site .

The information management system also generates information management data such as indexing information which permit the information management system to perform its various information management tasks. As shown in a computing device may include one or more data management agents that provide client side functions for the information management system.

The storage manager may be a software module or other application that coordinates and controls information management operations performed by one or more information management cells to protect and control copies of non production data objects and metadata. As shown by the dashed lines and the storage manager may communicate with some or all elements of the information management cell such as the media agents and computing devices to initiate and manage backup operations snapshot operations archive operations data replication operations data migrations data distributions data recovery and other information management operations. The storage manager may control additional information management operations including ILM deduplication content indexing data classification data mining or searching e discovery management collaborative searching encryption and compression. Alternatively or additionally a storage manager may control the creation and management of disaster recovery copies which are often created as secondary high availability disk copies using auxiliary copy or replication technologies.

The storage manager may include a jobs agent a management agent a network agent and an interface agent all of which may be implemented as interconnected software modules or application programs. The jobs agent monitors the status of information management operations previously performed currently being performed or scheduled to be performed by the information management cell . The management agent provides an interface that allows various management agents in multiple information management cells or in a global storage manager to communicate with one another. This allows each information management cell to exchange status information routing information capacity and utilization information and information management operation instructions or policies with other cells. In general the network agent provides the storage manager with the ability to communicate with other components within the information management cell and the larger information management system e.g. via proprietary or non proprietary network protocols and application programming interfaces APIs including HTTP HTTPS FTP REST virtualization software APIs cloud service provider APIs hosted service provider APIs . The interface agent includes information processing and display software such as a graphical user interface GUI an API or other interactive interface through which users and system processes can retrieve information about the status of information management operations or issue instructions to the information management cell and its constituent components. The storage manager may also track information that permits it to select designate or otherwise identify content indices deduplication databases or similar databases within its information management cell or another cell to be searched in response to certain queries.

The storage manager may also maintain information management data such as a database of management data and policies. The database may include a management index that stores logical associations between components of the system user preferences user profiles that among other things map particular information management users to computing devices or hosted services management tasks or other useful data. The database may also include various information management policies which are generally data structures or other information sources that each include a set of criteria and rules associated with performing an information management operation. The criteria may be used to determine which rules apply to a particular data object system component or information management operation an may include 

As noted above each computing device may include one or more data management agents . Each data management agent is a software module or component that helps govern communications with other system components. For example the data management agent receives commands from the storage manager and sends to and receives from media agents copies of data objects metadata and other payload as indicated by the heavy arrows . Each data management agent accesses data and or metadata stored in a production data storage medium and arranges or packs the data and metadata in a certain format e.g. backup or archive format before it is transferred to another component. Each data management agent can also restore a production copy of a data object or metadata in a production data storage medium from a non production copy. A data management agent may perform some functions provided by a media agent which are described further herein such as compression encryption or deduplication. Each data management agent may be specialized for a particular application e.g. a specified data management agent customized to handle data generated or used by Exchange by Microsoft Corp. . Alternatively or additionally a more generic data management agent may handle data generated or used by two or more applications.

Each computing device may also include a data distribution and live browsing client module herein distribution client module . The distribution client module is responsible for inter alia associating mobile devices and or hosted service accounts with users of the information management system setting information management policies for mobile and other computing devices pushing data objects to a distribution module for distribution to other computing devices providing unified access to a user s data via an interface and providing live browsing features. The various functions of the distribution client module are described in greater detail herein.

A media agent which may be implemented as a software module conveys data as directed by the storage manager between a computing device or hosted service and one or more non production storage mediums . Each media agent may control one or more intermediary storage devices such as a cloud server or a tape or magnetic disk library management system to read write or otherwise manipulate data stored in a non production storage medium . Each media agent may be considered to be associated with a storage device and its related non production storage media if that media agent is capable of routing data to and storing data in the storage media managed by the particular storage device. A media agent may communicate with computing devices hosted services storage devices A D and the storage manager via any suitable communications path including SCSI a Storage Area Network SAN a Fiber Channel communications link or a wired wireless or partially wired wireless computer or telecommunications network including the Internet.

To perform its functions the media agent may include a media file system module a data classification module a content indexing module a deduplication module an encryption module a compression module a network module a distribution module and a media agent database . The media file system module is responsible for reading writing archiving copying migrating restoring accessing moving sparsifying deleting sanitizing destroying or otherwise performing file system operations on various non production storage devices of disparate types. The media file system module may also instruct the storage device to use a robotic arm or other retrieval means to load or eject certain storage media such as a tape.

The network module permits the media agent to communicate with other components within the system and hosted services via one or more proprietary and or non proprietary network protocols or APIs including cloud service provider APIs virtual machine management APIs and hosted service provider APIs . The deduplication module performs deduplication of data objects and or data blocks to reduce data redundancy in the cell. The deduplication module may generate and store data structures to manage deduplicated data objects such as deduplication tables in the media agent database . The encryption module performs encryption of data objects data blocks or non production objects to ensure data security in the cell. The compression module performs compression of data objects data blocks or non production objects to reduce the data capacity needed in the cell.

The content indexing module analyzes the contents of production copies or non production copies of data objects and or their associated metadata and catalogues the results of this analysis along with the storage locations of or references to the production or non production copies in a content index stored within a media agent database . The results may also be stored elsewhere in the system e.g. in the storage manager along with a non production copy of the data objects and or an index cache. Such index data provides the media agent or another device with an efficient mechanism for locating production copies and or non production copies of data objects that match particular criteria. The index data or other analyses of data objects or metadata may also be used by the data classification module to associate data objects with classification identifiers such as classification tags in the media agent database or other indices to facilitate information management policies and searches of stored data objects.

The distribution module may be a set of instructions that coordinates the distribution of data objects and indices of data objects. The distribution may occur from one computing device to another computing device and or from hosted services to computing devices . As a first example the distribution module may collect and manage data and metadata from hosted services or mobile devices . As another example the distribution module may synchronize data files or other data objects that are modified on one computing device so that the same modified files or objects are available on another computing device. As yet another example the distribution module may distribute indices of data objects that originated from multiple computing devices and or hosted services so a user can access all of their data objects through a unified user interface or a native application on their computing device. The distribution module may also initiate live browse sessions to permit communications between different computing devices so that the devices can interchange data and metadata or so the devices can provide computing resources such as applications to each other. The functions performed by the distribution module are described in greater detail herein.

A brief overview of certain aspects of the techniques described in greater detail below is now provided. In some implementations a user is able to browse through a file system on his computer using a menu structure and user interface UI generally supported by his computer e.g. Windows 7 interface Apple iOS interface and so on . Some of the displayed files may be stored in a secondary storage or an archive which may not be on the user s computer but are accessible elsewhere on a network to which the user s computer is connected. In some implementations a visual cue is provided to a user for the user to be able to distinguish between files that are locally present and files that have been archived. In some implementations archived files are replaced by a locally available stub file copy. In some implementations the stub file copy is created by converting a file from its native format to a preview format. The preview format may be customized to minimize storage requirement at the expense of added functionality such as being able to manipulate text and graphics in the file. In one aspect a user is able to quickly view the content of a large file using the locally stored stub file and then make a decision about whether to recall the entire file from the secondary storage which may take a significant amount of network and computing resources.

With reference to an example of a user interface for allowing data preview before recalling large data files is shown. In some implementations the user interface is in the form of a folder view depicting files available in the folder. In the example shown in three files and are displayed to a user. The files may also show a file type e.g. .xyz .ddd and .abc respectively to identify the file to a user. Other variations of the folder view and file display are well known in art and are possible but omitted in the present document for brevity. In files contain an additional cue indicating to the user whether the file is available in its native format or in a preview format. A cue may be provided only for stub files e.g. file in the native format is not available on the primary storage . Each displayed file icon may include another smaller icon e.g. indicating whether the file is available in its native format or in preview format. For example indicates that the file is not available in the native format while indicate that the file is available in the native format and locally stored.

In some implementations audio tone cues are used to indicate such availability. For example when a user moves the cursor over on the file icon an audio tone is generated for stub e.g. files that are not stored locally in their native formats. Various other techniques e.g. use of different colors different sizes different fonts etc. are also possible to provide audio visual cues to the user about which files are stored locally and in native file format and which are stub files e.g. available from a secondary or offline storage and in a preview format.

When a user interacts with a file e.g. file a viewer application can be launched. The viewer application may be launched in a separate window e.g. a pop up window . The viewer application is described in greater detail elsewhere in this document. The system may activate the viewer application when the user performs a specific action on the file icon e.g. glide single click double click etc. . The pop up window may be an independent application frame with well known attributes and controls such as full page minimize move close etc. Alternatively the pop up window is a balloon window which other than below described content browsing is not further manipulatable by the user.

In some implementations the viewing program used for showing content of a stub file to a user is operable on a computer platform as a preview client application. The preview client may be an off the shelf browser that is modified to display the files in their preview format e.g. a JPEG viewer or an Internet browser . Alternatively the preview client may be a custom viewing application. The preview client application may provide a static display of the content of a stub file. In other words the preview client does not allow interaction with content being displayed. For example when text is displayed as a JPEG or a .bmp file the preview client may not allow a user to select and copy text or images embedded within the content. Other image viewing clients may also be used e.g. a TIFF viewer etc. .

In some implementations the preview client allows some user interaction such as page forward page backward page skip for efficient navigation through file content via the stub file. For example with the cursor on window a user may be able to press page up page down and receive different content e.g. different video frames or different pages.

In some implementations when a user selects the Recall option the computer system recalls the file to regenerate the file in native file format from a secondary storage or archive to the primary storage thereby making the file available to the user locally and in the native file format. If the file is currently not available for recalling for example when the user is not connected to the appropriate network e.g. a corporate an intra network or the Internet an error message is displayed to the user that the file is currently not available.

In some implementations the View mode is made available for multimedia files. For example the selection of View option while previewing a media file may result in first a recall of the media file from a secondary storage and second launching of an application e.g. a media player in which the media file can be viewed when it is recalled to the local storage.

In some implementations the Play option enables a user to put the underlying content in motion. For example if the underlying content is a multi slide presentation then the selection of play option results in an auto staged playback of the slides in the preview mode. As another example in the play mode pages of a multi page document may be flipped automatically by the computer system.

In some implementations the content of a stub file may be displayed to the user by refreshing content with next pages or next video frames simply when the user s cursor is on the file icon. In some implementations a stub file may be a hypertext markup language HTML file that can be viewed using a web browser. Of course other file types and viewers may be used such as the PDF file type and the Adobe Acrobat viewer.

In some implementations after converting a file from a native format to a preview format the file in native format is moved to secondary storage and information about the location in the secondary storage is associated with the copy in the preview format. The location information is associated with the preview format file. One of several well known mechanisms such as the user resource locator URL indicator may be used for the association.

After the file is converted to the preview format the system transfers the file in native format by a transfer module to a secondary or archive storage as previously described. Based on the transfer the system generates a pointer with information about where the transferred occurred to or in other words the location of the file in the secondary storage. The pointer is associated with the viewable content together representing the stub file .

In some implementations the decision regarding which files to keep on the local storage and which ones to replace with their stub file versions is performed using a set of predetermined rules. The rules include for example criteria such as archiving least used files files larger than a threshold size files of a certain type e.g. media files files specifically identified by a user for such offline storage files identified by an application as being suitable for offline storage etc. A system administrator may be to modify or update the predetermined rules. The management of these rules in one aspect helps a corporate network strike the balance between storage use of an organization and response time to a user browsing through files on the corporate network. In other words the organization can manage the amount of primary storage data storage required. The system can analyze historical trends in data being stored data storage capacity primary and secondary storage bandwidth capacity for exchanging data files and other factors. Based on statistical analysis of these historical trends the system may periodically or continuously dynamically change the rules to compensate for changes in data storage data storage capacity bandwidth etc. Further details regarding other rules and processes for moving data objects to secondary storage especially for mobile devices is discussed below.

At the system at some later time receives a viewing request for the data file. At if the file to be viewed as located in primary storage the data file is displayed in the preview format to fulfill the viewing request. As previously discussed in some embodiments the preview format comprises a picture encoding format such as a JPEG image or a bitmap format or a GIF graphics intermediate format image or a PNG portable network graphics image and so on. At if the file requested is the native format file then the system accesses the data structure to identify the location of the native format file in secondary storage and retrieves it for display or to be provided to the user.

In some implementations a menu for accessing the data file in the native format is provided. As previously discussed in some implementation an audio or a visual cue is provided to a user to indicate whether or not the file icon being browsed by the user is in the primary storage. For files that are not stored in the primary storage but are available by retrieving from a secondary storage a menu may be provided in some implementations. For example in some implementations a user can access file open menu by right clicking on the file icon.

As previously discussed the process may include a resource locator with the data object stored in the preview format. The resource locator is e.g. in the URL format indicating the location in the secondary storage of the native format data object. When the user selects to load the image in the native format then access to the data object may be provided using the resource locator using one of several well know network file interface schemes.

While the larger native format file is generally described herein as being stored on the secondary storage while the stub is stored on primary storage the two may be stored together within a single file. Thus in an alternative embodiment a single container file may include the initial preview file followed by the native format file. A header may be provided in the container file to describe the contents format and extends e.g. size of the embedded preview and native format files. The information management system may manage the container file as a single file while the file system of a computing device may view the two files independently.

By embedding both preview and native format files within a container file storage management efficiencies may be obtained. Further such a container file may allow both the preview and native format files to be moved from primary storage to secondary storage. The stub described herein may link or point to the preview file within the container file and it is this preview file that is returned by accessing the stub. However with further input by the user the system can retrieve the native format file for the user.

When new file formats are introduced e.g. newer video file formats or files generated by new releases of application programs the converter may simply be updated to add a module that is responsive to the new file format and is able to convert the new file format to a preview format such as a bitmap or a PNG format file.

It is well known that multimedia files especially video files often occupy a large amount of storage space compared to documents and spreadsheets. In some implementations the system replaces above discussed pointer with a list of pointers with each pointer in the list pointing to a next section e.g. a next independently decodable video frame or group of frames of the stored video file. In one aspect such as facility enables random access within a long video file and allows a user to recall a portion of a video file that is of interest. In other words bookmarks may be provided and displayed to access sections or portions of the video file. In some embodiments a video file in the native format e.g. an mp4 video file may be converted into its stub format by simply clipping the video file to first few seconds or by sampling video frames periodically e.g. once every second . It will be appreciated that such techniques beneficially would result in a considerable reduction in the storage space needed for the stub file compared to the original file while still providing a user the ability to preview content of the file.

In some implementations a user accesses files e.g. file folder from a mobile device. A mobile device is often run on battery power and therefore it may be desirable to customize a user s access to the files based on the amount of battery power available to the mobile device. For example in some implementations when the available batter power or time remaining for battery power operation falls below a threshold a user may be able to browse through a file or only using a low power option. The low power option may be e.g. limiting the user to only be able to preview the file in the preview format.

The system described herein can establish certain rules or policies to implement this functionality on a mobile device. For example if the battery power drops below a 20 threshold then the system permits the mobile device to access only previews. However when the battery powered drops below a 10 threshold then the system prevents the mobile device from launching resource intensive previews. For example processor intensive video decoding may be prohibited and or access to previews that require downloads via a wireless link locally stored previews would still be permitted . In other words any applications that would burden the processor or consume radio resources would be rationed. Rather than prohibiting or inhibiting such functionality at these thresholds the system may instead provide a click through warning for a user which would require the user to acknowledge the resource intensive request before permitting the file to be accessed viewed previewed.

Furthermore a mobile device typically also has a limited memory or processor power for application execution. For example some mobile devices may not have a native Office application installed. In such mobile devices the only option for a user to be able to view content of files for which no application is available locally may be to use a preview format. In such implementations when a user attempts to browse through the content of a file the content is made available only in a preview format.

Typical mobile devices may also be limited by viewing constraints such as screen resolution color depth etc. In some implementations the converter selects a target preview format based on such mobile device limitations. For example in some implementations the converter creates multiple resolution images of content pages of a native format file. When the user wishes to browse through such multi resolution content the system provides or offers a preview file suitable for the user s mobile device capabilities e.g. high resolution low resolution 18 bit color depth etc. also called device resource profile.

Further information regarding data storage methods for mobile devices may be found in the assignee s concurrently filed U.S. Patent Application No. 61 618 506 having to Vibhor et al. entitled Backup Methods for Mobile Devices incorporated herein by reference in its entirety.

In some implementations when a user syncs his user device to a corporate network a synchronization server automatically stores file in the right format on the user device. For example in the case of a mobile device that has a 352 240 screen resolution with 16 bit color depth a preview file suitable for display on a 352 240 resolution with 16 bit color depth is synched or stored on the user device.

With reference to a synchronization server may implement a process as follows. At the synchronization server obtains a resource profile of a user device e.g. battery life display resolution available memory preview applications loaded on the user device etc. . At based on the resource profile the synchronization server then makes file storage decisions regarding multiple files to be made available to a user of the user device. For each file the synchronization server decides whether to store the file in its native format on the user device or whether to store the file in a preview format on the user device and move the corresponding native format version to a secondary or archive location in the network.

At when the decision is to store a preview copy on the local storage of the user device the synchronization server then decides attributes of the local copy e.g. which preview format to use what level of compression to use etc. . The synchronization server may make decisions about the attributes of the local copy based on the resource profile of the user device. At in addition the synchronization server adds metadata to the locally stored preview format file to indicate where to locate the file in its native format and whether the file is in a preview format or in its native format. To generate the preview format file the synchronization server may communicate with the converter previously discussed.

The above discussed synchronization process may be run when a portable or mobile device is docked in a device dock or on a periodic basis e.g. once every week . A user or a system administrator may be able to perform synchronization by running a script or a program. Mobile devices often have memory interfaces to attach a removable memory e.g. secure digital memory card SIM card USB flash memory device etc. . In some implementations the removable memory card may be used to transfer files to from a user s mobile device and the user s computer. For example from the desktop a user may be able to create a To go folder and add files to the folder by dragging and dropping the files into the folder. The system may then decide using the previously discussed methodology whether to store the file in its native format in the To go folder or whether to convert the file to a preview format before copying the file to the To go folder. Once the user has copied all the files he wants to this folder the user can simply remove the memory device from the computer and attach the memory device to his mobile platform phone smartphone tablet etc. .

The above discussed system may be expanded to any data or even applications. Many current mobile devices such as tablets and smart phones have a maximum of 8 GB of storage. The present system may intelligently archive data and applications by scanning data and applications on the device and automatically backing up or moving to secondary storage old and unused data applications including data applications that consume power on the device. For example an electronic magazine subscription could consume 50 MB per issue particularly if the magazine has many images. The system can automatically archive these old subscriptions such as moving them to a secure cloud storage location associated with the mobile device. As another example the system can scan applications running on the device including identifying services accessed to help understand power consumption and compare that to use of those applications by the user unused power hungry applications can be automatically archived to free up not only data storage on the device but also free up processing resources and conserve battery power.

In some implementations a smart archival application may be installed on a mobile device for monitoring memory use by locally stored files. The smart archival application may continuously run in the background or may periodically wake up and analyze memory usage and whether any local memory can be freed up by archiving unused files as described above. In some implementations the smart archival application may perform the actual archival task. In some other applications the housekeeper application may only mark files for archival at next available opportunity e.g. when the device is being run on AC power or the battery level is above a threshold such as 80 

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside on servers workstations personal computers computerized tablets PDAs smart phones and other devices suitable for the purposes described herein. Modules described herein may be executed by a general purpose computer e.g. a server computer wireless device or personal computer. Those skilled in the relevant art will appreciate that aspects of the invention can be practiced with other communications data processing or computer system configurations including Internet appliances hand held devices including personal digital assistants PDAs wearable computers all manner of cellular or mobile phones multi processor systems microprocessor based or programmable consumer electronics set top boxes network PCs mini computers mainframe computers and the like. Indeed the terms computer server host host system and the like are generally used interchangeably herein and refer to any of the above devices and systems as well as any data processor. Furthermore aspects of the invention can be embodied in a special purpose computer or data processor that is specifically programmed configured or constructed to perform one or more of the computer executable instructions explained in detail herein.

Software and other modules may be accessible via local memory a network a browser or other application in an ASP context or via another means suitable for the purposes described herein. Examples of the technology can also be practiced in distributed computing environments where tasks or modules are performed by remote processing devices which are linked through a communications network such as a Local Area Network LAN Wide Area Network WAN or the Internet. In a distributed computing environment program modules may be located in both local and remote memory storage devices. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces command line interfaces and other interfaces suitable for the purposes described herein.

Examples of the technology may be stored or distributed on computer readable media including magnetically or optically readable computer disks hard wired or preprogrammed chips e.g. EEPROM semiconductor chips nanotechnology memory biological memory or other data storage media. Indeed computer implemented instructions data structures screen displays and other data under aspects of the invention may be distributed over the Internet or over other networks including wireless networks on a propagated signal on a propagation medium e.g. an electromagnetic wave s a sound wave etc. over a period of time or they may be provided on any analog or digital network packet switched circuit switched or other scheme .

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling or connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above Detailed Description is not intended to be exhaustive or to limit the invention to the precise form disclosed above. While specific examples for the invention are described above for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative implementations may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified to provide alternative or subcombinations. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed or implemented in parallel or may be performed at different times. Further any specific numbers noted herein are only examples alternative implementations may employ differing values or ranges.

The teachings of the invention provided herein can be applied to other systems not necessarily the systems described herein. The elements and acts of the various examples described above can be combined to provide further implementations of the invention.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention.

These and other changes can be made to the invention in light of the above Detailed Description. While the above description describes certain examples of the invention and describes the best mode contemplated no matter how detailed the above appears in text the invention can be practiced in many ways. Details of the system may vary considerably in its specific implementation while still being encompassed by the invention disclosed herein. As noted above particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the invention with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the invention to the specific examples disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the invention encompasses not only the disclosed examples but also all equivalent ways of practicing or implementing the invention under the claims.

While certain examples are presented below in certain forms the applicant contemplates the various aspects of the invention in any number of claim forms. Accordingly the applicant reserves the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the invention.

