---

title: Rapid application development using a content management system
abstract: An online content management system enables rapid application development by an application developer using an application development system to create a content application configured to execute on a client device. A designated folder on the application development system is designated for sharing with the client device. Configuration data containing parameters for controlling the operation of the content application is stored in the designated folder. The content application on the client device reads the configuration data from the designated location and applies the parameters on execution and thereafter. When the configuration data is modified on the application development system, the modified data is synchronized by the content management system to the client device. The content application on the client device reads the modified configuration data and applies the modified parameters during execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09374275&OS=09374275&RS=09374275
owner: Dropbox, Inc.
number: 09374275
owner_city: San Francisco
owner_country: US
publication_date: 20131211
---
Disclosed embodiments relate to rapid application development using a content management system to update an configuration data for an application executing on a target client device.

One aspect of application development is the design and fine tuning of the user interface of the application. Conventionally modifications of the user interface of an application during development are made to the source code of the application in an application development environment and the code must then be recompiled for a given target client device reinstalled on the client device and then executed to determine whether the modifications are acceptable. If not the developer needs to return to an application development environment modify the source code again recompile reinstall the application on the client and execute the application. Similar difficulties are encountered when modifying other aspects of an application such as functional behavior algorithms or other operations. Each time a change is made evaluation of the change requires a recompile install and execute cycle. This process is extremely time consuming and inefficient for the application developer.

An online content management system is coupled to an application development system and a client device on which a content application is stored. The application development system and the client device can both be associated with an account on the content management system which account includes designated storage locations for sharing files between the application development system and the client device. The content management system can be configured to synchronize configuration data that is associated with content application to one of the designated storage locations in the account. The configuration data can include parameters that configure the operation of the content application including user interface aspects such as size shape location and color of graphic elements fonts and font sizes of text elements as well as parameters for the operation of internal algorithms computations and functions. The configuration data can be maintained in a configuration file or as individual or groups of data items. The content application is configured to read the configuration data from the designated storage location including the parameters therein and apply the parameters to control is execution. The application developer may subsequently modify the configuration data which the content management system then synchronizes to the client device. The content application on the client device reads the modified configuration data from the designated storage location and can update its operation and features accordingly. This eliminates the need for the application developer to recompile and reinstall the application on the client device in order to evaluate the modifications.

The features and advantages described in this summary and the following detailed description are not exhaustive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The figures show various embodiments of the present invention for purposes of illustration only. One skilled in the art will recognize from the following description that alternative embodiments of the structures and methods shown may be used without departing from the principles of this invention.

In the environment of a client device accesses shared content through content management system using a CMS client application . As presented to the user content may be organized according to the display representation employed by client device typically as directories of folders. Thus each client device may jointly access the shared content such as a folder containing content items including application configuration data using the services of CMS client application . A client device further executes content application as created by an application developer using application development system . Content application can be configured by application developer to read configuration data from a designated folder associated with application . Content management system interoperates with CMS client application to synchronize configuration data between application development system and client device . Content application reads configuration data and uses the stored information therein such as application parameters for the purposes of this disclosure parameters and properties are equivalent to modify its own operation including its user interface internal algorithms stored data and the like.

Although only a single client device is shown there can be any number of client devices in communication with content management system at any time. Various types of devices can function as a client device such desktop computer tablet computer and mobile device. Any device capable of accessing online content management system and interacting with content items stored on content management system may be used as client device .

Users may create accounts at content management system and can store content in online content management system by transmitting content from client device to online content management system . Users may also store content on online content management system by for example requesting transfer of content items from other content providers to online content management system . Content stored by users in online content management system is associated with user accounts that may have various privileges. The privileges may include viewing content items modifying content items modifying user privileges related to content items deleting content items and sharing content items with other users.

Content can also include folders of various types with different behaviors or other content item grouping methods. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access contents of the public folder. In another example an account can include a photos folder intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. In another example an account can include a downloads folder that can be the default folder in which content items from third party content servers are stored. In another example an account of an application developer can include a folder or directory designated for a particular content application such as a main bundle or resource folder into which all of the code and other resources for an application including configuration data are stored. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

An application development system can be communicatively coupled to content management system through the network and includes CMS client application . Application development system can be used by an application developer to code content applications for execution by a client device . Application development system can comprise one or more computers configured to execute an application development environment. Application development environment can be for any operating system such as Xcode from Apple Computer for application development on iOS and MacOS Android Developer Tools for Android from Google Inc. Microsoft Visual Studio for application development for Windows from Microsoft Corp. for example. An application development system includes a source code editor compiler debugger user interface builder code analyzer as well as other automation analysis and design tools. An application development system can be provided on various types of computers including desktop computer tablet computer and mobile device. Application development system can be also a client of content management system .

In the context of the present disclosure where client device is a mobile device such as a smartphone or tablet devices content application can be specifically designed to execute on that type of device rather than on a general desktop or notebook computer on which application development system is implemented. This is similar for example to how applications for embedded systems are developed where the development environment can be both physically separate and computationally distinct i.e. in terms of OS platform from client device . In conventional practice for this type of development the application developer must develop on a development system such as application development system and then install and test on a target system which makes rapid application development development using numerous iterative builds to progressively design and build applications difficult. Accordingly to speed up the development of content application the application developer maintains one or more folders on content management system for use in developing content applications for client devices . Content applications are further described below. As mentioned above the application developer typically maintains folder on application development system in which the source code files and resources for a given application are stored in various folders. The application developer may designate this folder for storing configuration data specific to application . Designated folder and configuration data therein can be made available to content management system by CMS client application as shared folder for synchronizing with client device that includes application . For example in an embodiment for application development for iOS and OS X applications configuration data can be part of an application s bundle directory which contains code and related resources such as images and audio files the application developer would designate the bundle directory as the folder for sharing and synchronization by content management system . Alternatively the application developer may designate a separate folder one that can be separate from and outside the main folder used for the code and resources of content application in which to store configuration data .

Configuration data can include any type of parameters properties or variables useful for defining the user interface e.g. colors texture of graphical objects text font style font colors etc. and functional operation e.g. parameters or variables for use in algorithms functions methods of content application . For example parameters for user interface properties can include text that defines the names of windows buttons icons as well as the fonts colors and styles of such text. Parameters for functional operations can include for example variables used in image display e.g. parameters used rendering images or movies variables used in audio decoding e.g. selection of audio codec rate and quality parameters variable used in game play e.g. motion control parameters character or game play setup . Parameters may also include functional code itself e.g. code implementing a class method algorithm or the like . Configuration data may be implemented as functional code that programmatically generates configuration parameters.

In one embodiment the configuration data is stored in a configuration file. The particular format for configuration file may vary depending on the specific platform and operating system for which content application is developed. Configuration files may be stored as an XML property list file file extension.plist as an Windows Registry files file extension .REG as an XML resource file in Android or as equivalent file types. Application parameters are stored in a suitable storage format such as a text string decimal string data string encoded binary data array or tag dictionary resource lists and as well as using forth using name value pairs. For example for iOS applications each application has a XML property list file typically named Info.plist file that can serve as a configuration file though any other property list file may be used as well for example a Data.plist file is often stored in a Resources folder and contains application specific data values. A parameter in a property list file may be defined by a pair of XML elements including a tag defining a name for the parameter and data type tag e.g. etc. containing the value of the parameter. Alternatively a configuration file may be stored as a program code file that executes one or more functions that generate the application parameters which can be then serialized into an XML or other file format.

A sample configuration file containing configuration data for a content application that is simple arcade game may be follows 

In the example configuration file shown here the configuration data comprises keys such as targetDensity targetFrequency targetRadius targetSpeed which define the values for how the parameters by which a target in the arcade game appears and moves on screen likewise the key weaponSpeed defines the value for how quickly a weapon in the game moves. The content application would include program code for algorithmic functions that control the number of targets displayed on a display device using the targetDensity and targetFrequency values the speed at which the targets move using the targetSpeed value and the size of the targets using the targetRadius value and the speed at which a weapon moves using the weaponSpeed value. These are examples of configuration data defining values for algorithmic functions. The key showEasterEgg is an example of configuration data that defines a logic value for whether to enable the display of hidden feature of the game. Thus the code for the content application would be configured with corresponding variables using the named keys in its program code which would then be set to the values defined by the items of configuration data.

In one embodiment using configuration files the configuration data are maintained in several files including a default configuration file and a custom configuration file. The default configuration file stores default values for the configuration data while the custom configuration data stores values specifically customized by the application developer during application development and testing. Content application is configured in this embodiment to read the default configuration file from a default directory and the custom configuration file from the designated storage location that can be shared with client device via content management system .

In one embodiment application development system includes property editor that can be used by the application developer to examine and modify application properties set forth in configuration data . In one embodiment the property editor reads configuration data and creates a web page that exposes the various properties in an editable format such as form and input fields. This enables the application developer to very quickly edit configuration data using the editor .

Client devices communicate with online content management system through network . Network may be any suitable communications network for data transmission. In one embodiment network includes portions over the Internet and uses standard communications technologies and or protocols. Thus network can include both wired e.g. Ethernet and wireless e.g. 802.11 802.16 physical layers as well various transport e.g. TCP UDP network e.g. IP session e.g. TLS SSL and application layer e.g. HTTP protocols. No particular implementation of the network is required by the disclosed embodiments other than the ability of application development system client device and content management system to communicate with each thereby.

In another embodiment online content management system and client devices use custom and or dedicated data communications technologies instead of or in addition to the ones described above.

A client device includes various components and modules for operating client device and accessing online content management system . The software modules include operating system and one or more content applications . Content applications vary based on client device and may include various applications for creating viewing consuming and or modifying content stored on online content management system such as word processors spreadsheets database management systems code editors image and video editors e book readers audio and video players and the like. Operating system provides a local file management system and executes the various software modules such as content management system CMS client application and content applications .

Client device access online content management system in a variety of ways. CMS client application can be a dedicated application or module that provides access the services of content management system providing both user access to shared files through a user interface as well as programmatic access for other applications such as content application . Client device may also access online content management system through web browser . As an alternative CMS client application may integrate access to online content management system with the local file management system provided by operating system . When access to online content management system is integrated in the local file management system a file organization scheme maintained at online content management system can be represented as a local file structure by operating system in conjunction with client application . CMS client application may take various forms such as a stand alone application an application plug in or a browser extension. CMS client application includes user interface module local content and content access module . An instance of a CMS client application can be also present on application development system as shown in .

User interface module of CMS client application generates an interface to content accessed by CMS client application and is one means for performing this function. The generated interface is provided to the user by display . The user interface represents the user s folders and files using for example a hierarchical outline browser interface a multiple columnar browser interface or other suitable graphical representations of folders and directories.

Local content may store content accessed from online content management system by CMS client application . While represented here as within CMS client application local content may be stored with other data for client device in non volatile storage. When local content is stored this way the content can be available to the user and other applications or modules such as content applications even when CMS client application is not in communication with online content management system . Local content includes configuration data that is associated with one or more content applications as determined an application developer.

Content access module of CMS client application manages updates to local content and communicates with online content management system to synchronize content modified by client device with content maintained on online content management system and is one means for performing this function. Content access module can be configured to access one or more folders designated by the application developer for obtaining access to configuration data stored therein.

In certain embodiments client device includes additional components such as camera and location module . Camera may be used to capture images or video for upload to the online content management system . Location module determines the location of client device using for example a global positioning satellite signal cellular tower triangulation or other methods. Location module may be used by CMS client application to obtain location data and add the location data to metadata about a content item such as an image captured by camera .

Communications interface enables online content management system to interface with various client devices and with other content and or service providers via an Application Programming Interface API which is one means for performing this function. Certain software applications access content stored by the online content management system via an API on behalf of a user. For example a content application can programmatically make calls directly to online content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content stored by online content management system through a web site.

User interface module generates a web interface that allows a user to view or manipulate content and is one means for performing this function. For example the user can navigate in web browser to a web address provided by online content management system . Changes or updates to content stored by online content management system made through the web interface such as uploading a new version of a file are synchronized back to other client devices associated with the user s account. Multiple client devices may be associated with a single account and files in the account are synchronized between each of the multiple client devices .

Account management module can be configured to update and or obtain user account details stored in user account database and is one means for performing this function. Account management module can be configured to interact with any number of other modules in online content management system .

User account database maintains details of the user accounts and is one means for performing this function. An account can be used to store content such as documents text files audio files video files etc. from one or more client devices associated with the account. For use in conjunction with application development system content management system stores application configuration data in association with an application developer s user account in directories and folders as designated by the application developer. In addition the user account database stores information identifying the particular devices associated with a user s account. Accordingly the user account for the application developer identifies application development system and client device as being associated with the application developer s account.

User account database can store profile information for registered users. In some cases the only personal information in the user profile can be a username and or email address. However online content management system can also be configured to accept additional user information such as password recovery information demographics information payment information and other details. Each user can be associated with an identifier such as a userID or a user name. User account database can also include account management information such as account type e.g. free or paid usage information for each user e.g. file edit history and file access history from each client device used by the user maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc.

Authenticator module verifies user credentials security tokens API calls specific client devices etc. to determine whether access to requested content items is authorized and is one means for performing these functions. Authenticator module can generate one time use authentication tokens for a user account. Authenticator module assigns an expiration period or date to each authentication token. In addition to sending the authentication tokens to requesting client devices authenticator module can store generated authentication tokens in authentication token database . Upon receiving a request to validate an authentication token authenticator module checks authentication token database for a matching authentication token assigned to the user. Once the authenticator module identifies a matching authentication token authenticator module determines if the matching authentication token is still valid. For example authenticator module verifies that the authentication token has not expired or was not marked as used or invalid. After validating an authentication token authenticator module may invalidate delete or mark as used the matching authentication token in the authentication token database to prevent future re use of a single use token.

Content item management module maintains a content directory that identifies the location of each content item in content storage and allows client applications to request access to content items in content storage and is one means for performing these functions. A content entry in the content directory can also include a content pointer that identifies the location of the content item in content storage . For example the content entry can include a content pointer designating the storage address of the content item in memory. In some embodiments the content entry includes multiple content pointers that point to multiple locations each of which contains a portion of the content item.

Content storage stores content items and is one means for performing this function. Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. In one configuration online content management system stores the content items in the same organizational structure as they appear on client device . However online content management system can store the content items in its own order arrangement or hierarchy.

Content storage stores the contents of the designated folder and configuration as selected by the application developer. Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one configuration each content item stored in content storage can be assigned a system wide unique identifier. Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. In one embodiment for example a content item may be shared among different users by including identifiers of the users within ownership metadata of the content item e.g. an ownership list while storing only a single copy of the content item and using pointers or other mechanisms to link duplicates with the single copy. Similarly content storage stores files using a file version control mechanism that tracks changes to files different versions of files such as a diverging version tree and a change history. The change history includes a set of changes that when applied to the original file version produces the changed file version.

Sharing module manages sharing content publicly or privately and is one means for performing this function. Sharing content publicly can include making the content item accessible from any computing device in network communication with online content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The content can also be shared across varying types of user accounts. In addition to a content path and content pointer a content entry in some configurations also includes a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts. To share a content item privately sharing module adds a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item. To share content publicly sharing module generates a custom network address such as a URL which allows any web browser to access the content in online content management system without any authentication. The sharing module includes content identification data in the generated URL which can later be used by online content management system to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. The content identification data included in the URL can be transmitted to online content management system by client device to access the content item. In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created. The sharing module is responsible for sharing the designated folder and configuration data with a client device of the application developer.

Synchronization module automatically synchronizes content from one or more client devices and is one means for performing this function. The synchronization can be platform agnostic. That is the content can be synchronized across multiple client devices of varying type capabilities operating systems etc. For example CMS client application synchronizes via synchronization module at online content management system content in client device s content management system with the content in an associated user account on system . CMS client application synchronizes any changes to specified content e.g. content located in a designated folder or its sub folders with the synchronization module . Such changes include new deleted modified copied or moved files or folders. Synchronization module also provides any changes to content associated with client device to CMS client application . This synchronizes the local content at client device with the content items at online content management system . The synchronization module synchronizes updates to configuration data made by an application developer on application development system to those client devices with which configuration data is shared.

Conflict management module determines whether there are any discrepancies between versions of a content item located at different client devices and is one means for performing this function. For example when a content item is modified at one client device and a client device differing versions of the content item may exist at each client device. Synchronization module determines such versioning conflicts for example by identifying the modification time of the content item modifications. Conflict management module resolves the conflict between versions by any suitable means such as by merging the versions or by notifying client device of the later submitted version.

Content saving module makes content items of third party providers available to a user via the user s account on online content management system and is one means for performing this function. In one embodiment content saving module receives a request that specifies the user of online content management system for whom the content item should be saved the content item to be saved and the content provider that provides the content. Content saving module determines whether the content item has already been stored within content storage and if not obtains the content item from the third party content provider if it has not already been obtained and stores it within content storage .

Online content management system may be implemented using a single computer or a network of computers including cloud based computer implementations. For the purposes of this disclosure a computer is device having one or more processors memory storage devices and networking resources. The computers are preferably server class computers including one or more high performance CPUs and 1G or more of main memory as well as 500 Gb to 2 Tb of computer readable persistent storage and running an operating system such as LINUX or variants thereof. The operations of online content management system as described herein can be controlled through either hardware or through computer programs installed in computer storage and executed by the processors of such server to perform the functions described herein. These systems include other hardware elements necessary for the operations described here including network interfaces and protocols input devices for data entry and output devices for display printing or other presentations of data but which are not described herein. Similarly conventional elements such as firewalls load balancers notes servers failover servers network management tools and so forth are not shown so as not to obscure the features of the system. Finally the functions and operations of online content management system are sufficiently complex as to require implementation on a computer system and cannot be performed in the human mind simply by mental steps.

An application developer can use the online content management system to rapidly develop and fine tune the design and operation of content applications for client devices . show a sequence diagram illustrating an example of the operations of content management system in conjunction with application development system and content application on client device .

Referring to using application development system the application developer generates S the code files for content application for client device including configuration data . This includes the steps of source code development static and dynamic analysis debugging compilation build automation and so forth.

The application developer stores S configuration data to a local folder or directory on application development system that the developer has designated as being shared via content management system . For example where content application is an iOS application the application developer can designate the main bundle directory for application as the folder being shared with content management system . Alternatively the application developer can designate a folder that is separate from the main application folder for content application . The application developer then installs S client application on client device .

CMS client application identifies S that there is new configuration data to be shared in the designated directory and notifies S content management system . Content management system receives configuration data from CMS client application and stores S it in the account associated with the application developer. Content management system determines S from the application developer s account the other devices such as client device with which to share configuration data . Content management system notifies S CMS client application on client device that there is an shared file available for synchronization i.e. configuration data though CMS client application is generally agnostic as to the nature of the file being synched . Content management system then synchronizes S configuration data to CMS client application on client device to the folder therein designated by the application developer for storing configuration data . Thus client device has a copy of configuration data .

On client device content application is launched S . Application reads S configuration data from the designated storage location at which it is stored by local CMS client application . Upon reading configuration data content application applies the various application parameters specified therein and begins execution S . As described above the application parameters can define the appearance as well as functional operation of the content application. Content application can read configuration data during execution to obtain further operational parameters.

Referring now to the application developer at some point later modifies S configuration data on application development system to provide updated or new parameters thereby creating a modified version of configuration data . CMS client application identifies S the modified configuration data in the local storage of application development system . CMS client application notifies S content management system that configuration data has been modified and stores S the modified version of configuration data to content management system .

Content management system identifies S client device one of the devices with which the modified configuration data is shared and notifies S CMS client application on client device that configuration data has been modified. Content management system then synchronizes S the modified configuration data to CMS client application on client device . CMS client application notifies S content application that configuration data has been modified. Content application reads S the modified configuration data and executes S using the updated or new parameters thereby adjusting changing or otherwise altering the appearance and or functional operation of application based on the modified parameters.

In one embodiment of the foregoing content management system and CMS client application are agnostic as to the contents of configuration data being individual properties and parameters treating the information therein as undifferentiated data. Accordingly when configuration data is modified content application reads the all of updated configuration data . For example where the configuration data is maintained in a configuration file the entire configuration file would be synchronized between the application development system and the client device and read by the content application . In another embodiment content management system and CMS client applications are configured to read and parse configuration data into individual parameters e.g. name value pairs and operate upon the parameters as individual elements rather than simply as part of an entire file. This enables content management system to store and retrieve the parameters individually allowing CMS client applications to likewise access the parameters individually as needed by content application . Accordingly when individuals ones of the parameters are modified S by the application developer CMS client application on application development system identifies S the modified parameters among the configuration data and stores S those to content management system . Content management system in turn notifies S CMS client application on client device of which individual parameters of configuration data have been modified and synchronizes S those modified parameters to configuration data on the client device without rewriting the unmodified parameters or portions of configuration data. CMS client application then notifies S content application of the particular modified parameters and content application reads S just the modified parameters from configuration data as necessary and executes S accordingly adjusting its operation based on the modified parameters. A further detailed discussion of the mechanisms and processes for handling individual data items by content management system is provided in U.S. application Ser. No. 14 040 584 filed on Sep. 27 2013 which is incorporated by reference herein in its entirety.

The present invention has been described in particular detail with respect to several possible embodiments. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. Reference in the specification to one embodiment or to an embodiment means that a particular feature structure or characteristic described in connection with the embodiments is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

In this description the term module refers to computational logic for providing the specified functionality. A module can be implemented in hardware firmware and or software. It will be understood that the named modules described herein represent one embodiment and other embodiments may include other modules. In addition other embodiments may lack modules described herein and or distribute the described functionality among the modules in a different manner. Additionally the functionalities attributed to more than one module can be incorporated into a single module. Where the modules described herein are implemented as software the module can be implemented as a standalone program but can also be implemented through other means for example as part of a larger program as a plurality of separate programs or as one or more statically or dynamically linked libraries. In any of these software implementations the modules are stored on the computer readable persistent storage devices of a system loaded into memory and executed by the one or more processors of the system s computers.

The operations herein may also be performed by an apparatus. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of media suitable for storing electronic instructions and each coupled to a computer system bus. Furthermore the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may also be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description. In addition the present invention is not restricted to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the present invention and any references to specific languages are provided for enablement purposes or to describe the best mode.

Finally it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

